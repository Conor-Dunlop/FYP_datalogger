
NEW_G4_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb54  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  0800cd34  0800cd34  0001cd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce38  0800ce38  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce38  0800ce38  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce38  0800ce38  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce3c  0800ce3c  0001ce3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ce40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001570  200001d4  0800d014  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001744  0800d014  00021744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020a91  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005575  00000000  00000000  00040cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c30  00000000  00000000  00046250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001545  00000000  00000000  00047e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027aeb  00000000  00000000  000493c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026846  00000000  00000000  00070eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e86b0  00000000  00000000  000976f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a68  00000000  00000000  0017fda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  00187810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cd1c 	.word	0x0800cd1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800cd1c 	.word	0x0800cd1c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08c      	sub	sp, #48	; 0x30
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	601a      	str	r2, [r3, #0]
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00b fca5 	bl	800c414 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aca:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000acc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ad0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ad2:	4b30      	ldr	r3, [pc, #192]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000ad4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ad8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ada:	4b2e      	ldr	r3, [pc, #184]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae0:	4b2c      	ldr	r3, [pc, #176]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aec:	4b29      	ldr	r3, [pc, #164]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af2:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000af4:	2204      	movs	r2, #4
 8000af6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000af8:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000afe:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000b04:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b18:	4b1e      	ldr	r3, [pc, #120]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b26:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b34:	4817      	ldr	r0, [pc, #92]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b36:	f001 fa73 	bl	8002020 <HAL_ADC_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b40:	f000 fd55 	bl	80015ee <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4811      	ldr	r0, [pc, #68]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b50:	f002 f800 	bl	8002b54 <HAL_ADCEx_MultiModeConfigChannel>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000b5a:	f000 fd48 	bl	80015ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_ADC1_Init+0xec>)
 8000b60:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b62:	2306      	movs	r3, #6
 8000b64:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b6a:	237f      	movs	r3, #127	; 0x7f
 8000b6c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b6e:	2304      	movs	r3, #4
 8000b70:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	; (8000b94 <MX_ADC1_Init+0xe8>)
 8000b7c:	f001 fbd4 	bl	8002328 <HAL_ADC_ConfigChannel>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000b86:	f000 fd32 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	3730      	adds	r7, #48	; 0x30
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200001f0 	.word	0x200001f0
 8000b98:	04300002 	.word	0x04300002

08000b9c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b088      	sub	sp, #32
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2220      	movs	r2, #32
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f00b fc33 	bl	800c414 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bae:	4b2b      	ldr	r3, [pc, #172]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bb0:	4a2b      	ldr	r2, [pc, #172]	; (8000c60 <MX_ADC2_Init+0xc4>)
 8000bb2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000bba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bd4:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bd6:	2204      	movs	r2, #4
 8000bd8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf4:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfa:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c16:	4811      	ldr	r0, [pc, #68]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000c18:	f001 fa02 	bl	8002020 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000c22:	f000 fce4 	bl	80015ee <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_ADC2_Init+0xc8>)
 8000c28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2a:	2306      	movs	r3, #6
 8000c2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c32:	237f      	movs	r3, #127	; 0x7f
 8000c34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c36:	2304      	movs	r3, #4
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_ADC2_Init+0xc0>)
 8000c44:	f001 fb70 	bl	8002328 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000c4e:	f000 fcce 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	3720      	adds	r7, #32
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000025c 	.word	0x2000025c
 8000c60:	50000100 	.word	0x50000100
 8000c64:	2e300800 	.word	0x2e300800

08000c68 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09e      	sub	sp, #120	; 0x78
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0320 	add.w	r3, r7, #32
 8000c84:	2244      	movs	r2, #68	; 0x44
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f00b fbc3 	bl	800c414 <memset>
  if(adcHandle->Instance==ADC1)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c96:	d16f      	bne.n	8000d78 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c9c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c9e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 fdf5 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cb4:	f000 fc9b 	bl	80015ee <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cb8:	4b52      	ldr	r3, [pc, #328]	; (8000e04 <HAL_ADC_MspInit+0x19c>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	4a51      	ldr	r2, [pc, #324]	; (8000e04 <HAL_ADC_MspInit+0x19c>)
 8000cc0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cc2:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <HAL_ADC_MspInit+0x19c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d10b      	bne.n	8000ce2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cca:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a4e      	ldr	r2, [pc, #312]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000cd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b4c      	ldr	r3, [pc, #304]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce2:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a48      	ldr	r2, [pc, #288]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000ce8:	f043 0304 	orr.w	r3, r3, #4
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b46      	ldr	r3, [pc, #280]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f003 0304 	and.w	r3, r3, #4
 8000cf6:	61bb      	str	r3, [r7, #24]
 8000cf8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b43      	ldr	r3, [pc, #268]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a42      	ldr	r2, [pc, #264]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b40      	ldr	r3, [pc, #256]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b3d      	ldr	r3, [pc, #244]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	4a3c      	ldr	r2, [pc, #240]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d1e:	4b3a      	ldr	r3, [pc, #232]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	613b      	str	r3, [r7, #16]
 8000d28:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_7_Pin|ADC_8_Pin|ADC_9_Pin|ADC_10_Pin;
 8000d2a:	230f      	movs	r3, #15
 8000d2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4833      	ldr	r0, [pc, #204]	; (8000e0c <HAL_ADC_MspInit+0x1a4>)
 8000d3e:	f002 fa97 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|OPAMP_SIG_2_Pin|OPAMP_SIG_4_Pin;
 8000d42:	230b      	movs	r3, #11
 8000d44:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d46:	2303      	movs	r3, #3
 8000d48:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f002 fa8a 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPAMP_SIG_1_Pin|ADC_3_Pin|DIGITAL_IO_2_Pin;
 8000d5c:	f245 0301 	movw	r3, #20481	; 0x5001
 8000d60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d62:	2303      	movs	r3, #3
 8000d64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4827      	ldr	r0, [pc, #156]	; (8000e10 <HAL_ADC_MspInit+0x1a8>)
 8000d72:	f002 fa7d 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d76:	e041      	b.n	8000dfc <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a25      	ldr	r2, [pc, #148]	; (8000e14 <HAL_ADC_MspInit+0x1ac>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d13c      	bne.n	8000dfc <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d86:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d88:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8e:	f107 0320 	add.w	r3, r7, #32
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 fd80 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 8000d9e:	f000 fc26 	bl	80015ee <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000da2:	4b18      	ldr	r3, [pc, #96]	; (8000e04 <HAL_ADC_MspInit+0x19c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <HAL_ADC_MspInit+0x19c>)
 8000daa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <HAL_ADC_MspInit+0x19c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d10b      	bne.n	8000dcc <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	4a13      	ldr	r2, [pc, #76]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000dba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dcc:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_ADC_MspInit+0x1a0>)
 8000dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPAMP_SIG_3_Pin;
 8000de4:	2320      	movs	r3, #32
 8000de6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000de8:	2303      	movs	r3, #3
 8000dea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(OPAMP_SIG_3_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000df4:	4619      	mov	r1, r3
 8000df6:	4805      	ldr	r0, [pc, #20]	; (8000e0c <HAL_ADC_MspInit+0x1a4>)
 8000df8:	f002 fa3a 	bl	8003270 <HAL_GPIO_Init>
}
 8000dfc:	bf00      	nop
 8000dfe:	3778      	adds	r7, #120	; 0x78
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200002c8 	.word	0x200002c8
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000800 	.word	0x48000800
 8000e10:	48000400 	.word	0x48000400
 8000e14:	50000100 	.word	0x50000100

08000e18 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08c      	sub	sp, #48	; 0x30
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2230      	movs	r2, #48	; 0x30
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00b faf5 	bl	800c414 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000e2a:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <MX_DAC1_Init+0x80>)
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <MX_DAC1_Init+0x84>)
 8000e2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000e30:	4819      	ldr	r0, [pc, #100]	; (8000e98 <MX_DAC1_Init+0x80>)
 8000e32:	f002 f842 	bl	8002eba <HAL_DAC_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000e3c:	f000 fbd7 	bl	80015ee <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000e40:	2302      	movs	r3, #2
 8000e42:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	2200      	movs	r2, #0
 8000e68:	4619      	mov	r1, r3
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <MX_DAC1_Init+0x80>)
 8000e6c:	f002 f848 	bl	8002f00 <HAL_DAC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000e76:	f000 fbba 	bl	80015ee <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	2210      	movs	r2, #16
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <MX_DAC1_Init+0x80>)
 8000e82:	f002 f83d 	bl	8002f00 <HAL_DAC_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000e8c:	f000 fbaf 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000e90:	bf00      	nop
 8000e92:	3730      	adds	r7, #48	; 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200002cc 	.word	0x200002cc
 8000e9c:	50000800 	.word	0x50000800

08000ea0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <HAL_DAC_MspInit+0x74>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d124      	bne.n	8000f0c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <HAL_DAC_MspInit+0x78>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 8000ef2:	2330      	movs	r3, #48	; 0x30
 8000ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	4619      	mov	r1, r3
 8000f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f08:	f002 f9b2 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	50000800 	.word	0x50000800
 8000f18:	40021000 	.word	0x40021000

08000f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f36:	4a5c      	ldr	r2, [pc, #368]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f38:	f043 0304 	orr.w	r3, r3, #4
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	f003 0304 	and.w	r3, r3, #4
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4a:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a56      	ldr	r2, [pc, #344]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f50:	f043 0320 	orr.w	r3, r3, #32
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b54      	ldr	r3, [pc, #336]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0320 	and.w	r3, r3, #32
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b51      	ldr	r3, [pc, #324]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a50      	ldr	r2, [pc, #320]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b4e      	ldr	r3, [pc, #312]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b4b      	ldr	r3, [pc, #300]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a4a      	ldr	r2, [pc, #296]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f92:	4b45      	ldr	r3, [pc, #276]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a44      	ldr	r2, [pc, #272]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000f98:	f043 0308 	orr.w	r3, r3, #8
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_GPIO_Init+0x18c>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 8000faa:	2200      	movs	r2, #0
 8000fac:	f24a 41a2 	movw	r1, #42146	; 0xa4a2
 8000fb0:	483e      	ldr	r0, [pc, #248]	; (80010ac <MX_GPIO_Init+0x190>)
 8000fb2:	f002 fadf 	bl	8003574 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8000fbc:	483c      	ldr	r0, [pc, #240]	; (80010b0 <MX_GPIO_Init+0x194>)
 8000fbe:	f002 fad9 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_EN_GPIO_Port, SD_CARD_EN_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f002 fad2 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4837      	ldr	r0, [pc, #220]	; (80010b4 <MX_GPIO_Init+0x198>)
 8000fd6:	f002 facd 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_IO_1_Pin|COMMS_IO_2_Pin|COMMS_IO_3_Pin;
 8000fda:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000fde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4830      	ldr	r0, [pc, #192]	; (80010b0 <MX_GPIO_Init+0x194>)
 8000ff0:	f002 f93e 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100a:	f002 f931 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 800100e:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
 8001012:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	2301      	movs	r3, #1
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101c:	2300      	movs	r3, #0
 800101e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4821      	ldr	r0, [pc, #132]	; (80010ac <MX_GPIO_Init+0x190>)
 8001028:	f002 f922 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_1_Pin|DIGITAL_IO_6_Pin|SD_CARD_DETECT_Pin;
 800102c:	f640 2304 	movw	r3, #2564	; 0xa04
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	481a      	ldr	r0, [pc, #104]	; (80010ac <MX_GPIO_Init+0x190>)
 8001042:	f002 f915 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin;
 8001046:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104c:	2301      	movs	r3, #1
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4814      	ldr	r0, [pc, #80]	; (80010b0 <MX_GPIO_Init+0x194>)
 8001060:	f002 f906 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_EN_Pin;
 8001064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001068:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CARD_EN_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f002 f8f6 	bl	8003270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 8001084:	2304      	movs	r3, #4
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_GPIO_Init+0x198>)
 800109c:	f002 f8e8 	bl	8003270 <HAL_GPIO_Init>

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40021000 	.word	0x40021000
 80010ac:	48000400 	.word	0x48000400
 80010b0:	48000800 	.word	0x48000800
 80010b4:	48000c00 	.word	0x48000c00

080010b8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_I2C2_Init+0x74>)
 80010be:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <MX_I2C2_Init+0x78>)
 80010c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_I2C2_Init+0x74>)
 80010c4:	f240 1203 	movw	r2, #259	; 0x103
 80010c8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_I2C2_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_I2C2_Init+0x74>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <MX_I2C2_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_I2C2_Init+0x74>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_I2C2_Init+0x74>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_I2C2_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_I2C2_Init+0x74>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_I2C2_Init+0x74>)
 80010f6:	f002 fa6f 	bl	80035d8 <HAL_I2C_Init>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001100:	f000 fa75 	bl	80015ee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_I2C2_Init+0x74>)
 8001108:	f002 ffb6 	bl	8004078 <HAL_I2CEx_ConfigAnalogFilter>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001112:	f000 fa6c 	bl	80015ee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001116:	2100      	movs	r1, #0
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_I2C2_Init+0x74>)
 800111a:	f002 fff8 	bl	800410e <HAL_I2CEx_ConfigDigitalFilter>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001124:	f000 fa63 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200002e0 	.word	0x200002e0
 8001130:	40005800 	.word	0x40005800

08001134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b09c      	sub	sp, #112	; 0x70
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2244      	movs	r2, #68	; 0x44
 8001152:	2100      	movs	r1, #0
 8001154:	4618      	mov	r0, r3
 8001156:	f00b f95d 	bl	800c414 <memset>
  if(i2cHandle->Instance==I2C2)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a2d      	ldr	r2, [pc, #180]	; (8001214 <HAL_I2C_MspInit+0xe0>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d153      	bne.n	800120c <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001168:	2300      	movs	r3, #0
 800116a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800116c:	f107 0318 	add.w	r3, r7, #24
 8001170:	4618      	mov	r0, r3
 8001172:	f005 fb91 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800117c:	f000 fa37 	bl	80015ee <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001180:	4b25      	ldr	r3, [pc, #148]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	4a24      	ldr	r2, [pc, #144]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011a4:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80011b0:	2310      	movs	r3, #16
 80011b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011b4:	2312      	movs	r3, #18
 80011b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011c0:	2304      	movs	r3, #4
 80011c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <HAL_I2C_MspInit+0xe8>)
 80011cc:	f002 f850 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011d6:	2312      	movs	r3, #18
 80011d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011e2:	2304      	movs	r3, #4
 80011e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f002 f83e 	bl	8003270 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 80011f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 80011fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_I2C_MspInit+0xe4>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800120c:	bf00      	nop
 800120e:	3770      	adds	r7, #112	; 0x70
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40005800 	.word	0x40005800
 8001218:	40021000 	.word	0x40021000
 800121c:	48000800 	.word	0x48000800

08001220 <HAL_LPTIM_MspInit>:
  /* USER CODE END LPTIM1_Init 2 */

}

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2244      	movs	r2, #68	; 0x44
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f00b f8ef 	bl	800c414 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a11      	ldr	r2, [pc, #68]	; (8001280 <HAL_LPTIM_MspInit+0x60>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d11a      	bne.n	8001276 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001240:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001244:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8001246:	2300      	movs	r3, #0
 8001248:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	4618      	mov	r0, r3
 8001250:	f005 fb22 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800125a:	f000 f9c8 	bl	80015ee <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_LPTIM_MspInit+0x64>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_LPTIM_MspInit+0x64>)
 8001264:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b06      	ldr	r3, [pc, #24]	; (8001284 <HAL_LPTIM_MspInit+0x64>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3750      	adds	r7, #80	; 0x50
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40007c00 	.word	0x40007c00
 8001284:	40021000 	.word	0x40021000

08001288 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af02      	add	r7, sp, #8
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2];
	int32_t tempC = -100;
 8001292:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001296:	617b      	str	r3, [r7, #20]
	uint8_t store = 0b00000101;
 8001298:	2305      	movs	r3, #5
 800129a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &store, 1, HAL_MAX_DELAY);
 800129c:	f107 020f 	add.w	r2, r7, #15
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	2130      	movs	r1, #48	; 0x30
 80012aa:	4827      	ldr	r0, [pc, #156]	; (8001348 <readMCP9804Temp+0xc0>)
 80012ac:	f002 fa30 	bl	8003710 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY) != HAL_OK){
 80012b0:	f107 0210 	add.w	r2, r7, #16
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2302      	movs	r3, #2
 80012bc:	2130      	movs	r1, #48	; 0x30
 80012be:	4822      	ldr	r0, [pc, #136]	; (8001348 <readMCP9804Temp+0xc0>)
 80012c0:	f002 fb3e 	bl	8003940 <HAL_I2C_Master_Receive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d004      	beq.n	80012d4 <readMCP9804Temp+0x4c>
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 80012ca:	2200      	movs	r2, #0
 80012cc:	2104      	movs	r1, #4
 80012ce:	481f      	ldr	r0, [pc, #124]	; (800134c <readMCP9804Temp+0xc4>)
 80012d0:	f002 f950 	bl	8003574 <HAL_GPIO_WritePin>
	}
	uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 80012d4:	7c3b      	ldrb	r3, [r7, #16]
 80012d6:	021b      	lsls	r3, r3, #8
 80012d8:	b21a      	sxth	r2, r3
 80012da:	7c7b      	ldrb	r3, [r7, #17]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	827b      	strh	r3, [r7, #18]
	rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 80012e4:	8a7b      	ldrh	r3, [r7, #18]
 80012e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012ea:	827b      	strh	r3, [r7, #18]
	tempC = rawTemp & 0x0FFF;
 80012ec:	8a7b      	ldrh	r3, [r7, #18]
 80012ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80012f2:	617b      	str	r3, [r7, #20]
	tempC /= 16.0;
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff f935 	bl	8000564 <__aeabi_i2d>
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <readMCP9804Temp+0xc8>)
 8001300:	f7ff fac4 	bl	800088c <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fba6 	bl	8000a5c <__aeabi_d2iz>
 8001310:	4603      	mov	r3, r0
 8001312:	617b      	str	r3, [r7, #20]
	if (rawTemp & 0x1000) {  // Check sign bit
 8001314:	8a7b      	ldrh	r3, [r7, #18]
 8001316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00f      	beq.n	800133e <readMCP9804Temp+0xb6>
	  tempC -= 256.0;
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff f920 	bl	8000564 <__aeabi_i2d>
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <readMCP9804Temp+0xcc>)
 800132a:	f7fe ffcd 	bl	80002c8 <__aeabi_dsub>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f7ff fb91 	bl	8000a5c <__aeabi_d2iz>
 800133a:	4603      	mov	r3, r0
 800133c:	617b      	str	r3, [r7, #20]
	}
    return tempC;
 800133e:	697b      	ldr	r3, [r7, #20]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200002e0 	.word	0x200002e0
 800134c:	48000c00 	.word	0x48000c00
 8001350:	40300000 	.word	0x40300000
 8001354:	40700000 	.word	0x40700000

08001358 <main>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int main(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b0f8      	sub	sp, #480	; 0x1e0
 800135c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135e:	f000 fbf6 	bl	8001b4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 f8f5 	bl	8001550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f7ff fdd9 	bl	8000f1c <MX_GPIO_Init>
  MX_ADC1_Init();
 800136a:	f7ff fb9f 	bl	8000aac <MX_ADC1_Init>
  MX_ADC2_Init();
 800136e:	f7ff fc15 	bl	8000b9c <MX_ADC2_Init>
  MX_DAC1_Init();
 8001372:	f7ff fd51 	bl	8000e18 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001376:	f000 f9b3 	bl	80016e0 <MX_SPI1_Init>
  MX_UCPD1_Init();
 800137a:	f000 fb91 	bl	8001aa0 <MX_UCPD1_Init>
  MX_I2C2_Init();
 800137e:	f7ff fe9b 	bl	80010b8 <MX_I2C2_Init>
  MX_RTC_Init();
 8001382:	f000 f939 	bl	80015f8 <MX_RTC_Init>
  MX_USB_Device_Init();
 8001386:	f00a fb07 	bl	800b998 <MX_USB_Device_Init>
  MX_SPI3_Init();
 800138a:	f000 f9e7 	bl	800175c <MX_SPI3_Init>

  __HAL_RCC_LPTIM1_CLK_ENABLE();
 800138e:	4b69      	ldr	r3, [pc, #420]	; (8001534 <main+0x1dc>)
 8001390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001392:	4a68      	ldr	r2, [pc, #416]	; (8001534 <main+0x1dc>)
 8001394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001398:	6593      	str	r3, [r2, #88]	; 0x58
 800139a:	4b66      	ldr	r3, [pc, #408]	; (8001534 <main+0x1dc>)
 800139c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80013a2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013a6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013b0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80013b4:	681b      	ldr	r3, [r3, #0]

  // Create LPTIM handle
  LPTIM_HandleTypeDef hlptim;
  hlptim.Instance = LPTIM1;
 80013b6:	4b60      	ldr	r3, [pc, #384]	; (8001538 <main+0x1e0>)
 80013b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

  // Configure LPTIM for continuous mode, source from internal clock
  hlptim.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  hlptim.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1; // No prescaling
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  hlptim.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  hlptim.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE; // Software trigger
 80013ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  hlptim.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  hlptim.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  //hlptim.Init.RepetitionCounter = 0;  // No repetition

  // Initialize LPTIM
  HAL_LPTIM_Init(&hlptim);
 80013e2:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fede 	bl	80041a8 <HAL_LPTIM_Init>
  /* USER CODE BEGIN 2 */
  uint32_t status = HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    int num_bytes = 4;
 80013f2:	2304      	movs	r3, #4
 80013f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    uint8_t dataToSend[4];
    dataToSend[0] = 0xFF;// Example data
 80013f8:	23ff      	movs	r3, #255	; 0xff
 80013fa:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
    dataToSend[1] = 0x5;// Example data
 80013fe:	2305      	movs	r3, #5
 8001400:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
    dataToSend[2] = 0xF0;// Example data
 8001404:	23f0      	movs	r3, #240	; 0xf0
 8001406:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
    dataToSend[3] = 0xF;// Example data
 800140a:	230f      	movs	r3, #15
 800140c:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b

    //HAL_StatusTypeDef sts = HAL_OK;


    HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 8001410:	2201      	movs	r2, #1
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	4849      	ldr	r0, [pc, #292]	; (800153c <main+0x1e4>)
 8001416:	f002 f8ad 	bl	8003574 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 800141a:	2201      	movs	r2, #1
 800141c:	2120      	movs	r1, #32
 800141e:	4847      	ldr	r0, [pc, #284]	; (800153c <main+0x1e4>)
 8001420:	f002 f8a8 	bl	8003574 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001424:	2201      	movs	r2, #1
 8001426:	2104      	movs	r1, #4
 8001428:	4845      	ldr	r0, [pc, #276]	; (8001540 <main+0x1e8>)
 800142a:	f002 f8a3 	bl	8003574 <HAL_GPIO_WritePin>

    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800142e:	4845      	ldr	r0, [pc, #276]	; (8001544 <main+0x1ec>)
 8001430:	f002 f8d2 	bl	80035d8 <HAL_I2C_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d004      	beq.n	8001444 <main+0xec>
			// Initialization error
	  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 800143a:	2200      	movs	r2, #0
 800143c:	2104      	movs	r1, #4
 800143e:	4840      	ldr	r0, [pc, #256]	; (8001540 <main+0x1e8>)
 8001440:	f002 f898 	bl	8003574 <HAL_GPIO_WritePin>
		}
	uint8_t tempRegAddr = 0x05;
 8001444:	2305      	movs	r3, #5
 8001446:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
    uint8_t buffer[255];
    char buff[128];

    uint8_t initials = 0b00000010;
 800144a:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 800144e:	f2a3 13d1 	subw	r3, r3, #465	; 0x1d1
 8001452:	2202      	movs	r2, #2
 8001454:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &initials, 1, HAL_MAX_DELAY);
 8001456:	1dfa      	adds	r2, r7, #7
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	2301      	movs	r3, #1
 8001460:	2130      	movs	r1, #48	; 0x30
 8001462:	4838      	ldr	r0, [pc, #224]	; (8001544 <main+0x1ec>)
 8001464:	f002 f954 	bl	8003710 <HAL_I2C_Master_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
		HAL_Delay(100);
 8001468:	2064      	movs	r0, #100	; 0x64
 800146a:	f000 fbe1 	bl	8001c30 <HAL_Delay>
		//HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
		int32_t tempC = readMCP9804Temp(tempRegAddr);
 800146e:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff08 	bl	8001288 <readMCP9804Temp>
 8001478:	f8c7 01c8 	str.w	r0, [r7, #456]	; 0x1c8
		dataToSend[0] = (tempC >> 24) & 0xFF;
 800147c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001480:	0e1b      	lsrs	r3, r3, #24
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f887 3188 	strb.w	r3, [r7, #392]	; 0x188
		dataToSend[1] = (tempC >> 16) & 0xFF;
 8001488:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800148c:	141b      	asrs	r3, r3, #16
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f887 3189 	strb.w	r3, [r7, #393]	; 0x189
		dataToSend[2] = (tempC >> 8) & 0xFF;
 8001494:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001498:	121b      	asrs	r3, r3, #8
 800149a:	b2db      	uxtb	r3, r3
 800149c:	f887 318a 	strb.w	r3, [r7, #394]	; 0x18a
		dataToSend[3] = tempC & 0xFF;
 80014a0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
		int amount_fmted = snprintf(buff, sizeof(buff), "temp %ld \r\n", tempC);
 80014aa:	f107 0008 	add.w	r0, r7, #8
 80014ae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014b2:	4a25      	ldr	r2, [pc, #148]	; (8001548 <main+0x1f0>)
 80014b4:	2180      	movs	r1, #128	; 0x80
 80014b6:	f00a ff79 	bl	800c3ac <sniprintf>
 80014ba:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
		switch (CDC_Transmit_FS((uint8_t*)buff, amount_fmted)){
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00a fb24 	bl	800bb14 <CDC_Transmit_FS>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	d010      	beq.n	80014f4 <main+0x19c>
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	dc13      	bgt.n	80014fe <main+0x1a6>
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <main+0x188>
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d005      	beq.n	80014ea <main+0x192>
			break;
		case USBD_FAIL: // if the device can support USB coms device it will blink red
			HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
			break;
		default:
			break;
 80014de:	e00e      	b.n	80014fe <main+0x1a6>
			HAL_GPIO_TogglePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin);
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	4816      	ldr	r0, [pc, #88]	; (800153c <main+0x1e4>)
 80014e4:	f002 f85e 	bl	80035a4 <HAL_GPIO_TogglePin>
			break;
 80014e8:	e00a      	b.n	8001500 <main+0x1a8>
			HAL_GPIO_TogglePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin);
 80014ea:	2120      	movs	r1, #32
 80014ec:	4813      	ldr	r0, [pc, #76]	; (800153c <main+0x1e4>)
 80014ee:	f002 f859 	bl	80035a4 <HAL_GPIO_TogglePin>
			break;
 80014f2:	e005      	b.n	8001500 <main+0x1a8>
			HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
 80014f4:	2104      	movs	r1, #4
 80014f6:	4812      	ldr	r0, [pc, #72]	; (8001540 <main+0x1e8>)
 80014f8:	f002 f854 	bl	80035a4 <HAL_GPIO_TogglePin>
			break;
 80014fc:	e000      	b.n	8001500 <main+0x1a8>
			break;
 80014fe:	bf00      	nop
		}

    	HAL_Delay(100);
 8001500:	2064      	movs	r0, #100	; 0x64
 8001502:	f000 fb95 	bl	8001c30 <HAL_Delay>
		//HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
    	status = HAL_SPI_Transmit(&hspi3,(uint8_t*)buff, amount_fmted, HAL_MAX_DELAY);
 8001506:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800150a:	b29a      	uxth	r2, r3
 800150c:	f107 0108 	add.w	r1, r7, #8
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <main+0x1f4>)
 8001516:	f005 fdeb 	bl	80070f0 <HAL_SPI_Transmit>
 800151a:	4603      	mov	r3, r0
 800151c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
		if (status == HAL_OK) {
 8001520:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d19f      	bne.n	8001468 <main+0x110>
			//HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
			//HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
			HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001528:	2201      	movs	r2, #1
 800152a:	2104      	movs	r1, #4
 800152c:	4804      	ldr	r0, [pc, #16]	; (8001540 <main+0x1e8>)
 800152e:	f002 f821 	bl	8003574 <HAL_GPIO_WritePin>
    {
 8001532:	e799      	b.n	8001468 <main+0x110>
 8001534:	40021000 	.word	0x40021000
 8001538:	40007c00 	.word	0x40007c00
 800153c:	48000400 	.word	0x48000400
 8001540:	48000c00 	.word	0x48000c00
 8001544:	200002e0 	.word	0x200002e0
 8001548:	0800cda0 	.word	0x0800cda0
 800154c:	200003c0 	.word	0x200003c0

08001550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b094      	sub	sp, #80	; 0x50
 8001554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001556:	f107 0318 	add.w	r3, r7, #24
 800155a:	2238      	movs	r2, #56	; 0x38
 800155c:	2100      	movs	r1, #0
 800155e:	4618      	mov	r0, r3
 8001560:	f00a ff58 	bl	800c414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001576:	f004 fbe9 	bl	8005d4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800157a:	230a      	movs	r3, #10
 800157c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800157e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001584:	2340      	movs	r3, #64	; 0x40
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001588:	2301      	movs	r3, #1
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800158c:	2302      	movs	r3, #2
 800158e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001590:	2302      	movs	r3, #2
 8001592:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001594:	2301      	movs	r3, #1
 8001596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001598:	230c      	movs	r3, #12
 800159a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800159c:	2302      	movs	r3, #2
 800159e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80015a0:	2304      	movs	r3, #4
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	4618      	mov	r0, r3
 80015ae:	f004 fc71 	bl	8005e94 <HAL_RCC_OscConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80015b8:	f000 f819 	bl	80015ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015bc:	230f      	movs	r3, #15
 80015be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015c0:	2301      	movs	r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80015c8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80015cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 ff6e 	bl	80064b8 <HAL_RCC_ClockConfig>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015e2:	f000 f804 	bl	80015ee <Error_Handler>
  }
}
 80015e6:	bf00      	nop
 80015e8:	3750      	adds	r7, #80	; 0x50
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f2:	b672      	cpsid	i
}
 80015f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f6:	e7fe      	b.n	80015f6 <Error_Handler+0x8>

080015f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015fc:	4b18      	ldr	r3, [pc, #96]	; (8001660 <MX_RTC_Init+0x68>)
 80015fe:	4a19      	ldr	r2, [pc, #100]	; (8001664 <MX_RTC_Init+0x6c>)
 8001600:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001602:	4b17      	ldr	r3, [pc, #92]	; (8001660 <MX_RTC_Init+0x68>)
 8001604:	2200      	movs	r2, #0
 8001606:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001608:	4b15      	ldr	r3, [pc, #84]	; (8001660 <MX_RTC_Init+0x68>)
 800160a:	227f      	movs	r2, #127	; 0x7f
 800160c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_RTC_Init+0x68>)
 8001610:	22ff      	movs	r2, #255	; 0xff
 8001612:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <MX_RTC_Init+0x68>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_RTC_Init+0x68>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_RTC_Init+0x68>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_RTC_Init+0x68>)
 8001628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_RTC_Init+0x68>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <MX_RTC_Init+0x68>)
 8001636:	f005 fb1f 	bl	8006c78 <HAL_RTC_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001640:	f7ff ffd5 	bl	80015ee <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8001644:	2206      	movs	r2, #6
 8001646:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_RTC_Init+0x68>)
 800164c:	f005 fc31 	bl	8006eb2 <HAL_RTCEx_SetWakeUpTimer>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001656:	f7ff ffca 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000334 	.word	0x20000334
 8001664:	40002800 	.word	0x40002800

08001668 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b094      	sub	sp, #80	; 0x50
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2244      	movs	r2, #68	; 0x44
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f00a fecb 	bl	800c414 <memset>
  if(rtcHandle->Instance==RTC)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <HAL_RTC_MspInit+0x70>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d123      	bne.n	80016d0 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001688:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800168c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800168e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001692:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4618      	mov	r0, r3
 800169a:	f005 f8fd 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016a4:	f7ff ffa3 	bl	80015ee <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_RTC_MspInit+0x74>)
 80016aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_RTC_MspInit+0x74>)
 80016b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	; (80016dc <HAL_RTC_MspInit+0x74>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_RTC_MspInit+0x74>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c2:	6593      	str	r3, [r2, #88]	; 0x58
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <HAL_RTC_MspInit+0x74>)
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80016d0:	bf00      	nop
 80016d2:	3750      	adds	r7, #80	; 0x50
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40002800 	.word	0x40002800
 80016dc:	40021000 	.word	0x40021000

080016e0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <MX_SPI1_Init+0x74>)
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <MX_SPI1_Init+0x78>)
 80016e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	; (8001754 <MX_SPI1_Init+0x74>)
 80016ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <MX_SPI1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <MX_SPI1_Init+0x74>)
 80016fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001700:	4b14      	ldr	r3, [pc, #80]	; (8001754 <MX_SPI1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_SPI1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_SPI1_Init+0x74>)
 800170e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001712:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001714:	4b0f      	ldr	r3, [pc, #60]	; (8001754 <MX_SPI1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_SPI1_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_SPI1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_SPI1_Init+0x74>)
 800172e:	2207      	movs	r2, #7
 8001730:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_SPI1_Init+0x74>)
 8001734:	2200      	movs	r2, #0
 8001736:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_SPI1_Init+0x74>)
 800173a:	2208      	movs	r2, #8
 800173c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_SPI1_Init+0x74>)
 8001740:	f005 fc2b 	bl	8006f9a <HAL_SPI_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800174a:	f7ff ff50 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000035c 	.word	0x2000035c
 8001758:	40013000 	.word	0x40013000

0800175c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <MX_SPI3_Init+0x74>)
 8001762:	4a1c      	ldr	r2, [pc, #112]	; (80017d4 <MX_SPI3_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001766:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <MX_SPI3_Init+0x74>)
 8001768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800176c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <MX_SPI3_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001774:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <MX_SPI3_Init+0x74>)
 8001776:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800177a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800177c:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <MX_SPI3_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001782:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <MX_SPI3_Init+0x74>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_SPI3_Init+0x74>)
 800178a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800178e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001790:	4b0f      	ldr	r3, [pc, #60]	; (80017d0 <MX_SPI3_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_SPI3_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_SPI3_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_SPI3_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_SPI3_Init+0x74>)
 80017aa:	2207      	movs	r2, #7
 80017ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_SPI3_Init+0x74>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_SPI3_Init+0x74>)
 80017b6:	2208      	movs	r2, #8
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_SPI3_Init+0x74>)
 80017bc:	f005 fbed 	bl	8006f9a <HAL_SPI_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80017c6:	f7ff ff12 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200003c0 	.word	0x200003c0
 80017d4:	40003c00 	.word	0x40003c00

080017d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08c      	sub	sp, #48	; 0x30
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a3d      	ldr	r2, [pc, #244]	; (80018ec <HAL_SPI_MspInit+0x114>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d145      	bne.n	8001886 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fe:	4a3c      	ldr	r2, [pc, #240]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001800:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001804:	6613      	str	r3, [r2, #96]	; 0x60
 8001806:	4b3a      	ldr	r3, [pc, #232]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800180a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800180e:	61bb      	str	r3, [r7, #24]
 8001810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a36      	ldr	r2, [pc, #216]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b34      	ldr	r3, [pc, #208]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	4b31      	ldr	r3, [pc, #196]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001836:	4b2e      	ldr	r3, [pc, #184]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001842:	23c0      	movs	r3, #192	; 0xc0
 8001844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001852:	2305      	movs	r3, #5
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001860:	f001 fd06 	bl	8003270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001864:	2308      	movs	r3, #8
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001868:	2302      	movs	r3, #2
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001870:	2300      	movs	r3, #0
 8001872:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001874:	2305      	movs	r3, #5
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	481d      	ldr	r0, [pc, #116]	; (80018f4 <HAL_SPI_MspInit+0x11c>)
 8001880:	f001 fcf6 	bl	8003270 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001884:	e02d      	b.n	80018e2 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_SPI_MspInit+0x120>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d128      	bne.n	80018e2 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001894:	4a16      	ldr	r2, [pc, #88]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	6593      	str	r3, [r2, #88]	; 0x58
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 800189e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 80018aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ac:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b4:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_SPI_MspInit+0x118>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018d2:	2306      	movs	r3, #6
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4807      	ldr	r0, [pc, #28]	; (80018fc <HAL_SPI_MspInit+0x124>)
 80018de:	f001 fcc7 	bl	8003270 <HAL_GPIO_Init>
}
 80018e2:	bf00      	nop
 80018e4:	3730      	adds	r7, #48	; 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40013000 	.word	0x40013000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	40003c00 	.word	0x40003c00
 80018fc:	48000800 	.word	0x48000800

08001900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_MspInit+0x44>)
 8001908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190a:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <HAL_MspInit+0x44>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6613      	str	r3, [r2, #96]	; 0x60
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_MspInit+0x44>)
 8001914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_MspInit+0x44>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a08      	ldr	r2, [pc, #32]	; (8001944 <HAL_MspInit+0x44>)
 8001924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_MspInit+0x44>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800194c:	e7fe      	b.n	800194c <NMI_Handler+0x4>

0800194e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001952:	e7fe      	b.n	8001952 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	e7fe      	b.n	8001958 <MemManage_Handler+0x4>

0800195a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <BusFault_Handler+0x4>

08001960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <UsageFault_Handler+0x4>

08001966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001994:	f000 f92e 	bl	8001bf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}

0800199c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019a0:	4802      	ldr	r0, [pc, #8]	; (80019ac <USB_LP_IRQHandler+0x10>)
 80019a2:	f002 fd8d 	bl	80044c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20001100 	.word	0x20001100

080019b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019b8:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <_sbrk+0x5c>)
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <_sbrk+0x60>)
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <_sbrk+0x64>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d102      	bne.n	80019d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <_sbrk+0x64>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	; (8001a18 <_sbrk+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d207      	bcs.n	80019f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e0:	f00a fd20 	bl	800c424 <__errno>
 80019e4:	4603      	mov	r3, r0
 80019e6:	220c      	movs	r2, #12
 80019e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295
 80019ee:	e009      	b.n	8001a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <_sbrk+0x64>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <_sbrk+0x64>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <_sbrk+0x64>)
 8001a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a02:	68fb      	ldr	r3, [r7, #12]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20008000 	.word	0x20008000
 8001a10:	00000400 	.word	0x00000400
 8001a14:	20000424 	.word	0x20000424
 8001a18:	20001748 	.word	0x20001748

08001a1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a20:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <SystemInit+0x20>)
 8001a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a26:	4a05      	ldr	r2, [pc, #20]	; (8001a3c <SystemInit+0x20>)
 8001a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40021000 	.word	0x40021000

08001a70 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
}
 8001a90:	bf00      	nop
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001ab6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001aba:	f7ff ffd9 	bl	8001a70 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f7ff ffbe 	bl	8001a40 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001ac4:	2310      	movs	r3, #16
 8001ac6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001acc:	2300      	movs	r3, #0
 8001ace:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <MX_UCPD1_Init+0x58>)
 8001ad6:	f005 ff30 	bl	800793a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001ada:	2340      	movs	r3, #64	; 0x40
 8001adc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <MX_UCPD1_Init+0x58>)
 8001aec:	f005 ff25 	bl	800793a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	48000400 	.word	0x48000400

08001afc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001afc:	480d      	ldr	r0, [pc, #52]	; (8001b34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001afe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b00:	f7ff ff8c 	bl	8001a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopForever+0xe>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopForever+0x16>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001b2a:	f00a fc81 	bl	800c430 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b2e:	f7ff fc13 	bl	8001358 <main>

08001b32 <LoopForever>:

LoopForever:
    b LoopForever
 8001b32:	e7fe      	b.n	8001b32 <LoopForever>
  ldr   r0, =_estack
 8001b34:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b40:	0800ce40 	.word	0x0800ce40
  ldr r2, =_sbss
 8001b44:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b48:	20001744 	.word	0x20001744

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>

08001b4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f001 f96f 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b5e:	200f      	movs	r0, #15
 8001b60:	f000 f80e 	bl	8001b80 <HAL_InitTick>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d002      	beq.n	8001b70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	e001      	b.n	8001b74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b70:	f7ff fec6 	bl	8001900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b74:	79fb      	ldrb	r3, [r7, #7]

}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_InitTick+0x68>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d022      	beq.n	8001bda <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b94:	4b15      	ldr	r3, [pc, #84]	; (8001bec <HAL_InitTick+0x6c>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_InitTick+0x68>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 f97a 	bl	8002ea2 <HAL_SYSTICK_Config>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10f      	bne.n	8001bd4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	d809      	bhi.n	8001bce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc2:	f001 f946 	bl	8002e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_InitTick+0x70>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e007      	b.n	8001bde <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
 8001bd2:	e004      	b.n	8001bde <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000008 	.word	0x20000008
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	20000004 	.word	0x20000004

08001bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <HAL_IncTick+0x1c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_IncTick+0x20>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4413      	add	r3, r2
 8001c02:	4a03      	ldr	r2, [pc, #12]	; (8001c10 <HAL_IncTick+0x1c>)
 8001c04:	6013      	str	r3, [r2, #0]
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	20000428 	.word	0x20000428
 8001c14:	20000008 	.word	0x20000008

08001c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c1c:	4b03      	ldr	r3, [pc, #12]	; (8001c2c <HAL_GetTick+0x14>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	20000428 	.word	0x20000428

08001c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c38:	f7ff ffee 	bl	8001c18 <HAL_GetTick>
 8001c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c48:	d004      	beq.n	8001c54 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <HAL_Delay+0x40>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	4413      	add	r3, r2
 8001c52:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c54:	bf00      	nop
 8001c56:	f7ff ffdf 	bl	8001c18 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d8f7      	bhi.n	8001c56 <HAL_Delay+0x26>
  {
  }
}
 8001c66:	bf00      	nop
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	20000008 	.word	0x20000008

08001c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	431a      	orrs	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
 8001ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	3360      	adds	r3, #96	; 0x60
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <LL_ADC_SetOffset+0x44>)
 8001cfe:	4013      	ands	r3, r2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d14:	bf00      	nop
 8001d16:	371c      	adds	r7, #28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	03fff000 	.word	0x03fff000

08001d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3360      	adds	r3, #96	; 0x60
 8001d32:	461a      	mov	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	3360      	adds	r3, #96	; 0x60
 8001d60:	461a      	mov	r2, r3
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	431a      	orrs	r2, r3
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d7a:	bf00      	nop
 8001d7c:	371c      	adds	r7, #28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b087      	sub	sp, #28
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3360      	adds	r3, #96	; 0x60
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	431a      	orrs	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001db0:	bf00      	nop
 8001db2:	371c      	adds	r7, #28
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	3360      	adds	r3, #96	; 0x60
 8001dcc:	461a      	mov	r2, r3
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	431a      	orrs	r2, r3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001de6:	bf00      	nop
 8001de8:	371c      	adds	r7, #28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	695b      	ldr	r3, [r3, #20]
 8001e00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	615a      	str	r2, [r3, #20]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b087      	sub	sp, #28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	3330      	adds	r3, #48	; 0x30
 8001e28:	461a      	mov	r2, r3
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	4413      	add	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	211f      	movs	r1, #31
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	0e9b      	lsrs	r3, r3, #26
 8001e50:	f003 011f 	and.w	r1, r3, #31
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e64:	bf00      	nop
 8001e66:	371c      	adds	r7, #28
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3314      	adds	r3, #20
 8001e80:	461a      	mov	r2, r3
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	0e5b      	lsrs	r3, r3, #25
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	4413      	add	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	0d1b      	lsrs	r3, r3, #20
 8001e98:	f003 031f 	and.w	r3, r3, #31
 8001e9c:	2107      	movs	r1, #7
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	0d1b      	lsrs	r3, r3, #20
 8001eaa:	f003 031f 	and.w	r3, r3, #31
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f003 0318 	and.w	r3, r3, #24
 8001eea:	4908      	ldr	r1, [pc, #32]	; (8001f0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eec:	40d9      	lsrs	r1, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	400b      	ands	r3, r1
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	0007ffff 	.word	0x0007ffff

08001f10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6093      	str	r3, [r2, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <LL_ADC_IsEnabled+0x18>
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e000      	b.n	8001fc6 <LL_ADC_IsEnabled+0x1a>
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d101      	bne.n	8001fea <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b08      	cmp	r3, #8
 800200a:	d101      	bne.n	8002010 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
	...

08002020 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e167      	b.n	800230a <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f7fe fe0d 	bl	8000c68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff ff67 	bl	8001f34 <LL_ADC_IsDeepPowerDownEnabled>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff4d 	bl	8001f10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ff82 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d115      	bne.n	80020b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff66 	bl	8001f5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002090:	4ba0      	ldr	r3, [pc, #640]	; (8002314 <HAL_ADC_Init+0x2f4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	4aa0      	ldr	r2, [pc, #640]	; (8002318 <HAL_ADC_Init+0x2f8>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	099b      	lsrs	r3, r3, #6
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020a4:	e002      	b.n	80020ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f9      	bne.n	80020a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff ff64 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c6:	f043 0210 	orr.w	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d2:	f043 0201 	orr.w	r2, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff ff75 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 80020e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f040 8100 	bne.w	80022f8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 80fc 	bne.w	80022f8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002108:	f043 0202 	orr.w	r2, r3, #2
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff ff49 	bl	8001fac <LL_ADC_IsEnabled>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002120:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002124:	f7ff ff42 	bl	8001fac <LL_ADC_IsEnabled>
 8002128:	4604      	mov	r4, r0
 800212a:	487c      	ldr	r0, [pc, #496]	; (800231c <HAL_ADC_Init+0x2fc>)
 800212c:	f7ff ff3e 	bl	8001fac <LL_ADC_IsEnabled>
 8002130:	4603      	mov	r3, r0
 8002132:	4323      	orrs	r3, r4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d105      	bne.n	8002144 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4619      	mov	r1, r3
 800213e:	4878      	ldr	r0, [pc, #480]	; (8002320 <HAL_ADC_Init+0x300>)
 8002140:	f7ff fd98 	bl	8001c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	7f5b      	ldrb	r3, [r3, #29]
 8002148:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800214e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002154:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800215a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002162:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800216e:	2b01      	cmp	r3, #1
 8002170:	d106      	bne.n	8002180 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002176:	3b01      	subs	r3, #1
 8002178:	045b      	lsls	r3, r3, #17
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002194:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	4b60      	ldr	r3, [pc, #384]	; (8002324 <HAL_ADC_Init+0x304>)
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	69b9      	ldr	r1, [r7, #24]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	430a      	orrs	r2, r1
 80021c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff ff14 	bl	8001ff8 <LL_ADC_INJ_IsConversionOngoing>
 80021d0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d16d      	bne.n	80022b4 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d16a      	bne.n	80022b4 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021e2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021fa:	f023 0302 	bic.w	r3, r3, #2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	69b9      	ldr	r1, [r7, #24]
 8002204:	430b      	orrs	r3, r1
 8002206:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d017      	beq.n	8002240 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800221e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002228:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800222c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6911      	ldr	r1, [r2, #16]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800223e:	e013      	b.n	8002268 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800224e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002264:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226e:	2b01      	cmp	r3, #1
 8002270:	d118      	bne.n	80022a4 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002288:	4311      	orrs	r1, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002294:	430a      	orrs	r2, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0201 	orr.w	r2, r2, #1
 80022a0:	611a      	str	r2, [r3, #16]
 80022a2:	e007      	b.n	80022b4 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10c      	bne.n	80022d6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f023 010f 	bic.w	r1, r3, #15
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	1e5a      	subs	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	631a      	str	r2, [r3, #48]	; 0x30
 80022d4:	e007      	b.n	80022e6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 020f 	bic.w	r2, r2, #15
 80022e4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ea:	f023 0303 	bic.w	r3, r3, #3
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80022f6:	e007      	b.n	8002308 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	f043 0210 	orr.w	r2, r3, #16
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002308:	7ffb      	ldrb	r3, [r7, #31]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3724      	adds	r7, #36	; 0x24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd90      	pop	{r4, r7, pc}
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000
 8002318:	053e2d63 	.word	0x053e2d63
 800231c:	50000100 	.word	0x50000100
 8002320:	50000300 	.word	0x50000300
 8002324:	fff04007 	.word	0xfff04007

08002328 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b0b6      	sub	sp, #216	; 0xd8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x22>
 8002346:	2302      	movs	r3, #2
 8002348:	e3c8      	b.n	8002adc <HAL_ADC_ConfigChannel+0x7b4>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fe3b 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 83ad 	bne.w	8002abe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6818      	ldr	r0, [r3, #0]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	6859      	ldr	r1, [r3, #4]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	f7ff fd51 	bl	8001e18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fe29 	bl	8001fd2 <LL_ADC_REG_IsConversionOngoing>
 8002380:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fe35 	bl	8001ff8 <LL_ADC_INJ_IsConversionOngoing>
 800238e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002396:	2b00      	cmp	r3, #0
 8002398:	f040 81d9 	bne.w	800274e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800239c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 81d4 	bne.w	800274e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023ae:	d10f      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2200      	movs	r2, #0
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7ff fd58 	bl	8001e70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fd12 	bl	8001df2 <LL_ADC_SetSamplingTimeCommonConfig>
 80023ce:	e00e      	b.n	80023ee <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6819      	ldr	r1, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	461a      	mov	r2, r3
 80023de:	f7ff fd47 	bl	8001e70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff fd02 	bl	8001df2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	695a      	ldr	r2, [r3, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	08db      	lsrs	r3, r3, #3
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b04      	cmp	r3, #4
 800240e:	d022      	beq.n	8002456 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6919      	ldr	r1, [r3, #16]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002420:	f7ff fc5c 	bl	8001cdc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6919      	ldr	r1, [r3, #16]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	461a      	mov	r2, r3
 8002432:	f7ff fca8 	bl	8001d86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_ADC_ConfigChannel+0x124>
 8002446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244a:	e000      	b.n	800244e <HAL_ADC_ConfigChannel+0x126>
 800244c:	2300      	movs	r3, #0
 800244e:	461a      	mov	r2, r3
 8002450:	f7ff fcb4 	bl	8001dbc <LL_ADC_SetOffsetSaturation>
 8002454:	e17b      	b.n	800274e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fc61 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <HAL_ADC_ConfigChannel+0x15a>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fc56 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	0e9b      	lsrs	r3, r3, #26
 800247c:	f003 021f 	and.w	r2, r3, #31
 8002480:	e01e      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x198>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fc4b 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800248e:	4603      	mov	r3, r0
 8002490:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002494:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002498:	fa93 f3a3 	rbit	r3, r3
 800249c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80024a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80024a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e004      	b.n	80024be <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80024b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <HAL_ADC_ConfigChannel+0x1b0>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	0e9b      	lsrs	r3, r3, #26
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	e018      	b.n	800250a <HAL_ADC_ConfigChannel+0x1e2>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80024ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d101      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80024fc:	2320      	movs	r3, #32
 80024fe:	e004      	b.n	800250a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002500:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800250a:	429a      	cmp	r2, r3
 800250c:	d106      	bne.n	800251c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fc1a 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fbfe 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x220>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fbf3 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	0e9b      	lsrs	r3, r3, #26
 8002542:	f003 021f 	and.w	r2, r3, #31
 8002546:	e01e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x25e>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fbe8 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002554:	4603      	mov	r3, r0
 8002556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002566:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800256a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800256e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e004      	b.n	8002584 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800257a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_ADC_ConfigChannel+0x276>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	0e9b      	lsrs	r3, r3, #26
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	e018      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x2a8>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80025b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80025ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e004      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80025c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d106      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2200      	movs	r2, #0
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fbb7 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2102      	movs	r1, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fb9b 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <HAL_ADC_ConfigChannel+0x2e6>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fb90 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	0e9b      	lsrs	r3, r3, #26
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	e01e      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2102      	movs	r1, #2
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fb85 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 800261a:	4603      	mov	r3, r0
 800261c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002624:	fa93 f3a3 	rbit	r3, r3
 8002628:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800262c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002630:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e004      	b.n	800264a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002640:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x33c>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	0e9b      	lsrs	r3, r3, #26
 800265e:	f003 031f 	and.w	r3, r3, #31
 8002662:	e016      	b.n	8002692 <HAL_ADC_ConfigChannel+0x36a>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002676:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800267c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002684:	2320      	movs	r3, #32
 8002686:	e004      	b.n	8002692 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002692:	429a      	cmp	r2, r3
 8002694:	d106      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	2102      	movs	r1, #2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fb56 	bl	8001d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2103      	movs	r1, #3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fb3a 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10a      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x3a8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2103      	movs	r1, #3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fb2f 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	0e9b      	lsrs	r3, r3, #26
 80026ca:	f003 021f 	and.w	r2, r3, #31
 80026ce:	e017      	b.n	8002700 <HAL_ADC_ConfigChannel+0x3d8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2103      	movs	r1, #3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fb24 	bl	8001d24 <LL_ADC_GetOffsetChannel>
 80026dc:	4603      	mov	r3, r0
 80026de:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e2:	fa93 f3a3 	rbit	r3, r3
 80026e6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80026e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026ea:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80026ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80026f2:	2320      	movs	r3, #32
 80026f4:	e003      	b.n	80026fe <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80026f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026f8:	fab3 f383 	clz	r3, r3
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d105      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x3f0>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	f003 031f 	and.w	r3, r3, #31
 8002716:	e011      	b.n	800273c <HAL_ADC_ConfigChannel+0x414>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002720:	fa93 f3a3 	rbit	r3, r3
 8002724:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002726:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002728:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800272a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002730:	2320      	movs	r3, #32
 8002732:	e003      	b.n	800273c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800273c:	429a      	cmp	r2, r3
 800273e:	d106      	bne.n	800274e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	2103      	movs	r1, #3
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fb01 	bl	8001d50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fc2a 	bl	8001fac <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 8140 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6819      	ldr	r1, [r3, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	461a      	mov	r2, r3
 800276e:	f7ff fbab 	bl	8001ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4a8f      	ldr	r2, [pc, #572]	; (80029b4 <HAL_ADC_ConfigChannel+0x68c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	f040 8131 	bne.w	80029e0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x47e>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	0e9b      	lsrs	r3, r3, #26
 8002794:	3301      	adds	r3, #1
 8002796:	f003 031f 	and.w	r3, r3, #31
 800279a:	2b09      	cmp	r3, #9
 800279c:	bf94      	ite	ls
 800279e:	2301      	movls	r3, #1
 80027a0:	2300      	movhi	r3, #0
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e019      	b.n	80027da <HAL_ADC_ConfigChannel+0x4b2>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ae:	fa93 f3a3 	rbit	r3, r3
 80027b2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80027b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80027b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80027be:	2320      	movs	r3, #32
 80027c0:	e003      	b.n	80027ca <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80027c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027c4:	fab3 f383 	clz	r3, r3
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f003 031f 	and.w	r3, r3, #31
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d079      	beq.n	80028d2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x4d2>
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	3301      	adds	r3, #1
 80027f2:	069b      	lsls	r3, r3, #26
 80027f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027f8:	e015      	b.n	8002826 <HAL_ADC_ConfigChannel+0x4fe>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002802:	fa93 f3a3 	rbit	r3, r3
 8002806:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800280a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800280c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002812:	2320      	movs	r3, #32
 8002814:	e003      	b.n	800281e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	069b      	lsls	r3, r3, #26
 8002822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x51e>
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	0e9b      	lsrs	r3, r3, #26
 8002838:	3301      	adds	r3, #1
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	2101      	movs	r1, #1
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	e017      	b.n	8002876 <HAL_ADC_ConfigChannel+0x54e>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	fa93 f3a3 	rbit	r3, r3
 8002852:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002856:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800285e:	2320      	movs	r3, #32
 8002860:	e003      	b.n	800286a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002864:	fab3 f383 	clz	r3, r3
 8002868:	b2db      	uxtb	r3, r3
 800286a:	3301      	adds	r3, #1
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	2101      	movs	r1, #1
 8002872:	fa01 f303 	lsl.w	r3, r1, r3
 8002876:	ea42 0103 	orr.w	r1, r2, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10a      	bne.n	800289c <HAL_ADC_ConfigChannel+0x574>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	f003 021f 	and.w	r2, r3, #31
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	051b      	lsls	r3, r3, #20
 800289a:	e018      	b.n	80028ce <HAL_ADC_ConfigChannel+0x5a6>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a4:	fa93 f3a3 	rbit	r3, r3
 80028a8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80028aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80028ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d101      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80028b4:	2320      	movs	r3, #32
 80028b6:	e003      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80028b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	f003 021f 	and.w	r2, r3, #31
 80028c6:	4613      	mov	r3, r2
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	4413      	add	r3, r2
 80028cc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028ce:	430b      	orrs	r3, r1
 80028d0:	e081      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d107      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x5c6>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0e9b      	lsrs	r3, r3, #26
 80028e4:	3301      	adds	r3, #1
 80028e6:	069b      	lsls	r3, r3, #26
 80028e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ec:	e015      	b.n	800291a <HAL_ADC_ConfigChannel+0x5f2>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	fa93 f3a3 	rbit	r3, r3
 80028fa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e003      	b.n	8002912 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	fab3 f383 	clz	r3, r3
 8002910:	b2db      	uxtb	r3, r3
 8002912:	3301      	adds	r3, #1
 8002914:	069b      	lsls	r3, r3, #26
 8002916:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_ADC_ConfigChannel+0x612>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	0e9b      	lsrs	r3, r3, #26
 800292c:	3301      	adds	r3, #1
 800292e:	f003 031f 	and.w	r3, r3, #31
 8002932:	2101      	movs	r1, #1
 8002934:	fa01 f303 	lsl.w	r3, r1, r3
 8002938:	e017      	b.n	800296a <HAL_ADC_ConfigChannel+0x642>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	61fb      	str	r3, [r7, #28]
  return result;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002952:	2320      	movs	r3, #32
 8002954:	e003      	b.n	800295e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	fab3 f383 	clz	r3, r3
 800295c:	b2db      	uxtb	r3, r3
 800295e:	3301      	adds	r3, #1
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	2101      	movs	r1, #1
 8002966:	fa01 f303 	lsl.w	r3, r1, r3
 800296a:	ea42 0103 	orr.w	r1, r2, r3
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10d      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x66e>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	0e9b      	lsrs	r3, r3, #26
 8002980:	3301      	adds	r3, #1
 8002982:	f003 021f 	and.w	r2, r3, #31
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	3b1e      	subs	r3, #30
 800298e:	051b      	lsls	r3, r3, #20
 8002990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002994:	e01e      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x6ac>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	613b      	str	r3, [r7, #16]
  return result;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80029ae:	2320      	movs	r3, #32
 80029b0:	e006      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x698>
 80029b2:	bf00      	nop
 80029b4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	f003 021f 	and.w	r2, r3, #31
 80029c6:	4613      	mov	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	4413      	add	r3, r2
 80029cc:	3b1e      	subs	r3, #30
 80029ce:	051b      	lsls	r3, r3, #20
 80029d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029da:	4619      	mov	r1, r3
 80029dc:	f7ff fa48 	bl	8001e70 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b3f      	ldr	r3, [pc, #252]	; (8002ae4 <HAL_ADC_ConfigChannel+0x7bc>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d071      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ec:	483e      	ldr	r0, [pc, #248]	; (8002ae8 <HAL_ADC_ConfigChannel+0x7c0>)
 80029ee:	f7ff f967 	bl	8001cc0 <LL_ADC_GetCommonPathInternalCh>
 80029f2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a3c      	ldr	r2, [pc, #240]	; (8002aec <HAL_ADC_ConfigChannel+0x7c4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d004      	beq.n	8002a0a <HAL_ADC_ConfigChannel+0x6e2>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a3a      	ldr	r2, [pc, #232]	; (8002af0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d127      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d121      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a1e:	d157      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a28:	4619      	mov	r1, r3
 8002a2a:	482f      	ldr	r0, [pc, #188]	; (8002ae8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a2c:	f7ff f935 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	099b      	lsrs	r3, r3, #6
 8002a36:	4a30      	ldr	r2, [pc, #192]	; (8002af8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	4613      	mov	r3, r2
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a4a:	e002      	b.n	8002a52 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1f9      	bne.n	8002a4c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a58:	e03a      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a27      	ldr	r2, [pc, #156]	; (8002afc <HAL_ADC_ConfigChannel+0x7d4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d113      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10d      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a22      	ldr	r2, [pc, #136]	; (8002b00 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02a      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a82:	4619      	mov	r1, r3
 8002a84:	4818      	ldr	r0, [pc, #96]	; (8002ae8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a86:	f7ff f908 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a8a:	e021      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a1c      	ldr	r2, [pc, #112]	; (8002b04 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d11c      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d116      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a16      	ldr	r2, [pc, #88]	; (8002b00 <HAL_ADC_ConfigChannel+0x7d8>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d011      	beq.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ab0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	480c      	ldr	r0, [pc, #48]	; (8002ae8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ab8:	f7ff f8ef 	bl	8001c9a <LL_ADC_SetCommonPathInternalCh>
 8002abc:	e008      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	f043 0220 	orr.w	r2, r3, #32
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ad8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	37d8      	adds	r7, #216	; 0xd8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	80080000 	.word	0x80080000
 8002ae8:	50000300 	.word	0x50000300
 8002aec:	c3210000 	.word	0xc3210000
 8002af0:	90c00010 	.word	0x90c00010
 8002af4:	20000000 	.word	0x20000000
 8002af8:	053e2d63 	.word	0x053e2d63
 8002afc:	c7520000 	.word	0xc7520000
 8002b00:	50000100 	.word	0x50000100
 8002b04:	cb840000 	.word	0xcb840000

08002b08 <LL_ADC_IsEnabled>:
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_IsEnabled+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_IsEnabled+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_REG_IsConversionOngoing>:
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b0a1      	sub	sp, #132	; 0x84
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e08b      	b.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b8a:	d102      	bne.n	8002b92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b8c:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002b8e:	60bb      	str	r3, [r7, #8]
 8002b90:	e001      	b.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b92:	2300      	movs	r3, #0
 8002b94:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	f043 0220 	orr.w	r2, r3, #32
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e06a      	b.n	8002c8a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ffb9 	bl	8002b2e <LL_ADC_REG_IsConversionOngoing>
 8002bbc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ffb3 	bl	8002b2e <LL_ADC_REG_IsConversionOngoing>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d14c      	bne.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d149      	bne.n	8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002bd6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d028      	beq.n	8002c32 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6859      	ldr	r1, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bf2:	035b      	lsls	r3, r3, #13
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bfc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c00:	f7ff ff82 	bl	8002b08 <LL_ADC_IsEnabled>
 8002c04:	4604      	mov	r4, r0
 8002c06:	4823      	ldr	r0, [pc, #140]	; (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c08:	f7ff ff7e 	bl	8002b08 <LL_ADC_IsEnabled>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	4323      	orrs	r3, r4
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d133      	bne.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c1c:	f023 030f 	bic.w	r3, r3, #15
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	6811      	ldr	r1, [r2, #0]
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	6892      	ldr	r2, [r2, #8]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c2e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c30:	e024      	b.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c3c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c3e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c42:	f7ff ff61 	bl	8002b08 <LL_ADC_IsEnabled>
 8002c46:	4604      	mov	r4, r0
 8002c48:	4812      	ldr	r0, [pc, #72]	; (8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c4a:	f7ff ff5d 	bl	8002b08 <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4323      	orrs	r3, r4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d112      	bne.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c5e:	f023 030f 	bic.w	r3, r3, #15
 8002c62:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c64:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c66:	e009      	b.n	8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c7a:	e000      	b.n	8002c7e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3784      	adds	r7, #132	; 0x84
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd90      	pop	{r4, r7, pc}
 8002c92:	bf00      	nop
 8002c94:	50000100 	.word	0x50000100
 8002c98:	50000300 	.word	0x50000300

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e60:	f7ff ff40 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ff90 	bl	8002d90 <NVIC_EncodePriority>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff5f 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff33 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff ffa4 	bl	8002df8 <SysTick_Config>
 8002eb0:	4603      	mov	r3, r0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e014      	b.n	8002ef6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	791b      	ldrb	r3, [r3, #4]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fd ffdf 	bl	8000ea0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
	...

08002f00 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	60b9      	str	r1, [r7, #8]
 8002f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_DAC_ConfigChannel+0x1c>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e19e      	b.n	800325e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	795b      	ldrb	r3, [r3, #5]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_DAC_ConfigChannel+0x2c>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e198      	b.n	800325e <HAL_DAC_ConfigChannel+0x35e>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2202      	movs	r2, #2
 8002f36:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d17a      	bne.n	8003036 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002f40:	f7fe fe6a 	bl	8001c18 <HAL_GetTick>
 8002f44:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d13d      	bne.n	8002fc8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f4c:	e018      	b.n	8002f80 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f4e:	f7fe fe63 	bl	8001c18 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d911      	bls.n	8002f80 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2203      	movs	r2, #3
 8002f7a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e16e      	b.n	800325e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1df      	bne.n	8002f4e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
 8002f98:	e020      	b.n	8002fdc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002f9a:	f7fe fe3d 	bl	8001c18 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d90f      	bls.n	8002fc8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da0a      	bge.n	8002fc8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f043 0208 	orr.w	r2, r3, #8
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e14a      	b.n	800325e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dbe3      	blt.n	8002f9a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fda:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002fec:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	ea02 0103 	and.w	r1, r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	409a      	lsls	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	21ff      	movs	r1, #255	; 0xff
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	ea02 0103 	and.w	r1, r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	409a      	lsls	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d11d      	bne.n	800307a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	221f      	movs	r2, #31
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003056:	4013      	ands	r3, r2
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306e:	4313      	orrs	r3, r2
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2207      	movs	r2, #7
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003092:	4013      	ands	r3, r2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d102      	bne.n	80030a4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800309e:	2300      	movs	r3, #0
 80030a0:	623b      	str	r3, [r7, #32]
 80030a2:	e00f      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d102      	bne.n	80030b2 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80030ac:	2301      	movs	r3, #1
 80030ae:	623b      	str	r3, [r7, #32]
 80030b0:	e008      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d102      	bne.n	80030c0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80030ba:	2301      	movs	r3, #1
 80030bc:	623b      	str	r3, [r7, #32]
 80030be:	e001      	b.n	80030c4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	6a3a      	ldr	r2, [r7, #32]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	4013      	ands	r3, r2
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	791b      	ldrb	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d102      	bne.n	80030f8 <HAL_DAC_ConfigChannel+0x1f8>
 80030f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f6:	e000      	b.n	80030fa <HAL_DAC_ConfigChannel+0x1fa>
 80030f8:	2300      	movs	r3, #0
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f003 0310 	and.w	r3, r3, #16
 8003106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	4013      	ands	r3, r2
 8003114:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	795b      	ldrb	r3, [r3, #5]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d102      	bne.n	8003124 <HAL_DAC_ConfigChannel+0x224>
 800311e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003122:	e000      	b.n	8003126 <HAL_DAC_ConfigChannel+0x226>
 8003124:	2300      	movs	r3, #0
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d114      	bne.n	8003166 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800313c:	f003 fb5a 	bl	80067f4 <HAL_RCC_GetHCLKFreq>
 8003140:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4a48      	ldr	r2, [pc, #288]	; (8003268 <HAL_DAC_ConfigChannel+0x368>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d904      	bls.n	8003154 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	e00f      	b.n	8003174 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4a45      	ldr	r2, [pc, #276]	; (800326c <HAL_DAC_ConfigChannel+0x36c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d90a      	bls.n	8003172 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	e006      	b.n	8003174 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	4313      	orrs	r3, r2
 800316e:	627b      	str	r3, [r7, #36]	; 0x24
 8003170:	e000      	b.n	8003174 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003172:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0310 	and.w	r3, r3, #16
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003182:	4313      	orrs	r3, r2
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6819      	ldr	r1, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	400a      	ands	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	4013      	ands	r3, r2
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	4313      	orrs	r3, r2
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	22c0      	movs	r2, #192	; 0xc0
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43da      	mvns	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	400a      	ands	r2, r1
 8003204:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	089b      	lsrs	r3, r3, #2
 8003218:	021b      	lsls	r3, r3, #8
 800321a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003234:	fa01 f303 	lsl.w	r3, r1, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	ea02 0103 	and.w	r1, r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	409a      	lsls	r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800325c:	7ffb      	ldrb	r3, [r7, #31]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	09896800 	.word	0x09896800
 800326c:	04c4b400 	.word	0x04c4b400

08003270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800327e:	e15a      	b.n	8003536 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	2101      	movs	r1, #1
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	fa01 f303 	lsl.w	r3, r1, r3
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 814c 	beq.w	8003530 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d005      	beq.n	80032b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d130      	bne.n	8003312 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	2203      	movs	r2, #3
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032e6:	2201      	movs	r2, #1
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f003 0201 	and.w	r2, r3, #1
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b03      	cmp	r3, #3
 800331c:	d017      	beq.n	800334e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	2203      	movs	r2, #3
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d123      	bne.n	80033a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003366:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	220f      	movs	r2, #15
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	4013      	ands	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	08da      	lsrs	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3208      	adds	r2, #8
 800339c:	6939      	ldr	r1, [r7, #16]
 800339e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	2203      	movs	r2, #3
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 0203 	and.w	r2, r3, #3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 80a6 	beq.w	8003530 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e4:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <HAL_GPIO_Init+0x2e4>)
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	4a5a      	ldr	r2, [pc, #360]	; (8003554 <HAL_GPIO_Init+0x2e4>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	6613      	str	r3, [r2, #96]	; 0x60
 80033f0:	4b58      	ldr	r3, [pc, #352]	; (8003554 <HAL_GPIO_Init+0x2e4>)
 80033f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
 80033fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fc:	4a56      	ldr	r2, [pc, #344]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	089b      	lsrs	r3, r3, #2
 8003402:	3302      	adds	r3, #2
 8003404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	220f      	movs	r2, #15
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003426:	d01f      	beq.n	8003468 <HAL_GPIO_Init+0x1f8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a4c      	ldr	r2, [pc, #304]	; (800355c <HAL_GPIO_Init+0x2ec>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d019      	beq.n	8003464 <HAL_GPIO_Init+0x1f4>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a4b      	ldr	r2, [pc, #300]	; (8003560 <HAL_GPIO_Init+0x2f0>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_GPIO_Init+0x1f0>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <HAL_GPIO_Init+0x2f4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00d      	beq.n	800345c <HAL_GPIO_Init+0x1ec>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a49      	ldr	r2, [pc, #292]	; (8003568 <HAL_GPIO_Init+0x2f8>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <HAL_GPIO_Init+0x1e8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a48      	ldr	r2, [pc, #288]	; (800356c <HAL_GPIO_Init+0x2fc>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d101      	bne.n	8003454 <HAL_GPIO_Init+0x1e4>
 8003450:	2305      	movs	r3, #5
 8003452:	e00a      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003454:	2306      	movs	r3, #6
 8003456:	e008      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003458:	2304      	movs	r3, #4
 800345a:	e006      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 800345c:	2303      	movs	r3, #3
 800345e:	e004      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003460:	2302      	movs	r3, #2
 8003462:	e002      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_GPIO_Init+0x1fa>
 8003468:	2300      	movs	r3, #0
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	f002 0203 	and.w	r2, r2, #3
 8003470:	0092      	lsls	r2, r2, #2
 8003472:	4093      	lsls	r3, r2
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800347a:	4937      	ldr	r1, [pc, #220]	; (8003558 <HAL_GPIO_Init+0x2e8>)
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003488:	4b39      	ldr	r3, [pc, #228]	; (8003570 <HAL_GPIO_Init+0x300>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034ac:	4a30      	ldr	r2, [pc, #192]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	43db      	mvns	r3, r3
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4013      	ands	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034d6:	4a26      	ldr	r2, [pc, #152]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034dc:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_GPIO_Init+0x300>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	43db      	mvns	r3, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <HAL_GPIO_Init+0x300>)
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003506:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_GPIO_Init+0x300>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	43db      	mvns	r3, r3
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4013      	ands	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800352a:	4a11      	ldr	r2, [pc, #68]	; (8003570 <HAL_GPIO_Init+0x300>)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	3301      	adds	r3, #1
 8003534:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	fa22 f303 	lsr.w	r3, r2, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f ae9d 	bne.w	8003280 <HAL_GPIO_Init+0x10>
  }
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	40021000 	.word	0x40021000
 8003558:	40010000 	.word	0x40010000
 800355c:	48000400 	.word	0x48000400
 8003560:	48000800 	.word	0x48000800
 8003564:	48000c00 	.word	0x48000c00
 8003568:	48001000 	.word	0x48001000
 800356c:	48001400 	.word	0x48001400
 8003570:	40010400 	.word	0x40010400

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003590:	e002      	b.n	8003598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	460b      	mov	r3, r1
 80035ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035b6:	887a      	ldrh	r2, [r7, #2]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4013      	ands	r3, r2
 80035bc:	041a      	lsls	r2, r3, #16
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	43d9      	mvns	r1, r3
 80035c2:	887b      	ldrh	r3, [r7, #2]
 80035c4:	400b      	ands	r3, r1
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
}
 80035cc:	bf00      	nop
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08d      	b.n	8003706 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fd98 	bl	8001134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	e006      	b.n	8003660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800365e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d108      	bne.n	800367a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003676:	605a      	str	r2, [r3, #4]
 8003678:	e007      	b.n	800368a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003688:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800369c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69d9      	ldr	r1, [r3, #28]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a1a      	ldr	r2, [r3, #32]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2220      	movs	r2, #32
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	461a      	mov	r2, r3
 800371c:	460b      	mov	r3, r1
 800371e:	817b      	strh	r3, [r7, #10]
 8003720:	4613      	mov	r3, r2
 8003722:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	f040 80fd 	bne.w	800392c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_I2C_Master_Transmit+0x30>
 800373c:	2302      	movs	r3, #2
 800373e:	e0f6      	b.n	800392e <HAL_I2C_Master_Transmit+0x21e>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003748:	f7fe fa66 	bl	8001c18 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2319      	movs	r3, #25
 8003754:	2201      	movs	r2, #1
 8003756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fa0a 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e0e1      	b.n	800392e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2221      	movs	r2, #33	; 0x21
 800376e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2210      	movs	r2, #16
 8003776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	893a      	ldrh	r2, [r7, #8]
 800378a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	2bff      	cmp	r3, #255	; 0xff
 800379a:	d906      	bls.n	80037aa <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	22ff      	movs	r2, #255	; 0xff
 80037a0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80037a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	e007      	b.n	80037ba <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80037b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037b8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d024      	beq.n	800380c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	781a      	ldrb	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	1c5a      	adds	r2, r3, #1
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	8979      	ldrh	r1, [r7, #10]
 80037fe:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <HAL_I2C_Master_Transmit+0x228>)
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fc05 	bl	8004014 <I2C_TransferConfig>
 800380a:	e066      	b.n	80038da <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	b2da      	uxtb	r2, r3
 8003812:	8979      	ldrh	r1, [r7, #10]
 8003814:	4b48      	ldr	r3, [pc, #288]	; (8003938 <HAL_I2C_Master_Transmit+0x228>)
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fbfa 	bl	8004014 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003820:	e05b      	b.n	80038da <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	6a39      	ldr	r1, [r7, #32]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 f9fd 	bl	8003c26 <I2C_WaitOnTXISFlagUntilTimeout>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d001      	beq.n	8003836 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07b      	b.n	800392e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d034      	beq.n	80038da <HAL_I2C_Master_Transmit+0x1ca>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003874:	2b00      	cmp	r3, #0
 8003876:	d130      	bne.n	80038da <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2200      	movs	r2, #0
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f976 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e04d      	b.n	800392e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	2bff      	cmp	r3, #255	; 0xff
 800389a:	d90e      	bls.n	80038ba <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	22ff      	movs	r2, #255	; 0xff
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	2300      	movs	r3, #0
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fbae 	bl	8004014 <I2C_TransferConfig>
 80038b8:	e00f      	b.n	80038da <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	8979      	ldrh	r1, [r7, #10]
 80038cc:	2300      	movs	r3, #0
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fb9d 	bl	8004014 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d19e      	bne.n	8003822 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	6a39      	ldr	r1, [r7, #32]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f9e3 	bl	8003cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e01a      	b.n	800392e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2220      	movs	r2, #32
 80038fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_I2C_Master_Transmit+0x22c>)
 800390c:	400b      	ands	r3, r1
 800390e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	80002000 	.word	0x80002000
 800393c:	fe00e800 	.word	0xfe00e800

08003940 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af02      	add	r7, sp, #8
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	607a      	str	r2, [r7, #4]
 800394a:	461a      	mov	r2, r3
 800394c:	460b      	mov	r3, r1
 800394e:	817b      	strh	r3, [r7, #10]
 8003950:	4613      	mov	r3, r2
 8003952:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b20      	cmp	r3, #32
 800395e:	f040 80db 	bne.w	8003b18 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_I2C_Master_Receive+0x30>
 800396c:	2302      	movs	r3, #2
 800396e:	e0d4      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003978:	f7fe f94e 	bl	8001c18 <HAL_GetTick>
 800397c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	9300      	str	r3, [sp, #0]
 8003982:	2319      	movs	r3, #25
 8003984:	2201      	movs	r2, #1
 8003986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f8f2 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0bf      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2222      	movs	r2, #34	; 0x22
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2210      	movs	r2, #16
 80039a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	893a      	ldrh	r2, [r7, #8]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	2bff      	cmp	r3, #255	; 0xff
 80039ca:	d90e      	bls.n	80039ea <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	22ff      	movs	r2, #255	; 0xff
 80039d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	8979      	ldrh	r1, [r7, #10]
 80039da:	4b52      	ldr	r3, [pc, #328]	; (8003b24 <HAL_I2C_Master_Receive+0x1e4>)
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 fb16 	bl	8004014 <I2C_TransferConfig>
 80039e8:	e06d      	b.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	8979      	ldrh	r1, [r7, #10]
 80039fc:	4b49      	ldr	r3, [pc, #292]	; (8003b24 <HAL_I2C_Master_Receive+0x1e4>)
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 fb05 	bl	8004014 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003a0a:	e05c      	b.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f993 	bl	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e07c      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	b2d2      	uxtb	r2, r2
 8003a2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d034      	beq.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d130      	bne.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2180      	movs	r1, #128	; 0x80
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f880 	bl	8003b74 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e04d      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2bff      	cmp	r3, #255	; 0xff
 8003a86:	d90e      	bls.n	8003aa6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	22ff      	movs	r2, #255	; 0xff
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	8979      	ldrh	r1, [r7, #10]
 8003a96:	2300      	movs	r3, #0
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 fab8 	bl	8004014 <I2C_TransferConfig>
 8003aa4:	e00f      	b.n	8003ac6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	2300      	movs	r3, #0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 faa7 	bl	8004014 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d19d      	bne.n	8003a0c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	6a39      	ldr	r1, [r7, #32]
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f8ed 	bl	8003cb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e01a      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_I2C_Master_Receive+0x1e8>)
 8003af8:	400b      	ands	r3, r1
 8003afa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	80002400 	.word	0x80002400
 8003b28:	fe00e800 	.word	0xfe00e800

08003b2c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d103      	bne.n	8003b4a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d007      	beq.n	8003b68 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	619a      	str	r2, [r3, #24]
  }
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	603b      	str	r3, [r7, #0]
 8003b80:	4613      	mov	r3, r2
 8003b82:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b84:	e03b      	b.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	6839      	ldr	r1, [r7, #0]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f962 	bl	8003e54 <I2C_IsErrorOccurred>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e041      	b.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d02d      	beq.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ba2:	f7fe f839 	bl	8001c18 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d302      	bcc.n	8003bb8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d122      	bne.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699a      	ldr	r2, [r3, #24]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2301      	moveq	r3, #1
 8003bca:	2300      	movne	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d113      	bne.n	8003bfe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bda:	f043 0220 	orr.w	r2, r3, #32
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00f      	b.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699a      	ldr	r2, [r3, #24]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d0b4      	beq.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b084      	sub	sp, #16
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
 8003c2e:	60b9      	str	r1, [r7, #8]
 8003c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c32:	e033      	b.n	8003c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f90b 	bl	8003e54 <I2C_IsErrorOccurred>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e031      	b.n	8003cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c4e:	d025      	beq.n	8003c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c50:	f7fd ffe2 	bl	8001c18 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d302      	bcc.n	8003c66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d11a      	bne.n	8003c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d013      	beq.n	8003c9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e007      	b.n	8003cac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d1c4      	bne.n	8003c34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cc0:	e02f      	b.n	8003d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68b9      	ldr	r1, [r7, #8]
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 f8c4 	bl	8003e54 <I2C_IsErrorOccurred>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e02d      	b.n	8003d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd6:	f7fd ff9f 	bl	8001c18 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d302      	bcc.n	8003cec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d11a      	bne.n	8003d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	f003 0320 	and.w	r3, r3, #32
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d013      	beq.n	8003d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e007      	b.n	8003d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d1c8      	bne.n	8003cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d4c:	e071      	b.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f87e 	bl	8003e54 <I2C_IsErrorOccurred>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b20      	cmp	r3, #32
 8003d6e:	d13b      	bne.n	8003de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003d70:	7dfb      	ldrb	r3, [r7, #23]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d138      	bne.n	8003de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d105      	bne.n	8003d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	f003 0310 	and.w	r3, r3, #16
 8003d9a:	2b10      	cmp	r3, #16
 8003d9c:	d121      	bne.n	8003de2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2210      	movs	r2, #16
 8003da4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2204      	movs	r2, #4
 8003daa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2220      	movs	r2, #32
 8003db2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6859      	ldr	r1, [r3, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003dc0:	400b      	ands	r3, r1
 8003dc2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	75fb      	strb	r3, [r7, #23]
 8003de0:	e002      	b.n	8003de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003de8:	f7fd ff16 	bl	8001c18 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	68ba      	ldr	r2, [r7, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d302      	bcc.n	8003dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d119      	bne.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d116      	bne.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d00f      	beq.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d002      	beq.n	8003e46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d083      	beq.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	fe00e800 	.word	0xfe00e800

08003e54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b08a      	sub	sp, #40	; 0x28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e60:	2300      	movs	r3, #0
 8003e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d068      	beq.n	8003f52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2210      	movs	r2, #16
 8003e86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e88:	e049      	b.n	8003f1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d045      	beq.n	8003f1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fd fec1 	bl	8001c18 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <I2C_IsErrorOccurred+0x54>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d13a      	bne.n	8003f1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003eca:	d121      	bne.n	8003f10 <I2C_IsErrorOccurred+0xbc>
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ed2:	d01d      	beq.n	8003f10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003ed4:	7cfb      	ldrb	r3, [r7, #19]
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d01a      	beq.n	8003f10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ee8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003eea:	f7fd fe95 	bl	8001c18 <HAL_GetTick>
 8003eee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef0:	e00e      	b.n	8003f10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ef2:	f7fd fe91 	bl	8001c18 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b19      	cmp	r3, #25
 8003efe:	d907      	bls.n	8003f10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	f043 0320 	orr.w	r3, r3, #32
 8003f06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f0e:	e006      	b.n	8003f1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d1e9      	bne.n	8003ef2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d003      	beq.n	8003f34 <I2C_IsErrorOccurred+0xe0>
 8003f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0aa      	beq.n	8003e8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d103      	bne.n	8003f44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2220      	movs	r2, #32
 8003f42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f44:	6a3b      	ldr	r3, [r7, #32]
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f043 0308 	orr.w	r3, r3, #8
 8003f8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00b      	beq.n	8003fc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f043 0302 	orr.w	r3, r3, #2
 8003fae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01c      	beq.n	8004002 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fdaf 	bl	8003b2c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6859      	ldr	r1, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b0d      	ldr	r3, [pc, #52]	; (8004010 <I2C_IsErrorOccurred+0x1bc>)
 8003fda:	400b      	ands	r3, r1
 8003fdc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004006:	4618      	mov	r0, r3
 8004008:	3728      	adds	r7, #40	; 0x28
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	fe00e800 	.word	0xfe00e800

08004014 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	817b      	strh	r3, [r7, #10]
 8004022:	4613      	mov	r3, r2
 8004024:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004026:	897b      	ldrh	r3, [r7, #10]
 8004028:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800402c:	7a7b      	ldrb	r3, [r7, #9]
 800402e:	041b      	lsls	r3, r3, #16
 8004030:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004034:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	4313      	orrs	r3, r2
 800403e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004042:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	0d5b      	lsrs	r3, r3, #21
 800404e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004052:	4b08      	ldr	r3, [pc, #32]	; (8004074 <I2C_TransferConfig+0x60>)
 8004054:	430b      	orrs	r3, r1
 8004056:	43db      	mvns	r3, r3
 8004058:	ea02 0103 	and.w	r1, r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004066:	bf00      	nop
 8004068:	371c      	adds	r7, #28
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	03ff63ff 	.word	0x03ff63ff

08004078 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b20      	cmp	r3, #32
 800408c:	d138      	bne.n	8004100 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004098:	2302      	movs	r3, #2
 800409a:	e032      	b.n	8004102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2224      	movs	r2, #36	; 0x24
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6819      	ldr	r1, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b20      	cmp	r3, #32
 8004122:	d139      	bne.n	8004198 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800412e:	2302      	movs	r3, #2
 8004130:	e033      	b.n	800419a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2201      	movs	r2, #1
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2224      	movs	r2, #36	; 0x24
 800413e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 0201 	bic.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004160:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f042 0201 	orr.w	r2, r2, #1
 8004182:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e087      	b.n	80042ca <HAL_LPTIM_Init+0x122>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7fd f823 	bl	8001220 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d004      	beq.n	80041fc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041fa:	d103      	bne.n	8004204 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 031e 	bic.w	r3, r3, #30
 8004202:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800420c:	4293      	cmp	r3, r2
 800420e:	d003      	beq.n	8004218 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <HAL_LPTIM_Init+0x12c>)
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_LPTIM_Init+0x130>)
 800421c:	4013      	ands	r3, r2
 800421e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004228:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800422e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004234:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800423a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4313      	orrs	r3, r2
 8004240:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004252:	4313      	orrs	r3, r2
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d004      	beq.n	800426c <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800426a:	d107      	bne.n	800427c <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004274:	4313      	orrs	r3, r2
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004284:	4293      	cmp	r3, r2
 8004286:	d00a      	beq.n	800429e <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004290:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8004296:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a0c      	ldr	r2, [pc, #48]	; (80042dc <HAL_LPTIM_Init+0x134>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d107      	bne.n	80042c0 <HAL_LPTIM_Init+0x118>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	430a      	orrs	r2, r1
 80042be:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	dfff1f3f 	.word	0xdfff1f3f
 80042d8:	ff19f1fe 	.word	0xff19f1fe
 80042dc:	40007c00 	.word	0x40007c00

080042e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0c0      	b.n	8004474 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f007 fd4c 	bl	800bda4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2203      	movs	r2, #3
 8004310:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fb93 	bl	8007a44 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800431e:	2300      	movs	r3, #0
 8004320:	73fb      	strb	r3, [r7, #15]
 8004322:	e03e      	b.n	80043a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	440b      	add	r3, r1
 8004332:	3311      	adds	r3, #17
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	440b      	add	r3, r1
 8004346:	3310      	adds	r3, #16
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800434c:	7bfa      	ldrb	r2, [r7, #15]
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	00db      	lsls	r3, r3, #3
 8004358:	440b      	add	r3, r1
 800435a:	3313      	adds	r3, #19
 800435c:	2200      	movs	r2, #0
 800435e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004360:	7bfa      	ldrb	r2, [r7, #15]
 8004362:	6879      	ldr	r1, [r7, #4]
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	440b      	add	r3, r1
 800436e:	3320      	adds	r3, #32
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	3324      	adds	r3, #36	; 0x24
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	6879      	ldr	r1, [r7, #4]
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	3301      	adds	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	791b      	ldrb	r3, [r3, #4]
 80043a6:	7bfa      	ldrb	r2, [r7, #15]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d3bb      	bcc.n	8004324 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e044      	b.n	800443c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	440b      	add	r3, r1
 80043c0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	440b      	add	r3, r1
 80043d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80043da:	7bfa      	ldrb	r2, [r7, #15]
 80043dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043de:	7bfa      	ldrb	r2, [r7, #15]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	f203 1353 	addw	r3, r3, #339	; 0x153
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	440b      	add	r3, r1
 8004402:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800440a:	7bfa      	ldrb	r2, [r7, #15]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	4413      	add	r3, r2
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	440b      	add	r3, r1
 8004418:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004420:	7bfa      	ldrb	r2, [r7, #15]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4413      	add	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	440b      	add	r3, r1
 800442e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004432:	2200      	movs	r2, #0
 8004434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	3301      	adds	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	791b      	ldrb	r3, [r3, #4]
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	429a      	cmp	r2, r3
 8004444:	d3b5      	bcc.n	80043b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6818      	ldr	r0, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3304      	adds	r3, #4
 800444e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004452:	f003 fb12 	bl	8007a7a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	7a9b      	ldrb	r3, [r3, #10]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d102      	bne.n	8004472 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f001 fc43 	bl	8005cf8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800448a:	2b01      	cmp	r3, #1
 800448c:	d101      	bne.n	8004492 <HAL_PCD_Start+0x16>
 800448e:	2302      	movs	r3, #2
 8004490:	e012      	b.n	80044b8 <HAL_PCD_Start+0x3c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f003 fab9 	bl	8007a16 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f005 fd7b 	bl	8009fa4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f005 fd80 	bl	8009fd2 <USB_ReadInterrupts>
 80044d2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fb06 	bl	8004af0 <PCD_EP_ISR_Handler>

    return;
 80044e4:	e110      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004502:	b292      	uxth	r2, r2
 8004504:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f007 fcdc 	bl	800bec6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800450e:	2100      	movs	r1, #0
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8fc 	bl	800470e <HAL_PCD_SetAddress>

    return;
 8004516:	e0f7      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800452a:	b29a      	uxth	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004534:	b292      	uxth	r2, r2
 8004536:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800453a:	e0e5      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800454e:	b29a      	uxth	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004558:	b292      	uxth	r2, r2
 800455a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800455e:	e0d3      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d034      	beq.n	80045d4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004572:	b29a      	uxth	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0204 	bic.w	r2, r2, #4
 800457c:	b292      	uxth	r2, r2
 800457e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800458a:	b29a      	uxth	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0208 	bic.w	r2, r2, #8
 8004594:	b292      	uxth	r2, r2
 8004596:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d107      	bne.n	80045b4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045ac:	2100      	movs	r1, #0
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f007 fe7c 	bl	800c2ac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f007 fcbf 	bl	800bf38 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045cc:	b292      	uxth	r2, r2
 80045ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80045d2:	e099      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d027      	beq.n	800462e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f042 0208 	orr.w	r2, r2, #8
 80045f0:	b292      	uxth	r2, r2
 80045f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045fe:	b29a      	uxth	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004608:	b292      	uxth	r2, r2
 800460a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f042 0204 	orr.w	r2, r2, #4
 8004620:	b292      	uxth	r2, r2
 8004622:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f007 fc6c 	bl	800bf04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800462c:	e06c      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d040      	beq.n	80046ba <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004640:	b29a      	uxth	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800464a:	b292      	uxth	r2, r2
 800464c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d12b      	bne.n	80046b2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0204 	orr.w	r2, r2, #4
 800466c:	b292      	uxth	r2, r2
 800466e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0208 	orr.w	r2, r2, #8
 8004684:	b292      	uxth	r2, r2
 8004686:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800469a:	b29b      	uxth	r3, r3
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80046a8:	2101      	movs	r1, #1
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f007 fdfe 	bl	800c2ac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80046b0:	e02a      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f007 fc26 	bl	800bf04 <HAL_PCD_SuspendCallback>
    return;
 80046b8:	e026      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00f      	beq.n	80046e4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046d6:	b292      	uxth	r2, r2
 80046d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f007 fbe4 	bl	800beaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80046e2:	e011      	b.n	8004708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00c      	beq.n	8004708 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004700:	b292      	uxth	r2, r2
 8004702:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004706:	bf00      	nop
  }
}
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	460b      	mov	r3, r1
 8004718:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004720:	2b01      	cmp	r3, #1
 8004722:	d101      	bne.n	8004728 <HAL_PCD_SetAddress+0x1a>
 8004724:	2302      	movs	r3, #2
 8004726:	e012      	b.n	800474e <HAL_PCD_SetAddress+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	78fa      	ldrb	r2, [r7, #3]
 8004734:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	78fa      	ldrb	r2, [r7, #3]
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f005 fc1c 	bl	8009f7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
 800475e:	4608      	mov	r0, r1
 8004760:	4611      	mov	r1, r2
 8004762:	461a      	mov	r2, r3
 8004764:	4603      	mov	r3, r0
 8004766:	70fb      	strb	r3, [r7, #3]
 8004768:	460b      	mov	r3, r1
 800476a:	803b      	strh	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004778:	2b00      	cmp	r3, #0
 800477a:	da0e      	bge.n	800479a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	f003 0207 	and.w	r2, r3, #7
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	3310      	adds	r3, #16
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	4413      	add	r3, r2
 8004790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2201      	movs	r2, #1
 8004796:	705a      	strb	r2, [r3, #1]
 8004798:	e00e      	b.n	80047b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	f003 0207 	and.w	r2, r3, #7
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	4413      	add	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	b2da      	uxtb	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80047c4:	883b      	ldrh	r3, [r7, #0]
 80047c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	78ba      	ldrb	r2, [r7, #2]
 80047d2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047d4:	78bb      	ldrb	r3, [r7, #2]
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d102      	bne.n	80047e0 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_PCD_EP_Open+0x98>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e00e      	b.n	800480c <HAL_PCD_EP_Open+0xb6>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68f9      	ldr	r1, [r7, #12]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f003 f95b 	bl	8007ab8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800480a:	7afb      	ldrb	r3, [r7, #11]
}
 800480c:	4618      	mov	r0, r3
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004824:	2b00      	cmp	r3, #0
 8004826:	da0e      	bge.n	8004846 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	f003 0207 	and.w	r2, r3, #7
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	00db      	lsls	r3, r3, #3
 8004836:	3310      	adds	r3, #16
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	4413      	add	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	705a      	strb	r2, [r3, #1]
 8004844:	e00e      	b.n	8004864 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	f003 0207 	and.w	r2, r3, #7
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	4413      	add	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004864:	78fb      	ldrb	r3, [r7, #3]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004876:	2b01      	cmp	r3, #1
 8004878:	d101      	bne.n	800487e <HAL_PCD_EP_Close+0x6a>
 800487a:	2302      	movs	r3, #2
 800487c:	e00e      	b.n	800489c <HAL_PCD_EP_Close+0x88>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68f9      	ldr	r1, [r7, #12]
 800488c:	4618      	mov	r0, r3
 800488e:	f003 fcd7 	bl	8008240 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	607a      	str	r2, [r7, #4]
 80048ae:	603b      	str	r3, [r7, #0]
 80048b0:	460b      	mov	r3, r1
 80048b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b4:	7afb      	ldrb	r3, [r7, #11]
 80048b6:	f003 0207 	and.w	r2, r3, #7
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2200      	movs	r2, #0
 80048dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	2200      	movs	r2, #0
 80048e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048e4:	7afb      	ldrb	r3, [r7, #11]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6979      	ldr	r1, [r7, #20]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f003 fe8f 	bl	800861a <USB_EPStartXfer>

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004906:	b480      	push	{r7}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	460b      	mov	r3, r1
 8004910:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004912:	78fb      	ldrb	r3, [r7, #3]
 8004914:	f003 0207 	and.w	r2, r3, #7
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	440b      	add	r3, r1
 8004924:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004928:	681b      	ldr	r3, [r3, #0]
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	460b      	mov	r3, r1
 8004944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004946:	7afb      	ldrb	r3, [r7, #11]
 8004948:	f003 0207 	and.w	r2, r3, #7
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	3310      	adds	r3, #16
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2200      	movs	r2, #0
 800497a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	2201      	movs	r2, #1
 8004980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004982:	7afb      	ldrb	r3, [r7, #11]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	b2da      	uxtb	r2, r3
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6979      	ldr	r1, [r7, #20]
 8004994:	4618      	mov	r0, r3
 8004996:	f003 fe40 	bl	800861a <USB_EPStartXfer>

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	460b      	mov	r3, r1
 80049ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	7912      	ldrb	r2, [r2, #4]
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e03e      	b.n	8004a40 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	da0e      	bge.n	80049e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 0207 	and.w	r2, r3, #7
 80049d0:	4613      	mov	r3, r2
 80049d2:	009b      	lsls	r3, r3, #2
 80049d4:	4413      	add	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	3310      	adds	r3, #16
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	4413      	add	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	705a      	strb	r2, [r3, #1]
 80049e6:	e00c      	b.n	8004a02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049e8:	78fa      	ldrb	r2, [r7, #3]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	4413      	add	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_PCD_EP_SetStall+0x7e>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e00e      	b.n	8004a40 <HAL_PCD_EP_SetStall+0x9c>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68f9      	ldr	r1, [r7, #12]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f005 f9a4 	bl	8009d7e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	7912      	ldrb	r2, [r2, #4]
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e040      	b.n	8004ae8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	da0e      	bge.n	8004a8c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	f003 0207 	and.w	r2, r3, #7
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	3310      	adds	r3, #16
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	4413      	add	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2201      	movs	r2, #1
 8004a88:	705a      	strb	r2, [r3, #1]
 8004a8a:	e00e      	b.n	8004aaa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a8c:	78fb      	ldrb	r3, [r7, #3]
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	4613      	mov	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_PCD_EP_ClrStall+0x82>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e00e      	b.n	8004ae8 <HAL_PCD_EP_ClrStall+0xa0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68f9      	ldr	r1, [r7, #12]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f005 f9a1 	bl	8009e20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b096      	sub	sp, #88	; 0x58
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004af8:	e3ae      	b.n	8005258 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8004b14:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f040 8170 	bne.w	8004dfe <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004b1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d14d      	bne.n	8004bc6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3a:	81fb      	strh	r3, [r7, #14]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3310      	adds	r3, #16
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4413      	add	r3, r2
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	6812      	ldr	r2, [r2, #0]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	441a      	add	r2, r3
 8004b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f007 f972 	bl	800be76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	7b1b      	ldrb	r3, [r3, #12]
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 835d 	beq.w	8005258 <PCD_EP_ISR_Handler+0x768>
 8004b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f040 8358 	bne.w	8005258 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	7b1b      	ldrb	r3, [r3, #12]
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b292      	uxth	r2, r2
 8004bba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	731a      	strb	r2, [r3, #12]
 8004bc4:	e348      	b.n	8005258 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004bcc:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004bd8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004bdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d032      	beq.n	8004c4a <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	4413      	add	r3, r2
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c02:	881b      	ldrh	r3, [r3, #0]
 8004c04:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c18:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c1c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	f005 fa29 	bl	800a076 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c30:	4013      	ands	r3, r2
 8004c32:	823b      	strh	r3, [r7, #16]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	8a3a      	ldrh	r2, [r7, #16]
 8004c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c3e:	b292      	uxth	r2, r2
 8004c40:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f007 f8ea 	bl	800be1c <HAL_PCD_SetupStageCallback>
 8004c48:	e306      	b.n	8005258 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c4a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f280 8302 	bge.w	8005258 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c60:	4013      	ands	r3, r2
 8004c62:	83fb      	strh	r3, [r7, #30]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	8bfa      	ldrh	r2, [r7, #30]
 8004c6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c6e:	b292      	uxth	r2, r2
 8004c70:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4413      	add	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c98:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d019      	beq.n	8004cd6 <PCD_EP_ISR_Handler+0x1e6>
 8004ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d015      	beq.n	8004cd6 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb0:	6959      	ldr	r1, [r3, #20]
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004cb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f005 f9db 	bl	800a076 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	441a      	add	r2, r3
 8004cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ccc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004cce:	2100      	movs	r1, #0
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f007 f8b5 	bl	800be40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004ce0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f040 82b5 	bne.w	8005258 <PCD_EP_ISR_Handler+0x768>
 8004cee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004cf2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004cf6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004cfa:	f000 82ad 	beq.w	8005258 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	4413      	add	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <PCD_EP_ISR_Handler+0x25c>
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	801a      	strh	r2, [r3, #0]
 8004d4a:	e039      	b.n	8004dc0 <PCD_EP_ISR_Handler+0x2d0>
 8004d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b3e      	cmp	r3, #62	; 0x3e
 8004d52:	d818      	bhi.n	8004d86 <PCD_EP_ISR_Handler+0x296>
 8004d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d56:	691b      	ldr	r3, [r3, #16]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d002      	beq.n	8004d6e <PCD_EP_ISR_Handler+0x27e>
 8004d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	881b      	ldrh	r3, [r3, #0]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	e01c      	b.n	8004dc0 <PCD_EP_ISR_Handler+0x2d0>
 8004d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	095b      	lsrs	r3, r3, #5
 8004d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 031f 	and.w	r3, r3, #31
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <PCD_EP_ISR_Handler+0x2b0>
 8004d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	647b      	str	r3, [r7, #68]	; 0x44
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	881b      	ldrh	r3, [r3, #0]
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	029b      	lsls	r3, r3, #10
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	4313      	orrs	r3, r2
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	827b      	strh	r3, [r7, #18]
 8004dd2:	8a7b      	ldrh	r3, [r7, #18]
 8004dd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004dd8:	827b      	strh	r3, [r7, #18]
 8004dda:	8a7b      	ldrh	r3, [r7, #18]
 8004ddc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004de0:	827b      	strh	r3, [r7, #18]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	8a7b      	ldrh	r3, [r7, #18]
 8004de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8013      	strh	r3, [r2, #0]
 8004dfc:	e22c      	b.n	8005258 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e12:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f280 80f6 	bge.w	8005008 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e32:	4013      	ands	r3, r2
 8004e34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8004e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e4e:	b292      	uxth	r2, r2
 8004e50:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004e52:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6a:	7b1b      	ldrb	r3, [r3, #12]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d123      	bne.n	8004eb8 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	4413      	add	r3, r2
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e94:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004e98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 808e 	beq.w	8004fbe <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea8:	6959      	ldr	r1, [r3, #20]
 8004eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eac:	88da      	ldrh	r2, [r3, #6]
 8004eae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004eb2:	f005 f8e0 	bl	800a076 <USB_ReadPMA>
 8004eb6:	e082      	b.n	8004fbe <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eba:	78db      	ldrb	r3, [r3, #3]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d10a      	bne.n	8004ed6 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ec0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f9d3 	bl	8005274 <HAL_PCD_EP_DB_Receive>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004ed4:	e073      	b.n	8004fbe <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	881b      	ldrh	r3, [r3, #0]
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d022      	beq.n	8004f7a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	00db      	lsls	r3, r3, #3
 8004f46:	4413      	add	r3, r2
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f58:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004f5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d02c      	beq.n	8004fbe <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6818      	ldr	r0, [r3, #0]
 8004f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6a:	6959      	ldr	r1, [r3, #20]
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f6e:	891a      	ldrh	r2, [r3, #8]
 8004f70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f74:	f005 f87f 	bl	800a076 <USB_ReadPMA>
 8004f78:	e021      	b.n	8004fbe <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	4413      	add	r3, r2
 8004f94:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f9e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004fa2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6818      	ldr	r0, [r3, #0]
 8004fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb0:	6959      	ldr	r1, [r3, #20]
 8004fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb4:	895a      	ldrh	r2, [r3, #10]
 8004fb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fba:	f005 f85c 	bl	800a076 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fc6:	441a      	add	r2, r3
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fce:	695a      	ldr	r2, [r3, #20]
 8004fd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fd4:	441a      	add	r2, r3
 8004fd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fd8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004fda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d005      	beq.n	8004fee <PCD_EP_ISR_Handler+0x4fe>
 8004fe2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d206      	bcs.n	8004ffc <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f006 ff23 	bl	800be40 <HAL_PCD_DataOutStageCallback>
 8004ffa:	e005      	b.n	8005008 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005002:	4618      	mov	r0, r3
 8005004:	f003 fb09 	bl	800861a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005008:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b00      	cmp	r3, #0
 8005012:	f000 8121 	beq.w	8005258 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8005016:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800501a:	4613      	mov	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4413      	add	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	3310      	adds	r3, #16
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	4413      	add	r3, r2
 8005028:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005044:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	441a      	add	r2, r3
 8005056:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800505a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800505e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005062:	b29b      	uxth	r3, r3
 8005064:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005068:	78db      	ldrb	r3, [r3, #3]
 800506a:	2b01      	cmp	r3, #1
 800506c:	f040 80a2 	bne.w	80051b4 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8005070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005072:	2200      	movs	r2, #0
 8005074:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005078:	7b1b      	ldrb	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8093 	beq.w	80051a6 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005080:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005088:	2b00      	cmp	r3, #0
 800508a:	d046      	beq.n	800511a <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800508c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800508e:	785b      	ldrb	r3, [r3, #1]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d126      	bne.n	80050e2 <PCD_EP_ISR_Handler+0x5f2>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a8:	4413      	add	r3, r2
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
 80050ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	00da      	lsls	r2, r3, #3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	4413      	add	r3, r2
 80050b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050ba:	623b      	str	r3, [r7, #32]
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6a3b      	ldr	r3, [r7, #32]
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	e061      	b.n	80051a6 <PCD_EP_ISR_Handler+0x6b6>
 80050e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d15d      	bne.n	80051a6 <PCD_EP_ISR_Handler+0x6b6>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	461a      	mov	r2, r3
 80050fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fe:	4413      	add	r3, r2
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	00da      	lsls	r2, r3, #3
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	4413      	add	r3, r2
 800510c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	2200      	movs	r2, #0
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	e045      	b.n	80051a6 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005120:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d126      	bne.n	8005176 <PCD_EP_ISR_Handler+0x686>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513c:	4413      	add	r3, r2
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
 8005140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	00da      	lsls	r2, r3, #3
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005148:	4413      	add	r3, r2
 800514a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800514e:	633b      	str	r3, [r7, #48]	; 0x30
 8005150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800515a:	b29a      	uxth	r2, r3
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800516e:	b29a      	uxth	r2, r3
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e017      	b.n	80051a6 <PCD_EP_ISR_Handler+0x6b6>
 8005176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d113      	bne.n	80051a6 <PCD_EP_ISR_Handler+0x6b6>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005186:	b29b      	uxth	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800518c:	4413      	add	r3, r2
 800518e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	00da      	lsls	r2, r3, #3
 8005196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005198:	4413      	add	r3, r2
 800519a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800519e:	63bb      	str	r3, [r7, #56]	; 0x38
 80051a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a2:	2200      	movs	r2, #0
 80051a4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f006 fe62 	bl	800be76 <HAL_PCD_DataInStageCallback>
 80051b2:	e051      	b.n	8005258 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80051b4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d144      	bne.n	800524a <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	4413      	add	r3, r2
 80051da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80051e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ea:	699a      	ldr	r2, [r3, #24]
 80051ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d907      	bls.n	8005204 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80051f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80051fc:	1ad2      	subs	r2, r2, r3
 80051fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005200:	619a      	str	r2, [r3, #24]
 8005202:	e002      	b.n	800520a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005206:	2200      	movs	r2, #0
 8005208:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800520a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	4619      	mov	r1, r3
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f006 fe2c 	bl	800be76 <HAL_PCD_DataInStageCallback>
 800521e:	e01b      	b.n	8005258 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005228:	441a      	add	r2, r3
 800522a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800522e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005230:	69da      	ldr	r2, [r3, #28]
 8005232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005236:	441a      	add	r2, r3
 8005238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005242:	4618      	mov	r0, r3
 8005244:	f003 f9e9 	bl	800861a <USB_EPStartXfer>
 8005248:	e006      	b.n	8005258 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800524a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800524e:	461a      	mov	r2, r3
 8005250:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f917 	bl	8005486 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005260:	b29b      	uxth	r3, r3
 8005262:	b21b      	sxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	f6ff ac48 	blt.w	8004afa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3758      	adds	r7, #88	; 0x58
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d07c      	beq.n	8005386 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	4413      	add	r3, r2
 80052a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052b0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	8b7b      	ldrh	r3, [r7, #26]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d306      	bcc.n	80052ca <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	699a      	ldr	r2, [r3, #24]
 80052c0:	8b7b      	ldrh	r3, [r7, #26]
 80052c2:	1ad2      	subs	r2, r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	619a      	str	r2, [r3, #24]
 80052c8:	e002      	b.n	80052d0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	2200      	movs	r2, #0
 80052ce:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d123      	bne.n	8005320 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f2:	833b      	strh	r3, [r7, #24]
 80052f4:	8b3b      	ldrh	r3, [r7, #24]
 80052f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80052fa:	833b      	strh	r3, [r7, #24]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	441a      	add	r2, r3
 800530a:	8b3b      	ldrh	r3, [r7, #24]
 800530c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800531c:	b29b      	uxth	r3, r3
 800531e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01f      	beq.n	800536a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	4413      	add	r3, r2
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	b29b      	uxth	r3, r3
 800533c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005344:	82fb      	strh	r3, [r7, #22]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	441a      	add	r2, r3
 8005354:	8afb      	ldrh	r3, [r7, #22]
 8005356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800535e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005362:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005366:	b29b      	uxth	r3, r3
 8005368:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800536a:	8b7b      	ldrh	r3, [r7, #26]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 8085 	beq.w	800547c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	6959      	ldr	r1, [r3, #20]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	891a      	ldrh	r2, [r3, #8]
 800537e:	8b7b      	ldrh	r3, [r7, #26]
 8005380:	f004 fe79 	bl	800a076 <USB_ReadPMA>
 8005384:	e07a      	b.n	800547c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538e:	b29b      	uxth	r3, r3
 8005390:	461a      	mov	r2, r3
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	6812      	ldr	r2, [r2, #0]
 800539e:	4413      	add	r3, r2
 80053a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053aa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	8b7b      	ldrh	r3, [r7, #26]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d306      	bcc.n	80053c4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	699a      	ldr	r2, [r3, #24]
 80053ba:	8b7b      	ldrh	r3, [r7, #26]
 80053bc:	1ad2      	subs	r2, r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	619a      	str	r2, [r3, #24]
 80053c2:	e002      	b.n	80053ca <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2200      	movs	r2, #0
 80053c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d123      	bne.n	800541a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	461a      	mov	r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ec:	83fb      	strh	r3, [r7, #30]
 80053ee:	8bfb      	ldrh	r3, [r7, #30]
 80053f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80053f4:	83fb      	strh	r3, [r7, #30]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	8bfb      	ldrh	r3, [r7, #30]
 8005406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800540a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005416:	b29b      	uxth	r3, r3
 8005418:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d11f      	bne.n	8005464 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	461a      	mov	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543e:	83bb      	strh	r3, [r7, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	441a      	add	r2, r3
 800544e:	8bbb      	ldrh	r3, [r7, #28]
 8005450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800545c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005460:	b29b      	uxth	r3, r3
 8005462:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005464:	8b7b      	ldrh	r3, [r7, #26]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d008      	beq.n	800547c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	6959      	ldr	r1, [r3, #20]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	895a      	ldrh	r2, [r3, #10]
 8005476:	8b7b      	ldrh	r3, [r7, #26]
 8005478:	f004 fdfd 	bl	800a076 <USB_ReadPMA>
    }
  }

  return count;
 800547c:	8b7b      	ldrh	r3, [r7, #26]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b0a4      	sub	sp, #144	; 0x90
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	4613      	mov	r3, r2
 8005492:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005494:	88fb      	ldrh	r3, [r7, #6]
 8005496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 81db 	beq.w	8005856 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4413      	add	r3, r2
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	6812      	ldr	r2, [r2, #0]
 80054b8:	4413      	add	r3, r2
 80054ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	699a      	ldr	r2, [r3, #24]
 80054cc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d907      	bls.n	80054e4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80054dc:	1ad2      	subs	r2, r2, r3
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	619a      	str	r2, [r3, #24]
 80054e2:	e002      	b.n	80054ea <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	2200      	movs	r2, #0
 80054e8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 80b9 	bne.w	8005666 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d126      	bne.n	800554a <HAL_PCD_EP_DB_Transmit+0xc4>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005510:	4413      	add	r3, r2
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	00da      	lsls	r2, r3, #3
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	4413      	add	r3, r2
 800551e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005522:	62bb      	str	r3, [r7, #40]	; 0x28
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800552e:	b29a      	uxth	r2, r3
 8005530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800553e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005542:	b29a      	uxth	r2, r3
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e01a      	b.n	8005580 <HAL_PCD_EP_DB_Transmit+0xfa>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	785b      	ldrb	r3, [r3, #1]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d116      	bne.n	8005580 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	637b      	str	r3, [r7, #52]	; 0x34
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005560:	b29b      	uxth	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	4413      	add	r3, r2
 8005568:	637b      	str	r3, [r7, #52]	; 0x34
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	00da      	lsls	r2, r3, #3
 8005570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005572:	4413      	add	r3, r2
 8005574:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005578:	633b      	str	r3, [r7, #48]	; 0x30
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	2200      	movs	r2, #0
 800557e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	785b      	ldrb	r3, [r3, #1]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d126      	bne.n	80055dc <HAL_PCD_EP_DB_Transmit+0x156>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	61fb      	str	r3, [r7, #28]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	4413      	add	r3, r2
 80055a4:	61fb      	str	r3, [r7, #28]
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	00da      	lsls	r2, r3, #3
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	801a      	strh	r2, [r3, #0]
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	881b      	ldrh	r3, [r3, #0]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	801a      	strh	r2, [r3, #0]
 80055da:	e017      	b.n	800560c <HAL_PCD_EP_DB_Transmit+0x186>
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d113      	bne.n	800560c <HAL_PCD_EP_DB_Transmit+0x186>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	4413      	add	r3, r2
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	00da      	lsls	r2, r3, #3
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	4413      	add	r3, r2
 8005600:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005604:	623b      	str	r3, [r7, #32]
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	2200      	movs	r2, #0
 800560a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	4619      	mov	r1, r3
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f006 fc2f 	bl	800be76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800561e:	2b00      	cmp	r3, #0
 8005620:	f000 82fa 	beq.w	8005c18 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	461a      	mov	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	881b      	ldrh	r3, [r3, #0]
 8005634:	b29b      	uxth	r3, r3
 8005636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	82fb      	strh	r3, [r7, #22]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	441a      	add	r2, r3
 800564e:	8afb      	ldrh	r3, [r7, #22]
 8005650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800565c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005660:	b29b      	uxth	r3, r3
 8005662:	8013      	strh	r3, [r2, #0]
 8005664:	e2d8      	b.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d021      	beq.n	80056b4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	461a      	mov	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	b29b      	uxth	r3, r3
 8005682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	441a      	add	r2, r3
 800569c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	f040 82ac 	bne.w	8005c18 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80056c8:	441a      	add	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	69da      	ldr	r2, [r3, #28]
 80056d2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80056d6:	441a      	add	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	6a1a      	ldr	r2, [r3, #32]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d30b      	bcc.n	8005700 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6a1a      	ldr	r2, [r3, #32]
 80056f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056f8:	1ad2      	subs	r2, r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	621a      	str	r2, [r3, #32]
 80056fe:	e017      	b.n	8005730 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d108      	bne.n	800571a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005708:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800570c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005718:	e00a      	b.n	8005730 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2200      	movs	r2, #0
 800572e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d165      	bne.n	8005804 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	4413      	add	r3, r2
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	00da      	lsls	r2, r3, #3
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005758:	4413      	add	r3, r2
 800575a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800575e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800576a:	b29a      	uxth	r2, r3
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <HAL_PCD_EP_DB_Transmit+0x308>
 8005778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578a:	801a      	strh	r2, [r3, #0]
 800578c:	e057      	b.n	800583e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800578e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005792:	2b3e      	cmp	r3, #62	; 0x3e
 8005794:	d818      	bhi.n	80057c8 <HAL_PCD_EP_DB_Transmit+0x342>
 8005796:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800579a:	085b      	lsrs	r3, r3, #1
 800579c:	64bb      	str	r3, [r7, #72]	; 0x48
 800579e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_PCD_EP_DB_Transmit+0x32a>
 80057aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ac:	3301      	adds	r3, #1
 80057ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	029b      	lsls	r3, r3, #10
 80057bc:	b29b      	uxth	r3, r3
 80057be:	4313      	orrs	r3, r2
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c4:	801a      	strh	r2, [r3, #0]
 80057c6:	e03a      	b.n	800583e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80057c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057d4:	f003 031f 	and.w	r3, r3, #31
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <HAL_PCD_EP_DB_Transmit+0x35c>
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	3b01      	subs	r3, #1
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	881b      	ldrh	r3, [r3, #0]
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	029b      	lsls	r3, r3, #10
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4313      	orrs	r3, r2
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e01c      	b.n	800583e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	785b      	ldrb	r3, [r3, #1]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d118      	bne.n	800583e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	647b      	str	r3, [r7, #68]	; 0x44
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800581a:	b29b      	uxth	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005820:	4413      	add	r3, r2
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	00da      	lsls	r2, r3, #3
 800582a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800582c:	4413      	add	r3, r2
 800582e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005832:	643b      	str	r3, [r7, #64]	; 0x40
 8005834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005838:	b29a      	uxth	r2, r3
 800583a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800583c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	6959      	ldr	r1, [r3, #20]
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	891a      	ldrh	r2, [r3, #8]
 800584a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800584e:	b29b      	uxth	r3, r3
 8005850:	f004 fbcf 	bl	8009ff2 <USB_WritePMA>
 8005854:	e1e0      	b.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800585e:	b29b      	uxth	r3, r3
 8005860:	461a      	mov	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	6812      	ldr	r2, [r2, #0]
 800586e:	4413      	add	r3, r2
 8005870:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800587a:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	699a      	ldr	r2, [r3, #24]
 8005882:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005886:	429a      	cmp	r2, r3
 8005888:	d307      	bcc.n	800589a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005892:	1ad2      	subs	r2, r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	619a      	str	r2, [r3, #24]
 8005898:	e002      	b.n	80058a0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2200      	movs	r2, #0
 800589e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f040 80c0 	bne.w	8005a2a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d126      	bne.n	8005900 <HAL_PCD_EP_DB_Transmit+0x47a>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	461a      	mov	r2, r3
 80058c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058c6:	4413      	add	r3, r2
 80058c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	00da      	lsls	r2, r3, #3
 80058d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058d2:	4413      	add	r3, r2
 80058d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80058da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058fc:	801a      	strh	r2, [r3, #0]
 80058fe:	e01a      	b.n	8005936 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	785b      	ldrb	r3, [r3, #1]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d116      	bne.n	8005936 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	667b      	str	r3, [r7, #100]	; 0x64
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800591c:	4413      	add	r3, r2
 800591e:	667b      	str	r3, [r7, #100]	; 0x64
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	00da      	lsls	r2, r3, #3
 8005926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005928:	4413      	add	r3, r2
 800592a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800592e:	663b      	str	r3, [r7, #96]	; 0x60
 8005930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005932:	2200      	movs	r2, #0
 8005934:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	677b      	str	r3, [r7, #116]	; 0x74
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d12b      	bne.n	800599c <HAL_PCD_EP_DB_Transmit+0x516>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005952:	b29b      	uxth	r3, r3
 8005954:	461a      	mov	r2, r3
 8005956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005958:	4413      	add	r3, r2
 800595a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00da      	lsls	r2, r3, #3
 8005962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005964:	4413      	add	r3, r2
 8005966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800596a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800596e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800597a:	b29a      	uxth	r2, r3
 800597c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800598e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005992:	b29a      	uxth	r2, r3
 8005994:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005998:	801a      	strh	r2, [r3, #0]
 800599a:	e017      	b.n	80059cc <HAL_PCD_EP_DB_Transmit+0x546>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d113      	bne.n	80059cc <HAL_PCD_EP_DB_Transmit+0x546>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b2:	4413      	add	r3, r2
 80059b4:	677b      	str	r3, [r7, #116]	; 0x74
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	00da      	lsls	r2, r3, #3
 80059bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059be:	4413      	add	r3, r2
 80059c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059c4:	673b      	str	r3, [r7, #112]	; 0x70
 80059c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059c8:	2200      	movs	r2, #0
 80059ca:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	4619      	mov	r1, r3
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f006 fa4f 	bl	800be76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f040 811a 	bne.w	8005c18 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	441a      	add	r2, r3
 8005a10:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	8013      	strh	r3, [r2, #0]
 8005a28:	e0f6      	b.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d121      	bne.n	8005a78 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	461a      	mov	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	461a      	mov	r2, r3
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	441a      	add	r2, r3
 8005a60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	f040 80ca 	bne.w	8005c18 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	695a      	ldr	r2, [r3, #20]
 8005a88:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005a8c:	441a      	add	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005a9a:	441a      	add	r2, r3
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d30b      	bcc.n	8005ac4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6a1a      	ldr	r2, [r3, #32]
 8005ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005abc:	1ad2      	subs	r2, r2, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	621a      	str	r2, [r3, #32]
 8005ac2:	e017      	b.n	8005af4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d108      	bne.n	8005ade <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005acc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005ad0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005adc:	e00a      	b.n	8005af4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2200      	movs	r2, #0
 8005af0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	657b      	str	r3, [r7, #84]	; 0x54
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	785b      	ldrb	r3, [r3, #1]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d165      	bne.n	8005bce <HAL_PCD_EP_DB_Transmit+0x748>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	461a      	mov	r2, r3
 8005b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b16:	4413      	add	r3, r2
 8005b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	00da      	lsls	r2, r3, #3
 8005b20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b22:	4413      	add	r3, r2
 8005b24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b38:	801a      	strh	r2, [r3, #0]
 8005b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10a      	bne.n	8005b58 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b54:	801a      	strh	r2, [r3, #0]
 8005b56:	e054      	b.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b5e:	d818      	bhi.n	8005b92 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005b60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b64:	085b      	lsrs	r3, r3, #1
 8005b66:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b76:	3301      	adds	r3, #1
 8005b78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	029b      	lsls	r3, r3, #10
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b8e:	801a      	strh	r2, [r3, #0]
 8005b90:	e037      	b.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d102      	bne.n	8005bac <HAL_PCD_EP_DB_Transmit+0x726>
 8005ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bae:	881b      	ldrh	r3, [r3, #0]
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	e019      	b.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	785b      	ldrb	r3, [r3, #1]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d115      	bne.n	8005c02 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be4:	4413      	add	r3, r2
 8005be6:	657b      	str	r3, [r7, #84]	; 0x54
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	00da      	lsls	r2, r3, #3
 8005bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bf6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c00:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6818      	ldr	r0, [r3, #0]
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	6959      	ldr	r1, [r3, #20]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	895a      	ldrh	r2, [r3, #10]
 8005c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f004 f9ed 	bl	8009ff2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c32:	82bb      	strh	r3, [r7, #20]
 8005c34:	8abb      	ldrh	r3, [r7, #20]
 8005c36:	f083 0310 	eor.w	r3, r3, #16
 8005c3a:	82bb      	strh	r3, [r7, #20]
 8005c3c:	8abb      	ldrh	r3, [r7, #20]
 8005c3e:	f083 0320 	eor.w	r3, r3, #32
 8005c42:	82bb      	strh	r3, [r7, #20]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	441a      	add	r2, r3
 8005c52:	8abb      	ldrh	r3, [r7, #20]
 8005c54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3790      	adds	r7, #144	; 0x90
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b087      	sub	sp, #28
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	60f8      	str	r0, [r7, #12]
 8005c7a:	607b      	str	r3, [r7, #4]
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	817b      	strh	r3, [r7, #10]
 8005c80:	4613      	mov	r3, r2
 8005c82:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c84:	897b      	ldrh	r3, [r7, #10]
 8005c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c90:	897b      	ldrh	r3, [r7, #10]
 8005c92:	f003 0207 	and.w	r2, r3, #7
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	00db      	lsls	r3, r3, #3
 8005c9e:	3310      	adds	r3, #16
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e009      	b.n	8005cbc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ca8:	897a      	ldrh	r2, [r7, #10]
 8005caa:	4613      	mov	r3, r2
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	00db      	lsls	r3, r3, #3
 8005cb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	4413      	add	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cbc:	893b      	ldrh	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	80da      	strh	r2, [r3, #6]
 8005cd0:	e00b      	b.n	8005cea <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	0c1b      	lsrs	r3, r3, #16
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	371c      	adds	r7, #28
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	f043 0301 	orr.w	r3, r3, #1
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f043 0302 	orr.w	r3, r3, #2
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3714      	adds	r7, #20
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d141      	bne.n	8005dde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d5a:	4b4b      	ldr	r3, [pc, #300]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d66:	d131      	bne.n	8005dcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d68:	4b47      	ldr	r3, [pc, #284]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d6e:	4a46      	ldr	r2, [pc, #280]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d78:	4b43      	ldr	r3, [pc, #268]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d80:	4a41      	ldr	r2, [pc, #260]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d88:	4b40      	ldr	r3, [pc, #256]	; (8005e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2232      	movs	r2, #50	; 0x32
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	4a3f      	ldr	r2, [pc, #252]	; (8005e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	0c9b      	lsrs	r3, r3, #18
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d9e:	e002      	b.n	8005da6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005da6:	4b38      	ldr	r3, [pc, #224]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db2:	d102      	bne.n	8005dba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f2      	bne.n	8005da0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dba:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc6:	d158      	bne.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e057      	b.n	8005e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dcc:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd2:	4a2d      	ldr	r2, [pc, #180]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dd8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ddc:	e04d      	b.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de4:	d141      	bne.n	8005e6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005de6:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005df2:	d131      	bne.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005df4:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfa:	4a23      	ldr	r2, [pc, #140]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e04:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e14:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2232      	movs	r2, #50	; 0x32
 8005e1a:	fb02 f303 	mul.w	r3, r2, r3
 8005e1e:	4a1c      	ldr	r2, [pc, #112]	; (8005e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	0c9b      	lsrs	r3, r3, #18
 8005e26:	3301      	adds	r3, #1
 8005e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e2a:	e002      	b.n	8005e32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e32:	4b15      	ldr	r3, [pc, #84]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e3e:	d102      	bne.n	8005e46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1f2      	bne.n	8005e2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d112      	bne.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e011      	b.n	8005e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e58:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e68:	e007      	b.n	8005e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e72:	4a05      	ldr	r2, [pc, #20]	; (8005e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	40007000 	.word	0x40007000
 8005e8c:	20000000 	.word	0x20000000
 8005e90:	431bde83 	.word	0x431bde83

08005e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b088      	sub	sp, #32
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e2fe      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d075      	beq.n	8005f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eb2:	4b97      	ldr	r3, [pc, #604]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ebc:	4b94      	ldr	r3, [pc, #592]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0303 	and.w	r3, r3, #3
 8005ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2b0c      	cmp	r3, #12
 8005eca:	d102      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x3e>
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d002      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x44>
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d10b      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	4b8d      	ldr	r3, [pc, #564]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d05b      	beq.n	8005f9c <HAL_RCC_OscConfig+0x108>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d157      	bne.n	8005f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e2d9      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_OscConfig+0x74>
 8005efa:	4b85      	ldr	r3, [pc, #532]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a84      	ldr	r2, [pc, #528]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e01d      	b.n	8005f44 <HAL_RCC_OscConfig+0xb0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f10:	d10c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x98>
 8005f12:	4b7f      	ldr	r3, [pc, #508]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a7e      	ldr	r2, [pc, #504]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b7c      	ldr	r3, [pc, #496]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a7b      	ldr	r2, [pc, #492]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e00b      	b.n	8005f44 <HAL_RCC_OscConfig+0xb0>
 8005f2c:	4b78      	ldr	r3, [pc, #480]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a77      	ldr	r2, [pc, #476]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4b75      	ldr	r3, [pc, #468]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a74      	ldr	r2, [pc, #464]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7fb fe64 	bl	8001c18 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f54:	f7fb fe60 	bl	8001c18 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	; 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e29e      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f66:	4b6a      	ldr	r3, [pc, #424]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0xc0>
 8005f72:	e014      	b.n	8005f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f74:	f7fb fe50 	bl	8001c18 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f7c:	f7fb fe4c 	bl	8001c18 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	; 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e28a      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f8e:	4b60      	ldr	r3, [pc, #384]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0xe8>
 8005f9a:	e000      	b.n	8005f9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d075      	beq.n	8006096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005faa:	4b59      	ldr	r3, [pc, #356]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005fb4:	4b56      	ldr	r3, [pc, #344]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	2b0c      	cmp	r3, #12
 8005fc2:	d102      	bne.n	8005fca <HAL_RCC_OscConfig+0x136>
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d002      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x13c>
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b04      	cmp	r3, #4
 8005fce:	d11f      	bne.n	8006010 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fd0:	4b4f      	ldr	r3, [pc, #316]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x154>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e25d      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe8:	4b49      	ldr	r3, [pc, #292]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	061b      	lsls	r3, r3, #24
 8005ff6:	4946      	ldr	r1, [pc, #280]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ffc:	4b45      	ldr	r3, [pc, #276]	; (8006114 <HAL_RCC_OscConfig+0x280>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4618      	mov	r0, r3
 8006002:	f7fb fdbd 	bl	8001b80 <HAL_InitTick>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d043      	beq.n	8006094 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e249      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d023      	beq.n	8006060 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006018:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a3c      	ldr	r2, [pc, #240]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 800601e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006024:	f7fb fdf8 	bl	8001c18 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800602c:	f7fb fdf4 	bl	8001c18 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b02      	cmp	r3, #2
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e232      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800603e:	4b34      	ldr	r3, [pc, #208]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604a:	4b31      	ldr	r3, [pc, #196]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	061b      	lsls	r3, r3, #24
 8006058:	492d      	ldr	r1, [pc, #180]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 800605a:	4313      	orrs	r3, r2
 800605c:	604b      	str	r3, [r1, #4]
 800605e:	e01a      	b.n	8006096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006060:	4b2b      	ldr	r3, [pc, #172]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a2a      	ldr	r2, [pc, #168]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8006066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800606a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fb fdd4 	bl	8001c18 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006074:	f7fb fdd0 	bl	8001c18 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e20e      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006086:	4b22      	ldr	r3, [pc, #136]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1f0      	bne.n	8006074 <HAL_RCC_OscConfig+0x1e0>
 8006092:	e000      	b.n	8006096 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d041      	beq.n	8006126 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d01c      	beq.n	80060e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060aa:	4b19      	ldr	r3, [pc, #100]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 80060ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b0:	4a17      	ldr	r2, [pc, #92]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060ba:	f7fb fdad 	bl	8001c18 <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060c0:	e008      	b.n	80060d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c2:	f7fb fda9 	bl	8001c18 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d901      	bls.n	80060d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e1e7      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060d4:	4b0e      	ldr	r3, [pc, #56]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 80060d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0ef      	beq.n	80060c2 <HAL_RCC_OscConfig+0x22e>
 80060e2:	e020      	b.n	8006126 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e4:	4b0a      	ldr	r3, [pc, #40]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 80060e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ea:	4a09      	ldr	r2, [pc, #36]	; (8006110 <HAL_RCC_OscConfig+0x27c>)
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f4:	f7fb fd90 	bl	8001c18 <HAL_GetTick>
 80060f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060fa:	e00d      	b.n	8006118 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060fc:	f7fb fd8c 	bl	8001c18 <HAL_GetTick>
 8006100:	4602      	mov	r2, r0
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	2b02      	cmp	r3, #2
 8006108:	d906      	bls.n	8006118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e1ca      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
 800610e:	bf00      	nop
 8006110:	40021000 	.word	0x40021000
 8006114:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006118:	4b8c      	ldr	r3, [pc, #560]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 800611a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800611e:	f003 0302 	and.w	r3, r3, #2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1ea      	bne.n	80060fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0304 	and.w	r3, r3, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80a6 	beq.w	8006280 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006134:	2300      	movs	r3, #0
 8006136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006138:	4b84      	ldr	r3, [pc, #528]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 800613a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <HAL_RCC_OscConfig+0x2b4>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <HAL_RCC_OscConfig+0x2b6>
 8006148:	2300      	movs	r3, #0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00d      	beq.n	800616a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800614e:	4b7f      	ldr	r3, [pc, #508]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006152:	4a7e      	ldr	r2, [pc, #504]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006158:	6593      	str	r3, [r2, #88]	; 0x58
 800615a:	4b7c      	ldr	r3, [pc, #496]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 800615c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006166:	2301      	movs	r3, #1
 8006168:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800616a:	4b79      	ldr	r3, [pc, #484]	; (8006350 <HAL_RCC_OscConfig+0x4bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d118      	bne.n	80061a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006176:	4b76      	ldr	r3, [pc, #472]	; (8006350 <HAL_RCC_OscConfig+0x4bc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a75      	ldr	r2, [pc, #468]	; (8006350 <HAL_RCC_OscConfig+0x4bc>)
 800617c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006182:	f7fb fd49 	bl	8001c18 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618a:	f7fb fd45 	bl	8001c18 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e183      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800619c:	4b6c      	ldr	r3, [pc, #432]	; (8006350 <HAL_RCC_OscConfig+0x4bc>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d108      	bne.n	80061c2 <HAL_RCC_OscConfig+0x32e>
 80061b0:	4b66      	ldr	r3, [pc, #408]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	4a65      	ldr	r2, [pc, #404]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061b8:	f043 0301 	orr.w	r3, r3, #1
 80061bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061c0:	e024      	b.n	800620c <HAL_RCC_OscConfig+0x378>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	2b05      	cmp	r3, #5
 80061c8:	d110      	bne.n	80061ec <HAL_RCC_OscConfig+0x358>
 80061ca:	4b60      	ldr	r3, [pc, #384]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d0:	4a5e      	ldr	r2, [pc, #376]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061d2:	f043 0304 	orr.w	r3, r3, #4
 80061d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061da:	4b5c      	ldr	r3, [pc, #368]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e0:	4a5a      	ldr	r2, [pc, #360]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061ea:	e00f      	b.n	800620c <HAL_RCC_OscConfig+0x378>
 80061ec:	4b57      	ldr	r3, [pc, #348]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	4a56      	ldr	r2, [pc, #344]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061f4:	f023 0301 	bic.w	r3, r3, #1
 80061f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061fc:	4b53      	ldr	r3, [pc, #332]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006202:	4a52      	ldr	r2, [pc, #328]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006204:	f023 0304 	bic.w	r3, r3, #4
 8006208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d016      	beq.n	8006242 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7fb fd00 	bl	8001c18 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800621a:	e00a      	b.n	8006232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621c:	f7fb fcfc 	bl	8001c18 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	f241 3288 	movw	r2, #5000	; 0x1388
 800622a:	4293      	cmp	r3, r2
 800622c:	d901      	bls.n	8006232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e138      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006232:	4b46      	ldr	r3, [pc, #280]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d0ed      	beq.n	800621c <HAL_RCC_OscConfig+0x388>
 8006240:	e015      	b.n	800626e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006242:	f7fb fce9 	bl	8001c18 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006248:	e00a      	b.n	8006260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800624a:	f7fb fce5 	bl	8001c18 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	4293      	cmp	r3, r2
 800625a:	d901      	bls.n	8006260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e121      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006260:	4b3a      	ldr	r3, [pc, #232]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f003 0302 	and.w	r3, r3, #2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1ed      	bne.n	800624a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800626e:	7ffb      	ldrb	r3, [r7, #31]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d105      	bne.n	8006280 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006274:	4b35      	ldr	r3, [pc, #212]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006278:	4a34      	ldr	r2, [pc, #208]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 800627a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800627e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0320 	and.w	r3, r3, #32
 8006288:	2b00      	cmp	r3, #0
 800628a:	d03c      	beq.n	8006306 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d01c      	beq.n	80062ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006294:	4b2d      	ldr	r3, [pc, #180]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006296:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800629a:	4a2c      	ldr	r2, [pc, #176]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062a4:	f7fb fcb8 	bl	8001c18 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062ac:	f7fb fcb4 	bl	8001c18 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e0f2      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062be:	4b23      	ldr	r3, [pc, #140]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80062c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d0ef      	beq.n	80062ac <HAL_RCC_OscConfig+0x418>
 80062cc:	e01b      	b.n	8006306 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80062ce:	4b1f      	ldr	r3, [pc, #124]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80062d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d4:	4a1d      	ldr	r2, [pc, #116]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80062d6:	f023 0301 	bic.w	r3, r3, #1
 80062da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062de:	f7fb fc9b 	bl	8001c18 <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062e6:	f7fb fc97 	bl	8001c18 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e0d5      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80062f8:	4b14      	ldr	r3, [pc, #80]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 80062fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062fe:	f003 0302 	and.w	r3, r3, #2
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1ef      	bne.n	80062e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80c9 	beq.w	80064a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006310:	4b0e      	ldr	r3, [pc, #56]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b0c      	cmp	r3, #12
 800631a:	f000 8083 	beq.w	8006424 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d15e      	bne.n	80063e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006326:	4b09      	ldr	r3, [pc, #36]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a08      	ldr	r2, [pc, #32]	; (800634c <HAL_RCC_OscConfig+0x4b8>)
 800632c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006332:	f7fb fc71 	bl	8001c18 <HAL_GetTick>
 8006336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006338:	e00c      	b.n	8006354 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800633a:	f7fb fc6d 	bl	8001c18 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d905      	bls.n	8006354 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e0ab      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
 800634c:	40021000 	.word	0x40021000
 8006350:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006354:	4b55      	ldr	r3, [pc, #340]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1ec      	bne.n	800633a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006360:	4b52      	ldr	r3, [pc, #328]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	4b52      	ldr	r3, [pc, #328]	; (80064b0 <HAL_RCC_OscConfig+0x61c>)
 8006366:	4013      	ands	r3, r2
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	6a11      	ldr	r1, [r2, #32]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006370:	3a01      	subs	r2, #1
 8006372:	0112      	lsls	r2, r2, #4
 8006374:	4311      	orrs	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800637a:	0212      	lsls	r2, r2, #8
 800637c:	4311      	orrs	r1, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006382:	0852      	lsrs	r2, r2, #1
 8006384:	3a01      	subs	r2, #1
 8006386:	0552      	lsls	r2, r2, #21
 8006388:	4311      	orrs	r1, r2
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800638e:	0852      	lsrs	r2, r2, #1
 8006390:	3a01      	subs	r2, #1
 8006392:	0652      	lsls	r2, r2, #25
 8006394:	4311      	orrs	r1, r2
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800639a:	06d2      	lsls	r2, r2, #27
 800639c:	430a      	orrs	r2, r1
 800639e:	4943      	ldr	r1, [pc, #268]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063a4:	4b41      	ldr	r3, [pc, #260]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a40      	ldr	r2, [pc, #256]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063b0:	4b3e      	ldr	r3, [pc, #248]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a3d      	ldr	r2, [pc, #244]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063bc:	f7fb fc2c 	bl	8001c18 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063c4:	f7fb fc28 	bl	8001c18 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e066      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063d6:	4b35      	ldr	r3, [pc, #212]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x530>
 80063e2:	e05e      	b.n	80064a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063e4:	4b31      	ldr	r3, [pc, #196]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a30      	ldr	r2, [pc, #192]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 80063ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fb fc12 	bl	8001c18 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f8:	f7fb fc0e 	bl	8001c18 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e04c      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800640a:	4b28      	ldr	r3, [pc, #160]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006416:	4b25      	ldr	r3, [pc, #148]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	4924      	ldr	r1, [pc, #144]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 800641c:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <HAL_RCC_OscConfig+0x620>)
 800641e:	4013      	ands	r3, r2
 8006420:	60cb      	str	r3, [r1, #12]
 8006422:	e03e      	b.n	80064a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e039      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006430:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <HAL_RCC_OscConfig+0x618>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	f003 0203 	and.w	r2, r3, #3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	429a      	cmp	r2, r3
 8006442:	d12c      	bne.n	800649e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	3b01      	subs	r3, #1
 8006450:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006452:	429a      	cmp	r2, r3
 8006454:	d123      	bne.n	800649e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006460:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006462:	429a      	cmp	r2, r3
 8006464:	d11b      	bne.n	800649e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006470:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006472:	429a      	cmp	r2, r3
 8006474:	d113      	bne.n	800649e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006480:	085b      	lsrs	r3, r3, #1
 8006482:	3b01      	subs	r3, #1
 8006484:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006486:	429a      	cmp	r2, r3
 8006488:	d109      	bne.n	800649e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	3b01      	subs	r3, #1
 8006498:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d001      	beq.n	80064a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e000      	b.n	80064a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3720      	adds	r7, #32
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	40021000 	.word	0x40021000
 80064b0:	019f800c 	.word	0x019f800c
 80064b4:	feeefffc 	.word	0xfeeefffc

080064b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e11e      	b.n	800670e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064d0:	4b91      	ldr	r3, [pc, #580]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d910      	bls.n	8006500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064de:	4b8e      	ldr	r3, [pc, #568]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f023 020f 	bic.w	r2, r3, #15
 80064e6:	498c      	ldr	r1, [pc, #560]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ee:	4b8a      	ldr	r3, [pc, #552]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d001      	beq.n	8006500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e106      	b.n	800670e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d073      	beq.n	80065f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b03      	cmp	r3, #3
 8006512:	d129      	bne.n	8006568 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006514:	4b81      	ldr	r3, [pc, #516]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e0f4      	b.n	800670e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006524:	f000 f972 	bl	800680c <RCC_GetSysClockFreqFromPLLSource>
 8006528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4a7c      	ldr	r2, [pc, #496]	; (8006720 <HAL_RCC_ClockConfig+0x268>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d93f      	bls.n	80065b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006532:	4b7a      	ldr	r3, [pc, #488]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d009      	beq.n	8006552 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006546:	2b00      	cmp	r3, #0
 8006548:	d033      	beq.n	80065b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800654e:	2b00      	cmp	r3, #0
 8006550:	d12f      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006552:	4b72      	ldr	r3, [pc, #456]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800655a:	4a70      	ldr	r2, [pc, #448]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 800655c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006562:	2380      	movs	r3, #128	; 0x80
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e024      	b.n	80065b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b02      	cmp	r3, #2
 800656e:	d107      	bne.n	8006580 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006570:	4b6a      	ldr	r3, [pc, #424]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006578:	2b00      	cmp	r3, #0
 800657a:	d109      	bne.n	8006590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0c6      	b.n	800670e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006580:	4b66      	ldr	r3, [pc, #408]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0be      	b.n	800670e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006590:	f000 f8ce 	bl	8006730 <HAL_RCC_GetSysClockFreq>
 8006594:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	4a61      	ldr	r2, [pc, #388]	; (8006720 <HAL_RCC_ClockConfig+0x268>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d909      	bls.n	80065b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800659e:	4b5f      	ldr	r3, [pc, #380]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a6:	4a5d      	ldr	r2, [pc, #372]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80065a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065ae:	2380      	movs	r3, #128	; 0x80
 80065b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065b2:	4b5a      	ldr	r3, [pc, #360]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f023 0203 	bic.w	r2, r3, #3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	4957      	ldr	r1, [pc, #348]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c4:	f7fb fb28 	bl	8001c18 <HAL_GetTick>
 80065c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065cc:	f7fb fb24 	bl	8001c18 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e095      	b.n	800670e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065e2:	4b4e      	ldr	r3, [pc, #312]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f003 020c 	and.w	r2, r3, #12
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d1eb      	bne.n	80065cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0302 	and.w	r3, r3, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d023      	beq.n	8006648 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d005      	beq.n	8006618 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800660c:	4b43      	ldr	r3, [pc, #268]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4a42      	ldr	r2, [pc, #264]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006612:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006616:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006624:	4b3d      	ldr	r3, [pc, #244]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800662c:	4a3b      	ldr	r2, [pc, #236]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 800662e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006634:	4b39      	ldr	r3, [pc, #228]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	4936      	ldr	r1, [pc, #216]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006642:	4313      	orrs	r3, r2
 8006644:	608b      	str	r3, [r1, #8]
 8006646:	e008      	b.n	800665a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b80      	cmp	r3, #128	; 0x80
 800664c:	d105      	bne.n	800665a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800664e:	4b33      	ldr	r3, [pc, #204]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	4a32      	ldr	r2, [pc, #200]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 8006654:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006658:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800665a:	4b2f      	ldr	r3, [pc, #188]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	683a      	ldr	r2, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d21d      	bcs.n	80066a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f023 020f 	bic.w	r2, r3, #15
 8006670:	4929      	ldr	r1, [pc, #164]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	4313      	orrs	r3, r2
 8006676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006678:	f7fb face 	bl	8001c18 <HAL_GetTick>
 800667c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800667e:	e00a      	b.n	8006696 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006680:	f7fb faca 	bl	8001c18 <HAL_GetTick>
 8006684:	4602      	mov	r2, r0
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	1ad3      	subs	r3, r2, r3
 800668a:	f241 3288 	movw	r2, #5000	; 0x1388
 800668e:	4293      	cmp	r3, r2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e03b      	b.n	800670e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006696:	4b20      	ldr	r3, [pc, #128]	; (8006718 <HAL_RCC_ClockConfig+0x260>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d1ed      	bne.n	8006680 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066b0:	4b1a      	ldr	r3, [pc, #104]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	4917      	ldr	r1, [pc, #92]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d009      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066ce:	4b13      	ldr	r3, [pc, #76]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	490f      	ldr	r1, [pc, #60]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80066e2:	f000 f825 	bl	8006730 <HAL_RCC_GetSysClockFreq>
 80066e6:	4602      	mov	r2, r0
 80066e8:	4b0c      	ldr	r3, [pc, #48]	; (800671c <HAL_RCC_ClockConfig+0x264>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	f003 030f 	and.w	r3, r3, #15
 80066f2:	490c      	ldr	r1, [pc, #48]	; (8006724 <HAL_RCC_ClockConfig+0x26c>)
 80066f4:	5ccb      	ldrb	r3, [r1, r3]
 80066f6:	f003 031f 	and.w	r3, r3, #31
 80066fa:	fa22 f303 	lsr.w	r3, r2, r3
 80066fe:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <HAL_RCC_ClockConfig+0x270>)
 8006700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <HAL_RCC_ClockConfig+0x274>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7fb fa3a 	bl	8001b80 <HAL_InitTick>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	40022000 	.word	0x40022000
 800671c:	40021000 	.word	0x40021000
 8006720:	04c4b400 	.word	0x04c4b400
 8006724:	0800cdf4 	.word	0x0800cdf4
 8006728:	20000000 	.word	0x20000000
 800672c:	20000004 	.word	0x20000004

08006730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006736:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f003 030c 	and.w	r3, r3, #12
 800673e:	2b04      	cmp	r3, #4
 8006740:	d102      	bne.n	8006748 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006742:	4b2a      	ldr	r3, [pc, #168]	; (80067ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8006744:	613b      	str	r3, [r7, #16]
 8006746:	e047      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006748:	4b27      	ldr	r3, [pc, #156]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f003 030c 	and.w	r3, r3, #12
 8006750:	2b08      	cmp	r3, #8
 8006752:	d102      	bne.n	800675a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006754:	4b26      	ldr	r3, [pc, #152]	; (80067f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	e03e      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800675a:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 030c 	and.w	r3, r3, #12
 8006762:	2b0c      	cmp	r3, #12
 8006764:	d136      	bne.n	80067d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006766:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	f003 0303 	and.w	r3, r3, #3
 800676e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006770:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	091b      	lsrs	r3, r3, #4
 8006776:	f003 030f 	and.w	r3, r3, #15
 800677a:	3301      	adds	r3, #1
 800677c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2b03      	cmp	r3, #3
 8006782:	d10c      	bne.n	800679e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006784:	4a1a      	ldr	r2, [pc, #104]	; (80067f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	fbb2 f3f3 	udiv	r3, r2, r3
 800678c:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800678e:	68d2      	ldr	r2, [r2, #12]
 8006790:	0a12      	lsrs	r2, r2, #8
 8006792:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	617b      	str	r3, [r7, #20]
      break;
 800679c:	e00c      	b.n	80067b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800679e:	4a13      	ldr	r2, [pc, #76]	; (80067ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067a6:	4a10      	ldr	r2, [pc, #64]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067a8:	68d2      	ldr	r2, [r2, #12]
 80067aa:	0a12      	lsrs	r2, r2, #8
 80067ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
 80067b4:	617b      	str	r3, [r7, #20]
      break;
 80067b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067b8:	4b0b      	ldr	r3, [pc, #44]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	0e5b      	lsrs	r3, r3, #25
 80067be:	f003 0303 	and.w	r3, r3, #3
 80067c2:	3301      	adds	r3, #1
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	e001      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80067d8:	693b      	ldr	r3, [r7, #16]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
 80067ec:	00f42400 	.word	0x00f42400
 80067f0:	007a1200 	.word	0x007a1200

080067f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067f8:	4b03      	ldr	r3, [pc, #12]	; (8006808 <HAL_RCC_GetHCLKFreq+0x14>)
 80067fa:	681b      	ldr	r3, [r3, #0]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000000 	.word	0x20000000

0800680c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006812:	4b1e      	ldr	r3, [pc, #120]	; (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800681c:	4b1b      	ldr	r3, [pc, #108]	; (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	091b      	lsrs	r3, r3, #4
 8006822:	f003 030f 	and.w	r3, r3, #15
 8006826:	3301      	adds	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d10c      	bne.n	800684a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006830:	4a17      	ldr	r2, [pc, #92]	; (8006890 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	fbb2 f3f3 	udiv	r3, r2, r3
 8006838:	4a14      	ldr	r2, [pc, #80]	; (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800683a:	68d2      	ldr	r2, [r2, #12]
 800683c:	0a12      	lsrs	r2, r2, #8
 800683e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	617b      	str	r3, [r7, #20]
    break;
 8006848:	e00c      	b.n	8006864 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800684a:	4a12      	ldr	r2, [pc, #72]	; (8006894 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006852:	4a0e      	ldr	r2, [pc, #56]	; (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006854:	68d2      	ldr	r2, [r2, #12]
 8006856:	0a12      	lsrs	r2, r2, #8
 8006858:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800685c:	fb02 f303 	mul.w	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]
    break;
 8006862:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006864:	4b09      	ldr	r3, [pc, #36]	; (800688c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	0e5b      	lsrs	r3, r3, #25
 800686a:	f003 0303 	and.w	r3, r3, #3
 800686e:	3301      	adds	r3, #1
 8006870:	005b      	lsls	r3, r3, #1
 8006872:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	fbb2 f3f3 	udiv	r3, r2, r3
 800687c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800687e:	687b      	ldr	r3, [r7, #4]
}
 8006880:	4618      	mov	r0, r3
 8006882:	371c      	adds	r7, #28
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	40021000 	.word	0x40021000
 8006890:	007a1200 	.word	0x007a1200
 8006894:	00f42400 	.word	0x00f42400

08006898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80068a0:	2300      	movs	r3, #0
 80068a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80068a4:	2300      	movs	r3, #0
 80068a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 8098 	beq.w	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068b6:	2300      	movs	r3, #0
 80068b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068ba:	4b43      	ldr	r3, [pc, #268]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10d      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068c6:	4b40      	ldr	r3, [pc, #256]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ca:	4a3f      	ldr	r2, [pc, #252]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068d0:	6593      	str	r3, [r2, #88]	; 0x58
 80068d2:	4b3d      	ldr	r3, [pc, #244]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068da:	60bb      	str	r3, [r7, #8]
 80068dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068de:	2301      	movs	r3, #1
 80068e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068e2:	4b3a      	ldr	r3, [pc, #232]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a39      	ldr	r2, [pc, #228]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068ee:	f7fb f993 	bl	8001c18 <HAL_GetTick>
 80068f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f4:	e009      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f6:	f7fb f98f 	bl	8001c18 <HAL_GetTick>
 80068fa:	4602      	mov	r2, r0
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d902      	bls.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	74fb      	strb	r3, [r7, #19]
        break;
 8006908:	e005      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0ef      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006916:	7cfb      	ldrb	r3, [r7, #19]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d159      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800691c:	4b2a      	ldr	r3, [pc, #168]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006922:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006926:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d01e      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	429a      	cmp	r2, r3
 8006936:	d019      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006938:	4b23      	ldr	r3, [pc, #140]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006942:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006944:	4b20      	ldr	r3, [pc, #128]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	4a1f      	ldr	r2, [pc, #124]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006954:	4b1c      	ldr	r3, [pc, #112]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695a:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800695c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006964:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006976:	f7fb f94f 	bl	8001c18 <HAL_GetTick>
 800697a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800697c:	e00b      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800697e:	f7fb f94b 	bl	8001c18 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	f241 3288 	movw	r2, #5000	; 0x1388
 800698c:	4293      	cmp	r3, r2
 800698e:	d902      	bls.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	74fb      	strb	r3, [r7, #19]
            break;
 8006994:	e006      	b.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699c:	f003 0302 	and.w	r3, r3, #2
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d0ec      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069aa:	4b07      	ldr	r3, [pc, #28]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	4903      	ldr	r1, [pc, #12]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069c0:	e008      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069c2:	7cfb      	ldrb	r3, [r7, #19]
 80069c4:	74bb      	strb	r3, [r7, #18]
 80069c6:	e005      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069c8:	40021000 	.word	0x40021000
 80069cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069d4:	7c7b      	ldrb	r3, [r7, #17]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d105      	bne.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069da:	4ba6      	ldr	r3, [pc, #664]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069de:	4aa5      	ldr	r2, [pc, #660]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069f2:	4ba0      	ldr	r3, [pc, #640]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069f8:	f023 0203 	bic.w	r2, r3, #3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	499c      	ldr	r1, [pc, #624]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a14:	4b97      	ldr	r3, [pc, #604]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1a:	f023 020c 	bic.w	r2, r3, #12
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	4994      	ldr	r1, [pc, #592]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a36:	4b8f      	ldr	r3, [pc, #572]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	498b      	ldr	r1, [pc, #556]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a58:	4b86      	ldr	r3, [pc, #536]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	4983      	ldr	r1, [pc, #524]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a7a:	4b7e      	ldr	r3, [pc, #504]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	497a      	ldr	r1, [pc, #488]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a9c:	4b75      	ldr	r3, [pc, #468]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	4972      	ldr	r1, [pc, #456]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006abe:	4b6d      	ldr	r3, [pc, #436]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	4969      	ldr	r1, [pc, #420]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ae0:	4b64      	ldr	r3, [pc, #400]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	4961      	ldr	r1, [pc, #388]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b02:	4b5c      	ldr	r3, [pc, #368]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b10:	4958      	ldr	r1, [pc, #352]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b24:	4b53      	ldr	r3, [pc, #332]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b32:	4950      	ldr	r1, [pc, #320]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b42:	d105      	bne.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b44:	4b4b      	ldr	r3, [pc, #300]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	4a4a      	ldr	r2, [pc, #296]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b4e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d015      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b5c:	4b45      	ldr	r3, [pc, #276]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	4942      	ldr	r1, [pc, #264]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b7a:	d105      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b7c:	4b3d      	ldr	r3, [pc, #244]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	4a3c      	ldr	r2, [pc, #240]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b86:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b94:	4b37      	ldr	r3, [pc, #220]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	4934      	ldr	r1, [pc, #208]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bb2:	d105      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bb4:	4b2f      	ldr	r3, [pc, #188]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	4a2e      	ldr	r2, [pc, #184]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d015      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bcc:	4b29      	ldr	r3, [pc, #164]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bda:	4926      	ldr	r1, [pc, #152]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bea:	d105      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bec:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bf6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d015      	beq.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c04:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	4918      	ldr	r1, [pc, #96]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c22:	d105      	bne.n	8006c30 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c24:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	4a12      	ldr	r2, [pc, #72]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c2e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d015      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c3c:	4b0d      	ldr	r3, [pc, #52]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4a:	490a      	ldr	r1, [pc, #40]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c5a:	d105      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	4a04      	ldr	r2, [pc, #16]	; (8006c74 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c66:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c68:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	40021000 	.word	0x40021000

08006c78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d070      	beq.n	8006d6c <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fa fce2 	bl	8001668 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f003 0310 	and.w	r3, r3, #16
 8006cb6:	2b10      	cmp	r3, #16
 8006cb8:	d04f      	beq.n	8006d5a <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	22ca      	movs	r2, #202	; 0xca
 8006cc0:	625a      	str	r2, [r3, #36]	; 0x24
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2253      	movs	r2, #83	; 0x53
 8006cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f878 	bl	8006dc0 <RTC_EnterInitMode>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006cd4:	7bfb      	ldrb	r3, [r7, #15]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d126      	bne.n	8006d28 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6812      	ldr	r2, [r2, #0]
 8006ce4:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cec:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	6999      	ldr	r1, [r3, #24]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685a      	ldr	r2, [r3, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	68d9      	ldr	r1, [r3, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	041a      	lsls	r2, r3, #16
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f884 	bl	8006e2c <RTC_ExitInitMode>
 8006d24:	4603      	mov	r3, r0
 8006d26:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006d28:	7bfb      	ldrb	r3, [r7, #15]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d110      	bne.n	8006d50 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	699b      	ldr	r3, [r3, #24]
 8006d34:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a1a      	ldr	r2, [r3, #32]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	22ff      	movs	r2, #255	; 0xff
 8006d56:	625a      	str	r2, [r3, #36]	; 0x24
 8006d58:	e001      	b.n	8006d5e <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a0d      	ldr	r2, [pc, #52]	; (8006dbc <HAL_RTC_WaitForSynchro+0x44>)
 8006d86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006d88:	f7fa ff46 	bl	8001c18 <HAL_GetTick>
 8006d8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006d8e:	e009      	b.n	8006da4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d90:	f7fa ff42 	bl	8001c18 <HAL_GetTick>
 8006d94:	4602      	mov	r2, r0
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d9e:	d901      	bls.n	8006da4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006da0:	2303      	movs	r3, #3
 8006da2:	e007      	b.n	8006db4 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0320 	and.w	r3, r3, #32
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0ee      	beq.n	8006d90 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	0001005f 	.word	0x0001005f

08006dc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d123      	bne.n	8006e22 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	68da      	ldr	r2, [r3, #12]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006de8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006dea:	f7fa ff15 	bl	8001c18 <HAL_GetTick>
 8006dee:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006df0:	e00d      	b.n	8006e0e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006df2:	f7fa ff11 	bl	8001c18 <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e00:	d905      	bls.n	8006e0e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2203      	movs	r2, #3
 8006e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <RTC_EnterInitMode+0x62>
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	2b03      	cmp	r3, #3
 8006e20:	d1e7      	bne.n	8006df2 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e24:	4618      	mov	r0, r3
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e46:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10c      	bne.n	8006e70 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff ff8e 	bl	8006d78 <HAL_RTC_WaitForSynchro>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d022      	beq.n	8006ea8 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2203      	movs	r2, #3
 8006e66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	73fb      	strb	r3, [r7, #15]
 8006e6e:	e01b      	b.n	8006ea8 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699a      	ldr	r2, [r3, #24]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0220 	bic.w	r2, r2, #32
 8006e7e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f7ff ff79 	bl	8006d78 <HAL_RTC_WaitForSynchro>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2203      	movs	r2, #3
 8006e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0220 	orr.w	r2, r2, #32
 8006ea6:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006eb2:	b580      	push	{r7, lr}
 8006eb4:	b086      	sub	sp, #24
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	60f8      	str	r0, [r7, #12]
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006ec8:	2302      	movs	r3, #2
 8006eca:	e062      	b.n	8006f92 <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	22ca      	movs	r2, #202	; 0xca
 8006ee2:	625a      	str	r2, [r3, #36]	; 0x24
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2253      	movs	r2, #83	; 0x53
 8006eea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006efa:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d120      	bne.n	8006f4c <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 8006f0a:	f7fa fe85 	bl	8001c18 <HAL_GetTick>
 8006f0e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006f10:	e015      	b.n	8006f3e <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f12:	f7fa fe81 	bl	8001c18 <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f20:	d90d      	bls.n	8006f3e <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e029      	b.n	8006f92 <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0e2      	beq.n	8006f12 <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	f023 0107 	bic.w	r1, r3, #7
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699a      	ldr	r2, [r3, #24]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006f76:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	22ff      	movs	r2, #255	; 0xff
 8006f7e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e09d      	b.n	80070e8 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d108      	bne.n	8006fc6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fbc:	d009      	beq.n	8006fd2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	61da      	str	r2, [r3, #28]
 8006fc4:	e005      	b.n	8006fd2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fa fbf3 	bl	80017d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007008:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007012:	d902      	bls.n	800701a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	e002      	b.n	8007020 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800701a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800701e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007028:	d007      	beq.n	800703a <HAL_SPI_Init+0xa0>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007032:	d002      	beq.n	800703a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695b      	ldr	r3, [r3, #20]
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800707c:	ea42 0103 	orr.w	r1, r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	f003 0204 	and.w	r2, r3, #4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	431a      	orrs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	431a      	orrs	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80070b6:	ea42 0103 	orr.w	r1, r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	69da      	ldr	r2, [r3, #28]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2201      	movs	r2, #1
 80070e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007100:	2300      	movs	r3, #0
 8007102:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800710a:	2b01      	cmp	r3, #1
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Transmit+0x22>
 800710e:	2302      	movs	r3, #2
 8007110:	e15f      	b.n	80073d2 <HAL_SPI_Transmit+0x2e2>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800711a:	f7fa fd7d 	bl	8001c18 <HAL_GetTick>
 800711e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	d002      	beq.n	8007136 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007130:	2302      	movs	r3, #2
 8007132:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007134:	e148      	b.n	80073c8 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <HAL_SPI_Transmit+0x52>
 800713c:	88fb      	ldrh	r3, [r7, #6]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d102      	bne.n	8007148 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007146:	e13f      	b.n	80073c8 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2203      	movs	r2, #3
 800714c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	88fa      	ldrh	r2, [r7, #6]
 8007160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	88fa      	ldrh	r2, [r7, #6]
 8007166:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007192:	d10f      	bne.n	80071b4 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071be:	2b40      	cmp	r3, #64	; 0x40
 80071c0:	d007      	beq.n	80071d2 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071da:	d94f      	bls.n	800727c <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_SPI_Transmit+0xfa>
 80071e4:	8afb      	ldrh	r3, [r7, #22]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d142      	bne.n	8007270 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ee:	881a      	ldrh	r2, [r3, #0]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	1c9a      	adds	r2, r3, #2
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800720e:	e02f      	b.n	8007270 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b02      	cmp	r3, #2
 800721c:	d112      	bne.n	8007244 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	881a      	ldrh	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722e:	1c9a      	adds	r2, r3, #2
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007238:	b29b      	uxth	r3, r3
 800723a:	3b01      	subs	r3, #1
 800723c:	b29a      	uxth	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007242:	e015      	b.n	8007270 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007244:	f7fa fce8 	bl	8001c18 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d803      	bhi.n	800725c <HAL_SPI_Transmit+0x16c>
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d102      	bne.n	8007262 <HAL_SPI_Transmit+0x172>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d106      	bne.n	8007270 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800726e:	e0ab      	b.n	80073c8 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007274:	b29b      	uxth	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d1ca      	bne.n	8007210 <HAL_SPI_Transmit+0x120>
 800727a:	e080      	b.n	800737e <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <HAL_SPI_Transmit+0x19a>
 8007284:	8afb      	ldrh	r3, [r7, #22]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d174      	bne.n	8007374 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800728e:	b29b      	uxth	r3, r3
 8007290:	2b01      	cmp	r3, #1
 8007292:	d912      	bls.n	80072ba <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	881a      	ldrh	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a4:	1c9a      	adds	r2, r3, #2
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	3b02      	subs	r3, #2
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072b8:	e05c      	b.n	8007374 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	330c      	adds	r3, #12
 80072c4:	7812      	ldrb	r2, [r2, #0]
 80072c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072cc:	1c5a      	adds	r2, r3, #1
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	3b01      	subs	r3, #1
 80072da:	b29a      	uxth	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80072e0:	e048      	b.n	8007374 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 0302 	and.w	r3, r3, #2
 80072ec:	2b02      	cmp	r3, #2
 80072ee:	d12b      	bne.n	8007348 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d912      	bls.n	8007320 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fe:	881a      	ldrh	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	1c9a      	adds	r2, r3, #2
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b02      	subs	r3, #2
 8007318:	b29a      	uxth	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800731e:	e029      	b.n	8007374 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	7812      	ldrb	r2, [r2, #0]
 800732c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	1c5a      	adds	r2, r3, #1
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800733c:	b29b      	uxth	r3, r3
 800733e:	3b01      	subs	r3, #1
 8007340:	b29a      	uxth	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007346:	e015      	b.n	8007374 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007348:	f7fa fc66 	bl	8001c18 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	69bb      	ldr	r3, [r7, #24]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	429a      	cmp	r2, r3
 8007356:	d803      	bhi.n	8007360 <HAL_SPI_Transmit+0x270>
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800735e:	d102      	bne.n	8007366 <HAL_SPI_Transmit+0x276>
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007366:	2303      	movs	r3, #3
 8007368:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8007372:	e029      	b.n	80073c8 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007378:	b29b      	uxth	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1b1      	bne.n	80072e2 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f948 	bl	8007618 <SPI_EndRxTxTransaction>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d002      	beq.n	8007394 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2220      	movs	r2, #32
 8007392:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	613b      	str	r3, [r7, #16]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	77fb      	strb	r3, [r7, #31]
 80073be:	e003      	b.n	80073c8 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80073d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3720      	adds	r7, #32
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b088      	sub	sp, #32
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	4613      	mov	r3, r2
 80073ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073ec:	f7fa fc14 	bl	8001c18 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f4:	1a9b      	subs	r3, r3, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	4413      	add	r3, r2
 80073fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073fc:	f7fa fc0c 	bl	8001c18 <HAL_GetTick>
 8007400:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007402:	4b39      	ldr	r3, [pc, #228]	; (80074e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	015b      	lsls	r3, r3, #5
 8007408:	0d1b      	lsrs	r3, r3, #20
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007412:	e054      	b.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d050      	beq.n	80074be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800741c:	f7fa fbfc 	bl	8001c18 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	429a      	cmp	r2, r3
 800742a:	d902      	bls.n	8007432 <SPI_WaitFlagStateUntilTimeout+0x56>
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d13d      	bne.n	80074ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007440:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800744a:	d111      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007454:	d004      	beq.n	8007460 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800745e:	d107      	bne.n	8007470 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800746e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007474:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007478:	d10f      	bne.n	800749a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007498:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e017      	b.n	80074de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d19b      	bne.n	8007414 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	20000000 	.word	0x20000000

080074ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08a      	sub	sp, #40	; 0x28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074fe:	f7fa fb8b 	bl	8001c18 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	4413      	add	r3, r2
 800750c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800750e:	f7fa fb83 	bl	8001c18 <HAL_GetTick>
 8007512:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	330c      	adds	r3, #12
 800751a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800751c:	4b3d      	ldr	r3, [pc, #244]	; (8007614 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	4613      	mov	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	00da      	lsls	r2, r3, #3
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	0d1b      	lsrs	r3, r3, #20
 800752c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800752e:	fb02 f303 	mul.w	r3, r2, r3
 8007532:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007534:	e060      	b.n	80075f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800753c:	d107      	bne.n	800754e <SPI_WaitFifoStateUntilTimeout+0x62>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800754c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007554:	d050      	beq.n	80075f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007556:	f7fa fb5f 	bl	8001c18 <HAL_GetTick>
 800755a:	4602      	mov	r2, r0
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	1ad3      	subs	r3, r2, r3
 8007560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007562:	429a      	cmp	r2, r3
 8007564:	d902      	bls.n	800756c <SPI_WaitFifoStateUntilTimeout+0x80>
 8007566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007568:	2b00      	cmp	r3, #0
 800756a:	d13d      	bne.n	80075e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800757a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007584:	d111      	bne.n	80075aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758e:	d004      	beq.n	800759a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	689b      	ldr	r3, [r3, #8]
 8007594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007598:	d107      	bne.n	80075aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075b2:	d10f      	bne.n	80075d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e010      	b.n	800760a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3b01      	subs	r3, #1
 80075f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689a      	ldr	r2, [r3, #8]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4013      	ands	r3, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	429a      	cmp	r2, r3
 8007606:	d196      	bne.n	8007536 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3728      	adds	r7, #40	; 0x28
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000000 	.word	0x20000000

08007618 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2200      	movs	r2, #0
 800762c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff ff5b 	bl	80074ec <SPI_WaitFifoStateUntilTimeout>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e027      	b.n	800769c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	9300      	str	r3, [sp, #0]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	2180      	movs	r1, #128	; 0x80
 8007656:	68f8      	ldr	r0, [r7, #12]
 8007658:	f7ff fec0 	bl	80073dc <SPI_WaitFlagStateUntilTimeout>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d007      	beq.n	8007672 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007666:	f043 0220 	orr.w	r2, r3, #32
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	e014      	b.n	800769c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2200      	movs	r2, #0
 800767a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f7ff ff34 	bl	80074ec <SPI_WaitFifoStateUntilTimeout>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d007      	beq.n	800769a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800768e:	f043 0220 	orr.w	r2, r3, #32
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e000      	b.n	800769c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800769a:	2300      	movs	r3, #0
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b08b      	sub	sp, #44	; 0x2c
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	fa93 f3a3 	rbit	r3, r3
 80076be:	613b      	str	r3, [r7, #16]
  return result;
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80076ca:	2320      	movs	r3, #32
 80076cc:	e003      	b.n	80076d6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	fab3 f383 	clz	r3, r3
 80076d4:	b2db      	uxtb	r3, r3
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	2103      	movs	r1, #3
 80076da:	fa01 f303 	lsl.w	r3, r1, r3
 80076de:	43db      	mvns	r3, r3
 80076e0:	401a      	ands	r2, r3
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e6:	6a3b      	ldr	r3, [r7, #32]
 80076e8:	fa93 f3a3 	rbit	r3, r3
 80076ec:	61fb      	str	r3, [r7, #28]
  return result;
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80076f8:	2320      	movs	r3, #32
 80076fa:	e003      	b.n	8007704 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	fab3 f383 	clz	r3, r3
 8007702:	b2db      	uxtb	r3, r3
 8007704:	005b      	lsls	r3, r3, #1
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	fa01 f303 	lsl.w	r3, r1, r3
 800770c:	431a      	orrs	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	601a      	str	r2, [r3, #0]
}
 8007712:	bf00      	nop
 8007714:	372c      	adds	r7, #44	; 0x2c
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	60b9      	str	r1, [r7, #8]
 8007728:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	43db      	mvns	r3, r3
 8007732:	401a      	ands	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6879      	ldr	r1, [r7, #4]
 8007738:	fb01 f303 	mul.w	r3, r1, r3
 800773c:	431a      	orrs	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	605a      	str	r2, [r3, #4]
}
 8007742:	bf00      	nop
 8007744:	3714      	adds	r7, #20
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800774e:	b480      	push	{r7}
 8007750:	b08b      	sub	sp, #44	; 0x2c
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689a      	ldr	r2, [r3, #8]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	fa93 f3a3 	rbit	r3, r3
 8007768:	613b      	str	r3, [r7, #16]
  return result;
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007774:	2320      	movs	r3, #32
 8007776:	e003      	b.n	8007780 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	fab3 f383 	clz	r3, r3
 800777e:	b2db      	uxtb	r3, r3
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	2103      	movs	r1, #3
 8007784:	fa01 f303 	lsl.w	r3, r1, r3
 8007788:	43db      	mvns	r3, r3
 800778a:	401a      	ands	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	fa93 f3a3 	rbit	r3, r3
 8007796:	61fb      	str	r3, [r7, #28]
  return result;
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80077a2:	2320      	movs	r3, #32
 80077a4:	e003      	b.n	80077ae <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80077a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a8:	fab3 f383 	clz	r3, r3
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	005b      	lsls	r3, r3, #1
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	fa01 f303 	lsl.w	r3, r1, r3
 80077b6:	431a      	orrs	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80077bc:	bf00      	nop
 80077be:	372c      	adds	r7, #44	; 0x2c
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b08b      	sub	sp, #44	; 0x2c
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	fa93 f3a3 	rbit	r3, r3
 80077e2:	613b      	str	r3, [r7, #16]
  return result;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80077ee:	2320      	movs	r3, #32
 80077f0:	e003      	b.n	80077fa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	fab3 f383 	clz	r3, r3
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	2103      	movs	r1, #3
 80077fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007802:	43db      	mvns	r3, r3
 8007804:	401a      	ands	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	fa93 f3a3 	rbit	r3, r3
 8007810:	61fb      	str	r3, [r7, #28]
  return result;
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800781c:	2320      	movs	r3, #32
 800781e:	e003      	b.n	8007828 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	fab3 f383 	clz	r3, r3
 8007826:	b2db      	uxtb	r3, r3
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	fa01 f303 	lsl.w	r3, r1, r3
 8007830:	431a      	orrs	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	60da      	str	r2, [r3, #12]
}
 8007836:	bf00      	nop
 8007838:	372c      	adds	r7, #44	; 0x2c
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007842:	b480      	push	{r7}
 8007844:	b08b      	sub	sp, #44	; 0x2c
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	60b9      	str	r1, [r7, #8]
 800784c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6a1a      	ldr	r2, [r3, #32]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	fa93 f3a3 	rbit	r3, r3
 800785c:	613b      	str	r3, [r7, #16]
  return result;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007868:	2320      	movs	r3, #32
 800786a:	e003      	b.n	8007874 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	fab3 f383 	clz	r3, r3
 8007872:	b2db      	uxtb	r3, r3
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	210f      	movs	r1, #15
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	43db      	mvns	r3, r3
 800787e:	401a      	ands	r2, r3
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	fa93 f3a3 	rbit	r3, r3
 800788a:	61fb      	str	r3, [r7, #28]
  return result;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007896:	2320      	movs	r3, #32
 8007898:	e003      	b.n	80078a2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	fab3 f383 	clz	r3, r3
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	fa01 f303 	lsl.w	r3, r1, r3
 80078aa:	431a      	orrs	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80078b0:	bf00      	nop
 80078b2:	372c      	adds	r7, #44	; 0x2c
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80078bc:	b480      	push	{r7}
 80078be:	b08b      	sub	sp, #44	; 0x2c
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	fa93 f3a3 	rbit	r3, r3
 80078d8:	613b      	str	r3, [r7, #16]
  return result;
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078de:	69bb      	ldr	r3, [r7, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80078e4:	2320      	movs	r3, #32
 80078e6:	e003      	b.n	80078f0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	fab3 f383 	clz	r3, r3
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	210f      	movs	r1, #15
 80078f4:	fa01 f303 	lsl.w	r3, r1, r3
 80078f8:	43db      	mvns	r3, r3
 80078fa:	401a      	ands	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	0a1b      	lsrs	r3, r3, #8
 8007900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	fa93 f3a3 	rbit	r3, r3
 8007908:	61fb      	str	r3, [r7, #28]
  return result;
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007914:	2320      	movs	r3, #32
 8007916:	e003      	b.n	8007920 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791a:	fab3 f383 	clz	r3, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	6879      	ldr	r1, [r7, #4]
 8007924:	fa01 f303 	lsl.w	r3, r1, r3
 8007928:	431a      	orrs	r2, r3
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800792e:	bf00      	nop
 8007930:	372c      	adds	r7, #44	; 0x2c
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	b088      	sub	sp, #32
 800793e:	af00      	add	r7, sp, #0
 8007940:	6078      	str	r0, [r7, #4]
 8007942:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	60fb      	str	r3, [r7, #12]
  return result;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <LL_GPIO_Init+0x26>
    return 32U;
 800795c:	2320      	movs	r3, #32
 800795e:	e003      	b.n	8007968 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	fab3 f383 	clz	r3, r3
 8007966:	b2db      	uxtb	r3, r3
 8007968:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800796a:	e048      	b.n	80079fe <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	2101      	movs	r1, #1
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	fa01 f303 	lsl.w	r3, r1, r3
 8007978:	4013      	ands	r3, r2
 800797a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d03a      	beq.n	80079f8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d003      	beq.n	8007992 <LL_GPIO_Init+0x58>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d10e      	bne.n	80079b0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	461a      	mov	r2, r3
 8007998:	69b9      	ldr	r1, [r7, #24]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fed7 	bl	800774e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	461a      	mov	r2, r3
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff feb7 	bl	800771e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	461a      	mov	r2, r3
 80079b6:	69b9      	ldr	r1, [r7, #24]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff05 	bl	80077c8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d111      	bne.n	80079ea <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	2bff      	cmp	r3, #255	; 0xff
 80079ca:	d807      	bhi.n	80079dc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	461a      	mov	r2, r3
 80079d2:	69b9      	ldr	r1, [r7, #24]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff34 	bl	8007842 <LL_GPIO_SetAFPin_0_7>
 80079da:	e006      	b.n	80079ea <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	461a      	mov	r2, r3
 80079e2:	69b9      	ldr	r1, [r7, #24]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f7ff ff69 	bl	80078bc <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	461a      	mov	r2, r3
 80079f0:	69b9      	ldr	r1, [r7, #24]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fe56 	bl	80076a4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	3301      	adds	r3, #1
 80079fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	fa22 f303 	lsr.w	r3, r2, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1af      	bne.n	800796c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3720      	adds	r7, #32
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a26:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a2a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a4c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007a50:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	4013      	ands	r3, r2
 8007a64:	b29a      	uxth	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	60f8      	str	r0, [r7, #12]
 8007a82:	1d3b      	adds	r3, r7, #4
 8007a84:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr
	...

08007ab8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b09d      	sub	sp, #116	; 0x74
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	881b      	ldrh	r3, [r3, #0]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ade:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	78db      	ldrb	r3, [r3, #3]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d81f      	bhi.n	8007b2a <USB_ActivateEndpoint+0x72>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <USB_ActivateEndpoint+0x38>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b01 	.word	0x08007b01
 8007af4:	08007b1d 	.word	0x08007b1d
 8007af8:	08007b33 	.word	0x08007b33
 8007afc:	08007b0f 	.word	0x08007b0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007b0c:	e012      	b.n	8007b34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b12:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007b16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007b1a:	e00b      	b.n	8007b34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007b28:	e004      	b.n	8007b34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007b30:	e000      	b.n	8007b34 <USB_ActivateEndpoint+0x7c>
      break;
 8007b32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	441a      	add	r2, r3
 8007b3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	b21b      	sxth	r3, r3
 8007b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b6e:	b21a      	sxth	r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	b21b      	sxth	r3, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b21b      	sxth	r3, r3
 8007b7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	441a      	add	r2, r3
 8007b88:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	7b1b      	ldrb	r3, [r3, #12]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	f040 8178 	bne.w	8007e9a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	785b      	ldrb	r3, [r3, #1]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 8084 	beq.w	8007cbc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	61bb      	str	r3, [r7, #24]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bbe:	b29b      	uxth	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	69bb      	ldr	r3, [r7, #24]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	00da      	lsls	r2, r3, #3
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bd6:	617b      	str	r3, [r7, #20]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	88db      	ldrh	r3, [r3, #6]
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	005b      	lsls	r3, r3, #1
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	827b      	strh	r3, [r7, #18]
 8007bf6:	8a7b      	ldrh	r3, [r7, #18]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01b      	beq.n	8007c38 <USB_ActivateEndpoint+0x180>
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c16:	823b      	strh	r3, [r7, #16]
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	441a      	add	r2, r3
 8007c22:	8a3b      	ldrh	r3, [r7, #16]
 8007c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	78db      	ldrb	r3, [r3, #3]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d020      	beq.n	8007c82 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	881b      	ldrh	r3, [r3, #0]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c56:	81bb      	strh	r3, [r7, #12]
 8007c58:	89bb      	ldrh	r3, [r7, #12]
 8007c5a:	f083 0320 	eor.w	r3, r3, #32
 8007c5e:	81bb      	strh	r3, [r7, #12]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	89bb      	ldrh	r3, [r7, #12]
 8007c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	8013      	strh	r3, [r2, #0]
 8007c80:	e2d5      	b.n	800822e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4413      	add	r3, r2
 8007c8c:	881b      	ldrh	r3, [r3, #0]
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	81fb      	strh	r3, [r7, #14]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	441a      	add	r2, r3
 8007ca4:	89fb      	ldrh	r3, [r7, #14]
 8007ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	8013      	strh	r3, [r2, #0]
 8007cba:	e2b8      	b.n	800822e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	4413      	add	r3, r2
 8007cce:	633b      	str	r3, [r7, #48]	; 0x30
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	00da      	lsls	r2, r3, #3
 8007cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd8:	4413      	add	r3, r2
 8007cda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	085b      	lsrs	r3, r3, #1
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	4413      	add	r3, r2
 8007d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	00da      	lsls	r2, r3, #3
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	801a      	strh	r2, [r3, #0]
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <USB_ActivateEndpoint+0x28a>
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	881b      	ldrh	r3, [r3, #0]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	801a      	strh	r2, [r3, #0]
 8007d40:	e039      	b.n	8007db6 <USB_ActivateEndpoint+0x2fe>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b3e      	cmp	r3, #62	; 0x3e
 8007d48:	d818      	bhi.n	8007d7c <USB_ActivateEndpoint+0x2c4>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	085b      	lsrs	r3, r3, #1
 8007d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <USB_ActivateEndpoint+0x2ac>
 8007d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d60:	3301      	adds	r3, #1
 8007d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	029b      	lsls	r3, r3, #10
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	4313      	orrs	r3, r2
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e01c      	b.n	8007db6 <USB_ActivateEndpoint+0x2fe>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	095b      	lsrs	r3, r3, #5
 8007d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <USB_ActivateEndpoint+0x2de>
 8007d90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d92:	3b01      	subs	r3, #1
 8007d94:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	847b      	strh	r3, [r7, #34]	; 0x22
 8007dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d01b      	beq.n	8007e06 <USB_ActivateEndpoint+0x34e>
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	843b      	strh	r3, [r7, #32]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	441a      	add	r2, r3
 8007df0:	8c3b      	ldrh	r3, [r7, #32]
 8007df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d124      	bne.n	8007e58 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e24:	83bb      	strh	r3, [r7, #28]
 8007e26:	8bbb      	ldrh	r3, [r7, #28]
 8007e28:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e2c:	83bb      	strh	r3, [r7, #28]
 8007e2e:	8bbb      	ldrh	r3, [r7, #28]
 8007e30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e34:	83bb      	strh	r3, [r7, #28]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	441a      	add	r2, r3
 8007e40:	8bbb      	ldrh	r3, [r7, #28]
 8007e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8013      	strh	r3, [r2, #0]
 8007e56:	e1ea      	b.n	800822e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6e:	83fb      	strh	r3, [r7, #30]
 8007e70:	8bfb      	ldrh	r3, [r7, #30]
 8007e72:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e76:	83fb      	strh	r3, [r7, #30]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	8bfb      	ldrh	r3, [r7, #30]
 8007e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	8013      	strh	r3, [r2, #0]
 8007e98:	e1c9      	b.n	800822e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	78db      	ldrb	r3, [r3, #3]
 8007e9e:	2b02      	cmp	r3, #2
 8007ea0:	d11e      	bne.n	8007ee0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4413      	add	r3, r2
 8007eac:	881b      	ldrh	r3, [r3, #0]
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	441a      	add	r2, r3
 8007ec6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ed2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	8013      	strh	r3, [r2, #0]
 8007ede:	e01d      	b.n	8007f1c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	441a      	add	r2, r3
 8007f04:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f2c:	4413      	add	r3, r2
 8007f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	00da      	lsls	r2, r3, #3
 8007f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f3e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	891b      	ldrh	r3, [r3, #8]
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	005b      	lsls	r3, r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	657b      	str	r3, [r7, #84]	; 0x54
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f60:	4413      	add	r3, r2
 8007f62:	657b      	str	r3, [r7, #84]	; 0x54
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	00da      	lsls	r2, r3, #3
 8007f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f72:	653b      	str	r3, [r7, #80]	; 0x50
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	895b      	ldrh	r3, [r3, #10]
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	785b      	ldrb	r3, [r3, #1]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 8093 	bne.w	80080b4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007f9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d01b      	beq.n	8007fe2 <USB_ActivateEndpoint+0x52a>
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	4413      	add	r3, r2
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	b29b      	uxth	r3, r3
 8007fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	441a      	add	r2, r3
 8007fcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	881b      	ldrh	r3, [r3, #0]
 8007fee:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007ff0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d01b      	beq.n	8008032 <USB_ActivateEndpoint+0x57a>
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4413      	add	r3, r2
 8008004:	881b      	ldrh	r3, [r3, #0]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008010:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	441a      	add	r2, r3
 800801c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800801e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008022:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008026:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800802a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800802e:	b29b      	uxth	r3, r3
 8008030:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	881b      	ldrh	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008048:	873b      	strh	r3, [r7, #56]	; 0x38
 800804a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800804c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008050:	873b      	strh	r3, [r7, #56]	; 0x38
 8008052:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008054:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008058:	873b      	strh	r3, [r7, #56]	; 0x38
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	009b      	lsls	r3, r3, #2
 8008062:	441a      	add	r2, r3
 8008064:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800806a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008076:	b29b      	uxth	r3, r3
 8008078:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008090:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	441a      	add	r2, r3
 800809c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800809e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	8013      	strh	r3, [r2, #0]
 80080b2:	e0bc      	b.n	800822e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80080c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80080c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01d      	beq.n	800810c <USB_ActivateEndpoint+0x654>
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	881b      	ldrh	r3, [r3, #0]
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	441a      	add	r2, r3
 80080f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80080f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008100:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008108:	b29b      	uxth	r3, r3
 800810a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	4413      	add	r3, r2
 8008116:	881b      	ldrh	r3, [r3, #0]
 8008118:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800811c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01d      	beq.n	8008164 <USB_ActivateEndpoint+0x6ac>
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	b29b      	uxth	r3, r3
 8008136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800813a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800813e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	441a      	add	r2, r3
 800814c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800815c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008160:	b29b      	uxth	r3, r3
 8008162:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	78db      	ldrb	r3, [r3, #3]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d024      	beq.n	80081b6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	009b      	lsls	r3, r3, #2
 8008174:	4413      	add	r3, r2
 8008176:	881b      	ldrh	r3, [r3, #0]
 8008178:	b29b      	uxth	r3, r3
 800817a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800817e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008182:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008186:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800818a:	f083 0320 	eor.w	r3, r3, #32
 800818e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	441a      	add	r2, r3
 800819c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80081a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	8013      	strh	r3, [r2, #0]
 80081b4:	e01d      	b.n	80081f2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4413      	add	r3, r2
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	441a      	add	r2, r3
 80081da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80081de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	881b      	ldrh	r3, [r3, #0]
 80081fe:	b29b      	uxth	r3, r3
 8008200:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008208:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	441a      	add	r2, r3
 8008216:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800821a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800822a:	b29b      	uxth	r3, r3
 800822c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800822e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008232:	4618      	mov	r0, r3
 8008234:	3774      	adds	r7, #116	; 0x74
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop

08008240 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008240:	b480      	push	{r7}
 8008242:	b08d      	sub	sp, #52	; 0x34
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	7b1b      	ldrb	r3, [r3, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f040 808e 	bne.w	8008370 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	785b      	ldrb	r3, [r3, #1]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d044      	beq.n	80082e6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	81bb      	strh	r3, [r7, #12]
 800826a:	89bb      	ldrh	r3, [r7, #12]
 800826c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008270:	2b00      	cmp	r3, #0
 8008272:	d01b      	beq.n	80082ac <USB_DeactivateEndpoint+0x6c>
 8008274:	687a      	ldr	r2, [r7, #4]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4413      	add	r3, r2
 800827e:	881b      	ldrh	r3, [r3, #0]
 8008280:	b29b      	uxth	r3, r3
 8008282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828a:	817b      	strh	r3, [r7, #10]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	441a      	add	r2, r3
 8008296:	897b      	ldrh	r3, [r7, #10]
 8008298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800829c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	881b      	ldrh	r3, [r3, #0]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082c2:	813b      	strh	r3, [r7, #8]
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	781b      	ldrb	r3, [r3, #0]
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	441a      	add	r2, r3
 80082ce:	893b      	ldrh	r3, [r7, #8]
 80082d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	8013      	strh	r3, [r2, #0]
 80082e4:	e192      	b.n	800860c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	827b      	strh	r3, [r7, #18]
 80082f4:	8a7b      	ldrh	r3, [r7, #18]
 80082f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d01b      	beq.n	8008336 <USB_DeactivateEndpoint+0xf6>
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	4413      	add	r3, r2
 8008308:	881b      	ldrh	r3, [r3, #0]
 800830a:	b29b      	uxth	r3, r3
 800830c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008314:	823b      	strh	r3, [r7, #16]
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	441a      	add	r2, r3
 8008320:	8a3b      	ldrh	r3, [r7, #16]
 8008322:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008326:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800832a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800832e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008332:	b29b      	uxth	r3, r3
 8008334:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29b      	uxth	r3, r3
 8008344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800834c:	81fb      	strh	r3, [r7, #14]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	009b      	lsls	r3, r3, #2
 8008356:	441a      	add	r2, r3
 8008358:	89fb      	ldrh	r3, [r7, #14]
 800835a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800835e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836a:	b29b      	uxth	r3, r3
 800836c:	8013      	strh	r3, [r2, #0]
 800836e:	e14d      	b.n	800860c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	785b      	ldrb	r3, [r3, #1]
 8008374:	2b00      	cmp	r3, #0
 8008376:	f040 80a5 	bne.w	80084c4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	009b      	lsls	r3, r3, #2
 8008382:	4413      	add	r3, r2
 8008384:	881b      	ldrh	r3, [r3, #0]
 8008386:	843b      	strh	r3, [r7, #32]
 8008388:	8c3b      	ldrh	r3, [r7, #32]
 800838a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d01b      	beq.n	80083ca <USB_DeactivateEndpoint+0x18a>
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	b29b      	uxth	r3, r3
 80083a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a8:	83fb      	strh	r3, [r7, #30]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	441a      	add	r2, r3
 80083b4:	8bfb      	ldrh	r3, [r7, #30]
 80083b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80083c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	83bb      	strh	r3, [r7, #28]
 80083d8:	8bbb      	ldrh	r3, [r7, #28]
 80083da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01b      	beq.n	800841a <USB_DeactivateEndpoint+0x1da>
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	881b      	ldrh	r3, [r3, #0]
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083f8:	837b      	strh	r3, [r7, #26]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	441a      	add	r2, r3
 8008404:	8b7b      	ldrh	r3, [r7, #26]
 8008406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800840a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800840e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008412:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008416:	b29b      	uxth	r3, r3
 8008418:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4413      	add	r3, r2
 8008424:	881b      	ldrh	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800842c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008430:	833b      	strh	r3, [r7, #24]
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	009b      	lsls	r3, r3, #2
 800843a:	441a      	add	r2, r3
 800843c:	8b3b      	ldrh	r3, [r7, #24]
 800843e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800844e:	b29b      	uxth	r3, r3
 8008450:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008468:	82fb      	strh	r3, [r7, #22]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	441a      	add	r2, r3
 8008474:	8afb      	ldrh	r3, [r7, #22]
 8008476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800847e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008486:	b29b      	uxth	r3, r3
 8008488:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084a0:	82bb      	strh	r3, [r7, #20]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	441a      	add	r2, r3
 80084ac:	8abb      	ldrh	r3, [r7, #20]
 80084ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084be:	b29b      	uxth	r3, r3
 80084c0:	8013      	strh	r3, [r2, #0]
 80084c2:	e0a3      	b.n	800860c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80084d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80084d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d01b      	beq.n	8008514 <USB_DeactivateEndpoint+0x2d4>
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	4413      	add	r3, r2
 80084e6:	881b      	ldrh	r3, [r3, #0]
 80084e8:	b29b      	uxth	r3, r3
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	441a      	add	r2, r3
 80084fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008500:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008504:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008508:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800850c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008510:	b29b      	uxth	r3, r3
 8008512:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	4413      	add	r3, r2
 800851e:	881b      	ldrh	r3, [r3, #0]
 8008520:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008522:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01b      	beq.n	8008564 <USB_DeactivateEndpoint+0x324>
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	4413      	add	r3, r2
 8008536:	881b      	ldrh	r3, [r3, #0]
 8008538:	b29b      	uxth	r3, r3
 800853a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800853e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008542:	853b      	strh	r3, [r7, #40]	; 0x28
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	441a      	add	r2, r3
 800854e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800855c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008560:	b29b      	uxth	r3, r3
 8008562:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b29b      	uxth	r3, r3
 8008572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800857a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	441a      	add	r2, r3
 8008586:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008588:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800858c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008590:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008598:	b29b      	uxth	r3, r3
 800859a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3734      	adds	r7, #52	; 0x34
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b0c2      	sub	sp, #264	; 0x108
 800861e:	af00      	add	r7, sp, #0
 8008620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008624:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008628:	6018      	str	r0, [r3, #0]
 800862a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800862e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008632:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b01      	cmp	r3, #1
 8008642:	f040 86b7 	bne.w	80093b4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	699a      	ldr	r2, [r3, #24]
 8008652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	429a      	cmp	r2, r3
 8008660:	d908      	bls.n	8008674 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008672:	e007      	b.n	8008684 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	7b1b      	ldrb	r3, [r3, #12]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d13a      	bne.n	800870a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6959      	ldr	r1, [r3, #20]
 80086a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	88da      	ldrh	r2, [r3, #6]
 80086ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	f001 fc99 	bl	8009ff2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80086c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	613b      	str	r3, [r7, #16]
 80086cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086da:	b29b      	uxth	r3, r3
 80086dc:	461a      	mov	r2, r3
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	4413      	add	r3, r2
 80086e2:	613b      	str	r3, [r7, #16]
 80086e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	00da      	lsls	r2, r3, #3
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4413      	add	r3, r2
 80086f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086fa:	60fb      	str	r3, [r7, #12]
 80086fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008700:	b29a      	uxth	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	801a      	strh	r2, [r3, #0]
 8008706:	f000 be1f 	b.w	8009348 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800870a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	78db      	ldrb	r3, [r3, #3]
 8008716:	2b02      	cmp	r3, #2
 8008718:	f040 8462 	bne.w	8008fe0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800871c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008720:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	6a1a      	ldr	r2, [r3, #32]
 8008728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	429a      	cmp	r2, r3
 8008736:	f240 83df 	bls.w	8008ef8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800873a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800875c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008760:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008768:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	441a      	add	r2, r3
 800877e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800878a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800878e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008792:	b29b      	uxth	r3, r3
 8008794:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6a1a      	ldr	r2, [r3, #32]
 80087a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087a6:	1ad2      	subs	r2, r2, r3
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80087b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 81c7 	beq.w	8008b6a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80087dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	633b      	str	r3, [r7, #48]	; 0x30
 80087e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	785b      	ldrb	r3, [r3, #1]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d177      	bne.n	80088e8 <USB_EPStartXfer+0x2ce>
 80087f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	62bb      	str	r3, [r7, #40]	; 0x28
 8008804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008812:	b29b      	uxth	r3, r3
 8008814:	461a      	mov	r2, r3
 8008816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008818:	4413      	add	r3, r2
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
 800881c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	781b      	ldrb	r3, [r3, #0]
 8008828:	00da      	lsls	r2, r3, #3
 800882a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882c:	4413      	add	r3, r2
 800882e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008832:	627b      	str	r3, [r7, #36]	; 0x24
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800883e:	b29a      	uxth	r2, r3
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	801a      	strh	r2, [r3, #0]
 8008844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <USB_EPStartXfer+0x248>
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	b29b      	uxth	r3, r3
 8008852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800885a:	b29a      	uxth	r2, r3
 800885c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885e:	801a      	strh	r2, [r3, #0]
 8008860:	e067      	b.n	8008932 <USB_EPStartXfer+0x318>
 8008862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008866:	2b3e      	cmp	r3, #62	; 0x3e
 8008868:	d81c      	bhi.n	80088a4 <USB_EPStartXfer+0x28a>
 800886a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800886e:	085b      	lsrs	r3, r3, #1
 8008870:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <USB_EPStartXfer+0x270>
 8008880:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008884:	3301      	adds	r3, #1
 8008886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800888a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008894:	b29b      	uxth	r3, r3
 8008896:	029b      	lsls	r3, r3, #10
 8008898:	b29b      	uxth	r3, r3
 800889a:	4313      	orrs	r3, r2
 800889c:	b29a      	uxth	r2, r3
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	801a      	strh	r2, [r3, #0]
 80088a2:	e046      	b.n	8008932 <USB_EPStartXfer+0x318>
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a8:	095b      	lsrs	r3, r3, #5
 80088aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b2:	f003 031f 	and.w	r3, r3, #31
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d104      	bne.n	80088c4 <USB_EPStartXfer+0x2aa>
 80088ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80088be:	3b01      	subs	r3, #1
 80088c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	029b      	lsls	r3, r3, #10
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	4313      	orrs	r3, r2
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e024      	b.n	8008932 <USB_EPStartXfer+0x318>
 80088e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d11c      	bne.n	8008932 <USB_EPStartXfer+0x318>
 80088f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008906:	b29b      	uxth	r3, r3
 8008908:	461a      	mov	r2, r3
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	4413      	add	r3, r2
 800890e:	633b      	str	r3, [r7, #48]	; 0x30
 8008910:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008914:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	00da      	lsls	r2, r3, #3
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	4413      	add	r3, r2
 8008922:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892c:	b29a      	uxth	r2, r3
 800892e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008936:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	895b      	ldrh	r3, [r3, #10]
 800893e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	6959      	ldr	r1, [r3, #20]
 800894e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008952:	b29b      	uxth	r3, r3
 8008954:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008958:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800895c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008960:	6800      	ldr	r0, [r0, #0]
 8008962:	f001 fb46 	bl	8009ff2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	695a      	ldr	r2, [r3, #20]
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008976:	441a      	add	r2, r3
 8008978:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800897c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6a1a      	ldr	r2, [r3, #32]
 8008990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	429a      	cmp	r2, r3
 800899e:	d90f      	bls.n	80089c0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6a1a      	ldr	r2, [r3, #32]
 80089ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b0:	1ad2      	subs	r2, r2, r3
 80089b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	621a      	str	r2, [r3, #32]
 80089be:	e00e      	b.n	80089de <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80089c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	6a1b      	ldr	r3, [r3, #32]
 80089cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80089d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80089de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d177      	bne.n	8008ade <USB_EPStartXfer+0x4c4>
 80089ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	61bb      	str	r3, [r7, #24]
 80089fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	4413      	add	r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	00da      	lsls	r2, r3, #3
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	4413      	add	r3, r2
 8008a24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008a28:	617b      	str	r3, [r7, #20]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	801a      	strh	r2, [r3, #0]
 8008a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10a      	bne.n	8008a58 <USB_EPStartXfer+0x43e>
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	e06d      	b.n	8008b34 <USB_EPStartXfer+0x51a>
 8008a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a5c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a5e:	d81c      	bhi.n	8008a9a <USB_EPStartXfer+0x480>
 8008a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a64:	085b      	lsrs	r3, r3, #1
 8008a66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <USB_EPStartXfer+0x466>
 8008a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	881b      	ldrh	r3, [r3, #0]
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	029b      	lsls	r3, r3, #10
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b29a      	uxth	r2, r3
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	801a      	strh	r2, [r3, #0]
 8008a98:	e04c      	b.n	8008b34 <USB_EPStartXfer+0x51a>
 8008a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aa8:	f003 031f 	and.w	r3, r3, #31
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d104      	bne.n	8008aba <USB_EPStartXfer+0x4a0>
 8008ab0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	029b      	lsls	r3, r3, #10
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	4313      	orrs	r3, r2
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ad6:	b29a      	uxth	r2, r3
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	801a      	strh	r2, [r3, #0]
 8008adc:	e02a      	b.n	8008b34 <USB_EPStartXfer+0x51a>
 8008ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d122      	bne.n	8008b34 <USB_EPStartXfer+0x51a>
 8008aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	623b      	str	r3, [r7, #32]
 8008afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	4413      	add	r3, r2
 8008b10:	623b      	str	r3, [r7, #32]
 8008b12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	00da      	lsls	r2, r3, #3
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	4413      	add	r3, r2
 8008b24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b28:	61fb      	str	r3, [r7, #28]
 8008b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	891b      	ldrh	r3, [r3, #8]
 8008b40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6959      	ldr	r1, [r3, #20]
 8008b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b62:	6800      	ldr	r0, [r0, #0]
 8008b64:	f001 fa45 	bl	8009ff2 <USB_WritePMA>
 8008b68:	e3ee      	b.n	8009348 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008b6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	785b      	ldrb	r3, [r3, #1]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d177      	bne.n	8008c6a <USB_EPStartXfer+0x650>
 8008b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b9a:	4413      	add	r3, r2
 8008b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	00da      	lsls	r2, r3, #3
 8008bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bae:	4413      	add	r3, r2
 8008bb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8008bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bc4:	801a      	strh	r2, [r3, #0]
 8008bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <USB_EPStartXfer+0x5ca>
 8008bce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be0:	801a      	strh	r2, [r3, #0]
 8008be2:	e06d      	b.n	8008cc0 <USB_EPStartXfer+0x6a6>
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008be8:	2b3e      	cmp	r3, #62	; 0x3e
 8008bea:	d81c      	bhi.n	8008c26 <USB_EPStartXfer+0x60c>
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d004      	beq.n	8008c0c <USB_EPStartXfer+0x5f2>
 8008c02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c06:	3301      	adds	r3, #1
 8008c08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c0e:	881b      	ldrh	r3, [r3, #0]
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	029b      	lsls	r3, r3, #10
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	b29a      	uxth	r2, r3
 8008c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c22:	801a      	strh	r2, [r3, #0]
 8008c24:	e04c      	b.n	8008cc0 <USB_EPStartXfer+0x6a6>
 8008c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c2a:	095b      	lsrs	r3, r3, #5
 8008c2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c34:	f003 031f 	and.w	r3, r3, #31
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d104      	bne.n	8008c46 <USB_EPStartXfer+0x62c>
 8008c3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c40:	3b01      	subs	r3, #1
 8008c42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	029b      	lsls	r3, r3, #10
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	4313      	orrs	r3, r2
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c66:	801a      	strh	r2, [r3, #0]
 8008c68:	e02a      	b.n	8008cc0 <USB_EPStartXfer+0x6a6>
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	785b      	ldrb	r3, [r3, #1]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d122      	bne.n	8008cc0 <USB_EPStartXfer+0x6a6>
 8008c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	653b      	str	r3, [r7, #80]	; 0x50
 8008c86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	461a      	mov	r2, r3
 8008c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c9a:	4413      	add	r3, r2
 8008c9c:	653b      	str	r3, [r7, #80]	; 0x50
 8008c9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	00da      	lsls	r2, r3, #3
 8008cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cae:	4413      	add	r3, r2
 8008cb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cba:	b29a      	uxth	r2, r3
 8008cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cbe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	891b      	ldrh	r3, [r3, #8]
 8008ccc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	6959      	ldr	r1, [r3, #20]
 8008cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ce6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008cea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008cee:	6800      	ldr	r0, [r0, #0]
 8008cf0:	f001 f97f 	bl	8009ff2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	695a      	ldr	r2, [r3, #20]
 8008d00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d04:	441a      	add	r2, r3
 8008d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	6a1a      	ldr	r2, [r3, #32]
 8008d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d90f      	bls.n	8008d4e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6a1a      	ldr	r2, [r3, #32]
 8008d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	621a      	str	r2, [r3, #32]
 8008d4c:	e00e      	b.n	8008d6c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	643b      	str	r3, [r7, #64]	; 0x40
 8008d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	785b      	ldrb	r3, [r3, #1]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d177      	bne.n	8008e78 <USB_EPStartXfer+0x85e>
 8008d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	461a      	mov	r2, r3
 8008da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da8:	4413      	add	r3, r2
 8008daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	00da      	lsls	r2, r3, #3
 8008dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	801a      	strh	r2, [r3, #0]
 8008dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <USB_EPStartXfer+0x7d8>
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	801a      	strh	r2, [r3, #0]
 8008df0:	e067      	b.n	8008ec2 <USB_EPStartXfer+0x8a8>
 8008df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df6:	2b3e      	cmp	r3, #62	; 0x3e
 8008df8:	d81c      	bhi.n	8008e34 <USB_EPStartXfer+0x81a>
 8008dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dfe:	085b      	lsrs	r3, r3, #1
 8008e00:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d004      	beq.n	8008e1a <USB_EPStartXfer+0x800>
 8008e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e14:	3301      	adds	r3, #1
 8008e16:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	029b      	lsls	r3, r3, #10
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	e046      	b.n	8008ec2 <USB_EPStartXfer+0x8a8>
 8008e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d104      	bne.n	8008e54 <USB_EPStartXfer+0x83a>
 8008e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e56:	881b      	ldrh	r3, [r3, #0]
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	029b      	lsls	r3, r3, #10
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4313      	orrs	r3, r2
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	801a      	strh	r2, [r3, #0]
 8008e76:	e024      	b.n	8008ec2 <USB_EPStartXfer+0x8a8>
 8008e78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	785b      	ldrb	r3, [r3, #1]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d11c      	bne.n	8008ec2 <USB_EPStartXfer+0x8a8>
 8008e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e9c:	4413      	add	r3, r2
 8008e9e:	643b      	str	r3, [r7, #64]	; 0x40
 8008ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	00da      	lsls	r2, r3, #3
 8008eae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	895b      	ldrh	r3, [r3, #10]
 8008ece:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6959      	ldr	r1, [r3, #20]
 8008ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ee8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008eec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ef0:	6800      	ldr	r0, [r0, #0]
 8008ef2:	f001 f87e 	bl	8009ff2 <USB_WritePMA>
 8008ef6:	e227      	b.n	8009348 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6a1b      	ldr	r3, [r3, #32]
 8008f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f2e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008f32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	441a      	add	r2, r3
 8008f4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008f50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	461a      	mov	r2, r3
 8008f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f84:	4413      	add	r3, r2
 8008f86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	00da      	lsls	r2, r3, #3
 8008f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f98:	4413      	add	r3, r2
 8008f9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fa8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	891b      	ldrh	r3, [r3, #8]
 8008fb6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	6959      	ldr	r1, [r3, #20]
 8008fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fca:	b29b      	uxth	r3, r3
 8008fcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008fd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008fd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008fd8:	6800      	ldr	r0, [r0, #0]
 8008fda:	f001 f80a 	bl	8009ff2 <USB_WritePMA>
 8008fde:	e1b3      	b.n	8009348 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a1a      	ldr	r2, [r3, #32]
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff0:	1ad2      	subs	r2, r2, r3
 8008ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	b29b      	uxth	r3, r3
 800901c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 80c6 	beq.w	80091b2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	673b      	str	r3, [r7, #112]	; 0x70
 8009032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	785b      	ldrb	r3, [r3, #1]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d177      	bne.n	8009132 <USB_EPStartXfer+0xb18>
 8009042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	66bb      	str	r3, [r7, #104]	; 0x68
 800904e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800905c:	b29b      	uxth	r3, r3
 800905e:	461a      	mov	r2, r3
 8009060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009062:	4413      	add	r3, r2
 8009064:	66bb      	str	r3, [r7, #104]	; 0x68
 8009066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800906a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	00da      	lsls	r2, r3, #3
 8009074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009076:	4413      	add	r3, r2
 8009078:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800907c:	667b      	str	r3, [r7, #100]	; 0x64
 800907e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	b29b      	uxth	r3, r3
 8009084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009088:	b29a      	uxth	r2, r3
 800908a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <USB_EPStartXfer+0xa92>
 8009096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009098:	881b      	ldrh	r3, [r3, #0]
 800909a:	b29b      	uxth	r3, r3
 800909c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090a4:	b29a      	uxth	r2, r3
 80090a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090a8:	801a      	strh	r2, [r3, #0]
 80090aa:	e067      	b.n	800917c <USB_EPStartXfer+0xb62>
 80090ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b0:	2b3e      	cmp	r3, #62	; 0x3e
 80090b2:	d81c      	bhi.n	80090ee <USB_EPStartXfer+0xad4>
 80090b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090b8:	085b      	lsrs	r3, r3, #1
 80090ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c2:	f003 0301 	and.w	r3, r3, #1
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <USB_EPStartXfer+0xaba>
 80090ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80090ce:	3301      	adds	r3, #1
 80090d0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090d6:	881b      	ldrh	r3, [r3, #0]
 80090d8:	b29a      	uxth	r2, r3
 80090da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80090de:	b29b      	uxth	r3, r3
 80090e0:	029b      	lsls	r3, r3, #10
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	4313      	orrs	r3, r2
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ea:	801a      	strh	r2, [r3, #0]
 80090ec:	e046      	b.n	800917c <USB_EPStartXfer+0xb62>
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80090f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090fc:	f003 031f 	and.w	r3, r3, #31
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <USB_EPStartXfer+0xaf4>
 8009104:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009108:	3b01      	subs	r3, #1
 800910a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800910e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29a      	uxth	r2, r3
 8009114:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009118:	b29b      	uxth	r3, r3
 800911a:	029b      	lsls	r3, r3, #10
 800911c:	b29b      	uxth	r3, r3
 800911e:	4313      	orrs	r3, r2
 8009120:	b29b      	uxth	r3, r3
 8009122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800912a:	b29a      	uxth	r2, r3
 800912c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800912e:	801a      	strh	r2, [r3, #0]
 8009130:	e024      	b.n	800917c <USB_EPStartXfer+0xb62>
 8009132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	785b      	ldrb	r3, [r3, #1]
 800913e:	2b01      	cmp	r3, #1
 8009140:	d11c      	bne.n	800917c <USB_EPStartXfer+0xb62>
 8009142:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009146:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009150:	b29b      	uxth	r3, r3
 8009152:	461a      	mov	r2, r3
 8009154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009156:	4413      	add	r3, r2
 8009158:	673b      	str	r3, [r7, #112]	; 0x70
 800915a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	00da      	lsls	r2, r3, #3
 8009168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800916a:	4413      	add	r3, r2
 800916c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009170:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009176:	b29a      	uxth	r2, r3
 8009178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800917a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800917c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	895b      	ldrh	r3, [r3, #10]
 8009188:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800918c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6959      	ldr	r1, [r3, #20]
 8009198:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800919c:	b29b      	uxth	r3, r3
 800919e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091a2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80091a6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80091aa:	6800      	ldr	r0, [r0, #0]
 80091ac:	f000 ff21 	bl	8009ff2 <USB_WritePMA>
 80091b0:	e0ca      	b.n	8009348 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80091b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d177      	bne.n	80092b2 <USB_EPStartXfer+0xc98>
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091dc:	b29b      	uxth	r3, r3
 80091de:	461a      	mov	r2, r3
 80091e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091e2:	4413      	add	r3, r2
 80091e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80091e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	00da      	lsls	r2, r3, #3
 80091f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80091f6:	4413      	add	r3, r2
 80091f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80091fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009200:	881b      	ldrh	r3, [r3, #0]
 8009202:	b29b      	uxth	r3, r3
 8009204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009208:	b29a      	uxth	r2, r3
 800920a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800920c:	801a      	strh	r2, [r3, #0]
 800920e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10a      	bne.n	800922c <USB_EPStartXfer+0xc12>
 8009216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009220:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009224:	b29a      	uxth	r2, r3
 8009226:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009228:	801a      	strh	r2, [r3, #0]
 800922a:	e073      	b.n	8009314 <USB_EPStartXfer+0xcfa>
 800922c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009230:	2b3e      	cmp	r3, #62	; 0x3e
 8009232:	d81c      	bhi.n	800926e <USB_EPStartXfer+0xc54>
 8009234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009238:	085b      	lsrs	r3, r3, #1
 800923a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800923e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b00      	cmp	r3, #0
 8009248:	d004      	beq.n	8009254 <USB_EPStartXfer+0xc3a>
 800924a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800924e:	3301      	adds	r3, #1
 8009250:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009254:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	b29a      	uxth	r2, r3
 800925a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800925e:	b29b      	uxth	r3, r3
 8009260:	029b      	lsls	r3, r3, #10
 8009262:	b29b      	uxth	r3, r3
 8009264:	4313      	orrs	r3, r2
 8009266:	b29a      	uxth	r2, r3
 8009268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	e052      	b.n	8009314 <USB_EPStartXfer+0xcfa>
 800926e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009272:	095b      	lsrs	r3, r3, #5
 8009274:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927c:	f003 031f 	and.w	r3, r3, #31
 8009280:	2b00      	cmp	r3, #0
 8009282:	d104      	bne.n	800928e <USB_EPStartXfer+0xc74>
 8009284:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009288:	3b01      	subs	r3, #1
 800928a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800928e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29a      	uxth	r2, r3
 8009294:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009298:	b29b      	uxth	r3, r3
 800929a:	029b      	lsls	r3, r3, #10
 800929c:	b29b      	uxth	r3, r3
 800929e:	4313      	orrs	r3, r2
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092aa:	b29a      	uxth	r2, r3
 80092ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ae:	801a      	strh	r2, [r3, #0]
 80092b0:	e030      	b.n	8009314 <USB_EPStartXfer+0xcfa>
 80092b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	785b      	ldrb	r3, [r3, #1]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d128      	bne.n	8009314 <USB_EPStartXfer+0xcfa>
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092de:	b29b      	uxth	r3, r3
 80092e0:	461a      	mov	r2, r3
 80092e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092e6:	4413      	add	r3, r2
 80092e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80092ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	00da      	lsls	r2, r3, #3
 80092fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092fe:	4413      	add	r3, r2
 8009300:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009308:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800930c:	b29a      	uxth	r2, r3
 800930e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009312:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	891b      	ldrh	r3, [r3, #8]
 8009320:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6959      	ldr	r1, [r3, #20]
 8009330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009334:	b29b      	uxth	r3, r3
 8009336:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800933a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800933e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009342:	6800      	ldr	r0, [r0, #0]
 8009344:	f000 fe55 	bl	8009ff2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800936a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800936e:	817b      	strh	r3, [r7, #10]
 8009370:	897b      	ldrh	r3, [r7, #10]
 8009372:	f083 0310 	eor.w	r3, r3, #16
 8009376:	817b      	strh	r3, [r7, #10]
 8009378:	897b      	ldrh	r3, [r7, #10]
 800937a:	f083 0320 	eor.w	r3, r3, #32
 800937e:	817b      	strh	r3, [r7, #10]
 8009380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	441a      	add	r2, r3
 800939a:	897b      	ldrh	r3, [r7, #10]
 800939c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	8013      	strh	r3, [r2, #0]
 80093b0:	f000 bcdf 	b.w	8009d72 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80093b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	7b1b      	ldrb	r3, [r3, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f040 80bc 	bne.w	800953e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80093c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d917      	bls.n	8009412 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80093f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	699a      	ldr	r2, [r3, #24]
 80093fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009402:	1ad2      	subs	r2, r2, r3
 8009404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009408:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	619a      	str	r2, [r3, #24]
 8009410:	e00e      	b.n	8009430 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2200      	movs	r2, #0
 800942e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800943e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800944c:	b29b      	uxth	r3, r3
 800944e:	461a      	mov	r2, r3
 8009450:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009454:	4413      	add	r3, r2
 8009456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800945a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	00da      	lsls	r2, r3, #3
 8009468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800946c:	4413      	add	r3, r2
 800946e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	b29b      	uxth	r3, r3
 800947e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009482:	b29a      	uxth	r2, r3
 8009484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009488:	801a      	strh	r2, [r3, #0]
 800948a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800948e:	2b00      	cmp	r3, #0
 8009490:	d10d      	bne.n	80094ae <USB_EPStartXfer+0xe94>
 8009492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009496:	881b      	ldrh	r3, [r3, #0]
 8009498:	b29b      	uxth	r3, r3
 800949a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800949e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094a8:	801a      	strh	r2, [r3, #0]
 80094aa:	f000 bc28 	b.w	8009cfe <USB_EPStartXfer+0x16e4>
 80094ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094b2:	2b3e      	cmp	r3, #62	; 0x3e
 80094b4:	d81f      	bhi.n	80094f6 <USB_EPStartXfer+0xedc>
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d004      	beq.n	80094d6 <USB_EPStartXfer+0xebc>
 80094cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094d0:	3301      	adds	r3, #1
 80094d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29a      	uxth	r2, r3
 80094de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	029b      	lsls	r3, r3, #10
 80094e6:	b29b      	uxth	r3, r3
 80094e8:	4313      	orrs	r3, r2
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f0:	801a      	strh	r2, [r3, #0]
 80094f2:	f000 bc04 	b.w	8009cfe <USB_EPStartXfer+0x16e4>
 80094f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fa:	095b      	lsrs	r3, r3, #5
 80094fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009504:	f003 031f 	and.w	r3, r3, #31
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <USB_EPStartXfer+0xefc>
 800950c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009510:	3b01      	subs	r3, #1
 8009512:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009516:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29a      	uxth	r2, r3
 800951e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009522:	b29b      	uxth	r3, r3
 8009524:	029b      	lsls	r3, r3, #10
 8009526:	b29b      	uxth	r3, r3
 8009528:	4313      	orrs	r3, r2
 800952a:	b29b      	uxth	r3, r3
 800952c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009534:	b29a      	uxth	r2, r3
 8009536:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800953a:	801a      	strh	r2, [r3, #0]
 800953c:	e3df      	b.n	8009cfe <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800953e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009542:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	78db      	ldrb	r3, [r3, #3]
 800954a:	2b02      	cmp	r3, #2
 800954c:	f040 8218 	bne.w	8009980 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b00      	cmp	r3, #0
 800955e:	f040 809d 	bne.w	800969c <USB_EPStartXfer+0x1082>
 8009562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800957e:	b29b      	uxth	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009586:	4413      	add	r3, r2
 8009588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800958c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	00da      	lsls	r2, r3, #3
 800959a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800959e:	4413      	add	r3, r2
 80095a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80095a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ac:	881b      	ldrh	r3, [r3, #0]
 80095ae:	b29b      	uxth	r3, r3
 80095b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095ba:	801a      	strh	r2, [r3, #0]
 80095bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10c      	bne.n	80095e6 <USB_EPStartXfer+0xfcc>
 80095cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095dc:	b29a      	uxth	r2, r3
 80095de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80095e2:	801a      	strh	r2, [r3, #0]
 80095e4:	e08f      	b.n	8009706 <USB_EPStartXfer+0x10ec>
 80095e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	2b3e      	cmp	r3, #62	; 0x3e
 80095f4:	d826      	bhi.n	8009644 <USB_EPStartXfer+0x102a>
 80095f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	085b      	lsrs	r3, r3, #1
 8009604:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b00      	cmp	r3, #0
 800961a:	d004      	beq.n	8009626 <USB_EPStartXfer+0x100c>
 800961c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009620:	3301      	adds	r3, #1
 8009622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800962a:	881b      	ldrh	r3, [r3, #0]
 800962c:	b29a      	uxth	r2, r3
 800962e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009632:	b29b      	uxth	r3, r3
 8009634:	029b      	lsls	r3, r3, #10
 8009636:	b29b      	uxth	r3, r3
 8009638:	4313      	orrs	r3, r2
 800963a:	b29a      	uxth	r2, r3
 800963c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009640:	801a      	strh	r2, [r3, #0]
 8009642:	e060      	b.n	8009706 <USB_EPStartXfer+0x10ec>
 8009644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	095b      	lsrs	r3, r3, #5
 8009652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 031f 	and.w	r3, r3, #31
 8009666:	2b00      	cmp	r3, #0
 8009668:	d104      	bne.n	8009674 <USB_EPStartXfer+0x105a>
 800966a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966e:	3b01      	subs	r3, #1
 8009670:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	b29a      	uxth	r2, r3
 800967c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009680:	b29b      	uxth	r3, r3
 8009682:	029b      	lsls	r3, r3, #10
 8009684:	b29b      	uxth	r3, r3
 8009686:	4313      	orrs	r3, r2
 8009688:	b29b      	uxth	r3, r3
 800968a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009692:	b29a      	uxth	r2, r3
 8009694:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009698:	801a      	strh	r2, [r3, #0]
 800969a:	e034      	b.n	8009706 <USB_EPStartXfer+0x10ec>
 800969c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	785b      	ldrb	r3, [r3, #1]
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d12c      	bne.n	8009706 <USB_EPStartXfer+0x10ec>
 80096ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096d0:	4413      	add	r3, r2
 80096d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	00da      	lsls	r2, r3, #3
 80096e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80096e8:	4413      	add	r3, r2
 80096ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80096ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	691b      	ldr	r3, [r3, #16]
 80096fe:	b29a      	uxth	r2, r3
 8009700:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	785b      	ldrb	r3, [r3, #1]
 8009720:	2b00      	cmp	r3, #0
 8009722:	f040 809d 	bne.w	8009860 <USB_EPStartXfer+0x1246>
 8009726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009742:	b29b      	uxth	r3, r3
 8009744:	461a      	mov	r2, r3
 8009746:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800974a:	4413      	add	r3, r2
 800974c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	00da      	lsls	r2, r3, #3
 800975e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009762:	4413      	add	r3, r2
 8009764:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800976c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009770:	881b      	ldrh	r3, [r3, #0]
 8009772:	b29b      	uxth	r3, r3
 8009774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009778:	b29a      	uxth	r2, r3
 800977a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800977e:	801a      	strh	r2, [r3, #0]
 8009780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	691b      	ldr	r3, [r3, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10c      	bne.n	80097aa <USB_EPStartXfer+0x1190>
 8009790:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009794:	881b      	ldrh	r3, [r3, #0]
 8009796:	b29b      	uxth	r3, r3
 8009798:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800979c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097a6:	801a      	strh	r2, [r3, #0]
 80097a8:	e088      	b.n	80098bc <USB_EPStartXfer+0x12a2>
 80097aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	2b3e      	cmp	r3, #62	; 0x3e
 80097b8:	d826      	bhi.n	8009808 <USB_EPStartXfer+0x11ee>
 80097ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	085b      	lsrs	r3, r3, #1
 80097c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f003 0301 	and.w	r3, r3, #1
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d004      	beq.n	80097ea <USB_EPStartXfer+0x11d0>
 80097e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097e4:	3301      	adds	r3, #1
 80097e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80097ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097ee:	881b      	ldrh	r3, [r3, #0]
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	029b      	lsls	r3, r3, #10
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	4313      	orrs	r3, r2
 80097fe:	b29a      	uxth	r2, r3
 8009800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e059      	b.n	80098bc <USB_EPStartXfer+0x12a2>
 8009808:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800980c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	691b      	ldr	r3, [r3, #16]
 8009814:	095b      	lsrs	r3, r3, #5
 8009816:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800981a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800981e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	691b      	ldr	r3, [r3, #16]
 8009826:	f003 031f 	and.w	r3, r3, #31
 800982a:	2b00      	cmp	r3, #0
 800982c:	d104      	bne.n	8009838 <USB_EPStartXfer+0x121e>
 800982e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009832:	3b01      	subs	r3, #1
 8009834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009838:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	b29a      	uxth	r2, r3
 8009840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009844:	b29b      	uxth	r3, r3
 8009846:	029b      	lsls	r3, r3, #10
 8009848:	b29b      	uxth	r3, r3
 800984a:	4313      	orrs	r3, r2
 800984c:	b29b      	uxth	r3, r3
 800984e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009856:	b29a      	uxth	r2, r3
 8009858:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800985c:	801a      	strh	r2, [r3, #0]
 800985e:	e02d      	b.n	80098bc <USB_EPStartXfer+0x12a2>
 8009860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d125      	bne.n	80098bc <USB_EPStartXfer+0x12a2>
 8009870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009874:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800987e:	b29b      	uxth	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009886:	4413      	add	r3, r2
 8009888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800988c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	00da      	lsls	r2, r3, #3
 800989a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800989e:	4413      	add	r3, r2
 80098a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80098a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80098a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098ba:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80098bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	69db      	ldr	r3, [r3, #28]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 8218 	beq.w	8009cfe <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80098ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80098ee:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80098f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d005      	beq.n	8009906 <USB_EPStartXfer+0x12ec>
 80098fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80098fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10d      	bne.n	8009922 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009906:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800990a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800990e:	2b00      	cmp	r3, #0
 8009910:	f040 81f5 	bne.w	8009cfe <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009914:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800991c:	2b00      	cmp	r3, #0
 800991e:	f040 81ee 	bne.w	8009cfe <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009930:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	881b      	ldrh	r3, [r3, #0]
 800993e:	b29b      	uxth	r3, r3
 8009940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009948:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800994c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009950:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	441a      	add	r2, r3
 8009966:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800996a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800997a:	b29b      	uxth	r3, r3
 800997c:	8013      	strh	r3, [r2, #0]
 800997e:	e1be      	b.n	8009cfe <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	78db      	ldrb	r3, [r3, #3]
 800998c:	2b01      	cmp	r3, #1
 800998e:	f040 81b4 	bne.w	8009cfa <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699a      	ldr	r2, [r3, #24]
 800999e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d917      	bls.n	80099de <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80099ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80099be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	699a      	ldr	r2, [r3, #24]
 80099ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	619a      	str	r2, [r3, #24]
 80099dc:	e00e      	b.n	80099fc <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80099de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80099ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2200      	movs	r2, #0
 80099fa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80099fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	785b      	ldrb	r3, [r3, #1]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f040 8085 	bne.w	8009b18 <USB_EPStartXfer+0x14fe>
 8009a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009a32:	4413      	add	r3, r2
 8009a34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	00da      	lsls	r2, r3, #3
 8009a46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a66:	801a      	strh	r2, [r3, #0]
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10c      	bne.n	8009a8a <USB_EPStartXfer+0x1470>
 8009a70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009a86:	801a      	strh	r2, [r3, #0]
 8009a88:	e077      	b.n	8009b7a <USB_EPStartXfer+0x1560>
 8009a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a8e:	2b3e      	cmp	r3, #62	; 0x3e
 8009a90:	d81e      	bhi.n	8009ad0 <USB_EPStartXfer+0x14b6>
 8009a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a96:	085b      	lsrs	r3, r3, #1
 8009a98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d004      	beq.n	8009ab2 <USB_EPStartXfer+0x1498>
 8009aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aac:	3301      	adds	r3, #1
 8009aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ab2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ab6:	881b      	ldrh	r3, [r3, #0]
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	029b      	lsls	r3, r3, #10
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	b29a      	uxth	r2, r3
 8009ac8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009acc:	801a      	strh	r2, [r3, #0]
 8009ace:	e054      	b.n	8009b7a <USB_EPStartXfer+0x1560>
 8009ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad4:	095b      	lsrs	r3, r3, #5
 8009ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ade:	f003 031f 	and.w	r3, r3, #31
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d104      	bne.n	8009af0 <USB_EPStartXfer+0x14d6>
 8009ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009aea:	3b01      	subs	r3, #1
 8009aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	029b      	lsls	r3, r3, #10
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	4313      	orrs	r3, r2
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b14:	801a      	strh	r2, [r3, #0]
 8009b16:	e030      	b.n	8009b7a <USB_EPStartXfer+0x1560>
 8009b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	785b      	ldrb	r3, [r3, #1]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d128      	bne.n	8009b7a <USB_EPStartXfer+0x1560>
 8009b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	461a      	mov	r2, r3
 8009b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009b52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	00da      	lsls	r2, r3, #3
 8009b60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b64:	4413      	add	r3, r2
 8009b66:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009b6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009b78:	801a      	strh	r2, [r3, #0]
 8009b7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	785b      	ldrb	r3, [r3, #1]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f040 8085 	bne.w	8009ca4 <USB_EPStartXfer+0x168a>
 8009b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009bbe:	4413      	add	r3, r2
 8009bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	00da      	lsls	r2, r3, #3
 8009bd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009be0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009be4:	881b      	ldrh	r3, [r3, #0]
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009bf2:	801a      	strh	r2, [r3, #0]
 8009bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10c      	bne.n	8009c16 <USB_EPStartXfer+0x15fc>
 8009bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c00:	881b      	ldrh	r3, [r3, #0]
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c12:	801a      	strh	r2, [r3, #0]
 8009c14:	e073      	b.n	8009cfe <USB_EPStartXfer+0x16e4>
 8009c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1a:	2b3e      	cmp	r3, #62	; 0x3e
 8009c1c:	d81e      	bhi.n	8009c5c <USB_EPStartXfer+0x1642>
 8009c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c22:	085b      	lsrs	r3, r3, #1
 8009c24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d004      	beq.n	8009c3e <USB_EPStartXfer+0x1624>
 8009c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c38:	3301      	adds	r3, #1
 8009c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29a      	uxth	r2, r3
 8009c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	029b      	lsls	r3, r3, #10
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4313      	orrs	r3, r2
 8009c52:	b29a      	uxth	r2, r3
 8009c54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e050      	b.n	8009cfe <USB_EPStartXfer+0x16e4>
 8009c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c60:	095b      	lsrs	r3, r3, #5
 8009c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6a:	f003 031f 	and.w	r3, r3, #31
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d104      	bne.n	8009c7c <USB_EPStartXfer+0x1662>
 8009c72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c76:	3b01      	subs	r3, #1
 8009c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	b29a      	uxth	r2, r3
 8009c84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	029b      	lsls	r3, r3, #10
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c9a:	b29a      	uxth	r2, r3
 8009c9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ca0:	801a      	strh	r2, [r3, #0]
 8009ca2:	e02c      	b.n	8009cfe <USB_EPStartXfer+0x16e4>
 8009ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	785b      	ldrb	r3, [r3, #1]
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d124      	bne.n	8009cfe <USB_EPStartXfer+0x16e4>
 8009cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009cca:	4413      	add	r3, r2
 8009ccc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	00da      	lsls	r2, r3, #3
 8009cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009cf6:	801a      	strh	r2, [r3, #0]
 8009cf8:	e001      	b.n	8009cfe <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e03a      	b.n	8009d74 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d06:	681a      	ldr	r2, [r3, #0]
 8009d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	4413      	add	r3, r2
 8009d18:	881b      	ldrh	r3, [r3, #0]
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009d28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009d2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d30:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009d34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009d38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d3c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	441a      	add	r2, r3
 8009d5a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b085      	sub	sp, #20
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	785b      	ldrb	r3, [r3, #1]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d020      	beq.n	8009dd2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	4413      	add	r3, r2
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009da2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009da6:	81bb      	strh	r3, [r7, #12]
 8009da8:	89bb      	ldrh	r3, [r7, #12]
 8009daa:	f083 0310 	eor.w	r3, r3, #16
 8009dae:	81bb      	strh	r3, [r7, #12]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	441a      	add	r2, r3
 8009dba:	89bb      	ldrh	r3, [r7, #12]
 8009dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	8013      	strh	r3, [r2, #0]
 8009dd0:	e01f      	b.n	8009e12 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	009b      	lsls	r3, r3, #2
 8009dda:	4413      	add	r3, r2
 8009ddc:	881b      	ldrh	r3, [r3, #0]
 8009dde:	b29b      	uxth	r3, r3
 8009de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009de8:	81fb      	strh	r3, [r7, #14]
 8009dea:	89fb      	ldrh	r3, [r7, #14]
 8009dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009df0:	81fb      	strh	r3, [r7, #14]
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	441a      	add	r2, r3
 8009dfc:	89fb      	ldrh	r3, [r7, #14]
 8009dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	7b1b      	ldrb	r3, [r3, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f040 809d 	bne.w	8009f6e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d04c      	beq.n	8009ed6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	781b      	ldrb	r3, [r3, #0]
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	823b      	strh	r3, [r7, #16]
 8009e4a:	8a3b      	ldrh	r3, [r7, #16]
 8009e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d01b      	beq.n	8009e8c <USB_EPClearStall+0x6c>
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	4413      	add	r3, r2
 8009e5e:	881b      	ldrh	r3, [r3, #0]
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e6a:	81fb      	strh	r3, [r7, #14]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	441a      	add	r2, r3
 8009e76:	89fb      	ldrh	r3, [r7, #14]
 8009e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	78db      	ldrb	r3, [r3, #3]
 8009e90:	2b01      	cmp	r3, #1
 8009e92:	d06c      	beq.n	8009f6e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	881b      	ldrh	r3, [r3, #0]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eaa:	81bb      	strh	r3, [r7, #12]
 8009eac:	89bb      	ldrh	r3, [r7, #12]
 8009eae:	f083 0320 	eor.w	r3, r3, #32
 8009eb2:	81bb      	strh	r3, [r7, #12]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	441a      	add	r2, r3
 8009ebe:	89bb      	ldrh	r3, [r7, #12]
 8009ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	8013      	strh	r3, [r2, #0]
 8009ed4:	e04b      	b.n	8009f6e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	4413      	add	r3, r2
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	82fb      	strh	r3, [r7, #22]
 8009ee4:	8afb      	ldrh	r3, [r7, #22]
 8009ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d01b      	beq.n	8009f26 <USB_EPClearStall+0x106>
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f04:	82bb      	strh	r3, [r7, #20]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	781b      	ldrb	r3, [r3, #0]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	441a      	add	r2, r3
 8009f10:	8abb      	ldrh	r3, [r7, #20]
 8009f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	881b      	ldrh	r3, [r3, #0]
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3c:	827b      	strh	r3, [r7, #18]
 8009f3e:	8a7b      	ldrh	r3, [r7, #18]
 8009f40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f44:	827b      	strh	r3, [r7, #18]
 8009f46:	8a7b      	ldrh	r3, [r7, #18]
 8009f48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f4c:	827b      	strh	r3, [r7, #18]
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	441a      	add	r2, r3
 8009f58:	8a7b      	ldrh	r3, [r7, #18]
 8009f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	371c      	adds	r7, #28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d103      	bne.n	8009f96 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2280      	movs	r2, #128	; 0x80
 8009f92:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr

08009fd2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b085      	sub	sp, #20
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b08b      	sub	sp, #44	; 0x2c
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	60f8      	str	r0, [r7, #12]
 8009ffa:	60b9      	str	r1, [r7, #8]
 8009ffc:	4611      	mov	r1, r2
 8009ffe:	461a      	mov	r2, r3
 800a000:	460b      	mov	r3, r1
 800a002:	80fb      	strh	r3, [r7, #6]
 800a004:	4613      	mov	r3, r2
 800a006:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a008:	88bb      	ldrh	r3, [r7, #4]
 800a00a:	3301      	adds	r3, #1
 800a00c:	085b      	lsrs	r3, r3, #1
 800a00e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a018:	88fa      	ldrh	r2, [r7, #6]
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a022:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	627b      	str	r3, [r7, #36]	; 0x24
 800a028:	e01b      	b.n	800a062 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a02a:	69fb      	ldr	r3, [r7, #28]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a030:	69fb      	ldr	r3, [r7, #28]
 800a032:	3301      	adds	r3, #1
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	021b      	lsls	r3, r3, #8
 800a038:	b21a      	sxth	r2, r3
 800a03a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a03e:	4313      	orrs	r3, r2
 800a040:	b21b      	sxth	r3, r3
 800a042:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	8a7a      	ldrh	r2, [r7, #18]
 800a048:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a04a:	6a3b      	ldr	r3, [r7, #32]
 800a04c:	3302      	adds	r3, #2
 800a04e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	3301      	adds	r3, #1
 800a054:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a056:	69fb      	ldr	r3, [r7, #28]
 800a058:	3301      	adds	r3, #1
 800a05a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	3b01      	subs	r3, #1
 800a060:	627b      	str	r3, [r7, #36]	; 0x24
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1e0      	bne.n	800a02a <USB_WritePMA+0x38>
  }
}
 800a068:	bf00      	nop
 800a06a:	bf00      	nop
 800a06c:	372c      	adds	r7, #44	; 0x2c
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a076:	b480      	push	{r7}
 800a078:	b08b      	sub	sp, #44	; 0x2c
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	60f8      	str	r0, [r7, #12]
 800a07e:	60b9      	str	r1, [r7, #8]
 800a080:	4611      	mov	r1, r2
 800a082:	461a      	mov	r2, r3
 800a084:	460b      	mov	r3, r1
 800a086:	80fb      	strh	r3, [r7, #6]
 800a088:	4613      	mov	r3, r2
 800a08a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a08c:	88bb      	ldrh	r3, [r7, #4]
 800a08e:	085b      	lsrs	r3, r3, #1
 800a090:	b29b      	uxth	r3, r3
 800a092:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a09c:	88fa      	ldrh	r2, [r7, #6]
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a0a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	627b      	str	r3, [r7, #36]	; 0x24
 800a0ac:	e018      	b.n	800a0e0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a0ae:	6a3b      	ldr	r3, [r7, #32]
 800a0b0:	881b      	ldrh	r3, [r3, #0]
 800a0b2:	b29b      	uxth	r3, r3
 800a0b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	3302      	adds	r3, #2
 800a0ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	b2da      	uxtb	r2, r3
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	0a1b      	lsrs	r3, r3, #8
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0dc:	3b01      	subs	r3, #1
 800a0de:	627b      	str	r3, [r7, #36]	; 0x24
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1e3      	bne.n	800a0ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a0e6:	88bb      	ldrh	r3, [r7, #4]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d007      	beq.n	800a102 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a0f2:	6a3b      	ldr	r3, [r7, #32]
 800a0f4:	881b      	ldrh	r3, [r3, #0]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	b2da      	uxtb	r2, r3
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	701a      	strb	r2, [r3, #0]
  }
}
 800a102:	bf00      	nop
 800a104:	372c      	adds	r7, #44	; 0x2c
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b084      	sub	sp, #16
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a11a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a11e:	f002 f8fb 	bl	800c318 <USBD_static_malloc>
 800a122:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d105      	bne.n	800a136 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a132:	2302      	movs	r3, #2
 800a134:	e066      	b.n	800a204 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	7c1b      	ldrb	r3, [r3, #16]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d119      	bne.n	800a17a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a146:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a14a:	2202      	movs	r2, #2
 800a14c:	2181      	movs	r1, #129	; 0x81
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f001 ff89 	bl	800c066 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a15a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a15e:	2202      	movs	r2, #2
 800a160:	2101      	movs	r1, #1
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f001 ff7f 	bl	800c066 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2210      	movs	r2, #16
 800a174:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a178:	e016      	b.n	800a1a8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a17a:	2340      	movs	r3, #64	; 0x40
 800a17c:	2202      	movs	r2, #2
 800a17e:	2181      	movs	r1, #129	; 0x81
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 ff70 	bl	800c066 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2201      	movs	r2, #1
 800a18a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a18c:	2340      	movs	r3, #64	; 0x40
 800a18e:	2202      	movs	r2, #2
 800a190:	2101      	movs	r1, #1
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f001 ff67 	bl	800c066 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2210      	movs	r2, #16
 800a1a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1a8:	2308      	movs	r3, #8
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	2182      	movs	r1, #130	; 0x82
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 ff59 	bl	800c066 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	7c1b      	ldrb	r3, [r3, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d109      	bne.n	800a1f2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f002 f82a 	bl	800c244 <USBD_LL_PrepareReceive>
 800a1f0:	e007      	b.n	800a202 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a1f8:	2340      	movs	r3, #64	; 0x40
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f002 f821 	bl	800c244 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a202:	2300      	movs	r3, #0
}
 800a204:	4618      	mov	r0, r3
 800a206:	3710      	adds	r7, #16
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}

0800a20c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a218:	2181      	movs	r1, #129	; 0x81
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f001 ff49 	bl	800c0b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a226:	2101      	movs	r1, #1
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 ff42 	bl	800c0b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a236:	2182      	movs	r1, #130	; 0x82
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 ff3a 	bl	800c0b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00e      	beq.n	800a276 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a268:	4618      	mov	r0, r3
 800a26a:	f002 f863 	bl	800c334 <USBD_static_free>
    pdev->pClassData = NULL;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3708      	adds	r7, #8
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a290:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a296:	2300      	movs	r3, #0
 800a298:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d101      	bne.n	800a2a8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	e0af      	b.n	800a408 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d03f      	beq.n	800a334 <USBD_CDC_Setup+0xb4>
 800a2b4:	2b20      	cmp	r3, #32
 800a2b6:	f040 809f 	bne.w	800a3f8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	88db      	ldrh	r3, [r3, #6]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d02e      	beq.n	800a320 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	b25b      	sxtb	r3, r3
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	da16      	bge.n	800a2fa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	683a      	ldr	r2, [r7, #0]
 800a2d6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a2d8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	88d2      	ldrh	r2, [r2, #6]
 800a2de:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	88db      	ldrh	r3, [r3, #6]
 800a2e4:	2b07      	cmp	r3, #7
 800a2e6:	bf28      	it	cs
 800a2e8:	2307      	movcs	r3, #7
 800a2ea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	89fa      	ldrh	r2, [r7, #14]
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f001 facf 	bl	800b896 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a2f8:	e085      	b.n	800a406 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	785a      	ldrb	r2, [r3, #1]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	88db      	ldrh	r3, [r3, #6]
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a310:	6939      	ldr	r1, [r7, #16]
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	88db      	ldrh	r3, [r3, #6]
 800a316:	461a      	mov	r2, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f001 fae8 	bl	800b8ee <USBD_CtlPrepareRx>
      break;
 800a31e:	e072      	b.n	800a406 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	7850      	ldrb	r0, [r2, #1]
 800a32c:	2200      	movs	r2, #0
 800a32e:	6839      	ldr	r1, [r7, #0]
 800a330:	4798      	blx	r3
      break;
 800a332:	e068      	b.n	800a406 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	785b      	ldrb	r3, [r3, #1]
 800a338:	2b0b      	cmp	r3, #11
 800a33a:	d852      	bhi.n	800a3e2 <USBD_CDC_Setup+0x162>
 800a33c:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <USBD_CDC_Setup+0xc4>)
 800a33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a342:	bf00      	nop
 800a344:	0800a375 	.word	0x0800a375
 800a348:	0800a3f1 	.word	0x0800a3f1
 800a34c:	0800a3e3 	.word	0x0800a3e3
 800a350:	0800a3e3 	.word	0x0800a3e3
 800a354:	0800a3e3 	.word	0x0800a3e3
 800a358:	0800a3e3 	.word	0x0800a3e3
 800a35c:	0800a3e3 	.word	0x0800a3e3
 800a360:	0800a3e3 	.word	0x0800a3e3
 800a364:	0800a3e3 	.word	0x0800a3e3
 800a368:	0800a3e3 	.word	0x0800a3e3
 800a36c:	0800a39f 	.word	0x0800a39f
 800a370:	0800a3c9 	.word	0x0800a3c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a37a:	b2db      	uxtb	r3, r3
 800a37c:	2b03      	cmp	r3, #3
 800a37e:	d107      	bne.n	800a390 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a380:	f107 030a 	add.w	r3, r7, #10
 800a384:	2202      	movs	r2, #2
 800a386:	4619      	mov	r1, r3
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 fa84 	bl	800b896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a38e:	e032      	b.n	800a3f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 fa0e 	bl	800b7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a398:	2303      	movs	r3, #3
 800a39a:	75fb      	strb	r3, [r7, #23]
          break;
 800a39c:	e02b      	b.n	800a3f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d107      	bne.n	800a3ba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3aa:	f107 030d 	add.w	r3, r7, #13
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f001 fa6f 	bl	800b896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3b8:	e01d      	b.n	800a3f6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a3ba:	6839      	ldr	r1, [r7, #0]
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f001 f9f9 	bl	800b7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	75fb      	strb	r3, [r7, #23]
          break;
 800a3c6:	e016      	b.n	800a3f6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d00f      	beq.n	800a3f4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f001 f9ec 	bl	800b7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a3e0:	e008      	b.n	800a3f4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 f9e5 	bl	800b7b4 <USBD_CtlError>
          ret = USBD_FAIL;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	75fb      	strb	r3, [r7, #23]
          break;
 800a3ee:	e002      	b.n	800a3f6 <USBD_CDC_Setup+0x176>
          break;
 800a3f0:	bf00      	nop
 800a3f2:	e008      	b.n	800a406 <USBD_CDC_Setup+0x186>
          break;
 800a3f4:	bf00      	nop
      }
      break;
 800a3f6:	e006      	b.n	800a406 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f001 f9da 	bl	800b7b4 <USBD_CtlError>
      ret = USBD_FAIL;
 800a400:	2303      	movs	r3, #3
 800a402:	75fb      	strb	r3, [r7, #23]
      break;
 800a404:	bf00      	nop
  }

  return (uint8_t)ret;
 800a406:	7dfb      	ldrb	r3, [r7, #23]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a42e:	2303      	movs	r3, #3
 800a430:	e04f      	b.n	800a4d2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a438:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a43a:	78fa      	ldrb	r2, [r7, #3]
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	4613      	mov	r3, r2
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	440b      	add	r3, r1
 800a448:	3318      	adds	r3, #24
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d029      	beq.n	800a4a4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a450:	78fa      	ldrb	r2, [r7, #3]
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	4613      	mov	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	440b      	add	r3, r1
 800a45e:	3318      	adds	r3, #24
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	78f9      	ldrb	r1, [r7, #3]
 800a464:	68f8      	ldr	r0, [r7, #12]
 800a466:	460b      	mov	r3, r1
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	440b      	add	r3, r1
 800a46c:	00db      	lsls	r3, r3, #3
 800a46e:	4403      	add	r3, r0
 800a470:	3320      	adds	r3, #32
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	fbb2 f1f3 	udiv	r1, r2, r3
 800a478:	fb01 f303 	mul.w	r3, r1, r3
 800a47c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d110      	bne.n	800a4a4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a482:	78fa      	ldrb	r2, [r7, #3]
 800a484:	6879      	ldr	r1, [r7, #4]
 800a486:	4613      	mov	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	440b      	add	r3, r1
 800a490:	3318      	adds	r3, #24
 800a492:	2200      	movs	r2, #0
 800a494:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a496:	78f9      	ldrb	r1, [r7, #3]
 800a498:	2300      	movs	r3, #0
 800a49a:	2200      	movs	r2, #0
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 feb0 	bl	800c202 <USBD_LL_Transmit>
 800a4a2:	e015      	b.n	800a4d0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d00b      	beq.n	800a4d0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	68ba      	ldr	r2, [r7, #8]
 800a4c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a4cc:	78fa      	ldrb	r2, [r7, #3]
 800a4ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4f8:	2303      	movs	r3, #3
 800a4fa:	e015      	b.n	800a528 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f001 fec0 	bl	800c286 <USBD_LL_GetRxDataSize>
 800a506:	4602      	mov	r2, r0
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a522:	4611      	mov	r1, r2
 800a524:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a526:	2300      	movs	r3, #0
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a53e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a546:	2303      	movs	r3, #3
 800a548:	e01b      	b.n	800a582 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d015      	beq.n	800a580 <USBD_CDC_EP0_RxReady+0x50>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a55a:	2bff      	cmp	r3, #255	; 0xff
 800a55c:	d010      	beq.n	800a580 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a56c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a574:	b292      	uxth	r2, r2
 800a576:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	22ff      	movs	r2, #255	; 0xff
 800a57c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
	...

0800a58c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b083      	sub	sp, #12
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2243      	movs	r2, #67	; 0x43
 800a598:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a59a:	4b03      	ldr	r3, [pc, #12]	; (800a5a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	20000094 	.word	0x20000094

0800a5ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2243      	movs	r2, #67	; 0x43
 800a5b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a5ba:	4b03      	ldr	r3, [pc, #12]	; (800a5c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	370c      	adds	r7, #12
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	20000050 	.word	0x20000050

0800a5cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2243      	movs	r2, #67	; 0x43
 800a5d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a5da:	4b03      	ldr	r3, [pc, #12]	; (800a5e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	370c      	adds	r7, #12
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	200000d8 	.word	0x200000d8

0800a5ec <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	220a      	movs	r2, #10
 800a5f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a5fa:	4b03      	ldr	r3, [pc, #12]	; (800a608 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	2000000c 	.word	0x2000000c

0800a60c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e004      	b.n	800a62a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a636:	b480      	push	{r7}
 800a638:	b087      	sub	sp, #28
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	60f8      	str	r0, [r7, #12]
 800a63e:	60b9      	str	r1, [r7, #8]
 800a640:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a648:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d101      	bne.n	800a654 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	e008      	b.n	800a666 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	371c      	adds	r7, #28
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a672:	b480      	push	{r7}
 800a674:	b085      	sub	sp, #20
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
 800a67a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a682:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d101      	bne.n	800a68e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a68a:	2303      	movs	r3, #3
 800a68c:	e004      	b.n	800a698 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3714      	adds	r7, #20
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6b2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e01a      	b.n	800a6fc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d114      	bne.n	800a6fa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a6ee:	2181      	movs	r1, #129	; 0x81
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f001 fd86 	bl	800c202 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3710      	adds	r7, #16
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a712:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a71e:	2303      	movs	r3, #3
 800a720:	e016      	b.n	800a750 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	7c1b      	ldrb	r3, [r3, #16]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d109      	bne.n	800a73e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a730:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a734:	2101      	movs	r1, #1
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f001 fd84 	bl	800c244 <USBD_LL_PrepareReceive>
 800a73c:	e007      	b.n	800a74e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a744:	2340      	movs	r3, #64	; 0x40
 800a746:	2101      	movs	r1, #1
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 fd7b 	bl	800c244 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3710      	adds	r7, #16
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b086      	sub	sp, #24
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	4613      	mov	r3, r2
 800a764:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e01f      	b.n	800a7b0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2200      	movs	r2, #0
 800a774:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2200      	movs	r2, #0
 800a784:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2201      	movs	r2, #1
 800a79a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	79fa      	ldrb	r2, [r7, #7]
 800a7a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f001 fbe3 	bl	800bf70 <USBD_LL_Init>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3718      	adds	r7, #24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d101      	bne.n	800a7d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	e016      	b.n	800a7fe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	683a      	ldr	r2, [r7, #0]
 800a7d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00b      	beq.n	800a7fc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ec:	f107 020e 	add.w	r2, r7, #14
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4798      	blx	r3
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 fc0e 	bl	800c030 <USBD_LL_Start>
 800a814:	4603      	mov	r3, r0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}

0800a81e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a81e:	b480      	push	{r7}
 800a820:	b083      	sub	sp, #12
 800a822:	af00      	add	r7, sp, #0
 800a824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d009      	beq.n	800a862 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	78fa      	ldrb	r2, [r7, #3]
 800a858:	4611      	mov	r1, r2
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a862:	7bfb      	ldrb	r3, [r7, #15]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3710      	adds	r7, #16
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b082      	sub	sp, #8
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	460b      	mov	r3, r1
 800a876:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d007      	beq.n	800a892 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	78fa      	ldrb	r2, [r7, #3]
 800a88c:	4611      	mov	r1, r2
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	4798      	blx	r3
  }

  return USBD_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3708      	adds	r7, #8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}

0800a89c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8ac:	6839      	ldr	r1, [r7, #0]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 ff46 	bl	800b740 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a8c2:	461a      	mov	r2, r3
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8d0:	f003 031f 	and.w	r3, r3, #31
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d01a      	beq.n	800a90e <USBD_LL_SetupStage+0x72>
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d822      	bhi.n	800a922 <USBD_LL_SetupStage+0x86>
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <USBD_LL_SetupStage+0x4a>
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d00a      	beq.n	800a8fa <USBD_LL_SetupStage+0x5e>
 800a8e4:	e01d      	b.n	800a922 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f9ee 	bl	800acd0 <USBD_StdDevReq>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f8:	e020      	b.n	800a93c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 fa52 	bl	800adac <USBD_StdItfReq>
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]
      break;
 800a90c:	e016      	b.n	800a93c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fa91 	bl	800ae3e <USBD_StdEPReq>
 800a91c:	4603      	mov	r3, r0
 800a91e:	73fb      	strb	r3, [r7, #15]
      break;
 800a920:	e00c      	b.n	800a93c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a928:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f001 fbdd 	bl	800c0f0 <USBD_LL_StallEP>
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]
      break;
 800a93a:	bf00      	nop
  }

  return ret;
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93e:	4618      	mov	r0, r3
 800a940:	3710      	adds	r7, #16
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b086      	sub	sp, #24
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	460b      	mov	r3, r1
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a954:	7afb      	ldrb	r3, [r7, #11]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d138      	bne.n	800a9cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a960:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d14a      	bne.n	800aa02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	689a      	ldr	r2, [r3, #8]
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	429a      	cmp	r2, r3
 800a976:	d913      	bls.n	800a9a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	1ad2      	subs	r2, r2, r3
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	68da      	ldr	r2, [r3, #12]
 800a98a:	693b      	ldr	r3, [r7, #16]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	4293      	cmp	r3, r2
 800a990:	bf28      	it	cs
 800a992:	4613      	movcs	r3, r2
 800a994:	461a      	mov	r2, r3
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 ffc5 	bl	800b928 <USBD_CtlContinueRx>
 800a99e:	e030      	b.n	800aa02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	d10b      	bne.n	800a9c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f000 ffc0 	bl	800b94a <USBD_CtlSendStatus>
 800a9ca:	e01a      	b.n	800aa02 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b03      	cmp	r3, #3
 800a9d6:	d114      	bne.n	800aa02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9de:	699b      	ldr	r3, [r3, #24]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00e      	beq.n	800aa02 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	7afa      	ldrb	r2, [r7, #11]
 800a9ee:	4611      	mov	r1, r2
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	4798      	blx	r3
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a9f8:	7dfb      	ldrb	r3, [r7, #23]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a9fe:	7dfb      	ldrb	r3, [r7, #23]
 800aa00:	e000      	b.n	800aa04 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800aa02:	2300      	movs	r3, #0
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b086      	sub	sp, #24
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	460b      	mov	r3, r1
 800aa16:	607a      	str	r2, [r7, #4]
 800aa18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800aa1a:	7afb      	ldrb	r3, [r7, #11]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d16b      	bne.n	800aaf8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3314      	adds	r3, #20
 800aa24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d156      	bne.n	800aade <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	689a      	ldr	r2, [r3, #8]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d914      	bls.n	800aa66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	689a      	ldr	r2, [r3, #8]
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	1ad2      	subs	r2, r2, r3
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	6879      	ldr	r1, [r7, #4]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 ff3a 	bl	800b8cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa58:	2300      	movs	r3, #0
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f001 fbf0 	bl	800c244 <USBD_LL_PrepareReceive>
 800aa64:	e03b      	b.n	800aade <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	68da      	ldr	r2, [r3, #12]
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d11c      	bne.n	800aaac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d316      	bcc.n	800aaac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	685a      	ldr	r2, [r3, #4]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d20f      	bcs.n	800aaac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	2100      	movs	r1, #0
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f000 ff1b 	bl	800b8cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f001 fbcd 	bl	800c244 <USBD_LL_PrepareReceive>
 800aaaa:	e018      	b.n	800aade <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d10b      	bne.n	800aad0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d005      	beq.n	800aad0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaca:	68db      	ldr	r3, [r3, #12]
 800aacc:	68f8      	ldr	r0, [r7, #12]
 800aace:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aad0:	2180      	movs	r1, #128	; 0x80
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f001 fb0c 	bl	800c0f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 ff49 	bl	800b970 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d122      	bne.n	800ab2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f7ff fe98 	bl	800a81e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aaf6:	e01a      	b.n	800ab2e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d114      	bne.n	800ab2e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00e      	beq.n	800ab2e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	7afa      	ldrb	r2, [r7, #11]
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	4798      	blx	r3
 800ab20:	4603      	mov	r3, r0
 800ab22:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d001      	beq.n	800ab2e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ab2a:	7dfb      	ldrb	r3, [r7, #23]
 800ab2c:	e000      	b.n	800ab30 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3718      	adds	r7, #24
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e02f      	b.n	800abcc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00f      	beq.n	800ab96 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d009      	beq.n	800ab96 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	6852      	ldr	r2, [r2, #4]
 800ab8e:	b2d2      	uxtb	r2, r2
 800ab90:	4611      	mov	r1, r2
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab96:	2340      	movs	r3, #64	; 0x40
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 fa62 	bl	800c066 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2240      	movs	r2, #64	; 0x40
 800abae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800abb2:	2340      	movs	r3, #64	; 0x40
 800abb4:	2200      	movs	r2, #0
 800abb6:	2180      	movs	r1, #128	; 0x80
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f001 fa54 	bl	800c066 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2240      	movs	r2, #64	; 0x40
 800abc8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	78fa      	ldrb	r2, [r7, #3]
 800abe4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b083      	sub	sp, #12
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2204      	movs	r2, #4
 800ac0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d106      	bne.n	800ac42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e012      	b.n	800ac8c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	2b03      	cmp	r3, #3
 800ac70:	d10b      	bne.n	800ac8a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac78:	69db      	ldr	r3, [r3, #28]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	3301      	adds	r3, #1
 800acaa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800acb2:	8a3b      	ldrh	r3, [r7, #16]
 800acb4:	021b      	lsls	r3, r3, #8
 800acb6:	b21a      	sxth	r2, r3
 800acb8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800acbc:	4313      	orrs	r3, r2
 800acbe:	b21b      	sxth	r3, r3
 800acc0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800acc2:	89fb      	ldrh	r3, [r7, #14]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acda:	2300      	movs	r3, #0
 800acdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ace6:	2b40      	cmp	r3, #64	; 0x40
 800ace8:	d005      	beq.n	800acf6 <USBD_StdDevReq+0x26>
 800acea:	2b40      	cmp	r3, #64	; 0x40
 800acec:	d853      	bhi.n	800ad96 <USBD_StdDevReq+0xc6>
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00b      	beq.n	800ad0a <USBD_StdDevReq+0x3a>
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	d14f      	bne.n	800ad96 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	4798      	blx	r3
 800ad04:	4603      	mov	r3, r0
 800ad06:	73fb      	strb	r3, [r7, #15]
      break;
 800ad08:	e04a      	b.n	800ada0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	785b      	ldrb	r3, [r3, #1]
 800ad0e:	2b09      	cmp	r3, #9
 800ad10:	d83b      	bhi.n	800ad8a <USBD_StdDevReq+0xba>
 800ad12:	a201      	add	r2, pc, #4	; (adr r2, 800ad18 <USBD_StdDevReq+0x48>)
 800ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad18:	0800ad6d 	.word	0x0800ad6d
 800ad1c:	0800ad81 	.word	0x0800ad81
 800ad20:	0800ad8b 	.word	0x0800ad8b
 800ad24:	0800ad77 	.word	0x0800ad77
 800ad28:	0800ad8b 	.word	0x0800ad8b
 800ad2c:	0800ad4b 	.word	0x0800ad4b
 800ad30:	0800ad41 	.word	0x0800ad41
 800ad34:	0800ad8b 	.word	0x0800ad8b
 800ad38:	0800ad63 	.word	0x0800ad63
 800ad3c:	0800ad55 	.word	0x0800ad55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ad40:	6839      	ldr	r1, [r7, #0]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 f9de 	bl	800b104 <USBD_GetDescriptor>
          break;
 800ad48:	e024      	b.n	800ad94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ad4a:	6839      	ldr	r1, [r7, #0]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 fb6d 	bl	800b42c <USBD_SetAddress>
          break;
 800ad52:	e01f      	b.n	800ad94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 fbac 	bl	800b4b4 <USBD_SetConfig>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]
          break;
 800ad60:	e018      	b.n	800ad94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 fc4b 	bl	800b600 <USBD_GetConfig>
          break;
 800ad6a:	e013      	b.n	800ad94 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ad6c:	6839      	ldr	r1, [r7, #0]
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fc7c 	bl	800b66c <USBD_GetStatus>
          break;
 800ad74:	e00e      	b.n	800ad94 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fcab 	bl	800b6d4 <USBD_SetFeature>
          break;
 800ad7e:	e009      	b.n	800ad94 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ad80:	6839      	ldr	r1, [r7, #0]
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 fcba 	bl	800b6fc <USBD_ClrFeature>
          break;
 800ad88:	e004      	b.n	800ad94 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fd11 	bl	800b7b4 <USBD_CtlError>
          break;
 800ad92:	bf00      	nop
      }
      break;
 800ad94:	e004      	b.n	800ada0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ad96:	6839      	ldr	r1, [r7, #0]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 fd0b 	bl	800b7b4 <USBD_CtlError>
      break;
 800ad9e:	bf00      	nop
  }

  return ret;
 800ada0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3710      	adds	r7, #16
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop

0800adac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adb6:	2300      	movs	r3, #0
 800adb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adc2:	2b40      	cmp	r3, #64	; 0x40
 800adc4:	d005      	beq.n	800add2 <USBD_StdItfReq+0x26>
 800adc6:	2b40      	cmp	r3, #64	; 0x40
 800adc8:	d82f      	bhi.n	800ae2a <USBD_StdItfReq+0x7e>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <USBD_StdItfReq+0x26>
 800adce:	2b20      	cmp	r3, #32
 800add0:	d12b      	bne.n	800ae2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800add8:	b2db      	uxtb	r3, r3
 800adda:	3b01      	subs	r3, #1
 800addc:	2b02      	cmp	r3, #2
 800adde:	d81d      	bhi.n	800ae1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	889b      	ldrh	r3, [r3, #4]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d813      	bhi.n	800ae12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	4798      	blx	r3
 800adf8:	4603      	mov	r3, r0
 800adfa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	88db      	ldrh	r3, [r3, #6]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d110      	bne.n	800ae26 <USBD_StdItfReq+0x7a>
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10d      	bne.n	800ae26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f000 fd9d 	bl	800b94a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ae10:	e009      	b.n	800ae26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fccd 	bl	800b7b4 <USBD_CtlError>
          break;
 800ae1a:	e004      	b.n	800ae26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f000 fcc8 	bl	800b7b4 <USBD_CtlError>
          break;
 800ae24:	e000      	b.n	800ae28 <USBD_StdItfReq+0x7c>
          break;
 800ae26:	bf00      	nop
      }
      break;
 800ae28:	e004      	b.n	800ae34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 fcc1 	bl	800b7b4 <USBD_CtlError>
      break;
 800ae32:	bf00      	nop
  }

  return ret;
 800ae34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae3e:	b580      	push	{r7, lr}
 800ae40:	b084      	sub	sp, #16
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
 800ae46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	889b      	ldrh	r3, [r3, #4]
 800ae50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae5a:	2b40      	cmp	r3, #64	; 0x40
 800ae5c:	d007      	beq.n	800ae6e <USBD_StdEPReq+0x30>
 800ae5e:	2b40      	cmp	r3, #64	; 0x40
 800ae60:	f200 8145 	bhi.w	800b0ee <USBD_StdEPReq+0x2b0>
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00c      	beq.n	800ae82 <USBD_StdEPReq+0x44>
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	f040 8140 	bne.w	800b0ee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	4798      	blx	r3
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae80:	e13a      	b.n	800b0f8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	785b      	ldrb	r3, [r3, #1]
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d007      	beq.n	800ae9a <USBD_StdEPReq+0x5c>
 800ae8a:	2b03      	cmp	r3, #3
 800ae8c:	f300 8129 	bgt.w	800b0e2 <USBD_StdEPReq+0x2a4>
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d07f      	beq.n	800af94 <USBD_StdEPReq+0x156>
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d03c      	beq.n	800af12 <USBD_StdEPReq+0xd4>
 800ae98:	e123      	b.n	800b0e2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b02      	cmp	r3, #2
 800aea4:	d002      	beq.n	800aeac <USBD_StdEPReq+0x6e>
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d016      	beq.n	800aed8 <USBD_StdEPReq+0x9a>
 800aeaa:	e02c      	b.n	800af06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d00d      	beq.n	800aece <USBD_StdEPReq+0x90>
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b80      	cmp	r3, #128	; 0x80
 800aeb6:	d00a      	beq.n	800aece <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	4619      	mov	r1, r3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 f917 	bl	800c0f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aec2:	2180      	movs	r1, #128	; 0x80
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f001 f913 	bl	800c0f0 <USBD_LL_StallEP>
 800aeca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aecc:	e020      	b.n	800af10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aece:	6839      	ldr	r1, [r7, #0]
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 fc6f 	bl	800b7b4 <USBD_CtlError>
              break;
 800aed6:	e01b      	b.n	800af10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	885b      	ldrh	r3, [r3, #2]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10e      	bne.n	800aefe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aee0:	7bbb      	ldrb	r3, [r7, #14]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00b      	beq.n	800aefe <USBD_StdEPReq+0xc0>
 800aee6:	7bbb      	ldrb	r3, [r7, #14]
 800aee8:	2b80      	cmp	r3, #128	; 0x80
 800aeea:	d008      	beq.n	800aefe <USBD_StdEPReq+0xc0>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	88db      	ldrh	r3, [r3, #6]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aef4:	7bbb      	ldrb	r3, [r7, #14]
 800aef6:	4619      	mov	r1, r3
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f001 f8f9 	bl	800c0f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fd23 	bl	800b94a <USBD_CtlSendStatus>

              break;
 800af04:	e004      	b.n	800af10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800af06:	6839      	ldr	r1, [r7, #0]
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fc53 	bl	800b7b4 <USBD_CtlError>
              break;
 800af0e:	bf00      	nop
          }
          break;
 800af10:	e0ec      	b.n	800b0ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d002      	beq.n	800af24 <USBD_StdEPReq+0xe6>
 800af1e:	2b03      	cmp	r3, #3
 800af20:	d016      	beq.n	800af50 <USBD_StdEPReq+0x112>
 800af22:	e030      	b.n	800af86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00d      	beq.n	800af46 <USBD_StdEPReq+0x108>
 800af2a:	7bbb      	ldrb	r3, [r7, #14]
 800af2c:	2b80      	cmp	r3, #128	; 0x80
 800af2e:	d00a      	beq.n	800af46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f001 f8db 	bl	800c0f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800af3a:	2180      	movs	r1, #128	; 0x80
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 f8d7 	bl	800c0f0 <USBD_LL_StallEP>
 800af42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800af44:	e025      	b.n	800af92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800af46:	6839      	ldr	r1, [r7, #0]
 800af48:	6878      	ldr	r0, [r7, #4]
 800af4a:	f000 fc33 	bl	800b7b4 <USBD_CtlError>
              break;
 800af4e:	e020      	b.n	800af92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	885b      	ldrh	r3, [r3, #2]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d11b      	bne.n	800af90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d004      	beq.n	800af6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f001 f8e1 	bl	800c12e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fcec 	bl	800b94a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	4798      	blx	r3
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800af84:	e004      	b.n	800af90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800af86:	6839      	ldr	r1, [r7, #0]
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fc13 	bl	800b7b4 <USBD_CtlError>
              break;
 800af8e:	e000      	b.n	800af92 <USBD_StdEPReq+0x154>
              break;
 800af90:	bf00      	nop
          }
          break;
 800af92:	e0ab      	b.n	800b0ec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d002      	beq.n	800afa6 <USBD_StdEPReq+0x168>
 800afa0:	2b03      	cmp	r3, #3
 800afa2:	d032      	beq.n	800b00a <USBD_StdEPReq+0x1cc>
 800afa4:	e097      	b.n	800b0d6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afa6:	7bbb      	ldrb	r3, [r7, #14]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d007      	beq.n	800afbc <USBD_StdEPReq+0x17e>
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	2b80      	cmp	r3, #128	; 0x80
 800afb0:	d004      	beq.n	800afbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fbfd 	bl	800b7b4 <USBD_CtlError>
                break;
 800afba:	e091      	b.n	800b0e0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da0b      	bge.n	800afdc <USBD_StdEPReq+0x19e>
 800afc4:	7bbb      	ldrb	r3, [r7, #14]
 800afc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	3310      	adds	r3, #16
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	4413      	add	r3, r2
 800afd8:	3304      	adds	r3, #4
 800afda:	e00b      	b.n	800aff4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afe2:	4613      	mov	r3, r2
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800afee:	687a      	ldr	r2, [r7, #4]
 800aff0:	4413      	add	r3, r2
 800aff2:	3304      	adds	r3, #4
 800aff4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2202      	movs	r2, #2
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f000 fc47 	bl	800b896 <USBD_CtlSendData>
              break;
 800b008:	e06a      	b.n	800b0e0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b00a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	da11      	bge.n	800b036 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	f003 020f 	and.w	r2, r3, #15
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	4613      	mov	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	440b      	add	r3, r1
 800b024:	3324      	adds	r3, #36	; 0x24
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d117      	bne.n	800b05c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fbc0 	bl	800b7b4 <USBD_CtlError>
                  break;
 800b034:	e054      	b.n	800b0e0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b036:	7bbb      	ldrb	r3, [r7, #14]
 800b038:	f003 020f 	and.w	r2, r3, #15
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	009b      	lsls	r3, r3, #2
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	440b      	add	r3, r1
 800b048:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b04c:	881b      	ldrh	r3, [r3, #0]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d104      	bne.n	800b05c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fbad 	bl	800b7b4 <USBD_CtlError>
                  break;
 800b05a:	e041      	b.n	800b0e0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b05c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b060:	2b00      	cmp	r3, #0
 800b062:	da0b      	bge.n	800b07c <USBD_StdEPReq+0x23e>
 800b064:	7bbb      	ldrb	r3, [r7, #14]
 800b066:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b06a:	4613      	mov	r3, r2
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4413      	add	r3, r2
 800b070:	009b      	lsls	r3, r3, #2
 800b072:	3310      	adds	r3, #16
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	4413      	add	r3, r2
 800b078:	3304      	adds	r3, #4
 800b07a:	e00b      	b.n	800b094 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b07c:	7bbb      	ldrb	r3, [r7, #14]
 800b07e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	4413      	add	r3, r2
 800b092:	3304      	adds	r3, #4
 800b094:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b096:	7bbb      	ldrb	r3, [r7, #14]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <USBD_StdEPReq+0x264>
 800b09c:	7bbb      	ldrb	r3, [r7, #14]
 800b09e:	2b80      	cmp	r3, #128	; 0x80
 800b0a0:	d103      	bne.n	800b0aa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	e00e      	b.n	800b0c8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 f85c 	bl	800c16c <USBD_LL_IsStallEP>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2201      	movs	r2, #1
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	e002      	b.n	800b0c8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fbe1 	bl	800b896 <USBD_CtlSendData>
              break;
 800b0d4:	e004      	b.n	800b0e0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fb6b 	bl	800b7b4 <USBD_CtlError>
              break;
 800b0de:	bf00      	nop
          }
          break;
 800b0e0:	e004      	b.n	800b0ec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fb65 	bl	800b7b4 <USBD_CtlError>
          break;
 800b0ea:	bf00      	nop
      }
      break;
 800b0ec:	e004      	b.n	800b0f8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b0ee:	6839      	ldr	r1, [r7, #0]
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 fb5f 	bl	800b7b4 <USBD_CtlError>
      break;
 800b0f6:	bf00      	nop
  }

  return ret;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
	...

0800b104 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b10e:	2300      	movs	r3, #0
 800b110:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b116:	2300      	movs	r3, #0
 800b118:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	885b      	ldrh	r3, [r3, #2]
 800b11e:	0a1b      	lsrs	r3, r3, #8
 800b120:	b29b      	uxth	r3, r3
 800b122:	3b01      	subs	r3, #1
 800b124:	2b0e      	cmp	r3, #14
 800b126:	f200 8152 	bhi.w	800b3ce <USBD_GetDescriptor+0x2ca>
 800b12a:	a201      	add	r2, pc, #4	; (adr r2, 800b130 <USBD_GetDescriptor+0x2c>)
 800b12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b130:	0800b1a1 	.word	0x0800b1a1
 800b134:	0800b1b9 	.word	0x0800b1b9
 800b138:	0800b1f9 	.word	0x0800b1f9
 800b13c:	0800b3cf 	.word	0x0800b3cf
 800b140:	0800b3cf 	.word	0x0800b3cf
 800b144:	0800b36f 	.word	0x0800b36f
 800b148:	0800b39b 	.word	0x0800b39b
 800b14c:	0800b3cf 	.word	0x0800b3cf
 800b150:	0800b3cf 	.word	0x0800b3cf
 800b154:	0800b3cf 	.word	0x0800b3cf
 800b158:	0800b3cf 	.word	0x0800b3cf
 800b15c:	0800b3cf 	.word	0x0800b3cf
 800b160:	0800b3cf 	.word	0x0800b3cf
 800b164:	0800b3cf 	.word	0x0800b3cf
 800b168:	0800b16d 	.word	0x0800b16d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00b      	beq.n	800b190 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b17e:	69db      	ldr	r3, [r3, #28]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	7c12      	ldrb	r2, [r2, #16]
 800b184:	f107 0108 	add.w	r1, r7, #8
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
 800b18c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b18e:	e126      	b.n	800b3de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fb0e 	bl	800b7b4 <USBD_CtlError>
        err++;
 800b198:	7afb      	ldrb	r3, [r7, #11]
 800b19a:	3301      	adds	r3, #1
 800b19c:	72fb      	strb	r3, [r7, #11]
      break;
 800b19e:	e11e      	b.n	800b3de <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	7c12      	ldrb	r2, [r2, #16]
 800b1ac:	f107 0108 	add.w	r1, r7, #8
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	4798      	blx	r3
 800b1b4:	60f8      	str	r0, [r7, #12]
      break;
 800b1b6:	e112      	b.n	800b3de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	7c1b      	ldrb	r3, [r3, #16]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10d      	bne.n	800b1dc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c8:	f107 0208 	add.w	r2, r7, #8
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4798      	blx	r3
 800b1d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	2202      	movs	r2, #2
 800b1d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b1da:	e100      	b.n	800b3de <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	f107 0208 	add.w	r2, r7, #8
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	701a      	strb	r2, [r3, #0]
      break;
 800b1f6:	e0f2      	b.n	800b3de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	885b      	ldrh	r3, [r3, #2]
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b05      	cmp	r3, #5
 800b200:	f200 80ac 	bhi.w	800b35c <USBD_GetDescriptor+0x258>
 800b204:	a201      	add	r2, pc, #4	; (adr r2, 800b20c <USBD_GetDescriptor+0x108>)
 800b206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b20a:	bf00      	nop
 800b20c:	0800b225 	.word	0x0800b225
 800b210:	0800b259 	.word	0x0800b259
 800b214:	0800b28d 	.word	0x0800b28d
 800b218:	0800b2c1 	.word	0x0800b2c1
 800b21c:	0800b2f5 	.word	0x0800b2f5
 800b220:	0800b329 	.word	0x0800b329
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00b      	beq.n	800b248 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	7c12      	ldrb	r2, [r2, #16]
 800b23c:	f107 0108 	add.w	r1, r7, #8
 800b240:	4610      	mov	r0, r2
 800b242:	4798      	blx	r3
 800b244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b246:	e091      	b.n	800b36c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f000 fab2 	bl	800b7b4 <USBD_CtlError>
            err++;
 800b250:	7afb      	ldrb	r3, [r7, #11]
 800b252:	3301      	adds	r3, #1
 800b254:	72fb      	strb	r3, [r7, #11]
          break;
 800b256:	e089      	b.n	800b36c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b25e:	689b      	ldr	r3, [r3, #8]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d00b      	beq.n	800b27c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	7c12      	ldrb	r2, [r2, #16]
 800b270:	f107 0108 	add.w	r1, r7, #8
 800b274:	4610      	mov	r0, r2
 800b276:	4798      	blx	r3
 800b278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b27a:	e077      	b.n	800b36c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fa98 	bl	800b7b4 <USBD_CtlError>
            err++;
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	3301      	adds	r3, #1
 800b288:	72fb      	strb	r3, [r7, #11]
          break;
 800b28a:	e06f      	b.n	800b36c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d00b      	beq.n	800b2b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	7c12      	ldrb	r2, [r2, #16]
 800b2a4:	f107 0108 	add.w	r1, r7, #8
 800b2a8:	4610      	mov	r0, r2
 800b2aa:	4798      	blx	r3
 800b2ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2ae:	e05d      	b.n	800b36c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fa7e 	bl	800b7b4 <USBD_CtlError>
            err++;
 800b2b8:	7afb      	ldrb	r3, [r7, #11]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2be:	e055      	b.n	800b36c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d00b      	beq.n	800b2e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	7c12      	ldrb	r2, [r2, #16]
 800b2d8:	f107 0108 	add.w	r1, r7, #8
 800b2dc:	4610      	mov	r0, r2
 800b2de:	4798      	blx	r3
 800b2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2e2:	e043      	b.n	800b36c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2e4:	6839      	ldr	r1, [r7, #0]
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fa64 	bl	800b7b4 <USBD_CtlError>
            err++;
 800b2ec:	7afb      	ldrb	r3, [r7, #11]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b2f2:	e03b      	b.n	800b36c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00b      	beq.n	800b318 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	7c12      	ldrb	r2, [r2, #16]
 800b30c:	f107 0108 	add.w	r1, r7, #8
 800b310:	4610      	mov	r0, r2
 800b312:	4798      	blx	r3
 800b314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b316:	e029      	b.n	800b36c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b318:	6839      	ldr	r1, [r7, #0]
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 fa4a 	bl	800b7b4 <USBD_CtlError>
            err++;
 800b320:	7afb      	ldrb	r3, [r7, #11]
 800b322:	3301      	adds	r3, #1
 800b324:	72fb      	strb	r3, [r7, #11]
          break;
 800b326:	e021      	b.n	800b36c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d00b      	beq.n	800b34c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	7c12      	ldrb	r2, [r2, #16]
 800b340:	f107 0108 	add.w	r1, r7, #8
 800b344:	4610      	mov	r0, r2
 800b346:	4798      	blx	r3
 800b348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b34a:	e00f      	b.n	800b36c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b34c:	6839      	ldr	r1, [r7, #0]
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f000 fa30 	bl	800b7b4 <USBD_CtlError>
            err++;
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	3301      	adds	r3, #1
 800b358:	72fb      	strb	r3, [r7, #11]
          break;
 800b35a:	e007      	b.n	800b36c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b35c:	6839      	ldr	r1, [r7, #0]
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f000 fa28 	bl	800b7b4 <USBD_CtlError>
          err++;
 800b364:	7afb      	ldrb	r3, [r7, #11]
 800b366:	3301      	adds	r3, #1
 800b368:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b36a:	bf00      	nop
      }
      break;
 800b36c:	e037      	b.n	800b3de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7c1b      	ldrb	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d109      	bne.n	800b38a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b37e:	f107 0208 	add.w	r2, r7, #8
 800b382:	4610      	mov	r0, r2
 800b384:	4798      	blx	r3
 800b386:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b388:	e029      	b.n	800b3de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b38a:	6839      	ldr	r1, [r7, #0]
 800b38c:	6878      	ldr	r0, [r7, #4]
 800b38e:	f000 fa11 	bl	800b7b4 <USBD_CtlError>
        err++;
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	3301      	adds	r3, #1
 800b396:	72fb      	strb	r3, [r7, #11]
      break;
 800b398:	e021      	b.n	800b3de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	7c1b      	ldrb	r3, [r3, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10d      	bne.n	800b3be <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3aa:	f107 0208 	add.w	r2, r7, #8
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	4798      	blx	r3
 800b3b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	2207      	movs	r2, #7
 800b3ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3bc:	e00f      	b.n	800b3de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3be:	6839      	ldr	r1, [r7, #0]
 800b3c0:	6878      	ldr	r0, [r7, #4]
 800b3c2:	f000 f9f7 	bl	800b7b4 <USBD_CtlError>
        err++;
 800b3c6:	7afb      	ldrb	r3, [r7, #11]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	72fb      	strb	r3, [r7, #11]
      break;
 800b3cc:	e007      	b.n	800b3de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b3ce:	6839      	ldr	r1, [r7, #0]
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 f9ef 	bl	800b7b4 <USBD_CtlError>
      err++;
 800b3d6:	7afb      	ldrb	r3, [r7, #11]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	72fb      	strb	r3, [r7, #11]
      break;
 800b3dc:	bf00      	nop
  }

  if (err != 0U)
 800b3de:	7afb      	ldrb	r3, [r7, #11]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d11e      	bne.n	800b422 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	88db      	ldrh	r3, [r3, #6]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d016      	beq.n	800b41a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b3ec:	893b      	ldrh	r3, [r7, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00e      	beq.n	800b410 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	88da      	ldrh	r2, [r3, #6]
 800b3f6:	893b      	ldrh	r3, [r7, #8]
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	bf28      	it	cs
 800b3fc:	4613      	movcs	r3, r2
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b402:	893b      	ldrh	r3, [r7, #8]
 800b404:	461a      	mov	r2, r3
 800b406:	68f9      	ldr	r1, [r7, #12]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f000 fa44 	bl	800b896 <USBD_CtlSendData>
 800b40e:	e009      	b.n	800b424 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b410:	6839      	ldr	r1, [r7, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f9ce 	bl	800b7b4 <USBD_CtlError>
 800b418:	e004      	b.n	800b424 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fa95 	bl	800b94a <USBD_CtlSendStatus>
 800b420:	e000      	b.n	800b424 <USBD_GetDescriptor+0x320>
    return;
 800b422:	bf00      	nop
  }
}
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop

0800b42c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	889b      	ldrh	r3, [r3, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d131      	bne.n	800b4a2 <USBD_SetAddress+0x76>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	88db      	ldrh	r3, [r3, #6]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d12d      	bne.n	800b4a2 <USBD_SetAddress+0x76>
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	885b      	ldrh	r3, [r3, #2]
 800b44a:	2b7f      	cmp	r3, #127	; 0x7f
 800b44c:	d829      	bhi.n	800b4a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	885b      	ldrh	r3, [r3, #2]
 800b452:	b2db      	uxtb	r3, r3
 800b454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b458:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b03      	cmp	r3, #3
 800b464:	d104      	bne.n	800b470 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b466:	6839      	ldr	r1, [r7, #0]
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f9a3 	bl	800b7b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b46e:	e01d      	b.n	800b4ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	7bfa      	ldrb	r2, [r7, #15]
 800b474:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	4619      	mov	r1, r3
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 fea1 	bl	800c1c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fa61 	bl	800b94a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b488:	7bfb      	ldrb	r3, [r7, #15]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d004      	beq.n	800b498 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2202      	movs	r2, #2
 800b492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b496:	e009      	b.n	800b4ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a0:	e004      	b.n	800b4ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b4a2:	6839      	ldr	r1, [r7, #0]
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f985 	bl	800b7b4 <USBD_CtlError>
  }
}
 800b4aa:	bf00      	nop
 800b4ac:	bf00      	nop
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	885b      	ldrh	r3, [r3, #2]
 800b4c6:	b2da      	uxtb	r2, r3
 800b4c8:	4b4c      	ldr	r3, [pc, #304]	; (800b5fc <USBD_SetConfig+0x148>)
 800b4ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b4cc:	4b4b      	ldr	r3, [pc, #300]	; (800b5fc <USBD_SetConfig+0x148>)
 800b4ce:	781b      	ldrb	r3, [r3, #0]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d905      	bls.n	800b4e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f96c 	bl	800b7b4 <USBD_CtlError>
    return USBD_FAIL;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e088      	b.n	800b5f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d002      	beq.n	800b4f2 <USBD_SetConfig+0x3e>
 800b4ec:	2b03      	cmp	r3, #3
 800b4ee:	d025      	beq.n	800b53c <USBD_SetConfig+0x88>
 800b4f0:	e071      	b.n	800b5d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b4f2:	4b42      	ldr	r3, [pc, #264]	; (800b5fc <USBD_SetConfig+0x148>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d01c      	beq.n	800b534 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b4fa:	4b40      	ldr	r3, [pc, #256]	; (800b5fc <USBD_SetConfig+0x148>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	461a      	mov	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b504:	4b3d      	ldr	r3, [pc, #244]	; (800b5fc <USBD_SetConfig+0x148>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f7ff f992 	bl	800a834 <USBD_SetClassConfig>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b514:	7bfb      	ldrb	r3, [r7, #15]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b51a:	6839      	ldr	r1, [r7, #0]
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f949 	bl	800b7b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b522:	e065      	b.n	800b5f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fa10 	bl	800b94a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2203      	movs	r2, #3
 800b52e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b532:	e05d      	b.n	800b5f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fa08 	bl	800b94a <USBD_CtlSendStatus>
      break;
 800b53a:	e059      	b.n	800b5f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b53c:	4b2f      	ldr	r3, [pc, #188]	; (800b5fc <USBD_SetConfig+0x148>)
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d112      	bne.n	800b56a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b54c:	4b2b      	ldr	r3, [pc, #172]	; (800b5fc <USBD_SetConfig+0x148>)
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	461a      	mov	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b556:	4b29      	ldr	r3, [pc, #164]	; (800b5fc <USBD_SetConfig+0x148>)
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	4619      	mov	r1, r3
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f7ff f985 	bl	800a86c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f9f1 	bl	800b94a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b568:	e042      	b.n	800b5f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b56a:	4b24      	ldr	r3, [pc, #144]	; (800b5fc <USBD_SetConfig+0x148>)
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	461a      	mov	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	429a      	cmp	r2, r3
 800b576:	d02a      	beq.n	800b5ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff f973 	bl	800a86c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b586:	4b1d      	ldr	r3, [pc, #116]	; (800b5fc <USBD_SetConfig+0x148>)
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	461a      	mov	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b590:	4b1a      	ldr	r3, [pc, #104]	; (800b5fc <USBD_SetConfig+0x148>)
 800b592:	781b      	ldrb	r3, [r3, #0]
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7ff f94c 	bl	800a834 <USBD_SetClassConfig>
 800b59c:	4603      	mov	r3, r0
 800b59e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00f      	beq.n	800b5c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b5a6:	6839      	ldr	r1, [r7, #0]
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 f903 	bl	800b7b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	4619      	mov	r1, r3
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f7ff f958 	bl	800a86c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2202      	movs	r2, #2
 800b5c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b5c4:	e014      	b.n	800b5f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f9bf 	bl	800b94a <USBD_CtlSendStatus>
      break;
 800b5cc:	e010      	b.n	800b5f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f000 f9bb 	bl	800b94a <USBD_CtlSendStatus>
      break;
 800b5d4:	e00c      	b.n	800b5f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f8eb 	bl	800b7b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b5de:	4b07      	ldr	r3, [pc, #28]	; (800b5fc <USBD_SetConfig+0x148>)
 800b5e0:	781b      	ldrb	r3, [r3, #0]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7ff f941 	bl	800a86c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b5ea:	2303      	movs	r3, #3
 800b5ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b5ee:	bf00      	nop
  }

  return ret;
 800b5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	2000042c 	.word	0x2000042c

0800b600 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b082      	sub	sp, #8
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	88db      	ldrh	r3, [r3, #6]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d004      	beq.n	800b61c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f8cd 	bl	800b7b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b61a:	e023      	b.n	800b664 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b02      	cmp	r3, #2
 800b626:	dc02      	bgt.n	800b62e <USBD_GetConfig+0x2e>
 800b628:	2b00      	cmp	r3, #0
 800b62a:	dc03      	bgt.n	800b634 <USBD_GetConfig+0x34>
 800b62c:	e015      	b.n	800b65a <USBD_GetConfig+0x5a>
 800b62e:	2b03      	cmp	r3, #3
 800b630:	d00b      	beq.n	800b64a <USBD_GetConfig+0x4a>
 800b632:	e012      	b.n	800b65a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2200      	movs	r2, #0
 800b638:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	3308      	adds	r3, #8
 800b63e:	2201      	movs	r2, #1
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 f927 	bl	800b896 <USBD_CtlSendData>
        break;
 800b648:	e00c      	b.n	800b664 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	3304      	adds	r3, #4
 800b64e:	2201      	movs	r2, #1
 800b650:	4619      	mov	r1, r3
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f000 f91f 	bl	800b896 <USBD_CtlSendData>
        break;
 800b658:	e004      	b.n	800b664 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b65a:	6839      	ldr	r1, [r7, #0]
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 f8a9 	bl	800b7b4 <USBD_CtlError>
        break;
 800b662:	bf00      	nop
}
 800b664:	bf00      	nop
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	3b01      	subs	r3, #1
 800b680:	2b02      	cmp	r3, #2
 800b682:	d81e      	bhi.n	800b6c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	88db      	ldrh	r3, [r3, #6]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	d004      	beq.n	800b696 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f000 f890 	bl	800b7b4 <USBD_CtlError>
        break;
 800b694:	e01a      	b.n	800b6cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d005      	beq.n	800b6b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f043 0202 	orr.w	r2, r3, #2
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	330c      	adds	r3, #12
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f8eb 	bl	800b896 <USBD_CtlSendData>
      break;
 800b6c0:	e004      	b.n	800b6cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b6c2:	6839      	ldr	r1, [r7, #0]
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f000 f875 	bl	800b7b4 <USBD_CtlError>
      break;
 800b6ca:	bf00      	nop
  }
}
 800b6cc:	bf00      	nop
 800b6ce:	3708      	adds	r7, #8
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	885b      	ldrh	r3, [r3, #2]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d106      	bne.n	800b6f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f92b 	bl	800b94a <USBD_CtlSendStatus>
  }
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	3b01      	subs	r3, #1
 800b710:	2b02      	cmp	r3, #2
 800b712:	d80b      	bhi.n	800b72c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	885b      	ldrh	r3, [r3, #2]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d10c      	bne.n	800b736 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2200      	movs	r2, #0
 800b720:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f910 	bl	800b94a <USBD_CtlSendStatus>
      }
      break;
 800b72a:	e004      	b.n	800b736 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f000 f840 	bl	800b7b4 <USBD_CtlError>
      break;
 800b734:	e000      	b.n	800b738 <USBD_ClrFeature+0x3c>
      break;
 800b736:	bf00      	nop
  }
}
 800b738:	bf00      	nop
 800b73a:	3708      	adds	r7, #8
 800b73c:	46bd      	mov	sp, r7
 800b73e:	bd80      	pop	{r7, pc}

0800b740 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b084      	sub	sp, #16
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	781a      	ldrb	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	3301      	adds	r3, #1
 800b75a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	781a      	ldrb	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	3301      	adds	r3, #1
 800b768:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b76a:	68f8      	ldr	r0, [r7, #12]
 800b76c:	f7ff fa92 	bl	800ac94 <SWAPBYTE>
 800b770:	4603      	mov	r3, r0
 800b772:	461a      	mov	r2, r3
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3301      	adds	r3, #1
 800b782:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f7ff fa85 	bl	800ac94 <SWAPBYTE>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461a      	mov	r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3301      	adds	r3, #1
 800b796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	3301      	adds	r3, #1
 800b79c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	f7ff fa78 	bl	800ac94 <SWAPBYTE>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	80da      	strh	r2, [r3, #6]
}
 800b7ac:	bf00      	nop
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7be:	2180      	movs	r1, #128	; 0x80
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fc95 	bl	800c0f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7c6:	2100      	movs	r1, #0
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fc91 	bl	800c0f0 <USBD_LL_StallEP>
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b086      	sub	sp, #24
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	60f8      	str	r0, [r7, #12]
 800b7de:	60b9      	str	r1, [r7, #8]
 800b7e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d036      	beq.n	800b85a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b7f0:	6938      	ldr	r0, [r7, #16]
 800b7f2:	f000 f836 	bl	800b862 <USBD_GetLen>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	3301      	adds	r3, #1
 800b7fa:	b29b      	uxth	r3, r3
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b804:	7dfb      	ldrb	r3, [r7, #23]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	4413      	add	r3, r2
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	7812      	ldrb	r2, [r2, #0]
 800b80e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b810:	7dfb      	ldrb	r3, [r7, #23]
 800b812:	3301      	adds	r3, #1
 800b814:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b816:	7dfb      	ldrb	r3, [r7, #23]
 800b818:	68ba      	ldr	r2, [r7, #8]
 800b81a:	4413      	add	r3, r2
 800b81c:	2203      	movs	r2, #3
 800b81e:	701a      	strb	r2, [r3, #0]
  idx++;
 800b820:	7dfb      	ldrb	r3, [r7, #23]
 800b822:	3301      	adds	r3, #1
 800b824:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b826:	e013      	b.n	800b850 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b828:	7dfb      	ldrb	r3, [r7, #23]
 800b82a:	68ba      	ldr	r2, [r7, #8]
 800b82c:	4413      	add	r3, r2
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	7812      	ldrb	r2, [r2, #0]
 800b832:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	3301      	adds	r3, #1
 800b838:	613b      	str	r3, [r7, #16]
    idx++;
 800b83a:	7dfb      	ldrb	r3, [r7, #23]
 800b83c:	3301      	adds	r3, #1
 800b83e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b840:	7dfb      	ldrb	r3, [r7, #23]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	4413      	add	r3, r2
 800b846:	2200      	movs	r2, #0
 800b848:	701a      	strb	r2, [r3, #0]
    idx++;
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	3301      	adds	r3, #1
 800b84e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e7      	bne.n	800b828 <USBD_GetString+0x52>
 800b858:	e000      	b.n	800b85c <USBD_GetString+0x86>
    return;
 800b85a:	bf00      	nop
  }
}
 800b85c:	3718      	adds	r7, #24
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}

0800b862 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b862:	b480      	push	{r7}
 800b864:	b085      	sub	sp, #20
 800b866:	af00      	add	r7, sp, #0
 800b868:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b872:	e005      	b.n	800b880 <USBD_GetLen+0x1e>
  {
    len++;
 800b874:	7bfb      	ldrb	r3, [r7, #15]
 800b876:	3301      	adds	r3, #1
 800b878:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	3301      	adds	r3, #1
 800b87e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1f5      	bne.n	800b874 <USBD_GetLen+0x12>
  }

  return len;
 800b888:	7bfb      	ldrb	r3, [r7, #15]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3714      	adds	r7, #20
 800b88e:	46bd      	mov	sp, r7
 800b890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b894:	4770      	bx	lr

0800b896 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b896:	b580      	push	{r7, lr}
 800b898:	b084      	sub	sp, #16
 800b89a:	af00      	add	r7, sp, #0
 800b89c:	60f8      	str	r0, [r7, #12]
 800b89e:	60b9      	str	r1, [r7, #8]
 800b8a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	687a      	ldr	r2, [r7, #4]
 800b8b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 fca0 	bl	800c202 <USBD_LL_Transmit>

  return USBD_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b084      	sub	sp, #16
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	68ba      	ldr	r2, [r7, #8]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f000 fc8f 	bl	800c202 <USBD_LL_Transmit>

  return USBD_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	60f8      	str	r0, [r7, #12]
 800b8f6:	60b9      	str	r1, [r7, #8]
 800b8f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2203      	movs	r2, #3
 800b8fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	687a      	ldr	r2, [r7, #4]
 800b906:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	2100      	movs	r1, #0
 800b918:	68f8      	ldr	r0, [r7, #12]
 800b91a:	f000 fc93 	bl	800c244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	68ba      	ldr	r2, [r7, #8]
 800b938:	2100      	movs	r1, #0
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 fc82 	bl	800c244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2204      	movs	r2, #4
 800b956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b95a:	2300      	movs	r3, #0
 800b95c:	2200      	movs	r2, #0
 800b95e:	2100      	movs	r1, #0
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fc4e 	bl	800c202 <USBD_LL_Transmit>

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2205      	movs	r2, #5
 800b97c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b980:	2300      	movs	r3, #0
 800b982:	2200      	movs	r2, #0
 800b984:	2100      	movs	r1, #0
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fc5c 	bl	800c244 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3708      	adds	r7, #8
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b99c:	2200      	movs	r2, #0
 800b99e:	4912      	ldr	r1, [pc, #72]	; (800b9e8 <MX_USB_Device_Init+0x50>)
 800b9a0:	4812      	ldr	r0, [pc, #72]	; (800b9ec <MX_USB_Device_Init+0x54>)
 800b9a2:	f7fe fed9 	bl	800a758 <USBD_Init>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d001      	beq.n	800b9b0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b9ac:	f7f5 fe1f 	bl	80015ee <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b9b0:	490f      	ldr	r1, [pc, #60]	; (800b9f0 <MX_USB_Device_Init+0x58>)
 800b9b2:	480e      	ldr	r0, [pc, #56]	; (800b9ec <MX_USB_Device_Init+0x54>)
 800b9b4:	f7fe ff00 	bl	800a7b8 <USBD_RegisterClass>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b9be:	f7f5 fe16 	bl	80015ee <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b9c2:	490c      	ldr	r1, [pc, #48]	; (800b9f4 <MX_USB_Device_Init+0x5c>)
 800b9c4:	4809      	ldr	r0, [pc, #36]	; (800b9ec <MX_USB_Device_Init+0x54>)
 800b9c6:	f7fe fe21 	bl	800a60c <USBD_CDC_RegisterInterface>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d001      	beq.n	800b9d4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b9d0:	f7f5 fe0d 	bl	80015ee <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b9d4:	4805      	ldr	r0, [pc, #20]	; (800b9ec <MX_USB_Device_Init+0x54>)
 800b9d6:	f7fe ff16 	bl	800a806 <USBD_Start>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b9e0:	f7f5 fe05 	bl	80015ee <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b9e4:	bf00      	nop
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20000130 	.word	0x20000130
 800b9ec:	20000430 	.word	0x20000430
 800b9f0:	20000018 	.word	0x20000018
 800b9f4:	2000011c 	.word	0x2000011c

0800b9f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4905      	ldr	r1, [pc, #20]	; (800ba14 <CDC_Init_FS+0x1c>)
 800ba00:	4805      	ldr	r0, [pc, #20]	; (800ba18 <CDC_Init_FS+0x20>)
 800ba02:	f7fe fe18 	bl	800a636 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ba06:	4905      	ldr	r1, [pc, #20]	; (800ba1c <CDC_Init_FS+0x24>)
 800ba08:	4803      	ldr	r0, [pc, #12]	; (800ba18 <CDC_Init_FS+0x20>)
 800ba0a:	f7fe fe32 	bl	800a672 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ba0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	20000b00 	.word	0x20000b00
 800ba18:	20000430 	.word	0x20000430
 800ba1c:	20000700 	.word	0x20000700

0800ba20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ba20:	b480      	push	{r7}
 800ba22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ba24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	71fb      	strb	r3, [r7, #7]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ba40:	79fb      	ldrb	r3, [r7, #7]
 800ba42:	2b23      	cmp	r3, #35	; 0x23
 800ba44:	d84a      	bhi.n	800badc <CDC_Control_FS+0xac>
 800ba46:	a201      	add	r2, pc, #4	; (adr r2, 800ba4c <CDC_Control_FS+0x1c>)
 800ba48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4c:	0800badd 	.word	0x0800badd
 800ba50:	0800badd 	.word	0x0800badd
 800ba54:	0800badd 	.word	0x0800badd
 800ba58:	0800badd 	.word	0x0800badd
 800ba5c:	0800badd 	.word	0x0800badd
 800ba60:	0800badd 	.word	0x0800badd
 800ba64:	0800badd 	.word	0x0800badd
 800ba68:	0800badd 	.word	0x0800badd
 800ba6c:	0800badd 	.word	0x0800badd
 800ba70:	0800badd 	.word	0x0800badd
 800ba74:	0800badd 	.word	0x0800badd
 800ba78:	0800badd 	.word	0x0800badd
 800ba7c:	0800badd 	.word	0x0800badd
 800ba80:	0800badd 	.word	0x0800badd
 800ba84:	0800badd 	.word	0x0800badd
 800ba88:	0800badd 	.word	0x0800badd
 800ba8c:	0800badd 	.word	0x0800badd
 800ba90:	0800badd 	.word	0x0800badd
 800ba94:	0800badd 	.word	0x0800badd
 800ba98:	0800badd 	.word	0x0800badd
 800ba9c:	0800badd 	.word	0x0800badd
 800baa0:	0800badd 	.word	0x0800badd
 800baa4:	0800badd 	.word	0x0800badd
 800baa8:	0800badd 	.word	0x0800badd
 800baac:	0800badd 	.word	0x0800badd
 800bab0:	0800badd 	.word	0x0800badd
 800bab4:	0800badd 	.word	0x0800badd
 800bab8:	0800badd 	.word	0x0800badd
 800babc:	0800badd 	.word	0x0800badd
 800bac0:	0800badd 	.word	0x0800badd
 800bac4:	0800badd 	.word	0x0800badd
 800bac8:	0800badd 	.word	0x0800badd
 800bacc:	0800badd 	.word	0x0800badd
 800bad0:	0800badd 	.word	0x0800badd
 800bad4:	0800badd 	.word	0x0800badd
 800bad8:	0800badd 	.word	0x0800badd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800badc:	bf00      	nop
  }

  return (USBD_OK);
 800bade:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800baf6:	6879      	ldr	r1, [r7, #4]
 800baf8:	4805      	ldr	r0, [pc, #20]	; (800bb10 <CDC_Receive_FS+0x24>)
 800bafa:	f7fe fdba 	bl	800a672 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bafe:	4804      	ldr	r0, [pc, #16]	; (800bb10 <CDC_Receive_FS+0x24>)
 800bb00:	f7fe fe00 	bl	800a704 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bb04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	20000430 	.word	0x20000430

0800bb14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bb20:	2300      	movs	r3, #0
 800bb22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bb24:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <CDC_Transmit_FS+0x48>)
 800bb26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bb2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bb36:	2301      	movs	r3, #1
 800bb38:	e00b      	b.n	800bb52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bb3a:	887b      	ldrh	r3, [r7, #2]
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	6879      	ldr	r1, [r7, #4]
 800bb40:	4806      	ldr	r0, [pc, #24]	; (800bb5c <CDC_Transmit_FS+0x48>)
 800bb42:	f7fe fd78 	bl	800a636 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bb46:	4805      	ldr	r0, [pc, #20]	; (800bb5c <CDC_Transmit_FS+0x48>)
 800bb48:	f7fe fdac 	bl	800a6a4 <USBD_CDC_TransmitPacket>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20000430 	.word	0x20000430

0800bb60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b087      	sub	sp, #28
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bb72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	371c      	adds	r7, #28
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
	...

0800bb84 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	6039      	str	r1, [r7, #0]
 800bb8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2212      	movs	r2, #18
 800bb94:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bb96:	4b03      	ldr	r3, [pc, #12]	; (800bba4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	370c      	adds	r7, #12
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba2:	4770      	bx	lr
 800bba4:	20000150 	.word	0x20000150

0800bba8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	6039      	str	r1, [r7, #0]
 800bbb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	2204      	movs	r2, #4
 800bbb8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bbba:	4b03      	ldr	r3, [pc, #12]	; (800bbc8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	20000164 	.word	0x20000164

0800bbcc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	6039      	str	r1, [r7, #0]
 800bbd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d105      	bne.n	800bbea <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	4907      	ldr	r1, [pc, #28]	; (800bc00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bbe2:	4808      	ldr	r0, [pc, #32]	; (800bc04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bbe4:	f7ff fdf7 	bl	800b7d6 <USBD_GetString>
 800bbe8:	e004      	b.n	800bbf4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	4904      	ldr	r1, [pc, #16]	; (800bc00 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bbee:	4805      	ldr	r0, [pc, #20]	; (800bc04 <USBD_CDC_ProductStrDescriptor+0x38>)
 800bbf0:	f7ff fdf1 	bl	800b7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbf4:	4b02      	ldr	r3, [pc, #8]	; (800bc00 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop
 800bc00:	20000f00 	.word	0x20000f00
 800bc04:	0800cdac 	.word	0x0800cdac

0800bc08 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	6039      	str	r1, [r7, #0]
 800bc12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	4904      	ldr	r1, [pc, #16]	; (800bc28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800bc18:	4804      	ldr	r0, [pc, #16]	; (800bc2c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800bc1a:	f7ff fddc 	bl	800b7d6 <USBD_GetString>
  return USBD_StrDesc;
 800bc1e:	4b02      	ldr	r3, [pc, #8]	; (800bc28 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3708      	adds	r7, #8
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	20000f00 	.word	0x20000f00
 800bc2c:	0800cdc4 	.word	0x0800cdc4

0800bc30 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	6039      	str	r1, [r7, #0]
 800bc3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	221a      	movs	r2, #26
 800bc40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bc42:	f000 f843 	bl	800bccc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bc46:	4b02      	ldr	r3, [pc, #8]	; (800bc50 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	20000168 	.word	0x20000168

0800bc54 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	6039      	str	r1, [r7, #0]
 800bc5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bc60:	79fb      	ldrb	r3, [r7, #7]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d105      	bne.n	800bc72 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	4907      	ldr	r1, [pc, #28]	; (800bc88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bc6a:	4808      	ldr	r0, [pc, #32]	; (800bc8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bc6c:	f7ff fdb3 	bl	800b7d6 <USBD_GetString>
 800bc70:	e004      	b.n	800bc7c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800bc72:	683a      	ldr	r2, [r7, #0]
 800bc74:	4904      	ldr	r1, [pc, #16]	; (800bc88 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800bc76:	4805      	ldr	r0, [pc, #20]	; (800bc8c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800bc78:	f7ff fdad 	bl	800b7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc7c:	4b02      	ldr	r3, [pc, #8]	; (800bc88 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3708      	adds	r7, #8
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
 800bc86:	bf00      	nop
 800bc88:	20000f00 	.word	0x20000f00
 800bc8c:	0800cdd8 	.word	0x0800cdd8

0800bc90 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	6039      	str	r1, [r7, #0]
 800bc9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc9c:	79fb      	ldrb	r3, [r7, #7]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d105      	bne.n	800bcae <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bca2:	683a      	ldr	r2, [r7, #0]
 800bca4:	4907      	ldr	r1, [pc, #28]	; (800bcc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bca6:	4808      	ldr	r0, [pc, #32]	; (800bcc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bca8:	f7ff fd95 	bl	800b7d6 <USBD_GetString>
 800bcac:	e004      	b.n	800bcb8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	4904      	ldr	r1, [pc, #16]	; (800bcc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bcb2:	4805      	ldr	r0, [pc, #20]	; (800bcc8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bcb4:	f7ff fd8f 	bl	800b7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bcb8:	4b02      	ldr	r3, [pc, #8]	; (800bcc4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20000f00 	.word	0x20000f00
 800bcc8:	0800cde4 	.word	0x0800cde4

0800bccc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bcd2:	4b0f      	ldr	r3, [pc, #60]	; (800bd10 <Get_SerialNum+0x44>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bcd8:	4b0e      	ldr	r3, [pc, #56]	; (800bd14 <Get_SerialNum+0x48>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bcde:	4b0e      	ldr	r3, [pc, #56]	; (800bd18 <Get_SerialNum+0x4c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bce4:	68fa      	ldr	r2, [r7, #12]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4413      	add	r3, r2
 800bcea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d009      	beq.n	800bd06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bcf2:	2208      	movs	r2, #8
 800bcf4:	4909      	ldr	r1, [pc, #36]	; (800bd1c <Get_SerialNum+0x50>)
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 f814 	bl	800bd24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcfc:	2204      	movs	r2, #4
 800bcfe:	4908      	ldr	r1, [pc, #32]	; (800bd20 <Get_SerialNum+0x54>)
 800bd00:	68b8      	ldr	r0, [r7, #8]
 800bd02:	f000 f80f 	bl	800bd24 <IntToUnicode>
  }
}
 800bd06:	bf00      	nop
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}
 800bd0e:	bf00      	nop
 800bd10:	1fff7590 	.word	0x1fff7590
 800bd14:	1fff7594 	.word	0x1fff7594
 800bd18:	1fff7598 	.word	0x1fff7598
 800bd1c:	2000016a 	.word	0x2000016a
 800bd20:	2000017a 	.word	0x2000017a

0800bd24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	60f8      	str	r0, [r7, #12]
 800bd2c:	60b9      	str	r1, [r7, #8]
 800bd2e:	4613      	mov	r3, r2
 800bd30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bd32:	2300      	movs	r3, #0
 800bd34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bd36:	2300      	movs	r3, #0
 800bd38:	75fb      	strb	r3, [r7, #23]
 800bd3a:	e027      	b.n	800bd8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	0f1b      	lsrs	r3, r3, #28
 800bd40:	2b09      	cmp	r3, #9
 800bd42:	d80b      	bhi.n	800bd5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	0f1b      	lsrs	r3, r3, #28
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	7dfb      	ldrb	r3, [r7, #23]
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	4619      	mov	r1, r3
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	440b      	add	r3, r1
 800bd54:	3230      	adds	r2, #48	; 0x30
 800bd56:	b2d2      	uxtb	r2, r2
 800bd58:	701a      	strb	r2, [r3, #0]
 800bd5a:	e00a      	b.n	800bd72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	0f1b      	lsrs	r3, r3, #28
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	005b      	lsls	r3, r3, #1
 800bd66:	4619      	mov	r1, r3
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	440b      	add	r3, r1
 800bd6c:	3237      	adds	r2, #55	; 0x37
 800bd6e:	b2d2      	uxtb	r2, r2
 800bd70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	011b      	lsls	r3, r3, #4
 800bd76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd78:	7dfb      	ldrb	r3, [r7, #23]
 800bd7a:	005b      	lsls	r3, r3, #1
 800bd7c:	3301      	adds	r3, #1
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	4413      	add	r3, r2
 800bd82:	2200      	movs	r2, #0
 800bd84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	3301      	adds	r3, #1
 800bd8a:	75fb      	strb	r3, [r7, #23]
 800bd8c:	7dfa      	ldrb	r2, [r7, #23]
 800bd8e:	79fb      	ldrb	r3, [r7, #7]
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d3d3      	bcc.n	800bd3c <IntToUnicode+0x18>
  }
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop
 800bd98:	371c      	adds	r7, #28
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
	...

0800bda4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b094      	sub	sp, #80	; 0x50
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bdac:	f107 030c 	add.w	r3, r7, #12
 800bdb0:	2244      	movs	r2, #68	; 0x44
 800bdb2:	2100      	movs	r1, #0
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f000 fb2d 	bl	800c414 <memset>
  if(pcdHandle->Instance==USB)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a15      	ldr	r2, [pc, #84]	; (800be14 <HAL_PCD_MspInit+0x70>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d123      	bne.n	800be0c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bdc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdc8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800bdca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdce:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bdd0:	f107 030c 	add.w	r3, r7, #12
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f7fa fd5f 	bl	8006898 <HAL_RCCEx_PeriphCLKConfig>
 800bdda:	4603      	mov	r3, r0
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d001      	beq.n	800bde4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800bde0:	f7f5 fc05 	bl	80015ee <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bde4:	4b0c      	ldr	r3, [pc, #48]	; (800be18 <HAL_PCD_MspInit+0x74>)
 800bde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bde8:	4a0b      	ldr	r2, [pc, #44]	; (800be18 <HAL_PCD_MspInit+0x74>)
 800bdea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bdee:	6593      	str	r3, [r2, #88]	; 0x58
 800bdf0:	4b09      	ldr	r3, [pc, #36]	; (800be18 <HAL_PCD_MspInit+0x74>)
 800bdf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bdf8:	60bb      	str	r3, [r7, #8]
 800bdfa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	2100      	movs	r1, #0
 800be00:	2014      	movs	r0, #20
 800be02:	f7f7 f826 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800be06:	2014      	movs	r0, #20
 800be08:	f7f7 f83d 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800be0c:	bf00      	nop
 800be0e:	3750      	adds	r7, #80	; 0x50
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	40005c00 	.word	0x40005c00
 800be18:	40021000 	.word	0x40021000

0800be1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800be30:	4619      	mov	r1, r3
 800be32:	4610      	mov	r0, r2
 800be34:	f7fe fd32 	bl	800a89c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800be38:	bf00      	nop
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	460b      	mov	r3, r1
 800be4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800be52:	78fa      	ldrb	r2, [r7, #3]
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	00db      	lsls	r3, r3, #3
 800be5e:	440b      	add	r3, r1
 800be60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be64:	681a      	ldr	r2, [r3, #0]
 800be66:	78fb      	ldrb	r3, [r7, #3]
 800be68:	4619      	mov	r1, r3
 800be6a:	f7fe fd6c 	bl	800a946 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800be6e:	bf00      	nop
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}

0800be76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be76:	b580      	push	{r7, lr}
 800be78:	b082      	sub	sp, #8
 800be7a:	af00      	add	r7, sp, #0
 800be7c:	6078      	str	r0, [r7, #4]
 800be7e:	460b      	mov	r3, r1
 800be80:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800be88:	78fa      	ldrb	r2, [r7, #3]
 800be8a:	6879      	ldr	r1, [r7, #4]
 800be8c:	4613      	mov	r3, r2
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	4413      	add	r3, r2
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	440b      	add	r3, r1
 800be96:	3324      	adds	r3, #36	; 0x24
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	78fb      	ldrb	r3, [r7, #3]
 800be9c:	4619      	mov	r1, r3
 800be9e:	f7fe fdb5 	bl	800aa0c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bea2:	bf00      	nop
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b082      	sub	sp, #8
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fe fec9 	bl	800ac50 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bebe:	bf00      	nop
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b084      	sub	sp, #16
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bece:	2301      	movs	r3, #1
 800bed0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	795b      	ldrb	r3, [r3, #5]
 800bed6:	2b02      	cmp	r3, #2
 800bed8:	d001      	beq.n	800bede <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800beda:	f7f5 fb88 	bl	80015ee <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bee4:	7bfa      	ldrb	r2, [r7, #15]
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f7fe fe73 	bl	800abd4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bef4:	4618      	mov	r0, r3
 800bef6:	f7fe fe1f 	bl	800ab38 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800befa:	bf00      	nop
 800befc:	3710      	adds	r7, #16
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
	...

0800bf04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fe6e 	bl	800abf4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	7a5b      	ldrb	r3, [r3, #9]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d005      	beq.n	800bf2c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf20:	4b04      	ldr	r3, [pc, #16]	; (800bf34 <HAL_PCD_SuspendCallback+0x30>)
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	4a03      	ldr	r2, [pc, #12]	; (800bf34 <HAL_PCD_SuspendCallback+0x30>)
 800bf26:	f043 0306 	orr.w	r3, r3, #6
 800bf2a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bf2c:	bf00      	nop
 800bf2e:	3708      	adds	r7, #8
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	e000ed00 	.word	0xe000ed00

0800bf38 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	7a5b      	ldrb	r3, [r3, #9]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d007      	beq.n	800bf58 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf48:	4b08      	ldr	r3, [pc, #32]	; (800bf6c <HAL_PCD_ResumeCallback+0x34>)
 800bf4a:	691b      	ldr	r3, [r3, #16]
 800bf4c:	4a07      	ldr	r2, [pc, #28]	; (800bf6c <HAL_PCD_ResumeCallback+0x34>)
 800bf4e:	f023 0306 	bic.w	r3, r3, #6
 800bf52:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bf54:	f000 f9f8 	bl	800c348 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf5e:	4618      	mov	r0, r3
 800bf60:	f7fe fe5e 	bl	800ac20 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bf64:	bf00      	nop
 800bf66:	3708      	adds	r7, #8
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	e000ed00 	.word	0xe000ed00

0800bf70 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bf78:	4a2b      	ldr	r2, [pc, #172]	; (800c028 <USBD_LL_Init+0xb8>)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a29      	ldr	r2, [pc, #164]	; (800c028 <USBD_LL_Init+0xb8>)
 800bf84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bf88:	4b27      	ldr	r3, [pc, #156]	; (800c028 <USBD_LL_Init+0xb8>)
 800bf8a:	4a28      	ldr	r2, [pc, #160]	; (800c02c <USBD_LL_Init+0xbc>)
 800bf8c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bf8e:	4b26      	ldr	r3, [pc, #152]	; (800c028 <USBD_LL_Init+0xb8>)
 800bf90:	2208      	movs	r2, #8
 800bf92:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bf94:	4b24      	ldr	r3, [pc, #144]	; (800c028 <USBD_LL_Init+0xb8>)
 800bf96:	2202      	movs	r2, #2
 800bf98:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bf9a:	4b23      	ldr	r3, [pc, #140]	; (800c028 <USBD_LL_Init+0xb8>)
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bfa0:	4b21      	ldr	r3, [pc, #132]	; (800c028 <USBD_LL_Init+0xb8>)
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bfa6:	4b20      	ldr	r3, [pc, #128]	; (800c028 <USBD_LL_Init+0xb8>)
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bfac:	4b1e      	ldr	r3, [pc, #120]	; (800c028 <USBD_LL_Init+0xb8>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bfb2:	4b1d      	ldr	r3, [pc, #116]	; (800c028 <USBD_LL_Init+0xb8>)
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bfb8:	481b      	ldr	r0, [pc, #108]	; (800c028 <USBD_LL_Init+0xb8>)
 800bfba:	f7f8 f991 	bl	80042e0 <HAL_PCD_Init>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d001      	beq.n	800bfc8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bfc4:	f7f5 fb13 	bl	80015ee <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfce:	2318      	movs	r3, #24
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	2100      	movs	r1, #0
 800bfd4:	f7f9 fe4d 	bl	8005c72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfde:	2358      	movs	r3, #88	; 0x58
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	2180      	movs	r1, #128	; 0x80
 800bfe4:	f7f9 fe45 	bl	8005c72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bfee:	23c0      	movs	r3, #192	; 0xc0
 800bff0:	2200      	movs	r2, #0
 800bff2:	2181      	movs	r1, #129	; 0x81
 800bff4:	f7f9 fe3d 	bl	8005c72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bffe:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c002:	2200      	movs	r2, #0
 800c004:	2101      	movs	r1, #1
 800c006:	f7f9 fe34 	bl	8005c72 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c010:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c014:	2200      	movs	r2, #0
 800c016:	2182      	movs	r1, #130	; 0x82
 800c018:	f7f9 fe2b 	bl	8005c72 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c01c:	2300      	movs	r3, #0
}
 800c01e:	4618      	mov	r0, r3
 800c020:	3708      	adds	r7, #8
 800c022:	46bd      	mov	sp, r7
 800c024:	bd80      	pop	{r7, pc}
 800c026:	bf00      	nop
 800c028:	20001100 	.word	0x20001100
 800c02c:	40005c00 	.word	0x40005c00

0800c030 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c046:	4618      	mov	r0, r3
 800c048:	f7f8 fa18 	bl	800447c <HAL_PCD_Start>
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 f97e 	bl	800c354 <USBD_Get_USB_Status>
 800c058:	4603      	mov	r3, r0
 800c05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3710      	adds	r7, #16
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}

0800c066 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c066:	b580      	push	{r7, lr}
 800c068:	b084      	sub	sp, #16
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	4608      	mov	r0, r1
 800c070:	4611      	mov	r1, r2
 800c072:	461a      	mov	r2, r3
 800c074:	4603      	mov	r3, r0
 800c076:	70fb      	strb	r3, [r7, #3]
 800c078:	460b      	mov	r3, r1
 800c07a:	70bb      	strb	r3, [r7, #2]
 800c07c:	4613      	mov	r3, r2
 800c07e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c080:	2300      	movs	r3, #0
 800c082:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c08e:	78bb      	ldrb	r3, [r7, #2]
 800c090:	883a      	ldrh	r2, [r7, #0]
 800c092:	78f9      	ldrb	r1, [r7, #3]
 800c094:	f7f8 fb5f 	bl	8004756 <HAL_PCD_EP_Open>
 800c098:	4603      	mov	r3, r0
 800c09a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f000 f958 	bl	800c354 <USBD_Get_USB_Status>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b084      	sub	sp, #16
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c0cc:	78fa      	ldrb	r2, [r7, #3]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7f8 fb9f 	bl	8004814 <HAL_PCD_EP_Close>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f000 f939 	bl	800c354 <USBD_Get_USB_Status>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3710      	adds	r7, #16
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b084      	sub	sp, #16
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c10a:	78fa      	ldrb	r2, [r7, #3]
 800c10c:	4611      	mov	r1, r2
 800c10e:	4618      	mov	r0, r3
 800c110:	f7f8 fc48 	bl	80049a4 <HAL_PCD_EP_SetStall>
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f91a 	bl	800c354 <USBD_Get_USB_Status>
 800c120:	4603      	mov	r3, r0
 800c122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c124:	7bbb      	ldrb	r3, [r7, #14]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	4611      	mov	r1, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7f8 fc7b 	bl	8004a48 <HAL_PCD_EP_ClrStall>
 800c152:	4603      	mov	r3, r0
 800c154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 f8fb 	bl	800c354 <USBD_Get_USB_Status>
 800c15e:	4603      	mov	r3, r0
 800c160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c162:	7bbb      	ldrb	r3, [r7, #14]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c17e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c184:	2b00      	cmp	r3, #0
 800c186:	da0b      	bge.n	800c1a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c18e:	68f9      	ldr	r1, [r7, #12]
 800c190:	4613      	mov	r3, r2
 800c192:	009b      	lsls	r3, r3, #2
 800c194:	4413      	add	r3, r2
 800c196:	00db      	lsls	r3, r3, #3
 800c198:	440b      	add	r3, r1
 800c19a:	3312      	adds	r3, #18
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	e00b      	b.n	800c1b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c1a0:	78fb      	ldrb	r3, [r7, #3]
 800c1a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c1a6:	68f9      	ldr	r1, [r7, #12]
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	440b      	add	r3, r1
 800c1b2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c1b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3714      	adds	r7, #20
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c2:	4770      	bx	lr

0800c1c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	460b      	mov	r3, r1
 800c1ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c1de:	78fa      	ldrb	r2, [r7, #3]
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f8 fa93 	bl	800470e <HAL_PCD_SetAddress>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f000 f8b0 	bl	800c354 <USBD_Get_USB_Status>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b086      	sub	sp, #24
 800c206:	af00      	add	r7, sp, #0
 800c208:	60f8      	str	r0, [r7, #12]
 800c20a:	607a      	str	r2, [r7, #4]
 800c20c:	603b      	str	r3, [r7, #0]
 800c20e:	460b      	mov	r3, r1
 800c210:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c220:	7af9      	ldrb	r1, [r7, #11]
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	f7f8 fb86 	bl	8004936 <HAL_PCD_EP_Transmit>
 800c22a:	4603      	mov	r3, r0
 800c22c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c22e:	7dfb      	ldrb	r3, [r7, #23]
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f88f 	bl	800c354 <USBD_Get_USB_Status>
 800c236:	4603      	mov	r3, r0
 800c238:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c23a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3718      	adds	r7, #24
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	607a      	str	r2, [r7, #4]
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	460b      	mov	r3, r1
 800c252:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c254:	2300      	movs	r3, #0
 800c256:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c258:	2300      	movs	r3, #0
 800c25a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c262:	7af9      	ldrb	r1, [r7, #11]
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	f7f8 fb1c 	bl	80048a4 <HAL_PCD_EP_Receive>
 800c26c:	4603      	mov	r3, r0
 800c26e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c270:	7dfb      	ldrb	r3, [r7, #23]
 800c272:	4618      	mov	r0, r3
 800c274:	f000 f86e 	bl	800c354 <USBD_Get_USB_Status>
 800c278:	4603      	mov	r3, r0
 800c27a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c27c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c27e:	4618      	mov	r0, r3
 800c280:	3718      	adds	r7, #24
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
 800c28e:	460b      	mov	r3, r1
 800c290:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c298:	78fa      	ldrb	r2, [r7, #3]
 800c29a:	4611      	mov	r1, r2
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7f8 fb32 	bl	8004906 <HAL_PCD_EP_GetRxCount>
 800c2a2:	4603      	mov	r3, r0
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c2b8:	78fb      	ldrb	r3, [r7, #3]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <HAL_PCDEx_LPM_Callback+0x18>
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d013      	beq.n	800c2ea <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c2c2:	e023      	b.n	800c30c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7a5b      	ldrb	r3, [r3, #9]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c2cc:	f000 f83c 	bl	800c348 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2d0:	4b10      	ldr	r3, [pc, #64]	; (800c314 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	4a0f      	ldr	r2, [pc, #60]	; (800c314 <HAL_PCDEx_LPM_Callback+0x68>)
 800c2d6:	f023 0306 	bic.w	r3, r3, #6
 800c2da:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fe fc9c 	bl	800ac20 <USBD_LL_Resume>
    break;
 800c2e8:	e010      	b.n	800c30c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f7fe fc7f 	bl	800abf4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7a5b      	ldrb	r3, [r3, #9]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d005      	beq.n	800c30a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c2fe:	4b05      	ldr	r3, [pc, #20]	; (800c314 <HAL_PCDEx_LPM_Callback+0x68>)
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	4a04      	ldr	r2, [pc, #16]	; (800c314 <HAL_PCDEx_LPM_Callback+0x68>)
 800c304:	f043 0306 	orr.w	r3, r3, #6
 800c308:	6113      	str	r3, [r2, #16]
    break;
 800c30a:	bf00      	nop
}
 800c30c:	bf00      	nop
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	e000ed00 	.word	0xe000ed00

0800c318 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c318:	b480      	push	{r7}
 800c31a:	b083      	sub	sp, #12
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c320:	4b03      	ldr	r3, [pc, #12]	; (800c330 <USBD_static_malloc+0x18>)
}
 800c322:	4618      	mov	r0, r3
 800c324:	370c      	adds	r7, #12
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	200013dc 	.word	0x200013dc

0800c334 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]

}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c34c:	f7f5 f900 	bl	8001550 <SystemClock_Config>
}
 800c350:	bf00      	nop
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	4603      	mov	r3, r0
 800c35c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c35e:	2300      	movs	r3, #0
 800c360:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	2b03      	cmp	r3, #3
 800c366:	d817      	bhi.n	800c398 <USBD_Get_USB_Status+0x44>
 800c368:	a201      	add	r2, pc, #4	; (adr r2, 800c370 <USBD_Get_USB_Status+0x1c>)
 800c36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36e:	bf00      	nop
 800c370:	0800c381 	.word	0x0800c381
 800c374:	0800c387 	.word	0x0800c387
 800c378:	0800c38d 	.word	0x0800c38d
 800c37c:	0800c393 	.word	0x0800c393
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	73fb      	strb	r3, [r7, #15]
    break;
 800c384:	e00b      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c386:	2303      	movs	r3, #3
 800c388:	73fb      	strb	r3, [r7, #15]
    break;
 800c38a:	e008      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c38c:	2301      	movs	r3, #1
 800c38e:	73fb      	strb	r3, [r7, #15]
    break;
 800c390:	e005      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c392:	2303      	movs	r3, #3
 800c394:	73fb      	strb	r3, [r7, #15]
    break;
 800c396:	e002      	b.n	800c39e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c398:	2303      	movs	r3, #3
 800c39a:	73fb      	strb	r3, [r7, #15]
    break;
 800c39c:	bf00      	nop
  }
  return usb_status;
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3714      	adds	r7, #20
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3aa:	4770      	bx	lr

0800c3ac <sniprintf>:
 800c3ac:	b40c      	push	{r2, r3}
 800c3ae:	b530      	push	{r4, r5, lr}
 800c3b0:	4b17      	ldr	r3, [pc, #92]	; (800c410 <sniprintf+0x64>)
 800c3b2:	1e0c      	subs	r4, r1, #0
 800c3b4:	681d      	ldr	r5, [r3, #0]
 800c3b6:	b09d      	sub	sp, #116	; 0x74
 800c3b8:	da08      	bge.n	800c3cc <sniprintf+0x20>
 800c3ba:	238b      	movs	r3, #139	; 0x8b
 800c3bc:	602b      	str	r3, [r5, #0]
 800c3be:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c2:	b01d      	add	sp, #116	; 0x74
 800c3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3c8:	b002      	add	sp, #8
 800c3ca:	4770      	bx	lr
 800c3cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c3d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c3d4:	bf14      	ite	ne
 800c3d6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c3da:	4623      	moveq	r3, r4
 800c3dc:	9304      	str	r3, [sp, #16]
 800c3de:	9307      	str	r3, [sp, #28]
 800c3e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3e4:	9002      	str	r0, [sp, #8]
 800c3e6:	9006      	str	r0, [sp, #24]
 800c3e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c3ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c3ee:	ab21      	add	r3, sp, #132	; 0x84
 800c3f0:	a902      	add	r1, sp, #8
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	9301      	str	r3, [sp, #4]
 800c3f6:	f000 f993 	bl	800c720 <_svfiprintf_r>
 800c3fa:	1c43      	adds	r3, r0, #1
 800c3fc:	bfbc      	itt	lt
 800c3fe:	238b      	movlt	r3, #139	; 0x8b
 800c400:	602b      	strlt	r3, [r5, #0]
 800c402:	2c00      	cmp	r4, #0
 800c404:	d0dd      	beq.n	800c3c2 <sniprintf+0x16>
 800c406:	9b02      	ldr	r3, [sp, #8]
 800c408:	2200      	movs	r2, #0
 800c40a:	701a      	strb	r2, [r3, #0]
 800c40c:	e7d9      	b.n	800c3c2 <sniprintf+0x16>
 800c40e:	bf00      	nop
 800c410:	200001d0 	.word	0x200001d0

0800c414 <memset>:
 800c414:	4402      	add	r2, r0
 800c416:	4603      	mov	r3, r0
 800c418:	4293      	cmp	r3, r2
 800c41a:	d100      	bne.n	800c41e <memset+0xa>
 800c41c:	4770      	bx	lr
 800c41e:	f803 1b01 	strb.w	r1, [r3], #1
 800c422:	e7f9      	b.n	800c418 <memset+0x4>

0800c424 <__errno>:
 800c424:	4b01      	ldr	r3, [pc, #4]	; (800c42c <__errno+0x8>)
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	200001d0 	.word	0x200001d0

0800c430 <__libc_init_array>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4d0d      	ldr	r5, [pc, #52]	; (800c468 <__libc_init_array+0x38>)
 800c434:	4c0d      	ldr	r4, [pc, #52]	; (800c46c <__libc_init_array+0x3c>)
 800c436:	1b64      	subs	r4, r4, r5
 800c438:	10a4      	asrs	r4, r4, #2
 800c43a:	2600      	movs	r6, #0
 800c43c:	42a6      	cmp	r6, r4
 800c43e:	d109      	bne.n	800c454 <__libc_init_array+0x24>
 800c440:	4d0b      	ldr	r5, [pc, #44]	; (800c470 <__libc_init_array+0x40>)
 800c442:	4c0c      	ldr	r4, [pc, #48]	; (800c474 <__libc_init_array+0x44>)
 800c444:	f000 fc6a 	bl	800cd1c <_init>
 800c448:	1b64      	subs	r4, r4, r5
 800c44a:	10a4      	asrs	r4, r4, #2
 800c44c:	2600      	movs	r6, #0
 800c44e:	42a6      	cmp	r6, r4
 800c450:	d105      	bne.n	800c45e <__libc_init_array+0x2e>
 800c452:	bd70      	pop	{r4, r5, r6, pc}
 800c454:	f855 3b04 	ldr.w	r3, [r5], #4
 800c458:	4798      	blx	r3
 800c45a:	3601      	adds	r6, #1
 800c45c:	e7ee      	b.n	800c43c <__libc_init_array+0xc>
 800c45e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c462:	4798      	blx	r3
 800c464:	3601      	adds	r6, #1
 800c466:	e7f2      	b.n	800c44e <__libc_init_array+0x1e>
 800c468:	0800ce38 	.word	0x0800ce38
 800c46c:	0800ce38 	.word	0x0800ce38
 800c470:	0800ce38 	.word	0x0800ce38
 800c474:	0800ce3c 	.word	0x0800ce3c

0800c478 <__retarget_lock_acquire_recursive>:
 800c478:	4770      	bx	lr

0800c47a <__retarget_lock_release_recursive>:
 800c47a:	4770      	bx	lr

0800c47c <_free_r>:
 800c47c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c47e:	2900      	cmp	r1, #0
 800c480:	d044      	beq.n	800c50c <_free_r+0x90>
 800c482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c486:	9001      	str	r0, [sp, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	f1a1 0404 	sub.w	r4, r1, #4
 800c48e:	bfb8      	it	lt
 800c490:	18e4      	addlt	r4, r4, r3
 800c492:	f000 f8df 	bl	800c654 <__malloc_lock>
 800c496:	4a1e      	ldr	r2, [pc, #120]	; (800c510 <_free_r+0x94>)
 800c498:	9801      	ldr	r0, [sp, #4]
 800c49a:	6813      	ldr	r3, [r2, #0]
 800c49c:	b933      	cbnz	r3, 800c4ac <_free_r+0x30>
 800c49e:	6063      	str	r3, [r4, #4]
 800c4a0:	6014      	str	r4, [r2, #0]
 800c4a2:	b003      	add	sp, #12
 800c4a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4a8:	f000 b8da 	b.w	800c660 <__malloc_unlock>
 800c4ac:	42a3      	cmp	r3, r4
 800c4ae:	d908      	bls.n	800c4c2 <_free_r+0x46>
 800c4b0:	6825      	ldr	r5, [r4, #0]
 800c4b2:	1961      	adds	r1, r4, r5
 800c4b4:	428b      	cmp	r3, r1
 800c4b6:	bf01      	itttt	eq
 800c4b8:	6819      	ldreq	r1, [r3, #0]
 800c4ba:	685b      	ldreq	r3, [r3, #4]
 800c4bc:	1949      	addeq	r1, r1, r5
 800c4be:	6021      	streq	r1, [r4, #0]
 800c4c0:	e7ed      	b.n	800c49e <_free_r+0x22>
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	685b      	ldr	r3, [r3, #4]
 800c4c6:	b10b      	cbz	r3, 800c4cc <_free_r+0x50>
 800c4c8:	42a3      	cmp	r3, r4
 800c4ca:	d9fa      	bls.n	800c4c2 <_free_r+0x46>
 800c4cc:	6811      	ldr	r1, [r2, #0]
 800c4ce:	1855      	adds	r5, r2, r1
 800c4d0:	42a5      	cmp	r5, r4
 800c4d2:	d10b      	bne.n	800c4ec <_free_r+0x70>
 800c4d4:	6824      	ldr	r4, [r4, #0]
 800c4d6:	4421      	add	r1, r4
 800c4d8:	1854      	adds	r4, r2, r1
 800c4da:	42a3      	cmp	r3, r4
 800c4dc:	6011      	str	r1, [r2, #0]
 800c4de:	d1e0      	bne.n	800c4a2 <_free_r+0x26>
 800c4e0:	681c      	ldr	r4, [r3, #0]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	6053      	str	r3, [r2, #4]
 800c4e6:	440c      	add	r4, r1
 800c4e8:	6014      	str	r4, [r2, #0]
 800c4ea:	e7da      	b.n	800c4a2 <_free_r+0x26>
 800c4ec:	d902      	bls.n	800c4f4 <_free_r+0x78>
 800c4ee:	230c      	movs	r3, #12
 800c4f0:	6003      	str	r3, [r0, #0]
 800c4f2:	e7d6      	b.n	800c4a2 <_free_r+0x26>
 800c4f4:	6825      	ldr	r5, [r4, #0]
 800c4f6:	1961      	adds	r1, r4, r5
 800c4f8:	428b      	cmp	r3, r1
 800c4fa:	bf04      	itt	eq
 800c4fc:	6819      	ldreq	r1, [r3, #0]
 800c4fe:	685b      	ldreq	r3, [r3, #4]
 800c500:	6063      	str	r3, [r4, #4]
 800c502:	bf04      	itt	eq
 800c504:	1949      	addeq	r1, r1, r5
 800c506:	6021      	streq	r1, [r4, #0]
 800c508:	6054      	str	r4, [r2, #4]
 800c50a:	e7ca      	b.n	800c4a2 <_free_r+0x26>
 800c50c:	b003      	add	sp, #12
 800c50e:	bd30      	pop	{r4, r5, pc}
 800c510:	2000173c 	.word	0x2000173c

0800c514 <sbrk_aligned>:
 800c514:	b570      	push	{r4, r5, r6, lr}
 800c516:	4e0e      	ldr	r6, [pc, #56]	; (800c550 <sbrk_aligned+0x3c>)
 800c518:	460c      	mov	r4, r1
 800c51a:	6831      	ldr	r1, [r6, #0]
 800c51c:	4605      	mov	r5, r0
 800c51e:	b911      	cbnz	r1, 800c526 <sbrk_aligned+0x12>
 800c520:	f000 fba6 	bl	800cc70 <_sbrk_r>
 800c524:	6030      	str	r0, [r6, #0]
 800c526:	4621      	mov	r1, r4
 800c528:	4628      	mov	r0, r5
 800c52a:	f000 fba1 	bl	800cc70 <_sbrk_r>
 800c52e:	1c43      	adds	r3, r0, #1
 800c530:	d00a      	beq.n	800c548 <sbrk_aligned+0x34>
 800c532:	1cc4      	adds	r4, r0, #3
 800c534:	f024 0403 	bic.w	r4, r4, #3
 800c538:	42a0      	cmp	r0, r4
 800c53a:	d007      	beq.n	800c54c <sbrk_aligned+0x38>
 800c53c:	1a21      	subs	r1, r4, r0
 800c53e:	4628      	mov	r0, r5
 800c540:	f000 fb96 	bl	800cc70 <_sbrk_r>
 800c544:	3001      	adds	r0, #1
 800c546:	d101      	bne.n	800c54c <sbrk_aligned+0x38>
 800c548:	f04f 34ff 	mov.w	r4, #4294967295
 800c54c:	4620      	mov	r0, r4
 800c54e:	bd70      	pop	{r4, r5, r6, pc}
 800c550:	20001740 	.word	0x20001740

0800c554 <_malloc_r>:
 800c554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c558:	1ccd      	adds	r5, r1, #3
 800c55a:	f025 0503 	bic.w	r5, r5, #3
 800c55e:	3508      	adds	r5, #8
 800c560:	2d0c      	cmp	r5, #12
 800c562:	bf38      	it	cc
 800c564:	250c      	movcc	r5, #12
 800c566:	2d00      	cmp	r5, #0
 800c568:	4607      	mov	r7, r0
 800c56a:	db01      	blt.n	800c570 <_malloc_r+0x1c>
 800c56c:	42a9      	cmp	r1, r5
 800c56e:	d905      	bls.n	800c57c <_malloc_r+0x28>
 800c570:	230c      	movs	r3, #12
 800c572:	603b      	str	r3, [r7, #0]
 800c574:	2600      	movs	r6, #0
 800c576:	4630      	mov	r0, r6
 800c578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c57c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c650 <_malloc_r+0xfc>
 800c580:	f000 f868 	bl	800c654 <__malloc_lock>
 800c584:	f8d8 3000 	ldr.w	r3, [r8]
 800c588:	461c      	mov	r4, r3
 800c58a:	bb5c      	cbnz	r4, 800c5e4 <_malloc_r+0x90>
 800c58c:	4629      	mov	r1, r5
 800c58e:	4638      	mov	r0, r7
 800c590:	f7ff ffc0 	bl	800c514 <sbrk_aligned>
 800c594:	1c43      	adds	r3, r0, #1
 800c596:	4604      	mov	r4, r0
 800c598:	d155      	bne.n	800c646 <_malloc_r+0xf2>
 800c59a:	f8d8 4000 	ldr.w	r4, [r8]
 800c59e:	4626      	mov	r6, r4
 800c5a0:	2e00      	cmp	r6, #0
 800c5a2:	d145      	bne.n	800c630 <_malloc_r+0xdc>
 800c5a4:	2c00      	cmp	r4, #0
 800c5a6:	d048      	beq.n	800c63a <_malloc_r+0xe6>
 800c5a8:	6823      	ldr	r3, [r4, #0]
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4638      	mov	r0, r7
 800c5ae:	eb04 0903 	add.w	r9, r4, r3
 800c5b2:	f000 fb5d 	bl	800cc70 <_sbrk_r>
 800c5b6:	4581      	cmp	r9, r0
 800c5b8:	d13f      	bne.n	800c63a <_malloc_r+0xe6>
 800c5ba:	6821      	ldr	r1, [r4, #0]
 800c5bc:	1a6d      	subs	r5, r5, r1
 800c5be:	4629      	mov	r1, r5
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	f7ff ffa7 	bl	800c514 <sbrk_aligned>
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	d037      	beq.n	800c63a <_malloc_r+0xe6>
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	442b      	add	r3, r5
 800c5ce:	6023      	str	r3, [r4, #0]
 800c5d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d038      	beq.n	800c64a <_malloc_r+0xf6>
 800c5d8:	685a      	ldr	r2, [r3, #4]
 800c5da:	42a2      	cmp	r2, r4
 800c5dc:	d12b      	bne.n	800c636 <_malloc_r+0xe2>
 800c5de:	2200      	movs	r2, #0
 800c5e0:	605a      	str	r2, [r3, #4]
 800c5e2:	e00f      	b.n	800c604 <_malloc_r+0xb0>
 800c5e4:	6822      	ldr	r2, [r4, #0]
 800c5e6:	1b52      	subs	r2, r2, r5
 800c5e8:	d41f      	bmi.n	800c62a <_malloc_r+0xd6>
 800c5ea:	2a0b      	cmp	r2, #11
 800c5ec:	d917      	bls.n	800c61e <_malloc_r+0xca>
 800c5ee:	1961      	adds	r1, r4, r5
 800c5f0:	42a3      	cmp	r3, r4
 800c5f2:	6025      	str	r5, [r4, #0]
 800c5f4:	bf18      	it	ne
 800c5f6:	6059      	strne	r1, [r3, #4]
 800c5f8:	6863      	ldr	r3, [r4, #4]
 800c5fa:	bf08      	it	eq
 800c5fc:	f8c8 1000 	streq.w	r1, [r8]
 800c600:	5162      	str	r2, [r4, r5]
 800c602:	604b      	str	r3, [r1, #4]
 800c604:	4638      	mov	r0, r7
 800c606:	f104 060b 	add.w	r6, r4, #11
 800c60a:	f000 f829 	bl	800c660 <__malloc_unlock>
 800c60e:	f026 0607 	bic.w	r6, r6, #7
 800c612:	1d23      	adds	r3, r4, #4
 800c614:	1af2      	subs	r2, r6, r3
 800c616:	d0ae      	beq.n	800c576 <_malloc_r+0x22>
 800c618:	1b9b      	subs	r3, r3, r6
 800c61a:	50a3      	str	r3, [r4, r2]
 800c61c:	e7ab      	b.n	800c576 <_malloc_r+0x22>
 800c61e:	42a3      	cmp	r3, r4
 800c620:	6862      	ldr	r2, [r4, #4]
 800c622:	d1dd      	bne.n	800c5e0 <_malloc_r+0x8c>
 800c624:	f8c8 2000 	str.w	r2, [r8]
 800c628:	e7ec      	b.n	800c604 <_malloc_r+0xb0>
 800c62a:	4623      	mov	r3, r4
 800c62c:	6864      	ldr	r4, [r4, #4]
 800c62e:	e7ac      	b.n	800c58a <_malloc_r+0x36>
 800c630:	4634      	mov	r4, r6
 800c632:	6876      	ldr	r6, [r6, #4]
 800c634:	e7b4      	b.n	800c5a0 <_malloc_r+0x4c>
 800c636:	4613      	mov	r3, r2
 800c638:	e7cc      	b.n	800c5d4 <_malloc_r+0x80>
 800c63a:	230c      	movs	r3, #12
 800c63c:	603b      	str	r3, [r7, #0]
 800c63e:	4638      	mov	r0, r7
 800c640:	f000 f80e 	bl	800c660 <__malloc_unlock>
 800c644:	e797      	b.n	800c576 <_malloc_r+0x22>
 800c646:	6025      	str	r5, [r4, #0]
 800c648:	e7dc      	b.n	800c604 <_malloc_r+0xb0>
 800c64a:	605b      	str	r3, [r3, #4]
 800c64c:	deff      	udf	#255	; 0xff
 800c64e:	bf00      	nop
 800c650:	2000173c 	.word	0x2000173c

0800c654 <__malloc_lock>:
 800c654:	4801      	ldr	r0, [pc, #4]	; (800c65c <__malloc_lock+0x8>)
 800c656:	f7ff bf0f 	b.w	800c478 <__retarget_lock_acquire_recursive>
 800c65a:	bf00      	nop
 800c65c:	20001738 	.word	0x20001738

0800c660 <__malloc_unlock>:
 800c660:	4801      	ldr	r0, [pc, #4]	; (800c668 <__malloc_unlock+0x8>)
 800c662:	f7ff bf0a 	b.w	800c47a <__retarget_lock_release_recursive>
 800c666:	bf00      	nop
 800c668:	20001738 	.word	0x20001738

0800c66c <__ssputs_r>:
 800c66c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c670:	688e      	ldr	r6, [r1, #8]
 800c672:	461f      	mov	r7, r3
 800c674:	42be      	cmp	r6, r7
 800c676:	680b      	ldr	r3, [r1, #0]
 800c678:	4682      	mov	sl, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	4690      	mov	r8, r2
 800c67e:	d82c      	bhi.n	800c6da <__ssputs_r+0x6e>
 800c680:	898a      	ldrh	r2, [r1, #12]
 800c682:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c686:	d026      	beq.n	800c6d6 <__ssputs_r+0x6a>
 800c688:	6965      	ldr	r5, [r4, #20]
 800c68a:	6909      	ldr	r1, [r1, #16]
 800c68c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c690:	eba3 0901 	sub.w	r9, r3, r1
 800c694:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c698:	1c7b      	adds	r3, r7, #1
 800c69a:	444b      	add	r3, r9
 800c69c:	106d      	asrs	r5, r5, #1
 800c69e:	429d      	cmp	r5, r3
 800c6a0:	bf38      	it	cc
 800c6a2:	461d      	movcc	r5, r3
 800c6a4:	0553      	lsls	r3, r2, #21
 800c6a6:	d527      	bpl.n	800c6f8 <__ssputs_r+0x8c>
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	f7ff ff53 	bl	800c554 <_malloc_r>
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	b360      	cbz	r0, 800c70c <__ssputs_r+0xa0>
 800c6b2:	6921      	ldr	r1, [r4, #16]
 800c6b4:	464a      	mov	r2, r9
 800c6b6:	f000 faeb 	bl	800cc90 <memcpy>
 800c6ba:	89a3      	ldrh	r3, [r4, #12]
 800c6bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c6c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6c4:	81a3      	strh	r3, [r4, #12]
 800c6c6:	6126      	str	r6, [r4, #16]
 800c6c8:	6165      	str	r5, [r4, #20]
 800c6ca:	444e      	add	r6, r9
 800c6cc:	eba5 0509 	sub.w	r5, r5, r9
 800c6d0:	6026      	str	r6, [r4, #0]
 800c6d2:	60a5      	str	r5, [r4, #8]
 800c6d4:	463e      	mov	r6, r7
 800c6d6:	42be      	cmp	r6, r7
 800c6d8:	d900      	bls.n	800c6dc <__ssputs_r+0x70>
 800c6da:	463e      	mov	r6, r7
 800c6dc:	6820      	ldr	r0, [r4, #0]
 800c6de:	4632      	mov	r2, r6
 800c6e0:	4641      	mov	r1, r8
 800c6e2:	f000 faab 	bl	800cc3c <memmove>
 800c6e6:	68a3      	ldr	r3, [r4, #8]
 800c6e8:	1b9b      	subs	r3, r3, r6
 800c6ea:	60a3      	str	r3, [r4, #8]
 800c6ec:	6823      	ldr	r3, [r4, #0]
 800c6ee:	4433      	add	r3, r6
 800c6f0:	6023      	str	r3, [r4, #0]
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f8:	462a      	mov	r2, r5
 800c6fa:	f000 fad7 	bl	800ccac <_realloc_r>
 800c6fe:	4606      	mov	r6, r0
 800c700:	2800      	cmp	r0, #0
 800c702:	d1e0      	bne.n	800c6c6 <__ssputs_r+0x5a>
 800c704:	6921      	ldr	r1, [r4, #16]
 800c706:	4650      	mov	r0, sl
 800c708:	f7ff feb8 	bl	800c47c <_free_r>
 800c70c:	230c      	movs	r3, #12
 800c70e:	f8ca 3000 	str.w	r3, [sl]
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c718:	81a3      	strh	r3, [r4, #12]
 800c71a:	f04f 30ff 	mov.w	r0, #4294967295
 800c71e:	e7e9      	b.n	800c6f4 <__ssputs_r+0x88>

0800c720 <_svfiprintf_r>:
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	4698      	mov	r8, r3
 800c726:	898b      	ldrh	r3, [r1, #12]
 800c728:	061b      	lsls	r3, r3, #24
 800c72a:	b09d      	sub	sp, #116	; 0x74
 800c72c:	4607      	mov	r7, r0
 800c72e:	460d      	mov	r5, r1
 800c730:	4614      	mov	r4, r2
 800c732:	d50e      	bpl.n	800c752 <_svfiprintf_r+0x32>
 800c734:	690b      	ldr	r3, [r1, #16]
 800c736:	b963      	cbnz	r3, 800c752 <_svfiprintf_r+0x32>
 800c738:	2140      	movs	r1, #64	; 0x40
 800c73a:	f7ff ff0b 	bl	800c554 <_malloc_r>
 800c73e:	6028      	str	r0, [r5, #0]
 800c740:	6128      	str	r0, [r5, #16]
 800c742:	b920      	cbnz	r0, 800c74e <_svfiprintf_r+0x2e>
 800c744:	230c      	movs	r3, #12
 800c746:	603b      	str	r3, [r7, #0]
 800c748:	f04f 30ff 	mov.w	r0, #4294967295
 800c74c:	e0d0      	b.n	800c8f0 <_svfiprintf_r+0x1d0>
 800c74e:	2340      	movs	r3, #64	; 0x40
 800c750:	616b      	str	r3, [r5, #20]
 800c752:	2300      	movs	r3, #0
 800c754:	9309      	str	r3, [sp, #36]	; 0x24
 800c756:	2320      	movs	r3, #32
 800c758:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c75c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c760:	2330      	movs	r3, #48	; 0x30
 800c762:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c908 <_svfiprintf_r+0x1e8>
 800c766:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c76a:	f04f 0901 	mov.w	r9, #1
 800c76e:	4623      	mov	r3, r4
 800c770:	469a      	mov	sl, r3
 800c772:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c776:	b10a      	cbz	r2, 800c77c <_svfiprintf_r+0x5c>
 800c778:	2a25      	cmp	r2, #37	; 0x25
 800c77a:	d1f9      	bne.n	800c770 <_svfiprintf_r+0x50>
 800c77c:	ebba 0b04 	subs.w	fp, sl, r4
 800c780:	d00b      	beq.n	800c79a <_svfiprintf_r+0x7a>
 800c782:	465b      	mov	r3, fp
 800c784:	4622      	mov	r2, r4
 800c786:	4629      	mov	r1, r5
 800c788:	4638      	mov	r0, r7
 800c78a:	f7ff ff6f 	bl	800c66c <__ssputs_r>
 800c78e:	3001      	adds	r0, #1
 800c790:	f000 80a9 	beq.w	800c8e6 <_svfiprintf_r+0x1c6>
 800c794:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c796:	445a      	add	r2, fp
 800c798:	9209      	str	r2, [sp, #36]	; 0x24
 800c79a:	f89a 3000 	ldrb.w	r3, [sl]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f000 80a1 	beq.w	800c8e6 <_svfiprintf_r+0x1c6>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7ae:	f10a 0a01 	add.w	sl, sl, #1
 800c7b2:	9304      	str	r3, [sp, #16]
 800c7b4:	9307      	str	r3, [sp, #28]
 800c7b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7ba:	931a      	str	r3, [sp, #104]	; 0x68
 800c7bc:	4654      	mov	r4, sl
 800c7be:	2205      	movs	r2, #5
 800c7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c4:	4850      	ldr	r0, [pc, #320]	; (800c908 <_svfiprintf_r+0x1e8>)
 800c7c6:	f7f3 fd2b 	bl	8000220 <memchr>
 800c7ca:	9a04      	ldr	r2, [sp, #16]
 800c7cc:	b9d8      	cbnz	r0, 800c806 <_svfiprintf_r+0xe6>
 800c7ce:	06d0      	lsls	r0, r2, #27
 800c7d0:	bf44      	itt	mi
 800c7d2:	2320      	movmi	r3, #32
 800c7d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7d8:	0711      	lsls	r1, r2, #28
 800c7da:	bf44      	itt	mi
 800c7dc:	232b      	movmi	r3, #43	; 0x2b
 800c7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c7e6:	2b2a      	cmp	r3, #42	; 0x2a
 800c7e8:	d015      	beq.n	800c816 <_svfiprintf_r+0xf6>
 800c7ea:	9a07      	ldr	r2, [sp, #28]
 800c7ec:	4654      	mov	r4, sl
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	f04f 0c0a 	mov.w	ip, #10
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7fa:	3b30      	subs	r3, #48	; 0x30
 800c7fc:	2b09      	cmp	r3, #9
 800c7fe:	d94d      	bls.n	800c89c <_svfiprintf_r+0x17c>
 800c800:	b1b0      	cbz	r0, 800c830 <_svfiprintf_r+0x110>
 800c802:	9207      	str	r2, [sp, #28]
 800c804:	e014      	b.n	800c830 <_svfiprintf_r+0x110>
 800c806:	eba0 0308 	sub.w	r3, r0, r8
 800c80a:	fa09 f303 	lsl.w	r3, r9, r3
 800c80e:	4313      	orrs	r3, r2
 800c810:	9304      	str	r3, [sp, #16]
 800c812:	46a2      	mov	sl, r4
 800c814:	e7d2      	b.n	800c7bc <_svfiprintf_r+0x9c>
 800c816:	9b03      	ldr	r3, [sp, #12]
 800c818:	1d19      	adds	r1, r3, #4
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	9103      	str	r1, [sp, #12]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	bfbb      	ittet	lt
 800c822:	425b      	neglt	r3, r3
 800c824:	f042 0202 	orrlt.w	r2, r2, #2
 800c828:	9307      	strge	r3, [sp, #28]
 800c82a:	9307      	strlt	r3, [sp, #28]
 800c82c:	bfb8      	it	lt
 800c82e:	9204      	strlt	r2, [sp, #16]
 800c830:	7823      	ldrb	r3, [r4, #0]
 800c832:	2b2e      	cmp	r3, #46	; 0x2e
 800c834:	d10c      	bne.n	800c850 <_svfiprintf_r+0x130>
 800c836:	7863      	ldrb	r3, [r4, #1]
 800c838:	2b2a      	cmp	r3, #42	; 0x2a
 800c83a:	d134      	bne.n	800c8a6 <_svfiprintf_r+0x186>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	1d1a      	adds	r2, r3, #4
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	9203      	str	r2, [sp, #12]
 800c844:	2b00      	cmp	r3, #0
 800c846:	bfb8      	it	lt
 800c848:	f04f 33ff 	movlt.w	r3, #4294967295
 800c84c:	3402      	adds	r4, #2
 800c84e:	9305      	str	r3, [sp, #20]
 800c850:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c918 <_svfiprintf_r+0x1f8>
 800c854:	7821      	ldrb	r1, [r4, #0]
 800c856:	2203      	movs	r2, #3
 800c858:	4650      	mov	r0, sl
 800c85a:	f7f3 fce1 	bl	8000220 <memchr>
 800c85e:	b138      	cbz	r0, 800c870 <_svfiprintf_r+0x150>
 800c860:	9b04      	ldr	r3, [sp, #16]
 800c862:	eba0 000a 	sub.w	r0, r0, sl
 800c866:	2240      	movs	r2, #64	; 0x40
 800c868:	4082      	lsls	r2, r0
 800c86a:	4313      	orrs	r3, r2
 800c86c:	3401      	adds	r4, #1
 800c86e:	9304      	str	r3, [sp, #16]
 800c870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c874:	4825      	ldr	r0, [pc, #148]	; (800c90c <_svfiprintf_r+0x1ec>)
 800c876:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c87a:	2206      	movs	r2, #6
 800c87c:	f7f3 fcd0 	bl	8000220 <memchr>
 800c880:	2800      	cmp	r0, #0
 800c882:	d038      	beq.n	800c8f6 <_svfiprintf_r+0x1d6>
 800c884:	4b22      	ldr	r3, [pc, #136]	; (800c910 <_svfiprintf_r+0x1f0>)
 800c886:	bb1b      	cbnz	r3, 800c8d0 <_svfiprintf_r+0x1b0>
 800c888:	9b03      	ldr	r3, [sp, #12]
 800c88a:	3307      	adds	r3, #7
 800c88c:	f023 0307 	bic.w	r3, r3, #7
 800c890:	3308      	adds	r3, #8
 800c892:	9303      	str	r3, [sp, #12]
 800c894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c896:	4433      	add	r3, r6
 800c898:	9309      	str	r3, [sp, #36]	; 0x24
 800c89a:	e768      	b.n	800c76e <_svfiprintf_r+0x4e>
 800c89c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8a0:	460c      	mov	r4, r1
 800c8a2:	2001      	movs	r0, #1
 800c8a4:	e7a6      	b.n	800c7f4 <_svfiprintf_r+0xd4>
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	3401      	adds	r4, #1
 800c8aa:	9305      	str	r3, [sp, #20]
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	f04f 0c0a 	mov.w	ip, #10
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8b8:	3a30      	subs	r2, #48	; 0x30
 800c8ba:	2a09      	cmp	r2, #9
 800c8bc:	d903      	bls.n	800c8c6 <_svfiprintf_r+0x1a6>
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d0c6      	beq.n	800c850 <_svfiprintf_r+0x130>
 800c8c2:	9105      	str	r1, [sp, #20]
 800c8c4:	e7c4      	b.n	800c850 <_svfiprintf_r+0x130>
 800c8c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	e7f0      	b.n	800c8b2 <_svfiprintf_r+0x192>
 800c8d0:	ab03      	add	r3, sp, #12
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	462a      	mov	r2, r5
 800c8d6:	4b0f      	ldr	r3, [pc, #60]	; (800c914 <_svfiprintf_r+0x1f4>)
 800c8d8:	a904      	add	r1, sp, #16
 800c8da:	4638      	mov	r0, r7
 800c8dc:	f3af 8000 	nop.w
 800c8e0:	1c42      	adds	r2, r0, #1
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	d1d6      	bne.n	800c894 <_svfiprintf_r+0x174>
 800c8e6:	89ab      	ldrh	r3, [r5, #12]
 800c8e8:	065b      	lsls	r3, r3, #25
 800c8ea:	f53f af2d 	bmi.w	800c748 <_svfiprintf_r+0x28>
 800c8ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8f0:	b01d      	add	sp, #116	; 0x74
 800c8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8f6:	ab03      	add	r3, sp, #12
 800c8f8:	9300      	str	r3, [sp, #0]
 800c8fa:	462a      	mov	r2, r5
 800c8fc:	4b05      	ldr	r3, [pc, #20]	; (800c914 <_svfiprintf_r+0x1f4>)
 800c8fe:	a904      	add	r1, sp, #16
 800c900:	4638      	mov	r0, r7
 800c902:	f000 f879 	bl	800c9f8 <_printf_i>
 800c906:	e7eb      	b.n	800c8e0 <_svfiprintf_r+0x1c0>
 800c908:	0800ce04 	.word	0x0800ce04
 800c90c:	0800ce0e 	.word	0x0800ce0e
 800c910:	00000000 	.word	0x00000000
 800c914:	0800c66d 	.word	0x0800c66d
 800c918:	0800ce0a 	.word	0x0800ce0a

0800c91c <_printf_common>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	4616      	mov	r6, r2
 800c922:	4699      	mov	r9, r3
 800c924:	688a      	ldr	r2, [r1, #8]
 800c926:	690b      	ldr	r3, [r1, #16]
 800c928:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c92c:	4293      	cmp	r3, r2
 800c92e:	bfb8      	it	lt
 800c930:	4613      	movlt	r3, r2
 800c932:	6033      	str	r3, [r6, #0]
 800c934:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c938:	4607      	mov	r7, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	b10a      	cbz	r2, 800c942 <_printf_common+0x26>
 800c93e:	3301      	adds	r3, #1
 800c940:	6033      	str	r3, [r6, #0]
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	0699      	lsls	r1, r3, #26
 800c946:	bf42      	ittt	mi
 800c948:	6833      	ldrmi	r3, [r6, #0]
 800c94a:	3302      	addmi	r3, #2
 800c94c:	6033      	strmi	r3, [r6, #0]
 800c94e:	6825      	ldr	r5, [r4, #0]
 800c950:	f015 0506 	ands.w	r5, r5, #6
 800c954:	d106      	bne.n	800c964 <_printf_common+0x48>
 800c956:	f104 0a19 	add.w	sl, r4, #25
 800c95a:	68e3      	ldr	r3, [r4, #12]
 800c95c:	6832      	ldr	r2, [r6, #0]
 800c95e:	1a9b      	subs	r3, r3, r2
 800c960:	42ab      	cmp	r3, r5
 800c962:	dc26      	bgt.n	800c9b2 <_printf_common+0x96>
 800c964:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c968:	1e13      	subs	r3, r2, #0
 800c96a:	6822      	ldr	r2, [r4, #0]
 800c96c:	bf18      	it	ne
 800c96e:	2301      	movne	r3, #1
 800c970:	0692      	lsls	r2, r2, #26
 800c972:	d42b      	bmi.n	800c9cc <_printf_common+0xb0>
 800c974:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c978:	4649      	mov	r1, r9
 800c97a:	4638      	mov	r0, r7
 800c97c:	47c0      	blx	r8
 800c97e:	3001      	adds	r0, #1
 800c980:	d01e      	beq.n	800c9c0 <_printf_common+0xa4>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	6922      	ldr	r2, [r4, #16]
 800c986:	f003 0306 	and.w	r3, r3, #6
 800c98a:	2b04      	cmp	r3, #4
 800c98c:	bf02      	ittt	eq
 800c98e:	68e5      	ldreq	r5, [r4, #12]
 800c990:	6833      	ldreq	r3, [r6, #0]
 800c992:	1aed      	subeq	r5, r5, r3
 800c994:	68a3      	ldr	r3, [r4, #8]
 800c996:	bf0c      	ite	eq
 800c998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c99c:	2500      	movne	r5, #0
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	bfc4      	itt	gt
 800c9a2:	1a9b      	subgt	r3, r3, r2
 800c9a4:	18ed      	addgt	r5, r5, r3
 800c9a6:	2600      	movs	r6, #0
 800c9a8:	341a      	adds	r4, #26
 800c9aa:	42b5      	cmp	r5, r6
 800c9ac:	d11a      	bne.n	800c9e4 <_printf_common+0xc8>
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	e008      	b.n	800c9c4 <_printf_common+0xa8>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	4652      	mov	r2, sl
 800c9b6:	4649      	mov	r1, r9
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	47c0      	blx	r8
 800c9bc:	3001      	adds	r0, #1
 800c9be:	d103      	bne.n	800c9c8 <_printf_common+0xac>
 800c9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c8:	3501      	adds	r5, #1
 800c9ca:	e7c6      	b.n	800c95a <_printf_common+0x3e>
 800c9cc:	18e1      	adds	r1, r4, r3
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	2030      	movs	r0, #48	; 0x30
 800c9d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c9d6:	4422      	add	r2, r4
 800c9d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c9dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c9e0:	3302      	adds	r3, #2
 800c9e2:	e7c7      	b.n	800c974 <_printf_common+0x58>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	4622      	mov	r2, r4
 800c9e8:	4649      	mov	r1, r9
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	47c0      	blx	r8
 800c9ee:	3001      	adds	r0, #1
 800c9f0:	d0e6      	beq.n	800c9c0 <_printf_common+0xa4>
 800c9f2:	3601      	adds	r6, #1
 800c9f4:	e7d9      	b.n	800c9aa <_printf_common+0x8e>
	...

0800c9f8 <_printf_i>:
 800c9f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	7e0f      	ldrb	r7, [r1, #24]
 800c9fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ca00:	2f78      	cmp	r7, #120	; 0x78
 800ca02:	4691      	mov	r9, r2
 800ca04:	4680      	mov	r8, r0
 800ca06:	460c      	mov	r4, r1
 800ca08:	469a      	mov	sl, r3
 800ca0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ca0e:	d807      	bhi.n	800ca20 <_printf_i+0x28>
 800ca10:	2f62      	cmp	r7, #98	; 0x62
 800ca12:	d80a      	bhi.n	800ca2a <_printf_i+0x32>
 800ca14:	2f00      	cmp	r7, #0
 800ca16:	f000 80d4 	beq.w	800cbc2 <_printf_i+0x1ca>
 800ca1a:	2f58      	cmp	r7, #88	; 0x58
 800ca1c:	f000 80c0 	beq.w	800cba0 <_printf_i+0x1a8>
 800ca20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ca28:	e03a      	b.n	800caa0 <_printf_i+0xa8>
 800ca2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ca2e:	2b15      	cmp	r3, #21
 800ca30:	d8f6      	bhi.n	800ca20 <_printf_i+0x28>
 800ca32:	a101      	add	r1, pc, #4	; (adr r1, 800ca38 <_printf_i+0x40>)
 800ca34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca38:	0800ca91 	.word	0x0800ca91
 800ca3c:	0800caa5 	.word	0x0800caa5
 800ca40:	0800ca21 	.word	0x0800ca21
 800ca44:	0800ca21 	.word	0x0800ca21
 800ca48:	0800ca21 	.word	0x0800ca21
 800ca4c:	0800ca21 	.word	0x0800ca21
 800ca50:	0800caa5 	.word	0x0800caa5
 800ca54:	0800ca21 	.word	0x0800ca21
 800ca58:	0800ca21 	.word	0x0800ca21
 800ca5c:	0800ca21 	.word	0x0800ca21
 800ca60:	0800ca21 	.word	0x0800ca21
 800ca64:	0800cba9 	.word	0x0800cba9
 800ca68:	0800cad1 	.word	0x0800cad1
 800ca6c:	0800cb63 	.word	0x0800cb63
 800ca70:	0800ca21 	.word	0x0800ca21
 800ca74:	0800ca21 	.word	0x0800ca21
 800ca78:	0800cbcb 	.word	0x0800cbcb
 800ca7c:	0800ca21 	.word	0x0800ca21
 800ca80:	0800cad1 	.word	0x0800cad1
 800ca84:	0800ca21 	.word	0x0800ca21
 800ca88:	0800ca21 	.word	0x0800ca21
 800ca8c:	0800cb6b 	.word	0x0800cb6b
 800ca90:	682b      	ldr	r3, [r5, #0]
 800ca92:	1d1a      	adds	r2, r3, #4
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	602a      	str	r2, [r5, #0]
 800ca98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800caa0:	2301      	movs	r3, #1
 800caa2:	e09f      	b.n	800cbe4 <_printf_i+0x1ec>
 800caa4:	6820      	ldr	r0, [r4, #0]
 800caa6:	682b      	ldr	r3, [r5, #0]
 800caa8:	0607      	lsls	r7, r0, #24
 800caaa:	f103 0104 	add.w	r1, r3, #4
 800caae:	6029      	str	r1, [r5, #0]
 800cab0:	d501      	bpl.n	800cab6 <_printf_i+0xbe>
 800cab2:	681e      	ldr	r6, [r3, #0]
 800cab4:	e003      	b.n	800cabe <_printf_i+0xc6>
 800cab6:	0646      	lsls	r6, r0, #25
 800cab8:	d5fb      	bpl.n	800cab2 <_printf_i+0xba>
 800caba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	da03      	bge.n	800caca <_printf_i+0xd2>
 800cac2:	232d      	movs	r3, #45	; 0x2d
 800cac4:	4276      	negs	r6, r6
 800cac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caca:	485a      	ldr	r0, [pc, #360]	; (800cc34 <_printf_i+0x23c>)
 800cacc:	230a      	movs	r3, #10
 800cace:	e012      	b.n	800caf6 <_printf_i+0xfe>
 800cad0:	682b      	ldr	r3, [r5, #0]
 800cad2:	6820      	ldr	r0, [r4, #0]
 800cad4:	1d19      	adds	r1, r3, #4
 800cad6:	6029      	str	r1, [r5, #0]
 800cad8:	0605      	lsls	r5, r0, #24
 800cada:	d501      	bpl.n	800cae0 <_printf_i+0xe8>
 800cadc:	681e      	ldr	r6, [r3, #0]
 800cade:	e002      	b.n	800cae6 <_printf_i+0xee>
 800cae0:	0641      	lsls	r1, r0, #25
 800cae2:	d5fb      	bpl.n	800cadc <_printf_i+0xe4>
 800cae4:	881e      	ldrh	r6, [r3, #0]
 800cae6:	4853      	ldr	r0, [pc, #332]	; (800cc34 <_printf_i+0x23c>)
 800cae8:	2f6f      	cmp	r7, #111	; 0x6f
 800caea:	bf0c      	ite	eq
 800caec:	2308      	moveq	r3, #8
 800caee:	230a      	movne	r3, #10
 800caf0:	2100      	movs	r1, #0
 800caf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800caf6:	6865      	ldr	r5, [r4, #4]
 800caf8:	60a5      	str	r5, [r4, #8]
 800cafa:	2d00      	cmp	r5, #0
 800cafc:	bfa2      	ittt	ge
 800cafe:	6821      	ldrge	r1, [r4, #0]
 800cb00:	f021 0104 	bicge.w	r1, r1, #4
 800cb04:	6021      	strge	r1, [r4, #0]
 800cb06:	b90e      	cbnz	r6, 800cb0c <_printf_i+0x114>
 800cb08:	2d00      	cmp	r5, #0
 800cb0a:	d04b      	beq.n	800cba4 <_printf_i+0x1ac>
 800cb0c:	4615      	mov	r5, r2
 800cb0e:	fbb6 f1f3 	udiv	r1, r6, r3
 800cb12:	fb03 6711 	mls	r7, r3, r1, r6
 800cb16:	5dc7      	ldrb	r7, [r0, r7]
 800cb18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cb1c:	4637      	mov	r7, r6
 800cb1e:	42bb      	cmp	r3, r7
 800cb20:	460e      	mov	r6, r1
 800cb22:	d9f4      	bls.n	800cb0e <_printf_i+0x116>
 800cb24:	2b08      	cmp	r3, #8
 800cb26:	d10b      	bne.n	800cb40 <_printf_i+0x148>
 800cb28:	6823      	ldr	r3, [r4, #0]
 800cb2a:	07de      	lsls	r6, r3, #31
 800cb2c:	d508      	bpl.n	800cb40 <_printf_i+0x148>
 800cb2e:	6923      	ldr	r3, [r4, #16]
 800cb30:	6861      	ldr	r1, [r4, #4]
 800cb32:	4299      	cmp	r1, r3
 800cb34:	bfde      	ittt	le
 800cb36:	2330      	movle	r3, #48	; 0x30
 800cb38:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb40:	1b52      	subs	r2, r2, r5
 800cb42:	6122      	str	r2, [r4, #16]
 800cb44:	f8cd a000 	str.w	sl, [sp]
 800cb48:	464b      	mov	r3, r9
 800cb4a:	aa03      	add	r2, sp, #12
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	4640      	mov	r0, r8
 800cb50:	f7ff fee4 	bl	800c91c <_printf_common>
 800cb54:	3001      	adds	r0, #1
 800cb56:	d14a      	bne.n	800cbee <_printf_i+0x1f6>
 800cb58:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5c:	b004      	add	sp, #16
 800cb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb62:	6823      	ldr	r3, [r4, #0]
 800cb64:	f043 0320 	orr.w	r3, r3, #32
 800cb68:	6023      	str	r3, [r4, #0]
 800cb6a:	4833      	ldr	r0, [pc, #204]	; (800cc38 <_printf_i+0x240>)
 800cb6c:	2778      	movs	r7, #120	; 0x78
 800cb6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	6829      	ldr	r1, [r5, #0]
 800cb76:	061f      	lsls	r7, r3, #24
 800cb78:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb7c:	d402      	bmi.n	800cb84 <_printf_i+0x18c>
 800cb7e:	065f      	lsls	r7, r3, #25
 800cb80:	bf48      	it	mi
 800cb82:	b2b6      	uxthmi	r6, r6
 800cb84:	07df      	lsls	r7, r3, #31
 800cb86:	bf48      	it	mi
 800cb88:	f043 0320 	orrmi.w	r3, r3, #32
 800cb8c:	6029      	str	r1, [r5, #0]
 800cb8e:	bf48      	it	mi
 800cb90:	6023      	strmi	r3, [r4, #0]
 800cb92:	b91e      	cbnz	r6, 800cb9c <_printf_i+0x1a4>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	f023 0320 	bic.w	r3, r3, #32
 800cb9a:	6023      	str	r3, [r4, #0]
 800cb9c:	2310      	movs	r3, #16
 800cb9e:	e7a7      	b.n	800caf0 <_printf_i+0xf8>
 800cba0:	4824      	ldr	r0, [pc, #144]	; (800cc34 <_printf_i+0x23c>)
 800cba2:	e7e4      	b.n	800cb6e <_printf_i+0x176>
 800cba4:	4615      	mov	r5, r2
 800cba6:	e7bd      	b.n	800cb24 <_printf_i+0x12c>
 800cba8:	682b      	ldr	r3, [r5, #0]
 800cbaa:	6826      	ldr	r6, [r4, #0]
 800cbac:	6961      	ldr	r1, [r4, #20]
 800cbae:	1d18      	adds	r0, r3, #4
 800cbb0:	6028      	str	r0, [r5, #0]
 800cbb2:	0635      	lsls	r5, r6, #24
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	d501      	bpl.n	800cbbc <_printf_i+0x1c4>
 800cbb8:	6019      	str	r1, [r3, #0]
 800cbba:	e002      	b.n	800cbc2 <_printf_i+0x1ca>
 800cbbc:	0670      	lsls	r0, r6, #25
 800cbbe:	d5fb      	bpl.n	800cbb8 <_printf_i+0x1c0>
 800cbc0:	8019      	strh	r1, [r3, #0]
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	6123      	str	r3, [r4, #16]
 800cbc6:	4615      	mov	r5, r2
 800cbc8:	e7bc      	b.n	800cb44 <_printf_i+0x14c>
 800cbca:	682b      	ldr	r3, [r5, #0]
 800cbcc:	1d1a      	adds	r2, r3, #4
 800cbce:	602a      	str	r2, [r5, #0]
 800cbd0:	681d      	ldr	r5, [r3, #0]
 800cbd2:	6862      	ldr	r2, [r4, #4]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f7f3 fb22 	bl	8000220 <memchr>
 800cbdc:	b108      	cbz	r0, 800cbe2 <_printf_i+0x1ea>
 800cbde:	1b40      	subs	r0, r0, r5
 800cbe0:	6060      	str	r0, [r4, #4]
 800cbe2:	6863      	ldr	r3, [r4, #4]
 800cbe4:	6123      	str	r3, [r4, #16]
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cbec:	e7aa      	b.n	800cb44 <_printf_i+0x14c>
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	4649      	mov	r1, r9
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	47d0      	blx	sl
 800cbf8:	3001      	adds	r0, #1
 800cbfa:	d0ad      	beq.n	800cb58 <_printf_i+0x160>
 800cbfc:	6823      	ldr	r3, [r4, #0]
 800cbfe:	079b      	lsls	r3, r3, #30
 800cc00:	d413      	bmi.n	800cc2a <_printf_i+0x232>
 800cc02:	68e0      	ldr	r0, [r4, #12]
 800cc04:	9b03      	ldr	r3, [sp, #12]
 800cc06:	4298      	cmp	r0, r3
 800cc08:	bfb8      	it	lt
 800cc0a:	4618      	movlt	r0, r3
 800cc0c:	e7a6      	b.n	800cb5c <_printf_i+0x164>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	4632      	mov	r2, r6
 800cc12:	4649      	mov	r1, r9
 800cc14:	4640      	mov	r0, r8
 800cc16:	47d0      	blx	sl
 800cc18:	3001      	adds	r0, #1
 800cc1a:	d09d      	beq.n	800cb58 <_printf_i+0x160>
 800cc1c:	3501      	adds	r5, #1
 800cc1e:	68e3      	ldr	r3, [r4, #12]
 800cc20:	9903      	ldr	r1, [sp, #12]
 800cc22:	1a5b      	subs	r3, r3, r1
 800cc24:	42ab      	cmp	r3, r5
 800cc26:	dcf2      	bgt.n	800cc0e <_printf_i+0x216>
 800cc28:	e7eb      	b.n	800cc02 <_printf_i+0x20a>
 800cc2a:	2500      	movs	r5, #0
 800cc2c:	f104 0619 	add.w	r6, r4, #25
 800cc30:	e7f5      	b.n	800cc1e <_printf_i+0x226>
 800cc32:	bf00      	nop
 800cc34:	0800ce15 	.word	0x0800ce15
 800cc38:	0800ce26 	.word	0x0800ce26

0800cc3c <memmove>:
 800cc3c:	4288      	cmp	r0, r1
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	eb01 0402 	add.w	r4, r1, r2
 800cc44:	d902      	bls.n	800cc4c <memmove+0x10>
 800cc46:	4284      	cmp	r4, r0
 800cc48:	4623      	mov	r3, r4
 800cc4a:	d807      	bhi.n	800cc5c <memmove+0x20>
 800cc4c:	1e43      	subs	r3, r0, #1
 800cc4e:	42a1      	cmp	r1, r4
 800cc50:	d008      	beq.n	800cc64 <memmove+0x28>
 800cc52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc5a:	e7f8      	b.n	800cc4e <memmove+0x12>
 800cc5c:	4402      	add	r2, r0
 800cc5e:	4601      	mov	r1, r0
 800cc60:	428a      	cmp	r2, r1
 800cc62:	d100      	bne.n	800cc66 <memmove+0x2a>
 800cc64:	bd10      	pop	{r4, pc}
 800cc66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc6e:	e7f7      	b.n	800cc60 <memmove+0x24>

0800cc70 <_sbrk_r>:
 800cc70:	b538      	push	{r3, r4, r5, lr}
 800cc72:	4d06      	ldr	r5, [pc, #24]	; (800cc8c <_sbrk_r+0x1c>)
 800cc74:	2300      	movs	r3, #0
 800cc76:	4604      	mov	r4, r0
 800cc78:	4608      	mov	r0, r1
 800cc7a:	602b      	str	r3, [r5, #0]
 800cc7c:	f7f4 fe98 	bl	80019b0 <_sbrk>
 800cc80:	1c43      	adds	r3, r0, #1
 800cc82:	d102      	bne.n	800cc8a <_sbrk_r+0x1a>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	b103      	cbz	r3, 800cc8a <_sbrk_r+0x1a>
 800cc88:	6023      	str	r3, [r4, #0]
 800cc8a:	bd38      	pop	{r3, r4, r5, pc}
 800cc8c:	20001734 	.word	0x20001734

0800cc90 <memcpy>:
 800cc90:	440a      	add	r2, r1
 800cc92:	4291      	cmp	r1, r2
 800cc94:	f100 33ff 	add.w	r3, r0, #4294967295
 800cc98:	d100      	bne.n	800cc9c <memcpy+0xc>
 800cc9a:	4770      	bx	lr
 800cc9c:	b510      	push	{r4, lr}
 800cc9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cca6:	4291      	cmp	r1, r2
 800cca8:	d1f9      	bne.n	800cc9e <memcpy+0xe>
 800ccaa:	bd10      	pop	{r4, pc}

0800ccac <_realloc_r>:
 800ccac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb0:	4680      	mov	r8, r0
 800ccb2:	4614      	mov	r4, r2
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	b921      	cbnz	r1, 800ccc2 <_realloc_r+0x16>
 800ccb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	f7ff bc49 	b.w	800c554 <_malloc_r>
 800ccc2:	b92a      	cbnz	r2, 800ccd0 <_realloc_r+0x24>
 800ccc4:	f7ff fbda 	bl	800c47c <_free_r>
 800ccc8:	4625      	mov	r5, r4
 800ccca:	4628      	mov	r0, r5
 800cccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd0:	f000 f81b 	bl	800cd0a <_malloc_usable_size_r>
 800ccd4:	4284      	cmp	r4, r0
 800ccd6:	4607      	mov	r7, r0
 800ccd8:	d802      	bhi.n	800cce0 <_realloc_r+0x34>
 800ccda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccde:	d812      	bhi.n	800cd06 <_realloc_r+0x5a>
 800cce0:	4621      	mov	r1, r4
 800cce2:	4640      	mov	r0, r8
 800cce4:	f7ff fc36 	bl	800c554 <_malloc_r>
 800cce8:	4605      	mov	r5, r0
 800ccea:	2800      	cmp	r0, #0
 800ccec:	d0ed      	beq.n	800ccca <_realloc_r+0x1e>
 800ccee:	42bc      	cmp	r4, r7
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	4631      	mov	r1, r6
 800ccf4:	bf28      	it	cs
 800ccf6:	463a      	movcs	r2, r7
 800ccf8:	f7ff ffca 	bl	800cc90 <memcpy>
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4640      	mov	r0, r8
 800cd00:	f7ff fbbc 	bl	800c47c <_free_r>
 800cd04:	e7e1      	b.n	800ccca <_realloc_r+0x1e>
 800cd06:	4635      	mov	r5, r6
 800cd08:	e7df      	b.n	800ccca <_realloc_r+0x1e>

0800cd0a <_malloc_usable_size_r>:
 800cd0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd0e:	1f18      	subs	r0, r3, #4
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	bfbc      	itt	lt
 800cd14:	580b      	ldrlt	r3, [r1, r0]
 800cd16:	18c0      	addlt	r0, r0, r3
 800cd18:	4770      	bx	lr
	...

0800cd1c <_init>:
 800cd1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd1e:	bf00      	nop
 800cd20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd22:	bc08      	pop	{r3}
 800cd24:	469e      	mov	lr, r3
 800cd26:	4770      	bx	lr

0800cd28 <_fini>:
 800cd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd2a:	bf00      	nop
 800cd2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd2e:	bc08      	pop	{r3}
 800cd30:	469e      	mov	lr, r3
 800cd32:	4770      	bx	lr
