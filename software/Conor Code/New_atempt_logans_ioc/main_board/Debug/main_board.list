
main_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005d88  08005d88  00006d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d98  08005d98  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d98  08005d98  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d98  08005d98  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d98  08005d98  00006d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d9c  08005d9c  00006d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005da0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  2000000c  08005dac  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000514  08005dac  00007514  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016cc9  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000389d  00000000  00000000  0001dd05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  000215a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f12  00000000  00000000  00022990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c8a  00000000  00000000  000238a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abb0  00000000  00000000  0004652c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9cae  00000000  00000000  000610dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013ad8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005360  00000000  00000000  0013add0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00140130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005d70 	.word	0x08005d70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005d70 	.word	0x08005d70

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08c      	sub	sp, #48	@ 0x30
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2220      	movs	r2, #32
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f005 f97b 	bl	8005d18 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a22:	4b32      	ldr	r3, [pc, #200]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a24:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000a28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a2a:	4b30      	ldr	r3, [pc, #192]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a2c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000a30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a32:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a38:	4b2c      	ldr	r3, [pc, #176]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a44:	4b29      	ldr	r3, [pc, #164]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a4a:	4b28      	ldr	r3, [pc, #160]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a50:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a56:	4b25      	ldr	r3, [pc, #148]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000a5c:	4b23      	ldr	r3, [pc, #140]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a62:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a6a:	4b20      	ldr	r3, [pc, #128]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a76:	4b1d      	ldr	r3, [pc, #116]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000a84:	4b19      	ldr	r3, [pc, #100]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a8c:	4817      	ldr	r0, [pc, #92]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000a8e:	f001 f9d5 	bl	8001e3c <HAL_ADC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000a98:	f000 fd07 	bl	80014aa <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4811      	ldr	r0, [pc, #68]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000aa8:	f001 ff62 	bl	8002970 <HAL_ADCEx_MultiModeConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ab2:	f000 fcfa 	bl	80014aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_ADC1_Init+0xec>)
 8000ab8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000aba:	2306      	movs	r3, #6
 8000abc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac2:	237f      	movs	r3, #127	@ 0x7f
 8000ac4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_ADC1_Init+0xe8>)
 8000ad4:	f001 fb36 	bl	8002144 <HAL_ADC_ConfigChannel>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ade:	f000 fce4 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3730      	adds	r7, #48	@ 0x30
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000028 	.word	0x20000028
 8000af0:	04300002 	.word	0x04300002

08000af4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afa:	463b      	mov	r3, r7
 8000afc:	2220      	movs	r2, #32
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 f909 	bl	8005d18 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b08:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb8 <MX_ADC2_Init+0xc4>)
 8000b0a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b0c:	4b29      	ldr	r3, [pc, #164]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b12:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000b14:	4b27      	ldr	r3, [pc, #156]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000b20:	4b24      	ldr	r3, [pc, #144]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b26:	4b23      	ldr	r3, [pc, #140]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b2e:	2204      	movs	r2, #4
 8000b30:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b32:	4b20      	ldr	r3, [pc, #128]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000b58:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b6e:	4811      	ldr	r0, [pc, #68]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b70:	f001 f964 	bl	8001e3c <HAL_ADC_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000b7a:	f000 fc96 	bl	80014aa <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <MX_ADC2_Init+0xc8>)
 8000b80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b82:	2306      	movs	r3, #6
 8000b84:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b8a:	237f      	movs	r3, #127	@ 0x7f
 8000b8c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b96:	463b      	mov	r3, r7
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	@ (8000bb4 <MX_ADC2_Init+0xc0>)
 8000b9c:	f001 fad2 	bl	8002144 <HAL_ADC_ConfigChannel>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ba6:	f000 fc80 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3720      	adds	r7, #32
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000094 	.word	0x20000094
 8000bb8:	50000100 	.word	0x50000100
 8000bbc:	2e300800 	.word	0x2e300800

08000bc0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09e      	sub	sp, #120	@ 0x78
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	f107 0320 	add.w	r3, r7, #32
 8000bdc:	2244      	movs	r2, #68	@ 0x44
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f005 f899 	bl	8005d18 <memset>
  if(adcHandle->Instance==ADC1)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bee:	d16f      	bne.n	8000cd0 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000bf0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000bf6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000bfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bfc:	f107 0320 	add.w	r3, r7, #32
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 f923 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c0c:	f000 fc4d 	bl	80014aa <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000c10:	4b52      	ldr	r3, [pc, #328]	@ (8000d5c <HAL_ADC_MspInit+0x19c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a51      	ldr	r2, [pc, #324]	@ (8000d5c <HAL_ADC_MspInit+0x19c>)
 8000c18:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000c1a:	4b50      	ldr	r3, [pc, #320]	@ (8000d5c <HAL_ADC_MspInit+0x19c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d10b      	bne.n	8000c3a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000c22:	4b4f      	ldr	r3, [pc, #316]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c26:	4a4e      	ldr	r2, [pc, #312]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b49      	ldr	r3, [pc, #292]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3e:	4a48      	ldr	r2, [pc, #288]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c40:	f043 0304 	orr.w	r3, r3, #4
 8000c44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c46:	4b46      	ldr	r3, [pc, #280]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	f003 0304 	and.w	r3, r3, #4
 8000c4e:	61bb      	str	r3, [r7, #24]
 8000c50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b43      	ldr	r3, [pc, #268]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a42      	ldr	r2, [pc, #264]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b40      	ldr	r3, [pc, #256]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4a3c      	ldr	r2, [pc, #240]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4b3a      	ldr	r3, [pc, #232]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = SIG_4_Pin|SIG_2_Pin|ADC_9_Pin|ADC_10_Pin;
 8000c82:	230f      	movs	r3, #15
 8000c84:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c86:	2303      	movs	r3, #3
 8000c88:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c92:	4619      	mov	r1, r3
 8000c94:	4833      	ldr	r0, [pc, #204]	@ (8000d64 <HAL_ADC_MspInit+0x1a4>)
 8000c96:	f002 f9cd 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_4_Pin;
 8000c9a:	230b      	movs	r3, #11
 8000c9c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb0:	f002 f9c0 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_OUT_Pin|ADC_3_Pin|GPIO_PIN_14;
 8000cb4:	f245 0301 	movw	r3, #20481	@ 0x5001
 8000cb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4827      	ldr	r0, [pc, #156]	@ (8000d68 <HAL_ADC_MspInit+0x1a8>)
 8000cca:	f002 f9b3 	bl	8003034 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000cce:	e041      	b.n	8000d54 <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a25      	ldr	r2, [pc, #148]	@ (8000d6c <HAL_ADC_MspInit+0x1ac>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d13c      	bne.n	8000d54 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cde:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ce0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ce4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 f8ae 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 8000cf6:	f000 fbd8 	bl	80014aa <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <HAL_ADC_MspInit+0x19c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	3301      	adds	r3, #1
 8000d00:	4a16      	ldr	r2, [pc, #88]	@ (8000d5c <HAL_ADC_MspInit+0x19c>)
 8000d02:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_ADC_MspInit+0x19c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d10b      	bne.n	8000d24 <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d0c:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	4a13      	ldr	r2, [pc, #76]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000d12:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d18:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d24:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d30:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <HAL_ADC_MspInit+0x1a0>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12_Pin;
 8000d3c:	2320      	movs	r3, #32
 8000d3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d40:	2303      	movs	r3, #3
 8000d42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(ADC_12_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	@ (8000d64 <HAL_ADC_MspInit+0x1a4>)
 8000d50:	f002 f970 	bl	8003034 <HAL_GPIO_Init>
}
 8000d54:	bf00      	nop
 8000d56:	3778      	adds	r7, #120	@ 0x78
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000100 	.word	0x20000100
 8000d60:	40021000 	.word	0x40021000
 8000d64:	48000800 	.word	0x48000800
 8000d68:	48000400 	.word	0x48000400
 8000d6c:	50000100 	.word	0x50000100

08000d70 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08c      	sub	sp, #48	@ 0x30
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000d76:	463b      	mov	r3, r7
 8000d78:	2230      	movs	r2, #48	@ 0x30
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 ffcb 	bl	8005d18 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000d82:	4b1b      	ldr	r3, [pc, #108]	@ (8000df0 <MX_DAC1_Init+0x80>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <MX_DAC1_Init+0x84>)
 8000d86:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000d88:	4819      	ldr	r0, [pc, #100]	@ (8000df0 <MX_DAC1_Init+0x80>)
 8000d8a:	f001 ff78 	bl	8002c7e <HAL_DAC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000d94:	f000 fb89 	bl	80014aa <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000db8:	2300      	movs	r3, #0
 8000dba:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480b      	ldr	r0, [pc, #44]	@ (8000df0 <MX_DAC1_Init+0x80>)
 8000dc4:	f001 ff7e 	bl	8002cc4 <HAL_DAC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000dce:	f000 fb6c 	bl	80014aa <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000dd2:	463b      	mov	r3, r7
 8000dd4:	2210      	movs	r2, #16
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4805      	ldr	r0, [pc, #20]	@ (8000df0 <MX_DAC1_Init+0x80>)
 8000dda:	f001 ff73 	bl	8002cc4 <HAL_DAC_ConfigChannel>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000de4:	f000 fb61 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	@ 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000104 	.word	0x20000104
 8000df4:	50000800 	.word	0x50000800

08000df8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a15      	ldr	r2, [pc, #84]	@ (8000e6c <HAL_DAC_MspInit+0x74>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d124      	bne.n	8000e64 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e1a:	4b15      	ldr	r3, [pc, #84]	@ (8000e70 <HAL_DAC_MspInit+0x78>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	4a14      	ldr	r2, [pc, #80]	@ (8000e70 <HAL_DAC_MspInit+0x78>)
 8000e20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e26:	4b12      	ldr	r3, [pc, #72]	@ (8000e70 <HAL_DAC_MspInit+0x78>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	@ (8000e70 <HAL_DAC_MspInit+0x78>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	4a0e      	ldr	r2, [pc, #56]	@ (8000e70 <HAL_DAC_MspInit+0x78>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_DAC_MspInit+0x78>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 8000e4a:	2330      	movs	r3, #48	@ 0x30
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f002 f8e8 	bl	8003034 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000e64:	bf00      	nop
 8000e66:	3728      	adds	r7, #40	@ 0x28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	50000800 	.word	0x50000800
 8000e70:	40021000 	.word	0x40021000

08000e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8a:	4b55      	ldr	r3, [pc, #340]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	4a54      	ldr	r2, [pc, #336]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e96:	4b52      	ldr	r3, [pc, #328]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ea2:	4b4f      	ldr	r3, [pc, #316]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	4a4e      	ldr	r2, [pc, #312]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ea8:	f043 0320 	orr.w	r3, r3, #32
 8000eac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eae:	4b4c      	ldr	r3, [pc, #304]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	f003 0320 	and.w	r3, r3, #32
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eba:	4b49      	ldr	r3, [pc, #292]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	4a48      	ldr	r2, [pc, #288]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec6:	4b46      	ldr	r3, [pc, #280]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed2:	4b43      	ldr	r3, [pc, #268]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	4a42      	ldr	r2, [pc, #264]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ed8:	f043 0302 	orr.w	r3, r3, #2
 8000edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ede:	4b40      	ldr	r3, [pc, #256]	@ (8000fe0 <MX_GPIO_Init+0x16c>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin
 8000eea:	2200      	movs	r2, #0
 8000eec:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 8000ef0:	483c      	ldr	r0, [pc, #240]	@ (8000fe4 <MX_GPIO_Init+0x170>)
 8000ef2:	f002 fa21 	bl	8003338 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin, GPIO_PIN_RESET);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000efc:	483a      	ldr	r0, [pc, #232]	@ (8000fe8 <MX_GPIO_Init+0x174>)
 8000efe:	f002 fa1b 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f0c:	f002 fa14 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin;
 8000f10:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4830      	ldr	r0, [pc, #192]	@ (8000fe8 <MX_GPIO_Init+0x174>)
 8000f26:	f002 f885 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f002 f878 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin;
 8000f44:	f24a 4302 	movw	r3, #41986	@ 0xa402
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4821      	ldr	r0, [pc, #132]	@ (8000fe4 <MX_GPIO_Init+0x170>)
 8000f5e:	f002 f869 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_STATUS_Pin|DIGITAL_IO_4_Pin|SD_CARD_DETECT_Pin;
 8000f62:	f640 2304 	movw	r3, #2564	@ 0xa04
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	481b      	ldr	r0, [pc, #108]	@ (8000fe4 <MX_GPIO_Init+0x170>)
 8000f78:	f002 f85c 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin;
 8000f7c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f82:	2301      	movs	r3, #1
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4814      	ldr	r0, [pc, #80]	@ (8000fe8 <MX_GPIO_Init+0x174>)
 8000f96:	f002 f84d 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 8000f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb6:	f002 f83d 	bl	8003034 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = WARN_STATUS_Pin|STATUS_Pin;
 8000fba:	23a0      	movs	r3, #160	@ 0xa0
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4804      	ldr	r0, [pc, #16]	@ (8000fe4 <MX_GPIO_Init+0x170>)
 8000fd2:	f002 f82f 	bl	8003034 <HAL_GPIO_Init>

}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	@ 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800

08000fec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_I2C2_Init+0x74>)
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <MX_I2C2_Init+0x78>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <MX_I2C2_Init+0x74>)
 8000ff8:	f240 1203 	movw	r2, #259	@ 0x103
 8000ffc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ffe:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001004:	4b16      	ldr	r3, [pc, #88]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001006:	2201      	movs	r2, #1
 8001008:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <MX_I2C2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001010:	4b13      	ldr	r3, [pc, #76]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001016:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101c:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <MX_I2C2_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <MX_I2C2_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001028:	480d      	ldr	r0, [pc, #52]	@ (8001060 <MX_I2C2_Init+0x74>)
 800102a:	f002 f99d 	bl	8003368 <HAL_I2C_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001034:	f000 fa39 	bl	80014aa <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001038:	2100      	movs	r1, #0
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <MX_I2C2_Init+0x74>)
 800103c:	f002 ffd0 	bl	8003fe0 <HAL_I2CEx_ConfigAnalogFilter>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001046:	f000 fa30 	bl	80014aa <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800104a:	2100      	movs	r1, #0
 800104c:	4804      	ldr	r0, [pc, #16]	@ (8001060 <MX_I2C2_Init+0x74>)
 800104e:	f003 f812 	bl	8004076 <HAL_I2CEx_ConfigDigitalFilter>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 fa27 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000118 	.word	0x20000118
 8001064:	40005800 	.word	0x40005800

08001068 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b09c      	sub	sp, #112	@ 0x70
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001080:	f107 0318 	add.w	r3, r7, #24
 8001084:	2244      	movs	r2, #68	@ 0x44
 8001086:	2100      	movs	r1, #0
 8001088:	4618      	mov	r0, r3
 800108a:	f004 fe45 	bl	8005d18 <memset>
  if(i2cHandle->Instance==I2C2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a2d      	ldr	r2, [pc, #180]	@ (8001148 <HAL_I2C_MspInit+0xe0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d153      	bne.n	8001140 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 fed1 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010b0:	f000 f9fb 	bl	80014aa <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b4:	4b25      	ldr	r3, [pc, #148]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b8:	4a24      	ldr	r2, [pc, #144]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 80010ba:	f043 0304 	orr.w	r3, r3, #4
 80010be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c0:	4b22      	ldr	r3, [pc, #136]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b1f      	ldr	r3, [pc, #124]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d0:	4a1e      	ldr	r2, [pc, #120]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d8:	4b1c      	ldr	r3, [pc, #112]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e4:	2310      	movs	r3, #16
 80010e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e8:	2312      	movs	r3, #18
 80010ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010f4:	2304      	movs	r3, #4
 80010f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	@ (8001150 <HAL_I2C_MspInit+0xe8>)
 8001100:	f001 ff98 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001108:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001116:	2304      	movs	r3, #4
 8001118:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001124:	f001 ff86 	bl	8003034 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001128:	4b08      	ldr	r3, [pc, #32]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112c:	4a07      	ldr	r2, [pc, #28]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 800112e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001132:	6593      	str	r3, [r2, #88]	@ 0x58
 8001134:	4b05      	ldr	r3, [pc, #20]	@ (800114c <HAL_I2C_MspInit+0xe4>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001138:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001140:	bf00      	nop
 8001142:	3770      	adds	r7, #112	@ 0x70
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40005800 	.word	0x40005800
 800114c:	40021000 	.word	0x40021000
 8001150:	48000800 	.word	0x48000800

08001154 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af02      	add	r7, sp, #8
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2] = {0};
 800115e:	2300      	movs	r3, #0
 8001160:	813b      	strh	r3, [r7, #8]
	int32_t tempC = -100;
 8001162:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001166:	617b      	str	r3, [r7, #20]
		// Receive the temperature data
	//if (HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY) != HAL_OK) { // Receive is unsuccessfull
		// Reception error
		//HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
	//}
	if (HAL_I2C_IsDeviceReady (&hi2c2, MCP9804_ADDR, 2, HAL_MAX_DELAY) == HAL_OK) { // Ready is unsuccessfull
 8001168:	f04f 33ff 	mov.w	r3, #4294967295
 800116c:	2202      	movs	r2, #2
 800116e:	211c      	movs	r1, #28
 8001170:	4833      	ldr	r0, [pc, #204]	@ (8001240 <readMCP9804Temp+0xec>)
 8001172:	f002 fba3 	bl	80038bc <HAL_I2C_IsDeviceReady>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d15c      	bne.n	8001236 <readMCP9804Temp+0xe2>
			// Reception error
		if (HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &tempRegAddr, 1, HAL_MAX_DELAY) != HAL_OK) {
 800117c:	1dfa      	adds	r2, r7, #7
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2301      	movs	r3, #1
 8001186:	211c      	movs	r1, #28
 8001188:	482d      	ldr	r0, [pc, #180]	@ (8001240 <readMCP9804Temp+0xec>)
 800118a:	f002 f989 	bl	80034a0 <HAL_I2C_Master_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d011      	beq.n	80011b8 <readMCP9804Temp+0x64>
			HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800119a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119e:	f002 f8cb 	bl	8003338 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 80011a2:	2201      	movs	r2, #1
 80011a4:	2120      	movs	r1, #32
 80011a6:	4827      	ldr	r0, [pc, #156]	@ (8001244 <readMCP9804Temp+0xf0>)
 80011a8:	f002 f8c6 	bl	8003338 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 80011ac:	2201      	movs	r2, #1
 80011ae:	2180      	movs	r1, #128	@ 0x80
 80011b0:	4824      	ldr	r0, [pc, #144]	@ (8001244 <readMCP9804Temp+0xf0>)
 80011b2:	f002 f8c1 	bl	8003338 <HAL_GPIO_WritePin>
 80011b6:	e03e      	b.n	8001236 <readMCP9804Temp+0xe2>
		} else {
			HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY);
 80011b8:	f107 0208 	add.w	r2, r7, #8
 80011bc:	f04f 33ff 	mov.w	r3, #4294967295
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2302      	movs	r3, #2
 80011c4:	211c      	movs	r1, #28
 80011c6:	481e      	ldr	r0, [pc, #120]	@ (8001240 <readMCP9804Temp+0xec>)
 80011c8:	f002 fa82 	bl	80036d0 <HAL_I2C_Master_Receive>
			uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 80011cc:	7a3b      	ldrb	r3, [r7, #8]
 80011ce:	021b      	lsls	r3, r3, #8
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	7a7b      	ldrb	r3, [r7, #9]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b21b      	sxth	r3, r3
 80011da:	827b      	strh	r3, [r7, #18]
			rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 80011dc:	8a7b      	ldrh	r3, [r7, #18]
 80011de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011e2:	827b      	strh	r3, [r7, #18]

			int32_t tempC = rawTemp & 0x0FFF;
 80011e4:	8a7b      	ldrh	r3, [r7, #18]
 80011e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ea:	60fb      	str	r3, [r7, #12]
			tempC /= 16.0;
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f7ff f965 	bl	80004bc <__aeabi_i2d>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <readMCP9804Temp+0xf4>)
 80011f8:	f7ff faf4 	bl	80007e4 <__aeabi_ddiv>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fbd6 	bl	80009b4 <__aeabi_d2iz>
 8001208:	4603      	mov	r3, r0
 800120a:	60fb      	str	r3, [r7, #12]

			if (rawTemp & 0x1000) {  // Check sign bit
 800120c:	8a7b      	ldrh	r3, [r7, #18]
 800120e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00f      	beq.n	8001236 <readMCP9804Temp+0xe2>
			  tempC -= 256.0;
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff f950 	bl	80004bc <__aeabi_i2d>
 800121c:	f04f 0200 	mov.w	r2, #0
 8001220:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <readMCP9804Temp+0xf8>)
 8001222:	f7fe fffd 	bl	8000220 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fbc1 	bl	80009b4 <__aeabi_d2iz>
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]
			}
		}
	}
    return tempC;
 8001236:	697b      	ldr	r3, [r7, #20]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000118 	.word	0x20000118
 8001244:	48000400 	.word	0x48000400
 8001248:	40300000 	.word	0x40300000
 800124c:	40700000 	.word	0x40700000

08001250 <main>:

//I2C_HandleTypeDef hi2c2;   //causing error but shouldnt


int main(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001256:	f000 fb88 	bl	800196a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800125a:	f000 f8d9 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125e:	f7ff fe09 	bl	8000e74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001262:	f7ff fbcf 	bl	8000a04 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001266:	f7ff fc45 	bl	8000af4 <MX_ADC2_Init>
  MX_DAC1_Init();
 800126a:	f7ff fd81 	bl	8000d70 <MX_DAC1_Init>
  MX_SPI1_Init();
 800126e:	f000 f923 	bl	80014b8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001272:	f000 f95f 	bl	8001534 <MX_SPI3_Init>
  MX_UCPD1_Init();
 8001276:	f000 fac5 	bl	8001804 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 800127a:	f000 faf1 	bl	8001860 <MX_USB_PCD_Init>
  MX_I2C2_Init();
 800127e:	f7ff feb5 	bl	8000fec <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /*int32_t SDwrite;
  UINT bytesWritten;*/

  uint32_t status = HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	617b      	str	r3, [r7, #20]

  int num_bytes = 4;
 8001286:	2304      	movs	r3, #4
 8001288:	613b      	str	r3, [r7, #16]

  uint8_t dataToSend[4];
  dataToSend[0] = 0x5;// Example data
 800128a:	2305      	movs	r3, #5
 800128c:	713b      	strb	r3, [r7, #4]
  dataToSend[1] = 0x5;// Example data
 800128e:	2305      	movs	r3, #5
 8001290:	717b      	strb	r3, [r7, #5]
  dataToSend[2] = 0x5;// Example data
 8001292:	2305      	movs	r3, #5
 8001294:	71bb      	strb	r3, [r7, #6]
  dataToSend[3] = 0x5;// Example data
 8001296:	2305      	movs	r3, #5
 8001298:	71fb      	strb	r3, [r7, #7]

  //HAL_StatusTypeDef sts = HAL_OK;

  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 800129a:	2201      	movs	r2, #1
 800129c:	2180      	movs	r1, #128	@ 0x80
 800129e:	4858      	ldr	r0, [pc, #352]	@ (8001400 <main+0x1b0>)
 80012a0:	f002 f84a 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 80012a4:	2201      	movs	r2, #1
 80012a6:	2120      	movs	r1, #32
 80012a8:	4855      	ldr	r0, [pc, #340]	@ (8001400 <main+0x1b0>)
 80012aa:	f002 f845 	bl	8003338 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 80012ae:	2201      	movs	r2, #1
 80012b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012b8:	f002 f83e 	bl	8003338 <HAL_GPIO_WritePin>


  if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80012bc:	4851      	ldr	r0, [pc, #324]	@ (8001404 <main+0x1b4>)
 80012be:	f002 f853 	bl	8003368 <HAL_I2C_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d004      	beq.n	80012d2 <main+0x82>
          // Initialization error
	  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 80012c8:	2200      	movs	r2, #0
 80012ca:	2180      	movs	r1, #128	@ 0x80
 80012cc:	484c      	ldr	r0, [pc, #304]	@ (8001400 <main+0x1b0>)
 80012ce:	f002 f833 	bl	8003338 <HAL_GPIO_WritePin>
      }
  uint8_t tempRegAddr = 0x05;
 80012d2:	2305      	movs	r3, #5
 80012d4:	73fb      	strb	r3, [r7, #15]
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
	  }*/

	HAL_Delay(1000);
 80012d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012da:	f000 fbb7 	bl	8001a4c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // CS low Digital IO 1 COMM_EN_3
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012e4:	4848      	ldr	r0, [pc, #288]	@ (8001408 <main+0x1b8>)
 80012e6:	f002 f827 	bl	8003338 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, (uint8_t *)&dataToSend, num_bytes, HAL_MAX_DELAY);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	1d39      	adds	r1, r7, #4
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	4845      	ldr	r0, [pc, #276]	@ (800140c <main+0x1bc>)
 80012f6:	f004 f844 	bl	8005382 <HAL_SPI_Transmit>
 80012fa:	4603      	mov	r3, r0
 80012fc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // CS high Digital IO 1 COMM_EN_3
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001304:	4840      	ldr	r0, [pc, #256]	@ (8001408 <main+0x1b8>)
 8001306:	f002 f817 	bl	8003338 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <main+0xe4>
	{
		HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 8001310:	2200      	movs	r2, #0
 8001312:	2180      	movs	r1, #128	@ 0x80
 8001314:	483a      	ldr	r0, [pc, #232]	@ (8001400 <main+0x1b0>)
 8001316:	f002 f80f 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800131a:	2201      	movs	r2, #1
 800131c:	2120      	movs	r1, #32
 800131e:	4838      	ldr	r0, [pc, #224]	@ (8001400 <main+0x1b0>)
 8001320:	f002 f80a 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001324:	2201      	movs	r2, #1
 8001326:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800132a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800132e:	f002 f803 	bl	8003338 <HAL_GPIO_WritePin>
 8001332:	e025      	b.n	8001380 <main+0x130>
	} else if (status == HAL_BUSY){
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d111      	bne.n	800135e <main+0x10e>
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001344:	f001 fff8 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 8001348:	2200      	movs	r2, #0
 800134a:	2120      	movs	r1, #32
 800134c:	482c      	ldr	r0, [pc, #176]	@ (8001400 <main+0x1b0>)
 800134e:	f001 fff3 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001352:	2201      	movs	r2, #1
 8001354:	2180      	movs	r1, #128	@ 0x80
 8001356:	482a      	ldr	r0, [pc, #168]	@ (8001400 <main+0x1b0>)
 8001358:	f001 ffee 	bl	8003338 <HAL_GPIO_WritePin>
 800135c:	e010      	b.n	8001380 <main+0x130>
	}
	else
	{
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001364:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001368:	f001 ffe6 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800136c:	2201      	movs	r2, #1
 800136e:	2120      	movs	r1, #32
 8001370:	4823      	ldr	r0, [pc, #140]	@ (8001400 <main+0x1b0>)
 8001372:	f001 ffe1 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001376:	2201      	movs	r2, #1
 8001378:	2180      	movs	r1, #128	@ 0x80
 800137a:	4821      	ldr	r0, [pc, #132]	@ (8001400 <main+0x1b0>)
 800137c:	f001 ffdc 	bl	8003338 <HAL_GPIO_WritePin>
	}



	HAL_Delay(1000);
 8001380:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001384:	f000 fb62 	bl	8001a4c <HAL_Delay>
	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn on error LED
 8001388:	2201      	movs	r2, #1
 800138a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800138e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001392:	f001 ffd1 	bl	8003338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001396:	2201      	movs	r2, #1
 8001398:	2120      	movs	r1, #32
 800139a:	4819      	ldr	r0, [pc, #100]	@ (8001400 <main+0x1b0>)
 800139c:	f001 ffcc 	bl	8003338 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 80013a0:	2201      	movs	r2, #1
 80013a2:	2180      	movs	r1, #128	@ 0x80
 80013a4:	4816      	ldr	r0, [pc, #88]	@ (8001400 <main+0x1b0>)
 80013a6:	f001 ffc7 	bl	8003338 <HAL_GPIO_WritePin>
	int32_t tempC = readMCP9804Temp(tempRegAddr);
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fed1 	bl	8001154 <readMCP9804Temp>
 80013b2:	60b8      	str	r0, [r7, #8]
	if (tempC == -100) {
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80013ba:	d110      	bne.n	80013de <main+0x18e>
		//temp read error
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 80013bc:	2200      	movs	r2, #0
 80013be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c6:	f001 ffb7 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn of error LED
 80013ca:	2200      	movs	r2, #0
 80013cc:	2120      	movs	r1, #32
 80013ce:	480c      	ldr	r0, [pc, #48]	@ (8001400 <main+0x1b0>)
 80013d0:	f001 ffb2 	bl	8003338 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET); // Turn of success LED
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	@ 0x80
 80013d8:	4809      	ldr	r0, [pc, #36]	@ (8001400 <main+0x1b0>)
 80013da:	f001 ffad 	bl	8003338 <HAL_GPIO_WritePin>
	}
	dataToSend[0] = (tempC >> 24) & 0xFF;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	0e1b      	lsrs	r3, r3, #24
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	713b      	strb	r3, [r7, #4]
	dataToSend[1] = (tempC >> 16) & 0xFF;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	141b      	asrs	r3, r3, #16
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	717b      	strb	r3, [r7, #5]
	dataToSend[2] = (tempC >> 8) & 0xFF;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	121b      	asrs	r3, r3, #8
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	71bb      	strb	r3, [r7, #6]
	dataToSend[3] = tempC & 0xFF;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	71fb      	strb	r3, [r7, #7]
  {// mototola or TIS versions who knows which is on or compatable with arduino due to (Frame Formats) for spi
 80013fc:	e76b      	b.n	80012d6 <main+0x86>
 80013fe:	bf00      	nop
 8001400:	48000400 	.word	0x48000400
 8001404:	20000118 	.word	0x20000118
 8001408:	48000800 	.word	0x48000800
 800140c:	2000016c 	.word	0x2000016c

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b094      	sub	sp, #80	@ 0x50
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0318 	add.w	r3, r7, #24
 800141a:	2238      	movs	r2, #56	@ 0x38
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f004 fc7a 	bl	8005d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001432:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001436:	f002 ff63 	bl	8004300 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800143a:	2302      	movs	r3, #2
 800143c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001444:	2340      	movs	r3, #64	@ 0x40
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001450:	2301      	movs	r3, #1
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001454:	230c      	movs	r3, #12
 8001456:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800145c:	2304      	movs	r3, #4
 800145e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f002 ffed 	bl	8004448 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001474:	f000 f819 	bl	80014aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147c:	2301      	movs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001484:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f003 faea 	bl	8004a6c <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800149e:	f000 f804 	bl	80014aa <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ae:	b672      	cpsid	i
}
 80014b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b2:	bf00      	nop
 80014b4:	e7fd      	b.n	80014b2 <Error_Handler+0x8>
	...

080014b8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <MX_SPI1_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <MX_SPI1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_SPI1_Init+0x74>)
 80014c4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_SPI1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d0:	4b16      	ldr	r3, [pc, #88]	@ (800152c <MX_SPI1_Init+0x74>)
 80014d2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d8:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_SPI1_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <MX_SPI1_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_SPI1_Init+0x74>)
 80014e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_SPI1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_SPI1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_SPI1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <MX_SPI1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <MX_SPI1_Init+0x74>)
 8001506:	2207      	movs	r2, #7
 8001508:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <MX_SPI1_Init+0x74>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <MX_SPI1_Init+0x74>)
 8001512:	2208      	movs	r2, #8
 8001514:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_SPI1_Init+0x74>)
 8001518:	f003 fe88 	bl	800522c <HAL_SPI_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f7ff ffc2 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	2000016c 	.word	0x2000016c
 8001530:	40013000 	.word	0x40013000

08001534 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001538:	4b1b      	ldr	r3, [pc, #108]	@ (80015a8 <MX_SPI3_Init+0x74>)
 800153a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ac <MX_SPI3_Init+0x78>)
 800153c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800153e:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001540:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001544:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_SPI3_Init+0x74>)
 800154e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001552:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_SPI3_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001566:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_SPI3_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_SPI3_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001582:	2207      	movs	r2, #7
 8001584:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_SPI3_Init+0x74>)
 800158e:	2208      	movs	r2, #8
 8001590:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_SPI3_Init+0x74>)
 8001594:	f003 fe4a 	bl	800522c <HAL_SPI_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800159e:	f7ff ff84 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200001d0 	.word	0x200001d0
 80015ac:	40003c00 	.word	0x40003c00

080015b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 031c 	add.w	r3, r7, #28
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a3d      	ldr	r2, [pc, #244]	@ (80016c4 <HAL_SPI_MspInit+0x114>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d145      	bne.n	800165e <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015d2:	4b3d      	ldr	r3, [pc, #244]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015d6:	4a3c      	ldr	r2, [pc, #240]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 80015d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015de:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 80015e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015e6:	61bb      	str	r3, [r7, #24]
 80015e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	4b37      	ldr	r3, [pc, #220]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4a36      	ldr	r2, [pc, #216]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4a30      	ldr	r2, [pc, #192]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800161a:	23c0      	movs	r3, #192	@ 0xc0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162a:	2305      	movs	r3, #5
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 031c 	add.w	r3, r7, #28
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001638:	f001 fcfc 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800163c:	2308      	movs	r3, #8
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800164c:	2305      	movs	r3, #5
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	481d      	ldr	r0, [pc, #116]	@ (80016cc <HAL_SPI_MspInit+0x11c>)
 8001658:	f001 fcec 	bl	8003034 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800165c:	e02d      	b.n	80016ba <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <HAL_SPI_MspInit+0x120>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d128      	bne.n	80016ba <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001668:	4b17      	ldr	r3, [pc, #92]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	4a16      	ldr	r2, [pc, #88]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 800166e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001672:	6593      	str	r3, [r2, #88]	@ 0x58
 8001674:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 8001676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001678:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001680:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 8001682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001684:	4a10      	ldr	r2, [pc, #64]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168c:	4b0e      	ldr	r3, [pc, #56]	@ (80016c8 <HAL_SPI_MspInit+0x118>)
 800168e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001698:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800169c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169e:	2302      	movs	r3, #2
 80016a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016aa:	2306      	movs	r3, #6
 80016ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4807      	ldr	r0, [pc, #28]	@ (80016d4 <HAL_SPI_MspInit+0x124>)
 80016b6:	f001 fcbd 	bl	8003034 <HAL_GPIO_Init>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	@ 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40013000 	.word	0x40013000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	48000400 	.word	0x48000400
 80016d0:	40003c00 	.word	0x40003c00
 80016d4:	48000800 	.word	0x48000800

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <HAL_MspInit+0x44>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e2:	4a0e      	ldr	r2, [pc, #56]	@ (800171c <HAL_MspInit+0x44>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <HAL_MspInit+0x44>)
 80016ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	@ (800171c <HAL_MspInit+0x44>)
 80016f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fa:	4a08      	ldr	r2, [pc, #32]	@ (800171c <HAL_MspInit+0x44>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001700:	6593      	str	r3, [r2, #88]	@ 0x58
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_MspInit+0x44>)
 8001704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <NMI_Handler+0x4>

08001728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <MemManage_Handler+0x4>

08001738 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <BusFault_Handler+0x4>

08001740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <UsageFault_Handler+0x4>

08001748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001776:	f000 f94b 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	@ (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017b0:	4907      	ldr	r1, [pc, #28]	@ (80017d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017b8:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017c2:	68fb      	ldr	r3, [r7, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40021000 	.word	0x40021000

080017d4 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <LL_APB1_GRP2_EnableClock+0x2c>)
 80017de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017e0:	4907      	ldr	r1, [pc, #28]	@ (8001800 <LL_APB1_GRP2_EnableClock+0x2c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <LL_APB1_GRP2_EnableClock+0x2c>)
 80017ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4013      	ands	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	bf00      	nop
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40021000 	.word	0x40021000

08001804 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	463b      	mov	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
 8001818:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800181a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800181e:	f7ff ffd9 	bl	80017d4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001822:	2002      	movs	r0, #2
 8001824:	f7ff ffbe 	bl	80017a4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001828:	2310      	movs	r3, #16
 800182a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800182c:	2303      	movs	r3, #3
 800182e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001834:	463b      	mov	r3, r7
 8001836:	4619      	mov	r1, r3
 8001838:	4808      	ldr	r0, [pc, #32]	@ (800185c <MX_UCPD1_Init+0x58>)
 800183a:	f004 f9c6 	bl	8005bca <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800183e:	2340      	movs	r3, #64	@ 0x40
 8001840:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001842:	2303      	movs	r3, #3
 8001844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	463b      	mov	r3, r7
 800184c:	4619      	mov	r1, r3
 800184e:	4803      	ldr	r0, [pc, #12]	@ (800185c <MX_UCPD1_Init+0x58>)
 8001850:	f004 f9bb 	bl	8005bca <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	48000400 	.word	0x48000400

08001860 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8001864:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 8001866:	4a11      	ldr	r2, [pc, #68]	@ (80018ac <MX_USB_PCD_Init+0x4c>)
 8001868:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 800186c:	2208      	movs	r2, #8
 800186e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001870:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 8001872:	2202      	movs	r2, #2
 8001874:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 8001878:	2202      	movs	r2, #2
 800187a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800187c:	4b0a      	ldr	r3, [pc, #40]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 800187e:	2200      	movs	r2, #0
 8001880:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 8001884:	2200      	movs	r2, #0
 8001886:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001888:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 8001890:	2200      	movs	r2, #0
 8001892:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8001894:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <MX_USB_PCD_Init+0x48>)
 8001896:	f002 fc3a 	bl	800410e <HAL_PCD_Init>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80018a0:	f7ff fe03 	bl	80014aa <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000234 	.word	0x20000234
 80018ac:	40005c00 	.word	0x40005c00

080018b0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b094      	sub	sp, #80	@ 0x50
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2244      	movs	r2, #68	@ 0x44
 80018be:	2100      	movs	r1, #0
 80018c0:	4618      	mov	r0, r3
 80018c2:	f004 fa29 	bl	8005d18 <memset>
  if(pcdHandle->Instance==USB)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a11      	ldr	r2, [pc, #68]	@ (8001910 <HAL_PCD_MspInit+0x60>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d11b      	bne.n	8001908 <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80018d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80018d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80018da:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	4618      	mov	r0, r3
 80018e2:	f003 fab3 	bl	8004e4c <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 80018ec:	f7ff fddd 	bl	80014aa <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <HAL_PCD_MspInit+0x64>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f4:	4a07      	ldr	r2, [pc, #28]	@ (8001914 <HAL_PCD_MspInit+0x64>)
 80018f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80018fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80018fc:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_PCD_MspInit+0x64>)
 80018fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8001908:	bf00      	nop
 800190a:	3750      	adds	r7, #80	@ 0x50
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40005c00 	.word	0x40005c00
 8001914:	40021000 	.word	0x40021000

08001918 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001918:	480d      	ldr	r0, [pc, #52]	@ (8001950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800191a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800191c:	f7ff ff30 	bl	8001780 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480c      	ldr	r0, [pc, #48]	@ (8001954 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490d      	ldr	r1, [pc, #52]	@ (8001958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0d      	ldr	r2, [pc, #52]	@ (800195c <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0a      	ldr	r4, [pc, #40]	@ (8001964 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f004 f9ef 	bl	8005d28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194a:	f7ff fc81 	bl	8001250 <main>

0800194e <LoopForever>:

LoopForever:
    b LoopForever
 800194e:	e7fe      	b.n	800194e <LoopForever>
  ldr   r0, =_estack
 8001950:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001958:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800195c:	08005da0 	.word	0x08005da0
  ldr r2, =_sbss
 8001960:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001964:	20000514 	.word	0x20000514

08001968 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC1_2_IRQHandler>

0800196a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001970:	2300      	movs	r3, #0
 8001972:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001974:	2003      	movs	r0, #3
 8001976:	f001 f951 	bl	8002c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197a:	200f      	movs	r0, #15
 800197c:	f000 f80e 	bl	800199c <HAL_InitTick>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d002      	beq.n	800198c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	e001      	b.n	8001990 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800198c:	f7ff fea4 	bl	80016d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001990:	79fb      	ldrb	r3, [r7, #7]

}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
	...

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019a8:	4b16      	ldr	r3, [pc, #88]	@ (8001a04 <HAL_InitTick+0x68>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d022      	beq.n	80019f6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019b0:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_InitTick+0x6c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <HAL_InitTick+0x68>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80019bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f001 f94e 	bl	8002c66 <HAL_SYSTICK_Config>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d10f      	bne.n	80019f0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b0f      	cmp	r3, #15
 80019d4:	d809      	bhi.n	80019ea <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d6:	2200      	movs	r2, #0
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	f04f 30ff 	mov.w	r0, #4294967295
 80019de:	f001 f928 	bl	8002c32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e2:	4a0a      	ldr	r2, [pc, #40]	@ (8001a0c <HAL_InitTick+0x70>)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6013      	str	r3, [r2, #0]
 80019e8:	e007      	b.n	80019fa <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	73fb      	strb	r3, [r7, #15]
 80019ee:	e004      	b.n	80019fa <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e001      	b.n	80019fa <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000008 	.word	0x20000008
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_IncTick+0x1c>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <HAL_IncTick+0x20>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a03      	ldr	r2, [pc, #12]	@ (8001a2c <HAL_IncTick+0x1c>)
 8001a20:	6013      	str	r3, [r2, #0]
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	20000510 	.word	0x20000510
 8001a30:	20000008 	.word	0x20000008

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000510 	.word	0x20000510

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d004      	beq.n	8001a70 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <HAL_Delay+0x40>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a70:	bf00      	nop
 8001a72:	f7ff ffdf 	bl	8001a34 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d8f7      	bhi.n	8001a72 <HAL_Delay+0x26>
  {
  }
}
 8001a82:	bf00      	nop
 8001a84:	bf00      	nop
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000008 	.word	0x20000008

08001a90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	609a      	str	r2, [r3, #8]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	609a      	str	r2, [r3, #8]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	3360      	adds	r3, #96	@ 0x60
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <LL_ADC_SetOffset+0x44>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	4313      	orrs	r3, r2
 8001b28:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	03fff000 	.word	0x03fff000

08001b40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3360      	adds	r3, #96	@ 0x60
 8001b4e:	461a      	mov	r2, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b087      	sub	sp, #28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	3360      	adds	r3, #96	@ 0x60
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	431a      	orrs	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b96:	bf00      	nop
 8001b98:	371c      	adds	r7, #28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b087      	sub	sp, #28
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3360      	adds	r3, #96	@ 0x60
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bcc:	bf00      	nop
 8001bce:	371c      	adds	r7, #28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3360      	adds	r3, #96	@ 0x60
 8001be8:	461a      	mov	r2, r3
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	4413      	add	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c02:	bf00      	nop
 8001c04:	371c      	adds	r7, #28
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	615a      	str	r2, [r3, #20]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b087      	sub	sp, #28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3330      	adds	r3, #48	@ 0x30
 8001c44:	461a      	mov	r2, r3
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	f003 030c 	and.w	r3, r3, #12
 8001c50:	4413      	add	r3, r2
 8001c52:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	211f      	movs	r1, #31
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0e9b      	lsrs	r3, r3, #26
 8001c6c:	f003 011f 	and.w	r1, r3, #31
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c80:	bf00      	nop
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	0e5b      	lsrs	r3, r3, #25
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	4413      	add	r3, r2
 8001caa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	0d1b      	lsrs	r3, r3, #20
 8001cb4:	f003 031f 	and.w	r3, r3, #31
 8001cb8:	2107      	movs	r1, #7
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	0d1b      	lsrs	r3, r3, #20
 8001cc6:	f003 031f 	and.w	r3, r3, #31
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	401a      	ands	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0318 	and.w	r3, r3, #24
 8001d06:	4908      	ldr	r1, [pc, #32]	@ (8001d28 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d08:	40d9      	lsrs	r1, r3
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	400b      	ands	r3, r1
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	431a      	orrs	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	0007ffff 	.word	0x0007ffff

08001d2c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6093      	str	r3, [r2, #8]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d64:	d101      	bne.n	8001d6a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e000      	b.n	8001d6c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d88:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d8c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001db4:	d101      	bne.n	8001dba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d101      	bne.n	8001de0 <LL_ADC_IsEnabled+0x18>
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <LL_ADC_IsEnabled+0x1a>
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d101      	bne.n	8001e06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b08      	cmp	r3, #8
 8001e26:	d101      	bne.n	8001e2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
	...

08001e3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e3c:	b590      	push	{r4, r7, lr}
 8001e3e:	b089      	sub	sp, #36	@ 0x24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e167      	b.n	8002126 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f7fe feab 	bl	8000bc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff67 	bl	8001d50 <LL_ADC_IsDeepPowerDownEnabled>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d004      	beq.n	8001e92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff4d 	bl	8001d2c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff82 	bl	8001da0 <LL_ADC_IsInternalRegulatorEnabled>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff66 	bl	8001d78 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eac:	4ba0      	ldr	r3, [pc, #640]	@ (8002130 <HAL_ADC_Init+0x2f4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	099b      	lsrs	r3, r3, #6
 8001eb2:	4aa0      	ldr	r2, [pc, #640]	@ (8002134 <HAL_ADC_Init+0x2f8>)
 8001eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb8:	099b      	lsrs	r3, r3, #6
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ec0:	e002      	b.n	8001ec8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f9      	bne.n	8001ec2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff64 	bl	8001da0 <LL_ADC_IsInternalRegulatorEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10d      	bne.n	8001efa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee2:	f043 0210 	orr.w	r2, r3, #16
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ff75 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 8001f04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	f003 0310 	and.w	r3, r3, #16
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 8100 	bne.w	8002114 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 80fc 	bne.w	8002114 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f20:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff49 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f3c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001f40:	f7ff ff42 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001f44:	4604      	mov	r4, r0
 8001f46:	487c      	ldr	r0, [pc, #496]	@ (8002138 <HAL_ADC_Init+0x2fc>)
 8001f48:	f7ff ff3e 	bl	8001dc8 <LL_ADC_IsEnabled>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4323      	orrs	r3, r4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4878      	ldr	r0, [pc, #480]	@ (800213c <HAL_ADC_Init+0x300>)
 8001f5c:	f7ff fd98 	bl	8001a90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	7f5b      	ldrb	r3, [r3, #29]
 8001f64:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f6a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f70:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f76:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f7e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d106      	bne.n	8001f9c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	3b01      	subs	r3, #1
 8001f94:	045b      	lsls	r3, r3, #17
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	4b60      	ldr	r3, [pc, #384]	@ (8002140 <HAL_ADC_Init+0x304>)
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	69b9      	ldr	r1, [r7, #24]
 8001fc8:	430b      	orrs	r3, r1
 8001fca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff14 	bl	8001e14 <LL_ADC_INJ_IsConversionOngoing>
 8001fec:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d16d      	bne.n	80020d0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d16a      	bne.n	80020d0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ffe:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002006:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002016:	f023 0302 	bic.w	r3, r3, #2
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	430b      	orrs	r3, r1
 8002022:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d017      	beq.n	800205c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800203a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002044:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6911      	ldr	r1, [r2, #16]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	430b      	orrs	r3, r1
 8002056:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800205a:	e013      	b.n	8002084 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800206a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800207c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002080:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800208a:	2b01      	cmp	r3, #1
 800208c:	d118      	bne.n	80020c0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020b0:	430a      	orrs	r2, r1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	611a      	str	r2, [r3, #16]
 80020be:	e007      	b.n	80020d0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0201 	bic.w	r2, r2, #1
 80020ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d10c      	bne.n	80020f2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f023 010f 	bic.w	r1, r3, #15
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	1e5a      	subs	r2, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f0:	e007      	b.n	8002102 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 020f 	bic.w	r2, r2, #15
 8002100:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002106:	f023 0303 	bic.w	r3, r3, #3
 800210a:	f043 0201 	orr.w	r2, r3, #1
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002112:	e007      	b.n	8002124 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002118:	f043 0210 	orr.w	r2, r3, #16
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002124:	7ffb      	ldrb	r3, [r7, #31]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd90      	pop	{r4, r7, pc}
 800212e:	bf00      	nop
 8002130:	20000000 	.word	0x20000000
 8002134:	053e2d63 	.word	0x053e2d63
 8002138:	50000100 	.word	0x50000100
 800213c:	50000300 	.word	0x50000300
 8002140:	fff04007 	.word	0xfff04007

08002144 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b0b6      	sub	sp, #216	@ 0xd8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x22>
 8002162:	2302      	movs	r3, #2
 8002164:	e3c8      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x7b4>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe3b 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	f040 83ad 	bne.w	80028da <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6818      	ldr	r0, [r3, #0]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	6859      	ldr	r1, [r3, #4]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	f7ff fd51 	bl	8001c34 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fe29 	bl	8001dee <LL_ADC_REG_IsConversionOngoing>
 800219c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fe35 	bl	8001e14 <LL_ADC_INJ_IsConversionOngoing>
 80021aa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 81d9 	bne.w	800256a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 81d4 	bne.w	800256a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80021ca:	d10f      	bne.n	80021ec <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2200      	movs	r2, #0
 80021d6:	4619      	mov	r1, r3
 80021d8:	f7ff fd58 	bl	8001c8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fd12 	bl	8001c0e <LL_ADC_SetSamplingTimeCommonConfig>
 80021ea:	e00e      	b.n	800220a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	6819      	ldr	r1, [r3, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	461a      	mov	r2, r3
 80021fa:	f7ff fd47 	bl	8001c8c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fd02 	bl	8001c0e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	08db      	lsrs	r3, r3, #3
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b04      	cmp	r3, #4
 800222a:	d022      	beq.n	8002272 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	6919      	ldr	r1, [r3, #16]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800223c:	f7ff fc5c 	bl	8001af8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	6919      	ldr	r1, [r3, #16]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	461a      	mov	r2, r3
 800224e:	f7ff fca8 	bl	8001ba2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x124>
 8002262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002266:	e000      	b.n	800226a <HAL_ADC_ConfigChannel+0x126>
 8002268:	2300      	movs	r3, #0
 800226a:	461a      	mov	r2, r3
 800226c:	f7ff fcb4 	bl	8001bd8 <LL_ADC_SetOffsetSaturation>
 8002270:	e17b      	b.n	800256a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fc61 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 800227e:	4603      	mov	r3, r0
 8002280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_ADC_ConfigChannel+0x15a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2100      	movs	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fc56 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002294:	4603      	mov	r3, r0
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	f003 021f 	and.w	r2, r3, #31
 800229c:	e01e      	b.n	80022dc <HAL_ADC_ConfigChannel+0x198>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff fc4b 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80022c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80022cc:	2320      	movs	r3, #32
 80022ce:	e004      	b.n	80022da <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80022d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d105      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x1b0>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e9b      	lsrs	r3, r3, #26
 80022ee:	f003 031f 	and.w	r3, r3, #31
 80022f2:	e018      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1e2>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800230c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002310:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002318:	2320      	movs	r3, #32
 800231a:	e004      	b.n	8002326 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800231c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002320:	fab3 f383 	clz	r3, r3
 8002324:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002326:	429a      	cmp	r2, r3
 8002328:	d106      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fc1a 	bl	8001b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2101      	movs	r1, #1
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff fbfe 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002344:	4603      	mov	r3, r0
 8002346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10a      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x220>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2101      	movs	r1, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff fbf3 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	0e9b      	lsrs	r3, r3, #26
 800235e:	f003 021f 	and.w	r2, r3, #31
 8002362:	e01e      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x25e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2101      	movs	r1, #1
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fbe8 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002376:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800237a:	fa93 f3a3 	rbit	r3, r3
 800237e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002382:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002386:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800238a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002392:	2320      	movs	r3, #32
 8002394:	e004      	b.n	80023a0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x276>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	0e9b      	lsrs	r3, r3, #26
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	e018      	b.n	80023ec <HAL_ADC_ConfigChannel+0x2a8>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80023ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80023d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80023e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2101      	movs	r1, #1
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fbb7 	bl	8001b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2102      	movs	r1, #2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff fb9b 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x2e6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2102      	movs	r1, #2
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fb90 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	e01e      	b.n	8002468 <HAL_ADC_ConfigChannel+0x324>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2102      	movs	r1, #2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fb85 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002448:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800244c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002450:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002458:	2320      	movs	r3, #32
 800245a:	e004      	b.n	8002466 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800245c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x33c>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0e9b      	lsrs	r3, r3, #26
 800247a:	f003 031f 	and.w	r3, r3, #31
 800247e:	e016      	b.n	80024ae <HAL_ADC_ConfigChannel+0x36a>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002488:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002492:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002494:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002498:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e004      	b.n	80024ae <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80024a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2102      	movs	r1, #2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fb56 	bl	8001b6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2103      	movs	r1, #3
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fb3a 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x3a8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2103      	movs	r1, #3
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff fb2f 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	e017      	b.n	800251c <HAL_ADC_ConfigChannel+0x3d8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2103      	movs	r1, #3
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fb24 	bl	8001b40 <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002504:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002506:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002508:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800250e:	2320      	movs	r3, #32
 8002510:	e003      	b.n	800251a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002512:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002514:	fab3 f383 	clz	r3, r3
 8002518:	b2db      	uxtb	r3, r3
 800251a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002524:	2b00      	cmp	r3, #0
 8002526:	d105      	bne.n	8002534 <HAL_ADC_ConfigChannel+0x3f0>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	0e9b      	lsrs	r3, r3, #26
 800252e:	f003 031f 	and.w	r3, r3, #31
 8002532:	e011      	b.n	8002558 <HAL_ADC_ConfigChannel+0x414>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002542:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002544:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002546:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800254c:	2320      	movs	r3, #32
 800254e:	e003      	b.n	8002558 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002550:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002552:	fab3 f383 	clz	r3, r3
 8002556:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002558:	429a      	cmp	r2, r3
 800255a:	d106      	bne.n	800256a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2200      	movs	r2, #0
 8002562:	2103      	movs	r1, #3
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fb01 	bl	8001b6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff fc2a 	bl	8001dc8 <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 8140 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	6819      	ldr	r1, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	461a      	mov	r2, r3
 800258a:	f7ff fbab 	bl	8001ce4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	4a8f      	ldr	r2, [pc, #572]	@ (80027d0 <HAL_ADC_ConfigChannel+0x68c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	f040 8131 	bne.w	80027fc <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10b      	bne.n	80025c2 <HAL_ADC_ConfigChannel+0x47e>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	0e9b      	lsrs	r3, r3, #26
 80025b0:	3301      	adds	r3, #1
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	2b09      	cmp	r3, #9
 80025b8:	bf94      	ite	ls
 80025ba:	2301      	movls	r3, #1
 80025bc:	2300      	movhi	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	e019      	b.n	80025f6 <HAL_ADC_ConfigChannel+0x4b2>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80025d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80025d2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80025d4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80025da:	2320      	movs	r3, #32
 80025dc:	e003      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80025de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025e0:	fab3 f383 	clz	r3, r3
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 031f 	and.w	r3, r3, #31
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	bf94      	ite	ls
 80025f0:	2301      	movls	r3, #1
 80025f2:	2300      	movhi	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d079      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002602:	2b00      	cmp	r3, #0
 8002604:	d107      	bne.n	8002616 <HAL_ADC_ConfigChannel+0x4d2>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	0e9b      	lsrs	r3, r3, #26
 800260c:	3301      	adds	r3, #1
 800260e:	069b      	lsls	r3, r3, #26
 8002610:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002614:	e015      	b.n	8002642 <HAL_ADC_ConfigChannel+0x4fe>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002626:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002628:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800262e:	2320      	movs	r3, #32
 8002630:	e003      	b.n	800263a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002634:	fab3 f383 	clz	r3, r3
 8002638:	b2db      	uxtb	r3, r3
 800263a:	3301      	adds	r3, #1
 800263c:	069b      	lsls	r3, r3, #26
 800263e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264a:	2b00      	cmp	r3, #0
 800264c:	d109      	bne.n	8002662 <HAL_ADC_ConfigChannel+0x51e>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0e9b      	lsrs	r3, r3, #26
 8002654:	3301      	adds	r3, #1
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	2101      	movs	r1, #1
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	e017      	b.n	8002692 <HAL_ADC_ConfigChannel+0x54e>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266a:	fa93 f3a3 	rbit	r3, r3
 800266e:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002672:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002674:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e003      	b.n	8002686 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800267e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002680:	fab3 f383 	clz	r3, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	3301      	adds	r3, #1
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	ea42 0103 	orr.w	r1, r2, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10a      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x574>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	0e9b      	lsrs	r3, r3, #26
 80026a8:	3301      	adds	r3, #1
 80026aa:	f003 021f 	and.w	r2, r3, #31
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	051b      	lsls	r3, r3, #20
 80026b6:	e018      	b.n	80026ea <HAL_ADC_ConfigChannel+0x5a6>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80026ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80026d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	3301      	adds	r3, #1
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026ea:	430b      	orrs	r3, r1
 80026ec:	e081      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d107      	bne.n	800270a <HAL_ADC_ConfigChannel+0x5c6>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	0e9b      	lsrs	r3, r3, #26
 8002700:	3301      	adds	r3, #1
 8002702:	069b      	lsls	r3, r3, #26
 8002704:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002708:	e015      	b.n	8002736 <HAL_ADC_ConfigChannel+0x5f2>
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002712:	fa93 f3a3 	rbit	r3, r3
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800271c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e003      	b.n	800272e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	3301      	adds	r3, #1
 8002730:	069b      	lsls	r3, r3, #26
 8002732:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x612>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	3301      	adds	r3, #1
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	e017      	b.n	8002786 <HAL_ADC_ConfigChannel+0x642>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	61fb      	str	r3, [r7, #28]
  return result;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f303 	lsl.w	r3, r1, r3
 8002786:	ea42 0103 	orr.w	r1, r2, r3
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10d      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x66e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0e9b      	lsrs	r3, r3, #26
 800279c:	3301      	adds	r3, #1
 800279e:	f003 021f 	and.w	r2, r3, #31
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	3b1e      	subs	r3, #30
 80027aa:	051b      	lsls	r3, r3, #20
 80027ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027b0:	e01e      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x6ac>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	613b      	str	r3, [r7, #16]
  return result;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d104      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 80027ca:	2320      	movs	r3, #32
 80027cc:	e006      	b.n	80027dc <HAL_ADC_ConfigChannel+0x698>
 80027ce:	bf00      	nop
 80027d0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	fab3 f383 	clz	r3, r3
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	3301      	adds	r3, #1
 80027de:	f003 021f 	and.w	r2, r3, #31
 80027e2:	4613      	mov	r3, r2
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	3b1e      	subs	r3, #30
 80027ea:	051b      	lsls	r3, r3, #20
 80027ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027f6:	4619      	mov	r1, r3
 80027f8:	f7ff fa48 	bl	8001c8c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b3f      	ldr	r3, [pc, #252]	@ (8002900 <HAL_ADC_ConfigChannel+0x7bc>)
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d071      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002808:	483e      	ldr	r0, [pc, #248]	@ (8002904 <HAL_ADC_ConfigChannel+0x7c0>)
 800280a:	f7ff f967 	bl	8001adc <LL_ADC_GetCommonPathInternalCh>
 800280e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a3c      	ldr	r2, [pc, #240]	@ (8002908 <HAL_ADC_ConfigChannel+0x7c4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x6e2>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a3a      	ldr	r2, [pc, #232]	@ (800290c <HAL_ADC_ConfigChannel+0x7c8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d127      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800282a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d121      	bne.n	8002876 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800283a:	d157      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002840:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002844:	4619      	mov	r1, r3
 8002846:	482f      	ldr	r0, [pc, #188]	@ (8002904 <HAL_ADC_ConfigChannel+0x7c0>)
 8002848:	f7ff f935 	bl	8001ab6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800284c:	4b30      	ldr	r3, [pc, #192]	@ (8002910 <HAL_ADC_ConfigChannel+0x7cc>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	099b      	lsrs	r3, r3, #6
 8002852:	4a30      	ldr	r2, [pc, #192]	@ (8002914 <HAL_ADC_ConfigChannel+0x7d0>)
 8002854:	fba2 2303 	umull	r2, r3, r2, r3
 8002858:	099b      	lsrs	r3, r3, #6
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002866:	e002      	b.n	800286e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3b01      	subs	r3, #1
 800286c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f9      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002874:	e03a      	b.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a27      	ldr	r2, [pc, #156]	@ (8002918 <HAL_ADC_ConfigChannel+0x7d4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d113      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002880:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002884:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10d      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	@ (800291c <HAL_ADC_ConfigChannel+0x7d8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d02a      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002896:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800289a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800289e:	4619      	mov	r1, r3
 80028a0:	4818      	ldr	r0, [pc, #96]	@ (8002904 <HAL_ADC_ConfigChannel+0x7c0>)
 80028a2:	f7ff f908 	bl	8001ab6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028a6:	e021      	b.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002920 <HAL_ADC_ConfigChannel+0x7dc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d11c      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80028b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a16      	ldr	r2, [pc, #88]	@ (800291c <HAL_ADC_ConfigChannel+0x7d8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d011      	beq.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028d0:	4619      	mov	r1, r3
 80028d2:	480c      	ldr	r0, [pc, #48]	@ (8002904 <HAL_ADC_ConfigChannel+0x7c0>)
 80028d4:	f7ff f8ef 	bl	8001ab6 <LL_ADC_SetCommonPathInternalCh>
 80028d8:	e008      	b.n	80028ec <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80028f4:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	37d8      	adds	r7, #216	@ 0xd8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	80080000 	.word	0x80080000
 8002904:	50000300 	.word	0x50000300
 8002908:	c3210000 	.word	0xc3210000
 800290c:	90c00010 	.word	0x90c00010
 8002910:	20000000 	.word	0x20000000
 8002914:	053e2d63 	.word	0x053e2d63
 8002918:	c7520000 	.word	0xc7520000
 800291c:	50000100 	.word	0x50000100
 8002920:	cb840000 	.word	0xcb840000

08002924 <LL_ADC_IsEnabled>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <LL_ADC_IsEnabled+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_ADC_IsEnabled+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_ADC_REG_IsConversionOngoing>:
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0304 	and.w	r3, r3, #4
 800295a:	2b04      	cmp	r3, #4
 800295c:	d101      	bne.n	8002962 <LL_ADC_REG_IsConversionOngoing+0x18>
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b0a1      	sub	sp, #132	@ 0x84
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002986:	2b01      	cmp	r3, #1
 8002988:	d101      	bne.n	800298e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800298a:	2302      	movs	r3, #2
 800298c:	e08b      	b.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002996:	2300      	movs	r3, #0
 8002998:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800299a:	2300      	movs	r3, #0
 800299c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029a6:	d102      	bne.n	80029ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029a8:	4b41      	ldr	r3, [pc, #260]	@ (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	e001      	b.n	80029b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e06a      	b.n	8002aa6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ffb9 	bl	800294a <LL_ADC_REG_IsConversionOngoing>
 80029d8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff ffb3 	bl	800294a <LL_ADC_REG_IsConversionOngoing>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d14c      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80029ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d149      	bne.n	8002a84 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029f0:	4b30      	ldr	r3, [pc, #192]	@ (8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80029f2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d028      	beq.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80029fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6859      	ldr	r1, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a0e:	035b      	lsls	r3, r3, #13
 8002a10:	430b      	orrs	r3, r1
 8002a12:	431a      	orrs	r2, r3
 8002a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a16:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a1c:	f7ff ff82 	bl	8002924 <LL_ADC_IsEnabled>
 8002a20:	4604      	mov	r4, r0
 8002a22:	4823      	ldr	r0, [pc, #140]	@ (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a24:	f7ff ff7e 	bl	8002924 <LL_ADC_IsEnabled>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	4323      	orrs	r3, r4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d133      	bne.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a38:	f023 030f 	bic.w	r3, r3, #15
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	6811      	ldr	r1, [r2, #0]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	6892      	ldr	r2, [r2, #8]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	431a      	orrs	r2, r3
 8002a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a4a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a4c:	e024      	b.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a58:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a5a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002a5e:	f7ff ff61 	bl	8002924 <LL_ADC_IsEnabled>
 8002a62:	4604      	mov	r4, r0
 8002a64:	4812      	ldr	r0, [pc, #72]	@ (8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002a66:	f7ff ff5d 	bl	8002924 <LL_ADC_IsEnabled>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4323      	orrs	r3, r4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d112      	bne.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a7a:	f023 030f 	bic.w	r3, r3, #15
 8002a7e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002a80:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a82:	e009      	b.n	8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002a96:	e000      	b.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002aa2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3784      	adds	r7, #132	@ 0x84
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd90      	pop	{r4, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	50000100 	.word	0x50000100
 8002ab4:	50000300 	.word	0x50000300

08002ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aea:	4a04      	ldr	r2, [pc, #16]	@ (8002afc <__NVIC_SetPriorityGrouping+0x44>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	60d3      	str	r3, [r2, #12]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	e000ed00 	.word	0xe000ed00

08002b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b04:	4b04      	ldr	r3, [pc, #16]	@ (8002b18 <__NVIC_GetPriorityGrouping+0x18>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	0a1b      	lsrs	r3, r3, #8
 8002b0a:	f003 0307 	and.w	r3, r3, #7
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	4603      	mov	r3, r0
 8002b24:	6039      	str	r1, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	db0a      	blt.n	8002b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	490c      	ldr	r1, [pc, #48]	@ (8002b68 <__NVIC_SetPriority+0x4c>)
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	0112      	lsls	r2, r2, #4
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	440b      	add	r3, r1
 8002b40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b44:	e00a      	b.n	8002b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4908      	ldr	r1, [pc, #32]	@ (8002b6c <__NVIC_SetPriority+0x50>)
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	3b04      	subs	r3, #4
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	b2d2      	uxtb	r2, r2
 8002b58:	440b      	add	r3, r1
 8002b5a:	761a      	strb	r2, [r3, #24]
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000e100 	.word	0xe000e100
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f1c3 0307 	rsb	r3, r3, #7
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	bf28      	it	cs
 8002b8e:	2304      	movcs	r3, #4
 8002b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	3304      	adds	r3, #4
 8002b96:	2b06      	cmp	r3, #6
 8002b98:	d902      	bls.n	8002ba0 <NVIC_EncodePriority+0x30>
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3b03      	subs	r3, #3
 8002b9e:	e000      	b.n	8002ba2 <NVIC_EncodePriority+0x32>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	401a      	ands	r2, r3
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc2:	43d9      	mvns	r1, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc8:	4313      	orrs	r3, r2
         );
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3724      	adds	r7, #36	@ 0x24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
	...

08002bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3b01      	subs	r3, #1
 8002be4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be8:	d301      	bcc.n	8002bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00f      	b.n	8002c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bee:	4a0a      	ldr	r2, [pc, #40]	@ (8002c18 <SysTick_Config+0x40>)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf6:	210f      	movs	r1, #15
 8002bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bfc:	f7ff ff8e 	bl	8002b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <SysTick_Config+0x40>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c06:	4b04      	ldr	r3, [pc, #16]	@ (8002c18 <SysTick_Config+0x40>)
 8002c08:	2207      	movs	r2, #7
 8002c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	e000e010 	.word	0xe000e010

08002c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f7ff ff47 	bl	8002ab8 <__NVIC_SetPriorityGrouping>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b086      	sub	sp, #24
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff5e 	bl	8002b00 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff90 	bl	8002b70 <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5f 	bl	8002b1c <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7ff ffb2 	bl	8002bd8 <SysTick_Config>
 8002c74:	4603      	mov	r3, r0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e014      	b.n	8002cba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	791b      	ldrb	r3, [r3, #4]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f7fe f8a9 	bl	8000df8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_DAC_ConfigChannel+0x1c>
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e19e      	b.n	8003022 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	795b      	ldrb	r3, [r3, #5]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_DAC_ConfigChannel+0x2c>
 8002cec:	2302      	movs	r3, #2
 8002cee:	e198      	b.n	8003022 <HAL_DAC_ConfigChannel+0x35e>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	2b04      	cmp	r3, #4
 8002d02:	d17a      	bne.n	8002dfa <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d04:	f7fe fe96 	bl	8001a34 <HAL_GetTick>
 8002d08:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d13d      	bne.n	8002d8c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d10:	e018      	b.n	8002d44 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d12:	f7fe fe8f 	bl	8001a34 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d911      	bls.n	8002d44 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f043 0208 	orr.w	r2, r3, #8
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e16e      	b.n	8003022 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1df      	bne.n	8002d12 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d5c:	e020      	b.n	8002da0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d5e:	f7fe fe69 	bl	8001a34 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d90f      	bls.n	8002d8c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da0a      	bge.n	8002d8c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	f043 0208 	orr.w	r2, r3, #8
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2203      	movs	r2, #3
 8002d86:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e14a      	b.n	8003022 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	dbe3      	blt.n	8002d5e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002db0:	fa01 f303 	lsl.w	r3, r1, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	ea02 0103 	and.w	r1, r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	409a      	lsls	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	21ff      	movs	r1, #255	@ 0xff
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	43db      	mvns	r3, r3
 8002de2:	ea02 0103 	and.w	r1, r2, r3
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	409a      	lsls	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d11d      	bne.n	8002e3e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f003 0310 	and.w	r3, r3, #16
 8002e10:	221f      	movs	r2, #31
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e32:	4313      	orrs	r3, r2
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e44:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	2207      	movs	r2, #7
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e56:	4013      	ands	r3, r2
 8002e58:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d102      	bne.n	8002e68 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
 8002e66:	e00f      	b.n	8002e88 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d102      	bne.n	8002e76 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002e70:	2301      	movs	r3, #1
 8002e72:	623b      	str	r3, [r7, #32]
 8002e74:	e008      	b.n	8002e88 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	623b      	str	r3, [r7, #32]
 8002e82:	e001      	b.n	8002e88 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	6a3a      	ldr	r2, [r7, #32]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eaa:	4013      	ands	r3, r2
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	791b      	ldrb	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d102      	bne.n	8002ebc <HAL_DAC_ConfigChannel+0x1f8>
 8002eb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002eba:	e000      	b.n	8002ebe <HAL_DAC_ConfigChannel+0x1fa>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0310 	and.w	r3, r3, #16
 8002eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	795b      	ldrb	r3, [r3, #5]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_DAC_ConfigChannel+0x224>
 8002ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ee6:	e000      	b.n	8002eea <HAL_DAC_ConfigChannel+0x226>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d114      	bne.n	8002f2a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002f00:	f001 ff52 	bl	8004da8 <HAL_RCC_GetHCLKFreq>
 8002f04:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4a48      	ldr	r2, [pc, #288]	@ (800302c <HAL_DAC_ConfigChannel+0x368>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d904      	bls.n	8002f18 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f16:	e00f      	b.n	8002f38 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4a45      	ldr	r2, [pc, #276]	@ (8003030 <HAL_DAC_ConfigChannel+0x36c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d90a      	bls.n	8002f36 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f28:	e006      	b.n	8002f38 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	4313      	orrs	r3, r2
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f34:	e000      	b.n	8002f38 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002f36:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f003 0310 	and.w	r3, r3, #16
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f46:	4313      	orrs	r3, r2
 8002f48:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6819      	ldr	r1, [r3, #0]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f003 0310 	and.w	r3, r3, #16
 8002f5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fac:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	22c0      	movs	r2, #192	@ 0xc0
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	400a      	ands	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	089b      	lsrs	r3, r3, #2
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	43db      	mvns	r3, r3
 8002ffe:	ea02 0103 	and.w	r1, r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	409a      	lsls	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003020:	7ffb      	ldrb	r3, [r7, #31]
}
 8003022:	4618      	mov	r0, r3
 8003024:	3728      	adds	r7, #40	@ 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	09896800 	.word	0x09896800
 8003030:	04c4b400 	.word	0x04c4b400

08003034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003042:	e15a      	b.n	80032fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2101      	movs	r1, #1
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 814c 	beq.w	80032f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d005      	beq.n	8003074 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003070:	2b02      	cmp	r3, #2
 8003072:	d130      	bne.n	80030d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	2203      	movs	r2, #3
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030aa:	2201      	movs	r2, #1
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 0201 	and.w	r2, r3, #1
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d017      	beq.n	8003112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	2203      	movs	r2, #3
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d123      	bne.n	8003166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	08da      	lsrs	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3208      	adds	r2, #8
 8003126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	220f      	movs	r2, #15
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691a      	ldr	r2, [r3, #16]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	08da      	lsrs	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3208      	adds	r2, #8
 8003160:	6939      	ldr	r1, [r7, #16]
 8003162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	2203      	movs	r2, #3
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	43db      	mvns	r3, r3
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	4013      	ands	r3, r2
 800317c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 0203 	and.w	r2, r3, #3
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80a6 	beq.w	80032f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031a8:	4b5b      	ldr	r3, [pc, #364]	@ (8003318 <HAL_GPIO_Init+0x2e4>)
 80031aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ac:	4a5a      	ldr	r2, [pc, #360]	@ (8003318 <HAL_GPIO_Init+0x2e4>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80031b4:	4b58      	ldr	r3, [pc, #352]	@ (8003318 <HAL_GPIO_Init+0x2e4>)
 80031b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031c0:	4a56      	ldr	r2, [pc, #344]	@ (800331c <HAL_GPIO_Init+0x2e8>)
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	089b      	lsrs	r3, r3, #2
 80031c6:	3302      	adds	r3, #2
 80031c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0303 	and.w	r3, r3, #3
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4013      	ands	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031ea:	d01f      	beq.n	800322c <HAL_GPIO_Init+0x1f8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003320 <HAL_GPIO_Init+0x2ec>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d019      	beq.n	8003228 <HAL_GPIO_Init+0x1f4>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a4b      	ldr	r2, [pc, #300]	@ (8003324 <HAL_GPIO_Init+0x2f0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d013      	beq.n	8003224 <HAL_GPIO_Init+0x1f0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003328 <HAL_GPIO_Init+0x2f4>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d00d      	beq.n	8003220 <HAL_GPIO_Init+0x1ec>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a49      	ldr	r2, [pc, #292]	@ (800332c <HAL_GPIO_Init+0x2f8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <HAL_GPIO_Init+0x1e8>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a48      	ldr	r2, [pc, #288]	@ (8003330 <HAL_GPIO_Init+0x2fc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d101      	bne.n	8003218 <HAL_GPIO_Init+0x1e4>
 8003214:	2305      	movs	r3, #5
 8003216:	e00a      	b.n	800322e <HAL_GPIO_Init+0x1fa>
 8003218:	2306      	movs	r3, #6
 800321a:	e008      	b.n	800322e <HAL_GPIO_Init+0x1fa>
 800321c:	2304      	movs	r3, #4
 800321e:	e006      	b.n	800322e <HAL_GPIO_Init+0x1fa>
 8003220:	2303      	movs	r3, #3
 8003222:	e004      	b.n	800322e <HAL_GPIO_Init+0x1fa>
 8003224:	2302      	movs	r3, #2
 8003226:	e002      	b.n	800322e <HAL_GPIO_Init+0x1fa>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_GPIO_Init+0x1fa>
 800322c:	2300      	movs	r3, #0
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	f002 0203 	and.w	r2, r2, #3
 8003234:	0092      	lsls	r2, r2, #2
 8003236:	4093      	lsls	r3, r2
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800323e:	4937      	ldr	r1, [pc, #220]	@ (800331c <HAL_GPIO_Init+0x2e8>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800324c:	4b39      	ldr	r3, [pc, #228]	@ (8003334 <HAL_GPIO_Init+0x300>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	43db      	mvns	r3, r3
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4013      	ands	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003270:	4a30      	ldr	r2, [pc, #192]	@ (8003334 <HAL_GPIO_Init+0x300>)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003276:	4b2f      	ldr	r3, [pc, #188]	@ (8003334 <HAL_GPIO_Init+0x300>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	43db      	mvns	r3, r3
 8003280:	693a      	ldr	r2, [r7, #16]
 8003282:	4013      	ands	r3, r2
 8003284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800329a:	4a26      	ldr	r2, [pc, #152]	@ (8003334 <HAL_GPIO_Init+0x300>)
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80032a0:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <HAL_GPIO_Init+0x300>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4013      	ands	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003334 <HAL_GPIO_Init+0x300>)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003334 <HAL_GPIO_Init+0x300>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ee:	4a11      	ldr	r2, [pc, #68]	@ (8003334 <HAL_GPIO_Init+0x300>)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	3301      	adds	r3, #1
 80032f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa22 f303 	lsr.w	r3, r2, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	f47f ae9d 	bne.w	8003044 <HAL_GPIO_Init+0x10>
  }
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	40021000 	.word	0x40021000
 800331c:	40010000 	.word	0x40010000
 8003320:	48000400 	.word	0x48000400
 8003324:	48000800 	.word	0x48000800
 8003328:	48000c00 	.word	0x48000c00
 800332c:	48001000 	.word	0x48001000
 8003330:	48001400 	.word	0x48001400
 8003334:	40010400 	.word	0x40010400

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003354:	e002      	b.n	800335c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e08d      	b.n	8003496 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fe6a 	bl	8001068 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	@ 0x24
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d107      	bne.n	80033e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	e006      	b.n	80033f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80033ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d108      	bne.n	800340a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003406:	605a      	str	r2, [r3, #4]
 8003408:	e007      	b.n	800341a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003418:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800343c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69d9      	ldr	r1, [r3, #28]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a1a      	ldr	r2, [r3, #32]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
	...

080034a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b088      	sub	sp, #32
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	607a      	str	r2, [r7, #4]
 80034aa:	461a      	mov	r2, r3
 80034ac:	460b      	mov	r3, r1
 80034ae:	817b      	strh	r3, [r7, #10]
 80034b0:	4613      	mov	r3, r2
 80034b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b20      	cmp	r3, #32
 80034be:	f040 80fd 	bne.w	80036bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_I2C_Master_Transmit+0x30>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e0f6      	b.n	80036be <HAL_I2C_Master_Transmit+0x21e>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034d8:	f7fe faac 	bl	8001a34 <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	2319      	movs	r3, #25
 80034e4:	2201      	movs	r2, #1
 80034e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 faf6 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e0e1      	b.n	80036be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2221      	movs	r2, #33	@ 0x21
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2210      	movs	r2, #16
 8003506:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	893a      	ldrh	r2, [r7, #8]
 800351a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003526:	b29b      	uxth	r3, r3
 8003528:	2bff      	cmp	r3, #255	@ 0xff
 800352a:	d906      	bls.n	800353a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	22ff      	movs	r2, #255	@ 0xff
 8003530:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003532:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003536:	617b      	str	r3, [r7, #20]
 8003538:	e007      	b.n	800354a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003544:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003548:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d024      	beq.n	800359c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3301      	adds	r3, #1
 800358a:	b2da      	uxtb	r2, r3
 800358c:	8979      	ldrh	r1, [r7, #10]
 800358e:	4b4e      	ldr	r3, [pc, #312]	@ (80036c8 <HAL_I2C_Master_Transmit+0x228>)
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fcf1 	bl	8003f7c <I2C_TransferConfig>
 800359a:	e066      	b.n	800366a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	8979      	ldrh	r1, [r7, #10]
 80035a4:	4b48      	ldr	r3, [pc, #288]	@ (80036c8 <HAL_I2C_Master_Transmit+0x228>)
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 fce6 	bl	8003f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80035b0:	e05b      	b.n	800366a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	6a39      	ldr	r1, [r7, #32]
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fae9 	bl	8003b8e <I2C_WaitOnTXISFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e07b      	b.n	80036be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	781a      	ldrb	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d034      	beq.n	800366a <HAL_I2C_Master_Transmit+0x1ca>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	d130      	bne.n	800366a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	2200      	movs	r2, #0
 8003610:	2180      	movs	r1, #128	@ 0x80
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa62 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e04d      	b.n	80036be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003626:	b29b      	uxth	r3, r3
 8003628:	2bff      	cmp	r3, #255	@ 0xff
 800362a:	d90e      	bls.n	800364a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	22ff      	movs	r2, #255	@ 0xff
 8003630:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003636:	b2da      	uxtb	r2, r3
 8003638:	8979      	ldrh	r1, [r7, #10]
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fc9a 	bl	8003f7c <I2C_TransferConfig>
 8003648:	e00f      	b.n	800366a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	2300      	movs	r3, #0
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003664:	68f8      	ldr	r0, [r7, #12]
 8003666:	f000 fc89 	bl	8003f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d19e      	bne.n	80035b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	6a39      	ldr	r1, [r7, #32]
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 facf 	bl	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e01a      	b.n	80036be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2220      	movs	r2, #32
 800368e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <HAL_I2C_Master_Transmit+0x22c>)
 800369c:	400b      	ands	r3, r1
 800369e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	80002000 	.word	0x80002000
 80036cc:	fe00e800 	.word	0xfe00e800

080036d0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	461a      	mov	r2, r3
 80036dc:	460b      	mov	r3, r1
 80036de:	817b      	strh	r3, [r7, #10]
 80036e0:	4613      	mov	r3, r2
 80036e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	f040 80db 	bne.w	80038a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_I2C_Master_Receive+0x30>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e0d4      	b.n	80038aa <HAL_I2C_Master_Receive+0x1da>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003708:	f7fe f994 	bl	8001a34 <HAL_GetTick>
 800370c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2319      	movs	r3, #25
 8003714:	2201      	movs	r2, #1
 8003716:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f9de 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0bf      	b.n	80038aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2222      	movs	r2, #34	@ 0x22
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2210      	movs	r2, #16
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	893a      	ldrh	r2, [r7, #8]
 800374a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	2bff      	cmp	r3, #255	@ 0xff
 800375a:	d90e      	bls.n	800377a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	22ff      	movs	r2, #255	@ 0xff
 8003760:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003766:	b2da      	uxtb	r2, r3
 8003768:	8979      	ldrh	r1, [r7, #10]
 800376a:	4b52      	ldr	r3, [pc, #328]	@ (80038b4 <HAL_I2C_Master_Receive+0x1e4>)
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fc02 	bl	8003f7c <I2C_TransferConfig>
 8003778:	e06d      	b.n	8003856 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003788:	b2da      	uxtb	r2, r3
 800378a:	8979      	ldrh	r1, [r7, #10]
 800378c:	4b49      	ldr	r3, [pc, #292]	@ (80038b4 <HAL_I2C_Master_Receive+0x1e4>)
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fbf1 	bl	8003f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800379a:	e05c      	b.n	8003856 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	6a39      	ldr	r1, [r7, #32]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 fa7f 	bl	8003ca4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e07c      	b.n	80038aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d034      	beq.n	8003856 <HAL_I2C_Master_Receive+0x186>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d130      	bne.n	8003856 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	2200      	movs	r2, #0
 80037fc:	2180      	movs	r1, #128	@ 0x80
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	f000 f96c 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e04d      	b.n	80038aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2bff      	cmp	r3, #255	@ 0xff
 8003816:	d90e      	bls.n	8003836 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	22ff      	movs	r2, #255	@ 0xff
 800381c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	b2da      	uxtb	r2, r3
 8003824:	8979      	ldrh	r1, [r7, #10]
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fba4 	bl	8003f7c <I2C_TransferConfig>
 8003834:	e00f      	b.n	8003856 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	b2da      	uxtb	r2, r3
 8003846:	8979      	ldrh	r1, [r7, #10]
 8003848:	2300      	movs	r3, #0
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fb93 	bl	8003f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d19d      	bne.n	800379c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	6a39      	ldr	r1, [r7, #32]
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f9d9 	bl	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e01a      	b.n	80038aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2220      	movs	r2, #32
 800387a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	4b0c      	ldr	r3, [pc, #48]	@ (80038b8 <HAL_I2C_Master_Receive+0x1e8>)
 8003888:	400b      	ands	r3, r1
 800388a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038a4:	2300      	movs	r3, #0
 80038a6:	e000      	b.n	80038aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
  }
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	80002400 	.word	0x80002400
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	@ 0x28
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	460b      	mov	r3, r1
 80038ca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	f040 80d6 	bne.w	8003a8a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ec:	d101      	bne.n	80038f2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80038ee:	2302      	movs	r3, #2
 80038f0:	e0cc      	b.n	8003a8c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_I2C_IsDeviceReady+0x44>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0c5      	b.n	8003a8c <HAL_I2C_IsDeviceReady+0x1d0>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2224      	movs	r2, #36	@ 0x24
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_I2C_IsDeviceReady+0x72>
 800391e:	897b      	ldrh	r3, [r7, #10]
 8003920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003924:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003928:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800392c:	e006      	b.n	800393c <HAL_I2C_IsDeviceReady+0x80>
 800392e:	897b      	ldrh	r3, [r7, #10]
 8003930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003934:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003938:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003942:	f7fe f877 	bl	8001a34 <HAL_GetTick>
 8003946:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b20      	cmp	r3, #32
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b10      	cmp	r3, #16
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003974:	e034      	b.n	80039e0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800397c:	d01a      	beq.n	80039b4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fe f859 	bl	8001a34 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	683a      	ldr	r2, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <HAL_I2C_IsDeviceReady+0xd8>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10f      	bne.n	80039b4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a0:	f043 0220 	orr.w	r2, r3, #32
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e06b      	b.n	8003a8c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	bf0c      	ite	eq
 80039c2:	2301      	moveq	r3, #1
 80039c4:	2300      	movne	r3, #0
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80039e0:	7ffb      	ldrb	r3, [r7, #31]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d102      	bne.n	80039ec <HAL_I2C_IsDeviceReady+0x130>
 80039e6:	7fbb      	ldrb	r3, [r7, #30]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0c4      	beq.n	8003976 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d01a      	beq.n	8003a30 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2200      	movs	r2, #0
 8003a02:	2120      	movs	r1, #32
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f869 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e03b      	b.n	8003a8c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e02d      	b.n	8003a8c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	9300      	str	r3, [sp, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	2120      	movs	r1, #32
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 f84e 	bl	8003adc <I2C_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e020      	b.n	8003a8c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2210      	movs	r2, #16
 8003a50:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2220      	movs	r2, #32
 8003a58:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	f63f af56 	bhi.w	8003916 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d103      	bne.n	8003ab2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d007      	beq.n	8003ad0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699a      	ldr	r2, [r3, #24]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	619a      	str	r2, [r3, #24]
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aec:	e03b      	b.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aee:	69ba      	ldr	r2, [r7, #24]
 8003af0:	6839      	ldr	r1, [r7, #0]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f962 	bl	8003dbc <I2C_IsErrorOccurred>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e041      	b.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d02d      	beq.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fd ff93 	bl	8001a34 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d122      	bne.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d113      	bne.n	8003b66 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b42:	f043 0220 	orr.w	r2, r3, #32
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00f      	b.n	8003b86 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699a      	ldr	r2, [r3, #24]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d0b4      	beq.n	8003aee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b9a:	e033      	b.n	8003c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f90b 	bl	8003dbc <I2C_IsErrorOccurred>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e031      	b.n	8003c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d025      	beq.n	8003c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7fd ff3c 	bl	8001a34 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11a      	bne.n	8003c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d013      	beq.n	8003c04 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e007      	b.n	8003c14 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d1c4      	bne.n	8003b9c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c28:	e02f      	b.n	8003c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f8c4 	bl	8003dbc <I2C_IsErrorOccurred>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e02d      	b.n	8003c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fd fef9 	bl	8001a34 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11a      	bne.n	8003c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b20      	cmp	r3, #32
 8003c60:	d013      	beq.n	8003c8a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f043 0220 	orr.w	r2, r3, #32
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e007      	b.n	8003c9a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d1c8      	bne.n	8003c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
	...

08003ca4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003cb4:	e071      	b.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	68b9      	ldr	r1, [r7, #8]
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f87e 	bl	8003dbc <I2C_IsErrorOccurred>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d13b      	bne.n	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d138      	bne.n	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d105      	bne.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	f003 0310 	and.w	r3, r3, #16
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d121      	bne.n	8003d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2204      	movs	r2, #4
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6859      	ldr	r1, [r3, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b24      	ldr	r3, [pc, #144]	@ (8003db8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003d28:	400b      	ands	r3, r1
 8003d2a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
 8003d48:	e002      	b.n	8003d50 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003d50:	f7fd fe70 	bl	8001a34 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d302      	bcc.n	8003d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d119      	bne.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003d66:	7dfb      	ldrb	r3, [r7, #23]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d116      	bne.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d00f      	beq.n	8003d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f043 0220 	orr.w	r2, r3, #32
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d002      	beq.n	8003dae <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d083      	beq.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	fe00e800 	.word	0xfe00e800

08003dbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	@ 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d068      	beq.n	8003eba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2210      	movs	r2, #16
 8003dee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003df0:	e049      	b.n	8003e86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d045      	beq.n	8003e86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dfa:	f7fd fe1b 	bl	8001a34 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <I2C_IsErrorOccurred+0x54>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d13a      	bne.n	8003e86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e32:	d121      	bne.n	8003e78 <I2C_IsErrorOccurred+0xbc>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e3a:	d01d      	beq.n	8003e78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d01a      	beq.n	8003e78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e52:	f7fd fdef 	bl	8001a34 <HAL_GetTick>
 8003e56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e58:	e00e      	b.n	8003e78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e5a:	f7fd fdeb 	bl	8001a34 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b19      	cmp	r3, #25
 8003e66:	d907      	bls.n	8003e78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f043 0320 	orr.w	r3, r3, #32
 8003e6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e76:	e006      	b.n	8003e86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	f003 0320 	and.w	r3, r3, #32
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d1e9      	bne.n	8003e5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	f003 0320 	and.w	r3, r3, #32
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d003      	beq.n	8003e9c <I2C_IsErrorOccurred+0xe0>
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0aa      	beq.n	8003df2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f043 0304 	orr.w	r3, r3, #4
 8003eb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00b      	beq.n	8003ee4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00b      	beq.n	8003f06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00b      	beq.n	8003f28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f043 0302 	orr.w	r3, r3, #2
 8003f16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01c      	beq.n	8003f6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff fdaf 	bl	8003a94 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6859      	ldr	r1, [r3, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <I2C_IsErrorOccurred+0x1bc>)
 8003f42:	400b      	ands	r3, r1
 8003f44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3728      	adds	r7, #40	@ 0x28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	fe00e800 	.word	0xfe00e800

08003f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	817b      	strh	r3, [r7, #10]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f94:	7a7b      	ldrb	r3, [r7, #9]
 8003f96:	041b      	lsls	r3, r3, #16
 8003f98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f9c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003faa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	0d5b      	lsrs	r3, r3, #21
 8003fb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003fba:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <I2C_TransferConfig+0x60>)
 8003fbc:	430b      	orrs	r3, r1
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	ea02 0103 	and.w	r1, r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	03ff63ff 	.word	0x03ff63ff

08003fe0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b20      	cmp	r3, #32
 8003ff4:	d138      	bne.n	8004068 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004000:	2302      	movs	r3, #2
 8004002:	e032      	b.n	800406a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2224      	movs	r2, #36	@ 0x24
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0201 	bic.w	r2, r2, #1
 8004022:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004032:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6819      	ldr	r1, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	e000      	b.n	800406a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004068:	2302      	movs	r3, #2
  }
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004076:	b480      	push	{r7}
 8004078:	b085      	sub	sp, #20
 800407a:	af00      	add	r7, sp, #0
 800407c:	6078      	str	r0, [r7, #4]
 800407e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004086:	b2db      	uxtb	r3, r3
 8004088:	2b20      	cmp	r3, #32
 800408a:	d139      	bne.n	8004100 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004092:	2b01      	cmp	r3, #1
 8004094:	d101      	bne.n	800409a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004096:	2302      	movs	r3, #2
 8004098:	e033      	b.n	8004102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2224      	movs	r2, #36	@ 0x24
 80040a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0201 	bic.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80040c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0c0      	b.n	80042a2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004126:	b2db      	uxtb	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7fd fbbb 	bl	80018b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2203      	movs	r2, #3
 800413e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fdad 	bl	8005ca6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
 8004150:	e03e      	b.n	80041d0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	3311      	adds	r3, #17
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	3310      	adds	r3, #16
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800417a:	7bfa      	ldrb	r2, [r7, #15]
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	00db      	lsls	r3, r3, #3
 8004186:	440b      	add	r3, r1
 8004188:	3313      	adds	r3, #19
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	440b      	add	r3, r1
 800419c:	3320      	adds	r3, #32
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041a2:	7bfa      	ldrb	r2, [r7, #15]
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	3324      	adds	r3, #36	@ 0x24
 80041b2:	2200      	movs	r2, #0
 80041b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	3301      	adds	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	791b      	ldrb	r3, [r3, #4]
 80041d4:	7bfa      	ldrb	r2, [r7, #15]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d3bb      	bcc.n	8004152 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	e044      	b.n	800426a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041e0:	7bfa      	ldrb	r2, [r7, #15]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	440b      	add	r3, r1
 80041ee:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80041f2:	2200      	movs	r2, #0
 80041f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041f6:	7bfa      	ldrb	r2, [r7, #15]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	4413      	add	r3, r2
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	440b      	add	r3, r1
 8004204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800420c:	7bfa      	ldrb	r2, [r7, #15]
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	440b      	add	r3, r1
 800421a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004222:	7bfa      	ldrb	r2, [r7, #15]
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	440b      	add	r3, r1
 8004230:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004238:	7bfa      	ldrb	r2, [r7, #15]
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800424a:	2200      	movs	r2, #0
 800424c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	3301      	adds	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	791b      	ldrb	r3, [r3, #4]
 800426e:	7bfa      	ldrb	r2, [r7, #15]
 8004270:	429a      	cmp	r2, r3
 8004272:	d3b5      	bcc.n	80041e0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004280:	f001 fd2c 	bl	8005cdc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7a9b      	ldrb	r3, [r3, #10]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d102      	bne.n	80042a0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f805 	bl	80042aa <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3710      	adds	r7, #16
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b085      	sub	sp, #20
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d141      	bne.n	8004392 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800430e:	4b4b      	ldr	r3, [pc, #300]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431a:	d131      	bne.n	8004380 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800431c:	4b47      	ldr	r3, [pc, #284]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004322:	4a46      	ldr	r2, [pc, #280]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004328:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800432c:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004334:	4a41      	ldr	r2, [pc, #260]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800433a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800433c:	4b40      	ldr	r3, [pc, #256]	@ (8004440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2232      	movs	r2, #50	@ 0x32
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	4a3f      	ldr	r2, [pc, #252]	@ (8004444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0c9b      	lsrs	r3, r3, #18
 800434e:	3301      	adds	r3, #1
 8004350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004352:	e002      	b.n	800435a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	3b01      	subs	r3, #1
 8004358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800435a:	4b38      	ldr	r3, [pc, #224]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004366:	d102      	bne.n	800436e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f2      	bne.n	8004354 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800436e:	4b33      	ldr	r3, [pc, #204]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800437a:	d158      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e057      	b.n	8004430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004380:	4b2e      	ldr	r3, [pc, #184]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004386:	4a2d      	ldr	r2, [pc, #180]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004388:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800438c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004390:	e04d      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004398:	d141      	bne.n	800441e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800439a:	4b28      	ldr	r3, [pc, #160]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043a6:	d131      	bne.n	800440c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043a8:	4b24      	ldr	r3, [pc, #144]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043ae:	4a23      	ldr	r2, [pc, #140]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80043b8:	4b20      	ldr	r3, [pc, #128]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043c0:	4a1e      	ldr	r2, [pc, #120]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80043c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004440 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2232      	movs	r2, #50	@ 0x32
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004444 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	0c9b      	lsrs	r3, r3, #18
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043de:	e002      	b.n	80043e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80043e6:	4b15      	ldr	r3, [pc, #84]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f2:	d102      	bne.n	80043fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f2      	bne.n	80043e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004406:	d112      	bne.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e011      	b.n	8004430 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004412:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800441c:	e007      	b.n	800442e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800441e:	4b07      	ldr	r3, [pc, #28]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004426:	4a05      	ldr	r2, [pc, #20]	@ (800443c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004428:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800442c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40007000 	.word	0x40007000
 8004440:	20000000 	.word	0x20000000
 8004444:	431bde83 	.word	0x431bde83

08004448 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b088      	sub	sp, #32
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e2fe      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d075      	beq.n	8004552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004466:	4b97      	ldr	r3, [pc, #604]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f003 030c 	and.w	r3, r3, #12
 800446e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004470:	4b94      	ldr	r3, [pc, #592]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	2b0c      	cmp	r3, #12
 800447e:	d102      	bne.n	8004486 <HAL_RCC_OscConfig+0x3e>
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d002      	beq.n	800448c <HAL_RCC_OscConfig+0x44>
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b08      	cmp	r3, #8
 800448a:	d10b      	bne.n	80044a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800448c:	4b8d      	ldr	r3, [pc, #564]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d05b      	beq.n	8004550 <HAL_RCC_OscConfig+0x108>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d157      	bne.n	8004550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e2d9      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044ac:	d106      	bne.n	80044bc <HAL_RCC_OscConfig+0x74>
 80044ae:	4b85      	ldr	r3, [pc, #532]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a84      	ldr	r2, [pc, #528]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	e01d      	b.n	80044f8 <HAL_RCC_OscConfig+0xb0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044c4:	d10c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x98>
 80044c6:	4b7f      	ldr	r3, [pc, #508]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7e      	ldr	r2, [pc, #504]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	4b7c      	ldr	r3, [pc, #496]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a7b      	ldr	r2, [pc, #492]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	e00b      	b.n	80044f8 <HAL_RCC_OscConfig+0xb0>
 80044e0:	4b78      	ldr	r3, [pc, #480]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a77      	ldr	r2, [pc, #476]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b75      	ldr	r3, [pc, #468]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a74      	ldr	r2, [pc, #464]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80044f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d013      	beq.n	8004528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fd fa98 	bl	8001a34 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004508:	f7fd fa94 	bl	8001a34 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b64      	cmp	r3, #100	@ 0x64
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e29e      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800451a:	4b6a      	ldr	r3, [pc, #424]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0xc0>
 8004526:	e014      	b.n	8004552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fd fa84 	bl	8001a34 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004530:	f7fd fa80 	bl	8001a34 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	@ 0x64
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e28a      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004542:	4b60      	ldr	r3, [pc, #384]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0xe8>
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d075      	beq.n	800464a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800455e:	4b59      	ldr	r3, [pc, #356]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004568:	4b56      	ldr	r3, [pc, #344]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d102      	bne.n	800457e <HAL_RCC_OscConfig+0x136>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d002      	beq.n	8004584 <HAL_RCC_OscConfig+0x13c>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b04      	cmp	r3, #4
 8004582:	d11f      	bne.n	80045c4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004584:	4b4f      	ldr	r3, [pc, #316]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_OscConfig+0x154>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e25d      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459c:	4b49      	ldr	r3, [pc, #292]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	4946      	ldr	r1, [pc, #280]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80045b0:	4b45      	ldr	r3, [pc, #276]	@ (80046c8 <HAL_RCC_OscConfig+0x280>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fd f9f1 	bl	800199c <HAL_InitTick>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d043      	beq.n	8004648 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e249      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d023      	beq.n	8004614 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b3d      	ldr	r3, [pc, #244]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a3c      	ldr	r2, [pc, #240]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fd fa2c 	bl	8001a34 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e0:	f7fd fa28 	bl	8001a34 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e232      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f2:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fe:	4b31      	ldr	r3, [pc, #196]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	061b      	lsls	r3, r3, #24
 800460c:	492d      	ldr	r1, [pc, #180]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800460e:	4313      	orrs	r3, r2
 8004610:	604b      	str	r3, [r1, #4]
 8004612:	e01a      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004614:	4b2b      	ldr	r3, [pc, #172]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2a      	ldr	r2, [pc, #168]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800461a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800461e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fd fa08 	bl	8001a34 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004628:	f7fd fa04 	bl	8001a34 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e20e      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800463a:	4b22      	ldr	r3, [pc, #136]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x1e0>
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004648:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d041      	beq.n	80046da <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01c      	beq.n	8004698 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800465e:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004660:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004664:	4a17      	ldr	r2, [pc, #92]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466e:	f7fd f9e1 	bl	8001a34 <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004676:	f7fd f9dd 	bl	8001a34 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e1e7      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004688:	4b0e      	ldr	r3, [pc, #56]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800468a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ef      	beq.n	8004676 <HAL_RCC_OscConfig+0x22e>
 8004696:	e020      	b.n	80046da <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004698:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469e:	4a09      	ldr	r2, [pc, #36]	@ (80046c4 <HAL_RCC_OscConfig+0x27c>)
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fd f9c4 	bl	8001a34 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046ae:	e00d      	b.n	80046cc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b0:	f7fd f9c0 	bl	8001a34 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d906      	bls.n	80046cc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e1ca      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046cc:	4b8c      	ldr	r3, [pc, #560]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80046ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1ea      	bne.n	80046b0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80a6 	beq.w	8004834 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046e8:	2300      	movs	r3, #0
 80046ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ec:	4b84      	ldr	r3, [pc, #528]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80046ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <HAL_RCC_OscConfig+0x2b4>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_RCC_OscConfig+0x2b6>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d00d      	beq.n	800471e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b7f      	ldr	r3, [pc, #508]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004706:	4a7e      	ldr	r2, [pc, #504]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800470c:	6593      	str	r3, [r2, #88]	@ 0x58
 800470e:	4b7c      	ldr	r3, [pc, #496]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800471a:	2301      	movs	r3, #1
 800471c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471e:	4b79      	ldr	r3, [pc, #484]	@ (8004904 <HAL_RCC_OscConfig+0x4bc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d118      	bne.n	800475c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800472a:	4b76      	ldr	r3, [pc, #472]	@ (8004904 <HAL_RCC_OscConfig+0x4bc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a75      	ldr	r2, [pc, #468]	@ (8004904 <HAL_RCC_OscConfig+0x4bc>)
 8004730:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004736:	f7fd f97d 	bl	8001a34 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473e:	f7fd f979 	bl	8001a34 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e183      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004750:	4b6c      	ldr	r3, [pc, #432]	@ (8004904 <HAL_RCC_OscConfig+0x4bc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d108      	bne.n	8004776 <HAL_RCC_OscConfig+0x32e>
 8004764:	4b66      	ldr	r3, [pc, #408]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	4a65      	ldr	r2, [pc, #404]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800476c:	f043 0301 	orr.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004774:	e024      	b.n	80047c0 <HAL_RCC_OscConfig+0x378>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b05      	cmp	r3, #5
 800477c:	d110      	bne.n	80047a0 <HAL_RCC_OscConfig+0x358>
 800477e:	4b60      	ldr	r3, [pc, #384]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004784:	4a5e      	ldr	r2, [pc, #376]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800478e:	4b5c      	ldr	r3, [pc, #368]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004794:	4a5a      	ldr	r2, [pc, #360]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800479e:	e00f      	b.n	80047c0 <HAL_RCC_OscConfig+0x378>
 80047a0:	4b57      	ldr	r3, [pc, #348]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a6:	4a56      	ldr	r2, [pc, #344]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047a8:	f023 0301 	bic.w	r3, r3, #1
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80047b0:	4b53      	ldr	r3, [pc, #332]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	4a52      	ldr	r2, [pc, #328]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047b8:	f023 0304 	bic.w	r3, r3, #4
 80047bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c8:	f7fd f934 	bl	8001a34 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ce:	e00a      	b.n	80047e6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d0:	f7fd f930 	bl	8001a34 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	4293      	cmp	r3, r2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e138      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e6:	4b46      	ldr	r3, [pc, #280]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ed      	beq.n	80047d0 <HAL_RCC_OscConfig+0x388>
 80047f4:	e015      	b.n	8004822 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fd f91d 	bl	8001a34 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fd f919 	bl	8001a34 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e121      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004814:	4b3a      	ldr	r3, [pc, #232]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1ed      	bne.n	80047fe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004822:	7ffb      	ldrb	r3, [r7, #31]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d105      	bne.n	8004834 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004828:	4b35      	ldr	r3, [pc, #212]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800482a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482c:	4a34      	ldr	r2, [pc, #208]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800482e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004832:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d03c      	beq.n	80048ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01c      	beq.n	8004882 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004848:	4b2d      	ldr	r3, [pc, #180]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800484a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800484e:	4a2c      	ldr	r2, [pc, #176]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd f8ec 	bl	8001a34 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004860:	f7fd f8e8 	bl	8001a34 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0f2      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004872:	4b23      	ldr	r3, [pc, #140]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004874:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ef      	beq.n	8004860 <HAL_RCC_OscConfig+0x418>
 8004880:	e01b      	b.n	80048ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004882:	4b1f      	ldr	r3, [pc, #124]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 8004884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004888:	4a1d      	ldr	r2, [pc, #116]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 800488a:	f023 0301 	bic.w	r3, r3, #1
 800488e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004892:	f7fd f8cf 	bl	8001a34 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489a:	f7fd f8cb 	bl	8001a34 <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e0d5      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048ac:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1ef      	bne.n	800489a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80c9 	beq.w	8004a56 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	f000 8083 	beq.w	80049d8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	69db      	ldr	r3, [r3, #28]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d15e      	bne.n	8004998 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a08      	ldr	r2, [pc, #32]	@ (8004900 <HAL_RCC_OscConfig+0x4b8>)
 80048e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fd f8a5 	bl	8001a34 <HAL_GetTick>
 80048ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ec:	e00c      	b.n	8004908 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fd f8a1 	bl	8001a34 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d905      	bls.n	8004908 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0ab      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
 8004900:	40021000 	.word	0x40021000
 8004904:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004908:	4b55      	ldr	r3, [pc, #340]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1ec      	bne.n	80048ee <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004914:	4b52      	ldr	r3, [pc, #328]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	4b52      	ldr	r3, [pc, #328]	@ (8004a64 <HAL_RCC_OscConfig+0x61c>)
 800491a:	4013      	ands	r3, r2
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6a11      	ldr	r1, [r2, #32]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004924:	3a01      	subs	r2, #1
 8004926:	0112      	lsls	r2, r2, #4
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800492e:	0212      	lsls	r2, r2, #8
 8004930:	4311      	orrs	r1, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004936:	0852      	lsrs	r2, r2, #1
 8004938:	3a01      	subs	r2, #1
 800493a:	0552      	lsls	r2, r2, #21
 800493c:	4311      	orrs	r1, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004942:	0852      	lsrs	r2, r2, #1
 8004944:	3a01      	subs	r2, #1
 8004946:	0652      	lsls	r2, r2, #25
 8004948:	4311      	orrs	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800494e:	06d2      	lsls	r2, r2, #27
 8004950:	430a      	orrs	r2, r1
 8004952:	4943      	ldr	r1, [pc, #268]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 8004954:	4313      	orrs	r3, r2
 8004956:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004958:	4b41      	ldr	r3, [pc, #260]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a40      	ldr	r2, [pc, #256]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 800495e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004962:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004964:	4b3e      	ldr	r3, [pc, #248]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a3d      	ldr	r2, [pc, #244]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd f860 	bl	8001a34 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd f85c 	bl	8001a34 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e066      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	4b35      	ldr	r3, [pc, #212]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x530>
 8004996:	e05e      	b.n	8004a56 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004998:	4b31      	ldr	r3, [pc, #196]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a30      	ldr	r2, [pc, #192]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 800499e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fd f846 	bl	8001a34 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd f842 	bl	8001a34 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e04c      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049be:	4b28      	ldr	r3, [pc, #160]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80049ca:	4b25      	ldr	r3, [pc, #148]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	4924      	ldr	r1, [pc, #144]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049d0:	4b25      	ldr	r3, [pc, #148]	@ (8004a68 <HAL_RCC_OscConfig+0x620>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	60cb      	str	r3, [r1, #12]
 80049d6:	e03e      	b.n	8004a56 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	69db      	ldr	r3, [r3, #28]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e039      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049e4:	4b1e      	ldr	r3, [pc, #120]	@ (8004a60 <HAL_RCC_OscConfig+0x618>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	f003 0203 	and.w	r2, r3, #3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d12c      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a02:	3b01      	subs	r3, #1
 8004a04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d123      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d11b      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d113      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d109      	bne.n	8004a52 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a48:	085b      	lsrs	r3, r3, #1
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d001      	beq.n	8004a56 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e000      	b.n	8004a58 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40021000 	.word	0x40021000
 8004a64:	019f800c 	.word	0x019f800c
 8004a68:	feeefffc 	.word	0xfeeefffc

08004a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e11e      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a84:	4b91      	ldr	r3, [pc, #580]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 030f 	and.w	r3, r3, #15
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d910      	bls.n	8004ab4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a92:	4b8e      	ldr	r3, [pc, #568]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f023 020f 	bic.w	r2, r3, #15
 8004a9a:	498c      	ldr	r1, [pc, #560]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aa2:	4b8a      	ldr	r3, [pc, #552]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e106      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d073      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d129      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac8:	4b81      	ldr	r3, [pc, #516]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d101      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e0f4      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004ad8:	f000 f972 	bl	8004dc0 <RCC_GetSysClockFreqFromPLLSource>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4a7c      	ldr	r2, [pc, #496]	@ (8004cd4 <HAL_RCC_ClockConfig+0x268>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d93f      	bls.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004ae6:	4b7a      	ldr	r3, [pc, #488]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d009      	beq.n	8004b06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d033      	beq.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d12f      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b06:	4b72      	ldr	r3, [pc, #456]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b0e:	4a70      	ldr	r2, [pc, #448]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b16:	2380      	movs	r3, #128	@ 0x80
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e024      	b.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b24:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0c6      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b34:	4b66      	ldr	r3, [pc, #408]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0be      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b44:	f000 f8ce 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004b48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4a61      	ldr	r2, [pc, #388]	@ (8004cd4 <HAL_RCC_ClockConfig+0x268>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d909      	bls.n	8004b66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b52:	4b5f      	ldr	r3, [pc, #380]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b5a:	4a5d      	ldr	r2, [pc, #372]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b62:	2380      	movs	r3, #128	@ 0x80
 8004b64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b5a      	ldr	r3, [pc, #360]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4957      	ldr	r1, [pc, #348]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fc ff5c 	bl	8001a34 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fc ff58 	bl	8001a34 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e095      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	4b4e      	ldr	r3, [pc, #312]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 020c 	and.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1eb      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d023      	beq.n	8004bfc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bc0:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	4a42      	ldr	r2, [pc, #264]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bc6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004bca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004bd8:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004be0:	4a3b      	ldr	r2, [pc, #236]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004be2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004be6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be8:	4b39      	ldr	r3, [pc, #228]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4936      	ldr	r1, [pc, #216]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	608b      	str	r3, [r1, #8]
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b80      	cmp	r3, #128	@ 0x80
 8004c00:	d105      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c02:	4b33      	ldr	r3, [pc, #204]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4a32      	ldr	r2, [pc, #200]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d21d      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f023 020f 	bic.w	r2, r3, #15
 8004c24:	4929      	ldr	r1, [pc, #164]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c2c:	f7fc ff02 	bl	8001a34 <HAL_GetTick>
 8004c30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c34:	f7fc fefe 	bl	8001a34 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e03b      	b.n	8004cc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ccc <HAL_RCC_ClockConfig+0x260>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 030f 	and.w	r3, r3, #15
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d1ed      	bne.n	8004c34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c64:	4b1a      	ldr	r3, [pc, #104]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4917      	ldr	r1, [pc, #92]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c82:	4b13      	ldr	r3, [pc, #76]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	490f      	ldr	r1, [pc, #60]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c96:	f000 f825 	bl	8004ce4 <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd0 <HAL_RCC_ClockConfig+0x264>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	490c      	ldr	r1, [pc, #48]	@ (8004cd8 <HAL_RCC_ClockConfig+0x26c>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cdc <HAL_RCC_ClockConfig+0x270>)
 8004cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <HAL_RCC_ClockConfig+0x274>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fc fe6e 	bl	800199c <HAL_InitTick>
 8004cc0:	4603      	mov	r3, r0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40022000 	.word	0x40022000
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	04c4b400 	.word	0x04c4b400
 8004cd8:	08005d88 	.word	0x08005d88
 8004cdc:	20000000 	.word	0x20000000
 8004ce0:	20000004 	.word	0x20000004

08004ce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cea:	4b2c      	ldr	r3, [pc, #176]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f003 030c 	and.w	r3, r3, #12
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d102      	bne.n	8004cfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	e047      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cfc:	4b27      	ldr	r3, [pc, #156]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	f003 030c 	and.w	r3, r3, #12
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d102      	bne.n	8004d0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d08:	4b26      	ldr	r3, [pc, #152]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d0a:	613b      	str	r3, [r7, #16]
 8004d0c:	e03e      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004d0e:	4b23      	ldr	r3, [pc, #140]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b0c      	cmp	r3, #12
 8004d18:	d136      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d1a:	4b20      	ldr	r3, [pc, #128]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d24:	4b1d      	ldr	r3, [pc, #116]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	3301      	adds	r3, #1
 8004d30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d38:	4a1a      	ldr	r2, [pc, #104]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	4a16      	ldr	r2, [pc, #88]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d42:	68d2      	ldr	r2, [r2, #12]
 8004d44:	0a12      	lsrs	r2, r2, #8
 8004d46:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	617b      	str	r3, [r7, #20]
      break;
 8004d50:	e00c      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d52:	4a13      	ldr	r2, [pc, #76]	@ (8004da0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	4a10      	ldr	r2, [pc, #64]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d5c:	68d2      	ldr	r2, [r2, #12]
 8004d5e:	0a12      	lsrs	r2, r2, #8
 8004d60:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
      break;
 8004d6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	0e5b      	lsrs	r3, r3, #25
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	e001      	b.n	8004d8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d8c:	693b      	ldr	r3, [r7, #16]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000
 8004da0:	00f42400 	.word	0x00f42400
 8004da4:	007a1200 	.word	0x007a1200

08004da8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dac:	4b03      	ldr	r3, [pc, #12]	@ (8004dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dae:	681b      	ldr	r3, [r3, #0]
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	20000000 	.word	0x20000000

08004dc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b087      	sub	sp, #28
 8004dc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dc6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	091b      	lsrs	r3, r3, #4
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d10c      	bne.n	8004dfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004de4:	4a17      	ldr	r2, [pc, #92]	@ (8004e44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	4a14      	ldr	r2, [pc, #80]	@ (8004e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dee:	68d2      	ldr	r2, [r2, #12]
 8004df0:	0a12      	lsrs	r2, r2, #8
 8004df2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004df6:	fb02 f303 	mul.w	r3, r2, r3
 8004dfa:	617b      	str	r3, [r7, #20]
    break;
 8004dfc:	e00c      	b.n	8004e18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dfe:	4a12      	ldr	r2, [pc, #72]	@ (8004e48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e06:	4a0e      	ldr	r2, [pc, #56]	@ (8004e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e08:	68d2      	ldr	r2, [r2, #12]
 8004e0a:	0a12      	lsrs	r2, r2, #8
 8004e0c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]
    break;
 8004e16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e18:	4b09      	ldr	r3, [pc, #36]	@ (8004e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	0e5b      	lsrs	r3, r3, #25
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	3301      	adds	r3, #1
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e32:	687b      	ldr	r3, [r7, #4]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	371c      	adds	r7, #28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	40021000 	.word	0x40021000
 8004e44:	007a1200 	.word	0x007a1200
 8004e48:	00f42400 	.word	0x00f42400

08004e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e54:	2300      	movs	r3, #0
 8004e56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e58:	2300      	movs	r3, #0
 8004e5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8098 	beq.w	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e6e:	4b43      	ldr	r3, [pc, #268]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	4b40      	ldr	r3, [pc, #256]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e86:	4b3d      	ldr	r3, [pc, #244]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e92:	2301      	movs	r3, #1
 8004e94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e96:	4b3a      	ldr	r3, [pc, #232]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a39      	ldr	r2, [pc, #228]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ea2:	f7fc fdc7 	bl	8001a34 <HAL_GetTick>
 8004ea6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ea8:	e009      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eaa:	f7fc fdc3 	bl	8001a34 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	74fb      	strb	r3, [r7, #19]
        break;
 8004ebc:	e005      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ebe:	4b30      	ldr	r3, [pc, #192]	@ (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ef      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004eca:	7cfb      	ldrb	r3, [r7, #19]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d159      	bne.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d01e      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d019      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004eec:	4b23      	ldr	r3, [pc, #140]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ef8:	4b20      	ldr	r3, [pc, #128]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efe:	4a1f      	ldr	r2, [pc, #124]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f08:	4b1c      	ldr	r3, [pc, #112]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f18:	4a18      	ldr	r2, [pc, #96]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d016      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2a:	f7fc fd83 	bl	8001a34 <HAL_GetTick>
 8004f2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f30:	e00b      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fc fd7f 	bl	8001a34 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d902      	bls.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	74fb      	strb	r3, [r7, #19]
            break;
 8004f48:	e006      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ec      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f58:	7cfb      	ldrb	r3, [r7, #19]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f5e:	4b07      	ldr	r3, [pc, #28]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6c:	4903      	ldr	r1, [pc, #12]	@ (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f76:	7cfb      	ldrb	r3, [r7, #19]
 8004f78:	74bb      	strb	r3, [r7, #18]
 8004f7a:	e005      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f84:	7cfb      	ldrb	r3, [r7, #19]
 8004f86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f88:	7c7b      	ldrb	r3, [r7, #17]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d105      	bne.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f8e:	4ba6      	ldr	r3, [pc, #664]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f92:	4aa5      	ldr	r2, [pc, #660]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004f94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fa6:	4ba0      	ldr	r3, [pc, #640]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fac:	f023 0203 	bic.w	r2, r3, #3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	499c      	ldr	r1, [pc, #624]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fc8:	4b97      	ldr	r3, [pc, #604]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f023 020c 	bic.w	r2, r3, #12
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	4994      	ldr	r1, [pc, #592]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fea:	4b8f      	ldr	r3, [pc, #572]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ff0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	498b      	ldr	r1, [pc, #556]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800500c:	4b86      	ldr	r3, [pc, #536]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800500e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005012:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	4983      	ldr	r1, [pc, #524]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800501c:	4313      	orrs	r3, r2
 800501e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800502e:	4b7e      	ldr	r3, [pc, #504]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005034:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	497a      	ldr	r1, [pc, #488]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00a      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005050:	4b75      	ldr	r3, [pc, #468]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005056:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	4972      	ldr	r1, [pc, #456]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005072:	4b6d      	ldr	r3, [pc, #436]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005078:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4969      	ldr	r1, [pc, #420]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005094:	4b64      	ldr	r3, [pc, #400]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	4961      	ldr	r1, [pc, #388]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050b6:	4b5c      	ldr	r3, [pc, #368]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c4:	4958      	ldr	r1, [pc, #352]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d015      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050d8:	4b53      	ldr	r3, [pc, #332]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e6:	4950      	ldr	r1, [pc, #320]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f6:	d105      	bne.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4a4a      	ldr	r2, [pc, #296]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80050fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800510c:	2b00      	cmp	r3, #0
 800510e:	d015      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005110:	4b45      	ldr	r3, [pc, #276]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005116:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800511e:	4942      	ldr	r1, [pc, #264]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005130:	4b3d      	ldr	r3, [pc, #244]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	4a3c      	ldr	r2, [pc, #240]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800513a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d015      	beq.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005148:	4b37      	ldr	r3, [pc, #220]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800514a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800514e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005156:	4934      	ldr	r1, [pc, #208]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005158:	4313      	orrs	r3, r2
 800515a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005166:	d105      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005168:	4b2f      	ldr	r3, [pc, #188]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a2e      	ldr	r2, [pc, #184]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800516e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005172:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d015      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005180:	4b29      	ldr	r3, [pc, #164]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005186:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518e:	4926      	ldr	r1, [pc, #152]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800519e:	d105      	bne.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051a0:	4b21      	ldr	r3, [pc, #132]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	4a20      	ldr	r2, [pc, #128]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c6:	4918      	ldr	r1, [pc, #96]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d6:	d105      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051d8:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4a12      	ldr	r2, [pc, #72]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fe:	490a      	ldr	r1, [pc, #40]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005200:	4313      	orrs	r3, r2
 8005202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520e:	d105      	bne.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4a04      	ldr	r2, [pc, #16]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005216:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800521a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800521c:	7cbb      	ldrb	r3, [r7, #18]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000

0800522c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e09d      	b.n	800537a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	d108      	bne.n	8005258 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800524e:	d009      	beq.n	8005264 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
 8005256:	e005      	b.n	8005264 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fc f996 	bl	80015b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800529a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052a4:	d902      	bls.n	80052ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	e002      	b.n	80052b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80052ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80052ba:	d007      	beq.n	80052cc <HAL_SPI_Init+0xa0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052dc:	431a      	orrs	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052fa:	431a      	orrs	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005304:	431a      	orrs	r2, r3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800530e:	ea42 0103 	orr.w	r1, r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	430a      	orrs	r2, r1
 8005320:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	0c1b      	lsrs	r3, r3, #16
 8005328:	f003 0204 	and.w	r2, r3, #4
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	431a      	orrs	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533a:	f003 0308 	and.w	r3, r3, #8
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005348:	ea42 0103 	orr.w	r1, r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69da      	ldr	r2, [r3, #28]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005368:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b088      	sub	sp, #32
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_SPI_Transmit+0x22>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e15f      	b.n	8005664 <HAL_SPI_Transmit+0x2e2>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053ac:	f7fc fb42 	bl	8001a34 <HAL_GetTick>
 80053b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d002      	beq.n	80053c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
 80053c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053c6:	e148      	b.n	800565a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d002      	beq.n	80053d4 <HAL_SPI_Transmit+0x52>
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053d8:	e13f      	b.n	800565a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2200      	movs	r2, #0
 8005414:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005424:	d10f      	bne.n	8005446 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005434:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005444:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005450:	2b40      	cmp	r3, #64	@ 0x40
 8005452:	d007      	beq.n	8005464 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005462:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800546c:	d94f      	bls.n	800550e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_SPI_Transmit+0xfa>
 8005476:	8afb      	ldrh	r3, [r7, #22]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d142      	bne.n	8005502 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	881a      	ldrh	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800548c:	1c9a      	adds	r2, r3, #2
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80054a0:	e02f      	b.n	8005502 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d112      	bne.n	80054d6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b4:	881a      	ldrh	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054c0:	1c9a      	adds	r2, r3, #2
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80054d4:	e015      	b.n	8005502 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054d6:	f7fc faad 	bl	8001a34 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d803      	bhi.n	80054ee <HAL_SPI_Transmit+0x16c>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d102      	bne.n	80054f4 <HAL_SPI_Transmit+0x172>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005500:	e0ab      	b.n	800565a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ca      	bne.n	80054a2 <HAL_SPI_Transmit+0x120>
 800550c:	e080      	b.n	8005610 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <HAL_SPI_Transmit+0x19a>
 8005516:	8afb      	ldrh	r3, [r7, #22]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d174      	bne.n	8005606 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005520:	b29b      	uxth	r3, r3
 8005522:	2b01      	cmp	r3, #1
 8005524:	d912      	bls.n	800554c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552a:	881a      	ldrh	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005536:	1c9a      	adds	r2, r3, #2
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b02      	subs	r3, #2
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800554a:	e05c      	b.n	8005606 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	7812      	ldrb	r2, [r2, #0]
 8005558:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005572:	e048      	b.n	8005606 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b02      	cmp	r3, #2
 8005580:	d12b      	bne.n	80055da <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005586:	b29b      	uxth	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d912      	bls.n	80055b2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	881a      	ldrh	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	1c9a      	adds	r2, r3, #2
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b02      	subs	r3, #2
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055b0:	e029      	b.n	8005606 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80055d8:	e015      	b.n	8005606 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055da:	f7fc fa2b 	bl	8001a34 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d803      	bhi.n	80055f2 <HAL_SPI_Transmit+0x270>
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d102      	bne.n	80055f8 <HAL_SPI_Transmit+0x276>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8005604:	e029      	b.n	800565a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1b1      	bne.n	8005574 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 f947 	bl	80058a8 <SPI_EndRxTxTransaction>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	613b      	str	r3, [r7, #16]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	613b      	str	r3, [r7, #16]
 8005642:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e003      	b.n	800565a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8005662:	7ffb      	ldrb	r3, [r7, #31]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800567c:	f7fc f9da 	bl	8001a34 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	4413      	add	r3, r2
 800568a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800568c:	f7fc f9d2 	bl	8001a34 <HAL_GetTick>
 8005690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005692:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	015b      	lsls	r3, r3, #5
 8005698:	0d1b      	lsrs	r3, r3, #20
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a2:	e054      	b.n	800574e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d050      	beq.n	800574e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ac:	f7fc f9c2 	bl	8001a34 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d902      	bls.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d13d      	bne.n	800573e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056da:	d111      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e4:	d004      	beq.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ee:	d107      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005708:	d10f      	bne.n	800572a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e017      	b.n	800576e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	3b01      	subs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	429a      	cmp	r2, r3
 800576a:	d19b      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000000 	.word	0x20000000

0800577c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08a      	sub	sp, #40	@ 0x28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800578e:	f7fc f951 	bl	8001a34 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005796:	1a9b      	subs	r3, r3, r2
 8005798:	683a      	ldr	r2, [r7, #0]
 800579a:	4413      	add	r3, r2
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800579e:	f7fc f949 	bl	8001a34 <HAL_GetTick>
 80057a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057ac:	4b3d      	ldr	r3, [pc, #244]	@ (80058a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	00da      	lsls	r2, r3, #3
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	0d1b      	lsrs	r3, r3, #20
 80057bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80057c4:	e060      	b.n	8005888 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80057cc:	d107      	bne.n	80057de <SPI_WaitFifoStateUntilTimeout+0x62>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d104      	bne.n	80057de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d050      	beq.n	8005888 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057e6:	f7fc f925 	bl	8001a34 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d902      	bls.n	80057fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d13d      	bne.n	8005878 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800580a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005814:	d111      	bne.n	800583a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800581e:	d004      	beq.n	800582a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005828:	d107      	bne.n	800583a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005838:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005842:	d10f      	bne.n	8005864 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005862:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e010      	b.n	800589a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005878:	69bb      	ldr	r3, [r7, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d101      	bne.n	8005882 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	3b01      	subs	r3, #1
 8005886:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	4013      	ands	r3, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	429a      	cmp	r2, r3
 8005896:	d196      	bne.n	80057c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3728      	adds	r7, #40	@ 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	20000000 	.word	0x20000000

080058a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f7ff ff5b 	bl	800577c <SPI_WaitFifoStateUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d0:	f043 0220 	orr.w	r2, r3, #32
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e027      	b.n	800592c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2200      	movs	r2, #0
 80058e4:	2180      	movs	r1, #128	@ 0x80
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff fec0 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f6:	f043 0220 	orr.w	r2, r3, #32
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e014      	b.n	800592c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2200      	movs	r2, #0
 800590a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff ff34 	bl	800577c <SPI_WaitFifoStateUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800591e:	f043 0220 	orr.w	r2, r3, #32
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e000      	b.n	800592c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8005934:	b480      	push	{r7}
 8005936:	b08b      	sub	sp, #44	@ 0x2c
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	613b      	str	r3, [r7, #16]
  return result;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d101      	bne.n	800595e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800595a:	2320      	movs	r3, #32
 800595c:	e003      	b.n	8005966 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	2103      	movs	r1, #3
 800596a:	fa01 f303 	lsl.w	r3, r1, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	401a      	ands	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005976:	6a3b      	ldr	r3, [r7, #32]
 8005978:	fa93 f3a3 	rbit	r3, r3
 800597c:	61fb      	str	r3, [r7, #28]
  return result;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	2b00      	cmp	r3, #0
 8005986:	d101      	bne.n	800598c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8005988:	2320      	movs	r3, #32
 800598a:	e003      	b.n	8005994 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598e:	fab3 f383 	clz	r3, r3
 8005992:	b2db      	uxtb	r3, r3
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	fa01 f303 	lsl.w	r3, r1, r3
 800599c:	431a      	orrs	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	601a      	str	r2, [r3, #0]
}
 80059a2:	bf00      	nop
 80059a4:	372c      	adds	r7, #44	@ 0x2c
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	401a      	ands	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	fb01 f303 	mul.w	r3, r1, r3
 80059cc:	431a      	orrs	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	605a      	str	r2, [r3, #4]
}
 80059d2:	bf00      	nop
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80059de:	b480      	push	{r7}
 80059e0:	b08b      	sub	sp, #44	@ 0x2c
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	fa93 f3a3 	rbit	r3, r3
 80059f8:	613b      	str	r3, [r7, #16]
  return result;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8005a04:	2320      	movs	r3, #32
 8005a06:	e003      	b.n	8005a10 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	fab3 f383 	clz	r3, r3
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	2103      	movs	r1, #3
 8005a14:	fa01 f303 	lsl.w	r3, r1, r3
 8005a18:	43db      	mvns	r3, r3
 8005a1a:	401a      	ands	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	fa93 f3a3 	rbit	r3, r3
 8005a26:	61fb      	str	r3, [r7, #28]
  return result;
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8005a32:	2320      	movs	r3, #32
 8005a34:	e003      	b.n	8005a3e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	fab3 f383 	clz	r3, r3
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	6879      	ldr	r1, [r7, #4]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8005a4c:	bf00      	nop
 8005a4e:	372c      	adds	r7, #44	@ 0x2c
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b08b      	sub	sp, #44	@ 0x2c
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	fa93 f3a3 	rbit	r3, r3
 8005a72:	613b      	str	r3, [r7, #16]
  return result;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8005a7e:	2320      	movs	r3, #32
 8005a80:	e003      	b.n	8005a8a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	fab3 f383 	clz	r3, r3
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	2103      	movs	r1, #3
 8005a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	401a      	ands	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	fa93 f3a3 	rbit	r3, r3
 8005aa0:	61fb      	str	r3, [r7, #28]
  return result;
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8005aac:	2320      	movs	r3, #32
 8005aae:	e003      	b.n	8005ab8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	fab3 f383 	clz	r3, r3
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	60da      	str	r2, [r3, #12]
}
 8005ac6:	bf00      	nop
 8005ac8:	372c      	adds	r7, #44	@ 0x2c
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b08b      	sub	sp, #44	@ 0x2c
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	60f8      	str	r0, [r7, #12]
 8005ada:	60b9      	str	r1, [r7, #8]
 8005adc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6a1a      	ldr	r2, [r3, #32]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	fa93 f3a3 	rbit	r3, r3
 8005aec:	613b      	str	r3, [r7, #16]
  return result;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8005af8:	2320      	movs	r3, #32
 8005afa:	e003      	b.n	8005b04 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	fab3 f383 	clz	r3, r3
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	210f      	movs	r1, #15
 8005b08:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	401a      	ands	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	fa93 f3a3 	rbit	r3, r3
 8005b1a:	61fb      	str	r3, [r7, #28]
  return result;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8005b26:	2320      	movs	r3, #32
 8005b28:	e003      	b.n	8005b32 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8005b40:	bf00      	nop
 8005b42:	372c      	adds	r7, #44	@ 0x2c
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b08b      	sub	sp, #44	@ 0x2c
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	0a1b      	lsrs	r3, r3, #8
 8005b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	fa93 f3a3 	rbit	r3, r3
 8005b68:	613b      	str	r3, [r7, #16]
  return result;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d101      	bne.n	8005b78 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8005b74:	2320      	movs	r3, #32
 8005b76:	e003      	b.n	8005b80 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	fab3 f383 	clz	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	210f      	movs	r1, #15
 8005b84:	fa01 f303 	lsl.w	r3, r1, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	401a      	ands	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	fa93 f3a3 	rbit	r3, r3
 8005b98:	61fb      	str	r3, [r7, #28]
  return result;
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	e003      	b.n	8005bb0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005baa:	fab3 f383 	clz	r3, r3
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8005bbe:	bf00      	nop
 8005bc0:	372c      	adds	r7, #44	@ 0x2c
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr

08005bca <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b088      	sub	sp, #32
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	fa93 f3a3 	rbit	r3, r3
 8005be0:	60fb      	str	r3, [r7, #12]
  return result;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <LL_GPIO_Init+0x26>
    return 32U;
 8005bec:	2320      	movs	r3, #32
 8005bee:	e003      	b.n	8005bf8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	fab3 f383 	clz	r3, r3
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005bfa:	e048      	b.n	8005c8e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	2101      	movs	r1, #1
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	4013      	ands	r3, r2
 8005c0a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d03a      	beq.n	8005c88 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d003      	beq.n	8005c22 <LL_GPIO_Init+0x58>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d10e      	bne.n	8005c40 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	461a      	mov	r2, r3
 8005c28:	69b9      	ldr	r1, [r7, #24]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff fed7 	bl	80059de <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	461a      	mov	r2, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7ff feb7 	bl	80059ae <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	461a      	mov	r2, r3
 8005c46:	69b9      	ldr	r1, [r7, #24]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f7ff ff05 	bl	8005a58 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d111      	bne.n	8005c7a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2bff      	cmp	r3, #255	@ 0xff
 8005c5a:	d807      	bhi.n	8005c6c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	461a      	mov	r2, r3
 8005c62:	69b9      	ldr	r1, [r7, #24]
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ff34 	bl	8005ad2 <LL_GPIO_SetAFPin_0_7>
 8005c6a:	e006      	b.n	8005c7a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	461a      	mov	r2, r3
 8005c72:	69b9      	ldr	r1, [r7, #24]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff ff69 	bl	8005b4c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	461a      	mov	r2, r3
 8005c80:	69b9      	ldr	r1, [r7, #24]
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fe56 	bl	8005934 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	fa22 f303 	lsr.w	r3, r2, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1af      	bne.n	8005bfc <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005cae:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8005cb2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	43db      	mvns	r3, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b085      	sub	sp, #20
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	1d3b      	adds	r3, r7, #4
 8005ce6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <memset>:
 8005d18:	4402      	add	r2, r0
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d100      	bne.n	8005d22 <memset+0xa>
 8005d20:	4770      	bx	lr
 8005d22:	f803 1b01 	strb.w	r1, [r3], #1
 8005d26:	e7f9      	b.n	8005d1c <memset+0x4>

08005d28 <__libc_init_array>:
 8005d28:	b570      	push	{r4, r5, r6, lr}
 8005d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8005d60 <__libc_init_array+0x38>)
 8005d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8005d64 <__libc_init_array+0x3c>)
 8005d2e:	1b64      	subs	r4, r4, r5
 8005d30:	10a4      	asrs	r4, r4, #2
 8005d32:	2600      	movs	r6, #0
 8005d34:	42a6      	cmp	r6, r4
 8005d36:	d109      	bne.n	8005d4c <__libc_init_array+0x24>
 8005d38:	4d0b      	ldr	r5, [pc, #44]	@ (8005d68 <__libc_init_array+0x40>)
 8005d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8005d6c <__libc_init_array+0x44>)
 8005d3c:	f000 f818 	bl	8005d70 <_init>
 8005d40:	1b64      	subs	r4, r4, r5
 8005d42:	10a4      	asrs	r4, r4, #2
 8005d44:	2600      	movs	r6, #0
 8005d46:	42a6      	cmp	r6, r4
 8005d48:	d105      	bne.n	8005d56 <__libc_init_array+0x2e>
 8005d4a:	bd70      	pop	{r4, r5, r6, pc}
 8005d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d50:	4798      	blx	r3
 8005d52:	3601      	adds	r6, #1
 8005d54:	e7ee      	b.n	8005d34 <__libc_init_array+0xc>
 8005d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d5a:	4798      	blx	r3
 8005d5c:	3601      	adds	r6, #1
 8005d5e:	e7f2      	b.n	8005d46 <__libc_init_array+0x1e>
 8005d60:	08005d98 	.word	0x08005d98
 8005d64:	08005d98 	.word	0x08005d98
 8005d68:	08005d98 	.word	0x08005d98
 8005d6c:	08005d9c 	.word	0x08005d9c

08005d70 <_init>:
 8005d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d72:	bf00      	nop
 8005d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d76:	bc08      	pop	{r3}
 8005d78:	469e      	mov	lr, r3
 8005d7a:	4770      	bx	lr

08005d7c <_fini>:
 8005d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7e:	bf00      	nop
 8005d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d82:	bc08      	pop	{r3}
 8005d84:	469e      	mov	lr, r3
 8005d86:	4770      	bx	lr
