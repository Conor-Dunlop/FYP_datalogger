
main_board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080048d0  080048d0  000058d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048e0  080048e0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080048e0  080048e0  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048e0  080048e0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048e0  080048e0  000058e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048e4  080048e4  000058e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080048e8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  2000000c  080048f4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  080048f4  00006568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c45  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038a4  00000000  00000000  0001cc81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  00020528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f12  00000000  00000000  00021910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c8a  00000000  00000000  00022822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab7b  00000000  00000000  000454ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9c2d  00000000  00000000  00060027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139c54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005240  00000000  00000000  00139c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0013eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080048b8 	.word	0x080048b8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080048b8 	.word	0x080048b8

08000218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	@ 0x30
 800021c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f004 fb15 	bl	8004860 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000236:	4b32      	ldr	r3, [pc, #200]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800023e:	4b30      	ldr	r3, [pc, #192]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000240:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000244:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000246:	4b2e      	ldr	r3, [pc, #184]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024c:	4b2c      	ldr	r3, [pc, #176]	@ (8000300 <MX_ADC1_Init+0xe8>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000252:	4b2b      	ldr	r3, [pc, #172]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000258:	4b29      	ldr	r3, [pc, #164]	@ (8000300 <MX_ADC1_Init+0xe8>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025e:	4b28      	ldr	r3, [pc, #160]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000260:	2204      	movs	r2, #4
 8000262:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000264:	4b26      	ldr	r3, [pc, #152]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000266:	2200      	movs	r2, #0
 8000268:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026a:	4b25      	ldr	r3, [pc, #148]	@ (8000300 <MX_ADC1_Init+0xe8>)
 800026c:	2200      	movs	r2, #0
 800026e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000270:	4b23      	ldr	r3, [pc, #140]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000272:	2201      	movs	r2, #1
 8000274:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000276:	4b22      	ldr	r3, [pc, #136]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000278:	2200      	movs	r2, #0
 800027a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027e:	4b20      	ldr	r3, [pc, #128]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000280:	2200      	movs	r2, #0
 8000282:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000284:	4b1e      	ldr	r3, [pc, #120]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000286:	2200      	movs	r2, #0
 8000288:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800028a:	4b1d      	ldr	r3, [pc, #116]	@ (8000300 <MX_ADC1_Init+0xe8>)
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000292:	4b1b      	ldr	r3, [pc, #108]	@ (8000300 <MX_ADC1_Init+0xe8>)
 8000294:	2200      	movs	r2, #0
 8000296:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000298:	4b19      	ldr	r3, [pc, #100]	@ (8000300 <MX_ADC1_Init+0xe8>)
 800029a:	2200      	movs	r2, #0
 800029c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a0:	4817      	ldr	r0, [pc, #92]	@ (8000300 <MX_ADC1_Init+0xe8>)
 80002a2:	f001 f911 	bl	80014c8 <HAL_ADC_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80002ac:	f000 fc43 	bl	8000b36 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002b8:	4619      	mov	r1, r3
 80002ba:	4811      	ldr	r0, [pc, #68]	@ (8000300 <MX_ADC1_Init+0xe8>)
 80002bc:	f001 fe9e 	bl	8001ffc <HAL_ADCEx_MultiModeConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80002c6:	f000 fc36 	bl	8000b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000304 <MX_ADC1_Init+0xec>)
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ce:	2306      	movs	r3, #6
 80002d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002d6:	237f      	movs	r3, #127	@ 0x7f
 80002d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002da:	2304      	movs	r3, #4
 80002dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	4806      	ldr	r0, [pc, #24]	@ (8000300 <MX_ADC1_Init+0xe8>)
 80002e8:	f001 fa72 	bl	80017d0 <HAL_ADC_ConfigChannel>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002f2:	f000 fc20 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002f6:	bf00      	nop
 80002f8:	3730      	adds	r7, #48	@ 0x30
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000028 	.word	0x20000028
 8000304:	04300002 	.word	0x04300002

08000308 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b088      	sub	sp, #32
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	463b      	mov	r3, r7
 8000310:	2220      	movs	r2, #32
 8000312:	2100      	movs	r1, #0
 8000314:	4618      	mov	r0, r3
 8000316:	f004 faa3 	bl	8004860 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800031a:	4b2b      	ldr	r3, [pc, #172]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 800031c:	4a2b      	ldr	r2, [pc, #172]	@ (80003cc <MX_ADC2_Init+0xc4>)
 800031e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000320:	4b29      	ldr	r3, [pc, #164]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000322:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000326:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000328:	4b27      	ldr	r3, [pc, #156]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 800032a:	2200      	movs	r2, #0
 800032c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800032e:	4b26      	ldr	r3, [pc, #152]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000330:	2200      	movs	r2, #0
 8000332:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000334:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000336:	2200      	movs	r2, #0
 8000338:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800033a:	4b23      	ldr	r3, [pc, #140]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 800033c:	2200      	movs	r2, #0
 800033e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000340:	4b21      	ldr	r3, [pc, #132]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000342:	2204      	movs	r2, #4
 8000344:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000346:	4b20      	ldr	r3, [pc, #128]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000348:	2200      	movs	r2, #0
 800034a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800034c:	4b1e      	ldr	r3, [pc, #120]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 800034e:	2200      	movs	r2, #0
 8000350:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000352:	4b1d      	ldr	r3, [pc, #116]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000354:	2201      	movs	r2, #1
 8000356:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000358:	4b1b      	ldr	r3, [pc, #108]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 800035a:	2200      	movs	r2, #0
 800035c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000360:	4b19      	ldr	r3, [pc, #100]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000362:	2200      	movs	r2, #0
 8000364:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000366:	4b18      	ldr	r3, [pc, #96]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000368:	2200      	movs	r2, #0
 800036a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800036c:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 800036e:	2200      	movs	r2, #0
 8000370:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000376:	2200      	movs	r2, #0
 8000378:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800037a:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 800037c:	2200      	movs	r2, #0
 800037e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000382:	4811      	ldr	r0, [pc, #68]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 8000384:	f001 f8a0 	bl	80014c8 <HAL_ADC_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800038e:	f000 fbd2 	bl	8000b36 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000392:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_ADC2_Init+0xc8>)
 8000394:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000396:	2306      	movs	r3, #6
 8000398:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800039e:	237f      	movs	r3, #127	@ 0x7f
 80003a0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003a2:	2304      	movs	r3, #4
 80003a4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80003aa:	463b      	mov	r3, r7
 80003ac:	4619      	mov	r1, r3
 80003ae:	4806      	ldr	r0, [pc, #24]	@ (80003c8 <MX_ADC2_Init+0xc0>)
 80003b0:	f001 fa0e 	bl	80017d0 <HAL_ADC_ConfigChannel>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80003ba:	f000 fbbc 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	3720      	adds	r7, #32
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000094 	.word	0x20000094
 80003cc:	50000100 	.word	0x50000100
 80003d0:	2e300800 	.word	0x2e300800

080003d4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b09e      	sub	sp, #120	@ 0x78
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
 80003ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003ec:	f107 0320 	add.w	r3, r7, #32
 80003f0:	2244      	movs	r2, #68	@ 0x44
 80003f2:	2100      	movs	r1, #0
 80003f4:	4618      	mov	r0, r3
 80003f6:	f004 fa33 	bl	8004860 <memset>
  if(adcHandle->Instance==ADC1)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000402:	d16f      	bne.n	80004e4 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000404:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000408:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800040a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800040e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000410:	f107 0320 	add.w	r3, r7, #32
 8000414:	4618      	mov	r0, r3
 8000416:	f003 fabd 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000420:	f000 fb89 	bl	8000b36 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000424:	4b52      	ldr	r3, [pc, #328]	@ (8000570 <HAL_ADC_MspInit+0x19c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	3301      	adds	r3, #1
 800042a:	4a51      	ldr	r2, [pc, #324]	@ (8000570 <HAL_ADC_MspInit+0x19c>)
 800042c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800042e:	4b50      	ldr	r3, [pc, #320]	@ (8000570 <HAL_ADC_MspInit+0x19c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	2b01      	cmp	r3, #1
 8000434:	d10b      	bne.n	800044e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000436:	4b4f      	ldr	r3, [pc, #316]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800043a:	4a4e      	ldr	r2, [pc, #312]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 800043c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000442:	4b4c      	ldr	r3, [pc, #304]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000446:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800044a:	61fb      	str	r3, [r7, #28]
 800044c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b49      	ldr	r3, [pc, #292]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000452:	4a48      	ldr	r2, [pc, #288]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800045a:	4b46      	ldr	r3, [pc, #280]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 800045c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045e:	f003 0304 	and.w	r3, r3, #4
 8000462:	61bb      	str	r3, [r7, #24]
 8000464:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000466:	4b43      	ldr	r3, [pc, #268]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800046a:	4a42      	ldr	r2, [pc, #264]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 800046c:	f043 0301 	orr.w	r3, r3, #1
 8000470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000472:	4b40      	ldr	r3, [pc, #256]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000476:	f003 0301 	and.w	r3, r3, #1
 800047a:	617b      	str	r3, [r7, #20]
 800047c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b3d      	ldr	r3, [pc, #244]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000482:	4a3c      	ldr	r2, [pc, #240]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000484:	f043 0302 	orr.w	r3, r3, #2
 8000488:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800048a:	4b3a      	ldr	r3, [pc, #232]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 800048c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800048e:	f003 0302 	and.w	r3, r3, #2
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = SIG_4_Pin|SIG_2_Pin|ADC_9_Pin|ADC_10_Pin;
 8000496:	230f      	movs	r3, #15
 8000498:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800049a:	2303      	movs	r3, #3
 800049c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004a6:	4619      	mov	r1, r3
 80004a8:	4833      	ldr	r0, [pc, #204]	@ (8000578 <HAL_ADC_MspInit+0x1a4>)
 80004aa:	f002 f909 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|ADC_2_Pin|ADC_4_Pin;
 80004ae:	230b      	movs	r3, #11
 80004b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b2:	2303      	movs	r3, #3
 80004b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004be:	4619      	mov	r1, r3
 80004c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004c4:	f002 f8fc 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_OUT_Pin|ADC_3_Pin|GPIO_PIN_14;
 80004c8:	f245 0301 	movw	r3, #20481	@ 0x5001
 80004cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ce:	2303      	movs	r3, #3
 80004d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004da:	4619      	mov	r1, r3
 80004dc:	4827      	ldr	r0, [pc, #156]	@ (800057c <HAL_ADC_MspInit+0x1a8>)
 80004de:	f002 f8ef 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80004e2:	e041      	b.n	8000568 <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a25      	ldr	r2, [pc, #148]	@ (8000580 <HAL_ADC_MspInit+0x1ac>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d13c      	bne.n	8000568 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004f2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80004f4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80004f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 fa48 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 800050a:	f000 fb14 	bl	8000b36 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800050e:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <HAL_ADC_MspInit+0x19c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	3301      	adds	r3, #1
 8000514:	4a16      	ldr	r2, [pc, #88]	@ (8000570 <HAL_ADC_MspInit+0x19c>)
 8000516:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <HAL_ADC_MspInit+0x19c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d10b      	bne.n	8000538 <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000520:	4b14      	ldr	r3, [pc, #80]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000524:	4a13      	ldr	r2, [pc, #76]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000526:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800052a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 800052e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000538:	4b0e      	ldr	r3, [pc, #56]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 800053a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053c:	4a0d      	ldr	r2, [pc, #52]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000544:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <HAL_ADC_MspInit+0x1a0>)
 8000546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_12_Pin;
 8000550:	2320      	movs	r3, #32
 8000552:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000554:	2303      	movs	r3, #3
 8000556:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	2300      	movs	r3, #0
 800055a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(ADC_12_GPIO_Port, &GPIO_InitStruct);
 800055c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000560:	4619      	mov	r1, r3
 8000562:	4805      	ldr	r0, [pc, #20]	@ (8000578 <HAL_ADC_MspInit+0x1a4>)
 8000564:	f002 f8ac 	bl	80026c0 <HAL_GPIO_Init>
}
 8000568:	bf00      	nop
 800056a:	3778      	adds	r7, #120	@ 0x78
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000100 	.word	0x20000100
 8000574:	40021000 	.word	0x40021000
 8000578:	48000800 	.word	0x48000800
 800057c:	48000400 	.word	0x48000400
 8000580:	50000100 	.word	0x50000100

08000584 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	@ 0x30
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2230      	movs	r2, #48	@ 0x30
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f004 f965 	bl	8004860 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <MX_DAC1_Init+0x80>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	@ (8000608 <MX_DAC1_Init+0x84>)
 800059a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800059c:	4819      	ldr	r0, [pc, #100]	@ (8000604 <MX_DAC1_Init+0x80>)
 800059e:	f001 feb4 	bl	800230a <HAL_DAC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005a8:	f000 fac5 	bl	8000b36 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80005ac:	2302      	movs	r3, #2
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80005c8:	2301      	movs	r3, #1
 80005ca:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	4619      	mov	r1, r3
 80005d6:	480b      	ldr	r0, [pc, #44]	@ (8000604 <MX_DAC1_Init+0x80>)
 80005d8:	f001 feba 	bl	8002350 <HAL_DAC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80005e2:	f000 faa8 	bl	8000b36 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	2210      	movs	r2, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4805      	ldr	r0, [pc, #20]	@ (8000604 <MX_DAC1_Init+0x80>)
 80005ee:	f001 feaf 	bl	8002350 <HAL_DAC_ConfigChannel>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80005f8:	f000 fa9d 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	3730      	adds	r7, #48	@ 0x30
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000104 	.word	0x20000104
 8000608:	50000800 	.word	0x50000800

0800060c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08a      	sub	sp, #40	@ 0x28
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a15      	ldr	r2, [pc, #84]	@ (8000680 <HAL_DAC_MspInit+0x74>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d124      	bne.n	8000678 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <HAL_DAC_MspInit+0x78>)
 8000630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000632:	4a14      	ldr	r2, [pc, #80]	@ (8000684 <HAL_DAC_MspInit+0x78>)
 8000634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063a:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_DAC_MspInit+0x78>)
 800063c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000642:	613b      	str	r3, [r7, #16]
 8000644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	@ (8000684 <HAL_DAC_MspInit+0x78>)
 8000648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064a:	4a0e      	ldr	r2, [pc, #56]	@ (8000684 <HAL_DAC_MspInit+0x78>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000652:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <HAL_DAC_MspInit+0x78>)
 8000654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60fb      	str	r3, [r7, #12]
 800065c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 800065e:	2330      	movs	r3, #48	@ 0x30
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000674:	f002 f824 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	50000800 	.word	0x50000800
 8000684:	40021000 	.word	0x40021000

08000688 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	4b55      	ldr	r3, [pc, #340]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006a2:	4a54      	ldr	r2, [pc, #336]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006aa:	4b52      	ldr	r3, [pc, #328]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	4b4f      	ldr	r3, [pc, #316]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	4a4e      	ldr	r2, [pc, #312]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c2:	4b4c      	ldr	r3, [pc, #304]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b49      	ldr	r3, [pc, #292]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a48      	ldr	r2, [pc, #288]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b46      	ldr	r3, [pc, #280]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b43      	ldr	r3, [pc, #268]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	4a42      	ldr	r2, [pc, #264]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006ec:	f043 0302 	orr.w	r3, r3, #2
 80006f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f2:	4b40      	ldr	r3, [pc, #256]	@ (80007f4 <MX_GPIO_Init+0x16c>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin
 80006fe:	2200      	movs	r2, #0
 8000700:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 8000704:	483c      	ldr	r0, [pc, #240]	@ (80007f8 <MX_GPIO_Init+0x170>)
 8000706:	f002 f95d 	bl	80029c4 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8000710:	483a      	ldr	r0, [pc, #232]	@ (80007fc <MX_GPIO_Init+0x174>)
 8000712:	f002 f957 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800071c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000720:	f002 f950 	bl	80029c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin;
 8000724:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	4619      	mov	r1, r3
 8000738:	4830      	ldr	r0, [pc, #192]	@ (80007fc <MX_GPIO_Init+0x174>)
 800073a:	f001 ffc1 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 800073e:	2304      	movs	r3, #4
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000754:	f001 ffb4 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DIGITAL_IO_6_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_3_Pin|DIGITAL_IO_1_Pin;
 8000758:	f24a 4302 	movw	r3, #41986	@ 0xa402
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	2301      	movs	r3, #1
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	2300      	movs	r3, #0
 8000768:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4821      	ldr	r0, [pc, #132]	@ (80007f8 <MX_GPIO_Init+0x170>)
 8000772:	f001 ffa5 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_STATUS_Pin|DIGITAL_IO_4_Pin|SD_CARD_DETECT_Pin;
 8000776:	f640 2304 	movw	r3, #2564	@ 0xa04
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	481b      	ldr	r0, [pc, #108]	@ (80007f8 <MX_GPIO_Init+0x170>)
 800078c:	f001 ff98 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_EN_1_Pin|COMMS_EN_2_Pin|COMMS_EN_3_Pin|SD_SELECT_Pin;
 8000790:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4814      	ldr	r0, [pc, #80]	@ (80007fc <MX_GPIO_Init+0x174>)
 80007aa:	f001 ff89 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 80007ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b8:	2302      	movs	r3, #2
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ca:	f001 ff79 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = WARN_STATUS_Pin|STATUS_Pin;
 80007ce:	23a0      	movs	r3, #160	@ 0xa0
 80007d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007de:	f107 0314 	add.w	r3, r7, #20
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_GPIO_Init+0x170>)
 80007e6:	f001 ff6b 	bl	80026c0 <HAL_GPIO_Init>

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	@ 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000400 	.word	0x48000400
 80007fc:	48000800 	.word	0x48000800

08000800 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	@ (8000878 <MX_I2C2_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 800080a:	4b1a      	ldr	r3, [pc, #104]	@ (8000874 <MX_I2C2_Init+0x74>)
 800080c:	f240 1203 	movw	r2, #259	@ 0x103
 8000810:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_I2C2_Init+0x74>)
 800081a:	2201      	movs	r2, #1
 800081c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081e:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000824:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800082a:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_I2C2_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b10      	ldr	r3, [pc, #64]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	@ (8000874 <MX_I2C2_Init+0x74>)
 800083e:	f002 f8d9 	bl	80029f4 <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000848:	f000 f975 	bl	8000b36 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084c:	2100      	movs	r1, #0
 800084e:	4809      	ldr	r0, [pc, #36]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000850:	f002 f96b 	bl	8002b2a <HAL_I2CEx_ConfigAnalogFilter>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800085a:	f000 f96c 	bl	8000b36 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_I2C2_Init+0x74>)
 8000862:	f002 f9ad 	bl	8002bc0 <HAL_I2CEx_ConfigDigitalFilter>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800086c:	f000 f963 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000118 	.word	0x20000118
 8000878:	40005800 	.word	0x40005800

0800087c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b09c      	sub	sp, #112	@ 0x70
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000894:	f107 0318 	add.w	r3, r7, #24
 8000898:	2244      	movs	r2, #68	@ 0x44
 800089a:	2100      	movs	r1, #0
 800089c:	4618      	mov	r0, r3
 800089e:	f003 ffdf 	bl	8004860 <memset>
  if(i2cHandle->Instance==I2C2)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a2d      	ldr	r2, [pc, #180]	@ (800095c <HAL_I2C_MspInit+0xe0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d153      	bne.n	8000954 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f003 f86b 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008c4:	f000 f937 	bl	8000b36 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008cc:	4a24      	ldr	r2, [pc, #144]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 80008e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e4:	4a1e      	ldr	r2, [pc, #120]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 80008ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008f8:	2310      	movs	r3, #16
 80008fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fc:	2312      	movs	r3, #18
 80008fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000908:	2304      	movs	r3, #4
 800090a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000910:	4619      	mov	r1, r3
 8000912:	4814      	ldr	r0, [pc, #80]	@ (8000964 <HAL_I2C_MspInit+0xe8>)
 8000914:	f001 fed4 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800091c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800091e:	2312      	movs	r3, #18
 8000920:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800092a:	2304      	movs	r3, #4
 800092c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f001 fec2 	bl	80026c0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 800093e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 8000942:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000946:	6593      	str	r3, [r2, #88]	@ 0x58
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_I2C_MspInit+0xe4>)
 800094a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000954:	bf00      	nop
 8000956:	3770      	adds	r7, #112	@ 0x70
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40005800 	.word	0x40005800
 8000960:	40021000 	.word	0x40021000
 8000964:	48000800 	.word	0x48000800

08000968 <main>:

I2C_HandleTypeDef hi2c1;


int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096e:	f000 fb42 	bl	8000ff6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000972:	f000 f893 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000976:	f7ff fe87 	bl	8000688 <MX_GPIO_Init>
  MX_ADC1_Init();
 800097a:	f7ff fc4d 	bl	8000218 <MX_ADC1_Init>
  MX_ADC2_Init();
 800097e:	f7ff fcc3 	bl	8000308 <MX_ADC2_Init>
  MX_DAC1_Init();
 8000982:	f7ff fdff 	bl	8000584 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000986:	f000 f8dd 	bl	8000b44 <MX_SPI1_Init>
  MX_SPI3_Init();
 800098a:	f000 f919 	bl	8000bc0 <MX_SPI3_Init>
  MX_UCPD1_Init();
 800098e:	f000 fa7f 	bl	8000e90 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000992:	f000 faab 	bl	8000eec <MX_USB_PCD_Init>
  MX_I2C2_Init();
 8000996:	f7ff ff33 	bl	8000800 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /*int32_t SDwrite;
  UINT bytesWritten;*/

  uint32_t status = HAL_ERROR;
 800099a:	2301      	movs	r3, #1
 800099c:	607b      	str	r3, [r7, #4]


  uint8_t dataToSend = 0x5; // Example data
 800099e:	2305      	movs	r3, #5
 80009a0:	707b      	strb	r3, [r7, #1]

  int32_t temp;

  HAL_StatusTypeDef sts = HAL_OK;
 80009a2:	2300      	movs	r3, #0
 80009a4:	70fb      	strb	r3, [r7, #3]

  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 80009a6:	2201      	movs	r2, #1
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	4838      	ldr	r0, [pc, #224]	@ (8000a8c <main+0x124>)
 80009ac:	f002 f80a 	bl	80029c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 80009b0:	2201      	movs	r2, #1
 80009b2:	2120      	movs	r1, #32
 80009b4:	4835      	ldr	r0, [pc, #212]	@ (8000a8c <main+0x124>)
 80009b6:	f002 f805 	bl	80029c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c4:	f001 fffe 	bl	80029c4 <HAL_GPIO_WritePin>


  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009c8:	4831      	ldr	r0, [pc, #196]	@ (8000a90 <main+0x128>)
 80009ca:	f002 f813 	bl	80029f4 <HAL_I2C_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d004      	beq.n	80009de <main+0x76>
          // Initialization error
	  HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET); // Turn off success LED
 80009d4:	2200      	movs	r2, #0
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	482c      	ldr	r0, [pc, #176]	@ (8000a8c <main+0x124>)
 80009da:	f001 fff3 	bl	80029c4 <HAL_GPIO_WritePin>
      }
  uint8_t tempRegAddr = 0x05;
 80009de:	2305      	movs	r3, #5
 80009e0:	70bb      	strb	r3, [r7, #2]
	  else
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
	  }*/

	HAL_Delay(1000);
 80009e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e6:	f000 fb77 	bl	80010d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // CS low Digital IO 1 COMM_EN_3
 80009ea:	2201      	movs	r2, #1
 80009ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009f0:	4828      	ldr	r0, [pc, #160]	@ (8000a94 <main+0x12c>)
 80009f2:	f001 ffe7 	bl	80029c4 <HAL_GPIO_WritePin>
	status = HAL_SPI_Transmit(&hspi1, &dataToSend, 2, HAL_MAX_DELAY);  // Transmit is unsuccessful??? maybe working but no output on arduino
 80009f6:	1c79      	adds	r1, r7, #1
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	2202      	movs	r2, #2
 80009fe:	4826      	ldr	r0, [pc, #152]	@ (8000a98 <main+0x130>)
 8000a00:	f003 fa63 	bl	8003eca <HAL_SPI_Transmit>
 8000a04:	4603      	mov	r3, r0
 8000a06:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // CS high Digital IO 1 COMM_EN_3
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a0e:	4821      	ldr	r0, [pc, #132]	@ (8000a94 <main+0x12c>)
 8000a10:	f001 ffd8 	bl	80029c4 <HAL_GPIO_WritePin>

	if (status == HAL_OK)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d111      	bne.n	8000a3e <main+0xd6>
	{
		HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2180      	movs	r1, #128	@ 0x80
 8000a1e:	481b      	ldr	r0, [pc, #108]	@ (8000a8c <main+0x124>)
 8000a20:	f001 ffd0 	bl	80029c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8000a24:	2201      	movs	r2, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	4818      	ldr	r0, [pc, #96]	@ (8000a8c <main+0x124>)
 8000a2a:	f001 ffcb 	bl	80029c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a38:	f001 ffc4 	bl	80029c4 <HAL_GPIO_WritePin>
 8000a3c:	e7d1      	b.n	80009e2 <main+0x7a>
	} else if (status == HAL_BUSY){
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	d111      	bne.n	8000a68 <main+0x100>
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a4e:	f001 ffb9 	bl	80029c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <main+0x124>)
 8000a58:	f001 ffb4 	bl	80029c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	2180      	movs	r1, #128	@ 0x80
 8000a60:	480a      	ldr	r0, [pc, #40]	@ (8000a8c <main+0x124>)
 8000a62:	f001 ffaf 	bl	80029c4 <HAL_GPIO_WritePin>
 8000a66:	e7bc      	b.n	80009e2 <main+0x7a>
	}
	else
	{
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f001 ffa7 	bl	80029c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8000a76:	2201      	movs	r2, #1
 8000a78:	2120      	movs	r1, #32
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <main+0x124>)
 8000a7c:	f001 ffa2 	bl	80029c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(STATUS_GPIO_Port, STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8000a80:	2201      	movs	r2, #1
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	4801      	ldr	r0, [pc, #4]	@ (8000a8c <main+0x124>)
 8000a86:	f001 ff9d 	bl	80029c4 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000a8a:	e7aa      	b.n	80009e2 <main+0x7a>
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	2000016c 	.word	0x2000016c
 8000a94:	48000800 	.word	0x48000800
 8000a98:	200001c0 	.word	0x200001c0

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	@ 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0318 	add.w	r3, r7, #24
 8000aa6:	2238      	movs	r2, #56	@ 0x38
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 fed8 	bl	8004860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000abe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ac2:	f002 f9c1 	bl	8002e48 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad0:	2340      	movs	r3, #64	@ 0x40
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fa4b 	bl	8002f90 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000b00:	f000 f819 	bl	8000b36 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000b10:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f002 fd48 	bl	80035b4 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b2a:	f000 f804 	bl	8000b36 <Error_Handler>
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3750      	adds	r7, #80	@ 0x50
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b3a:	b672      	cpsid	i
}
 8000b3c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b3e:	bf00      	nop
 8000b40:	e7fd      	b.n	8000b3e <Error_Handler+0x8>
	...

08000b44 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bbc <MX_SPI1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b5e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000b62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b64:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b90:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b92:	2207      	movs	r2, #7
 8000b94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b96:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ba2:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_SPI1_Init+0x74>)
 8000ba4:	f003 f8e6 	bl	8003d74 <HAL_SPI_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f7ff ffc2 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200001c0 	.word	0x200001c0
 8000bbc:	40013000 	.word	0x40013000

08000bc0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <MX_SPI3_Init+0x78>)
 8000bc8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bca:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000bcc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000bd0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd8:	4b16      	ldr	r3, [pc, #88]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000bda:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bde:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be0:	4b14      	ldr	r3, [pc, #80]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000be6:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bf2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000c0e:	2207      	movs	r2, #7
 8000c10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_SPI3_Init+0x74>)
 8000c20:	f003 f8a8 	bl	8003d74 <HAL_SPI_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000c2a:	f7ff ff84 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000224 	.word	0x20000224
 8000c38:	40003c00 	.word	0x40003c00

08000c3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a3d      	ldr	r2, [pc, #244]	@ (8000d50 <HAL_SPI_MspInit+0x114>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d145      	bne.n	8000cea <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c62:	4a3c      	ldr	r2, [pc, #240]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c72:	61bb      	str	r3, [r7, #24]
 8000c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b37      	ldr	r3, [pc, #220]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	4a36      	ldr	r2, [pc, #216]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c82:	4b34      	ldr	r3, [pc, #208]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	617b      	str	r3, [r7, #20]
 8000c8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	4b31      	ldr	r3, [pc, #196]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	4a30      	ldr	r2, [pc, #192]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ca6:	23c0      	movs	r3, #192	@ 0xc0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cc4:	f001 fcfc 	bl	80026c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cc8:	2308      	movs	r3, #8
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd8:	2305      	movs	r3, #5
 8000cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481d      	ldr	r0, [pc, #116]	@ (8000d58 <HAL_SPI_MspInit+0x11c>)
 8000ce4:	f001 fcec 	bl	80026c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000ce8:	e02d      	b.n	8000d46 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1b      	ldr	r2, [pc, #108]	@ (8000d5c <HAL_SPI_MspInit+0x120>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d128      	bne.n	8000d46 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cf4:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf8:	4a16      	ldr	r2, [pc, #88]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000cfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d00:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0c:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	4a10      	ldr	r2, [pc, #64]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_SPI_MspInit+0x118>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d24:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d36:	2306      	movs	r3, #6
 8000d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4807      	ldr	r0, [pc, #28]	@ (8000d60 <HAL_SPI_MspInit+0x124>)
 8000d42:	f001 fcbd 	bl	80026c0 <HAL_GPIO_Init>
}
 8000d46:	bf00      	nop
 8000d48:	3730      	adds	r7, #48	@ 0x30
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40013000 	.word	0x40013000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	40003c00 	.word	0x40003c00
 8000d60:	48000800 	.word	0x48000800

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d86:	4a08      	ldr	r2, [pc, #32]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	603b      	str	r3, [r7, #0]
 8000d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <NMI_Handler+0x4>

08000db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <BusFault_Handler+0x4>

08000dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <UsageFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f94b 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <SystemInit+0x20>)
 8000e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <SystemInit+0x20>)
 8000e18:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e1c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e3c:	4907      	ldr	r1, [pc, #28]	@ (8000e5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40021000 	.word	0x40021000

08000e60 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <LL_APB1_GRP2_EnableClock+0x2c>)
 8000e6a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e6c:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <LL_APB1_GRP2_EnableClock+0x2c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <LL_APB1_GRP2_EnableClock+0x2c>)
 8000e76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	40021000 	.word	0x40021000

08000e90 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000ea6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000eaa:	f7ff ffd9 	bl	8000e60 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000eae:	2002      	movs	r0, #2
 8000eb0:	f7ff ffbe 	bl	8000e30 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4808      	ldr	r0, [pc, #32]	@ (8000ee8 <MX_UCPD1_Init+0x58>)
 8000ec6:	f003 fc24 	bl	8004712 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000eca:	2340      	movs	r3, #64	@ 0x40
 8000ecc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4803      	ldr	r0, [pc, #12]	@ (8000ee8 <MX_UCPD1_Init+0x58>)
 8000edc:	f003 fc19 	bl	8004712 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	48000400 	.word	0x48000400

08000eec <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000ef2:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <MX_USB_PCD_Init+0x4c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000ef8:	2208      	movs	r2, #8
 8000efa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000efe:	2202      	movs	r2, #2
 8000f00:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f04:	2202      	movs	r2, #2
 8000f06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000f14:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000f20:	4804      	ldr	r0, [pc, #16]	@ (8000f34 <MX_USB_PCD_Init+0x48>)
 8000f22:	f001 fe99 	bl	8002c58 <HAL_PCD_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000f2c:	f7ff fe03 	bl	8000b36 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000288 	.word	0x20000288
 8000f38:	40005c00 	.word	0x40005c00

08000f3c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	@ 0x50
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2244      	movs	r2, #68	@ 0x44
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 fc87 	bl	8004860 <memset>
  if(pcdHandle->Instance==USB)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <HAL_PCD_MspInit+0x60>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d11b      	bne.n	8000f94 <HAL_PCD_MspInit+0x58>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f62:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000f66:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fd11 	bl	8003994 <HAL_RCCEx_PeriphCLKConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8000f78:	f7ff fddd 	bl	8000b36 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_PCD_MspInit+0x64>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f80:	4a07      	ldr	r2, [pc, #28]	@ (8000fa0 <HAL_PCD_MspInit+0x64>)
 8000f82:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <HAL_PCD_MspInit+0x64>)
 8000f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000f94:	bf00      	nop
 8000f96:	3750      	adds	r7, #80	@ 0x50
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40005c00 	.word	0x40005c00
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa4:	480d      	ldr	r0, [pc, #52]	@ (8000fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fa6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fa8:	f7ff ff30 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopForever+0xe>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopForever+0x16>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f003 fc4d 	bl	8004870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fd6:	f7ff fcc7 	bl	8000968 <main>

08000fda <LoopForever>:

LoopForever:
    b LoopForever
 8000fda:	e7fe      	b.n	8000fda <LoopForever>
  ldr   r0, =_estack
 8000fdc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe8:	080048e8 	.word	0x080048e8
  ldr r2, =_sbss
 8000fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff0:	20000568 	.word	0x20000568

08000ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC1_2_IRQHandler>

08000ff6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f001 f951 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001006:	200f      	movs	r0, #15
 8001008:	f000 f80e 	bl	8001028 <HAL_InitTick>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	71fb      	strb	r3, [r7, #7]
 8001016:	e001      	b.n	800101c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001018:	f7ff fea4 	bl	8000d64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800101c:	79fb      	ldrb	r3, [r7, #7]

}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001034:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <HAL_InitTick+0x68>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d022      	beq.n	8001082 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_InitTick+0x6c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_InitTick+0x68>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001048:	fbb1 f3f3 	udiv	r3, r1, r3
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f94e 	bl	80022f2 <HAL_SYSTICK_Config>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10f      	bne.n	800107c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b0f      	cmp	r3, #15
 8001060:	d809      	bhi.n	8001076 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001062:	2200      	movs	r2, #0
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	f04f 30ff 	mov.w	r0, #4294967295
 800106a:	f001 f928 	bl	80022be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800106e:	4a0a      	ldr	r2, [pc, #40]	@ (8001098 <HAL_InitTick+0x70>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	e007      	b.n	8001086 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	e004      	b.n	8001086 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	e001      	b.n	8001086 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001086:	7bfb      	ldrb	r3, [r7, #15]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000008 	.word	0x20000008
 8001094:	20000000 	.word	0x20000000
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x1c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_IncTick+0x20>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4413      	add	r3, r2
 80010aa:	4a03      	ldr	r2, [pc, #12]	@ (80010b8 <HAL_IncTick+0x1c>)
 80010ac:	6013      	str	r3, [r2, #0]
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000564 	.word	0x20000564
 80010bc:	20000008 	.word	0x20000008

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000564 	.word	0x20000564

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d004      	beq.n	80010fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <HAL_Delay+0x40>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fc:	bf00      	nop
 80010fe:	f7ff ffdf 	bl	80010c0 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	429a      	cmp	r2, r3
 800110c:	d8f7      	bhi.n	80010fe <HAL_Delay+0x26>
  {
  }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000008 	.word	0x20000008

0800111c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	431a      	orrs	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
}
 8001136:	bf00      	nop
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001184:	b480      	push	{r7}
 8001186:	b087      	sub	sp, #28
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
 8001190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3360      	adds	r3, #96	@ 0x60
 8001196:	461a      	mov	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <LL_ADC_SetOffset+0x44>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	430a      	orrs	r2, r1
 80011b2:	4313      	orrs	r3, r2
 80011b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011bc:	bf00      	nop
 80011be:	371c      	adds	r7, #28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	03fff000 	.word	0x03fff000

080011cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3360      	adds	r3, #96	@ 0x60
 80011da:	461a      	mov	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3360      	adds	r3, #96	@ 0x60
 8001208:	461a      	mov	r2, r3
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	431a      	orrs	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001222:	bf00      	nop
 8001224:	371c      	adds	r7, #28
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800122e:	b480      	push	{r7}
 8001230:	b087      	sub	sp, #28
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3360      	adds	r3, #96	@ 0x60
 800123e:	461a      	mov	r2, r3
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	431a      	orrs	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3360      	adds	r3, #96	@ 0x60
 8001274:	461a      	mov	r2, r3
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800128e:	bf00      	nop
 8001290:	371c      	adds	r7, #28
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	615a      	str	r2, [r3, #20]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3330      	adds	r3, #48	@ 0x30
 80012d0:	461a      	mov	r2, r3
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	4413      	add	r3, r2
 80012de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	211f      	movs	r1, #31
 80012ec:	fa01 f303 	lsl.w	r3, r1, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	401a      	ands	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	0e9b      	lsrs	r3, r3, #26
 80012f8:	f003 011f 	and.w	r1, r3, #31
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	431a      	orrs	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3314      	adds	r3, #20
 8001328:	461a      	mov	r2, r3
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	0e5b      	lsrs	r3, r3, #25
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	4413      	add	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	0d1b      	lsrs	r3, r3, #20
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2107      	movs	r1, #7
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	401a      	ands	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0d1b      	lsrs	r3, r3, #20
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	431a      	orrs	r2, r3
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001362:	bf00      	nop
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0318 	and.w	r3, r3, #24
 8001392:	4908      	ldr	r1, [pc, #32]	@ (80013b4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001394:	40d9      	lsrs	r1, r3
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	400b      	ands	r3, r1
 800139a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800139e:	431a      	orrs	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013a6:	bf00      	nop
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	0007ffff 	.word	0x0007ffff

080013b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80013c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6093      	str	r3, [r2, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001414:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001418:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001440:	d101      	bne.n	8001446 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b01      	cmp	r3, #1
 8001466:	d101      	bne.n	800146c <LL_ADC_IsEnabled+0x18>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <LL_ADC_IsEnabled+0x1a>
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	2b04      	cmp	r3, #4
 800148c:	d101      	bne.n	8001492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d101      	bne.n	80014b8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014b4:	2301      	movs	r3, #1
 80014b6:	e000      	b.n	80014ba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	@ 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e167      	b.n	80017b2 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d109      	bne.n	8001504 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7fe ff6f 	bl	80003d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff67 	bl	80013dc <LL_ADC_IsDeepPowerDownEnabled>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff ff4d 	bl	80013b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff82 	bl	800142c <LL_ADC_IsInternalRegulatorEnabled>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d115      	bne.n	800155a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ff66 	bl	8001404 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001538:	4ba0      	ldr	r3, [pc, #640]	@ (80017bc <HAL_ADC_Init+0x2f4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	099b      	lsrs	r3, r3, #6
 800153e:	4aa0      	ldr	r2, [pc, #640]	@ (80017c0 <HAL_ADC_Init+0x2f8>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	3301      	adds	r3, #1
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800154c:	e002      	b.n	8001554 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3b01      	subs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f9      	bne.n	800154e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff64 	bl	800142c <LL_ADC_IsInternalRegulatorEnabled>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10d      	bne.n	8001586 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800156e:	f043 0210 	orr.w	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800157a:	f043 0201 	orr.w	r2, r3, #1
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ff75 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 8001590:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 8100 	bne.w	80017a0 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f040 80fc 	bne.w	80017a0 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ac:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015b0:	f043 0202 	orr.w	r2, r3, #2
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff49 	bl	8001454 <LL_ADC_IsEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80015c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80015cc:	f7ff ff42 	bl	8001454 <LL_ADC_IsEnabled>
 80015d0:	4604      	mov	r4, r0
 80015d2:	487c      	ldr	r0, [pc, #496]	@ (80017c4 <HAL_ADC_Init+0x2fc>)
 80015d4:	f7ff ff3e 	bl	8001454 <LL_ADC_IsEnabled>
 80015d8:	4603      	mov	r3, r0
 80015da:	4323      	orrs	r3, r4
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4878      	ldr	r0, [pc, #480]	@ (80017c8 <HAL_ADC_Init+0x300>)
 80015e8:	f7ff fd98 	bl	800111c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7f5b      	ldrb	r3, [r3, #29]
 80015f0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015f6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80015fc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001602:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800160a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001616:	2b01      	cmp	r3, #1
 8001618:	d106      	bne.n	8001628 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161e:	3b01      	subs	r3, #1
 8001620:	045b      	lsls	r3, r3, #17
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d009      	beq.n	8001644 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001634:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4313      	orrs	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	68da      	ldr	r2, [r3, #12]
 800164a:	4b60      	ldr	r3, [pc, #384]	@ (80017cc <HAL_ADC_Init+0x304>)
 800164c:	4013      	ands	r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	69b9      	ldr	r1, [r7, #24]
 8001654:	430b      	orrs	r3, r1
 8001656:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff14 	bl	80014a0 <LL_ADC_INJ_IsConversionOngoing>
 8001678:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d16d      	bne.n	800175c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d16a      	bne.n	800175c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800168a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001692:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001694:	4313      	orrs	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016a2:	f023 0302 	bic.w	r3, r3, #2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	69b9      	ldr	r1, [r7, #24]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d017      	beq.n	80016e8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	691a      	ldr	r2, [r3, #16]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80016c6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80016d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80016d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6911      	ldr	r1, [r2, #16]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80016e6:	e013      	b.n	8001710 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80016f6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001708:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800170c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001716:	2b01      	cmp	r3, #1
 8001718:	d118      	bne.n	800174c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001724:	f023 0304 	bic.w	r3, r3, #4
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001736:	4311      	orrs	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800173c:	430a      	orrs	r2, r1
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d10c      	bne.n	800177e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f023 010f 	bic.w	r1, r3, #15
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a1b      	ldr	r3, [r3, #32]
 8001772:	1e5a      	subs	r2, r3, #1
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	430a      	orrs	r2, r1
 800177a:	631a      	str	r2, [r3, #48]	@ 0x30
 800177c:	e007      	b.n	800178e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020f 	bic.w	r2, r2, #15
 800178c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001792:	f023 0303 	bic.w	r3, r3, #3
 8001796:	f043 0201 	orr.w	r2, r3, #1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800179e:	e007      	b.n	80017b0 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	f043 0210 	orr.w	r2, r3, #16
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80017b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3724      	adds	r7, #36	@ 0x24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd90      	pop	{r4, r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000
 80017c0:	053e2d63 	.word	0x053e2d63
 80017c4:	50000100 	.word	0x50000100
 80017c8:	50000300 	.word	0x50000300
 80017cc:	fff04007 	.word	0xfff04007

080017d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0b6      	sub	sp, #216	@ 0xd8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x22>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e3c8      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x7b4>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe3b 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 83ad 	bne.w	8001f66 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6859      	ldr	r1, [r3, #4]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	f7ff fd51 	bl	80012c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fe29 	bl	800147a <LL_ADC_REG_IsConversionOngoing>
 8001828:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fe35 	bl	80014a0 <LL_ADC_INJ_IsConversionOngoing>
 8001836:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800183a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800183e:	2b00      	cmp	r3, #0
 8001840:	f040 81d9 	bne.w	8001bf6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001848:	2b00      	cmp	r3, #0
 800184a:	f040 81d4 	bne.w	8001bf6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001856:	d10f      	bne.n	8001878 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6818      	ldr	r0, [r3, #0]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	4619      	mov	r1, r3
 8001864:	f7ff fd58 	bl	8001318 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fd12 	bl	800129a <LL_ADC_SetSamplingTimeCommonConfig>
 8001876:	e00e      	b.n	8001896 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6818      	ldr	r0, [r3, #0]
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6819      	ldr	r1, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	461a      	mov	r2, r3
 8001886:	f7ff fd47 	bl	8001318 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fd02 	bl	800129a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695a      	ldr	r2, [r3, #20]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	2b04      	cmp	r3, #4
 80018b6:	d022      	beq.n	80018fe <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	6919      	ldr	r1, [r3, #16]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80018c8:	f7ff fc5c 	bl	8001184 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6919      	ldr	r1, [r3, #16]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	461a      	mov	r2, r3
 80018da:	f7ff fca8 	bl	800122e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6818      	ldr	r0, [r3, #0]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d102      	bne.n	80018f4 <HAL_ADC_ConfigChannel+0x124>
 80018ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80018f2:	e000      	b.n	80018f6 <HAL_ADC_ConfigChannel+0x126>
 80018f4:	2300      	movs	r3, #0
 80018f6:	461a      	mov	r2, r3
 80018f8:	f7ff fcb4 	bl	8001264 <LL_ADC_SetOffsetSaturation>
 80018fc:	e17b      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fc61 	bl	80011cc <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10a      	bne.n	800192a <HAL_ADC_ConfigChannel+0x15a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2100      	movs	r1, #0
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fc56 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	0e9b      	lsrs	r3, r3, #26
 8001924:	f003 021f 	and.w	r2, r3, #31
 8001928:	e01e      	b.n	8001968 <HAL_ADC_ConfigChannel+0x198>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fc4b 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001940:	fa93 f3a3 	rbit	r3, r3
 8001944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001948:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800194c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001958:	2320      	movs	r3, #32
 800195a:	e004      	b.n	8001966 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800195c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001960:	fab3 f383 	clz	r3, r3
 8001964:	b2db      	uxtb	r3, r3
 8001966:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001970:	2b00      	cmp	r3, #0
 8001972:	d105      	bne.n	8001980 <HAL_ADC_ConfigChannel+0x1b0>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	0e9b      	lsrs	r3, r3, #26
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	e018      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1e2>
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800198c:	fa93 f3a3 	rbit	r3, r3
 8001990:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800199c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80019a4:	2320      	movs	r3, #32
 80019a6:	e004      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80019a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019ac:	fab3 f383 	clz	r3, r3
 80019b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d106      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fc1a 	bl	80011f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fbfe 	bl	80011cc <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10a      	bne.n	80019f0 <HAL_ADC_ConfigChannel+0x220>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2101      	movs	r1, #1
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fbf3 	bl	80011cc <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	0e9b      	lsrs	r3, r3, #26
 80019ea:	f003 021f 	and.w	r2, r3, #31
 80019ee:	e01e      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x25e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff fbe8 	bl	80011cc <LL_ADC_GetOffsetChannel>
 80019fc:	4603      	mov	r3, r0
 80019fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001a16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001a1e:	2320      	movs	r3, #32
 8001a20:	e004      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001a22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <HAL_ADC_ConfigChannel+0x276>
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0e9b      	lsrs	r3, r3, #26
 8001a40:	f003 031f 	and.w	r3, r3, #31
 8001a44:	e018      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x2a8>
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001a5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001a62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001a6a:	2320      	movs	r3, #32
 8001a6c:	e004      	b.n	8001a78 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a72:	fab3 f383 	clz	r3, r3
 8001a76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d106      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	2101      	movs	r1, #1
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fbb7 	bl	80011f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2102      	movs	r1, #2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fb9b 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x2e6>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2102      	movs	r1, #2
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fb90 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	0e9b      	lsrs	r3, r3, #26
 8001ab0:	f003 021f 	and.w	r2, r3, #31
 8001ab4:	e01e      	b.n	8001af4 <HAL_ADC_ConfigChannel+0x324>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2102      	movs	r1, #2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fb85 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001acc:	fa93 f3a3 	rbit	r3, r3
 8001ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ad8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001ae4:	2320      	movs	r3, #32
 8001ae6:	e004      	b.n	8001af2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001ae8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d105      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x33c>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	f003 031f 	and.w	r3, r3, #31
 8001b0a:	e016      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x36a>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b14:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001b1e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d101      	bne.n	8001b30 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	e004      	b.n	8001b3a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b34:	fab3 f383 	clz	r3, r3
 8001b38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d106      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2200      	movs	r2, #0
 8001b44:	2102      	movs	r1, #2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fb56 	bl	80011f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2103      	movs	r1, #3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fb3a 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10a      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x3a8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2103      	movs	r1, #3
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fb2f 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	0e9b      	lsrs	r3, r3, #26
 8001b72:	f003 021f 	and.w	r2, r3, #31
 8001b76:	e017      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x3d8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2103      	movs	r1, #3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fb24 	bl	80011cc <LL_ADC_GetOffsetChannel>
 8001b84:	4603      	mov	r3, r0
 8001b86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b8a:	fa93 f3a3 	rbit	r3, r3
 8001b8e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001b90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b92:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001b94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e003      	b.n	8001ba6 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001b9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ba0:	fab3 f383 	clz	r3, r3
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x3f0>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	0e9b      	lsrs	r3, r3, #26
 8001bba:	f003 031f 	and.w	r3, r3, #31
 8001bbe:	e011      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x414>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e003      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001bdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	2103      	movs	r1, #3
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fb01 	bl	80011f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fc2a 	bl	8001454 <LL_ADC_IsEnabled>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f040 8140 	bne.w	8001e88 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6819      	ldr	r1, [r3, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f7ff fbab 	bl	8001370 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	4a8f      	ldr	r2, [pc, #572]	@ (8001e5c <HAL_ADC_ConfigChannel+0x68c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	f040 8131 	bne.w	8001e88 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10b      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x47e>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	0e9b      	lsrs	r3, r3, #26
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	f003 031f 	and.w	r3, r3, #31
 8001c42:	2b09      	cmp	r3, #9
 8001c44:	bf94      	ite	ls
 8001c46:	2301      	movls	r3, #1
 8001c48:	2300      	movhi	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	e019      	b.n	8001c82 <HAL_ADC_ConfigChannel+0x4b2>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001c5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c5e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001c60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001c66:	2320      	movs	r3, #32
 8001c68:	e003      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001c6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	2b09      	cmp	r3, #9
 8001c7a:	bf94      	ite	ls
 8001c7c:	2301      	movls	r3, #1
 8001c7e:	2300      	movhi	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d079      	beq.n	8001d7a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d107      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x4d2>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	0e9b      	lsrs	r3, r3, #26
 8001c98:	3301      	adds	r3, #1
 8001c9a:	069b      	lsls	r3, r3, #26
 8001c9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ca0:	e015      	b.n	8001cce <HAL_ADC_ConfigChannel+0x4fe>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001caa:	fa93 f3a3 	rbit	r3, r3
 8001cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cb2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001cba:	2320      	movs	r3, #32
 8001cbc:	e003      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc0:	fab3 f383 	clz	r3, r3
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	069b      	lsls	r3, r3, #26
 8001cca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_ADC_ConfigChannel+0x51e>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	0e9b      	lsrs	r3, r3, #26
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f003 031f 	and.w	r3, r3, #31
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	e017      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x54e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cf6:	fa93 f3a3 	rbit	r3, r3
 8001cfa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8001d06:	2320      	movs	r3, #32
 8001d08:	e003      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8001d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d0c:	fab3 f383 	clz	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	3301      	adds	r3, #1
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1e:	ea42 0103 	orr.w	r1, r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d10a      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x574>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	0e9b      	lsrs	r3, r3, #26
 8001d34:	3301      	adds	r3, #1
 8001d36:	f003 021f 	and.w	r2, r3, #31
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	051b      	lsls	r3, r3, #20
 8001d42:	e018      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x5a6>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 021f 	and.w	r2, r3, #31
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d76:	430b      	orrs	r3, r1
 8001d78:	e081      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d107      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x5c6>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0e9b      	lsrs	r3, r3, #26
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	069b      	lsls	r3, r3, #26
 8001d90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d94:	e015      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x5f2>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d9e:	fa93 f3a3 	rbit	r3, r3
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001dae:	2320      	movs	r3, #32
 8001db0:	e003      	b.n	8001dba <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8001db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	069b      	lsls	r3, r3, #26
 8001dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x612>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	0e9b      	lsrs	r3, r3, #26
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	2101      	movs	r1, #1
 8001ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8001de0:	e017      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x642>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de8:	6a3b      	ldr	r3, [r7, #32]
 8001dea:	fa93 f3a3 	rbit	r3, r3
 8001dee:	61fb      	str	r3, [r7, #28]
  return result;
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	e003      	b.n	8001e06 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	fab3 f383 	clz	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3301      	adds	r3, #1
 8001e08:	f003 031f 	and.w	r3, r3, #31
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	ea42 0103 	orr.w	r1, r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10d      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x66e>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0e9b      	lsrs	r3, r3, #26
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f003 021f 	and.w	r2, r3, #31
 8001e2e:	4613      	mov	r3, r2
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4413      	add	r3, r2
 8001e34:	3b1e      	subs	r3, #30
 8001e36:	051b      	lsls	r3, r3, #20
 8001e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	e01e      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x6ac>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	613b      	str	r3, [r7, #16]
  return result;
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d104      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001e56:	2320      	movs	r3, #32
 8001e58:	e006      	b.n	8001e68 <HAL_ADC_ConfigChannel+0x698>
 8001e5a:	bf00      	nop
 8001e5c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fab3 f383 	clz	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	f003 021f 	and.w	r2, r3, #31
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	3b1e      	subs	r3, #30
 8001e76:	051b      	lsls	r3, r3, #20
 8001e78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e82:	4619      	mov	r1, r3
 8001e84:	f7ff fa48 	bl	8001318 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001f8c <HAL_ADC_ConfigChannel+0x7bc>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d071      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e94:	483e      	ldr	r0, [pc, #248]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e96:	f7ff f967 	bl	8001168 <LL_ADC_GetCommonPathInternalCh>
 8001e9a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8001f94 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d004      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x6e2>
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a3a      	ldr	r2, [pc, #232]	@ (8001f98 <HAL_ADC_ConfigChannel+0x7c8>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d127      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001eb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d121      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ec6:	d157      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ecc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	482f      	ldr	r0, [pc, #188]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ed4:	f7ff f935 	bl	8001142 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed8:	4b30      	ldr	r3, [pc, #192]	@ (8001f9c <HAL_ADC_ConfigChannel+0x7cc>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	099b      	lsrs	r3, r3, #6
 8001ede:	4a30      	ldr	r2, [pc, #192]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ef2:	e002      	b.n	8001efa <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f00:	e03a      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a27      	ldr	r2, [pc, #156]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d113      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02a      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4818      	ldr	r0, [pc, #96]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f2e:	f7ff f908 	bl	8001142 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f32:	e021      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1c      	ldr	r2, [pc, #112]	@ (8001fac <HAL_ADC_ConfigChannel+0x7dc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d11c      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a16      	ldr	r2, [pc, #88]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d011      	beq.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f60:	f7ff f8ef 	bl	8001142 <LL_ADC_SetCommonPathInternalCh>
 8001f64:	e008      	b.n	8001f78 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f80:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	37d8      	adds	r7, #216	@ 0xd8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	80080000 	.word	0x80080000
 8001f90:	50000300 	.word	0x50000300
 8001f94:	c3210000 	.word	0xc3210000
 8001f98:	90c00010 	.word	0x90c00010
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	053e2d63 	.word	0x053e2d63
 8001fa4:	c7520000 	.word	0xc7520000
 8001fa8:	50000100 	.word	0x50000100
 8001fac:	cb840000 	.word	0xcb840000

08001fb0 <LL_ADC_IsEnabled>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_IsEnabled+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_IsEnabled+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b0a1      	sub	sp, #132	@ 0x84
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002016:	2302      	movs	r3, #2
 8002018:	e08b      	b.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002022:	2300      	movs	r3, #0
 8002024:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002026:	2300      	movs	r3, #0
 8002028:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002032:	d102      	bne.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002034:	4b41      	ldr	r3, [pc, #260]	@ (800213c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	e001      	b.n	800203e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d10b      	bne.n	800205c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002048:	f043 0220 	orr.w	r2, r3, #32
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e06a      	b.n	8002132 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ffb9 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002064:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff ffb3 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d14c      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002078:	2b00      	cmp	r3, #0
 800207a:	d149      	bne.n	8002110 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800207c:	4b30      	ldr	r3, [pc, #192]	@ (8002140 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800207e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d028      	beq.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002088:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6859      	ldr	r1, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800209a:	035b      	lsls	r3, r3, #13
 800209c:	430b      	orrs	r3, r1
 800209e:	431a      	orrs	r2, r3
 80020a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020a2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020a8:	f7ff ff82 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020ac:	4604      	mov	r4, r0
 80020ae:	4823      	ldr	r0, [pc, #140]	@ (800213c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020b0:	f7ff ff7e 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4323      	orrs	r3, r4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d133      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020bc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80020c4:	f023 030f 	bic.w	r3, r3, #15
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	6811      	ldr	r1, [r2, #0]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	6892      	ldr	r2, [r2, #8]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020d6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020d8:	e024      	b.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020e6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020ea:	f7ff ff61 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020ee:	4604      	mov	r4, r0
 80020f0:	4812      	ldr	r0, [pc, #72]	@ (800213c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80020f2:	f7ff ff5d 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020f6:	4603      	mov	r3, r0
 80020f8:	4323      	orrs	r3, r4
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d112      	bne.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002106:	f023 030f 	bic.w	r3, r3, #15
 800210a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800210c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800210e:	e009      	b.n	8002124 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002114:	f043 0220 	orr.w	r2, r3, #32
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002122:	e000      	b.n	8002126 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002124:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800212e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002132:	4618      	mov	r0, r3
 8002134:	3784      	adds	r7, #132	@ 0x84
 8002136:	46bd      	mov	sp, r7
 8002138:	bd90      	pop	{r4, r7, pc}
 800213a:	bf00      	nop
 800213c:	50000100 	.word	0x50000100
 8002140:	50000300 	.word	0x50000300

08002144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002154:	4b0c      	ldr	r3, [pc, #48]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002160:	4013      	ands	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800216c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002176:	4a04      	ldr	r2, [pc, #16]	@ (8002188 <__NVIC_SetPriorityGrouping+0x44>)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	60d3      	str	r3, [r2, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	f003 0307 	and.w	r3, r3, #7
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	@ (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	@ (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	@ 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff47 	bl	8002144 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff5e 	bl	800218c <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff90 	bl	80021fc <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5f 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ffb2 	bl	8002264 <SysTick_Config>
 8002300:	4603      	mov	r3, r0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}

0800230a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e014      	b.n	8002346 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	791b      	ldrb	r3, [r3, #4]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d105      	bne.n	8002332 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7fe f96d 	bl	800060c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2202      	movs	r2, #2
 8002336:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d002      	beq.n	800236c <HAL_DAC_ConfigChannel+0x1c>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e19e      	b.n	80026ae <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	795b      	ldrb	r3, [r3, #5]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d101      	bne.n	800237c <HAL_DAC_ConfigChannel+0x2c>
 8002378:	2302      	movs	r3, #2
 800237a:	e198      	b.n	80026ae <HAL_DAC_ConfigChannel+0x35e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2201      	movs	r2, #1
 8002380:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2202      	movs	r2, #2
 8002386:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	2b04      	cmp	r3, #4
 800238e:	d17a      	bne.n	8002486 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002390:	f7fe fe96 	bl	80010c0 <HAL_GetTick>
 8002394:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d13d      	bne.n	8002418 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800239c:	e018      	b.n	80023d0 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800239e:	f7fe fe8f 	bl	80010c0 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d911      	bls.n	80023d0 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f043 0208 	orr.w	r2, r3, #8
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2203      	movs	r2, #3
 80023ca:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e16e      	b.n	80026ae <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1df      	bne.n	800239e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80023e8:	e020      	b.n	800242c <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80023ea:	f7fe fe69 	bl	80010c0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d90f      	bls.n	8002418 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da0a      	bge.n	8002418 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	f043 0208 	orr.w	r2, r3, #8
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2203      	movs	r2, #3
 8002412:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e14a      	b.n	80026ae <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800241e:	2b00      	cmp	r3, #0
 8002420:	dbe3      	blt.n	80023ea <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800242a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f003 0310 	and.w	r3, r3, #16
 8002438:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800243c:	fa01 f303 	lsl.w	r3, r1, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	ea02 0103 	and.w	r1, r2, r3
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	409a      	lsls	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	21ff      	movs	r1, #255	@ 0xff
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	ea02 0103 	and.w	r1, r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	409a      	lsls	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d11d      	bne.n	80024ca <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f003 0310 	and.w	r3, r3, #16
 800249c:	221f      	movs	r2, #31
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a6:	4013      	ands	r3, r2
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f003 0310 	and.w	r3, r3, #16
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024be:	4313      	orrs	r3, r2
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2207      	movs	r2, #7
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024e2:	4013      	ands	r3, r2
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d102      	bne.n	80024f4 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	e00f      	b.n	8002514 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d102      	bne.n	8002502 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80024fc:	2301      	movs	r3, #1
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	e008      	b.n	8002514 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800250a:	2301      	movs	r3, #1
 800250c:	623b      	str	r3, [r7, #32]
 800250e:	e001      	b.n	8002514 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002510:	2300      	movs	r3, #0
 8002512:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	6a3a      	ldr	r2, [r7, #32]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002536:	4013      	ands	r3, r2
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	791b      	ldrb	r3, [r3, #4]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d102      	bne.n	8002548 <HAL_DAC_ConfigChannel+0x1f8>
 8002542:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002546:	e000      	b.n	800254a <HAL_DAC_ConfigChannel+0x1fa>
 8002548:	2300      	movs	r3, #0
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	4313      	orrs	r3, r2
 800254e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43db      	mvns	r3, r3
 8002560:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002562:	4013      	ands	r3, r2
 8002564:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	795b      	ldrb	r3, [r3, #5]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d102      	bne.n	8002574 <HAL_DAC_ConfigChannel+0x224>
 800256e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002572:	e000      	b.n	8002576 <HAL_DAC_ConfigChannel+0x226>
 8002574:	2300      	movs	r3, #0
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d114      	bne.n	80025b6 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800258c:	f001 f9b0 	bl	80038f0 <HAL_RCC_GetHCLKFreq>
 8002590:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4a48      	ldr	r2, [pc, #288]	@ (80026b8 <HAL_DAC_ConfigChannel+0x368>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d904      	bls.n	80025a4 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a2:	e00f      	b.n	80025c4 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4a45      	ldr	r2, [pc, #276]	@ (80026bc <HAL_DAC_ConfigChannel+0x36c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d90a      	bls.n	80025c2 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b4:	e006      	b.n	80025c4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025bc:	4313      	orrs	r3, r2
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c0:	e000      	b.n	80025c4 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80025c2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025d2:	4313      	orrs	r3, r2
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0310 	and.w	r3, r3, #16
 80025ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002616:	4013      	ands	r3, r2
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800262e:	4313      	orrs	r3, r2
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002638:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	22c0      	movs	r2, #192	@ 0xc0
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	021b      	lsls	r3, r3, #8
 800266a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002684:	fa01 f303 	lsl.w	r3, r1, r3
 8002688:	43db      	mvns	r3, r3
 800268a:	ea02 0103 	and.w	r1, r2, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80026ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3728      	adds	r7, #40	@ 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	09896800 	.word	0x09896800
 80026bc:	04c4b400 	.word	0x04c4b400

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026ce:	e15a      	b.n	8002986 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 814c 	beq.w	8002980 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d005      	beq.n	8002700 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d130      	bne.n	8002762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002736:	2201      	movs	r2, #1
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 0201 	and.w	r2, r3, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b03      	cmp	r3, #3
 800276c:	d017      	beq.n	800279e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d123      	bne.n	80027f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80a6 	beq.w	8002980 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002834:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_GPIO_Init+0x2e4>)
 8002836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002838:	4a5a      	ldr	r2, [pc, #360]	@ (80029a4 <HAL_GPIO_Init+0x2e4>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002840:	4b58      	ldr	r3, [pc, #352]	@ (80029a4 <HAL_GPIO_Init+0x2e4>)
 8002842:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284c:	4a56      	ldr	r2, [pc, #344]	@ (80029a8 <HAL_GPIO_Init+0x2e8>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002876:	d01f      	beq.n	80028b8 <HAL_GPIO_Init+0x1f8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4c      	ldr	r2, [pc, #304]	@ (80029ac <HAL_GPIO_Init+0x2ec>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d019      	beq.n	80028b4 <HAL_GPIO_Init+0x1f4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a4b      	ldr	r2, [pc, #300]	@ (80029b0 <HAL_GPIO_Init+0x2f0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d013      	beq.n	80028b0 <HAL_GPIO_Init+0x1f0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a4a      	ldr	r2, [pc, #296]	@ (80029b4 <HAL_GPIO_Init+0x2f4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d00d      	beq.n	80028ac <HAL_GPIO_Init+0x1ec>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a49      	ldr	r2, [pc, #292]	@ (80029b8 <HAL_GPIO_Init+0x2f8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0x1e8>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a48      	ldr	r2, [pc, #288]	@ (80029bc <HAL_GPIO_Init+0x2fc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_GPIO_Init+0x1e4>
 80028a0:	2305      	movs	r3, #5
 80028a2:	e00a      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028a4:	2306      	movs	r3, #6
 80028a6:	e008      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e006      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028ac:	2303      	movs	r3, #3
 80028ae:	e004      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e002      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_GPIO_Init+0x1fa>
 80028b8:	2300      	movs	r3, #0
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	f002 0203 	and.w	r2, r2, #3
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	4093      	lsls	r3, r2
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ca:	4937      	ldr	r1, [pc, #220]	@ (80029a8 <HAL_GPIO_Init+0x2e8>)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028d8:	4b39      	ldr	r3, [pc, #228]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	4013      	ands	r3, r2
 80028e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028fc:	4a30      	ldr	r2, [pc, #192]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002902:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43db      	mvns	r3, r3
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4013      	ands	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002926:	4a26      	ldr	r2, [pc, #152]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800292c:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002950:	4a1b      	ldr	r2, [pc, #108]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	43db      	mvns	r3, r3
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800297a:	4a11      	ldr	r2, [pc, #68]	@ (80029c0 <HAL_GPIO_Init+0x300>)
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	f47f ae9d 	bne.w	80026d0 <HAL_GPIO_Init+0x10>
  }
}
 8002996:	bf00      	nop
 8002998:	bf00      	nop
 800299a:	371c      	adds	r7, #28
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010000 	.word	0x40010000
 80029ac:	48000400 	.word	0x48000400
 80029b0:	48000800 	.word	0x48000800
 80029b4:	48000c00 	.word	0x48000c00
 80029b8:	48001000 	.word	0x48001000
 80029bc:	48001400 	.word	0x48001400
 80029c0:	40010400 	.word	0x40010400

080029c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
 80029d0:	4613      	mov	r3, r2
 80029d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029d4:	787b      	ldrb	r3, [r7, #1]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029e0:	e002      	b.n	80029e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e08d      	b.n	8002b22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7fd ff2e 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2224      	movs	r2, #36	@ 0x24
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0201 	bic.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d107      	bne.n	8002a6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a6a:	609a      	str	r2, [r3, #8]
 8002a6c:	e006      	b.n	8002a7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d108      	bne.n	8002a96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a92:	605a      	str	r2, [r3, #4]
 8002a94:	e007      	b.n	8002aa6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ab4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ab8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ac8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	69d9      	ldr	r1, [r3, #28]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a1a      	ldr	r2, [r3, #32]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3708      	adds	r7, #8
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d138      	bne.n	8002bb2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e032      	b.n	8002bb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2224      	movs	r2, #36	@ 0x24
 8002b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b7c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e000      	b.n	8002bb4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
  }
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b20      	cmp	r3, #32
 8002bd4:	d139      	bne.n	8002c4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e033      	b.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	@ 0x24
 8002bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0201 	bic.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	021b      	lsls	r3, r3, #8
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d101      	bne.n	8002c6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e0c0      	b.n	8002dec <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fe f95c 	bl	8000f3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2203      	movs	r2, #3
 8002c88:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 fdac 	bl	80047ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	73fb      	strb	r3, [r7, #15]
 8002c9a:	e03e      	b.n	8002d1a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c9c:	7bfa      	ldrb	r2, [r7, #15]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	3311      	adds	r3, #17
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cb0:	7bfa      	ldrb	r2, [r7, #15]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	440b      	add	r3, r1
 8002cbe:	3310      	adds	r3, #16
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	440b      	add	r3, r1
 8002cd2:	3313      	adds	r3, #19
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	440b      	add	r3, r1
 8002ce6:	3320      	adds	r3, #32
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3324      	adds	r3, #36	@ 0x24
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	440b      	add	r3, r1
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
 8002d16:	3301      	adds	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	791b      	ldrb	r3, [r3, #4]
 8002d1e:	7bfa      	ldrb	r2, [r7, #15]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d3bb      	bcc.n	8002c9c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
 8002d28:	e044      	b.n	8002db4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d2a:	7bfa      	ldrb	r2, [r7, #15]
 8002d2c:	6879      	ldr	r1, [r7, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	440b      	add	r3, r1
 8002d38:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d52:	7bfa      	ldrb	r2, [r7, #15]
 8002d54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d56:	7bfa      	ldrb	r2, [r7, #15]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	440b      	add	r3, r1
 8002d64:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	440b      	add	r3, r1
 8002d7a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	440b      	add	r3, r1
 8002da6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	3301      	adds	r3, #1
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	791b      	ldrb	r3, [r3, #4]
 8002db8:	7bfa      	ldrb	r2, [r7, #15]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d3b5      	bcc.n	8002d2a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dca:	f001 fd2b 	bl	8004824 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7a9b      	ldrb	r3, [r3, #10]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f805 	bl	8002df4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	b29a      	uxth	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	f043 0302 	orr.w	r3, r3, #2
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d141      	bne.n	8002eda <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e56:	4b4b      	ldr	r3, [pc, #300]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e62:	d131      	bne.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e64:	4b47      	ldr	r3, [pc, #284]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e6a:	4a46      	ldr	r2, [pc, #280]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e74:	4b43      	ldr	r3, [pc, #268]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e7c:	4a41      	ldr	r2, [pc, #260]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e84:	4b40      	ldr	r3, [pc, #256]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2232      	movs	r2, #50	@ 0x32
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e90:	fba2 2303 	umull	r2, r3, r2, r3
 8002e94:	0c9b      	lsrs	r3, r3, #18
 8002e96:	3301      	adds	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9a:	e002      	b.n	8002ea2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea2:	4b38      	ldr	r3, [pc, #224]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eae:	d102      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f2      	bne.n	8002e9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eb6:	4b33      	ldr	r3, [pc, #204]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ebe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec2:	d158      	bne.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e057      	b.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ece:	4a2d      	ldr	r2, [pc, #180]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002ed8:	e04d      	b.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee0:	d141      	bne.n	8002f66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee2:	4b28      	ldr	r3, [pc, #160]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eee:	d131      	bne.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef0:	4b24      	ldr	r3, [pc, #144]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ef6:	4a23      	ldr	r2, [pc, #140]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f00:	4b20      	ldr	r3, [pc, #128]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f08:	4a1e      	ldr	r2, [pc, #120]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f10:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2232      	movs	r2, #50	@ 0x32
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002f8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	0c9b      	lsrs	r3, r3, #18
 8002f22:	3301      	adds	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f26:	e002      	b.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2e:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3a:	d102      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f2      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f4e:	d112      	bne.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e011      	b.n	8002f78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f54:	4b0b      	ldr	r3, [pc, #44]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f64:	e007      	b.n	8002f76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f66:	4b07      	ldr	r3, [pc, #28]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f6e:	4a05      	ldr	r2, [pc, #20]	@ (8002f84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40007000 	.word	0x40007000
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	431bde83 	.word	0x431bde83

08002f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e2fe      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d075      	beq.n	800309a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fae:	4b97      	ldr	r3, [pc, #604]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb8:	4b94      	ldr	r3, [pc, #592]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_OscConfig+0x3e>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x44>
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d10b      	bne.n	8002fec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d05b      	beq.n	8003098 <HAL_RCC_OscConfig+0x108>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d157      	bne.n	8003098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e2d9      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x74>
 8002ff6:	4b85      	ldr	r3, [pc, #532]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a84      	ldr	r2, [pc, #528]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8002ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	e01d      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x98>
 800300e:	4b7f      	ldr	r3, [pc, #508]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7e      	ldr	r2, [pc, #504]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003014:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b7c      	ldr	r3, [pc, #496]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7b      	ldr	r2, [pc, #492]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e00b      	b.n	8003040 <HAL_RCC_OscConfig+0xb0>
 8003028:	4b78      	ldr	r3, [pc, #480]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a77      	ldr	r2, [pc, #476]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	4b75      	ldr	r3, [pc, #468]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a74      	ldr	r2, [pc, #464]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800303a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800303e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d013      	beq.n	8003070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe f83a 	bl	80010c0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe f836 	bl	80010c0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e29e      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003062:	4b6a      	ldr	r3, [pc, #424]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0xc0>
 800306e:	e014      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe f826 	bl	80010c0 <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe f822 	bl	80010c0 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	@ 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e28a      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800308a:	4b60      	ldr	r3, [pc, #384]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0xe8>
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d075      	beq.n	8003192 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a6:	4b59      	ldr	r3, [pc, #356]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b0:	4b56      	ldr	r3, [pc, #344]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2b0c      	cmp	r3, #12
 80030be:	d102      	bne.n	80030c6 <HAL_RCC_OscConfig+0x136>
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d002      	beq.n	80030cc <HAL_RCC_OscConfig+0x13c>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d11f      	bne.n	800310c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030cc:	4b4f      	ldr	r3, [pc, #316]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_OscConfig+0x154>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e25d      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e4:	4b49      	ldr	r3, [pc, #292]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	4946      	ldr	r1, [pc, #280]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030f8:	4b45      	ldr	r3, [pc, #276]	@ (8003210 <HAL_RCC_OscConfig+0x280>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd ff93 	bl	8001028 <HAL_InitTick>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d043      	beq.n	8003190 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e249      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d023      	beq.n	800315c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b3d      	ldr	r3, [pc, #244]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a3c      	ldr	r2, [pc, #240]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800311a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fd ffce 	bl	80010c0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003128:	f7fd ffca 	bl	80010c0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e232      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800313a:	4b34      	ldr	r3, [pc, #208]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003146:	4b31      	ldr	r3, [pc, #196]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	061b      	lsls	r3, r3, #24
 8003154:	492d      	ldr	r1, [pc, #180]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
 800315a:	e01a      	b.n	8003192 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800315c:	4b2b      	ldr	r3, [pc, #172]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a2a      	ldr	r2, [pc, #168]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003162:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd ffaa 	bl	80010c0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003170:	f7fd ffa6 	bl	80010c0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e20e      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003182:	4b22      	ldr	r3, [pc, #136]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x1e0>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d041      	beq.n	8003222 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01c      	beq.n	80031e0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a6:	4b19      	ldr	r3, [pc, #100]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fd ff83 	bl	80010c0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fd ff7f 	bl	80010c0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1e7      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031d0:	4b0e      	ldr	r3, [pc, #56]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0ef      	beq.n	80031be <HAL_RCC_OscConfig+0x22e>
 80031de:	e020      	b.n	8003222 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e0:	4b0a      	ldr	r3, [pc, #40]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031e6:	4a09      	ldr	r2, [pc, #36]	@ (800320c <HAL_RCC_OscConfig+0x27c>)
 80031e8:	f023 0301 	bic.w	r3, r3, #1
 80031ec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fd ff66 	bl	80010c0 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f6:	e00d      	b.n	8003214 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f8:	f7fd ff62 	bl	80010c0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d906      	bls.n	8003214 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e1ca      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
 800320a:	bf00      	nop
 800320c:	40021000 	.word	0x40021000
 8003210:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003214:	4b8c      	ldr	r3, [pc, #560]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ea      	bne.n	80031f8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 80a6 	beq.w	800337c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003234:	4b84      	ldr	r3, [pc, #528]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003236:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_RCC_OscConfig+0x2b4>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <HAL_RCC_OscConfig+0x2b6>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	4b7f      	ldr	r3, [pc, #508]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324e:	4a7e      	ldr	r2, [pc, #504]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003254:	6593      	str	r3, [r2, #88]	@ 0x58
 8003256:	4b7c      	ldr	r3, [pc, #496]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800325a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003262:	2301      	movs	r3, #1
 8003264:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003266:	4b79      	ldr	r3, [pc, #484]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003272:	4b76      	ldr	r3, [pc, #472]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a75      	ldr	r2, [pc, #468]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 8003278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800327c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327e:	f7fd ff1f 	bl	80010c0 <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003286:	f7fd ff1b 	bl	80010c0 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e183      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003298:	4b6c      	ldr	r3, [pc, #432]	@ (800344c <HAL_RCC_OscConfig+0x4bc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d108      	bne.n	80032be <HAL_RCC_OscConfig+0x32e>
 80032ac:	4b66      	ldr	r3, [pc, #408]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032b2:	4a65      	ldr	r2, [pc, #404]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032b4:	f043 0301 	orr.w	r3, r3, #1
 80032b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032bc:	e024      	b.n	8003308 <HAL_RCC_OscConfig+0x378>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d110      	bne.n	80032e8 <HAL_RCC_OscConfig+0x358>
 80032c6:	4b60      	ldr	r3, [pc, #384]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032d6:	4b5c      	ldr	r3, [pc, #368]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032e6:	e00f      	b.n	8003308 <HAL_RCC_OscConfig+0x378>
 80032e8:	4b57      	ldr	r3, [pc, #348]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ee:	4a56      	ldr	r2, [pc, #344]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80032f8:	4b53      	ldr	r3, [pc, #332]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fe:	4a52      	ldr	r2, [pc, #328]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003300:	f023 0304 	bic.w	r3, r3, #4
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d016      	beq.n	800333e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fd fed6 	bl	80010c0 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003316:	e00a      	b.n	800332e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003318:	f7fd fed2 	bl	80010c0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e138      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332e:	4b46      	ldr	r3, [pc, #280]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ed      	beq.n	8003318 <HAL_RCC_OscConfig+0x388>
 800333c:	e015      	b.n	800336a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fd febf 	bl	80010c0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003344:	e00a      	b.n	800335c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003346:	f7fd febb 	bl	80010c0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003354:	4293      	cmp	r3, r2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e121      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800335c:	4b3a      	ldr	r3, [pc, #232]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ed      	bne.n	8003346 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800336a:	7ffb      	ldrb	r3, [r7, #31]
 800336c:	2b01      	cmp	r3, #1
 800336e:	d105      	bne.n	800337c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003370:	4b35      	ldr	r3, [pc, #212]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	4a34      	ldr	r2, [pc, #208]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d03c      	beq.n	8003402 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d01c      	beq.n	80033ca <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003390:	4b2d      	ldr	r3, [pc, #180]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003392:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003396:	4a2c      	ldr	r2, [pc, #176]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a0:	f7fd fe8e 	bl	80010c0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a8:	f7fd fe8a 	bl	80010c0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0f2      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ba:	4b23      	ldr	r3, [pc, #140]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0ef      	beq.n	80033a8 <HAL_RCC_OscConfig+0x418>
 80033c8:	e01b      	b.n	8003402 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033da:	f7fd fe71 	bl	80010c0 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e2:	f7fd fe6d 	bl	80010c0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e0d5      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f4:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1ef      	bne.n	80033e2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 80c9 	beq.w	800359e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800340c:	4b0e      	ldr	r3, [pc, #56]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f000 8083 	beq.w	8003520 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d15e      	bne.n	80034e0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003422:	4b09      	ldr	r3, [pc, #36]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a08      	ldr	r2, [pc, #32]	@ (8003448 <HAL_RCC_OscConfig+0x4b8>)
 8003428:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800342c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342e:	f7fd fe47 	bl	80010c0 <HAL_GetTick>
 8003432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003434:	e00c      	b.n	8003450 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003436:	f7fd fe43 	bl	80010c0 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d905      	bls.n	8003450 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e0ab      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
 8003448:	40021000 	.word	0x40021000
 800344c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003450:	4b55      	ldr	r3, [pc, #340]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ec      	bne.n	8003436 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800345c:	4b52      	ldr	r3, [pc, #328]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	4b52      	ldr	r3, [pc, #328]	@ (80035ac <HAL_RCC_OscConfig+0x61c>)
 8003462:	4013      	ands	r3, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6a11      	ldr	r1, [r2, #32]
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800346c:	3a01      	subs	r2, #1
 800346e:	0112      	lsls	r2, r2, #4
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003476:	0212      	lsls	r2, r2, #8
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800347e:	0852      	lsrs	r2, r2, #1
 8003480:	3a01      	subs	r2, #1
 8003482:	0552      	lsls	r2, r2, #21
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800348a:	0852      	lsrs	r2, r2, #1
 800348c:	3a01      	subs	r2, #1
 800348e:	0652      	lsls	r2, r2, #25
 8003490:	4311      	orrs	r1, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003496:	06d2      	lsls	r2, r2, #27
 8003498:	430a      	orrs	r2, r1
 800349a:	4943      	ldr	r1, [pc, #268]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 800349c:	4313      	orrs	r3, r2
 800349e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b41      	ldr	r3, [pc, #260]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a40      	ldr	r2, [pc, #256]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034ac:	4b3e      	ldr	r3, [pc, #248]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a3d      	ldr	r2, [pc, #244]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b8:	f7fd fe02 	bl	80010c0 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c0:	f7fd fdfe 	bl	80010c0 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e066      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034d2:	4b35      	ldr	r3, [pc, #212]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x530>
 80034de:	e05e      	b.n	800359e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b31      	ldr	r3, [pc, #196]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a30      	ldr	r2, [pc, #192]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 80034e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fd fde8 	bl	80010c0 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd fde4 	bl	80010c0 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e04c      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003506:	4b28      	ldr	r3, [pc, #160]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003512:	4b25      	ldr	r3, [pc, #148]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	4924      	ldr	r1, [pc, #144]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 8003518:	4b25      	ldr	r3, [pc, #148]	@ (80035b0 <HAL_RCC_OscConfig+0x620>)
 800351a:	4013      	ands	r3, r2
 800351c:	60cb      	str	r3, [r1, #12]
 800351e:	e03e      	b.n	800359e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e039      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800352c:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <HAL_RCC_OscConfig+0x618>)
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0203 	and.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	429a      	cmp	r2, r3
 800353e:	d12c      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	3b01      	subs	r3, #1
 800354c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d123      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11b      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d113      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d109      	bne.n	800359a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003590:	085b      	lsrs	r3, r3, #1
 8003592:	3b01      	subs	r3, #1
 8003594:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d001      	beq.n	800359e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	019f800c 	.word	0x019f800c
 80035b0:	feeefffc 	.word	0xfeeefffc

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e11e      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035cc:	4b91      	ldr	r3, [pc, #580]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d910      	bls.n	80035fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035da:	4b8e      	ldr	r3, [pc, #568]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f023 020f 	bic.w	r2, r3, #15
 80035e2:	498c      	ldr	r1, [pc, #560]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b8a      	ldr	r3, [pc, #552]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e106      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d073      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d129      	bne.n	8003664 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003610:	4b81      	ldr	r3, [pc, #516]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d101      	bne.n	8003620 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e0f4      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003620:	f000 f972 	bl	8003908 <RCC_GetSysClockFreqFromPLLSource>
 8003624:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4a7c      	ldr	r2, [pc, #496]	@ (800381c <HAL_RCC_ClockConfig+0x268>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d93f      	bls.n	80036ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800362e:	4b7a      	ldr	r3, [pc, #488]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d009      	beq.n	800364e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d033      	beq.n	80036ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800364a:	2b00      	cmp	r3, #0
 800364c:	d12f      	bne.n	80036ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800364e:	4b72      	ldr	r3, [pc, #456]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003656:	4a70      	ldr	r2, [pc, #448]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003658:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800365c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	e024      	b.n	80036ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2b02      	cmp	r3, #2
 800366a:	d107      	bne.n	800367c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800366c:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d109      	bne.n	800368c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0c6      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367c:	4b66      	ldr	r3, [pc, #408]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e0be      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800368c:	f000 f8ce 	bl	800382c <HAL_RCC_GetSysClockFreq>
 8003690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4a61      	ldr	r2, [pc, #388]	@ (800381c <HAL_RCC_ClockConfig+0x268>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d909      	bls.n	80036ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800369a:	4b5f      	ldr	r3, [pc, #380]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036a2:	4a5d      	ldr	r2, [pc, #372]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b5a      	ldr	r3, [pc, #360]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4957      	ldr	r1, [pc, #348]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c0:	f7fd fcfe 	bl	80010c0 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fd fcfa 	bl	80010c0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e095      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b4e      	ldr	r3, [pc, #312]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d023      	beq.n	8003744 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003708:	4b43      	ldr	r3, [pc, #268]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	4a42      	ldr	r2, [pc, #264]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800370e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003712:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003720:	4b3d      	ldr	r3, [pc, #244]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003728:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800372a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800372e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b39      	ldr	r3, [pc, #228]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4936      	ldr	r1, [pc, #216]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
 8003742:	e008      	b.n	8003756 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b80      	cmp	r3, #128	@ 0x80
 8003748:	d105      	bne.n	8003756 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800374a:	4b33      	ldr	r3, [pc, #204]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	4a32      	ldr	r2, [pc, #200]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 8003750:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003754:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003756:	4b2f      	ldr	r3, [pc, #188]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d21d      	bcs.n	80037a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003764:	4b2b      	ldr	r3, [pc, #172]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f023 020f 	bic.w	r2, r3, #15
 800376c:	4929      	ldr	r1, [pc, #164]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003774:	f7fd fca4 	bl	80010c0 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fd fca0 	bl	80010c0 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e03b      	b.n	800380a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003792:	4b20      	ldr	r3, [pc, #128]	@ (8003814 <HAL_RCC_ClockConfig+0x260>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d1ed      	bne.n	800377c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	4917      	ldr	r1, [pc, #92]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d009      	beq.n	80037de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037ca:	4b13      	ldr	r3, [pc, #76]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	490f      	ldr	r1, [pc, #60]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037de:	f000 f825 	bl	800382c <HAL_RCC_GetSysClockFreq>
 80037e2:	4602      	mov	r2, r0
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <HAL_RCC_ClockConfig+0x264>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	490c      	ldr	r1, [pc, #48]	@ (8003820 <HAL_RCC_ClockConfig+0x26c>)
 80037f0:	5ccb      	ldrb	r3, [r1, r3]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	fa22 f303 	lsr.w	r3, r2, r3
 80037fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003824 <HAL_RCC_ClockConfig+0x270>)
 80037fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80037fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003828 <HAL_RCC_ClockConfig+0x274>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fd fc10 	bl	8001028 <HAL_InitTick>
 8003808:	4603      	mov	r3, r0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40022000 	.word	0x40022000
 8003818:	40021000 	.word	0x40021000
 800381c:	04c4b400 	.word	0x04c4b400
 8003820:	080048d0 	.word	0x080048d0
 8003824:	20000000 	.word	0x20000000
 8003828:	20000004 	.word	0x20000004

0800382c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003832:	4b2c      	ldr	r3, [pc, #176]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b04      	cmp	r3, #4
 800383c:	d102      	bne.n	8003844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800383e:	4b2a      	ldr	r3, [pc, #168]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003840:	613b      	str	r3, [r7, #16]
 8003842:	e047      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003844:	4b27      	ldr	r3, [pc, #156]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d102      	bne.n	8003856 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003850:	4b26      	ldr	r3, [pc, #152]	@ (80038ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	e03e      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003856:	4b23      	ldr	r3, [pc, #140]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 030c 	and.w	r3, r3, #12
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d136      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003862:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800386c:	4b1d      	ldr	r3, [pc, #116]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	3301      	adds	r3, #1
 8003878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d10c      	bne.n	800389a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003880:	4a1a      	ldr	r2, [pc, #104]	@ (80038ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	fbb2 f3f3 	udiv	r3, r2, r3
 8003888:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800388a:	68d2      	ldr	r2, [r2, #12]
 800388c:	0a12      	lsrs	r2, r2, #8
 800388e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003892:	fb02 f303 	mul.w	r3, r2, r3
 8003896:	617b      	str	r3, [r7, #20]
      break;
 8003898:	e00c      	b.n	80038b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800389a:	4a13      	ldr	r2, [pc, #76]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a2:	4a10      	ldr	r2, [pc, #64]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	0a12      	lsrs	r2, r2, #8
 80038a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
      break;
 80038b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	0e5b      	lsrs	r3, r3, #25
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	3301      	adds	r3, #1
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	e001      	b.n	80038d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038d4:	693b      	ldr	r3, [r7, #16]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	40021000 	.word	0x40021000
 80038e8:	00f42400 	.word	0x00f42400
 80038ec:	007a1200 	.word	0x007a1200

080038f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f4:	4b03      	ldr	r3, [pc, #12]	@ (8003904 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f6:	681b      	ldr	r3, [r3, #0]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	20000000 	.word	0x20000000

08003908 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800390e:	4b1e      	ldr	r3, [pc, #120]	@ (8003988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003918:	4b1b      	ldr	r3, [pc, #108]	@ (8003988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	091b      	lsrs	r3, r3, #4
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d10c      	bne.n	8003946 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800392c:	4a17      	ldr	r2, [pc, #92]	@ (800398c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	fbb2 f3f3 	udiv	r3, r2, r3
 8003934:	4a14      	ldr	r2, [pc, #80]	@ (8003988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003936:	68d2      	ldr	r2, [r2, #12]
 8003938:	0a12      	lsrs	r2, r2, #8
 800393a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
    break;
 8003944:	e00c      	b.n	8003960 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003946:	4a12      	ldr	r2, [pc, #72]	@ (8003990 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	4a0e      	ldr	r2, [pc, #56]	@ (8003988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003950:	68d2      	ldr	r2, [r2, #12]
 8003952:	0a12      	lsrs	r2, r2, #8
 8003954:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003958:	fb02 f303 	mul.w	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
    break;
 800395e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003960:	4b09      	ldr	r3, [pc, #36]	@ (8003988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	0e5b      	lsrs	r3, r3, #25
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	3301      	adds	r3, #1
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	fbb2 f3f3 	udiv	r3, r2, r3
 8003978:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800397a:	687b      	ldr	r3, [r7, #4]
}
 800397c:	4618      	mov	r0, r3
 800397e:	371c      	adds	r7, #28
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	40021000 	.word	0x40021000
 800398c:	007a1200 	.word	0x007a1200
 8003990:	00f42400 	.word	0x00f42400

08003994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800399c:	2300      	movs	r3, #0
 800399e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039a0:	2300      	movs	r3, #0
 80039a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8098 	beq.w	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b2:	2300      	movs	r3, #0
 80039b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b6:	4b43      	ldr	r3, [pc, #268]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10d      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c2:	4b40      	ldr	r3, [pc, #256]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ce:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d6:	60bb      	str	r3, [r7, #8]
 80039d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039da:	2301      	movs	r3, #1
 80039dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039de:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a39      	ldr	r2, [pc, #228]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ea:	f7fd fb69 	bl	80010c0 <HAL_GetTick>
 80039ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039f0:	e009      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fd fb65 	bl	80010c0 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d902      	bls.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	74fb      	strb	r3, [r7, #19]
        break;
 8003a04:	e005      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a06:	4b30      	ldr	r3, [pc, #192]	@ (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d0ef      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d159      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a18:	4b2a      	ldr	r3, [pc, #168]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d01e      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d019      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a34:	4b23      	ldr	r3, [pc, #140]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a40:	4b20      	ldr	r3, [pc, #128]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a50:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a56:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a60:	4a18      	ldr	r2, [pc, #96]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d016      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a72:	f7fd fb25 	bl	80010c0 <HAL_GetTick>
 8003a76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a78:	e00b      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fd fb21 	bl	80010c0 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d902      	bls.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a92:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0ec      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10b      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa6:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	4903      	ldr	r1, [pc, #12]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003abc:	e008      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003abe:	7cfb      	ldrb	r3, [r7, #19]
 8003ac0:	74bb      	strb	r3, [r7, #18]
 8003ac2:	e005      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	7cfb      	ldrb	r3, [r7, #19]
 8003ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ad0:	7c7b      	ldrb	r3, [r7, #17]
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d105      	bne.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad6:	4ba6      	ldr	r3, [pc, #664]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	4aa5      	ldr	r2, [pc, #660]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003adc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aee:	4ba0      	ldr	r3, [pc, #640]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af4:	f023 0203 	bic.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	499c      	ldr	r1, [pc, #624]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b10:	4b97      	ldr	r3, [pc, #604]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b16:	f023 020c 	bic.w	r2, r3, #12
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	4994      	ldr	r1, [pc, #592]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b32:	4b8f      	ldr	r3, [pc, #572]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b38:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	498b      	ldr	r1, [pc, #556]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0308 	and.w	r3, r3, #8
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00a      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b54:	4b86      	ldr	r3, [pc, #536]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	4983      	ldr	r1, [pc, #524]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b76:	4b7e      	ldr	r3, [pc, #504]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	497a      	ldr	r1, [pc, #488]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b98:	4b75      	ldr	r3, [pc, #468]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	4972      	ldr	r1, [pc, #456]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bba:	4b6d      	ldr	r3, [pc, #436]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	4969      	ldr	r1, [pc, #420]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bdc:	4b64      	ldr	r3, [pc, #400]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a1b      	ldr	r3, [r3, #32]
 8003bea:	4961      	ldr	r1, [pc, #388]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c04:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0c:	4958      	ldr	r1, [pc, #352]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c20:	4b53      	ldr	r3, [pc, #332]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c26:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2e:	4950      	ldr	r1, [pc, #320]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c3e:	d105      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c40:	4b4b      	ldr	r3, [pc, #300]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	4a4a      	ldr	r2, [pc, #296]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c58:	4b45      	ldr	r3, [pc, #276]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c5e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	4942      	ldr	r1, [pc, #264]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c76:	d105      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c78:	4b3d      	ldr	r3, [pc, #244]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c90:	4b37      	ldr	r3, [pc, #220]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	4934      	ldr	r1, [pc, #208]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cae:	d105      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb0:	4b2f      	ldr	r3, [pc, #188]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cc8:	4b29      	ldr	r3, [pc, #164]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cd6:	4926      	ldr	r1, [pc, #152]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce8:	4b21      	ldr	r3, [pc, #132]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a20      	ldr	r2, [pc, #128]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d00:	4b1b      	ldr	r3, [pc, #108]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	4918      	ldr	r1, [pc, #96]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d20:	4b13      	ldr	r3, [pc, #76]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a12      	ldr	r2, [pc, #72]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d38:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d46:	490a      	ldr	r1, [pc, #40]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d58:	4b05      	ldr	r3, [pc, #20]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	@ (8003d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d64:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	40021000 	.word	0x40021000

08003d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e09d      	b.n	8003ec2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d108      	bne.n	8003da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d96:	d009      	beq.n	8003dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	61da      	str	r2, [r3, #28]
 8003d9e:	e005      	b.n	8003dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fc ff38 	bl	8000c3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003de2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003dec:	d902      	bls.n	8003df4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e002      	b.n	8003dfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003df8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003e02:	d007      	beq.n	8003e14 <HAL_SPI_Init+0xa0>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e56:	ea42 0103 	orr.w	r1, r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	0c1b      	lsrs	r3, r3, #16
 8003e70:	f003 0204 	and.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e90:	ea42 0103 	orr.w	r1, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b088      	sub	sp, #32
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d101      	bne.n	8003eec <HAL_SPI_Transmit+0x22>
 8003ee8:	2302      	movs	r3, #2
 8003eea:	e15f      	b.n	80041ac <HAL_SPI_Transmit+0x2e2>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef4:	f7fd f8e4 	bl	80010c0 <HAL_GetTick>
 8003ef8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d002      	beq.n	8003f10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f0e:	e148      	b.n	80041a2 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_SPI_Transmit+0x52>
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f20:	e13f      	b.n	80041a2 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2203      	movs	r2, #3
 8003f26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	88fa      	ldrh	r2, [r7, #6]
 8003f3a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	88fa      	ldrh	r2, [r7, #6]
 8003f40:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f6c:	d10f      	bne.n	8003f8e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f98:	2b40      	cmp	r3, #64	@ 0x40
 8003f9a:	d007      	beq.n	8003fac <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fb4:	d94f      	bls.n	8004056 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_SPI_Transmit+0xfa>
 8003fbe:	8afb      	ldrh	r3, [r7, #22]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d142      	bne.n	800404a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fe8:	e02f      	b.n	800404a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d112      	bne.n	800401e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	881a      	ldrh	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800401c:	e015      	b.n	800404a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800401e:	f7fd f84f 	bl	80010c0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d803      	bhi.n	8004036 <HAL_SPI_Transmit+0x16c>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d102      	bne.n	800403c <HAL_SPI_Transmit+0x172>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d106      	bne.n	800404a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8004048:	e0ab      	b.n	80041a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ca      	bne.n	8003fea <HAL_SPI_Transmit+0x120>
 8004054:	e080      	b.n	8004158 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_SPI_Transmit+0x19a>
 800405e:	8afb      	ldrh	r3, [r7, #22]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d174      	bne.n	800414e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004068:	b29b      	uxth	r3, r3
 800406a:	2b01      	cmp	r3, #1
 800406c:	d912      	bls.n	8004094 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004072:	881a      	ldrh	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800407e:	1c9a      	adds	r2, r3, #2
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004088:	b29b      	uxth	r3, r3
 800408a:	3b02      	subs	r3, #2
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004092:	e05c      	b.n	800414e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	330c      	adds	r3, #12
 800409e:	7812      	ldrb	r2, [r2, #0]
 80040a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80040ba:	e048      	b.n	800414e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d12b      	bne.n	8004122 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d912      	bls.n	80040fa <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	881a      	ldrh	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b02      	subs	r3, #2
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80040f8:	e029      	b.n	800414e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	7812      	ldrb	r2, [r2, #0]
 8004106:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004116:	b29b      	uxth	r3, r3
 8004118:	3b01      	subs	r3, #1
 800411a:	b29a      	uxth	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004120:	e015      	b.n	800414e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004122:	f7fc ffcd 	bl	80010c0 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d803      	bhi.n	800413a <HAL_SPI_Transmit+0x270>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d102      	bne.n	8004140 <HAL_SPI_Transmit+0x276>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800414c:	e029      	b.n	80041a2 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1b1      	bne.n	80040bc <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	6839      	ldr	r1, [r7, #0]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f947 	bl	80043f0 <SPI_EndRxTxTransaction>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	77fb      	strb	r3, [r7, #31]
 8004198:	e003      	b.n	80041a2 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80041aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3720      	adds	r7, #32
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b088      	sub	sp, #32
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041c4:	f7fc ff7c 	bl	80010c0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4413      	add	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041d4:	f7fc ff74 	bl	80010c0 <HAL_GetTick>
 80041d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041da:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	015b      	lsls	r3, r3, #5
 80041e0:	0d1b      	lsrs	r3, r3, #20
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	fb02 f303 	mul.w	r3, r2, r3
 80041e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041ea:	e054      	b.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f2:	d050      	beq.n	8004296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041f4:	f7fc ff64 	bl	80010c0 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	429a      	cmp	r2, r3
 8004202:	d902      	bls.n	800420a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d13d      	bne.n	8004286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004222:	d111      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800422c:	d004      	beq.n	8004238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004236:	d107      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800424c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004250:	d10f      	bne.n	8004272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e017      	b.n	80042b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d101      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	3b01      	subs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4013      	ands	r3, r2
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	461a      	mov	r2, r3
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d19b      	bne.n	80041ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000000 	.word	0x20000000

080042c4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08a      	sub	sp, #40	@ 0x28
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
 80042d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80042d6:	f7fc fef3 	bl	80010c0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80042e6:	f7fc feeb 	bl	80010c0 <HAL_GetTick>
 80042ea:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80042f4:	4b3d      	ldr	r3, [pc, #244]	@ (80043ec <SPI_WaitFifoStateUntilTimeout+0x128>)
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	00da      	lsls	r2, r3, #3
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	0d1b      	lsrs	r3, r3, #20
 8004304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800430c:	e060      	b.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004314:	d107      	bne.n	8004326 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d104      	bne.n	8004326 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004324:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432c:	d050      	beq.n	80043d0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800432e:	f7fc fec7 	bl	80010c0 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800433a:	429a      	cmp	r2, r3
 800433c:	d902      	bls.n	8004344 <SPI_WaitFifoStateUntilTimeout+0x80>
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d13d      	bne.n	80043c0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004352:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435c:	d111      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004366:	d004      	beq.n	8004372 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004370:	d107      	bne.n	8004382 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004380:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438a:	d10f      	bne.n	80043ac <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e010      	b.n	80043e2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d196      	bne.n	800430e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3728      	adds	r7, #40	@ 0x28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000000 	.word	0x20000000

080043f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff ff5b 	bl	80042c4 <SPI_WaitFifoStateUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d007      	beq.n	8004424 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004418:	f043 0220 	orr.w	r2, r3, #32
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e027      	b.n	8004474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	2200      	movs	r2, #0
 800442c:	2180      	movs	r1, #128	@ 0x80
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f7ff fec0 	bl	80041b4 <SPI_WaitFlagStateUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d007      	beq.n	800444a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800443e:	f043 0220 	orr.w	r2, r3, #32
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e014      	b.n	8004474 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff ff34 	bl	80042c4 <SPI_WaitFifoStateUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004466:	f043 0220 	orr.w	r2, r3, #32
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e000      	b.n	8004474 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800447c:	b480      	push	{r7}
 800447e:	b08b      	sub	sp, #44	@ 0x2c
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	fa93 f3a3 	rbit	r3, r3
 8004496:	613b      	str	r3, [r7, #16]
  return result;
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80044a2:	2320      	movs	r3, #32
 80044a4:	e003      	b.n	80044ae <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	fab3 f383 	clz	r3, r3
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	2103      	movs	r1, #3
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	43db      	mvns	r3, r3
 80044b8:	401a      	ands	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	fa93 f3a3 	rbit	r3, r3
 80044c4:	61fb      	str	r3, [r7, #28]
  return result;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80044d0:	2320      	movs	r3, #32
 80044d2:	e003      	b.n	80044dc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	431a      	orrs	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]
}
 80044ea:	bf00      	nop
 80044ec:	372c      	adds	r7, #44	@ 0x2c
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	43db      	mvns	r3, r3
 800450a:	401a      	ands	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	431a      	orrs	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	605a      	str	r2, [r3, #4]
}
 800451a:	bf00      	nop
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004526:	b480      	push	{r7}
 8004528:	b08b      	sub	sp, #44	@ 0x2c
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689a      	ldr	r2, [r3, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	613b      	str	r3, [r7, #16]
  return result;
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800454c:	2320      	movs	r3, #32
 800454e:	e003      	b.n	8004558 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	fab3 f383 	clz	r3, r3
 8004556:	b2db      	uxtb	r3, r3
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	2103      	movs	r1, #3
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	fa93 f3a3 	rbit	r3, r3
 800456e:	61fb      	str	r3, [r7, #28]
  return result;
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800457a:	2320      	movs	r3, #32
 800457c:	e003      	b.n	8004586 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	fab3 f383 	clz	r3, r3
 8004584:	b2db      	uxtb	r3, r3
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	fa01 f303 	lsl.w	r3, r1, r3
 800458e:	431a      	orrs	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004594:	bf00      	nop
 8004596:	372c      	adds	r7, #44	@ 0x2c
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b08b      	sub	sp, #44	@ 0x2c
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	fa93 f3a3 	rbit	r3, r3
 80045ba:	613b      	str	r3, [r7, #16]
  return result;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80045c6:	2320      	movs	r3, #32
 80045c8:	e003      	b.n	80045d2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	fab3 f383 	clz	r3, r3
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2103      	movs	r1, #3
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	43db      	mvns	r3, r3
 80045dc:	401a      	ands	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	fa93 f3a3 	rbit	r3, r3
 80045e8:	61fb      	str	r3, [r7, #28]
  return result;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80045f4:	2320      	movs	r3, #32
 80045f6:	e003      	b.n	8004600 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80045f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fa:	fab3 f383 	clz	r3, r3
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	431a      	orrs	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	60da      	str	r2, [r3, #12]
}
 800460e:	bf00      	nop
 8004610:	372c      	adds	r7, #44	@ 0x2c
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800461a:	b480      	push	{r7}
 800461c:	b08b      	sub	sp, #44	@ 0x2c
 800461e:	af00      	add	r7, sp, #0
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	613b      	str	r3, [r7, #16]
  return result;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8004640:	2320      	movs	r3, #32
 8004642:	e003      	b.n	800464c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	fab3 f383 	clz	r3, r3
 800464a:	b2db      	uxtb	r3, r3
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	210f      	movs	r1, #15
 8004650:	fa01 f303 	lsl.w	r3, r1, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	401a      	ands	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800465c:	6a3b      	ldr	r3, [r7, #32]
 800465e:	fa93 f3a3 	rbit	r3, r3
 8004662:	61fb      	str	r3, [r7, #28]
  return result;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800466e:	2320      	movs	r3, #32
 8004670:	e003      	b.n	800467a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8004672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	fa01 f303 	lsl.w	r3, r1, r3
 8004682:	431a      	orrs	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004688:	bf00      	nop
 800468a:	372c      	adds	r7, #44	@ 0x2c
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004694:	b480      	push	{r7}
 8004696:	b08b      	sub	sp, #44	@ 0x2c
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	0a1b      	lsrs	r3, r3, #8
 80046a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	613b      	str	r3, [r7, #16]
  return result;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80046bc:	2320      	movs	r3, #32
 80046be:	e003      	b.n	80046c8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	fab3 f383 	clz	r3, r3
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	210f      	movs	r1, #15
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	401a      	ands	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	6a3b      	ldr	r3, [r7, #32]
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	61fb      	str	r3, [r7, #28]
  return result;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80046ec:	2320      	movs	r3, #32
 80046ee:	e003      	b.n	80046f8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004700:	431a      	orrs	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8004706:	bf00      	nop
 8004708:	372c      	adds	r7, #44	@ 0x2c
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b088      	sub	sp, #32
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	fa93 f3a3 	rbit	r3, r3
 8004728:	60fb      	str	r3, [r7, #12]
  return result;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <LL_GPIO_Init+0x26>
    return 32U;
 8004734:	2320      	movs	r3, #32
 8004736:	e003      	b.n	8004740 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004742:	e048      	b.n	80047d6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	2101      	movs	r1, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	4013      	ands	r3, r2
 8004752:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d03a      	beq.n	80047d0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d003      	beq.n	800476a <LL_GPIO_Init+0x58>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d10e      	bne.n	8004788 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	461a      	mov	r2, r3
 8004770:	69b9      	ldr	r1, [r7, #24]
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fed7 	bl	8004526 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	6819      	ldr	r1, [r3, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	461a      	mov	r2, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff feb7 	bl	80044f6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	461a      	mov	r2, r3
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff05 	bl	80045a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d111      	bne.n	80047c2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	2bff      	cmp	r3, #255	@ 0xff
 80047a2:	d807      	bhi.n	80047b4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	461a      	mov	r2, r3
 80047aa:	69b9      	ldr	r1, [r7, #24]
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff ff34 	bl	800461a <LL_GPIO_SetAFPin_0_7>
 80047b2:	e006      	b.n	80047c2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	461a      	mov	r2, r3
 80047ba:	69b9      	ldr	r1, [r7, #24]
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff ff69 	bl	8004694 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	461a      	mov	r2, r3
 80047c8:	69b9      	ldr	r1, [r7, #24]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff fe56 	bl	800447c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	3301      	adds	r3, #1
 80047d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1af      	bne.n	8004744 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80047f6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80047fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004802:	b29a      	uxth	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	b29b      	uxth	r3, r3
 8004808:	43db      	mvns	r3, r3
 800480a:	b29b      	uxth	r3, r3
 800480c:	4013      	ands	r3, r2
 800480e:	b29a      	uxth	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3714      	adds	r7, #20
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	1d3b      	adds	r3, r7, #4
 800482e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2201      	movs	r2, #1
 8004836:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <__libc_init_array>:
 8004870:	b570      	push	{r4, r5, r6, lr}
 8004872:	4d0d      	ldr	r5, [pc, #52]	@ (80048a8 <__libc_init_array+0x38>)
 8004874:	4c0d      	ldr	r4, [pc, #52]	@ (80048ac <__libc_init_array+0x3c>)
 8004876:	1b64      	subs	r4, r4, r5
 8004878:	10a4      	asrs	r4, r4, #2
 800487a:	2600      	movs	r6, #0
 800487c:	42a6      	cmp	r6, r4
 800487e:	d109      	bne.n	8004894 <__libc_init_array+0x24>
 8004880:	4d0b      	ldr	r5, [pc, #44]	@ (80048b0 <__libc_init_array+0x40>)
 8004882:	4c0c      	ldr	r4, [pc, #48]	@ (80048b4 <__libc_init_array+0x44>)
 8004884:	f000 f818 	bl	80048b8 <_init>
 8004888:	1b64      	subs	r4, r4, r5
 800488a:	10a4      	asrs	r4, r4, #2
 800488c:	2600      	movs	r6, #0
 800488e:	42a6      	cmp	r6, r4
 8004890:	d105      	bne.n	800489e <__libc_init_array+0x2e>
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	f855 3b04 	ldr.w	r3, [r5], #4
 8004898:	4798      	blx	r3
 800489a:	3601      	adds	r6, #1
 800489c:	e7ee      	b.n	800487c <__libc_init_array+0xc>
 800489e:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a2:	4798      	blx	r3
 80048a4:	3601      	adds	r6, #1
 80048a6:	e7f2      	b.n	800488e <__libc_init_array+0x1e>
 80048a8:	080048e0 	.word	0x080048e0
 80048ac:	080048e0 	.word	0x080048e0
 80048b0:	080048e0 	.word	0x080048e0
 80048b4:	080048e4 	.word	0x080048e4

080048b8 <_init>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	bf00      	nop
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr

080048c4 <_fini>:
 80048c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c6:	bf00      	nop
 80048c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ca:	bc08      	pop	{r3}
 80048cc:	469e      	mov	lr, r3
 80048ce:	4770      	bx	lr
