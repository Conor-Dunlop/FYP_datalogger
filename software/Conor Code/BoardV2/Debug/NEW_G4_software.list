
NEW_G4_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc00  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800dde0  0800dde0  0000ede0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea8  0800dea8  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea8  0800dea8  0000eea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deb0  0800deb0  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deb0  0800deb0  0000eeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800deb4  0800deb4  0000eeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800deb8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a0  200001d4  0800e08c  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  0800e08c  0000f774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025582  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005902  00000000  00000000  00034786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db0  00000000  00000000  0003a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a0  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283ac  00000000  00000000  0003d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a874  00000000  00000000  00065884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec48e  00000000  00000000  000900f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d4  00000000  00000000  0017c5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001847a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ddc8 	.word	0x0800ddc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800ddc8 	.word	0x0800ddc8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2220      	movs	r2, #32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00c fb87 	bl	800d4c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dba:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dbc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de2:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e24:	4817      	ldr	r0, [pc, #92]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e26:	f001 fa9f 	bl	8002368 <HAL_ADC_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e30:	f000 fd45 	bl	80018be <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e40:	f002 f82c 	bl	8002e9c <HAL_ADCEx_MultiModeConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e4a:	f000 fd38 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_ADC1_Init+0xec>)
 8000e50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e52:	2306      	movs	r3, #6
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	237f      	movs	r3, #127	@ 0x7f
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e6c:	f001 fc00 	bl	8002670 <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e76:	f000 fd22 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	@ 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001f0 	.word	0x200001f0
 8000e88:	04300002 	.word	0x04300002

08000e8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2220      	movs	r2, #32
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00c fb15 	bl	800d4c8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f50 <MX_ADC2_Init+0xc4>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ea6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f06:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f08:	f001 fa2e 	bl	8002368 <HAL_ADC_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f12:	f000 fcd4 	bl	80018be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_ADC2_Init+0xc8>)
 8000f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f22:	237f      	movs	r3, #127	@ 0x7f
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f26:	2304      	movs	r3, #4
 8000f28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f34:	f001 fb9c 	bl	8002670 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f3e:	f000 fcbe 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000025c 	.word	0x2000025c
 8000f50:	50000100 	.word	0x50000100
 8000f54:	2e300800 	.word	0x2e300800

08000f58 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09e      	sub	sp, #120	@ 0x78
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	2244      	movs	r2, #68	@ 0x44
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00c faa5 	bl	800d4c8 <memset>
  if(adcHandle->Instance==ADC1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f86:	d16f      	bne.n	8001068 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fe9b 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fa4:	f000 fc8b 	bl	80018be <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fa8:	4b52      	ldr	r3, [pc, #328]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a51      	ldr	r2, [pc, #324]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000fb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fb2:	4b50      	ldr	r3, [pc, #320]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fba:	4b4f      	ldr	r3, [pc, #316]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b49      	ldr	r3, [pc, #292]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a48      	ldr	r2, [pc, #288]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b46      	ldr	r3, [pc, #280]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a42      	ldr	r2, [pc, #264]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b3d      	ldr	r3, [pc, #244]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	4a3c      	ldr	r2, [pc, #240]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_7_Pin|ADC_8_Pin|ADC_9_Pin|ADC_10_Pin;
 800101a:	230f      	movs	r3, #15
 800101c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800102a:	4619      	mov	r1, r3
 800102c:	4833      	ldr	r0, [pc, #204]	@ (80010fc <HAL_ADC_MspInit+0x1a4>)
 800102e:	f002 fac3 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|OPAMP_SIG_2_Pin|OPAMP_SIG_4_Pin;
 8001032:	230b      	movs	r3, #11
 8001034:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f002 fab6 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPAMP_SIG_1_Pin|ADC_3_Pin|DIGITAL_IO_2_Pin;
 800104c:	f245 0301 	movw	r3, #20481	@ 0x5001
 8001050:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800105e:	4619      	mov	r1, r3
 8001060:	4827      	ldr	r0, [pc, #156]	@ (8001100 <HAL_ADC_MspInit+0x1a8>)
 8001062:	f002 faa9 	bl	80035b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001066:	e041      	b.n	80010ec <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_ADC_MspInit+0x1ac>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d13c      	bne.n	80010ec <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001076:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001078:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800107c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fe26 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 800108e:	f000 fc16 	bl	80018be <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 800109a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10b      	bne.n	80010bc <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPAMP_SIG_3_Pin;
 80010d4:	2320      	movs	r3, #32
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d8:	2303      	movs	r3, #3
 80010da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OPAMP_SIG_3_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <HAL_ADC_MspInit+0x1a4>)
 80010e8:	f002 fa66 	bl	80035b8 <HAL_GPIO_Init>
}
 80010ec:	bf00      	nop
 80010ee:	3778      	adds	r7, #120	@ 0x78
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200002c8 	.word	0x200002c8
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000400 	.word	0x48000400
 8001104:	50000100 	.word	0x50000100

08001108 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	@ 0x30
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2230      	movs	r2, #48	@ 0x30
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00c f9d7 	bl	800d4c8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_DAC1_Init+0x80>)
 800111c:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <MX_DAC1_Init+0x84>)
 800111e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001120:	4819      	ldr	r0, [pc, #100]	@ (8001188 <MX_DAC1_Init+0x80>)
 8001122:	f002 f86e 	bl	8003202 <HAL_DAC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800112c:	f000 fbc7 	bl	80018be <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001130:	2302      	movs	r3, #2
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800114c:	2301      	movs	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <MX_DAC1_Init+0x80>)
 800115c:	f002 f874 	bl	8003248 <HAL_DAC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001166:	f000 fbaa 	bl	80018be <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2210      	movs	r2, #16
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_DAC1_Init+0x80>)
 8001172:	f002 f869 	bl	8003248 <HAL_DAC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800117c:	f000 fb9f 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	@ 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200002cc 	.word	0x200002cc
 800118c:	50000800 	.word	0x50000800

08001190 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <HAL_DAC_MspInit+0x74>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d124      	bne.n	80011fc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 80011e2:	2330      	movs	r3, #48	@ 0x30
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f002 f9de 	bl	80035b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	50000800 	.word	0x50000800
 8001208:	40021000 	.word	0x40021000

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a5c      	ldr	r2, [pc, #368]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b5a      	ldr	r3, [pc, #360]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <MX_GPIO_Init+0x18c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b54      	ldr	r3, [pc, #336]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b51      	ldr	r3, [pc, #324]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a50      	ldr	r2, [pc, #320]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <MX_GPIO_Init+0x18c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a44      	ldr	r2, [pc, #272]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 800129a:	2200      	movs	r2, #0
 800129c:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 80012a0:	483e      	ldr	r0, [pc, #248]	@ (800139c <MX_GPIO_Init+0x190>)
 80012a2:	f002 fb0b 	bl	80038bc <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80012ac:	483c      	ldr	r0, [pc, #240]	@ (80013a0 <MX_GPIO_Init+0x194>)
 80012ae:	f002 fb05 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_EN_GPIO_Port, SD_CARD_EN_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012bc:	f002 fafe 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4837      	ldr	r0, [pc, #220]	@ (80013a4 <MX_GPIO_Init+0x198>)
 80012c6:	f002 faf9 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_IO_1_Pin|COMMS_IO_2_Pin|COMMS_IO_3_Pin;
 80012ca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4830      	ldr	r0, [pc, #192]	@ (80013a0 <MX_GPIO_Init+0x194>)
 80012e0:	f002 f96a 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 80012e4:	2304      	movs	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fa:	f002 f95d 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 80012fe:	f24a 43a2 	movw	r3, #42146	@ 0xa4a2
 8001302:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4821      	ldr	r0, [pc, #132]	@ (800139c <MX_GPIO_Init+0x190>)
 8001318:	f002 f94e 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_1_Pin|DIGITAL_IO_6_Pin|SD_CARD_DETECT_Pin;
 800131c:	f640 2304 	movw	r3, #2564	@ 0xa04
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	481a      	ldr	r0, [pc, #104]	@ (800139c <MX_GPIO_Init+0x190>)
 8001332:	f002 f941 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin;
 8001336:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_GPIO_Init+0x194>)
 8001350:	f002 f932 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_EN_Pin;
 8001354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CARD_EN_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f002 f922 	bl	80035b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 8001374:	2304      	movs	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <MX_GPIO_Init+0x198>)
 800138c:	f002 f914 	bl	80035b8 <HAL_GPIO_Init>

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00

080013a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <MX_I2C2_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_I2C2_Init+0x74>)
 80013b4:	f240 1203 	movw	r2, #259	@ 0x103
 80013b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_I2C2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_I2C2_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <MX_I2C2_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_I2C2_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_I2C2_Init+0x74>)
 80013e6:	f002 fa9b 	bl	8003920 <HAL_I2C_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013f0:	f000 fa65 	bl	80018be <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <MX_I2C2_Init+0x74>)
 80013f8:	f003 f8ce 	bl	8004598 <HAL_I2CEx_ConfigAnalogFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001402:	f000 fa5c 	bl	80018be <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4804      	ldr	r0, [pc, #16]	@ (800141c <MX_I2C2_Init+0x74>)
 800140a:	f003 f910 	bl	800462e <HAL_I2CEx_ConfigDigitalFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fa53 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002e0 	.word	0x200002e0
 8001420:	40005800 	.word	0x40005800

08001424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09c      	sub	sp, #112	@ 0x70
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2244      	movs	r2, #68	@ 0x44
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00c f83f 	bl	800d4c8 <memset>
  if(i2cHandle->Instance==I2C2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <HAL_I2C_MspInit+0xe0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d153      	bne.n	80014fc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fc37 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f000 fa27 	bl	80018be <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a24      	ldr	r2, [pc, #144]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014a0:	2310      	movs	r3, #16
 80014a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b0:	2304      	movs	r3, #4
 80014b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	@ (800150c <HAL_I2C_MspInit+0xe8>)
 80014bc:	f002 f87c 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d2:	2304      	movs	r3, #4
 80014d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e0:	f002 f86a 	bl	80035b8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014fc:	bf00      	nop
 80014fe:	3770      	adds	r7, #112	@ 0x70
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005800 	.word	0x40005800
 8001508:	40021000 	.word	0x40021000
 800150c:	48000800 	.word	0x48000800

08001510 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2] = {0};
 800151a:	2300      	movs	r3, #0
 800151c:	823b      	strh	r3, [r7, #16]
	int32_t tempC = -100;
 800151e:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001522:	617b      	str	r3, [r7, #20]
	uint8_t store = tempRegAddr;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_IsDeviceReady (&hi2c2, MCP9804_ADDR, 2, HAL_MAX_DELAY) == HAL_OK) { // Ready is unsuccessfull
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	2202      	movs	r2, #2
 800152e:	2118      	movs	r1, #24
 8001530:	4833      	ldr	r0, [pc, #204]	@ (8001600 <readMCP9804Temp+0xf0>)
 8001532:	f002 fc9f 	bl	8003e74 <HAL_I2C_IsDeviceReady>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d15b      	bne.n	80015f4 <readMCP9804Temp+0xe4>
			// Reception error
		if (HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &store, 1, HAL_MAX_DELAY) != HAL_OK) {
 800153c:	f107 020f 	add.w	r2, r7, #15
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2301      	movs	r3, #1
 8001548:	2118      	movs	r1, #24
 800154a:	482d      	ldr	r0, [pc, #180]	@ (8001600 <readMCP9804Temp+0xf0>)
 800154c:	f002 fa84 	bl	8003a58 <HAL_I2C_Master_Transmit>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00f      	beq.n	8001576 <readMCP9804Temp+0x66>
			HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 8001556:	2200      	movs	r2, #0
 8001558:	2104      	movs	r1, #4
 800155a:	482a      	ldr	r0, [pc, #168]	@ (8001604 <readMCP9804Temp+0xf4>)
 800155c:	f002 f9ae 	bl	80038bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001560:	2201      	movs	r2, #1
 8001562:	2120      	movs	r1, #32
 8001564:	4828      	ldr	r0, [pc, #160]	@ (8001608 <readMCP9804Temp+0xf8>)
 8001566:	f002 f9a9 	bl	80038bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 800156a:	2201      	movs	r2, #1
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	4826      	ldr	r0, [pc, #152]	@ (8001608 <readMCP9804Temp+0xf8>)
 8001570:	f002 f9a4 	bl	80038bc <HAL_GPIO_WritePin>
 8001574:	e03e      	b.n	80015f4 <readMCP9804Temp+0xe4>
		} else {
			HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY);
 8001576:	f107 0210 	add.w	r2, r7, #16
 800157a:	f04f 33ff 	mov.w	r3, #4294967295
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2302      	movs	r3, #2
 8001582:	2118      	movs	r1, #24
 8001584:	481e      	ldr	r0, [pc, #120]	@ (8001600 <readMCP9804Temp+0xf0>)
 8001586:	f002 fb7f 	bl	8003c88 <HAL_I2C_Master_Receive>
			uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 800158a:	7c3b      	ldrb	r3, [r7, #16]
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	b21a      	sxth	r2, r3
 8001590:	7c7b      	ldrb	r3, [r7, #17]
 8001592:	b21b      	sxth	r3, r3
 8001594:	4313      	orrs	r3, r2
 8001596:	b21b      	sxth	r3, r3
 8001598:	827b      	strh	r3, [r7, #18]
			rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 800159a:	8a7b      	ldrh	r3, [r7, #18]
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	827b      	strh	r3, [r7, #18]

			tempC = rawTemp & 0x0FFF;
 80015a2:	8a7b      	ldrh	r3, [r7, #18]
 80015a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a8:	617b      	str	r3, [r7, #20]
			tempC /= 16.0;
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7fe ffda 	bl	8000564 <__aeabi_i2d>
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <readMCP9804Temp+0xfc>)
 80015b6:	f7ff f969 	bl	800088c <__aeabi_ddiv>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fa4b 	bl	8000a5c <__aeabi_d2iz>
 80015c6:	4603      	mov	r3, r0
 80015c8:	617b      	str	r3, [r7, #20]

			if (rawTemp & 0x1000) {  // Check sign bit
 80015ca:	8a7b      	ldrh	r3, [r7, #18]
 80015cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00f      	beq.n	80015f4 <readMCP9804Temp+0xe4>
			  tempC -= 256.0;
 80015d4:	6978      	ldr	r0, [r7, #20]
 80015d6:	f7fe ffc5 	bl	8000564 <__aeabi_i2d>
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <readMCP9804Temp+0x100>)
 80015e0:	f7fe fe72 	bl	80002c8 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa36 	bl	8000a5c <__aeabi_d2iz>
 80015f0:	4603      	mov	r3, r0
 80015f2:	617b      	str	r3, [r7, #20]
			}
		}
	}
    return tempC;
 80015f4:	697b      	ldr	r3, [r7, #20]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002e0 	.word	0x200002e0
 8001604:	48000c00 	.word	0x48000c00
 8001608:	48000400 	.word	0x48000400
 800160c:	40300000 	.word	0x40300000
 8001610:	40700000 	.word	0x40700000

08001614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b0c6      	sub	sp, #280	@ 0x118
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800161a:	f000 fc3c 	bl	8001e96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161e:	f000 f8ff 	bl	8001820 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001622:	f7ff fdf3 	bl	800120c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001626:	f7ff fbb9 	bl	8000d9c <MX_ADC1_Init>
  MX_ADC2_Init();
 800162a:	f7ff fc2f 	bl	8000e8c <MX_ADC2_Init>
  MX_DAC1_Init();
 800162e:	f7ff fd6b 	bl	8001108 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001632:	f000 f9bf 	bl	80019b4 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8001636:	f000 fb31 	bl	8001c9c <MX_UCPD1_Init>
  MX_I2C2_Init();
 800163a:	f7ff feb5 	bl	80013a8 <MX_I2C2_Init>
  MX_RTC_Init();
 800163e:	f000 f945 	bl	80018cc <MX_RTC_Init>
  MX_USB_Device_Init();
 8001642:	f00b fa03 	bl	800ca4c <MX_USB_Device_Init>
  MX_UART4_Init();
 8001646:	f000 fb57 	bl	8001cf8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t status = HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    int num_bytes = 4;
 8001650:	2304      	movs	r3, #4
 8001652:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    uint8_t dataToSend[4];
    dataToSend[0] = 0xFF;// Example data
 8001656:	23ff      	movs	r3, #255	@ 0xff
 8001658:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
    dataToSend[1] = 0x5;// Example data
 800165c:	2305      	movs	r3, #5
 800165e:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    dataToSend[2] = 0xF0;// Example data
 8001662:	23f0      	movs	r3, #240	@ 0xf0
 8001664:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    dataToSend[3] = 0xF;// Example data
 8001668:	230f      	movs	r3, #15
 800166a:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

    //HAL_StatusTypeDef sts = HAL_OK;

    HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 800166e:	2201      	movs	r2, #1
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	4865      	ldr	r0, [pc, #404]	@ (8001808 <main+0x1f4>)
 8001674:	f002 f922 	bl	80038bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001678:	2201      	movs	r2, #1
 800167a:	2120      	movs	r1, #32
 800167c:	4862      	ldr	r0, [pc, #392]	@ (8001808 <main+0x1f4>)
 800167e:	f002 f91d 	bl	80038bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001682:	2201      	movs	r2, #1
 8001684:	2104      	movs	r1, #4
 8001686:	4861      	ldr	r0, [pc, #388]	@ (800180c <main+0x1f8>)
 8001688:	f002 f918 	bl	80038bc <HAL_GPIO_WritePin>


    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800168c:	4860      	ldr	r0, [pc, #384]	@ (8001810 <main+0x1fc>)
 800168e:	f002 f947 	bl	8003920 <HAL_I2C_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d004      	beq.n	80016a2 <main+0x8e>
            // Initialization error
  	  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 8001698:	2200      	movs	r2, #0
 800169a:	2104      	movs	r1, #4
 800169c:	485b      	ldr	r0, [pc, #364]	@ (800180c <main+0x1f8>)
 800169e:	f002 f90d 	bl	80038bc <HAL_GPIO_WritePin>
        }
    uint8_t tempRegAddr = 0x05;
 80016a2:	2305      	movs	r3, #5
 80016a4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	HAL_Delay(1000);
 80016a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016ac:	f000 fc64 	bl	8001f78 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // CS low Digital IO 1 COMM_EN_3
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b6:	4857      	ldr	r0, [pc, #348]	@ (8001814 <main+0x200>)
 80016b8:	f002 f900 	bl	80038bc <HAL_GPIO_WritePin>
    	status = HAL_SPI_Transmit(&hspi1, (uint8_t *)&dataToSend, num_bytes, HAL_MAX_DELAY);
 80016bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	4853      	ldr	r0, [pc, #332]	@ (8001818 <main+0x204>)
 80016cc:	f005 ff2e 	bl	800752c <HAL_SPI_Transmit>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // CS high Digital IO 1 COMM_EN_3
 80016d6:	2200      	movs	r2, #0
 80016d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016dc:	484d      	ldr	r0, [pc, #308]	@ (8001814 <main+0x200>)
 80016de:	f002 f8ed 	bl	80038bc <HAL_GPIO_WritePin>

    	if (status == HAL_OK)
 80016e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10f      	bne.n	800170a <main+0xf6>
    	{
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 80016ea:	2200      	movs	r2, #0
 80016ec:	2180      	movs	r1, #128	@ 0x80
 80016ee:	4846      	ldr	r0, [pc, #280]	@ (8001808 <main+0x1f4>)
 80016f0:	f002 f8e4 	bl	80038bc <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 80016f4:	2201      	movs	r2, #1
 80016f6:	2120      	movs	r1, #32
 80016f8:	4843      	ldr	r0, [pc, #268]	@ (8001808 <main+0x1f4>)
 80016fa:	f002 f8df 	bl	80038bc <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 80016fe:	2201      	movs	r2, #1
 8001700:	2104      	movs	r1, #4
 8001702:	4842      	ldr	r0, [pc, #264]	@ (800180c <main+0x1f8>)
 8001704:	f002 f8da 	bl	80038bc <HAL_GPIO_WritePin>
 8001708:	e022      	b.n	8001750 <main+0x13c>
    	} else if (status == HAL_BUSY){
 800170a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800170e:	2b02      	cmp	r3, #2
 8001710:	d10f      	bne.n	8001732 <main+0x11e>
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001712:	2201      	movs	r2, #1
 8001714:	2104      	movs	r1, #4
 8001716:	483d      	ldr	r0, [pc, #244]	@ (800180c <main+0x1f8>)
 8001718:	f002 f8d0 	bl	80038bc <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 800171c:	2200      	movs	r2, #0
 800171e:	2120      	movs	r1, #32
 8001720:	4839      	ldr	r0, [pc, #228]	@ (8001808 <main+0x1f4>)
 8001722:	f002 f8cb 	bl	80038bc <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001726:	2201      	movs	r2, #1
 8001728:	2180      	movs	r1, #128	@ 0x80
 800172a:	4837      	ldr	r0, [pc, #220]	@ (8001808 <main+0x1f4>)
 800172c:	f002 f8c6 	bl	80038bc <HAL_GPIO_WritePin>
 8001730:	e00e      	b.n	8001750 <main+0x13c>
    	}
    	else
    	{
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 8001732:	2200      	movs	r2, #0
 8001734:	2104      	movs	r1, #4
 8001736:	4835      	ldr	r0, [pc, #212]	@ (800180c <main+0x1f8>)
 8001738:	f002 f8c0 	bl	80038bc <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800173c:	2201      	movs	r2, #1
 800173e:	2120      	movs	r1, #32
 8001740:	4831      	ldr	r0, [pc, #196]	@ (8001808 <main+0x1f4>)
 8001742:	f002 f8bb 	bl	80038bc <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001746:	2201      	movs	r2, #1
 8001748:	2180      	movs	r1, #128	@ 0x80
 800174a:	482f      	ldr	r0, [pc, #188]	@ (8001808 <main+0x1f4>)
 800174c:	f002 f8b6 	bl	80038bc <HAL_GPIO_WritePin>
    	}


    	HAL_Delay(1000);
 8001750:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001754:	f000 fc10 	bl	8001f78 <HAL_Delay>
    	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001758:	2201      	movs	r2, #1
 800175a:	2104      	movs	r1, #4
 800175c:	482b      	ldr	r0, [pc, #172]	@ (800180c <main+0x1f8>)
 800175e:	f002 f8ad 	bl	80038bc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001762:	2201      	movs	r2, #1
 8001764:	2120      	movs	r1, #32
 8001766:	4828      	ldr	r0, [pc, #160]	@ (8001808 <main+0x1f4>)
 8001768:	f002 f8a8 	bl	80038bc <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 800176c:	2201      	movs	r2, #1
 800176e:	2180      	movs	r1, #128	@ 0x80
 8001770:	4825      	ldr	r0, [pc, #148]	@ (8001808 <main+0x1f4>)
 8001772:	f002 f8a3 	bl	80038bc <HAL_GPIO_WritePin>
    	int32_t tempC = readMCP9804Temp(MCP9804_ADDR);
 8001776:	2018      	movs	r0, #24
 8001778:	f7ff feca 	bl	8001510 <readMCP9804Temp>
 800177c:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    		//temp read error
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
    	} */
    	dataToSend[0] = (tempC >> 24) & 0xFF;
 8001780:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001784:	0e1b      	lsrs	r3, r3, #24
 8001786:	b2db      	uxtb	r3, r3
 8001788:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
    	dataToSend[1] = (tempC >> 16) & 0xFF;
 800178c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001790:	141b      	asrs	r3, r3, #16
 8001792:	b2db      	uxtb	r3, r3
 8001794:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    	dataToSend[2] = (tempC >> 8) & 0xFF;
 8001798:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800179c:	121b      	asrs	r3, r3, #8
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    	dataToSend[3] = tempC & 0xFF;
 80017a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

    	HAL_Delay(100);
 80017ae:	2064      	movs	r0, #100	@ 0x64
 80017b0:	f000 fbe2 	bl	8001f78 <HAL_Delay>
    	int amount_of_bytes = snprintf((char*) buffer, sizeof(buffer), "Temp:%ld \r\n" , tempC);
 80017b4:	4638      	mov	r0, r7
 80017b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017ba:	4a18      	ldr	r2, [pc, #96]	@ (800181c <main+0x208>)
 80017bc:	21ff      	movs	r1, #255	@ 0xff
 80017be:	f00b fe4f 	bl	800d460 <sniprintf>
 80017c2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    	  // int status = HAL_SPI_Transmit(&hspi3, spi_buf, amount_of_bytes+4, 1);
    	  // int status = HAL_SPI_Transmit(&hspi3, &count, 1, 1);
    	  // HAL_GPIO_WritePin(COMMS_EN_1_GPIO_Port, COMMS_EN_1_Pin, GPIO_PIN_SET);
    	  // USB_Print("count : %d", count++);

    	  switch (CDC_Transmit_FS((uint8_t*)buffer, amount_of_bytes)){
 80017c6:	463b      	mov	r3, r7
 80017c8:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00b f9fb 	bl	800cbc8 <CDC_Transmit_FS>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d010      	beq.n	80017fa <main+0x1e6>
 80017d8:	2b03      	cmp	r3, #3
 80017da:	dc13      	bgt.n	8001804 <main+0x1f0>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <main+0x1d2>
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d005      	beq.n	80017f0 <main+0x1dc>
    	    break;
    	  case USBD_FAIL: // if the device can support USB coms device it will blink red
    	    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
    	    break;
    	  default:
    	    break;
 80017e4:	e00e      	b.n	8001804 <main+0x1f0>
    	    HAL_GPIO_TogglePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin);
 80017e6:	2180      	movs	r1, #128	@ 0x80
 80017e8:	4807      	ldr	r0, [pc, #28]	@ (8001808 <main+0x1f4>)
 80017ea:	f002 f87f 	bl	80038ec <HAL_GPIO_TogglePin>
    	    break;
 80017ee:	e00a      	b.n	8001806 <main+0x1f2>
    	    HAL_GPIO_TogglePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin);
 80017f0:	2120      	movs	r1, #32
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <main+0x1f4>)
 80017f4:	f002 f87a 	bl	80038ec <HAL_GPIO_TogglePin>
    	    break;
 80017f8:	e005      	b.n	8001806 <main+0x1f2>
    	    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
 80017fa:	2104      	movs	r1, #4
 80017fc:	4803      	ldr	r0, [pc, #12]	@ (800180c <main+0x1f8>)
 80017fe:	f002 f875 	bl	80038ec <HAL_GPIO_TogglePin>
    	    break;
 8001802:	e000      	b.n	8001806 <main+0x1f2>
    	    break;
 8001804:	bf00      	nop
    {
 8001806:	e74f      	b.n	80016a8 <main+0x94>
 8001808:	48000400 	.word	0x48000400
 800180c:	48000c00 	.word	0x48000c00
 8001810:	200002e0 	.word	0x200002e0
 8001814:	48000800 	.word	0x48000800
 8001818:	2000035c 	.word	0x2000035c
 800181c:	0800dde0 	.word	0x0800dde0

08001820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b094      	sub	sp, #80	@ 0x50
 8001824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001826:	f107 0318 	add.w	r3, r7, #24
 800182a:	2238      	movs	r2, #56	@ 0x38
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f00b fe4a 	bl	800d4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001842:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001846:	f004 fc73 	bl	8006130 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800184a:	230a      	movs	r3, #10
 800184c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001854:	2340      	movs	r3, #64	@ 0x40
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185c:	2302      	movs	r3, #2
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001860:	2302      	movs	r3, #2
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001864:	2301      	movs	r3, #1
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001868:	230c      	movs	r3, #12
 800186a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800186c:	2302      	movs	r3, #2
 800186e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001870:	2304      	movs	r3, #4
 8001872:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001874:	2302      	movs	r3, #2
 8001876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	4618      	mov	r0, r3
 800187e:	f004 fcfb 	bl	8006278 <HAL_RCC_OscConfig>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001888:	f000 f819 	bl	80018be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188c:	230f      	movs	r3, #15
 800188e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001890:	2301      	movs	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001898:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800189c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f004 fff8 	bl	800689c <HAL_RCC_ClockConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018b2:	f000 f804 	bl	80018be <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3750      	adds	r7, #80	@ 0x50
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018c2:	b672      	cpsid	i
}
 80018c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c6:	bf00      	nop
 80018c8:	e7fd      	b.n	80018c6 <Error_Handler+0x8>
	...

080018cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018d0:	4b18      	ldr	r3, [pc, #96]	@ (8001934 <MX_RTC_Init+0x68>)
 80018d2:	4a19      	ldr	r2, [pc, #100]	@ (8001938 <MX_RTC_Init+0x6c>)
 80018d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018d6:	4b17      	ldr	r3, [pc, #92]	@ (8001934 <MX_RTC_Init+0x68>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018dc:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <MX_RTC_Init+0x68>)
 80018de:	227f      	movs	r2, #127	@ 0x7f
 80018e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018e2:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <MX_RTC_Init+0x68>)
 80018e4:	22ff      	movs	r2, #255	@ 0xff
 80018e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <MX_RTC_Init+0x68>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <MX_RTC_Init+0x68>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001934 <MX_RTC_Init+0x68>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <MX_RTC_Init+0x68>)
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001900:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <MX_RTC_Init+0x68>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001908:	480a      	ldr	r0, [pc, #40]	@ (8001934 <MX_RTC_Init+0x68>)
 800190a:	f005 fbd3 	bl	80070b4 <HAL_RTC_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001914:	f7ff ffd3 	bl	80018be <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8001918:	2206      	movs	r2, #6
 800191a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800191e:	4805      	ldr	r0, [pc, #20]	@ (8001934 <MX_RTC_Init+0x68>)
 8001920:	f005 fce5 	bl	80072ee <HAL_RTCEx_SetWakeUpTimer>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800192a:	f7ff ffc8 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000334 	.word	0x20000334
 8001938:	40002800 	.word	0x40002800

0800193c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b094      	sub	sp, #80	@ 0x50
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2244      	movs	r2, #68	@ 0x44
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f00b fdbb 	bl	800d4c8 <memset>
  if(rtcHandle->Instance==RTC)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a15      	ldr	r2, [pc, #84]	@ (80019ac <HAL_RTC_MspInit+0x70>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d123      	bne.n	80019a4 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800195c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001960:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001962:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001966:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4618      	mov	r0, r3
 800196e:	f005 f9b1 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001978:	f7ff ffa1 	bl	80018be <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800197c:	4b0c      	ldr	r3, [pc, #48]	@ (80019b0 <HAL_RTC_MspInit+0x74>)
 800197e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001982:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <HAL_RTC_MspInit+0x74>)
 8001984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001988:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800198c:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <HAL_RTC_MspInit+0x74>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001990:	4a07      	ldr	r2, [pc, #28]	@ (80019b0 <HAL_RTC_MspInit+0x74>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001996:	6593      	str	r3, [r2, #88]	@ 0x58
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <HAL_RTC_MspInit+0x74>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019a4:	bf00      	nop
 80019a6:	3750      	adds	r7, #80	@ 0x50
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40002800 	.word	0x40002800
 80019b0:	40021000 	.word	0x40021000

080019b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019ba:	4a1c      	ldr	r2, [pc, #112]	@ (8001a2c <MX_SPI1_Init+0x78>)
 80019bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80019cc:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80019d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019da:	4b13      	ldr	r3, [pc, #76]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001a28 <MX_SPI1_Init+0x74>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <MX_SPI1_Init+0x74>)
 8001a02:	2207      	movs	r2, #7
 8001a04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a06:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <MX_SPI1_Init+0x74>)
 8001a0e:	2208      	movs	r2, #8
 8001a10:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a12:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <MX_SPI1_Init+0x74>)
 8001a14:	f005 fcdf 	bl	80073d6 <HAL_SPI_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f7ff ff4e 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000035c 	.word	0x2000035c
 8001a2c:	40013000 	.word	0x40013000

08001a30 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	@ 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a25      	ldr	r2, [pc, #148]	@ (8001ae4 <HAL_SPI_MspInit+0xb4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d144      	bne.n	8001adc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a52:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a56:	4a24      	ldr	r2, [pc, #144]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a62:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b19      	ldr	r3, [pc, #100]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a86:	4a18      	ldr	r2, [pc, #96]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_SPI_MspInit+0xb8>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a9a:	23c0      	movs	r3, #192	@ 0xc0
 8001a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aaa:	2305      	movs	r3, #5
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab8:	f001 fd7e 	bl	80035b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001abc:	2308      	movs	r3, #8
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001acc:	2305      	movs	r3, #5
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	@ (8001aec <HAL_SPI_MspInit+0xbc>)
 8001ad8:	f001 fd6e 	bl	80035b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	@ 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013000 	.word	0x40013000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48000400 	.word	0x48000400

08001af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b34 <HAL_MspInit+0x44>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	4a0e      	ldr	r2, [pc, #56]	@ (8001b34 <HAL_MspInit+0x44>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	4a08      	ldr	r2, [pc, #32]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b22:	603b      	str	r3, [r7, #0]
 8001b24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000

08001b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <NMI_Handler+0x4>

08001b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <MemManage_Handler+0x4>

08001b50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <BusFault_Handler+0x4>

08001b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <UsageFault_Handler+0x4>

08001b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8e:	f000 f9d5 	bl	8001f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b9c:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <USB_LP_IRQHandler+0x10>)
 8001b9e:	f002 fe82 	bl	80048a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20001130 	.word	0x20001130

08001bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb4:	4a14      	ldr	r2, [pc, #80]	@ (8001c08 <_sbrk+0x5c>)
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <_sbrk+0x60>)
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <_sbrk+0x64>)
 8001bca:	4a12      	ldr	r2, [pc, #72]	@ (8001c14 <_sbrk+0x68>)
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bce:	4b10      	ldr	r3, [pc, #64]	@ (8001c10 <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d207      	bcs.n	8001bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bdc:	f00b fc7c 	bl	800d4d8 <__errno>
 8001be0:	4603      	mov	r3, r0
 8001be2:	220c      	movs	r2, #12
 8001be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	e009      	b.n	8001c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bec:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bf2:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <_sbrk+0x64>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <_sbrk+0x64>)
 8001bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20008000 	.word	0x20008000
 8001c0c:	00000400 	.word	0x00000400
 8001c10:	200003c0 	.word	0x200003c0
 8001c14:	20001778 	.word	0x20001778

08001c18 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <SystemInit+0x20>)
 8001c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c22:	4a05      	ldr	r2, [pc, #20]	@ (8001c38 <SystemInit+0x20>)
 8001c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c48:	4907      	ldr	r1, [pc, #28]	@ (8001c68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c50:	4b05      	ldr	r3, [pc, #20]	@ (8001c68 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4013      	ands	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000

08001c6c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001c76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c78:	4907      	ldr	r1, [pc, #28]	@ (8001c98 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001c80:	4b05      	ldr	r3, [pc, #20]	@ (8001c98 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001c82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4013      	ands	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40021000 	.word	0x40021000

08001c9c <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001cb2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001cb6:	f7ff ffd9 	bl	8001c6c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f7ff ffbe 	bl	8001c3c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001cc0:	2310      	movs	r3, #16
 8001cc2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	463b      	mov	r3, r7
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4808      	ldr	r0, [pc, #32]	@ (8001cf4 <MX_UCPD1_Init+0x58>)
 8001cd2:	f006 fe8e 	bl	80089f2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001cd6:	2340      	movs	r3, #64	@ 0x40
 8001cd8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4803      	ldr	r0, [pc, #12]	@ (8001cf4 <MX_UCPD1_Init+0x58>)
 8001ce8:	f006 fe83 	bl	80089f2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	48000400 	.word	0x48000400

08001cf8 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001cfe:	4a23      	ldr	r2, [pc, #140]	@ (8001d8c <MX_UART4_Init+0x94>)
 8001d00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d02:	4b21      	ldr	r3, [pc, #132]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d16:	4b1c      	ldr	r3, [pc, #112]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d1e:	220c      	movs	r2, #12
 8001d20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d22:	4b19      	ldr	r3, [pc, #100]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d28:	4b17      	ldr	r3, [pc, #92]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d40:	4811      	ldr	r0, [pc, #68]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d42:	f005 fecd 	bl	8007ae0 <HAL_UART_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001d4c:	f7ff fdb7 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d50:	2100      	movs	r1, #0
 8001d52:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d54:	f006 fc38 	bl	80085c8 <HAL_UARTEx_SetTxFifoThreshold>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001d5e:	f7ff fdae 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d62:	2100      	movs	r1, #0
 8001d64:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d66:	f006 fc6d 	bl	8008644 <HAL_UARTEx_SetRxFifoThreshold>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001d70:	f7ff fda5 	bl	80018be <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <MX_UART4_Init+0x90>)
 8001d76:	f006 fbee 	bl	8008556 <HAL_UARTEx_DisableFifoMode>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001d80:	f7ff fd9d 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	200003c4 	.word	0x200003c4
 8001d8c:	40004c00 	.word	0x40004c00

08001d90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b09a      	sub	sp, #104	@ 0x68
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2244      	movs	r2, #68	@ 0x44
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f00b fb89 	bl	800d4c8 <memset>
  if(uartHandle->Instance==UART4)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1f      	ldr	r2, [pc, #124]	@ (8001e38 <HAL_UART_MspInit+0xa8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d136      	bne.n	8001e2e <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc8:	f107 0310 	add.w	r3, r7, #16
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f004 ff81 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dd8:	f7ff fd71 	bl	80018be <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ddc:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de0:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001de2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001de6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df8:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e00:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_UART_MspInit+0xac>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e0c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e10:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001e1e:	2305      	movs	r3, #5
 8001e20:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	@ (8001e40 <HAL_UART_MspInit+0xb0>)
 8001e2a:	f001 fbc5 	bl	80035b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001e2e:	bf00      	nop
 8001e30:	3768      	adds	r7, #104	@ 0x68
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40004c00 	.word	0x40004c00
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48000800 	.word	0x48000800

08001e44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e44:	480d      	ldr	r0, [pc, #52]	@ (8001e7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e46:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e48:	f7ff fee6 	bl	8001c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e4c:	480c      	ldr	r0, [pc, #48]	@ (8001e80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4e:	490d      	ldr	r1, [pc, #52]	@ (8001e84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <LoopForever+0xe>)
  movs r3, #0
 8001e52:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e54:	e002      	b.n	8001e5c <LoopCopyDataInit>

08001e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e5a:	3304      	adds	r3, #4

08001e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e60:	d3f9      	bcc.n	8001e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e64:	4c0a      	ldr	r4, [pc, #40]	@ (8001e90 <LoopForever+0x16>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e68:	e001      	b.n	8001e6e <LoopFillZerobss>

08001e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e6c:	3204      	adds	r2, #4

08001e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e70:	d3fb      	bcc.n	8001e6a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f00b fb37 	bl	800d4e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e76:	f7ff fbcd 	bl	8001614 <main>

08001e7a <LoopForever>:

LoopForever:
    b LoopForever
 8001e7a:	e7fe      	b.n	8001e7a <LoopForever>
  ldr   r0, =_estack
 8001e7c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e88:	0800deb8 	.word	0x0800deb8
  ldr r2, =_sbss
 8001e8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e90:	20001774 	.word	0x20001774

08001e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC1_2_IRQHandler>

08001e96 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	f001 f96f 	bl	8003184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea6:	200f      	movs	r0, #15
 8001ea8:	f000 f80e 	bl	8001ec8 <HAL_InitTick>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d002      	beq.n	8001eb8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	71fb      	strb	r3, [r7, #7]
 8001eb6:	e001      	b.n	8001ebc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb8:	f7ff fe1a 	bl	8001af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ebc:	79fb      	ldrb	r3, [r7, #7]

}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ed4:	4b16      	ldr	r3, [pc, #88]	@ (8001f30 <HAL_InitTick+0x68>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d022      	beq.n	8001f22 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001edc:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <HAL_InitTick+0x6c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b13      	ldr	r3, [pc, #76]	@ (8001f30 <HAL_InitTick+0x68>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ee8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 f97a 	bl	80031ea <HAL_SYSTICK_Config>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10f      	bne.n	8001f1c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	d809      	bhi.n	8001f16 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f02:	2200      	movs	r2, #0
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0a:	f001 f946 	bl	800319a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f38 <HAL_InitTick+0x70>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e007      	b.n	8001f26 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	e004      	b.n	8001f26 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e001      	b.n	8001f26 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000008 	.word	0x20000008
 8001f34:	20000000 	.word	0x20000000
 8001f38:	20000004 	.word	0x20000004

08001f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_IncTick+0x1c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b05      	ldr	r3, [pc, #20]	@ (8001f5c <HAL_IncTick+0x20>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	4a03      	ldr	r2, [pc, #12]	@ (8001f58 <HAL_IncTick+0x1c>)
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	20000458 	.word	0x20000458
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return uwTick;
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_GetTick+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000458 	.word	0x20000458

08001f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f80:	f7ff ffee 	bl	8001f60 <HAL_GetTick>
 8001f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d004      	beq.n	8001f9c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_Delay+0x40>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f9c:	bf00      	nop
 8001f9e:	f7ff ffdf 	bl	8001f60 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d8f7      	bhi.n	8001f9e <HAL_Delay+0x26>
  {
  }
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20000008 	.word	0x20000008

08001fbc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002018:	4618      	mov	r0, r3
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
 8002030:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3360      	adds	r3, #96	@ 0x60
 8002036:	461a      	mov	r2, r3
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <LL_ADC_SetOffset+0x44>)
 8002046:	4013      	ands	r3, r2
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	4313      	orrs	r3, r2
 8002054:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800205c:	bf00      	nop
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	03fff000 	.word	0x03fff000

0800206c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3360      	adds	r3, #96	@ 0x60
 800207a:	461a      	mov	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800208c:	4618      	mov	r0, r3
 800208e:	3714      	adds	r7, #20
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	3360      	adds	r3, #96	@ 0x60
 80020a8:	461a      	mov	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	431a      	orrs	r2, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020c2:	bf00      	nop
 80020c4:	371c      	adds	r7, #28
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b087      	sub	sp, #28
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3360      	adds	r3, #96	@ 0x60
 80020de:	461a      	mov	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	431a      	orrs	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020f8:	bf00      	nop
 80020fa:	371c      	adds	r7, #28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3360      	adds	r3, #96	@ 0x60
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	431a      	orrs	r2, r3
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800212e:	bf00      	nop
 8002130:	371c      	adds	r7, #28
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	615a      	str	r2, [r3, #20]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002160:	b480      	push	{r7}
 8002162:	b087      	sub	sp, #28
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3330      	adds	r3, #48	@ 0x30
 8002170:	461a      	mov	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	4413      	add	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	211f      	movs	r1, #31
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	0e9b      	lsrs	r3, r3, #26
 8002198:	f003 011f 	and.w	r1, r3, #31
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f003 031f 	and.w	r3, r3, #31
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	431a      	orrs	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3314      	adds	r3, #20
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	0e5b      	lsrs	r3, r3, #25
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	4413      	add	r3, r2
 80021d6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	0d1b      	lsrs	r3, r3, #20
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	2107      	movs	r1, #7
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	401a      	ands	r2, r3
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	0d1b      	lsrs	r3, r3, #20
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002202:	bf00      	nop
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002228:	43db      	mvns	r3, r3
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0318 	and.w	r3, r3, #24
 8002232:	4908      	ldr	r1, [pc, #32]	@ (8002254 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002234:	40d9      	lsrs	r1, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	400b      	ands	r3, r1
 800223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223e:	431a      	orrs	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	0007ffff 	.word	0x0007ffff

08002258 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002268:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6093      	str	r3, [r2, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800228c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022b8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <LL_ADC_IsEnabled+0x18>
 8002308:	2301      	movs	r3, #1
 800230a:	e000      	b.n	800230e <LL_ADC_IsEnabled+0x1a>
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b04      	cmp	r3, #4
 800232c:	d101      	bne.n	8002332 <LL_ADC_REG_IsConversionOngoing+0x18>
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b08      	cmp	r3, #8
 8002352:	d101      	bne.n	8002358 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e167      	b.n	8002652 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7fe fde1 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff67 	bl	800227c <LL_ADC_IsDeepPowerDownEnabled>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d004      	beq.n	80023be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff ff4d 	bl	8002258 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff ff82 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d115      	bne.n	80023fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff ff66 	bl	80022a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d8:	4ba0      	ldr	r3, [pc, #640]	@ (800265c <HAL_ADC_Init+0x2f4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	099b      	lsrs	r3, r3, #6
 80023de:	4aa0      	ldr	r2, [pc, #640]	@ (8002660 <HAL_ADC_Init+0x2f8>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	099b      	lsrs	r3, r3, #6
 80023e6:	3301      	adds	r3, #1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023ec:	e002      	b.n	80023f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff64 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10d      	bne.n	8002426 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240e:	f043 0210 	orr.w	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff75 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 8002430:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002436:	f003 0310 	and.w	r3, r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	f040 8100 	bne.w	8002640 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f040 80fc 	bne.w	8002640 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002450:	f043 0202 	orr.w	r2, r3, #2
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff49 	bl	80022f4 <LL_ADC_IsEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d111      	bne.n	800248c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002468:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800246c:	f7ff ff42 	bl	80022f4 <LL_ADC_IsEnabled>
 8002470:	4604      	mov	r4, r0
 8002472:	487c      	ldr	r0, [pc, #496]	@ (8002664 <HAL_ADC_Init+0x2fc>)
 8002474:	f7ff ff3e 	bl	80022f4 <LL_ADC_IsEnabled>
 8002478:	4603      	mov	r3, r0
 800247a:	4323      	orrs	r3, r4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d105      	bne.n	800248c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4619      	mov	r1, r3
 8002486:	4878      	ldr	r0, [pc, #480]	@ (8002668 <HAL_ADC_Init+0x300>)
 8002488:	f7ff fd98 	bl	8001fbc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7f5b      	ldrb	r3, [r3, #29]
 8002490:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002496:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800249c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d106      	bne.n	80024c8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	045b      	lsls	r3, r3, #17
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d009      	beq.n	80024e4 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	4b60      	ldr	r3, [pc, #384]	@ (800266c <HAL_ADC_Init+0x304>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	69b9      	ldr	r1, [r7, #24]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff ff14 	bl	8002340 <LL_ADC_INJ_IsConversionOngoing>
 8002518:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d16d      	bne.n	80025fc <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d16a      	bne.n	80025fc <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800252a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002532:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002542:	f023 0302 	bic.w	r3, r3, #2
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6812      	ldr	r2, [r2, #0]
 800254a:	69b9      	ldr	r1, [r7, #24]
 800254c:	430b      	orrs	r3, r1
 800254e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d017      	beq.n	8002588 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691a      	ldr	r2, [r3, #16]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002566:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002570:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6911      	ldr	r1, [r2, #16]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	430b      	orrs	r3, r1
 8002582:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002586:	e013      	b.n	80025b0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002596:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025a8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d118      	bne.n	80025ec <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025d0:	4311      	orrs	r1, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025d6:	4311      	orrs	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025dc:	430a      	orrs	r2, r1
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f042 0201 	orr.w	r2, r2, #1
 80025e8:	611a      	str	r2, [r3, #16]
 80025ea:	e007      	b.n	80025fc <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d10c      	bne.n	800261e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f023 010f 	bic.w	r1, r3, #15
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
 800261c:	e007      	b.n	800262e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 020f 	bic.w	r2, r2, #15
 800262c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	f043 0201 	orr.w	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800263e:	e007      	b.n	8002650 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002644:	f043 0210 	orr.w	r2, r3, #16
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002650:	7ffb      	ldrb	r3, [r7, #31]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3724      	adds	r7, #36	@ 0x24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd90      	pop	{r4, r7, pc}
 800265a:	bf00      	nop
 800265c:	20000000 	.word	0x20000000
 8002660:	053e2d63 	.word	0x053e2d63
 8002664:	50000100 	.word	0x50000100
 8002668:	50000300 	.word	0x50000300
 800266c:	fff04007 	.word	0xfff04007

08002670 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b0b6      	sub	sp, #216	@ 0xd8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x22>
 800268e:	2302      	movs	r3, #2
 8002690:	e3c8      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x7b4>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fe3b 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 83ad 	bne.w	8002e06 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	461a      	mov	r2, r3
 80026ba:	f7ff fd51 	bl	8002160 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fe29 	bl	800231a <LL_ADC_REG_IsConversionOngoing>
 80026c8:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fe35 	bl	8002340 <LL_ADC_INJ_IsConversionOngoing>
 80026d6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f040 81d9 	bne.w	8002a96 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f040 81d4 	bne.w	8002a96 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026f6:	d10f      	bne.n	8002718 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6818      	ldr	r0, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	4619      	mov	r1, r3
 8002704:	f7ff fd58 	bl	80021b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fd12 	bl	800213a <LL_ADC_SetSamplingTimeCommonConfig>
 8002716:	e00e      	b.n	8002736 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	461a      	mov	r2, r3
 8002726:	f7ff fd47 	bl	80021b8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fd02 	bl	800213a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	08db      	lsrs	r3, r3, #3
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b04      	cmp	r3, #4
 8002756:	d022      	beq.n	800279e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6919      	ldr	r1, [r3, #16]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002768:	f7ff fc5c 	bl	8002024 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	461a      	mov	r2, r3
 800277a:	f7ff fca8 	bl	80020ce <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6818      	ldr	r0, [r3, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800278a:	2b01      	cmp	r3, #1
 800278c:	d102      	bne.n	8002794 <HAL_ADC_ConfigChannel+0x124>
 800278e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002792:	e000      	b.n	8002796 <HAL_ADC_ConfigChannel+0x126>
 8002794:	2300      	movs	r3, #0
 8002796:	461a      	mov	r2, r3
 8002798:	f7ff fcb4 	bl	8002104 <LL_ADC_SetOffsetSaturation>
 800279c:	e17b      	b.n	8002a96 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fc61 	bl	800206c <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d10a      	bne.n	80027ca <HAL_ADC_ConfigChannel+0x15a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fc56 	bl	800206c <LL_ADC_GetOffsetChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	f003 021f 	and.w	r2, r3, #31
 80027c8:	e01e      	b.n	8002808 <HAL_ADC_ConfigChannel+0x198>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fc4b 	bl	800206c <LL_ADC_GetOffsetChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80027f8:	2320      	movs	r3, #32
 80027fa:	e004      	b.n	8002806 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80027fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002800:	fab3 f383 	clz	r3, r3
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002810:	2b00      	cmp	r3, #0
 8002812:	d105      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x1b0>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	0e9b      	lsrs	r3, r3, #26
 800281a:	f003 031f 	and.w	r3, r3, #31
 800281e:	e018      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1e2>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002834:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800283c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002844:	2320      	movs	r3, #32
 8002846:	e004      	b.n	8002852 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002848:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800284c:	fab3 f383 	clz	r3, r3
 8002850:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002852:	429a      	cmp	r2, r3
 8002854:	d106      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fc1a 	bl	8002098 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fbfe 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10a      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x220>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fbf3 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	0e9b      	lsrs	r3, r3, #26
 800288a:	f003 021f 	and.w	r2, r3, #31
 800288e:	e01e      	b.n	80028ce <HAL_ADC_ConfigChannel+0x25e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fbe8 	bl	800206c <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80028be:	2320      	movs	r3, #32
 80028c0:	e004      	b.n	80028cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80028c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x276>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	0e9b      	lsrs	r3, r3, #26
 80028e0:	f003 031f 	and.w	r3, r3, #31
 80028e4:	e018      	b.n	8002918 <HAL_ADC_ConfigChannel+0x2a8>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002902:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800290a:	2320      	movs	r3, #32
 800290c:	e004      	b.n	8002918 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800290e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002918:	429a      	cmp	r2, r3
 800291a:	d106      	bne.n	800292a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2200      	movs	r2, #0
 8002922:	2101      	movs	r1, #1
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fbb7 	bl	8002098 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fb9b 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800293c:	2b00      	cmp	r3, #0
 800293e:	d10a      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x2e6>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2102      	movs	r1, #2
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fb90 	bl	800206c <LL_ADC_GetOffsetChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	0e9b      	lsrs	r3, r3, #26
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	e01e      	b.n	8002994 <HAL_ADC_ConfigChannel+0x324>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2102      	movs	r1, #2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fb85 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800296c:	fa93 f3a3 	rbit	r3, r3
 8002970:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002974:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002978:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800297c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002984:	2320      	movs	r3, #32
 8002986:	e004      	b.n	8002992 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002988:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800298c:	fab3 f383 	clz	r3, r3
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299c:	2b00      	cmp	r3, #0
 800299e:	d105      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x33c>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0e9b      	lsrs	r3, r3, #26
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	e016      	b.n	80029da <HAL_ADC_ConfigChannel+0x36a>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029b8:	fa93 f3a3 	rbit	r3, r3
 80029bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80029cc:	2320      	movs	r3, #32
 80029ce:	e004      	b.n	80029da <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029d4:	fab3 f383 	clz	r3, r3
 80029d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029da:	429a      	cmp	r2, r3
 80029dc:	d106      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2200      	movs	r2, #0
 80029e4:	2102      	movs	r1, #2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fb56 	bl	8002098 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2103      	movs	r1, #3
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fb3a 	bl	800206c <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10a      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x3a8>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2103      	movs	r1, #3
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fb2f 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	0e9b      	lsrs	r3, r3, #26
 8002a12:	f003 021f 	and.w	r2, r3, #31
 8002a16:	e017      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x3d8>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fb24 	bl	800206c <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a32:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e003      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a40:	fab3 f383 	clz	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x3f0>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0e9b      	lsrs	r3, r3, #26
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	e011      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x414>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a78:	2320      	movs	r3, #32
 8002a7a:	e003      	b.n	8002a84 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a7e:	fab3 f383 	clz	r3, r3
 8002a82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d106      	bne.n	8002a96 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2103      	movs	r1, #3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fb01 	bl	8002098 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fc2a 	bl	80022f4 <LL_ADC_IsEnabled>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 8140 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	6819      	ldr	r1, [r3, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	f7ff fbab 	bl	8002210 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4a8f      	ldr	r2, [pc, #572]	@ (8002cfc <HAL_ADC_ConfigChannel+0x68c>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	f040 8131 	bne.w	8002d28 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x47e>
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	0e9b      	lsrs	r3, r3, #26
 8002adc:	3301      	adds	r3, #1
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2b09      	cmp	r3, #9
 8002ae4:	bf94      	ite	ls
 8002ae6:	2301      	movls	r3, #1
 8002ae8:	2300      	movhi	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	e019      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x4b2>
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002afe:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b06:	2320      	movs	r3, #32
 8002b08:	e003      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b0a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b0c:	fab3 f383 	clz	r3, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	3301      	adds	r3, #1
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	2b09      	cmp	r3, #9
 8002b1a:	bf94      	ite	ls
 8002b1c:	2301      	movls	r3, #1
 8002b1e:	2300      	movhi	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d079      	beq.n	8002c1a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x4d2>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	0e9b      	lsrs	r3, r3, #26
 8002b38:	3301      	adds	r3, #1
 8002b3a:	069b      	lsls	r3, r3, #26
 8002b3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b40:	e015      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x4fe>
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b52:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e003      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	3301      	adds	r3, #1
 8002b68:	069b      	lsls	r3, r3, #26
 8002b6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x51e>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2101      	movs	r1, #1
 8002b88:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8c:	e017      	b.n	8002bbe <HAL_ADC_ConfigChannel+0x54e>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b96:	fa93 f3a3 	rbit	r3, r3
 8002b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002ba6:	2320      	movs	r3, #32
 8002ba8:	e003      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	f003 031f 	and.w	r3, r3, #31
 8002bb8:	2101      	movs	r1, #1
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	ea42 0103 	orr.w	r1, r2, r3
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10a      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x574>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 021f 	and.w	r2, r3, #31
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	051b      	lsls	r3, r3, #20
 8002be2:	e018      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x5a6>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002bfc:	2320      	movs	r3, #32
 8002bfe:	e003      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f003 021f 	and.w	r2, r3, #31
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c16:	430b      	orrs	r3, r1
 8002c18:	e081      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d107      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x5c6>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0e9b      	lsrs	r3, r3, #26
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	069b      	lsls	r3, r3, #26
 8002c30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c34:	e015      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x5f2>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e003      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	069b      	lsls	r3, r3, #26
 8002c5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x612>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	3301      	adds	r3, #1
 8002c76:	f003 031f 	and.w	r3, r3, #31
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	e017      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x642>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	61fb      	str	r3, [r7, #28]
  return result;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e003      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2101      	movs	r1, #1
 8002cae:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb2:	ea42 0103 	orr.w	r1, r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10d      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x66e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0e9b      	lsrs	r3, r3, #26
 8002cc8:	3301      	adds	r3, #1
 8002cca:	f003 021f 	and.w	r2, r3, #31
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3b1e      	subs	r3, #30
 8002cd6:	051b      	lsls	r3, r3, #20
 8002cd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cdc:	e01e      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x6ac>
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	613b      	str	r3, [r7, #16]
  return result;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002cf6:	2320      	movs	r3, #32
 8002cf8:	e006      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x698>
 8002cfa:	bf00      	nop
 8002cfc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	f003 021f 	and.w	r2, r3, #31
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	3b1e      	subs	r3, #30
 8002d16:	051b      	lsls	r3, r3, #20
 8002d18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d22:	4619      	mov	r1, r3
 8002d24:	f7ff fa48 	bl	80021b8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7bc>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d071      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d34:	483e      	ldr	r0, [pc, #248]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d36:	f7ff f967 	bl	8002008 <LL_ADC_GetCommonPathInternalCh>
 8002d3a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a3c      	ldr	r2, [pc, #240]	@ (8002e34 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_ADC_ConfigChannel+0x6e2>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e38 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d127      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d121      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d66:	d157      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d70:	4619      	mov	r1, r3
 8002d72:	482f      	ldr	r0, [pc, #188]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002d74:	f7ff f935 	bl	8001fe2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d78:	4b30      	ldr	r3, [pc, #192]	@ (8002e3c <HAL_ADC_ConfigChannel+0x7cc>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	099b      	lsrs	r3, r3, #6
 8002d7e:	4a30      	ldr	r2, [pc, #192]	@ (8002e40 <HAL_ADC_ConfigChannel+0x7d0>)
 8002d80:	fba2 2303 	umull	r2, r3, r2, r3
 8002d84:	099b      	lsrs	r3, r3, #6
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	4413      	add	r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d92:	e002      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b01      	subs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1f9      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002da0:	e03a      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a27      	ldr	r2, [pc, #156]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7d4>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d113      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a22      	ldr	r2, [pc, #136]	@ (8002e48 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d02a      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4818      	ldr	r0, [pc, #96]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002dce:	f7ff f908 	bl	8001fe2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd2:	e021      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <HAL_ADC_ConfigChannel+0x7dc>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d11c      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a16      	ldr	r2, [pc, #88]	@ (8002e48 <HAL_ADC_ConfigChannel+0x7d8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d011      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002df8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	480c      	ldr	r0, [pc, #48]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e00:	f7ff f8ef 	bl	8001fe2 <LL_ADC_SetCommonPathInternalCh>
 8002e04:	e008      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e20:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	37d8      	adds	r7, #216	@ 0xd8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	80080000 	.word	0x80080000
 8002e30:	50000300 	.word	0x50000300
 8002e34:	c3210000 	.word	0xc3210000
 8002e38:	90c00010 	.word	0x90c00010
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	053e2d63 	.word	0x053e2d63
 8002e44:	c7520000 	.word	0xc7520000
 8002e48:	50000100 	.word	0x50000100
 8002e4c:	cb840000 	.word	0xcb840000

08002e50 <LL_ADC_IsEnabled>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <LL_ADC_IsEnabled+0x18>
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <LL_ADC_IsEnabled+0x1a>
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d101      	bne.n	8002e8e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b0a1      	sub	sp, #132	@ 0x84
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e08b      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ed2:	d102      	bne.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ed4:	4b41      	ldr	r3, [pc, #260]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	e001      	b.n	8002ede <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e06a      	b.n	8002fd2 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ffb9 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ffb3 	bl	8002e76 <LL_ADC_REG_IsConversionOngoing>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d14c      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f16:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d149      	bne.n	8002fb0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f1c:	4b30      	ldr	r3, [pc, #192]	@ (8002fe0 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d028      	beq.n	8002f7a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6859      	ldr	r1, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f3a:	035b      	lsls	r3, r3, #13
 8002f3c:	430b      	orrs	r3, r1
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f44:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f48:	f7ff ff82 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	4823      	ldr	r0, [pc, #140]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f50:	f7ff ff7e 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f54:	4603      	mov	r3, r0
 8002f56:	4323      	orrs	r3, r4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d133      	bne.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f64:	f023 030f 	bic.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	6811      	ldr	r1, [r2, #0]
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f76:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f78:	e024      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f84:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f86:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f8a:	f7ff ff61 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f8e:	4604      	mov	r4, r0
 8002f90:	4812      	ldr	r0, [pc, #72]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f92:	f7ff ff5d 	bl	8002e50 <LL_ADC_IsEnabled>
 8002f96:	4603      	mov	r3, r0
 8002f98:	4323      	orrs	r3, r4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d112      	bne.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fa6:	f023 030f 	bic.w	r3, r3, #15
 8002faa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002fac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fae:	e009      	b.n	8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3784      	adds	r7, #132	@ 0x84
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	50000100 	.word	0x50000100
 8002fe0:	50000300 	.word	0x50000300

08002fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003000:	4013      	ands	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800300c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003016:	4a04      	ldr	r2, [pc, #16]	@ (8003028 <__NVIC_SetPriorityGrouping+0x44>)
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	60d3      	str	r3, [r2, #12]
}
 800301c:	bf00      	nop
 800301e:	3714      	adds	r7, #20
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003030:	4b04      	ldr	r3, [pc, #16]	@ (8003044 <__NVIC_GetPriorityGrouping+0x18>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	0a1b      	lsrs	r3, r3, #8
 8003036:	f003 0307 	and.w	r3, r3, #7
}
 800303a:	4618      	mov	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003056:	2b00      	cmp	r3, #0
 8003058:	db0b      	blt.n	8003072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	f003 021f 	and.w	r2, r3, #31
 8003060:	4907      	ldr	r1, [pc, #28]	@ (8003080 <__NVIC_EnableIRQ+0x38>)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2001      	movs	r0, #1
 800306a:	fa00 f202 	lsl.w	r2, r0, r2
 800306e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	e000e100 	.word	0xe000e100

08003084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	6039      	str	r1, [r7, #0]
 800308e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	2b00      	cmp	r3, #0
 8003096:	db0a      	blt.n	80030ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	b2da      	uxtb	r2, r3
 800309c:	490c      	ldr	r1, [pc, #48]	@ (80030d0 <__NVIC_SetPriority+0x4c>)
 800309e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a2:	0112      	lsls	r2, r2, #4
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	440b      	add	r3, r1
 80030a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030ac:	e00a      	b.n	80030c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	4908      	ldr	r1, [pc, #32]	@ (80030d4 <__NVIC_SetPriority+0x50>)
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	3b04      	subs	r3, #4
 80030bc:	0112      	lsls	r2, r2, #4
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	440b      	add	r3, r1
 80030c2:	761a      	strb	r2, [r3, #24]
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	e000e100 	.word	0xe000e100
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b089      	sub	sp, #36	@ 0x24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f1c3 0307 	rsb	r3, r3, #7
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	bf28      	it	cs
 80030f6:	2304      	movcs	r3, #4
 80030f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2b06      	cmp	r3, #6
 8003100:	d902      	bls.n	8003108 <NVIC_EncodePriority+0x30>
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	3b03      	subs	r3, #3
 8003106:	e000      	b.n	800310a <NVIC_EncodePriority+0x32>
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	401a      	ands	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003120:	f04f 31ff 	mov.w	r1, #4294967295
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	43d9      	mvns	r1, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003130:	4313      	orrs	r3, r2
         );
}
 8003132:	4618      	mov	r0, r3
 8003134:	3724      	adds	r7, #36	@ 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003150:	d301      	bcc.n	8003156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003152:	2301      	movs	r3, #1
 8003154:	e00f      	b.n	8003176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003156:	4a0a      	ldr	r2, [pc, #40]	@ (8003180 <SysTick_Config+0x40>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315e:	210f      	movs	r1, #15
 8003160:	f04f 30ff 	mov.w	r0, #4294967295
 8003164:	f7ff ff8e 	bl	8003084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <SysTick_Config+0x40>)
 800316a:	2200      	movs	r2, #0
 800316c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316e:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <SysTick_Config+0x40>)
 8003170:	2207      	movs	r2, #7
 8003172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	e000e010 	.word	0xe000e010

08003184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f7ff ff29 	bl	8002fe4 <__NVIC_SetPriorityGrouping>
}
 8003192:	bf00      	nop
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	4603      	mov	r3, r0
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a8:	f7ff ff40 	bl	800302c <__NVIC_GetPriorityGrouping>
 80031ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	6978      	ldr	r0, [r7, #20]
 80031b4:	f7ff ff90 	bl	80030d8 <NVIC_EncodePriority>
 80031b8:	4602      	mov	r2, r0
 80031ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff5f 	bl	8003084 <__NVIC_SetPriority>
}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	4603      	mov	r3, r0
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff33 	bl	8003048 <__NVIC_EnableIRQ>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b082      	sub	sp, #8
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff ffa4 	bl	8003140 <SysTick_Config>
 80031f8:	4603      	mov	r3, r0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003202:	b580      	push	{r7, lr}
 8003204:	b082      	sub	sp, #8
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e014      	b.n	800323e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	791b      	ldrb	r3, [r3, #4]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d105      	bne.n	800322a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7fd ffb3 	bl	8001190 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	@ 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	2300      	movs	r3, #0
 8003256:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_DAC_ConfigChannel+0x1c>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e19e      	b.n	80035a6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	795b      	ldrb	r3, [r3, #5]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_DAC_ConfigChannel+0x2c>
 8003270:	2302      	movs	r3, #2
 8003272:	e198      	b.n	80035a6 <HAL_DAC_ConfigChannel+0x35e>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2202      	movs	r2, #2
 800327e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d17a      	bne.n	800337e <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003288:	f7fe fe6a 	bl	8001f60 <HAL_GetTick>
 800328c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d13d      	bne.n	8003310 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003294:	e018      	b.n	80032c8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003296:	f7fe fe63 	bl	8001f60 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d911      	bls.n	80032c8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2203      	movs	r2, #3
 80032c2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e16e      	b.n	80035a6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1df      	bne.n	8003296 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40
 80032e0:	e020      	b.n	8003324 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032e2:	f7fe fe3d 	bl	8001f60 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d90f      	bls.n	8003310 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da0a      	bge.n	8003310 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f043 0208 	orr.w	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2203      	movs	r2, #3
 800330a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e14a      	b.n	80035a6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003316:	2b00      	cmp	r3, #0
 8003318:	dbe3      	blt.n	80032e2 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003322:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	ea02 0103 	and.w	r1, r2, r3
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	409a      	lsls	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	21ff      	movs	r1, #255	@ 0xff
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	ea02 0103 	and.w	r1, r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d11d      	bne.n	80033c2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800338c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	221f      	movs	r2, #31
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339e:	4013      	ands	r3, r2
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b6:	4313      	orrs	r3, r2
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2207      	movs	r2, #7
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033da:	4013      	ands	r3, r2
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d102      	bne.n	80033ec <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	e00f      	b.n	800340c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d102      	bne.n	80033fa <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80033f4:	2301      	movs	r3, #1
 80033f6:	623b      	str	r3, [r7, #32]
 80033f8:	e008      	b.n	800340c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003402:	2301      	movs	r3, #1
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	e001      	b.n	800340c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003408:	2300      	movs	r3, #0
 800340a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	6a3a      	ldr	r2, [r7, #32]
 8003418:	4313      	orrs	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342e:	4013      	ands	r3, r2
 8003430:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	791b      	ldrb	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d102      	bne.n	8003440 <HAL_DAC_ConfigChannel+0x1f8>
 800343a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800343e:	e000      	b.n	8003442 <HAL_DAC_ConfigChannel+0x1fa>
 8003440:	2300      	movs	r3, #0
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345a:	4013      	ands	r3, r2
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	795b      	ldrb	r3, [r3, #5]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d102      	bne.n	800346c <HAL_DAC_ConfigChannel+0x224>
 8003466:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800346a:	e000      	b.n	800346e <HAL_DAC_ConfigChannel+0x226>
 800346c:	2300      	movs	r3, #0
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d114      	bne.n	80034ae <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003484:	f003 fba8 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8003488:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4a48      	ldr	r2, [pc, #288]	@ (80035b0 <HAL_DAC_ConfigChannel+0x368>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d904      	bls.n	800349c <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003498:	627b      	str	r3, [r7, #36]	@ 0x24
 800349a:	e00f      	b.n	80034bc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4a45      	ldr	r2, [pc, #276]	@ (80035b4 <HAL_DAC_ConfigChannel+0x36c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d90a      	bls.n	80034ba <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80034ac:	e006      	b.n	80034bc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b4:	4313      	orrs	r3, r2
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b8:	e000      	b.n	80034bc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034ba:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ca:	4313      	orrs	r3, r2
 80034cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6819      	ldr	r1, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f003 0310 	and.w	r3, r3, #16
 80034e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	400a      	ands	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350e:	4013      	ands	r3, r2
 8003510:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003526:	4313      	orrs	r3, r2
 8003528:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003530:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6819      	ldr	r1, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	22c0      	movs	r2, #192	@ 0xc0
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43da      	mvns	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	400a      	ands	r2, r1
 800354c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	089b      	lsrs	r3, r3, #2
 8003560:	021b      	lsls	r3, r3, #8
 8003562:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	f640 710f 	movw	r1, #3855	@ 0xf0f
 800357c:	fa01 f303 	lsl.w	r3, r1, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	ea02 0103 	and.w	r1, r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2201      	movs	r2, #1
 800359c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80035a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3728      	adds	r7, #40	@ 0x28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	09896800 	.word	0x09896800
 80035b4:	04c4b400 	.word	0x04c4b400

080035b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035c6:	e15a      	b.n	800387e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	2101      	movs	r1, #1
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa01 f303 	lsl.w	r3, r1, r3
 80035d4:	4013      	ands	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 814c 	beq.w	8003878 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d005      	beq.n	80035f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d130      	bne.n	800365a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800362e:	2201      	movs	r2, #1
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43db      	mvns	r3, r3
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0201 	and.w	r2, r3, #1
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f003 0303 	and.w	r3, r3, #3
 8003662:	2b03      	cmp	r3, #3
 8003664:	d017      	beq.n	8003696 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	2203      	movs	r2, #3
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43db      	mvns	r3, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4013      	ands	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d123      	bne.n	80036ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	08da      	lsrs	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3208      	adds	r2, #8
 80036aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	220f      	movs	r2, #15
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43db      	mvns	r3, r3
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4013      	ands	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 0307 	and.w	r3, r3, #7
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	08da      	lsrs	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	3208      	adds	r2, #8
 80036e4:	6939      	ldr	r1, [r7, #16]
 80036e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	2203      	movs	r2, #3
 80036f6:	fa02 f303 	lsl.w	r3, r2, r3
 80036fa:	43db      	mvns	r3, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4013      	ands	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0203 	and.w	r2, r3, #3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 80a6 	beq.w	8003878 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800372c:	4b5b      	ldr	r3, [pc, #364]	@ (800389c <HAL_GPIO_Init+0x2e4>)
 800372e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003730:	4a5a      	ldr	r2, [pc, #360]	@ (800389c <HAL_GPIO_Init+0x2e4>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	6613      	str	r3, [r2, #96]	@ 0x60
 8003738:	4b58      	ldr	r3, [pc, #352]	@ (800389c <HAL_GPIO_Init+0x2e4>)
 800373a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003744:	4a56      	ldr	r2, [pc, #344]	@ (80038a0 <HAL_GPIO_Init+0x2e8>)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3302      	adds	r3, #2
 800374c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	220f      	movs	r2, #15
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	4013      	ands	r3, r2
 8003766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800376e:	d01f      	beq.n	80037b0 <HAL_GPIO_Init+0x1f8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a4c      	ldr	r2, [pc, #304]	@ (80038a4 <HAL_GPIO_Init+0x2ec>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d019      	beq.n	80037ac <HAL_GPIO_Init+0x1f4>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a4b      	ldr	r2, [pc, #300]	@ (80038a8 <HAL_GPIO_Init+0x2f0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_GPIO_Init+0x1f0>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a4a      	ldr	r2, [pc, #296]	@ (80038ac <HAL_GPIO_Init+0x2f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00d      	beq.n	80037a4 <HAL_GPIO_Init+0x1ec>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a49      	ldr	r2, [pc, #292]	@ (80038b0 <HAL_GPIO_Init+0x2f8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <HAL_GPIO_Init+0x1e8>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a48      	ldr	r2, [pc, #288]	@ (80038b4 <HAL_GPIO_Init+0x2fc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_GPIO_Init+0x1e4>
 8003798:	2305      	movs	r3, #5
 800379a:	e00a      	b.n	80037b2 <HAL_GPIO_Init+0x1fa>
 800379c:	2306      	movs	r3, #6
 800379e:	e008      	b.n	80037b2 <HAL_GPIO_Init+0x1fa>
 80037a0:	2304      	movs	r3, #4
 80037a2:	e006      	b.n	80037b2 <HAL_GPIO_Init+0x1fa>
 80037a4:	2303      	movs	r3, #3
 80037a6:	e004      	b.n	80037b2 <HAL_GPIO_Init+0x1fa>
 80037a8:	2302      	movs	r3, #2
 80037aa:	e002      	b.n	80037b2 <HAL_GPIO_Init+0x1fa>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <HAL_GPIO_Init+0x1fa>
 80037b0:	2300      	movs	r3, #0
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	f002 0203 	and.w	r2, r2, #3
 80037b8:	0092      	lsls	r2, r2, #2
 80037ba:	4093      	lsls	r3, r2
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	4313      	orrs	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c2:	4937      	ldr	r1, [pc, #220]	@ (80038a0 <HAL_GPIO_Init+0x2e8>)
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	3302      	adds	r3, #2
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d0:	4b39      	ldr	r3, [pc, #228]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	43db      	mvns	r3, r3
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4013      	ands	r3, r2
 80037de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037f4:	4a30      	ldr	r2, [pc, #192]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037fa:	4b2f      	ldr	r3, [pc, #188]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	43db      	mvns	r3, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800381e:	4a26      	ldr	r2, [pc, #152]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003824:	4b24      	ldr	r3, [pc, #144]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003848:	4a1b      	ldr	r2, [pc, #108]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800384e:	4b1a      	ldr	r3, [pc, #104]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	43db      	mvns	r3, r3
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4013      	ands	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003872:	4a11      	ldr	r2, [pc, #68]	@ (80038b8 <HAL_GPIO_Init+0x300>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3301      	adds	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	f47f ae9d 	bne.w	80035c8 <HAL_GPIO_Init+0x10>
  }
}
 800388e:	bf00      	nop
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40021000 	.word	0x40021000
 80038a0:	40010000 	.word	0x40010000
 80038a4:	48000400 	.word	0x48000400
 80038a8:	48000800 	.word	0x48000800
 80038ac:	48000c00 	.word	0x48000c00
 80038b0:	48001000 	.word	0x48001000
 80038b4:	48001400 	.word	0x48001400
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	460b      	mov	r3, r1
 80038f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4013      	ands	r3, r2
 8003904:	041a      	lsls	r2, r3, #16
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	43d9      	mvns	r1, r3
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	400b      	ands	r3, r1
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	619a      	str	r2, [r3, #24]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e08d      	b.n	8003a4e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fd fd6c 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2224      	movs	r2, #36	@ 0x24
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003970:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003980:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	e006      	b.n	80039a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d108      	bne.n	80039c2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039be:	605a      	str	r2, [r3, #4]
 80039c0:	e007      	b.n	80039d2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039d0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69d9      	ldr	r1, [r3, #28]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1a      	ldr	r2, [r3, #32]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0201 	orr.w	r2, r2, #1
 8003a2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	461a      	mov	r2, r3
 8003a64:	460b      	mov	r3, r1
 8003a66:	817b      	strh	r3, [r7, #10]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	f040 80fd 	bne.w	8003c74 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_I2C_Master_Transmit+0x30>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e0f6      	b.n	8003c76 <HAL_I2C_Master_Transmit+0x21e>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a90:	f7fe fa66 	bl	8001f60 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2319      	movs	r3, #25
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 faf6 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0e1      	b.n	8003c76 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2221      	movs	r2, #33	@ 0x21
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2210      	movs	r2, #16
 8003abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	893a      	ldrh	r2, [r7, #8]
 8003ad2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	2bff      	cmp	r3, #255	@ 0xff
 8003ae2:	d906      	bls.n	8003af2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	22ff      	movs	r2, #255	@ 0xff
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003aea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e007      	b.n	8003b02 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003afc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b00:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d024      	beq.n	8003b54 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	8979      	ldrh	r1, [r7, #10]
 8003b46:	4b4e      	ldr	r3, [pc, #312]	@ (8003c80 <HAL_I2C_Master_Transmit+0x228>)
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fcf1 	bl	8004534 <I2C_TransferConfig>
 8003b52:	e066      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b48      	ldr	r3, [pc, #288]	@ (8003c80 <HAL_I2C_Master_Transmit+0x228>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 fce6 	bl	8004534 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b68:	e05b      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	6a39      	ldr	r1, [r7, #32]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fae9 	bl	8004146 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07b      	b.n	8003c76 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d034      	beq.n	8003c22 <HAL_I2C_Master_Transmit+0x1ca>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d130      	bne.n	8003c22 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2180      	movs	r1, #128	@ 0x80
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f000 fa62 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e04d      	b.n	8003c76 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2bff      	cmp	r3, #255	@ 0xff
 8003be2:	d90e      	bls.n	8003c02 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	22ff      	movs	r2, #255	@ 0xff
 8003be8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bee:	b2da      	uxtb	r2, r3
 8003bf0:	8979      	ldrh	r1, [r7, #10]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 fc9a 	bl	8004534 <I2C_TransferConfig>
 8003c00:	e00f      	b.n	8003c22 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	8979      	ldrh	r1, [r7, #10]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fc89 	bl	8004534 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d19e      	bne.n	8003b6a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 facf 	bl	80041d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e01a      	b.n	8003c76 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2220      	movs	r2, #32
 8003c46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6859      	ldr	r1, [r3, #4]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b0c      	ldr	r3, [pc, #48]	@ (8003c84 <HAL_I2C_Master_Transmit+0x22c>)
 8003c54:	400b      	ands	r3, r1
 8003c56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	80002000 	.word	0x80002000
 8003c84:	fe00e800 	.word	0xfe00e800

08003c88 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	461a      	mov	r2, r3
 8003c94:	460b      	mov	r3, r1
 8003c96:	817b      	strh	r3, [r7, #10]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	f040 80db 	bne.w	8003e60 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_I2C_Master_Receive+0x30>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0d4      	b.n	8003e62 <HAL_I2C_Master_Receive+0x1da>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cc0:	f7fe f94e 	bl	8001f60 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2319      	movs	r3, #25
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f9de 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0bf      	b.n	8003e62 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2222      	movs	r2, #34	@ 0x22
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2210      	movs	r2, #16
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	893a      	ldrh	r2, [r7, #8]
 8003d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2bff      	cmp	r3, #255	@ 0xff
 8003d12:	d90e      	bls.n	8003d32 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	22ff      	movs	r2, #255	@ 0xff
 8003d18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	8979      	ldrh	r1, [r7, #10]
 8003d22:	4b52      	ldr	r3, [pc, #328]	@ (8003e6c <HAL_I2C_Master_Receive+0x1e4>)
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fc02 	bl	8004534 <I2C_TransferConfig>
 8003d30:	e06d      	b.n	8003e0e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	8979      	ldrh	r1, [r7, #10]
 8003d44:	4b49      	ldr	r3, [pc, #292]	@ (8003e6c <HAL_I2C_Master_Receive+0x1e4>)
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 fbf1 	bl	8004534 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003d52:	e05c      	b.n	8003e0e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	6a39      	ldr	r1, [r7, #32]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f000 fa7f 	bl	800425c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e07c      	b.n	8003e62 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d034      	beq.n	8003e0e <HAL_I2C_Master_Receive+0x186>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d130      	bne.n	8003e0e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	2200      	movs	r2, #0
 8003db4:	2180      	movs	r1, #128	@ 0x80
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f96c 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e04d      	b.n	8003e62 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2bff      	cmp	r3, #255	@ 0xff
 8003dce:	d90e      	bls.n	8003dee <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	22ff      	movs	r2, #255	@ 0xff
 8003dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	b2da      	uxtb	r2, r3
 8003ddc:	8979      	ldrh	r1, [r7, #10]
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fba4 	bl	8004534 <I2C_TransferConfig>
 8003dec:	e00f      	b.n	8003e0e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfc:	b2da      	uxtb	r2, r3
 8003dfe:	8979      	ldrh	r1, [r7, #10]
 8003e00:	2300      	movs	r3, #0
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 fb93 	bl	8004534 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d19d      	bne.n	8003d54 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	6a39      	ldr	r1, [r7, #32]
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f9d9 	bl	80041d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e01a      	b.n	8003e62 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2220      	movs	r2, #32
 8003e32:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e70 <HAL_I2C_Master_Receive+0x1e8>)
 8003e40:	400b      	ands	r3, r1
 8003e42:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	e000      	b.n	8003e62 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
  }
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3718      	adds	r7, #24
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	80002400 	.word	0x80002400
 8003e70:	fe00e800 	.word	0xfe00e800

08003e74 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b08a      	sub	sp, #40	@ 0x28
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	607a      	str	r2, [r7, #4]
 8003e7e:	603b      	str	r3, [r7, #0]
 8003e80:	460b      	mov	r3, r1
 8003e82:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	f040 80d6 	bne.w	8004042 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea4:	d101      	bne.n	8003eaa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	e0cc      	b.n	8004044 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_I2C_IsDeviceReady+0x44>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0c5      	b.n	8004044 <HAL_I2C_IsDeviceReady+0x1d0>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2224      	movs	r2, #36	@ 0x24
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_I2C_IsDeviceReady+0x72>
 8003ed6:	897b      	ldrh	r3, [r7, #10]
 8003ed8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003edc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ee0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ee4:	e006      	b.n	8003ef4 <HAL_I2C_IsDeviceReady+0x80>
 8003ee6:	897b      	ldrh	r3, [r7, #10]
 8003ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ef0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003efa:	f7fe f831 	bl	8001f60 <HAL_GetTick>
 8003efe:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0320 	and.w	r3, r3, #32
 8003f0a:	2b20      	cmp	r3, #32
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	f003 0310 	and.w	r3, r3, #16
 8003f20:	2b10      	cmp	r3, #16
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f2c:	e034      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d01a      	beq.n	8003f6c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fe f813 	bl	8001f60 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <HAL_I2C_IsDeviceReady+0xd8>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10f      	bne.n	8003f6c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e06b      	b.n	8004044 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b20      	cmp	r3, #32
 8003f78:	bf0c      	ite	eq
 8003f7a:	2301      	moveq	r3, #1
 8003f7c:	2300      	movne	r3, #0
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	f003 0310 	and.w	r3, r3, #16
 8003f8c:	2b10      	cmp	r3, #16
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d102      	bne.n	8003fa4 <HAL_I2C_IsDeviceReady+0x130>
 8003f9e:	7fbb      	ldrb	r3, [r7, #30]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0c4      	beq.n	8003f2e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	f003 0310 	and.w	r3, r3, #16
 8003fae:	2b10      	cmp	r3, #16
 8003fb0:	d01a      	beq.n	8003fe8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2120      	movs	r1, #32
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f869 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e03b      	b.n	8004044 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	e02d      	b.n	8004044 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f84e 	bl	8004094 <I2C_WaitOnFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e020      	b.n	8004044 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2210      	movs	r2, #16
 8004008:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2220      	movs	r2, #32
 8004010:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	3301      	adds	r3, #1
 8004016:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	429a      	cmp	r2, r3
 800401e:	f63f af56 	bhi.w	8003ece <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8004042:	2302      	movs	r3, #2
  }
}
 8004044:	4618      	mov	r0, r3
 8004046:	3720      	adds	r7, #32
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b02      	cmp	r3, #2
 8004060:	d103      	bne.n	800406a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b01      	cmp	r3, #1
 8004076:	d007      	beq.n	8004088 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f042 0201 	orr.w	r2, r2, #1
 8004086:	619a      	str	r2, [r3, #24]
  }
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	603b      	str	r3, [r7, #0]
 80040a0:	4613      	mov	r3, r2
 80040a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a4:	e03b      	b.n	800411e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	6839      	ldr	r1, [r7, #0]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	f000 f962 	bl	8004374 <I2C_IsErrorOccurred>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e041      	b.n	800413e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d02d      	beq.n	800411e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c2:	f7fd ff4d 	bl	8001f60 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d302      	bcc.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d122      	bne.n	800411e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4013      	ands	r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d113      	bne.n	800411e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f043 0220 	orr.w	r2, r3, #32
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e00f      	b.n	800413e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699a      	ldr	r2, [r3, #24]
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	429a      	cmp	r2, r3
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	79fb      	ldrb	r3, [r7, #7]
 8004138:	429a      	cmp	r2, r3
 800413a:	d0b4      	beq.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b084      	sub	sp, #16
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004152:	e033      	b.n	80041bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	68b9      	ldr	r1, [r7, #8]
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f90b 	bl	8004374 <I2C_IsErrorOccurred>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e031      	b.n	80041cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d025      	beq.n	80041bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004170:	f7fd fef6 	bl	8001f60 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	429a      	cmp	r2, r3
 800417e:	d302      	bcc.n	8004186 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d11a      	bne.n	80041bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b02      	cmp	r3, #2
 8004192:	d013      	beq.n	80041bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e007      	b.n	80041cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d1c4      	bne.n	8004154 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041e0:	e02f      	b.n	8004242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 f8c4 	bl	8004374 <I2C_IsErrorOccurred>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e02d      	b.n	8004252 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f6:	f7fd feb3 	bl	8001f60 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d302      	bcc.n	800420c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11a      	bne.n	8004242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f003 0320 	and.w	r3, r3, #32
 8004216:	2b20      	cmp	r3, #32
 8004218:	d013      	beq.n	8004242 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421e:	f043 0220 	orr.w	r2, r3, #32
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e007      	b.n	8004252 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b20      	cmp	r3, #32
 800424e:	d1c8      	bne.n	80041e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b086      	sub	sp, #24
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004268:	2300      	movs	r3, #0
 800426a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800426c:	e071      	b.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 f87e 	bl	8004374 <I2C_IsErrorOccurred>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b20      	cmp	r3, #32
 800428e:	d13b      	bne.n	8004308 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004290:	7dfb      	ldrb	r3, [r7, #23]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d138      	bne.n	8004308 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d105      	bne.n	80042b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d121      	bne.n	8004302 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2210      	movs	r2, #16
 80042c4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2204      	movs	r2, #4
 80042ca:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2220      	movs	r2, #32
 80042d2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6859      	ldr	r1, [r3, #4]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4b24      	ldr	r3, [pc, #144]	@ (8004370 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80042e0:	400b      	ands	r3, r1
 80042e2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	75fb      	strb	r3, [r7, #23]
 8004300:	e002      	b.n	8004308 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004308:	f7fd fe2a 	bl	8001f60 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d119      	bne.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d116      	bne.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b04      	cmp	r3, #4
 8004330:	d00f      	beq.n	8004352 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b04      	cmp	r3, #4
 800435e:	d002      	beq.n	8004366 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004360:	7dfb      	ldrb	r3, [r7, #23]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d083      	beq.n	800426e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004366:	7dfb      	ldrb	r3, [r7, #23]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	fe00e800 	.word	0xfe00e800

08004374 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b08a      	sub	sp, #40	@ 0x28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	2b00      	cmp	r3, #0
 800439e:	d068      	beq.n	8004472 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2210      	movs	r2, #16
 80043a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043a8:	e049      	b.n	800443e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b0:	d045      	beq.n	800443e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	f7fd fdd5 	bl	8001f60 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <I2C_IsErrorOccurred+0x54>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13a      	bne.n	800443e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ea:	d121      	bne.n	8004430 <I2C_IsErrorOccurred+0xbc>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043f2:	d01d      	beq.n	8004430 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043f4:	7cfb      	ldrb	r3, [r7, #19]
 80043f6:	2b20      	cmp	r3, #32
 80043f8:	d01a      	beq.n	8004430 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004408:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800440a:	f7fd fda9 	bl	8001f60 <HAL_GetTick>
 800440e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004410:	e00e      	b.n	8004430 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004412:	f7fd fda5 	bl	8001f60 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b19      	cmp	r3, #25
 800441e:	d907      	bls.n	8004430 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	f043 0320 	orr.w	r3, r3, #32
 8004426:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800442e:	e006      	b.n	800443e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b20      	cmp	r3, #32
 800443c:	d1e9      	bne.n	8004412 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d003      	beq.n	8004454 <I2C_IsErrorOccurred+0xe0>
 800444c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004450:	2b00      	cmp	r3, #0
 8004452:	d0aa      	beq.n	80043aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004458:	2b00      	cmp	r3, #0
 800445a:	d103      	bne.n	8004464 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2220      	movs	r2, #32
 8004462:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004494:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00b      	beq.n	80044be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f043 0302 	orr.w	r3, r3, #2
 80044ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80044e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01c      	beq.n	8004522 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f7ff fdaf 	bl	800404c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <I2C_IsErrorOccurred+0x1bc>)
 80044fa:	400b      	ands	r3, r1
 80044fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	431a      	orrs	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004526:	4618      	mov	r0, r3
 8004528:	3728      	adds	r7, #40	@ 0x28
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	fe00e800 	.word	0xfe00e800

08004534 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607b      	str	r3, [r7, #4]
 800453e:	460b      	mov	r3, r1
 8004540:	817b      	strh	r3, [r7, #10]
 8004542:	4613      	mov	r3, r2
 8004544:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004546:	897b      	ldrh	r3, [r7, #10]
 8004548:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800454c:	7a7b      	ldrb	r3, [r7, #9]
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004554:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	4313      	orrs	r3, r2
 800455e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004562:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	0d5b      	lsrs	r3, r3, #21
 800456e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <I2C_TransferConfig+0x60>)
 8004574:	430b      	orrs	r3, r1
 8004576:	43db      	mvns	r3, r3
 8004578:	ea02 0103 	and.w	r1, r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004586:	bf00      	nop
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	03ff63ff 	.word	0x03ff63ff

08004598 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d138      	bne.n	8004620 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d101      	bne.n	80045bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045b8:	2302      	movs	r3, #2
 80045ba:	e032      	b.n	8004622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	@ 0x24
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0201 	bic.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	430a      	orrs	r2, r1
 80045fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b20      	cmp	r3, #32
 8004642:	d139      	bne.n	80046b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800464e:	2302      	movs	r3, #2
 8004650:	e033      	b.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2224      	movs	r2, #36	@ 0x24
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 0201 	bic.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004680:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0201 	orr.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
 80046b6:	e000      	b.n	80046ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
  }
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b084      	sub	sp, #16
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0c0      	b.n	800485a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f008 fbb3 	bl	800ce58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2203      	movs	r2, #3
 80046f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f004 f9fc 	bl	8008afc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]
 8004708:	e03e      	b.n	8004788 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	4413      	add	r3, r2
 8004714:	00db      	lsls	r3, r3, #3
 8004716:	440b      	add	r3, r1
 8004718:	3311      	adds	r3, #17
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	440b      	add	r3, r1
 800472c:	3310      	adds	r3, #16
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	440b      	add	r3, r1
 8004740:	3313      	adds	r3, #19
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004746:	7bfa      	ldrb	r2, [r7, #15]
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	440b      	add	r3, r1
 8004754:	3320      	adds	r3, #32
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	440b      	add	r3, r1
 8004768:	3324      	adds	r3, #36	@ 0x24
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	440b      	add	r3, r1
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	3301      	adds	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	791b      	ldrb	r3, [r3, #4]
 800478c:	7bfa      	ldrb	r2, [r7, #15]
 800478e:	429a      	cmp	r2, r3
 8004790:	d3bb      	bcc.n	800470a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e044      	b.n	8004822 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	440b      	add	r3, r1
 80047a6:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047ae:	7bfa      	ldrb	r2, [r7, #15]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	00db      	lsls	r3, r3, #3
 80047ba:	440b      	add	r3, r1
 80047bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047c4:	7bfa      	ldrb	r2, [r7, #15]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	440b      	add	r3, r1
 80047d2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4413      	add	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	440b      	add	r3, r1
 80047e8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047f0:	7bfa      	ldrb	r2, [r7, #15]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	440b      	add	r3, r1
 80047fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	440b      	add	r3, r1
 8004814:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	3301      	adds	r3, #1
 8004820:	73fb      	strb	r3, [r7, #15]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	791b      	ldrb	r3, [r3, #4]
 8004826:	7bfa      	ldrb	r2, [r7, #15]
 8004828:	429a      	cmp	r2, r3
 800482a:	d3b5      	bcc.n	8004798 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3304      	adds	r3, #4
 8004834:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004838:	f004 f97b 	bl	8008b32 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	7a9b      	ldrb	r3, [r3, #10]
 800484e:	2b01      	cmp	r3, #1
 8004850:	d102      	bne.n	8004858 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f001 fc42 	bl	80060dc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_PCD_Start+0x16>
 8004874:	2302      	movs	r3, #2
 8004876:	e012      	b.n	800489e <HAL_PCD_Start+0x3c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f004 f922 	bl	8008ace <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f006 fbe4 	bl	800b05c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048a6:	b580      	push	{r7, lr}
 80048a8:	b084      	sub	sp, #16
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f006 fbe9 	bl	800b08a <USB_ReadInterrupts>
 80048b8:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fb06 	bl	8004ed6 <PCD_EP_ISR_Handler>

    return;
 80048ca:	e110      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d013      	beq.n	80048fe <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e8:	b292      	uxth	r2, r2
 80048ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f008 fb43 	bl	800cf7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80048f4:	2100      	movs	r1, #0
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f8fc 	bl	8004af4 <HAL_PCD_SetAddress>

    return;
 80048fc:	e0f7      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004910:	b29a      	uxth	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800491a:	b292      	uxth	r2, r2
 800491c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004920:	e0e5      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00c      	beq.n	8004946 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004934:	b29a      	uxth	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800493e:	b292      	uxth	r2, r2
 8004940:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004944:	e0d3      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d034      	beq.n	80049ba <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0204 	bic.w	r2, r2, #4
 8004962:	b292      	uxth	r2, r2
 8004964:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004970:	b29a      	uxth	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0208 	bic.w	r2, r2, #8
 800497a:	b292      	uxth	r2, r2
 800497c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004986:	2b01      	cmp	r3, #1
 8004988:	d107      	bne.n	800499a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004992:	2100      	movs	r1, #0
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f008 fce3 	bl	800d360 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f008 fb26 	bl	800cfec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049b2:	b292      	uxth	r2, r2
 80049b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80049b8:	e099      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d027      	beq.n	8004a14 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0208 	orr.w	r2, r2, #8
 80049d6:	b292      	uxth	r2, r2
 80049d8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ee:	b292      	uxth	r2, r2
 80049f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f042 0204 	orr.w	r2, r2, #4
 8004a06:	b292      	uxth	r2, r2
 8004a08:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f008 fad3 	bl	800cfb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a12:	e06c      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d040      	beq.n	8004aa0 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a30:	b292      	uxth	r2, r2
 8004a32:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d12b      	bne.n	8004a98 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f042 0204 	orr.w	r2, r2, #4
 8004a52:	b292      	uxth	r2, r2
 8004a54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0208 	orr.w	r2, r2, #8
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	089b      	lsrs	r3, r3, #2
 8004a84:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a8e:	2101      	movs	r1, #1
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f008 fc65 	bl	800d360 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004a96:	e02a      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f008 fa8d 	bl	800cfb8 <HAL_PCD_SuspendCallback>
    return;
 8004a9e:	e026      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00f      	beq.n	8004aca <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004abc:	b292      	uxth	r2, r2
 8004abe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f008 fa4b 	bl	800cf5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ac8:	e011      	b.n	8004aee <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00c      	beq.n	8004aee <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae6:	b292      	uxth	r2, r2
 8004ae8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004aec:	bf00      	nop
  }
}
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_PCD_SetAddress+0x1a>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e012      	b.n	8004b34 <HAL_PCD_SetAddress+0x40>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	4611      	mov	r1, r2
 8004b24:	4618      	mov	r0, r3
 8004b26:	f006 fa85 	bl	800b034 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	70fb      	strb	r3, [r7, #3]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	803b      	strh	r3, [r7, #0]
 8004b52:	4613      	mov	r3, r2
 8004b54:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da0e      	bge.n	8004b80 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	f003 0207 	and.w	r2, r3, #7
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	3310      	adds	r3, #16
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	705a      	strb	r2, [r3, #1]
 8004b7e:	e00e      	b.n	8004b9e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 0207 	and.w	r2, r3, #7
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b9e:	78fb      	ldrb	r3, [r7, #3]
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004baa:	883b      	ldrh	r3, [r7, #0]
 8004bac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	78ba      	ldrb	r2, [r7, #2]
 8004bb8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bba:	78bb      	ldrb	r3, [r7, #2]
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d102      	bne.n	8004bc6 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_PCD_EP_Open+0x98>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e00e      	b.n	8004bf2 <HAL_PCD_EP_Open+0xb6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68f9      	ldr	r1, [r7, #12]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f003 ffc4 	bl	8008b70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004bf0:	7afb      	ldrb	r3, [r7, #11]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b084      	sub	sp, #16
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
 8004c02:	460b      	mov	r3, r1
 8004c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	da0e      	bge.n	8004c2c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c0e:	78fb      	ldrb	r3, [r7, #3]
 8004c10:	f003 0207 	and.w	r2, r3, #7
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4413      	add	r3, r2
 8004c22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	705a      	strb	r2, [r3, #1]
 8004c2a:	e00e      	b.n	8004c4a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c2c:	78fb      	ldrb	r3, [r7, #3]
 8004c2e:	f003 0207 	and.w	r2, r3, #7
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_PCD_EP_Close+0x6a>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e00e      	b.n	8004c82 <HAL_PCD_EP_Close+0x88>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68f9      	ldr	r1, [r7, #12]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f004 fb40 	bl	80092f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	60f8      	str	r0, [r7, #12]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
 8004c96:	460b      	mov	r3, r1
 8004c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c9a:	7afb      	ldrb	r3, [r7, #11]
 8004c9c:	f003 0207 	and.w	r2, r3, #7
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cca:	7afb      	ldrb	r3, [r7, #11]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6979      	ldr	r1, [r7, #20]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f004 fcf8 	bl	80096d2 <USB_EPStartXfer>

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	f003 0207 	and.w	r2, r3, #7
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	440b      	add	r3, r1
 8004d0a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004d0e:	681b      	ldr	r3, [r3, #0]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	607a      	str	r2, [r7, #4]
 8004d26:	603b      	str	r3, [r7, #0]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
 8004d2e:	f003 0207 	and.w	r2, r3, #7
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	3310      	adds	r3, #16
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2201      	movs	r2, #1
 8004d66:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d68:	7afb      	ldrb	r3, [r7, #11]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6979      	ldr	r1, [r7, #20]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f004 fca9 	bl	80096d2 <USB_EPStartXfer>

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
 8004d92:	460b      	mov	r3, r1
 8004d94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	7912      	ldrb	r2, [r2, #4]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d901      	bls.n	8004da8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e03e      	b.n	8004e26 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	da0e      	bge.n	8004dce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	f003 0207 	and.w	r2, r3, #7
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	705a      	strb	r2, [r3, #1]
 8004dcc:	e00c      	b.n	8004de8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	00db      	lsls	r3, r3, #3
 8004dd8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4413      	add	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dee:	78fb      	ldrb	r3, [r7, #3]
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d101      	bne.n	8004e08 <HAL_PCD_EP_SetStall+0x7e>
 8004e04:	2302      	movs	r3, #2
 8004e06:	e00e      	b.n	8004e26 <HAL_PCD_EP_SetStall+0x9c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68f9      	ldr	r1, [r7, #12]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f006 f80d 	bl	800ae36 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	f003 030f 	and.w	r3, r3, #15
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	7912      	ldrb	r2, [r2, #4]
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d901      	bls.n	8004e4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e040      	b.n	8004ece <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da0e      	bge.n	8004e72 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e54:	78fb      	ldrb	r3, [r7, #3]
 8004e56:	f003 0207 	and.w	r2, r3, #7
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	3310      	adds	r3, #16
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	705a      	strb	r2, [r3, #1]
 8004e70:	e00e      	b.n	8004e90 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e72:	78fb      	ldrb	r3, [r7, #3]
 8004e74:	f003 0207 	and.w	r2, r3, #7
 8004e78:	4613      	mov	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	4413      	add	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e96:	78fb      	ldrb	r3, [r7, #3]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_PCD_EP_ClrStall+0x82>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e00e      	b.n	8004ece <HAL_PCD_EP_ClrStall+0xa0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68f9      	ldr	r1, [r7, #12]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f006 f80a 	bl	800aed8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b096      	sub	sp, #88	@ 0x58
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ede:	e3ad      	b.n	800563c <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ee8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004eec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	f003 030f 	and.w	r3, r3, #15
 8004ef6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004efa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f040 816f 	bne.w	80051e2 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d14c      	bne.n	8004faa <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f20:	81fb      	strh	r3, [r7, #14]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	89fb      	ldrh	r3, [r7, #14]
 8004f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3310      	adds	r3, #16
 8004f38:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	4413      	add	r3, r2
 8004f54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	441a      	add	r2, r3
 8004f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f70:	2100      	movs	r1, #0
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f007 ffd9 	bl	800cf2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	7b1b      	ldrb	r3, [r3, #12]
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 835c 	beq.w	800563c <PCD_EP_ISR_Handler+0x766>
 8004f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f040 8357 	bne.w	800563c <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	7b1b      	ldrb	r3, [r3, #12]
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	731a      	strb	r2, [r3, #12]
 8004fa8:	e348      	b.n	800563c <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fb0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004fbc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d032      	beq.n	800502e <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	00db      	lsls	r3, r3, #3
 8004fda:	4413      	add	r3, r2
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6812      	ldr	r2, [r2, #0]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fee:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6818      	ldr	r0, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005000:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005002:	b29b      	uxth	r3, r3
 8005004:	f006 f893 	bl	800b12e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	b29a      	uxth	r2, r3
 8005010:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005014:	4013      	ands	r3, r2
 8005016:	823b      	strh	r3, [r7, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	8a3a      	ldrh	r2, [r7, #16]
 800501e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005022:	b292      	uxth	r2, r2
 8005024:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f007 ff52 	bl	800ced0 <HAL_PCD_SetupStageCallback>
 800502c:	e306      	b.n	800563c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800502e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8005032:	2b00      	cmp	r3, #0
 8005034:	f280 8302 	bge.w	800563c <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	881b      	ldrh	r3, [r3, #0]
 800503e:	b29a      	uxth	r2, r3
 8005040:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005044:	4013      	ands	r3, r2
 8005046:	83fb      	strh	r3, [r7, #30]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	8bfa      	ldrh	r2, [r7, #30]
 800504e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005052:	b292      	uxth	r2, r2
 8005054:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505e:	b29b      	uxth	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6812      	ldr	r2, [r2, #0]
 800506e:	4413      	add	r3, r2
 8005070:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800507a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800507e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d019      	beq.n	80050ba <PCD_EP_ISR_Handler+0x1e4>
 8005086:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d015      	beq.n	80050ba <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005094:	6959      	ldr	r1, [r3, #20]
 8005096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005098:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800509a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800509e:	b29b      	uxth	r3, r3
 80050a0:	f006 f845 	bl	800b12e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80050a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	441a      	add	r2, r3
 80050ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050b2:	2100      	movs	r1, #0
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f007 ff1d 	bl	800cef4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80050c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80050c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 82b5 	bne.w	800563c <PCD_EP_ISR_Handler+0x766>
 80050d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80050d6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80050da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050de:	f000 82ad 	beq.w	800563c <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	461a      	mov	r2, r3
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	4413      	add	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29b      	uxth	r3, r3
 8005108:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800510c:	b29a      	uxth	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	801a      	strh	r2, [r3, #0]
 8005112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <PCD_EP_ISR_Handler+0x25a>
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005128:	b29a      	uxth	r2, r3
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	801a      	strh	r2, [r3, #0]
 800512e:	e039      	b.n	80051a4 <PCD_EP_ISR_Handler+0x2ce>
 8005130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b3e      	cmp	r3, #62	@ 0x3e
 8005136:	d818      	bhi.n	800516a <PCD_EP_ISR_Handler+0x294>
 8005138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	085b      	lsrs	r3, r3, #1
 800513e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d002      	beq.n	8005152 <PCD_EP_ISR_Handler+0x27c>
 800514c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514e:	3301      	adds	r3, #1
 8005150:	647b      	str	r3, [r7, #68]	@ 0x44
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29a      	uxth	r2, r3
 8005158:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800515a:	b29b      	uxth	r3, r3
 800515c:	029b      	lsls	r3, r3, #10
 800515e:	b29b      	uxth	r3, r3
 8005160:	4313      	orrs	r3, r2
 8005162:	b29a      	uxth	r2, r3
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	801a      	strh	r2, [r3, #0]
 8005168:	e01c      	b.n	80051a4 <PCD_EP_ISR_Handler+0x2ce>
 800516a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	647b      	str	r3, [r7, #68]	@ 0x44
 8005172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 031f 	and.w	r3, r3, #31
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <PCD_EP_ISR_Handler+0x2ae>
 800517e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005180:	3b01      	subs	r3, #1
 8005182:	647b      	str	r3, [r7, #68]	@ 0x44
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29a      	uxth	r2, r3
 800518a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800518c:	b29b      	uxth	r3, r3
 800518e:	029b      	lsls	r3, r3, #10
 8005190:	b29b      	uxth	r3, r3
 8005192:	4313      	orrs	r3, r2
 8005194:	b29b      	uxth	r3, r3
 8005196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519e:	b29a      	uxth	r2, r3
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	881b      	ldrh	r3, [r3, #0]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b4:	827b      	strh	r3, [r7, #18]
 80051b6:	8a7b      	ldrh	r3, [r7, #18]
 80051b8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80051bc:	827b      	strh	r3, [r7, #18]
 80051be:	8a7b      	ldrh	r3, [r7, #18]
 80051c0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051c4:	827b      	strh	r3, [r7, #18]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	8a7b      	ldrh	r3, [r7, #18]
 80051cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051dc:	b29b      	uxth	r3, r3
 80051de:	8013      	strh	r3, [r2, #0]
 80051e0:	e22c      	b.n	800563c <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f280 80f6 	bge.w	80053ec <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29a      	uxth	r2, r3
 8005212:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005216:	4013      	ands	r3, r2
 8005218:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	461a      	mov	r2, r3
 8005222:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800522e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005232:	b292      	uxth	r2, r2
 8005234:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005236:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4413      	add	r3, r2
 800524a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800524c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524e:	7b1b      	ldrb	r3, [r3, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d123      	bne.n	800529c <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800525c:	b29b      	uxth	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	00db      	lsls	r3, r3, #3
 8005266:	4413      	add	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	4413      	add	r3, r2
 800526e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005278:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800527c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 808e 	beq.w	80053a2 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800528c:	6959      	ldr	r1, [r3, #20]
 800528e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005290:	88da      	ldrh	r2, [r3, #6]
 8005292:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005296:	f005 ff4a 	bl	800b12e <USB_ReadPMA>
 800529a:	e082      	b.n	80053a2 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800529c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800529e:	78db      	ldrb	r3, [r3, #3]
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d10a      	bne.n	80052ba <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80052a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80052a8:	461a      	mov	r2, r3
 80052aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f9d3 	bl	8005658 <HAL_PCD_EP_DB_Receive>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80052b8:	e073      	b.n	80053a2 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	4413      	add	r3, r2
 800530c:	881b      	ldrh	r3, [r3, #0]
 800530e:	b29b      	uxth	r3, r3
 8005310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d022      	beq.n	800535e <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	4413      	add	r3, r2
 8005332:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005340:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005344:	2b00      	cmp	r3, #0
 8005346:	d02c      	beq.n	80053a2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6818      	ldr	r0, [r3, #0]
 800534c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534e:	6959      	ldr	r1, [r3, #20]
 8005350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005352:	891a      	ldrh	r2, [r3, #8]
 8005354:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005358:	f005 fee9 	bl	800b12e <USB_ReadPMA>
 800535c:	e021      	b.n	80053a2 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005366:	b29b      	uxth	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	4413      	add	r3, r2
 8005378:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800537c:	881b      	ldrh	r3, [r3, #0]
 800537e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005382:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005386:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005394:	6959      	ldr	r1, [r3, #20]
 8005396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005398:	895a      	ldrh	r2, [r3, #10]
 800539a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800539e:	f005 fec6 	bl	800b12e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80053a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053aa:	441a      	add	r2, r3
 80053ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ae:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80053b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053b8:	441a      	add	r2, r3
 80053ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053bc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80053be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <PCD_EP_ISR_Handler+0x4fc>
 80053c6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80053ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d206      	bcs.n	80053e0 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80053d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f007 fd8b 	bl	800cef4 <HAL_PCD_DataOutStageCallback>
 80053de:	e005      	b.n	80053ec <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053e6:	4618      	mov	r0, r3
 80053e8:	f004 f973 	bl	80096d2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80053ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80053f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8121 	beq.w	800563c <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80053fa:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80053fe:	4613      	mov	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4413      	add	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	3310      	adds	r3, #16
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4413      	add	r3, r2
 800540c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005424:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005428:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	461a      	mov	r2, r3
 8005432:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800543e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005446:	b29b      	uxth	r3, r3
 8005448:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800544a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544c:	78db      	ldrb	r3, [r3, #3]
 800544e:	2b01      	cmp	r3, #1
 8005450:	f040 80a2 	bne.w	8005598 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005456:	2200      	movs	r2, #0
 8005458:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800545a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800545c:	7b1b      	ldrb	r3, [r3, #12]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8093 	beq.w	800558a <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005464:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d046      	beq.n	80054fe <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005472:	785b      	ldrb	r3, [r3, #1]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d126      	bne.n	80054c6 <PCD_EP_ISR_Handler+0x5f0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	627b      	str	r3, [r7, #36]	@ 0x24
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005486:	b29b      	uxth	r3, r3
 8005488:	461a      	mov	r2, r3
 800548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548c:	4413      	add	r3, r2
 800548e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	00da      	lsls	r2, r3, #3
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	4413      	add	r3, r2
 800549a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800549e:	623b      	str	r3, [r7, #32]
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	881b      	ldrh	r3, [r3, #0]
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	801a      	strh	r2, [r3, #0]
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e061      	b.n	800558a <PCD_EP_ISR_Handler+0x6b4>
 80054c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d15d      	bne.n	800558a <PCD_EP_ISR_Handler+0x6b4>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054dc:	b29b      	uxth	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	4413      	add	r3, r2
 80054e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	00da      	lsls	r2, r3, #3
 80054ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ee:	4413      	add	r3, r2
 80054f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	2200      	movs	r2, #0
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e045      	b.n	800558a <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d126      	bne.n	800555a <PCD_EP_ISR_Handler+0x684>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	637b      	str	r3, [r7, #52]	@ 0x34
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005520:	4413      	add	r3, r2
 8005522:	637b      	str	r3, [r7, #52]	@ 0x34
 8005524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	00da      	lsls	r2, r3, #3
 800552a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552c:	4413      	add	r3, r2
 800552e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	881b      	ldrh	r3, [r3, #0]
 8005538:	b29b      	uxth	r3, r3
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	b29a      	uxth	r2, r3
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	801a      	strh	r2, [r3, #0]
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	881b      	ldrh	r3, [r3, #0]
 8005548:	b29b      	uxth	r3, r3
 800554a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005552:	b29a      	uxth	r2, r3
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	801a      	strh	r2, [r3, #0]
 8005558:	e017      	b.n	800558a <PCD_EP_ISR_Handler+0x6b4>
 800555a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555c:	785b      	ldrb	r3, [r3, #1]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d113      	bne.n	800558a <PCD_EP_ISR_Handler+0x6b4>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800556a:	b29b      	uxth	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005570:	4413      	add	r3, r2
 8005572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	00da      	lsls	r2, r3, #3
 800557a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557c:	4413      	add	r3, r2
 800557e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005582:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	2200      	movs	r2, #0
 8005588:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800558a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f007 fcca 	bl	800cf2a <HAL_PCD_DataInStageCallback>
 8005596:	e051      	b.n	800563c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005598:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800559c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d144      	bne.n	800562e <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	461a      	mov	r2, r3
 80055b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	4413      	add	r3, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6812      	ldr	r2, [r2, #0]
 80055bc:	4413      	add	r3, r2
 80055be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055c2:	881b      	ldrh	r3, [r3, #0]
 80055c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80055cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d907      	bls.n	80055e8 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80055d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055e0:	1ad2      	subs	r2, r2, r3
 80055e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e4:	619a      	str	r2, [r3, #24]
 80055e6:	e002      	b.n	80055ee <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80055e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ea:	2200      	movs	r2, #0
 80055ec:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f007 fc94 	bl	800cf2a <HAL_PCD_DataInStageCallback>
 8005602:	e01b      	b.n	800563c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800560c:	441a      	add	r2, r3
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005614:	69da      	ldr	r2, [r3, #28]
 8005616:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800561a:	441a      	add	r2, r3
 800561c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005626:	4618      	mov	r0, r3
 8005628:	f004 f853 	bl	80096d2 <USB_EPStartXfer>
 800562c:	e006      	b.n	800563c <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800562e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005632:	461a      	mov	r2, r3
 8005634:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f917 	bl	800586a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005644:	b29b      	uxth	r3, r3
 8005646:	b21b      	sxth	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	f6ff ac49 	blt.w	8004ee0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3758      	adds	r7, #88	@ 0x58
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d07c      	beq.n	800576a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005678:	b29b      	uxth	r3, r3
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4413      	add	r3, r2
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	6812      	ldr	r2, [r2, #0]
 8005688:	4413      	add	r3, r2
 800568a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005694:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	8b7b      	ldrh	r3, [r7, #26]
 800569c:	429a      	cmp	r2, r3
 800569e:	d306      	bcc.n	80056ae <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	8b7b      	ldrh	r3, [r7, #26]
 80056a6:	1ad2      	subs	r2, r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	619a      	str	r2, [r3, #24]
 80056ac:	e002      	b.n	80056b4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d123      	bne.n	8005704 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	881b      	ldrh	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d6:	833b      	strh	r3, [r7, #24]
 80056d8:	8b3b      	ldrh	r3, [r7, #24]
 80056da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056de:	833b      	strh	r3, [r7, #24]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	461a      	mov	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	441a      	add	r2, r3
 80056ee:	8b3b      	ldrh	r3, [r7, #24]
 80056f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005700:	b29b      	uxth	r3, r3
 8005702:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005704:	88fb      	ldrh	r3, [r7, #6]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01f      	beq.n	800574e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	881b      	ldrh	r3, [r3, #0]
 800571e:	b29b      	uxth	r3, r3
 8005720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005728:	82fb      	strh	r3, [r7, #22]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	461a      	mov	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	441a      	add	r2, r3
 8005738:	8afb      	ldrh	r3, [r7, #22]
 800573a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005746:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800574a:	b29b      	uxth	r3, r3
 800574c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800574e:	8b7b      	ldrh	r3, [r7, #26]
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8085 	beq.w	8005860 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6959      	ldr	r1, [r3, #20]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	891a      	ldrh	r2, [r3, #8]
 8005762:	8b7b      	ldrh	r3, [r7, #26]
 8005764:	f005 fce3 	bl	800b12e <USB_ReadPMA>
 8005768:	e07a      	b.n	8005860 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005772:	b29b      	uxth	r3, r3
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	4413      	add	r3, r2
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	6812      	ldr	r2, [r2, #0]
 8005782:	4413      	add	r3, r2
 8005784:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005788:	881b      	ldrh	r3, [r3, #0]
 800578a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	699a      	ldr	r2, [r3, #24]
 8005794:	8b7b      	ldrh	r3, [r7, #26]
 8005796:	429a      	cmp	r2, r3
 8005798:	d306      	bcc.n	80057a8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	699a      	ldr	r2, [r3, #24]
 800579e:	8b7b      	ldrh	r3, [r7, #26]
 80057a0:	1ad2      	subs	r2, r2, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	619a      	str	r2, [r3, #24]
 80057a6:	e002      	b.n	80057ae <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d123      	bne.n	80057fe <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057d0:	83fb      	strh	r3, [r7, #30]
 80057d2:	8bfb      	ldrh	r3, [r7, #30]
 80057d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057d8:	83fb      	strh	r3, [r7, #30]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	441a      	add	r2, r3
 80057e8:	8bfb      	ldrh	r3, [r7, #30]
 80057ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80057fe:	88fb      	ldrh	r3, [r7, #6]
 8005800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11f      	bne.n	8005848 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005822:	83bb      	strh	r3, [r7, #28]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	461a      	mov	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	441a      	add	r2, r3
 8005832:	8bbb      	ldrh	r3, [r7, #28]
 8005834:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005838:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800583c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005840:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005844:	b29b      	uxth	r3, r3
 8005846:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005848:	8b7b      	ldrh	r3, [r7, #26]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d008      	beq.n	8005860 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6959      	ldr	r1, [r3, #20]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	895a      	ldrh	r2, [r3, #10]
 800585a:	8b7b      	ldrh	r3, [r7, #26]
 800585c:	f005 fc67 	bl	800b12e <USB_ReadPMA>
    }
  }

  return count;
 8005860:	8b7b      	ldrh	r3, [r7, #26]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b0a4      	sub	sp, #144	@ 0x90
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	4613      	mov	r3, r2
 8005876:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005878:	88fb      	ldrh	r3, [r7, #6]
 800587a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 81db 	beq.w	8005c3a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800588c:	b29b      	uxth	r3, r3
 800588e:	461a      	mov	r2, r3
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	4413      	add	r3, r2
 800589e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a8:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d907      	bls.n	80058c8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	699a      	ldr	r2, [r3, #24]
 80058bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058c0:	1ad2      	subs	r2, r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	619a      	str	r2, [r3, #24]
 80058c6:	e002      	b.n	80058ce <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 80b9 	bne.w	8005a4a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	785b      	ldrb	r3, [r3, #1]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d126      	bne.n	800592e <HAL_PCD_EP_DB_Transmit+0xc4>
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f4:	4413      	add	r3, r2
 80058f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	00da      	lsls	r2, r3, #3
 80058fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005900:	4413      	add	r3, r2
 8005902:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005906:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005912:	b29a      	uxth	r2, r3
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005926:	b29a      	uxth	r2, r3
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	801a      	strh	r2, [r3, #0]
 800592c:	e01a      	b.n	8005964 <HAL_PCD_EP_DB_Transmit+0xfa>
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	785b      	ldrb	r3, [r3, #1]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d116      	bne.n	8005964 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	637b      	str	r3, [r7, #52]	@ 0x34
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005944:	b29b      	uxth	r3, r3
 8005946:	461a      	mov	r2, r3
 8005948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800594a:	4413      	add	r3, r2
 800594c:	637b      	str	r3, [r7, #52]	@ 0x34
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	00da      	lsls	r2, r3, #3
 8005954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005956:	4413      	add	r3, r2
 8005958:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	2200      	movs	r2, #0
 8005962:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	785b      	ldrb	r3, [r3, #1]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d126      	bne.n	80059c0 <HAL_PCD_EP_DB_Transmit+0x156>
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005980:	b29b      	uxth	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	4413      	add	r3, r2
 8005988:	61fb      	str	r3, [r7, #28]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	00da      	lsls	r2, r3, #3
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	4413      	add	r3, r2
 8005994:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	801a      	strh	r2, [r3, #0]
 80059be:	e017      	b.n	80059f0 <HAL_PCD_EP_DB_Transmit+0x186>
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d113      	bne.n	80059f0 <HAL_PCD_EP_DB_Transmit+0x186>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	4413      	add	r3, r2
 80059d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	00da      	lsls	r2, r3, #3
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	4413      	add	r3, r2
 80059e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	2200      	movs	r2, #0
 80059ee:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	4619      	mov	r1, r3
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f007 fa97 	bl	800cf2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059fc:	88fb      	ldrh	r3, [r7, #6]
 80059fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 82fa 	beq.w	8005ffc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a22:	82fb      	strh	r3, [r7, #22]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	441a      	add	r2, r3
 8005a32:	8afb      	ldrh	r3, [r7, #22]
 8005a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	8013      	strh	r3, [r2, #0]
 8005a48:	e2d8      	b.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d021      	beq.n	8005a98 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	461a      	mov	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	441a      	add	r2, r3
 8005a80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	f040 82ac 	bne.w	8005ffc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005aac:	441a      	add	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	69da      	ldr	r2, [r3, #28]
 8005ab6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005aba:	441a      	add	r2, r3
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	6a1a      	ldr	r2, [r3, #32]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d30b      	bcc.n	8005ae4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6a1a      	ldr	r2, [r3, #32]
 8005ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005adc:	1ad2      	subs	r2, r2, r3
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	621a      	str	r2, [r3, #32]
 8005ae2:	e017      	b.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005aec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005af0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005afc:	e00a      	b.n	8005b14 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2200      	movs	r2, #0
 8005b12:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d165      	bne.n	8005be8 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b30:	4413      	add	r3, r2
 8005b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	00da      	lsls	r2, r3, #3
 8005b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <HAL_PCD_EP_DB_Transmit+0x308>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e057      	b.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b76:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b78:	d818      	bhi.n	8005bac <HAL_PCD_EP_DB_Transmit+0x342>
 8005b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_PCD_EP_DB_Transmit+0x32a>
 8005b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b90:	3301      	adds	r3, #1
 8005b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	029b      	lsls	r3, r3, #10
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	b29a      	uxth	r2, r3
 8005ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba8:	801a      	strh	r2, [r3, #0]
 8005baa:	e03a      	b.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bb0:	095b      	lsrs	r3, r3, #5
 8005bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bb8:	f003 031f 	and.w	r3, r3, #31
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d102      	bne.n	8005bc6 <HAL_PCD_EP_DB_Transmit+0x35c>
 8005bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	029b      	lsls	r3, r3, #10
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e01c      	b.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d118      	bne.n	8005c22 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c04:	4413      	add	r3, r2
 8005c06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	00da      	lsls	r2, r3, #3
 8005c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c10:	4413      	add	r3, r2
 8005c12:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c20:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6818      	ldr	r0, [r3, #0]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	6959      	ldr	r1, [r3, #20]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	891a      	ldrh	r2, [r3, #8]
 8005c2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	f005 fa39 	bl	800b0aa <USB_WritePMA>
 8005c38:	e1e0      	b.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	461a      	mov	r2, r3
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	6812      	ldr	r2, [r2, #0]
 8005c52:	4413      	add	r3, r2
 8005c54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	699a      	ldr	r2, [r3, #24]
 8005c66:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d307      	bcc.n	8005c7e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	619a      	str	r2, [r3, #24]
 8005c7c:	e002      	b.n	8005c84 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f040 80c0 	bne.w	8005e0e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	785b      	ldrb	r3, [r3, #1]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d126      	bne.n	8005ce4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005caa:	4413      	add	r3, r2
 8005cac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	00da      	lsls	r2, r3, #3
 8005cb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ccc:	801a      	strh	r2, [r3, #0]
 8005cce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	e01a      	b.n	8005d1a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	785b      	ldrb	r3, [r3, #1]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d116      	bne.n	8005d1a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d00:	4413      	add	r3, r2
 8005d02:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	00da      	lsls	r2, r3, #3
 8005d0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d16:	2200      	movs	r2, #0
 8005d18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d12b      	bne.n	8005d80 <HAL_PCD_EP_DB_Transmit+0x516>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d3c:	4413      	add	r3, r2
 8005d3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	00da      	lsls	r2, r3, #3
 8005d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d64:	801a      	strh	r2, [r3, #0]
 8005d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d7c:	801a      	strh	r2, [r3, #0]
 8005d7e:	e017      	b.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	785b      	ldrb	r3, [r3, #1]
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d113      	bne.n	8005db0 <HAL_PCD_EP_DB_Transmit+0x546>
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d96:	4413      	add	r3, r2
 8005d98:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	00da      	lsls	r2, r3, #3
 8005da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005daa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dac:	2200      	movs	r2, #0
 8005dae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f007 f8b7 	bl	800cf2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005dbc:	88fb      	ldrh	r3, [r7, #6]
 8005dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 811a 	bne.w	8005ffc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	461a      	mov	r2, r3
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	441a      	add	r2, r3
 8005df4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	8013      	strh	r3, [r2, #0]
 8005e0c:	e0f6      	b.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d121      	bne.n	8005e5c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e32:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	f040 80ca 	bne.w	8005ffc <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	695a      	ldr	r2, [r3, #20]
 8005e6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005e70:	441a      	add	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	69da      	ldr	r2, [r3, #28]
 8005e7a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005e7e:	441a      	add	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6a1a      	ldr	r2, [r3, #32]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d30b      	bcc.n	8005ea8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	6a1a      	ldr	r2, [r3, #32]
 8005e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ea0:	1ad2      	subs	r2, r2, r3
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	621a      	str	r2, [r3, #32]
 8005ea6:	e017      	b.n	8005ed8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d108      	bne.n	8005ec2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005eb0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005eb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005ec0:	e00a      	b.n	8005ed8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d165      	bne.n	8005fb2 <HAL_PCD_EP_DB_Transmit+0x748>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005efa:	4413      	add	r3, r2
 8005efc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	00da      	lsls	r2, r3, #3
 8005f04:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10a      	bne.n	8005f3c <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005f26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	e054      	b.n	8005fe6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f40:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f42:	d818      	bhi.n	8005f76 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005f44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005f58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	029b      	lsls	r3, r3, #10
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	e037      	b.n	8005fe6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d102      	bne.n	8005f90 <HAL_PCD_EP_DB_Transmit+0x726>
 8005f8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	029b      	lsls	r3, r3, #10
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e019      	b.n	8005fe6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d115      	bne.n	8005fe6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc8:	4413      	add	r3, r2
 8005fca:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	00da      	lsls	r2, r3, #3
 8005fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fda:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6818      	ldr	r0, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	6959      	ldr	r1, [r3, #20]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	895a      	ldrh	r2, [r3, #10]
 8005ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	f005 f857 	bl	800b0aa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	009b      	lsls	r3, r3, #2
 8006008:	4413      	add	r3, r2
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006016:	82bb      	strh	r3, [r7, #20]
 8006018:	8abb      	ldrh	r3, [r7, #20]
 800601a:	f083 0310 	eor.w	r3, r3, #16
 800601e:	82bb      	strh	r3, [r7, #20]
 8006020:	8abb      	ldrh	r3, [r7, #20]
 8006022:	f083 0320 	eor.w	r3, r3, #32
 8006026:	82bb      	strh	r3, [r7, #20]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	441a      	add	r2, r3
 8006036:	8abb      	ldrh	r3, [r7, #20]
 8006038:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800603c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006040:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006044:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006048:	b29b      	uxth	r3, r3
 800604a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3790      	adds	r7, #144	@ 0x90
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006056:	b480      	push	{r7}
 8006058:	b087      	sub	sp, #28
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	607b      	str	r3, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	817b      	strh	r3, [r7, #10]
 8006064:	4613      	mov	r3, r2
 8006066:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006068:	897b      	ldrh	r3, [r7, #10]
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00b      	beq.n	800608c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006074:	897b      	ldrh	r3, [r7, #10]
 8006076:	f003 0207 	and.w	r2, r3, #7
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	3310      	adds	r3, #16
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e009      	b.n	80060a0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800608c:	897a      	ldrh	r2, [r7, #10]
 800608e:	4613      	mov	r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	4413      	add	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4413      	add	r3, r2
 800609e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80060a0:	893b      	ldrh	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d107      	bne.n	80060b6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	2200      	movs	r2, #0
 80060aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	80da      	strh	r2, [r3, #6]
 80060b4:	e00b      	b.n	80060ce <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2201      	movs	r2, #1
 80060ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	0c1b      	lsrs	r3, r3, #16
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	371c      	adds	r7, #28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006100:	b29b      	uxth	r3, r3
 8006102:	f043 0301 	orr.w	r3, r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006114:	b29b      	uxth	r3, r3
 8006116:	f043 0302 	orr.w	r3, r3, #2
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d141      	bne.n	80061c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800613e:	4b4b      	ldr	r3, [pc, #300]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006146:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800614a:	d131      	bne.n	80061b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800614c:	4b47      	ldr	r3, [pc, #284]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006152:	4a46      	ldr	r2, [pc, #280]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006158:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800615c:	4b43      	ldr	r3, [pc, #268]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006164:	4a41      	ldr	r2, [pc, #260]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006166:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800616a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800616c:	4b40      	ldr	r3, [pc, #256]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2232      	movs	r2, #50	@ 0x32
 8006172:	fb02 f303 	mul.w	r3, r2, r3
 8006176:	4a3f      	ldr	r2, [pc, #252]	@ (8006274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006178:	fba2 2303 	umull	r2, r3, r2, r3
 800617c:	0c9b      	lsrs	r3, r3, #18
 800617e:	3301      	adds	r3, #1
 8006180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006182:	e002      	b.n	800618a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3b01      	subs	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800618a:	4b38      	ldr	r3, [pc, #224]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006196:	d102      	bne.n	800619e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1f2      	bne.n	8006184 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800619e:	4b33      	ldr	r3, [pc, #204]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061aa:	d158      	bne.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e057      	b.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061b0:	4b2e      	ldr	r3, [pc, #184]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061b6:	4a2d      	ldr	r2, [pc, #180]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061c0:	e04d      	b.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c8:	d141      	bne.n	800624e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061ca:	4b28      	ldr	r3, [pc, #160]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d6:	d131      	bne.n	800623c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d8:	4b24      	ldr	r3, [pc, #144]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061de:	4a23      	ldr	r2, [pc, #140]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e8:	4b20      	ldr	r3, [pc, #128]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061f0:	4a1e      	ldr	r2, [pc, #120]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f8:	4b1d      	ldr	r3, [pc, #116]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2232      	movs	r2, #50	@ 0x32
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	4a1c      	ldr	r2, [pc, #112]	@ (8006274 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	0c9b      	lsrs	r3, r3, #18
 800620a:	3301      	adds	r3, #1
 800620c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620e:	e002      	b.n	8006216 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3b01      	subs	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006216:	4b15      	ldr	r3, [pc, #84]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006222:	d102      	bne.n	800622a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f2      	bne.n	8006210 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800622a:	4b10      	ldr	r3, [pc, #64]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006236:	d112      	bne.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e011      	b.n	8006260 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800623c:	4b0b      	ldr	r3, [pc, #44]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006242:	4a0a      	ldr	r2, [pc, #40]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006248:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800624c:	e007      	b.n	800625e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800624e:	4b07      	ldr	r3, [pc, #28]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006256:	4a05      	ldr	r2, [pc, #20]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006258:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800625c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	40007000 	.word	0x40007000
 8006270:	20000000 	.word	0x20000000
 8006274:	431bde83 	.word	0x431bde83

08006278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b088      	sub	sp, #32
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e2fe      	b.n	8006888 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d075      	beq.n	8006382 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006296:	4b97      	ldr	r3, [pc, #604]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062a0:	4b94      	ldr	r3, [pc, #592]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b0c      	cmp	r3, #12
 80062ae:	d102      	bne.n	80062b6 <HAL_RCC_OscConfig+0x3e>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d002      	beq.n	80062bc <HAL_RCC_OscConfig+0x44>
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d10b      	bne.n	80062d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062bc:	4b8d      	ldr	r3, [pc, #564]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d05b      	beq.n	8006380 <HAL_RCC_OscConfig+0x108>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d157      	bne.n	8006380 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e2d9      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062dc:	d106      	bne.n	80062ec <HAL_RCC_OscConfig+0x74>
 80062de:	4b85      	ldr	r3, [pc, #532]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a84      	ldr	r2, [pc, #528]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80062e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e01d      	b.n	8006328 <HAL_RCC_OscConfig+0xb0>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062f4:	d10c      	bne.n	8006310 <HAL_RCC_OscConfig+0x98>
 80062f6:	4b7f      	ldr	r3, [pc, #508]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a7e      	ldr	r2, [pc, #504]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80062fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	4b7c      	ldr	r3, [pc, #496]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7b      	ldr	r2, [pc, #492]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	e00b      	b.n	8006328 <HAL_RCC_OscConfig+0xb0>
 8006310:	4b78      	ldr	r3, [pc, #480]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a77      	ldr	r2, [pc, #476]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006316:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	4b75      	ldr	r3, [pc, #468]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a74      	ldr	r2, [pc, #464]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006322:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006326:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d013      	beq.n	8006358 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006330:	f7fb fe16 	bl	8001f60 <HAL_GetTick>
 8006334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006336:	e008      	b.n	800634a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006338:	f7fb fe12 	bl	8001f60 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	2b64      	cmp	r3, #100	@ 0x64
 8006344:	d901      	bls.n	800634a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006346:	2303      	movs	r3, #3
 8006348:	e29e      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800634a:	4b6a      	ldr	r3, [pc, #424]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0f0      	beq.n	8006338 <HAL_RCC_OscConfig+0xc0>
 8006356:	e014      	b.n	8006382 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006358:	f7fb fe02 	bl	8001f60 <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800635e:	e008      	b.n	8006372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006360:	f7fb fdfe 	bl	8001f60 <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	2b64      	cmp	r3, #100	@ 0x64
 800636c:	d901      	bls.n	8006372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800636e:	2303      	movs	r3, #3
 8006370:	e28a      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006372:	4b60      	ldr	r3, [pc, #384]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800637a:	2b00      	cmp	r3, #0
 800637c:	d1f0      	bne.n	8006360 <HAL_RCC_OscConfig+0xe8>
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006380:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d075      	beq.n	800647a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800638e:	4b59      	ldr	r3, [pc, #356]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
 8006396:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006398:	4b56      	ldr	r3, [pc, #344]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b0c      	cmp	r3, #12
 80063a6:	d102      	bne.n	80063ae <HAL_RCC_OscConfig+0x136>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d002      	beq.n	80063b4 <HAL_RCC_OscConfig+0x13c>
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d11f      	bne.n	80063f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063b4:	4b4f      	ldr	r3, [pc, #316]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <HAL_RCC_OscConfig+0x154>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e25d      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063cc:	4b49      	ldr	r3, [pc, #292]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	061b      	lsls	r3, r3, #24
 80063da:	4946      	ldr	r1, [pc, #280]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063e0:	4b45      	ldr	r3, [pc, #276]	@ (80064f8 <HAL_RCC_OscConfig+0x280>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fb fd6f 	bl	8001ec8 <HAL_InitTick>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d043      	beq.n	8006478 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e249      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d023      	beq.n	8006444 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063fc:	4b3d      	ldr	r3, [pc, #244]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a3c      	ldr	r2, [pc, #240]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fb fdaa 	bl	8001f60 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006410:	f7fb fda6 	bl	8001f60 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e232      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006422:	4b34      	ldr	r3, [pc, #208]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642e:	4b31      	ldr	r3, [pc, #196]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	061b      	lsls	r3, r3, #24
 800643c:	492d      	ldr	r1, [pc, #180]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 800643e:	4313      	orrs	r3, r2
 8006440:	604b      	str	r3, [r1, #4]
 8006442:	e01a      	b.n	800647a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006444:	4b2b      	ldr	r3, [pc, #172]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a2a      	ldr	r2, [pc, #168]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 800644a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800644e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fb fd86 	bl	8001f60 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006458:	f7fb fd82 	bl	8001f60 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e20e      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800646a:	4b22      	ldr	r3, [pc, #136]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f0      	bne.n	8006458 <HAL_RCC_OscConfig+0x1e0>
 8006476:	e000      	b.n	800647a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006478:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0308 	and.w	r3, r3, #8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d041      	beq.n	800650a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d01c      	beq.n	80064c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800648e:	4b19      	ldr	r3, [pc, #100]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006490:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006494:	4a17      	ldr	r2, [pc, #92]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 8006496:	f043 0301 	orr.w	r3, r3, #1
 800649a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649e:	f7fb fd5f 	bl	8001f60 <HAL_GetTick>
 80064a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064a4:	e008      	b.n	80064b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a6:	f7fb fd5b 	bl	8001f60 <HAL_GetTick>
 80064aa:	4602      	mov	r2, r0
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e1e7      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064b8:	4b0e      	ldr	r3, [pc, #56]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80064ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0ef      	beq.n	80064a6 <HAL_RCC_OscConfig+0x22e>
 80064c6:	e020      	b.n	800650a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064c8:	4b0a      	ldr	r3, [pc, #40]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80064ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ce:	4a09      	ldr	r2, [pc, #36]	@ (80064f4 <HAL_RCC_OscConfig+0x27c>)
 80064d0:	f023 0301 	bic.w	r3, r3, #1
 80064d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d8:	f7fb fd42 	bl	8001f60 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064de:	e00d      	b.n	80064fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e0:	f7fb fd3e 	bl	8001f60 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d906      	bls.n	80064fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e1ca      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
 80064f2:	bf00      	nop
 80064f4:	40021000 	.word	0x40021000
 80064f8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064fc:	4b8c      	ldr	r3, [pc, #560]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1ea      	bne.n	80064e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 0304 	and.w	r3, r3, #4
 8006512:	2b00      	cmp	r3, #0
 8006514:	f000 80a6 	beq.w	8006664 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006518:	2300      	movs	r3, #0
 800651a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800651c:	4b84      	ldr	r3, [pc, #528]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 800651e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006520:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <HAL_RCC_OscConfig+0x2b4>
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <HAL_RCC_OscConfig+0x2b6>
 800652c:	2300      	movs	r3, #0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00d      	beq.n	800654e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006532:	4b7f      	ldr	r3, [pc, #508]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006536:	4a7e      	ldr	r2, [pc, #504]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006538:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800653c:	6593      	str	r3, [r2, #88]	@ 0x58
 800653e:	4b7c      	ldr	r3, [pc, #496]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800654a:	2301      	movs	r3, #1
 800654c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800654e:	4b79      	ldr	r3, [pc, #484]	@ (8006734 <HAL_RCC_OscConfig+0x4bc>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006556:	2b00      	cmp	r3, #0
 8006558:	d118      	bne.n	800658c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800655a:	4b76      	ldr	r3, [pc, #472]	@ (8006734 <HAL_RCC_OscConfig+0x4bc>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a75      	ldr	r2, [pc, #468]	@ (8006734 <HAL_RCC_OscConfig+0x4bc>)
 8006560:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006564:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006566:	f7fb fcfb 	bl	8001f60 <HAL_GetTick>
 800656a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800656c:	e008      	b.n	8006580 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656e:	f7fb fcf7 	bl	8001f60 <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	2b02      	cmp	r3, #2
 800657a:	d901      	bls.n	8006580 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800657c:	2303      	movs	r3, #3
 800657e:	e183      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006580:	4b6c      	ldr	r3, [pc, #432]	@ (8006734 <HAL_RCC_OscConfig+0x4bc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006588:	2b00      	cmp	r3, #0
 800658a:	d0f0      	beq.n	800656e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d108      	bne.n	80065a6 <HAL_RCC_OscConfig+0x32e>
 8006594:	4b66      	ldr	r3, [pc, #408]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800659a:	4a65      	ldr	r2, [pc, #404]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 800659c:	f043 0301 	orr.w	r3, r3, #1
 80065a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065a4:	e024      	b.n	80065f0 <HAL_RCC_OscConfig+0x378>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d110      	bne.n	80065d0 <HAL_RCC_OscConfig+0x358>
 80065ae:	4b60      	ldr	r3, [pc, #384]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b4:	4a5e      	ldr	r2, [pc, #376]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065b6:	f043 0304 	orr.w	r3, r3, #4
 80065ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065be:	4b5c      	ldr	r3, [pc, #368]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065c6:	f043 0301 	orr.w	r3, r3, #1
 80065ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065ce:	e00f      	b.n	80065f0 <HAL_RCC_OscConfig+0x378>
 80065d0:	4b57      	ldr	r3, [pc, #348]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d6:	4a56      	ldr	r2, [pc, #344]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065d8:	f023 0301 	bic.w	r3, r3, #1
 80065dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065e0:	4b53      	ldr	r3, [pc, #332]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e6:	4a52      	ldr	r2, [pc, #328]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80065e8:	f023 0304 	bic.w	r3, r3, #4
 80065ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d016      	beq.n	8006626 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f8:	f7fb fcb2 	bl	8001f60 <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065fe:	e00a      	b.n	8006616 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006600:	f7fb fcae 	bl	8001f60 <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660e:	4293      	cmp	r3, r2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e138      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006616:	4b46      	ldr	r3, [pc, #280]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0ed      	beq.n	8006600 <HAL_RCC_OscConfig+0x388>
 8006624:	e015      	b.n	8006652 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006626:	f7fb fc9b 	bl	8001f60 <HAL_GetTick>
 800662a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800662c:	e00a      	b.n	8006644 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662e:	f7fb fc97 	bl	8001f60 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f241 3288 	movw	r2, #5000	@ 0x1388
 800663c:	4293      	cmp	r3, r2
 800663e:	d901      	bls.n	8006644 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	e121      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006644:	4b3a      	ldr	r3, [pc, #232]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800664a:	f003 0302 	and.w	r3, r3, #2
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1ed      	bne.n	800662e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006652:	7ffb      	ldrb	r3, [r7, #31]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d105      	bne.n	8006664 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006658:	4b35      	ldr	r3, [pc, #212]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 800665a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800665c:	4a34      	ldr	r2, [pc, #208]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 800665e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006662:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d03c      	beq.n	80066ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d01c      	beq.n	80066b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006678:	4b2d      	ldr	r3, [pc, #180]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 800667a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800667e:	4a2c      	ldr	r2, [pc, #176]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006680:	f043 0301 	orr.w	r3, r3, #1
 8006684:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006688:	f7fb fc6a 	bl	8001f60 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006690:	f7fb fc66 	bl	8001f60 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e0f2      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80066a2:	4b23      	ldr	r3, [pc, #140]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80066a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ef      	beq.n	8006690 <HAL_RCC_OscConfig+0x418>
 80066b0:	e01b      	b.n	80066ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80066b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80066ba:	f023 0301 	bic.w	r3, r3, #1
 80066be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066c2:	f7fb fc4d 	bl	8001f60 <HAL_GetTick>
 80066c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066c8:	e008      	b.n	80066dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066ca:	f7fb fc49 	bl	8001f60 <HAL_GetTick>
 80066ce:	4602      	mov	r2, r0
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	1ad3      	subs	r3, r2, r3
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d901      	bls.n	80066dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e0d5      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066dc:	4b14      	ldr	r3, [pc, #80]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80066de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1ef      	bne.n	80066ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 80c9 	beq.w	8006886 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066f4:	4b0e      	ldr	r3, [pc, #56]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 030c 	and.w	r3, r3, #12
 80066fc:	2b0c      	cmp	r3, #12
 80066fe:	f000 8083 	beq.w	8006808 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69db      	ldr	r3, [r3, #28]
 8006706:	2b02      	cmp	r3, #2
 8006708:	d15e      	bne.n	80067c8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800670a:	4b09      	ldr	r3, [pc, #36]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a08      	ldr	r2, [pc, #32]	@ (8006730 <HAL_RCC_OscConfig+0x4b8>)
 8006710:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006716:	f7fb fc23 	bl	8001f60 <HAL_GetTick>
 800671a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800671c:	e00c      	b.n	8006738 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800671e:	f7fb fc1f 	bl	8001f60 <HAL_GetTick>
 8006722:	4602      	mov	r2, r0
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	1ad3      	subs	r3, r2, r3
 8006728:	2b02      	cmp	r3, #2
 800672a:	d905      	bls.n	8006738 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e0ab      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
 8006730:	40021000 	.word	0x40021000
 8006734:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006738:	4b55      	ldr	r3, [pc, #340]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1ec      	bne.n	800671e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006744:	4b52      	ldr	r3, [pc, #328]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	4b52      	ldr	r3, [pc, #328]	@ (8006894 <HAL_RCC_OscConfig+0x61c>)
 800674a:	4013      	ands	r3, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6a11      	ldr	r1, [r2, #32]
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006754:	3a01      	subs	r2, #1
 8006756:	0112      	lsls	r2, r2, #4
 8006758:	4311      	orrs	r1, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800675e:	0212      	lsls	r2, r2, #8
 8006760:	4311      	orrs	r1, r2
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006766:	0852      	lsrs	r2, r2, #1
 8006768:	3a01      	subs	r2, #1
 800676a:	0552      	lsls	r2, r2, #21
 800676c:	4311      	orrs	r1, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006772:	0852      	lsrs	r2, r2, #1
 8006774:	3a01      	subs	r2, #1
 8006776:	0652      	lsls	r2, r2, #25
 8006778:	4311      	orrs	r1, r2
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800677e:	06d2      	lsls	r2, r2, #27
 8006780:	430a      	orrs	r2, r1
 8006782:	4943      	ldr	r1, [pc, #268]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 8006784:	4313      	orrs	r3, r2
 8006786:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006788:	4b41      	ldr	r3, [pc, #260]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a40      	ldr	r2, [pc, #256]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 800678e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006792:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006794:	4b3e      	ldr	r3, [pc, #248]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	4a3d      	ldr	r2, [pc, #244]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 800679a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800679e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a0:	f7fb fbde 	bl	8001f60 <HAL_GetTick>
 80067a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067a6:	e008      	b.n	80067ba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a8:	f7fb fbda 	bl	8001f60 <HAL_GetTick>
 80067ac:	4602      	mov	r2, r0
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	2b02      	cmp	r3, #2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e066      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067ba:	4b35      	ldr	r3, [pc, #212]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0f0      	beq.n	80067a8 <HAL_RCC_OscConfig+0x530>
 80067c6:	e05e      	b.n	8006886 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c8:	4b31      	ldr	r3, [pc, #196]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a30      	ldr	r2, [pc, #192]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 80067ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d4:	f7fb fbc4 	bl	8001f60 <HAL_GetTick>
 80067d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067da:	e008      	b.n	80067ee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067dc:	f7fb fbc0 	bl	8001f60 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d901      	bls.n	80067ee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80067ea:	2303      	movs	r3, #3
 80067ec:	e04c      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ee:	4b28      	ldr	r3, [pc, #160]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1f0      	bne.n	80067dc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80067fa:	4b25      	ldr	r3, [pc, #148]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	4924      	ldr	r1, [pc, #144]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 8006800:	4b25      	ldr	r3, [pc, #148]	@ (8006898 <HAL_RCC_OscConfig+0x620>)
 8006802:	4013      	ands	r3, r2
 8006804:	60cb      	str	r3, [r1, #12]
 8006806:	e03e      	b.n	8006886 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d101      	bne.n	8006814 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e039      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006814:	4b1e      	ldr	r3, [pc, #120]	@ (8006890 <HAL_RCC_OscConfig+0x618>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f003 0203 	and.w	r2, r3, #3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	429a      	cmp	r2, r3
 8006826:	d12c      	bne.n	8006882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006832:	3b01      	subs	r3, #1
 8006834:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006836:	429a      	cmp	r2, r3
 8006838:	d123      	bne.n	8006882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006844:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d11b      	bne.n	8006882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006854:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006856:	429a      	cmp	r2, r3
 8006858:	d113      	bne.n	8006882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	3b01      	subs	r3, #1
 8006868:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800686a:	429a      	cmp	r2, r3
 800686c:	d109      	bne.n	8006882 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	3b01      	subs	r3, #1
 800687c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800687e:	429a      	cmp	r2, r3
 8006880:	d001      	beq.n	8006886 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e000      	b.n	8006888 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40021000 	.word	0x40021000
 8006894:	019f800c 	.word	0x019f800c
 8006898:	feeefffc 	.word	0xfeeefffc

0800689c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068a6:	2300      	movs	r3, #0
 80068a8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e11e      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068b4:	4b91      	ldr	r3, [pc, #580]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d910      	bls.n	80068e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068c2:	4b8e      	ldr	r3, [pc, #568]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f023 020f 	bic.w	r2, r3, #15
 80068ca:	498c      	ldr	r1, [pc, #560]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068d2:	4b8a      	ldr	r3, [pc, #552]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 030f 	and.w	r3, r3, #15
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d001      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e106      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d073      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2b03      	cmp	r3, #3
 80068f6:	d129      	bne.n	800694c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068f8:	4b81      	ldr	r3, [pc, #516]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e0f4      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006908:	f000 f99e 	bl	8006c48 <RCC_GetSysClockFreqFromPLLSource>
 800690c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4a7c      	ldr	r2, [pc, #496]	@ (8006b04 <HAL_RCC_ClockConfig+0x268>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d93f      	bls.n	8006996 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006916:	4b7a      	ldr	r3, [pc, #488]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800692a:	2b00      	cmp	r3, #0
 800692c:	d033      	beq.n	8006996 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006932:	2b00      	cmp	r3, #0
 8006934:	d12f      	bne.n	8006996 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006936:	4b72      	ldr	r3, [pc, #456]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800693e:	4a70      	ldr	r2, [pc, #448]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006944:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006946:	2380      	movs	r3, #128	@ 0x80
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e024      	b.n	8006996 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b02      	cmp	r3, #2
 8006952:	d107      	bne.n	8006964 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006954:	4b6a      	ldr	r3, [pc, #424]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d109      	bne.n	8006974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e0c6      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006964:	4b66      	ldr	r3, [pc, #408]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e0be      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006974:	f000 f8ce 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006978:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	4a61      	ldr	r2, [pc, #388]	@ (8006b04 <HAL_RCC_ClockConfig+0x268>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d909      	bls.n	8006996 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006982:	4b5f      	ldr	r3, [pc, #380]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800698a:	4a5d      	ldr	r2, [pc, #372]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 800698c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006990:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006992:	2380      	movs	r3, #128	@ 0x80
 8006994:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006996:	4b5a      	ldr	r3, [pc, #360]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f023 0203 	bic.w	r2, r3, #3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	4957      	ldr	r1, [pc, #348]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a8:	f7fb fada 	bl	8001f60 <HAL_GetTick>
 80069ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ae:	e00a      	b.n	80069c6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b0:	f7fb fad6 	bl	8001f60 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069be:	4293      	cmp	r3, r2
 80069c0:	d901      	bls.n	80069c6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069c2:	2303      	movs	r3, #3
 80069c4:	e095      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c6:	4b4e      	ldr	r3, [pc, #312]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f003 020c 	and.w	r2, r3, #12
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d1eb      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d023      	beq.n	8006a2c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f0:	4b43      	ldr	r3, [pc, #268]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	4a42      	ldr	r2, [pc, #264]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 80069f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80069fa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a08:	4b3d      	ldr	r3, [pc, #244]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a10:	4a3b      	ldr	r2, [pc, #236]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a12:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a18:	4b39      	ldr	r3, [pc, #228]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	4936      	ldr	r1, [pc, #216]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a26:	4313      	orrs	r3, r2
 8006a28:	608b      	str	r3, [r1, #8]
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	2b80      	cmp	r3, #128	@ 0x80
 8006a30:	d105      	bne.n	8006a3e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a32:	4b33      	ldr	r3, [pc, #204]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	4a32      	ldr	r2, [pc, #200]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a3c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d21d      	bcs.n	8006a88 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f023 020f 	bic.w	r2, r3, #15
 8006a54:	4929      	ldr	r1, [pc, #164]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a5c:	f7fb fa80 	bl	8001f60 <HAL_GetTick>
 8006a60:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	e00a      	b.n	8006a7a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a64:	f7fb fa7c 	bl	8001f60 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e03b      	b.n	8006af2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b20      	ldr	r3, [pc, #128]	@ (8006afc <HAL_RCC_ClockConfig+0x260>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 030f 	and.w	r3, r3, #15
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1ed      	bne.n	8006a64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a94:	4b1a      	ldr	r3, [pc, #104]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4917      	ldr	r1, [pc, #92]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0308 	and.w	r3, r3, #8
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ab2:	4b13      	ldr	r3, [pc, #76]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	490f      	ldr	r1, [pc, #60]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ac6:	f000 f825 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4b0c      	ldr	r3, [pc, #48]	@ (8006b00 <HAL_RCC_ClockConfig+0x264>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	091b      	lsrs	r3, r3, #4
 8006ad2:	f003 030f 	and.w	r3, r3, #15
 8006ad6:	490c      	ldr	r1, [pc, #48]	@ (8006b08 <HAL_RCC_ClockConfig+0x26c>)
 8006ad8:	5ccb      	ldrb	r3, [r1, r3]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8006b0c <HAL_RCC_ClockConfig+0x270>)
 8006ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <HAL_RCC_ClockConfig+0x274>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fb f9ec 	bl	8001ec8 <HAL_InitTick>
 8006af0:	4603      	mov	r3, r0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3718      	adds	r7, #24
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40022000 	.word	0x40022000
 8006b00:	40021000 	.word	0x40021000
 8006b04:	04c4b400 	.word	0x04c4b400
 8006b08:	0800de34 	.word	0x0800de34
 8006b0c:	20000000 	.word	0x20000000
 8006b10:	20000004 	.word	0x20000004

08006b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 030c 	and.w	r3, r3, #12
 8006b22:	2b04      	cmp	r3, #4
 8006b24:	d102      	bne.n	8006b2c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b26:	4b2a      	ldr	r3, [pc, #168]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	e047      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b2c:	4b27      	ldr	r3, [pc, #156]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 030c 	and.w	r3, r3, #12
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d102      	bne.n	8006b3e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b38:	4b26      	ldr	r3, [pc, #152]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	e03e      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b3e:	4b23      	ldr	r3, [pc, #140]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 030c 	and.w	r3, r3, #12
 8006b46:	2b0c      	cmp	r3, #12
 8006b48:	d136      	bne.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b4a:	4b20      	ldr	r3, [pc, #128]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f003 0303 	and.w	r3, r3, #3
 8006b52:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b54:	4b1d      	ldr	r3, [pc, #116]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	091b      	lsrs	r3, r3, #4
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	3301      	adds	r3, #1
 8006b60:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2b03      	cmp	r3, #3
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b68:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b70:	4a16      	ldr	r2, [pc, #88]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b72:	68d2      	ldr	r2, [r2, #12]
 8006b74:	0a12      	lsrs	r2, r2, #8
 8006b76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b7a:	fb02 f303 	mul.w	r3, r2, r3
 8006b7e:	617b      	str	r3, [r7, #20]
      break;
 8006b80:	e00c      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b82:	4a13      	ldr	r2, [pc, #76]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8a:	4a10      	ldr	r2, [pc, #64]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b8c:	68d2      	ldr	r2, [r2, #12]
 8006b8e:	0a12      	lsrs	r2, r2, #8
 8006b90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b94:	fb02 f303 	mul.w	r3, r2, r3
 8006b98:	617b      	str	r3, [r7, #20]
      break;
 8006b9a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	0e5b      	lsrs	r3, r3, #25
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e001      	b.n	8006bbc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bbc:	693b      	ldr	r3, [r7, #16]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	00f42400 	.word	0x00f42400
 8006bd4:	007a1200 	.word	0x007a1200

08006bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	@ (8006bec <HAL_RCC_GetHCLKFreq+0x14>)
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000000 	.word	0x20000000

08006bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006bf4:	f7ff fff0 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	0a1b      	lsrs	r3, r3, #8
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	4904      	ldr	r1, [pc, #16]	@ (8006c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c06:	5ccb      	ldrb	r3, [r1, r3]
 8006c08:	f003 031f 	and.w	r3, r3, #31
 8006c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	40021000 	.word	0x40021000
 8006c18:	0800de44 	.word	0x0800de44

08006c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c20:	f7ff ffda 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006c24:	4602      	mov	r2, r0
 8006c26:	4b06      	ldr	r3, [pc, #24]	@ (8006c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	0adb      	lsrs	r3, r3, #11
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	4904      	ldr	r1, [pc, #16]	@ (8006c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c32:	5ccb      	ldrb	r3, [r1, r3]
 8006c34:	f003 031f 	and.w	r3, r3, #31
 8006c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	40021000 	.word	0x40021000
 8006c44:	0800de44 	.word	0x0800de44

08006c48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c58:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	091b      	lsrs	r3, r3, #4
 8006c5e:	f003 030f 	and.w	r3, r3, #15
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d10c      	bne.n	8006c86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c6c:	4a17      	ldr	r2, [pc, #92]	@ (8006ccc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c74:	4a14      	ldr	r2, [pc, #80]	@ (8006cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c76:	68d2      	ldr	r2, [r2, #12]
 8006c78:	0a12      	lsrs	r2, r2, #8
 8006c7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c7e:	fb02 f303 	mul.w	r3, r2, r3
 8006c82:	617b      	str	r3, [r7, #20]
    break;
 8006c84:	e00c      	b.n	8006ca0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c86:	4a12      	ldr	r2, [pc, #72]	@ (8006cd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c90:	68d2      	ldr	r2, [r2, #12]
 8006c92:	0a12      	lsrs	r2, r2, #8
 8006c94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c98:	fb02 f303 	mul.w	r3, r2, r3
 8006c9c:	617b      	str	r3, [r7, #20]
    break;
 8006c9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ca0:	4b09      	ldr	r3, [pc, #36]	@ (8006cc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	0e5b      	lsrs	r3, r3, #25
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	3301      	adds	r3, #1
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006cba:	687b      	ldr	r3, [r7, #4]
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	007a1200 	.word	0x007a1200
 8006cd0:	00f42400 	.word	0x00f42400

08006cd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b086      	sub	sp, #24
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cdc:	2300      	movs	r3, #0
 8006cde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 8098 	beq.w	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cf6:	4b43      	ldr	r3, [pc, #268]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10d      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d02:	4b40      	ldr	r3, [pc, #256]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d06:	4a3f      	ldr	r2, [pc, #252]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d0e:	4b3d      	ldr	r3, [pc, #244]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d16:	60bb      	str	r3, [r7, #8]
 8006d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d1e:	4b3a      	ldr	r3, [pc, #232]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a39      	ldr	r2, [pc, #228]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d2a:	f7fb f919 	bl	8001f60 <HAL_GetTick>
 8006d2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d30:	e009      	b.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d32:	f7fb f915 	bl	8001f60 <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d902      	bls.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	74fb      	strb	r3, [r7, #19]
        break;
 8006d44:	e005      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d46:	4b30      	ldr	r3, [pc, #192]	@ (8006e08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0ef      	beq.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d52:	7cfb      	ldrb	r3, [r7, #19]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d159      	bne.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d58:	4b2a      	ldr	r3, [pc, #168]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01e      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d019      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d74:	4b23      	ldr	r3, [pc, #140]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d80:	4b20      	ldr	r3, [pc, #128]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d86:	4a1f      	ldr	r2, [pc, #124]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d90:	4b1c      	ldr	r3, [pc, #112]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d96:	4a1b      	ldr	r2, [pc, #108]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006da0:	4a18      	ldr	r2, [pc, #96]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d016      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006db2:	f7fb f8d5 	bl	8001f60 <HAL_GetTick>
 8006db6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db8:	e00b      	b.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dba:	f7fb f8d1 	bl	8001f60 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d902      	bls.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	74fb      	strb	r3, [r7, #19]
            break;
 8006dd0:	e006      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d0ec      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006de0:	7cfb      	ldrb	r3, [r7, #19]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006de6:	4b07      	ldr	r3, [pc, #28]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df4:	4903      	ldr	r1, [pc, #12]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006dfc:	e008      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dfe:	7cfb      	ldrb	r3, [r7, #19]
 8006e00:	74bb      	strb	r3, [r7, #18]
 8006e02:	e005      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e04:	40021000 	.word	0x40021000
 8006e08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0c:	7cfb      	ldrb	r3, [r7, #19]
 8006e0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e10:	7c7b      	ldrb	r3, [r7, #17]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d105      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e16:	4ba6      	ldr	r3, [pc, #664]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1a:	4aa5      	ldr	r2, [pc, #660]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00a      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e2e:	4ba0      	ldr	r3, [pc, #640]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e34:	f023 0203 	bic.w	r2, r3, #3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	499c      	ldr	r1, [pc, #624]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00a      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e50:	4b97      	ldr	r3, [pc, #604]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e56:	f023 020c 	bic.w	r2, r3, #12
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	4994      	ldr	r1, [pc, #592]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0304 	and.w	r3, r3, #4
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e72:	4b8f      	ldr	r3, [pc, #572]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	498b      	ldr	r1, [pc, #556]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 0308 	and.w	r3, r3, #8
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e94:	4b86      	ldr	r3, [pc, #536]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	4983      	ldr	r1, [pc, #524]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0320 	and.w	r3, r3, #32
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006eb6:	4b7e      	ldr	r3, [pc, #504]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	497a      	ldr	r1, [pc, #488]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ed8:	4b75      	ldr	r3, [pc, #468]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	4972      	ldr	r1, [pc, #456]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006efa:	4b6d      	ldr	r3, [pc, #436]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f00:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	69db      	ldr	r3, [r3, #28]
 8006f08:	4969      	ldr	r1, [pc, #420]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f1c:	4b64      	ldr	r3, [pc, #400]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	4961      	ldr	r1, [pc, #388]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f3e:	4b5c      	ldr	r3, [pc, #368]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4c:	4958      	ldr	r1, [pc, #352]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f60:	4b53      	ldr	r3, [pc, #332]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6e:	4950      	ldr	r1, [pc, #320]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7e:	d105      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f80:	4b4b      	ldr	r3, [pc, #300]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4a4a      	ldr	r2, [pc, #296]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f8a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d015      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f98:	4b45      	ldr	r3, [pc, #276]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa6:	4942      	ldr	r1, [pc, #264]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fc2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d015      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fd0:	4b37      	ldr	r3, [pc, #220]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	4934      	ldr	r1, [pc, #208]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fee:	d105      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ff0:	4b2f      	ldr	r3, [pc, #188]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ffa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007008:	4b29      	ldr	r3, [pc, #164]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007016:	4926      	ldr	r1, [pc, #152]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007022:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007026:	d105      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007028:	4b21      	ldr	r3, [pc, #132]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4a20      	ldr	r2, [pc, #128]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800702e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007032:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d015      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007040:	4b1b      	ldr	r3, [pc, #108]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704e:	4918      	ldr	r1, [pc, #96]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007050:	4313      	orrs	r3, r2
 8007052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800705a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800705e:	d105      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007060:	4b13      	ldr	r3, [pc, #76]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	4a12      	ldr	r2, [pc, #72]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800706a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d015      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007078:	4b0d      	ldr	r3, [pc, #52]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800707a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007086:	490a      	ldr	r1, [pc, #40]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007096:	d105      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007098:	4b05      	ldr	r3, [pc, #20]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	4a04      	ldr	r2, [pc, #16]	@ (80070b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800709e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80070a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3718      	adds	r7, #24
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	40021000 	.word	0x40021000

080070b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d070      	beq.n	80071a8 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d106      	bne.n	80070e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f7fa fc2e 	bl	800193c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f003 0310 	and.w	r3, r3, #16
 80070f2:	2b10      	cmp	r3, #16
 80070f4:	d04f      	beq.n	8007196 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	22ca      	movs	r2, #202	@ 0xca
 80070fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2253      	movs	r2, #83	@ 0x53
 8007104:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 f878 	bl	80071fc <RTC_EnterInitMode>
 800710c:	4603      	mov	r3, r0
 800710e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007110:	7bfb      	ldrb	r3, [r7, #15]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d126      	bne.n	8007164 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6812      	ldr	r2, [r2, #0]
 8007120:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007124:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007128:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6999      	ldr	r1, [r3, #24]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	431a      	orrs	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	431a      	orrs	r2, r3
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68d9      	ldr	r1, [r3, #12]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	041a      	lsls	r2, r3, #16
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	430a      	orrs	r2, r1
 8007158:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f884 	bl	8007268 <RTC_ExitInitMode>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d110      	bne.n	800718c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6a1a      	ldr	r2, [r3, #32]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	431a      	orrs	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	22ff      	movs	r2, #255	@ 0xff
 8007192:	625a      	str	r2, [r3, #36]	@ 0x24
 8007194:	e001      	b.n	800719a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007196:	2300      	movs	r3, #0
 8007198:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80071a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
	...

080071b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0d      	ldr	r2, [pc, #52]	@ (80071f8 <HAL_RTC_WaitForSynchro+0x44>)
 80071c2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80071c4:	f7fa fecc 	bl	8001f60 <HAL_GetTick>
 80071c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80071ca:	e009      	b.n	80071e0 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071cc:	f7fa fec8 	bl	8001f60 <HAL_GetTick>
 80071d0:	4602      	mov	r2, r0
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1ad3      	subs	r3, r2, r3
 80071d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071da:	d901      	bls.n	80071e0 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e007      	b.n	80071f0 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	f003 0320 	and.w	r3, r3, #32
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0ee      	beq.n	80071cc <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	0001005f 	.word	0x0001005f

080071fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b00      	cmp	r3, #0
 8007214:	d123      	bne.n	800725e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007224:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007226:	f7fa fe9b 	bl	8001f60 <HAL_GetTick>
 800722a:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800722c:	e00d      	b.n	800724a <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800722e:	f7fa fe97 	bl	8001f60 <HAL_GetTick>
 8007232:	4602      	mov	r2, r0
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	1ad3      	subs	r3, r2, r3
 8007238:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800723c:	d905      	bls.n	800724a <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2203      	movs	r2, #3
 8007246:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007254:	2b00      	cmp	r3, #0
 8007256:	d102      	bne.n	800725e <RTC_EnterInitMode+0x62>
 8007258:	7bfb      	ldrb	r3, [r7, #15]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d1e7      	bne.n	800722e <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800725e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007270:	2300      	movs	r3, #0
 8007272:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68da      	ldr	r2, [r3, #12]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007282:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	f003 0320 	and.w	r3, r3, #32
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10c      	bne.n	80072ac <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f7ff ff8e 	bl	80071b4 <HAL_RTC_WaitForSynchro>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d022      	beq.n	80072e4 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2203      	movs	r2, #3
 80072a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	73fb      	strb	r3, [r7, #15]
 80072aa:	e01b      	b.n	80072e4 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0220 	bic.w	r2, r2, #32
 80072ba:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f7ff ff79 	bl	80071b4 <HAL_RTC_WaitForSynchro>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d005      	beq.n	80072d4 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2203      	movs	r2, #3
 80072cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f042 0220 	orr.w	r2, r2, #32
 80072e2:	619a      	str	r2, [r3, #24]
  }

  return status;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8007304:	2302      	movs	r3, #2
 8007306:	e062      	b.n	80073ce <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	22ca      	movs	r2, #202	@ 0xca
 800731e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2253      	movs	r2, #83	@ 0x53
 8007326:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	699a      	ldr	r2, [r3, #24]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007336:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007342:	2b00      	cmp	r3, #0
 8007344:	d120      	bne.n	8007388 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 8007346:	f7fa fe0b 	bl	8001f60 <HAL_GetTick>
 800734a:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800734c:	e015      	b.n	800737a <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800734e:	f7fa fe07 	bl	8001f60 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800735c:	d90d      	bls.n	800737a <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	22ff      	movs	r2, #255	@ 0xff
 8007364:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2203      	movs	r2, #3
 800736a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e029      	b.n	80073ce <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0e2      	beq.n	800734e <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	f023 0107 	bic.w	r1, r3, #7
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	430a      	orrs	r2, r1
 800739a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073b2:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	22ff      	movs	r2, #255	@ 0xff
 80073ba:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3718      	adds	r7, #24
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d101      	bne.n	80073e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e09d      	b.n	8007524 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d108      	bne.n	8007402 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073f8:	d009      	beq.n	800740e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	61da      	str	r2, [r3, #28]
 8007400:	e005      	b.n	800740e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800741a:	b2db      	uxtb	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d106      	bne.n	800742e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7fa fb01 	bl	8001a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007444:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800744e:	d902      	bls.n	8007456 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007450:	2300      	movs	r3, #0
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	e002      	b.n	800745c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007456:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800745a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007464:	d007      	beq.n	8007476 <HAL_SPI_Init+0xa0>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800746e:	d002      	beq.n	8007476 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007486:	431a      	orrs	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	431a      	orrs	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	699b      	ldr	r3, [r3, #24]
 80074a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a1b      	ldr	r3, [r3, #32]
 80074b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b8:	ea42 0103 	orr.w	r1, r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	430a      	orrs	r2, r1
 80074ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	0c1b      	lsrs	r3, r3, #16
 80074d2:	f003 0204 	and.w	r2, r3, #4
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	f003 0310 	and.w	r3, r3, #16
 80074de:	431a      	orrs	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	431a      	orrs	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074f2:	ea42 0103 	orr.w	r1, r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007512:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	603b      	str	r3, [r7, #0]
 8007538:	4613      	mov	r3, r2
 800753a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007546:	2b01      	cmp	r3, #1
 8007548:	d101      	bne.n	800754e <HAL_SPI_Transmit+0x22>
 800754a:	2302      	movs	r3, #2
 800754c:	e15f      	b.n	800780e <HAL_SPI_Transmit+0x2e2>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007556:	f7fa fd03 	bl	8001f60 <HAL_GetTick>
 800755a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b01      	cmp	r3, #1
 800756a:	d002      	beq.n	8007572 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800756c:	2302      	movs	r3, #2
 800756e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007570:	e148      	b.n	8007804 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d002      	beq.n	800757e <HAL_SPI_Transmit+0x52>
 8007578:	88fb      	ldrh	r3, [r7, #6]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d102      	bne.n	8007584 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007582:	e13f      	b.n	8007804 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2203      	movs	r2, #3
 8007588:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	88fa      	ldrh	r2, [r7, #6]
 800759c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	88fa      	ldrh	r2, [r7, #6]
 80075a2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ce:	d10f      	bne.n	80075f0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fa:	2b40      	cmp	r3, #64	@ 0x40
 80075fc:	d007      	beq.n	800760e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800760c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007616:	d94f      	bls.n	80076b8 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <HAL_SPI_Transmit+0xfa>
 8007620:	8afb      	ldrh	r3, [r7, #22]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d142      	bne.n	80076ac <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762a:	881a      	ldrh	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007636:	1c9a      	adds	r2, r3, #2
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007640:	b29b      	uxth	r3, r3
 8007642:	3b01      	subs	r3, #1
 8007644:	b29a      	uxth	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800764a:	e02f      	b.n	80076ac <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0302 	and.w	r3, r3, #2
 8007656:	2b02      	cmp	r3, #2
 8007658:	d112      	bne.n	8007680 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765e:	881a      	ldrh	r2, [r3, #0]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766a:	1c9a      	adds	r2, r3, #2
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800767e:	e015      	b.n	80076ac <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007680:	f7fa fc6e 	bl	8001f60 <HAL_GetTick>
 8007684:	4602      	mov	r2, r0
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d803      	bhi.n	8007698 <HAL_SPI_Transmit+0x16c>
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007696:	d102      	bne.n	800769e <HAL_SPI_Transmit+0x172>
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80076aa:	e0ab      	b.n	8007804 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d1ca      	bne.n	800764c <HAL_SPI_Transmit+0x120>
 80076b6:	e080      	b.n	80077ba <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <HAL_SPI_Transmit+0x19a>
 80076c0:	8afb      	ldrh	r3, [r7, #22]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d174      	bne.n	80077b0 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d912      	bls.n	80076f6 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d4:	881a      	ldrh	r2, [r3, #0]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076e0:	1c9a      	adds	r2, r3, #2
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	3b02      	subs	r3, #2
 80076ee:	b29a      	uxth	r2, r3
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076f4:	e05c      	b.n	80077b0 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	330c      	adds	r3, #12
 8007700:	7812      	ldrb	r2, [r2, #0]
 8007702:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007708:	1c5a      	adds	r2, r3, #1
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007712:	b29b      	uxth	r3, r3
 8007714:	3b01      	subs	r3, #1
 8007716:	b29a      	uxth	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800771c:	e048      	b.n	80077b0 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b02      	cmp	r3, #2
 800772a:	d12b      	bne.n	8007784 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	2b01      	cmp	r3, #1
 8007734:	d912      	bls.n	800775c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773a:	881a      	ldrh	r2, [r3, #0]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	1c9a      	adds	r2, r3, #2
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007750:	b29b      	uxth	r3, r3
 8007752:	3b02      	subs	r3, #2
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800775a:	e029      	b.n	80077b0 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	330c      	adds	r3, #12
 8007766:	7812      	ldrb	r2, [r2, #0]
 8007768:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b29a      	uxth	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007782:	e015      	b.n	80077b0 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007784:	f7fa fbec 	bl	8001f60 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	683a      	ldr	r2, [r7, #0]
 8007790:	429a      	cmp	r2, r3
 8007792:	d803      	bhi.n	800779c <HAL_SPI_Transmit+0x270>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779a:	d102      	bne.n	80077a2 <HAL_SPI_Transmit+0x276>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d106      	bne.n	80077b0 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80077a2:	2303      	movs	r3, #3
 80077a4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80077ae:	e029      	b.n	8007804 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1b1      	bne.n	800771e <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f948 	bl	8007a54 <SPI_EndRxTxTransaction>
 80077c4:	4603      	mov	r3, r0
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2220      	movs	r2, #32
 80077ce:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d10a      	bne.n	80077ee <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	613b      	str	r3, [r7, #16]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	613b      	str	r3, [r7, #16]
 80077ec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	77fb      	strb	r3, [r7, #31]
 80077fa:	e003      	b.n	8007804 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800780c:	7ffb      	ldrb	r3, [r7, #31]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3720      	adds	r7, #32
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b088      	sub	sp, #32
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	603b      	str	r3, [r7, #0]
 8007824:	4613      	mov	r3, r2
 8007826:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007828:	f7fa fb9a 	bl	8001f60 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007830:	1a9b      	subs	r3, r3, r2
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	4413      	add	r3, r2
 8007836:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007838:	f7fa fb92 	bl	8001f60 <HAL_GetTick>
 800783c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800783e:	4b39      	ldr	r3, [pc, #228]	@ (8007924 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	015b      	lsls	r3, r3, #5
 8007844:	0d1b      	lsrs	r3, r3, #20
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	fb02 f303 	mul.w	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800784e:	e054      	b.n	80078fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007856:	d050      	beq.n	80078fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007858:	f7fa fb82 	bl	8001f60 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	69fa      	ldr	r2, [r7, #28]
 8007864:	429a      	cmp	r2, r3
 8007866:	d902      	bls.n	800786e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d13d      	bne.n	80078ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	685a      	ldr	r2, [r3, #4]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800787c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007886:	d111      	bne.n	80078ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007890:	d004      	beq.n	800789c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800789a:	d107      	bne.n	80078ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078b4:	d10f      	bne.n	80078d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078c4:	601a      	str	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e017      	b.n	800791a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	3b01      	subs	r3, #1
 80078f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4013      	ands	r3, r2
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	429a      	cmp	r2, r3
 8007908:	bf0c      	ite	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	2300      	movne	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	461a      	mov	r2, r3
 8007912:	79fb      	ldrb	r3, [r7, #7]
 8007914:	429a      	cmp	r2, r3
 8007916:	d19b      	bne.n	8007850 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007918:	2300      	movs	r3, #0
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	20000000 	.word	0x20000000

08007928 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b08a      	sub	sp, #40	@ 0x28
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800793a:	f7fa fb11 	bl	8001f60 <HAL_GetTick>
 800793e:	4602      	mov	r2, r0
 8007940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007942:	1a9b      	subs	r3, r3, r2
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	4413      	add	r3, r2
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800794a:	f7fa fb09 	bl	8001f60 <HAL_GetTick>
 800794e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	330c      	adds	r3, #12
 8007956:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007958:	4b3d      	ldr	r3, [pc, #244]	@ (8007a50 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	4613      	mov	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	4413      	add	r3, r2
 8007962:	00da      	lsls	r2, r3, #3
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	0d1b      	lsrs	r3, r3, #20
 8007968:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800796a:	fb02 f303 	mul.w	r3, r2, r3
 800796e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007970:	e060      	b.n	8007a34 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007978:	d107      	bne.n	800798a <SPI_WaitFifoStateUntilTimeout+0x62>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	b2db      	uxtb	r3, r3
 8007986:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007988:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007990:	d050      	beq.n	8007a34 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007992:	f7fa fae5 	bl	8001f60 <HAL_GetTick>
 8007996:	4602      	mov	r2, r0
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	1ad3      	subs	r3, r2, r3
 800799c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800799e:	429a      	cmp	r2, r3
 80079a0:	d902      	bls.n	80079a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80079a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d13d      	bne.n	8007a24 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	685a      	ldr	r2, [r3, #4]
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079c0:	d111      	bne.n	80079e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079ca:	d004      	beq.n	80079d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d4:	d107      	bne.n	80079e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ee:	d10f      	bne.n	8007a10 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a0e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	e010      	b.n	8007a46 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4013      	ands	r3, r2
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d196      	bne.n	8007972 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3728      	adds	r7, #40	@ 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000000 	.word	0x20000000

08007a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f7ff ff5b 	bl	8007928 <SPI_WaitFifoStateUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d007      	beq.n	8007a88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a7c:	f043 0220 	orr.w	r2, r3, #32
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e027      	b.n	8007ad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2180      	movs	r1, #128	@ 0x80
 8007a92:	68f8      	ldr	r0, [r7, #12]
 8007a94:	f7ff fec0 	bl	8007818 <SPI_WaitFlagStateUntilTimeout>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aa2:	f043 0220 	orr.w	r2, r3, #32
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e014      	b.n	8007ad8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	9300      	str	r3, [sp, #0]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff ff34 	bl	8007928 <SPI_WaitFifoStateUntilTimeout>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007aca:	f043 0220 	orr.w	r2, r3, #32
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e000      	b.n	8007ad8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e042      	b.n	8007b78 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fa f943 	bl	8001d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2224      	movs	r2, #36	@ 0x24
 8007b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0201 	bic.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 faf4 	bl	8008118 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f825 	bl	8007b80 <UART_SetConfig>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d101      	bne.n	8007b40 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e01b      	b.n	8007b78 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689a      	ldr	r2, [r3, #8]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fb73 	bl	800825c <UART_CheckIdleState>
 8007b76:	4603      	mov	r3, r0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b84:	b08c      	sub	sp, #48	@ 0x30
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	4bab      	ldr	r3, [pc, #684]	@ (8007e5c <UART_SetConfig+0x2dc>)
 8007bb0:	4013      	ands	r3, r2
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	6812      	ldr	r2, [r2, #0]
 8007bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb8:	430b      	orrs	r3, r1
 8007bba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	68da      	ldr	r2, [r3, #12]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4aa0      	ldr	r2, [pc, #640]	@ (8007e60 <UART_SetConfig+0x2e0>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d004      	beq.n	8007bec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6a1b      	ldr	r3, [r3, #32]
 8007be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007be8:	4313      	orrs	r3, r2
 8007bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007bf6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007bfa:	697a      	ldr	r2, [r7, #20]
 8007bfc:	6812      	ldr	r2, [r2, #0]
 8007bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c00:	430b      	orrs	r3, r1
 8007c02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c0a:	f023 010f 	bic.w	r1, r3, #15
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a91      	ldr	r2, [pc, #580]	@ (8007e64 <UART_SetConfig+0x2e4>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d125      	bne.n	8007c70 <UART_SetConfig+0xf0>
 8007c24:	4b90      	ldr	r3, [pc, #576]	@ (8007e68 <UART_SetConfig+0x2e8>)
 8007c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b03      	cmp	r3, #3
 8007c30:	d81a      	bhi.n	8007c68 <UART_SetConfig+0xe8>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <UART_SetConfig+0xb8>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007c49 	.word	0x08007c49
 8007c3c:	08007c59 	.word	0x08007c59
 8007c40:	08007c51 	.word	0x08007c51
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4e:	e0d6      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007c50:	2302      	movs	r3, #2
 8007c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c56:	e0d2      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5e:	e0ce      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c66:	e0ca      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6e:	e0c6      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a7d      	ldr	r2, [pc, #500]	@ (8007e6c <UART_SetConfig+0x2ec>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d138      	bne.n	8007cec <UART_SetConfig+0x16c>
 8007c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e68 <UART_SetConfig+0x2e8>)
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c80:	f003 030c 	and.w	r3, r3, #12
 8007c84:	2b0c      	cmp	r3, #12
 8007c86:	d82d      	bhi.n	8007ce4 <UART_SetConfig+0x164>
 8007c88:	a201      	add	r2, pc, #4	@ (adr r2, 8007c90 <UART_SetConfig+0x110>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007cc5 	.word	0x08007cc5
 8007c94:	08007ce5 	.word	0x08007ce5
 8007c98:	08007ce5 	.word	0x08007ce5
 8007c9c:	08007ce5 	.word	0x08007ce5
 8007ca0:	08007cd5 	.word	0x08007cd5
 8007ca4:	08007ce5 	.word	0x08007ce5
 8007ca8:	08007ce5 	.word	0x08007ce5
 8007cac:	08007ce5 	.word	0x08007ce5
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	08007ce5 	.word	0x08007ce5
 8007cb8:	08007ce5 	.word	0x08007ce5
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cca:	e098      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd2:	e094      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007cd4:	2304      	movs	r3, #4
 8007cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cda:	e090      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007cdc:	2308      	movs	r3, #8
 8007cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce2:	e08c      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cea:	e088      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a5f      	ldr	r2, [pc, #380]	@ (8007e70 <UART_SetConfig+0x2f0>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d125      	bne.n	8007d42 <UART_SetConfig+0x1c2>
 8007cf6:	4b5c      	ldr	r3, [pc, #368]	@ (8007e68 <UART_SetConfig+0x2e8>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cfc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007d00:	2b30      	cmp	r3, #48	@ 0x30
 8007d02:	d016      	beq.n	8007d32 <UART_SetConfig+0x1b2>
 8007d04:	2b30      	cmp	r3, #48	@ 0x30
 8007d06:	d818      	bhi.n	8007d3a <UART_SetConfig+0x1ba>
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d00a      	beq.n	8007d22 <UART_SetConfig+0x1a2>
 8007d0c:	2b20      	cmp	r3, #32
 8007d0e:	d814      	bhi.n	8007d3a <UART_SetConfig+0x1ba>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <UART_SetConfig+0x19a>
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d008      	beq.n	8007d2a <UART_SetConfig+0x1aa>
 8007d18:	e00f      	b.n	8007d3a <UART_SetConfig+0x1ba>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d20:	e06d      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d22:	2302      	movs	r3, #2
 8007d24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d28:	e069      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d2a:	2304      	movs	r3, #4
 8007d2c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d30:	e065      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d32:	2308      	movs	r3, #8
 8007d34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d38:	e061      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d3a:	2310      	movs	r3, #16
 8007d3c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d40:	e05d      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a4b      	ldr	r2, [pc, #300]	@ (8007e74 <UART_SetConfig+0x2f4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d125      	bne.n	8007d98 <UART_SetConfig+0x218>
 8007d4c:	4b46      	ldr	r3, [pc, #280]	@ (8007e68 <UART_SetConfig+0x2e8>)
 8007d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d52:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d58:	d016      	beq.n	8007d88 <UART_SetConfig+0x208>
 8007d5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d5c:	d818      	bhi.n	8007d90 <UART_SetConfig+0x210>
 8007d5e:	2b80      	cmp	r3, #128	@ 0x80
 8007d60:	d00a      	beq.n	8007d78 <UART_SetConfig+0x1f8>
 8007d62:	2b80      	cmp	r3, #128	@ 0x80
 8007d64:	d814      	bhi.n	8007d90 <UART_SetConfig+0x210>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <UART_SetConfig+0x1f0>
 8007d6a:	2b40      	cmp	r3, #64	@ 0x40
 8007d6c:	d008      	beq.n	8007d80 <UART_SetConfig+0x200>
 8007d6e:	e00f      	b.n	8007d90 <UART_SetConfig+0x210>
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d76:	e042      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d78:	2302      	movs	r3, #2
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7e:	e03e      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d80:	2304      	movs	r3, #4
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d86:	e03a      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d88:	2308      	movs	r3, #8
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d8e:	e036      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d90:	2310      	movs	r3, #16
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d96:	e032      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a30      	ldr	r2, [pc, #192]	@ (8007e60 <UART_SetConfig+0x2e0>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d12a      	bne.n	8007df8 <UART_SetConfig+0x278>
 8007da2:	4b31      	ldr	r3, [pc, #196]	@ (8007e68 <UART_SetConfig+0x2e8>)
 8007da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007dac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007db0:	d01a      	beq.n	8007de8 <UART_SetConfig+0x268>
 8007db2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007db6:	d81b      	bhi.n	8007df0 <UART_SetConfig+0x270>
 8007db8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dbc:	d00c      	beq.n	8007dd8 <UART_SetConfig+0x258>
 8007dbe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dc2:	d815      	bhi.n	8007df0 <UART_SetConfig+0x270>
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <UART_SetConfig+0x250>
 8007dc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dcc:	d008      	beq.n	8007de0 <UART_SetConfig+0x260>
 8007dce:	e00f      	b.n	8007df0 <UART_SetConfig+0x270>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd6:	e012      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007dd8:	2302      	movs	r3, #2
 8007dda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dde:	e00e      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007de0:	2304      	movs	r3, #4
 8007de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007de6:	e00a      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007de8:	2308      	movs	r3, #8
 8007dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dee:	e006      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007df0:	2310      	movs	r3, #16
 8007df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df6:	e002      	b.n	8007dfe <UART_SetConfig+0x27e>
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a17      	ldr	r2, [pc, #92]	@ (8007e60 <UART_SetConfig+0x2e0>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	f040 80a8 	bne.w	8007f5a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d834      	bhi.n	8007e7c <UART_SetConfig+0x2fc>
 8007e12:	a201      	add	r2, pc, #4	@ (adr r2, 8007e18 <UART_SetConfig+0x298>)
 8007e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e7d 	.word	0x08007e7d
 8007e20:	08007e45 	.word	0x08007e45
 8007e24:	08007e7d 	.word	0x08007e7d
 8007e28:	08007e4b 	.word	0x08007e4b
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	08007e7d 	.word	0x08007e7d
 8007e34:	08007e7d 	.word	0x08007e7d
 8007e38:	08007e53 	.word	0x08007e53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e3c:	f7fe fed8 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8007e40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e42:	e021      	b.n	8007e88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e44:	4b0c      	ldr	r3, [pc, #48]	@ (8007e78 <UART_SetConfig+0x2f8>)
 8007e46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e48:	e01e      	b.n	8007e88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4a:	f7fe fe63 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8007e4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e50:	e01a      	b.n	8007e88 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e58:	e016      	b.n	8007e88 <UART_SetConfig+0x308>
 8007e5a:	bf00      	nop
 8007e5c:	cfff69f3 	.word	0xcfff69f3
 8007e60:	40008000 	.word	0x40008000
 8007e64:	40013800 	.word	0x40013800
 8007e68:	40021000 	.word	0x40021000
 8007e6c:	40004400 	.word	0x40004400
 8007e70:	40004800 	.word	0x40004800
 8007e74:	40004c00 	.word	0x40004c00
 8007e78:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e86:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	f000 812a 	beq.w	80080e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e94:	4a9e      	ldr	r2, [pc, #632]	@ (8008110 <UART_SetConfig+0x590>)
 8007e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	4413      	add	r3, r2
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d305      	bcc.n	8007ec0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eba:	69ba      	ldr	r2, [r7, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d903      	bls.n	8007ec8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ec6:	e10d      	b.n	80080e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eca:	2200      	movs	r2, #0
 8007ecc:	60bb      	str	r3, [r7, #8]
 8007ece:	60fa      	str	r2, [r7, #12]
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed4:	4a8e      	ldr	r2, [pc, #568]	@ (8008110 <UART_SetConfig+0x590>)
 8007ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	2200      	movs	r2, #0
 8007ede:	603b      	str	r3, [r7, #0]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eea:	f7f8 fddf 	bl	8000aac <__aeabi_uldivmod>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4610      	mov	r0, r2
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	f04f 0200 	mov.w	r2, #0
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	020b      	lsls	r3, r1, #8
 8007f00:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f04:	0202      	lsls	r2, r0, #8
 8007f06:	6979      	ldr	r1, [r7, #20]
 8007f08:	6849      	ldr	r1, [r1, #4]
 8007f0a:	0849      	lsrs	r1, r1, #1
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	4605      	mov	r5, r0
 8007f12:	eb12 0804 	adds.w	r8, r2, r4
 8007f16:	eb43 0905 	adc.w	r9, r3, r5
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	469a      	mov	sl, r3
 8007f22:	4693      	mov	fp, r2
 8007f24:	4652      	mov	r2, sl
 8007f26:	465b      	mov	r3, fp
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 fdbe 	bl	8000aac <__aeabi_uldivmod>
 8007f30:	4602      	mov	r2, r0
 8007f32:	460b      	mov	r3, r1
 8007f34:	4613      	mov	r3, r2
 8007f36:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f3e:	d308      	bcc.n	8007f52 <UART_SetConfig+0x3d2>
 8007f40:	6a3b      	ldr	r3, [r7, #32]
 8007f42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f46:	d204      	bcs.n	8007f52 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6a3a      	ldr	r2, [r7, #32]
 8007f4e:	60da      	str	r2, [r3, #12]
 8007f50:	e0c8      	b.n	80080e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f58:	e0c4      	b.n	80080e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f62:	d167      	bne.n	8008034 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007f64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f68:	2b08      	cmp	r3, #8
 8007f6a:	d828      	bhi.n	8007fbe <UART_SetConfig+0x43e>
 8007f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <UART_SetConfig+0x3f4>)
 8007f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f72:	bf00      	nop
 8007f74:	08007f99 	.word	0x08007f99
 8007f78:	08007fa1 	.word	0x08007fa1
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	08007fbf 	.word	0x08007fbf
 8007f84:	08007faf 	.word	0x08007faf
 8007f88:	08007fbf 	.word	0x08007fbf
 8007f8c:	08007fbf 	.word	0x08007fbf
 8007f90:	08007fbf 	.word	0x08007fbf
 8007f94:	08007fb7 	.word	0x08007fb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f98:	f7fe fe2a 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8007f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f9e:	e014      	b.n	8007fca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fa0:	f7fe fe3c 	bl	8006c1c <HAL_RCC_GetPCLK2Freq>
 8007fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fa6:	e010      	b.n	8007fca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa8:	4b5a      	ldr	r3, [pc, #360]	@ (8008114 <UART_SetConfig+0x594>)
 8007faa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fac:	e00d      	b.n	8007fca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fae:	f7fe fdb1 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8007fb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fb4:	e009      	b.n	8007fca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fbc:	e005      	b.n	8007fca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8089 	beq.w	80080e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd6:	4a4e      	ldr	r2, [pc, #312]	@ (8008110 <UART_SetConfig+0x590>)
 8007fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe4:	005a      	lsls	r2, r3, #1
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	085b      	lsrs	r3, r3, #1
 8007fec:	441a      	add	r2, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff8:	6a3b      	ldr	r3, [r7, #32]
 8007ffa:	2b0f      	cmp	r3, #15
 8007ffc:	d916      	bls.n	800802c <UART_SetConfig+0x4ac>
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008004:	d212      	bcs.n	800802c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	b29b      	uxth	r3, r3
 800800a:	f023 030f 	bic.w	r3, r3, #15
 800800e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	085b      	lsrs	r3, r3, #1
 8008014:	b29b      	uxth	r3, r3
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	b29a      	uxth	r2, r3
 800801c:	8bfb      	ldrh	r3, [r7, #30]
 800801e:	4313      	orrs	r3, r2
 8008020:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	8bfa      	ldrh	r2, [r7, #30]
 8008028:	60da      	str	r2, [r3, #12]
 800802a:	e05b      	b.n	80080e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008032:	e057      	b.n	80080e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008034:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008038:	2b08      	cmp	r3, #8
 800803a:	d828      	bhi.n	800808e <UART_SetConfig+0x50e>
 800803c:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <UART_SetConfig+0x4c4>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008069 	.word	0x08008069
 8008048:	08008071 	.word	0x08008071
 800804c:	08008079 	.word	0x08008079
 8008050:	0800808f 	.word	0x0800808f
 8008054:	0800807f 	.word	0x0800807f
 8008058:	0800808f 	.word	0x0800808f
 800805c:	0800808f 	.word	0x0800808f
 8008060:	0800808f 	.word	0x0800808f
 8008064:	08008087 	.word	0x08008087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008068:	f7fe fdc2 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 800806c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800806e:	e014      	b.n	800809a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008070:	f7fe fdd4 	bl	8006c1c <HAL_RCC_GetPCLK2Freq>
 8008074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008076:	e010      	b.n	800809a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008078:	4b26      	ldr	r3, [pc, #152]	@ (8008114 <UART_SetConfig+0x594>)
 800807a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800807c:	e00d      	b.n	800809a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807e:	f7fe fd49 	bl	8006b14 <HAL_RCC_GetSysClockFreq>
 8008082:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008084:	e009      	b.n	800809a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800808a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800808c:	e005      	b.n	800809a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008098:	bf00      	nop
    }

    if (pclk != 0U)
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	2b00      	cmp	r3, #0
 800809e:	d021      	beq.n	80080e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a4:	4a1a      	ldr	r2, [pc, #104]	@ (8008110 <UART_SetConfig+0x590>)
 80080a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080aa:	461a      	mov	r2, r3
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	d909      	bls.n	80080de <UART_SetConfig+0x55e>
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080d0:	d205      	bcs.n	80080de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60da      	str	r2, [r3, #12]
 80080dc:	e002      	b.n	80080e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	2200      	movs	r2, #0
 80080f8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	2200      	movs	r2, #0
 80080fe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008100:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008104:	4618      	mov	r0, r3
 8008106:	3730      	adds	r7, #48	@ 0x30
 8008108:	46bd      	mov	sp, r7
 800810a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810e:	bf00      	nop
 8008110:	0800de4c 	.word	0x0800de4c
 8008114:	00f42400 	.word	0x00f42400

08008118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b00      	cmp	r3, #0
 800812a:	d00a      	beq.n	8008142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	430a      	orrs	r2, r1
 8008140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00a      	beq.n	8008164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	430a      	orrs	r2, r1
 8008162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00a      	beq.n	8008186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	430a      	orrs	r2, r1
 8008184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	f003 0304 	and.w	r3, r3, #4
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	430a      	orrs	r2, r1
 80081a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ac:	f003 0310 	and.w	r3, r3, #16
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d00a      	beq.n	80081ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ce:	f003 0320 	and.w	r3, r3, #32
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00a      	beq.n	80081ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	430a      	orrs	r2, r1
 80081ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01a      	beq.n	800822e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008216:	d10a      	bne.n	800822e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	430a      	orrs	r2, r1
 800822c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	430a      	orrs	r2, r1
 800824e:	605a      	str	r2, [r3, #4]
  }
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b098      	sub	sp, #96	@ 0x60
 8008260:	af02      	add	r7, sp, #8
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800826c:	f7f9 fe78 	bl	8001f60 <HAL_GetTick>
 8008270:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0308 	and.w	r3, r3, #8
 800827c:	2b08      	cmp	r3, #8
 800827e:	d12f      	bne.n	80082e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008280:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008288:	2200      	movs	r2, #0
 800828a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f88e 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d022      	beq.n	80082e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	e853 3f00 	ldrex	r3, [r3]
 80082a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	461a      	mov	r2, r3
 80082b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80082ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082c0:	e841 2300 	strex	r3, r2, [r1]
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d1e6      	bne.n	800829a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e063      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 0304 	and.w	r3, r3, #4
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d149      	bne.n	8008382 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082f2:	9300      	str	r3, [sp, #0]
 80082f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f6:	2200      	movs	r2, #0
 80082f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f857 	bl	80083b0 <UART_WaitOnFlagUntilTimeout>
 8008302:	4603      	mov	r3, r0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d03c      	beq.n	8008382 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008310:	e853 3f00 	ldrex	r3, [r3]
 8008314:	623b      	str	r3, [r7, #32]
   return(result);
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800831c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008326:	633b      	str	r3, [r7, #48]	@ 0x30
 8008328:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800832c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1e6      	bne.n	8008308 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3308      	adds	r3, #8
 8008340:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60fb      	str	r3, [r7, #12]
   return(result);
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f023 0301 	bic.w	r3, r3, #1
 8008350:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800835a:	61fa      	str	r2, [r7, #28]
 800835c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	69b9      	ldr	r1, [r7, #24]
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	617b      	str	r3, [r7, #20]
   return(result);
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e5      	bne.n	800833a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e012      	b.n	80083a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2220      	movs	r2, #32
 8008386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3758      	adds	r7, #88	@ 0x58
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	e04f      	b.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d04b      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7f9 fdc9 	bl	8001f60 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e04e      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d037      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	2b80      	cmp	r3, #128	@ 0x80
 80083f6:	d034      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	2b40      	cmp	r3, #64	@ 0x40
 80083fc:	d031      	beq.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b08      	cmp	r3, #8
 800840a:	d110      	bne.n	800842e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	2208      	movs	r2, #8
 8008412:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f838 	bl	800848a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2208      	movs	r2, #8
 800841e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2200      	movs	r2, #0
 8008426:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	e029      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008438:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800843c:	d111      	bne.n	8008462 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f81e 	bl	800848a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800845e:	2303      	movs	r3, #3
 8008460:	e00f      	b.n	8008482 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	4013      	ands	r3, r2
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	429a      	cmp	r2, r3
 8008470:	bf0c      	ite	eq
 8008472:	2301      	moveq	r3, #1
 8008474:	2300      	movne	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	429a      	cmp	r2, r3
 800847e:	d0a0      	beq.n	80083c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800848a:	b480      	push	{r7}
 800848c:	b095      	sub	sp, #84	@ 0x54
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80084b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e6      	bne.n	8008492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084da:	f023 0301 	bic.w	r3, r3, #1
 80084de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	3308      	adds	r3, #8
 80084e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084f0:	e841 2300 	strex	r3, r2, [r1]
 80084f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e3      	bne.n	80084c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008500:	2b01      	cmp	r3, #1
 8008502:	d118      	bne.n	8008536 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	60bb      	str	r3, [r7, #8]
   return(result);
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f023 0310 	bic.w	r3, r3, #16
 8008518:	647b      	str	r3, [r7, #68]	@ 0x44
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008522:	61bb      	str	r3, [r7, #24]
 8008524:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008526:	6979      	ldr	r1, [r7, #20]
 8008528:	69ba      	ldr	r2, [r7, #24]
 800852a:	e841 2300 	strex	r3, r2, [r1]
 800852e:	613b      	str	r3, [r7, #16]
   return(result);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1e6      	bne.n	8008504 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2220      	movs	r2, #32
 800853a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800854a:	bf00      	nop
 800854c:	3754      	adds	r7, #84	@ 0x54
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr

08008556 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008556:	b480      	push	{r7}
 8008558:	b085      	sub	sp, #20
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008564:	2b01      	cmp	r3, #1
 8008566:	d101      	bne.n	800856c <HAL_UARTEx_DisableFifoMode+0x16>
 8008568:	2302      	movs	r3, #2
 800856a:	e027      	b.n	80085bc <HAL_UARTEx_DisableFifoMode+0x66>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2224      	movs	r2, #36	@ 0x24
 8008578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800859a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2220      	movs	r2, #32
 80085ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085dc:	2302      	movs	r3, #2
 80085de:	e02d      	b.n	800863c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2224      	movs	r2, #36	@ 0x24
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f022 0201 	bic.w	r2, r2, #1
 8008606:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f84f 	bl	80086c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2220      	movs	r2, #32
 800862e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008654:	2b01      	cmp	r3, #1
 8008656:	d101      	bne.n	800865c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008658:	2302      	movs	r3, #2
 800865a:	e02d      	b.n	80086b8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2224      	movs	r2, #36	@ 0x24
 8008668:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0201 	bic.w	r2, r2, #1
 8008682:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	430a      	orrs	r2, r1
 8008696:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f811 	bl	80086c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d108      	bne.n	80086e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086e0:	e031      	b.n	8008746 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086e2:	2308      	movs	r3, #8
 80086e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086e6:	2308      	movs	r3, #8
 80086e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	0e5b      	lsrs	r3, r3, #25
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	f003 0307 	and.w	r3, r3, #7
 80086f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	0f5b      	lsrs	r3, r3, #29
 8008702:	b2db      	uxtb	r3, r3
 8008704:	f003 0307 	and.w	r3, r3, #7
 8008708:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800870a:	7bbb      	ldrb	r3, [r7, #14]
 800870c:	7b3a      	ldrb	r2, [r7, #12]
 800870e:	4911      	ldr	r1, [pc, #68]	@ (8008754 <UARTEx_SetNbDataToProcess+0x94>)
 8008710:	5c8a      	ldrb	r2, [r1, r2]
 8008712:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008716:	7b3a      	ldrb	r2, [r7, #12]
 8008718:	490f      	ldr	r1, [pc, #60]	@ (8008758 <UARTEx_SetNbDataToProcess+0x98>)
 800871a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800871c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008720:	b29a      	uxth	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	7b7a      	ldrb	r2, [r7, #13]
 800872c:	4909      	ldr	r1, [pc, #36]	@ (8008754 <UARTEx_SetNbDataToProcess+0x94>)
 800872e:	5c8a      	ldrb	r2, [r1, r2]
 8008730:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008734:	7b7a      	ldrb	r2, [r7, #13]
 8008736:	4908      	ldr	r1, [pc, #32]	@ (8008758 <UARTEx_SetNbDataToProcess+0x98>)
 8008738:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800873a:	fb93 f3f2 	sdiv	r3, r3, r2
 800873e:	b29a      	uxth	r2, r3
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008746:	bf00      	nop
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008750:	4770      	bx	lr
 8008752:	bf00      	nop
 8008754:	0800de64 	.word	0x0800de64
 8008758:	0800de6c 	.word	0x0800de6c

0800875c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800875c:	b480      	push	{r7}
 800875e:	b08b      	sub	sp, #44	@ 0x2c
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	fa93 f3a3 	rbit	r3, r3
 8008776:	613b      	str	r3, [r7, #16]
  return result;
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d101      	bne.n	8008786 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008782:	2320      	movs	r3, #32
 8008784:	e003      	b.n	800878e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	fab3 f383 	clz	r3, r3
 800878c:	b2db      	uxtb	r3, r3
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	2103      	movs	r1, #3
 8008792:	fa01 f303 	lsl.w	r3, r1, r3
 8008796:	43db      	mvns	r3, r3
 8008798:	401a      	ands	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	fa93 f3a3 	rbit	r3, r3
 80087a4:	61fb      	str	r3, [r7, #28]
  return result;
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80087aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80087b0:	2320      	movs	r3, #32
 80087b2:	e003      	b.n	80087bc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80087b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b6:	fab3 f383 	clz	r3, r3
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	6879      	ldr	r1, [r7, #4]
 80087c0:	fa01 f303 	lsl.w	r3, r1, r3
 80087c4:	431a      	orrs	r2, r3
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	601a      	str	r2, [r3, #0]
}
 80087ca:	bf00      	nop
 80087cc:	372c      	adds	r7, #44	@ 0x2c
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b085      	sub	sp, #20
 80087da:	af00      	add	r7, sp, #0
 80087dc:	60f8      	str	r0, [r7, #12]
 80087de:	60b9      	str	r1, [r7, #8]
 80087e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	43db      	mvns	r3, r3
 80087ea:	401a      	ands	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	6879      	ldr	r1, [r7, #4]
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	431a      	orrs	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	605a      	str	r2, [r3, #4]
}
 80087fa:	bf00      	nop
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008806:	b480      	push	{r7}
 8008808:	b08b      	sub	sp, #44	@ 0x2c
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	689a      	ldr	r2, [r3, #8]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	fa93 f3a3 	rbit	r3, r3
 8008820:	613b      	str	r3, [r7, #16]
  return result;
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800882c:	2320      	movs	r3, #32
 800882e:	e003      	b.n	8008838 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	fab3 f383 	clz	r3, r3
 8008836:	b2db      	uxtb	r3, r3
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	2103      	movs	r1, #3
 800883c:	fa01 f303 	lsl.w	r3, r1, r3
 8008840:	43db      	mvns	r3, r3
 8008842:	401a      	ands	r2, r3
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	fa93 f3a3 	rbit	r3, r3
 800884e:	61fb      	str	r3, [r7, #28]
  return result;
 8008850:	69fb      	ldr	r3, [r7, #28]
 8008852:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800885a:	2320      	movs	r3, #32
 800885c:	e003      	b.n	8008866 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	fab3 f383 	clz	r3, r3
 8008864:	b2db      	uxtb	r3, r3
 8008866:	005b      	lsls	r3, r3, #1
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	fa01 f303 	lsl.w	r3, r1, r3
 800886e:	431a      	orrs	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008874:	bf00      	nop
 8008876:	372c      	adds	r7, #44	@ 0x2c
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008880:	b480      	push	{r7}
 8008882:	b08b      	sub	sp, #44	@ 0x2c
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	68da      	ldr	r2, [r3, #12]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	fa93 f3a3 	rbit	r3, r3
 800889a:	613b      	str	r3, [r7, #16]
  return result;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80088a6:	2320      	movs	r3, #32
 80088a8:	e003      	b.n	80088b2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	fab3 f383 	clz	r3, r3
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	2103      	movs	r1, #3
 80088b6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ba:	43db      	mvns	r3, r3
 80088bc:	401a      	ands	r2, r3
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c2:	6a3b      	ldr	r3, [r7, #32]
 80088c4:	fa93 f3a3 	rbit	r3, r3
 80088c8:	61fb      	str	r3, [r7, #28]
  return result;
 80088ca:	69fb      	ldr	r3, [r7, #28]
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80088ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d101      	bne.n	80088d8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80088d4:	2320      	movs	r3, #32
 80088d6:	e003      	b.n	80088e0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80088d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088da:	fab3 f383 	clz	r3, r3
 80088de:	b2db      	uxtb	r3, r3
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	fa01 f303 	lsl.w	r3, r1, r3
 80088e8:	431a      	orrs	r2, r3
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	60da      	str	r2, [r3, #12]
}
 80088ee:	bf00      	nop
 80088f0:	372c      	adds	r7, #44	@ 0x2c
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b08b      	sub	sp, #44	@ 0x2c
 80088fe:	af00      	add	r7, sp, #0
 8008900:	60f8      	str	r0, [r7, #12]
 8008902:	60b9      	str	r1, [r7, #8]
 8008904:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6a1a      	ldr	r2, [r3, #32]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	fa93 f3a3 	rbit	r3, r3
 8008914:	613b      	str	r3, [r7, #16]
  return result;
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800891a:	69bb      	ldr	r3, [r7, #24]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008920:	2320      	movs	r3, #32
 8008922:	e003      	b.n	800892c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	fab3 f383 	clz	r3, r3
 800892a:	b2db      	uxtb	r3, r3
 800892c:	009b      	lsls	r3, r3, #2
 800892e:	210f      	movs	r1, #15
 8008930:	fa01 f303 	lsl.w	r3, r1, r3
 8008934:	43db      	mvns	r3, r3
 8008936:	401a      	ands	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	fa93 f3a3 	rbit	r3, r3
 8008942:	61fb      	str	r3, [r7, #28]
  return result;
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800894e:	2320      	movs	r3, #32
 8008950:	e003      	b.n	800895a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008954:	fab3 f383 	clz	r3, r3
 8008958:	b2db      	uxtb	r3, r3
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	6879      	ldr	r1, [r7, #4]
 800895e:	fa01 f303 	lsl.w	r3, r1, r3
 8008962:	431a      	orrs	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008968:	bf00      	nop
 800896a:	372c      	adds	r7, #44	@ 0x2c
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008974:	b480      	push	{r7}
 8008976:	b08b      	sub	sp, #44	@ 0x2c
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	0a1b      	lsrs	r3, r3, #8
 8008988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	fa93 f3a3 	rbit	r3, r3
 8008990:	613b      	str	r3, [r7, #16]
  return result;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d101      	bne.n	80089a0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800899c:	2320      	movs	r3, #32
 800899e:	e003      	b.n	80089a8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	fab3 f383 	clz	r3, r3
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	210f      	movs	r1, #15
 80089ac:	fa01 f303 	lsl.w	r3, r1, r3
 80089b0:	43db      	mvns	r3, r3
 80089b2:	401a      	ands	r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	fa93 f3a3 	rbit	r3, r3
 80089c0:	61fb      	str	r3, [r7, #28]
  return result;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80089c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d101      	bne.n	80089d0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80089cc:	2320      	movs	r3, #32
 80089ce:	e003      	b.n	80089d8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80089d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d2:	fab3 f383 	clz	r3, r3
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	6879      	ldr	r1, [r7, #4]
 80089dc:	fa01 f303 	lsl.w	r3, r1, r3
 80089e0:	431a      	orrs	r2, r3
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80089e6:	bf00      	nop
 80089e8:	372c      	adds	r7, #44	@ 0x2c
 80089ea:	46bd      	mov	sp, r7
 80089ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f0:	4770      	bx	lr

080089f2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b088      	sub	sp, #32
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
 80089fa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	fa93 f3a3 	rbit	r3, r3
 8008a08:	60fb      	str	r3, [r7, #12]
  return result;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <LL_GPIO_Init+0x26>
    return 32U;
 8008a14:	2320      	movs	r3, #32
 8008a16:	e003      	b.n	8008a20 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	fab3 f383 	clz	r3, r3
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008a22:	e048      	b.n	8008ab6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	2101      	movs	r1, #1
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8008a30:	4013      	ands	r3, r2
 8008a32:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d03a      	beq.n	8008ab0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d003      	beq.n	8008a4a <LL_GPIO_Init+0x58>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d10e      	bne.n	8008a68 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	69b9      	ldr	r1, [r7, #24]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7ff fed7 	bl	8008806 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	6819      	ldr	r1, [r3, #0]
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	461a      	mov	r2, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff feb7 	bl	80087d6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	69b9      	ldr	r1, [r7, #24]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7ff ff05 	bl	8008880 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d111      	bne.n	8008aa2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	2bff      	cmp	r3, #255	@ 0xff
 8008a82:	d807      	bhi.n	8008a94 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	461a      	mov	r2, r3
 8008a8a:	69b9      	ldr	r1, [r7, #24]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f7ff ff34 	bl	80088fa <LL_GPIO_SetAFPin_0_7>
 8008a92:	e006      	b.n	8008aa2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	461a      	mov	r2, r3
 8008a9a:	69b9      	ldr	r1, [r7, #24]
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f7ff ff69 	bl	8008974 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	69b9      	ldr	r1, [r7, #24]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fe56 	bl	800875c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1af      	bne.n	8008a24 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3720      	adds	r7, #32
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ade:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008ae2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b04:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008b08:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008b10:	b29a      	uxth	r2, r3
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	43db      	mvns	r3, r3
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	b29a      	uxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b085      	sub	sp, #20
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	60f8      	str	r0, [r7, #12]
 8008b3a:	1d3b      	adds	r3, r7, #4
 8008b3c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3714      	adds	r7, #20
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr
	...

08008b70 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b09d      	sub	sp, #116	@ 0x74
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	881b      	ldrh	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b96:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	78db      	ldrb	r3, [r3, #3]
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d81f      	bhi.n	8008be2 <USB_ActivateEndpoint+0x72>
 8008ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba8 <USB_ActivateEndpoint+0x38>)
 8008ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba8:	08008bb9 	.word	0x08008bb9
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008beb 	.word	0x08008beb
 8008bb4:	08008bc7 	.word	0x08008bc7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008bb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008bc0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008bc4:	e012      	b.n	8008bec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008bc6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bca:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008bce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008bd2:	e00b      	b.n	8008bec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008bd4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bd8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008bdc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008be0:	e004      	b.n	8008bec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008be8:	e000      	b.n	8008bec <USB_ActivateEndpoint+0x7c>
      break;
 8008bea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	441a      	add	r2, r3
 8008bf6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	b21b      	sxth	r3, r3
 8008c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c26:	b21a      	sxth	r2, r3
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	781b      	ldrb	r3, [r3, #0]
 8008c2c:	b21b      	sxth	r3, r3
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	b21b      	sxth	r3, r3
 8008c32:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	441a      	add	r2, r3
 8008c40:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008c44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	7b1b      	ldrb	r3, [r3, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f040 8178 	bne.w	8008f52 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	f000 8084 	beq.w	8008d74 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	61bb      	str	r3, [r7, #24]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c76:	b29b      	uxth	r3, r3
 8008c78:	461a      	mov	r2, r3
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	00da      	lsls	r2, r3, #3
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	4413      	add	r3, r2
 8008c8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c8e:	617b      	str	r3, [r7, #20]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	88db      	ldrh	r3, [r3, #6]
 8008c94:	085b      	lsrs	r3, r3, #1
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ca0:	687a      	ldr	r2, [r7, #4]
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	881b      	ldrh	r3, [r3, #0]
 8008cac:	827b      	strh	r3, [r7, #18]
 8008cae:	8a7b      	ldrh	r3, [r7, #18]
 8008cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01b      	beq.n	8008cf0 <USB_ActivateEndpoint+0x180>
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	881b      	ldrh	r3, [r3, #0]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cce:	823b      	strh	r3, [r7, #16]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	441a      	add	r2, r3
 8008cda:	8a3b      	ldrh	r3, [r7, #16]
 8008cdc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ce0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	78db      	ldrb	r3, [r3, #3]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d020      	beq.n	8008d3a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d0e:	81bb      	strh	r3, [r7, #12]
 8008d10:	89bb      	ldrh	r3, [r7, #12]
 8008d12:	f083 0320 	eor.w	r3, r3, #32
 8008d16:	81bb      	strh	r3, [r7, #12]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	441a      	add	r2, r3
 8008d22:	89bb      	ldrh	r3, [r7, #12]
 8008d24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	8013      	strh	r3, [r2, #0]
 8008d38:	e2d5      	b.n	80092e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	881b      	ldrh	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d50:	81fb      	strh	r3, [r7, #14]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	441a      	add	r2, r3
 8008d5c:	89fb      	ldrh	r3, [r7, #14]
 8008d5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	8013      	strh	r3, [r2, #0]
 8008d72:	e2b8      	b.n	80092e6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	461a      	mov	r2, r3
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	4413      	add	r3, r2
 8008d86:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	00da      	lsls	r2, r3, #3
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	4413      	add	r3, r2
 8008d92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	88db      	ldrh	r3, [r3, #6]
 8008d9c:	085b      	lsrs	r3, r3, #1
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	461a      	mov	r2, r3
 8008db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db8:	4413      	add	r3, r2
 8008dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	00da      	lsls	r2, r3, #3
 8008dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dce:	881b      	ldrh	r3, [r3, #0]
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	801a      	strh	r2, [r3, #0]
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <USB_ActivateEndpoint+0x28a>
 8008de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df6:	801a      	strh	r2, [r3, #0]
 8008df8:	e039      	b.n	8008e6e <USB_ActivateEndpoint+0x2fe>
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e00:	d818      	bhi.n	8008e34 <USB_ActivateEndpoint+0x2c4>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <USB_ActivateEndpoint+0x2ac>
 8008e16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e18:	3301      	adds	r3, #1
 8008e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	029b      	lsls	r3, r3, #10
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e30:	801a      	strh	r2, [r3, #0]
 8008e32:	e01c      	b.n	8008e6e <USB_ActivateEndpoint+0x2fe>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	095b      	lsrs	r3, r3, #5
 8008e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f003 031f 	and.w	r3, r3, #31
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d102      	bne.n	8008e4e <USB_ActivateEndpoint+0x2de>
 8008e48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	029b      	lsls	r3, r3, #10
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e68:	b29a      	uxth	r2, r3
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008e7c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d01b      	beq.n	8008ebe <USB_ActivateEndpoint+0x34e>
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	4413      	add	r3, r2
 8008e90:	881b      	ldrh	r3, [r3, #0]
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e9c:	843b      	strh	r3, [r7, #32]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	441a      	add	r2, r3
 8008ea8:	8c3b      	ldrh	r3, [r7, #32]
 8008eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d124      	bne.n	8008f10 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	b29b      	uxth	r3, r3
 8008ed4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008edc:	83bb      	strh	r3, [r7, #28]
 8008ede:	8bbb      	ldrh	r3, [r7, #28]
 8008ee0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ee4:	83bb      	strh	r3, [r7, #28]
 8008ee6:	8bbb      	ldrh	r3, [r7, #28]
 8008ee8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008eec:	83bb      	strh	r3, [r7, #28]
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	441a      	add	r2, r3
 8008ef8:	8bbb      	ldrh	r3, [r7, #28]
 8008efa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	8013      	strh	r3, [r2, #0]
 8008f0e:	e1ea      	b.n	80092e6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008f10:	687a      	ldr	r2, [r7, #4]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f26:	83fb      	strh	r3, [r7, #30]
 8008f28:	8bfb      	ldrh	r3, [r7, #30]
 8008f2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f2e:	83fb      	strh	r3, [r7, #30]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	441a      	add	r2, r3
 8008f3a:	8bfb      	ldrh	r3, [r7, #30]
 8008f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	8013      	strh	r3, [r2, #0]
 8008f50:	e1c9      	b.n	80092e6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	78db      	ldrb	r3, [r3, #3]
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d11e      	bne.n	8008f98 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	881b      	ldrh	r3, [r3, #0]
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f70:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	441a      	add	r2, r3
 8008f7e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f8a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	8013      	strh	r3, [r2, #0]
 8008f96:	e01d      	b.n	8008fd4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fae:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	441a      	add	r2, r3
 8008fbc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fe4:	4413      	add	r3, r2
 8008fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	00da      	lsls	r2, r3, #3
 8008fee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	891b      	ldrh	r3, [r3, #8]
 8008ffc:	085b      	lsrs	r3, r3, #1
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	005b      	lsls	r3, r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009006:	801a      	strh	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	657b      	str	r3, [r7, #84]	@ 0x54
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009012:	b29b      	uxth	r3, r3
 8009014:	461a      	mov	r2, r3
 8009016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009018:	4413      	add	r3, r2
 800901a:	657b      	str	r3, [r7, #84]	@ 0x54
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	00da      	lsls	r2, r3, #3
 8009022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009024:	4413      	add	r3, r2
 8009026:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800902a:	653b      	str	r3, [r7, #80]	@ 0x50
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	895b      	ldrh	r3, [r3, #10]
 8009030:	085b      	lsrs	r3, r3, #1
 8009032:	b29b      	uxth	r3, r3
 8009034:	005b      	lsls	r3, r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800903a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	785b      	ldrb	r3, [r3, #1]
 8009040:	2b00      	cmp	r3, #0
 8009042:	f040 8093 	bne.w	800916c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009046:	687a      	ldr	r2, [r7, #4]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	4413      	add	r3, r2
 8009050:	881b      	ldrh	r3, [r3, #0]
 8009052:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009056:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800905a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d01b      	beq.n	800909a <USB_ActivateEndpoint+0x52a>
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009078:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800908a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800908e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009096:	b29b      	uxth	r3, r3
 8009098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80090a8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80090aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01b      	beq.n	80090ea <USB_ActivateEndpoint+0x57a>
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	4413      	add	r3, r2
 80090bc:	881b      	ldrh	r3, [r3, #0]
 80090be:	b29b      	uxth	r3, r3
 80090c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	441a      	add	r2, r3
 80090d4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80090d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	4413      	add	r3, r2
 80090f4:	881b      	ldrh	r3, [r3, #0]
 80090f6:	b29b      	uxth	r3, r3
 80090f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009100:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009102:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009104:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009108:	873b      	strh	r3, [r7, #56]	@ 0x38
 800910a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800910c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009110:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	441a      	add	r2, r3
 800911c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800911e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009122:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009126:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800912a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912e:	b29b      	uxth	r3, r3
 8009130:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	781b      	ldrb	r3, [r3, #0]
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	4413      	add	r3, r2
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009148:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	441a      	add	r2, r3
 8009154:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009156:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800915a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800915e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009166:	b29b      	uxth	r3, r3
 8009168:	8013      	strh	r3, [r2, #0]
 800916a:	e0bc      	b.n	80092e6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800916c:	687a      	ldr	r2, [r7, #4]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	881b      	ldrh	r3, [r3, #0]
 8009178:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800917c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009184:	2b00      	cmp	r3, #0
 8009186:	d01d      	beq.n	80091c4 <USB_ActivateEndpoint+0x654>
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	881b      	ldrh	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800919a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	441a      	add	r2, r3
 80091ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80091b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	4413      	add	r3, r2
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80091d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80091d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d01d      	beq.n	800921c <USB_ActivateEndpoint+0x6ac>
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	441a      	add	r2, r3
 8009204:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800920c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009214:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009218:	b29b      	uxth	r3, r3
 800921a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	78db      	ldrb	r3, [r3, #3]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d024      	beq.n	800926e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29b      	uxth	r3, r3
 8009232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800923a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800923e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009242:	f083 0320 	eor.w	r3, r3, #32
 8009246:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	441a      	add	r2, r3
 8009254:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009258:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800925c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009264:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009268:	b29b      	uxth	r3, r3
 800926a:	8013      	strh	r3, [r2, #0]
 800926c:	e01d      	b.n	80092aa <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009280:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009284:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	441a      	add	r2, r3
 8009292:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009296:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800929a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800929e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4413      	add	r3, r2
 80092b4:	881b      	ldrh	r3, [r3, #0]
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092c0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	441a      	add	r2, r3
 80092ce:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80092d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80092e6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3774      	adds	r7, #116	@ 0x74
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop

080092f8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b08d      	sub	sp, #52	@ 0x34
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	7b1b      	ldrb	r3, [r3, #12]
 8009306:	2b00      	cmp	r3, #0
 8009308:	f040 808e 	bne.w	8009428 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d044      	beq.n	800939e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	81bb      	strh	r3, [r7, #12]
 8009322:	89bb      	ldrh	r3, [r7, #12]
 8009324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009328:	2b00      	cmp	r3, #0
 800932a:	d01b      	beq.n	8009364 <USB_DeactivateEndpoint+0x6c>
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	009b      	lsls	r3, r3, #2
 8009334:	4413      	add	r3, r2
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29b      	uxth	r3, r3
 800933a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009342:	817b      	strh	r3, [r7, #10]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	441a      	add	r2, r3
 800934e:	897b      	ldrh	r3, [r7, #10]
 8009350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800935c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009360:	b29b      	uxth	r3, r3
 8009362:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	009b      	lsls	r3, r3, #2
 800936c:	4413      	add	r3, r2
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009376:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800937a:	813b      	strh	r3, [r7, #8]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	009b      	lsls	r3, r3, #2
 8009384:	441a      	add	r2, r3
 8009386:	893b      	ldrh	r3, [r7, #8]
 8009388:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800938c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009390:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009398:	b29b      	uxth	r3, r3
 800939a:	8013      	strh	r3, [r2, #0]
 800939c:	e192      	b.n	80096c4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	881b      	ldrh	r3, [r3, #0]
 80093aa:	827b      	strh	r3, [r7, #18]
 80093ac:	8a7b      	ldrh	r3, [r7, #18]
 80093ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d01b      	beq.n	80093ee <USB_DeactivateEndpoint+0xf6>
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093cc:	823b      	strh	r3, [r7, #16]
 80093ce:	687a      	ldr	r2, [r7, #4]
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	441a      	add	r2, r3
 80093d8:	8a3b      	ldrh	r3, [r7, #16]
 80093da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	4413      	add	r3, r2
 80093f8:	881b      	ldrh	r3, [r3, #0]
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009404:	81fb      	strh	r3, [r7, #14]
 8009406:	687a      	ldr	r2, [r7, #4]
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	441a      	add	r2, r3
 8009410:	89fb      	ldrh	r3, [r7, #14]
 8009412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800941a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800941e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009422:	b29b      	uxth	r3, r3
 8009424:	8013      	strh	r3, [r2, #0]
 8009426:	e14d      	b.n	80096c4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	785b      	ldrb	r3, [r3, #1]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 80a5 	bne.w	800957c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	843b      	strh	r3, [r7, #32]
 8009440:	8c3b      	ldrh	r3, [r7, #32]
 8009442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009446:	2b00      	cmp	r3, #0
 8009448:	d01b      	beq.n	8009482 <USB_DeactivateEndpoint+0x18a>
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	b29b      	uxth	r3, r3
 8009458:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800945c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009460:	83fb      	strh	r3, [r7, #30]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	441a      	add	r2, r3
 800946c:	8bfb      	ldrh	r3, [r7, #30]
 800946e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009476:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800947a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800947e:	b29b      	uxth	r3, r3
 8009480:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	4413      	add	r3, r2
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	83bb      	strh	r3, [r7, #28]
 8009490:	8bbb      	ldrh	r3, [r7, #28]
 8009492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d01b      	beq.n	80094d2 <USB_DeactivateEndpoint+0x1da>
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094b0:	837b      	strh	r3, [r7, #26]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	441a      	add	r2, r3
 80094bc:	8b7b      	ldrh	r3, [r7, #26]
 80094be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094ca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	881b      	ldrh	r3, [r3, #0]
 80094de:	b29b      	uxth	r3, r3
 80094e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e8:	833b      	strh	r3, [r7, #24]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	781b      	ldrb	r3, [r3, #0]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	441a      	add	r2, r3
 80094f4:	8b3b      	ldrh	r3, [r7, #24]
 80094f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009502:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009506:	b29b      	uxth	r3, r3
 8009508:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	b29b      	uxth	r3, r3
 8009518:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800951c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009520:	82fb      	strh	r3, [r7, #22]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	781b      	ldrb	r3, [r3, #0]
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	441a      	add	r2, r3
 800952c:	8afb      	ldrh	r3, [r7, #22]
 800952e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009532:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009536:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800953a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800953e:	b29b      	uxth	r3, r3
 8009540:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4413      	add	r3, r2
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	b29b      	uxth	r3, r3
 8009550:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009554:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009558:	82bb      	strh	r3, [r7, #20]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	441a      	add	r2, r3
 8009564:	8abb      	ldrh	r3, [r7, #20]
 8009566:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800956a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800956e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009576:	b29b      	uxth	r3, r3
 8009578:	8013      	strh	r3, [r2, #0]
 800957a:	e0a3      	b.n	80096c4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	4413      	add	r3, r2
 8009586:	881b      	ldrh	r3, [r3, #0]
 8009588:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800958a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800958c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d01b      	beq.n	80095cc <USB_DeactivateEndpoint+0x2d4>
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095aa:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	441a      	add	r2, r3
 80095b6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095cc:	687a      	ldr	r2, [r7, #4]
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	4413      	add	r3, r2
 80095d6:	881b      	ldrh	r3, [r3, #0]
 80095d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80095da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80095dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d01b      	beq.n	800961c <USB_DeactivateEndpoint+0x324>
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	441a      	add	r2, r3
 8009606:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800960c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009614:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009618:	b29b      	uxth	r3, r3
 800961a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	881b      	ldrh	r3, [r3, #0]
 8009628:	b29b      	uxth	r3, r3
 800962a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800962e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009632:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	441a      	add	r2, r3
 800963e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009640:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009644:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009648:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800964c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009650:	b29b      	uxth	r3, r3
 8009652:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800966a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800967c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	4413      	add	r3, r2
 8009696:	881b      	ldrh	r3, [r3, #0]
 8009698:	b29b      	uxth	r3, r3
 800969a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800969e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	441a      	add	r2, r3
 80096ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3734      	adds	r7, #52	@ 0x34
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b0c2      	sub	sp, #264	@ 0x108
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096e0:	6018      	str	r0, [r3, #0]
 80096e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ea:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	785b      	ldrb	r3, [r3, #1]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	f040 86b7 	bne.w	800a46c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80096fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	699a      	ldr	r2, [r3, #24]
 800970a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	429a      	cmp	r2, r3
 8009718:	d908      	bls.n	800972c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800971a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800972a:	e007      	b.n	800973c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800972c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009730:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800973c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	7b1b      	ldrb	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d13a      	bne.n	80097c2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800974c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	6959      	ldr	r1, [r3, #20]
 8009758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	88da      	ldrh	r2, [r3, #6]
 8009764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009768:	b29b      	uxth	r3, r3
 800976a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800976e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009772:	6800      	ldr	r0, [r0, #0]
 8009774:	f001 fc99 	bl	800b0aa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	613b      	str	r3, [r7, #16]
 8009784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009788:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009792:	b29b      	uxth	r3, r3
 8009794:	461a      	mov	r2, r3
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	4413      	add	r3, r2
 800979a:	613b      	str	r3, [r7, #16]
 800979c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	00da      	lsls	r2, r3, #3
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	4413      	add	r3, r2
 80097ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	801a      	strh	r2, [r3, #0]
 80097be:	f000 be1f 	b.w	800a400 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80097c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	78db      	ldrb	r3, [r3, #3]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	f040 8462 	bne.w	800a098 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80097d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	6a1a      	ldr	r2, [r3, #32]
 80097e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	691b      	ldr	r3, [r3, #16]
 80097ec:	429a      	cmp	r2, r3
 80097ee:	f240 83df 	bls.w	8009fb0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009814:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009818:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800981c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009820:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009824:	681a      	ldr	r2, [r3, #0]
 8009826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	441a      	add	r2, r3
 8009836:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800983a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800983e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009842:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009846:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800984a:	b29b      	uxth	r3, r3
 800984c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800984e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6a1a      	ldr	r2, [r3, #32]
 800985a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800986c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009870:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	f000 81c7 	beq.w	8009c22 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30
 80098a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	785b      	ldrb	r3, [r3, #1]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d177      	bne.n	80099a0 <USB_EPStartXfer+0x2ce>
 80098b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	461a      	mov	r2, r3
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	4413      	add	r3, r2
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	00da      	lsls	r2, r3, #3
 80098e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e4:	4413      	add	r3, r2
 80098e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098f6:	b29a      	uxth	r2, r3
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	801a      	strh	r2, [r3, #0]
 80098fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <USB_EPStartXfer+0x248>
 8009904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29b      	uxth	r3, r3
 800990a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800990e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009912:	b29a      	uxth	r2, r3
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	801a      	strh	r2, [r3, #0]
 8009918:	e067      	b.n	80099ea <USB_EPStartXfer+0x318>
 800991a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009920:	d81c      	bhi.n	800995c <USB_EPStartXfer+0x28a>
 8009922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009926:	085b      	lsrs	r3, r3, #1
 8009928:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	d004      	beq.n	8009942 <USB_EPStartXfer+0x270>
 8009938:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800993c:	3301      	adds	r3, #1
 800993e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009944:	881b      	ldrh	r3, [r3, #0]
 8009946:	b29a      	uxth	r2, r3
 8009948:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800994c:	b29b      	uxth	r3, r3
 800994e:	029b      	lsls	r3, r3, #10
 8009950:	b29b      	uxth	r3, r3
 8009952:	4313      	orrs	r3, r2
 8009954:	b29a      	uxth	r2, r3
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	e046      	b.n	80099ea <USB_EPStartXfer+0x318>
 800995c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009960:	095b      	lsrs	r3, r3, #5
 8009962:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996a:	f003 031f 	and.w	r3, r3, #31
 800996e:	2b00      	cmp	r3, #0
 8009970:	d104      	bne.n	800997c <USB_EPStartXfer+0x2aa>
 8009972:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009976:	3b01      	subs	r3, #1
 8009978:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800997c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997e:	881b      	ldrh	r3, [r3, #0]
 8009980:	b29a      	uxth	r2, r3
 8009982:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009986:	b29b      	uxth	r3, r3
 8009988:	029b      	lsls	r3, r3, #10
 800998a:	b29b      	uxth	r3, r3
 800998c:	4313      	orrs	r3, r2
 800998e:	b29b      	uxth	r3, r3
 8009990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009998:	b29a      	uxth	r2, r3
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	801a      	strh	r2, [r3, #0]
 800999e:	e024      	b.n	80099ea <USB_EPStartXfer+0x318>
 80099a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	785b      	ldrb	r3, [r3, #1]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d11c      	bne.n	80099ea <USB_EPStartXfer+0x318>
 80099b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099be:	b29b      	uxth	r3, r3
 80099c0:	461a      	mov	r2, r3
 80099c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c4:	4413      	add	r3, r2
 80099c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80099c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	00da      	lsls	r2, r3, #3
 80099d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d8:	4413      	add	r3, r2
 80099da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e4:	b29a      	uxth	r2, r3
 80099e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	895b      	ldrh	r3, [r3, #10]
 80099f6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	6959      	ldr	r1, [r3, #20]
 8009a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a10:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a14:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a18:	6800      	ldr	r0, [r0, #0]
 8009a1a:	f001 fb46 	bl	800b0aa <USB_WritePMA>
            ep->xfer_buff += len;
 8009a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695a      	ldr	r2, [r3, #20]
 8009a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2e:	441a      	add	r2, r3
 8009a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	6a1a      	ldr	r2, [r3, #32]
 8009a48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d90f      	bls.n	8009a78 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6a1a      	ldr	r2, [r3, #32]
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a68:	1ad2      	subs	r2, r2, r3
 8009a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	621a      	str	r2, [r3, #32]
 8009a76:	e00e      	b.n	8009a96 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6a1b      	ldr	r3, [r3, #32]
 8009a84:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009a88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2200      	movs	r2, #0
 8009a94:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	785b      	ldrb	r3, [r3, #1]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d177      	bne.n	8009b96 <USB_EPStartXfer+0x4c4>
 8009aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	61bb      	str	r3, [r7, #24]
 8009ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	00da      	lsls	r2, r3, #3
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	4413      	add	r3, r2
 8009adc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ae0:	617b      	str	r3, [r7, #20]
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	881b      	ldrh	r3, [r3, #0]
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10a      	bne.n	8009b10 <USB_EPStartXfer+0x43e>
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	801a      	strh	r2, [r3, #0]
 8009b0e:	e06d      	b.n	8009bec <USB_EPStartXfer+0x51a>
 8009b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b14:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b16:	d81c      	bhi.n	8009b52 <USB_EPStartXfer+0x480>
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1c:	085b      	lsrs	r3, r3, #1
 8009b1e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b26:	f003 0301 	and.w	r3, r3, #1
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d004      	beq.n	8009b38 <USB_EPStartXfer+0x466>
 8009b2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b32:	3301      	adds	r3, #1
 8009b34:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	881b      	ldrh	r3, [r3, #0]
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	029b      	lsls	r3, r3, #10
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	b29a      	uxth	r2, r3
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	801a      	strh	r2, [r3, #0]
 8009b50:	e04c      	b.n	8009bec <USB_EPStartXfer+0x51a>
 8009b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b56:	095b      	lsrs	r3, r3, #5
 8009b58:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b60:	f003 031f 	and.w	r3, r3, #31
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d104      	bne.n	8009b72 <USB_EPStartXfer+0x4a0>
 8009b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	881b      	ldrh	r3, [r3, #0]
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	029b      	lsls	r3, r3, #10
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	4313      	orrs	r3, r2
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b8e:	b29a      	uxth	r2, r3
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	801a      	strh	r2, [r3, #0]
 8009b94:	e02a      	b.n	8009bec <USB_EPStartXfer+0x51a>
 8009b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d122      	bne.n	8009bec <USB_EPStartXfer+0x51a>
 8009ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009baa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	623b      	str	r3, [r7, #32]
 8009bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	6a3b      	ldr	r3, [r7, #32]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	623b      	str	r3, [r7, #32]
 8009bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	00da      	lsls	r2, r3, #3
 8009bd8:	6a3b      	ldr	r3, [r7, #32]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	69fb      	ldr	r3, [r7, #28]
 8009bea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	891b      	ldrh	r3, [r3, #8]
 8009bf8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6959      	ldr	r1, [r3, #20]
 8009c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c12:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c16:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c1a:	6800      	ldr	r0, [r0, #0]
 8009c1c:	f001 fa45 	bl	800b0aa <USB_WritePMA>
 8009c20:	e3ee      	b.n	800a400 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	785b      	ldrb	r3, [r3, #1]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d177      	bne.n	8009d22 <USB_EPStartXfer+0x650>
 8009c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	461a      	mov	r2, r3
 8009c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c52:	4413      	add	r3, r2
 8009c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	00da      	lsls	r2, r3, #3
 8009c64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c66:	4413      	add	r3, r2
 8009c68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c70:	881b      	ldrh	r3, [r3, #0]
 8009c72:	b29b      	uxth	r3, r3
 8009c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d10a      	bne.n	8009c9c <USB_EPStartXfer+0x5ca>
 8009c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c94:	b29a      	uxth	r2, r3
 8009c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c98:	801a      	strh	r2, [r3, #0]
 8009c9a:	e06d      	b.n	8009d78 <USB_EPStartXfer+0x6a6>
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ca2:	d81c      	bhi.n	8009cde <USB_EPStartXfer+0x60c>
 8009ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca8:	085b      	lsrs	r3, r3, #1
 8009caa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d004      	beq.n	8009cc4 <USB_EPStartXfer+0x5f2>
 8009cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	029b      	lsls	r3, r3, #10
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cda:	801a      	strh	r2, [r3, #0]
 8009cdc:	e04c      	b.n	8009d78 <USB_EPStartXfer+0x6a6>
 8009cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce2:	095b      	lsrs	r3, r3, #5
 8009ce4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d104      	bne.n	8009cfe <USB_EPStartXfer+0x62c>
 8009cf4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	029b      	lsls	r3, r3, #10
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1a:	b29a      	uxth	r2, r3
 8009d1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	e02a      	b.n	8009d78 <USB_EPStartXfer+0x6a6>
 8009d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	785b      	ldrb	r3, [r3, #1]
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d122      	bne.n	8009d78 <USB_EPStartXfer+0x6a6>
 8009d32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d52:	4413      	add	r3, r2
 8009d54:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	00da      	lsls	r2, r3, #3
 8009d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d66:	4413      	add	r3, r2
 8009d68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d76:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	891b      	ldrh	r3, [r3, #8]
 8009d84:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	6959      	ldr	r1, [r3, #20]
 8009d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d9e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009da2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009da6:	6800      	ldr	r0, [r0, #0]
 8009da8:	f001 f97f 	bl	800b0aa <USB_WritePMA>
            ep->xfer_buff += len;
 8009dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	695a      	ldr	r2, [r3, #20]
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dbc:	441a      	add	r2, r3
 8009dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6a1a      	ldr	r2, [r3, #32]
 8009dd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d90f      	bls.n	8009e06 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009de6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	6a1a      	ldr	r2, [r3, #32]
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df6:	1ad2      	subs	r2, r2, r3
 8009df8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	621a      	str	r2, [r3, #32]
 8009e04:	e00e      	b.n	8009e24 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009e06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009e16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2200      	movs	r2, #0
 8009e22:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	785b      	ldrb	r3, [r3, #1]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d177      	bne.n	8009f30 <USB_EPStartXfer+0x85e>
 8009e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e60:	4413      	add	r3, r2
 8009e62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	00da      	lsls	r2, r3, #3
 8009e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e74:	4413      	add	r3, r2
 8009e76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e86:	b29a      	uxth	r2, r3
 8009e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e8a:	801a      	strh	r2, [r3, #0]
 8009e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10a      	bne.n	8009eaa <USB_EPStartXfer+0x7d8>
 8009e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e96:	881b      	ldrh	r3, [r3, #0]
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	e067      	b.n	8009f7a <USB_EPStartXfer+0x8a8>
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eae:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eb0:	d81c      	bhi.n	8009eec <USB_EPStartXfer+0x81a>
 8009eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb6:	085b      	lsrs	r3, r3, #1
 8009eb8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <USB_EPStartXfer+0x800>
 8009ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ecc:	3301      	adds	r3, #1
 8009ece:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed4:	881b      	ldrh	r3, [r3, #0]
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	029b      	lsls	r3, r3, #10
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee8:	801a      	strh	r2, [r3, #0]
 8009eea:	e046      	b.n	8009f7a <USB_EPStartXfer+0x8a8>
 8009eec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef0:	095b      	lsrs	r3, r3, #5
 8009ef2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efa:	f003 031f 	and.w	r3, r3, #31
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d104      	bne.n	8009f0c <USB_EPStartXfer+0x83a>
 8009f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f06:	3b01      	subs	r3, #1
 8009f08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	029b      	lsls	r3, r3, #10
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f28:	b29a      	uxth	r2, r3
 8009f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2c:	801a      	strh	r2, [r3, #0]
 8009f2e:	e024      	b.n	8009f7a <USB_EPStartXfer+0x8a8>
 8009f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	785b      	ldrb	r3, [r3, #1]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d11c      	bne.n	8009f7a <USB_EPStartXfer+0x8a8>
 8009f40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	461a      	mov	r2, r3
 8009f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f54:	4413      	add	r3, r2
 8009f56:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	00da      	lsls	r2, r3, #3
 8009f66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f68:	4413      	add	r3, r2
 8009f6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	895b      	ldrh	r3, [r3, #10]
 8009f86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6959      	ldr	r1, [r3, #20]
 8009f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009fa0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009fa4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009fa8:	6800      	ldr	r0, [r0, #0]
 8009faa:	f001 f87e 	bl	800b0aa <USB_WritePMA>
 8009fae:	e227      	b.n	800a400 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	009b      	lsls	r3, r3, #2
 800a002:	441a      	add	r2, r3
 800a004:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a008:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a00c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a010:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a018:	b29b      	uxth	r3, r3
 800a01a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a01c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a020:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a028:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a02c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a036:	b29b      	uxth	r3, r3
 800a038:	461a      	mov	r2, r3
 800a03a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a03c:	4413      	add	r3, r2
 800a03e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	00da      	lsls	r2, r3, #3
 800a04e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a050:	4413      	add	r3, r2
 800a052:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a056:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a05c:	b29a      	uxth	r2, r3
 800a05e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a060:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a066:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	891b      	ldrh	r3, [r3, #8]
 800a06e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6959      	ldr	r1, [r3, #20]
 800a07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a082:	b29b      	uxth	r3, r3
 800a084:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a088:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a08c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a090:	6800      	ldr	r0, [r0, #0]
 800a092:	f001 f80a 	bl	800b0aa <USB_WritePMA>
 800a096:	e1b3      	b.n	800a400 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a09c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6a1a      	ldr	r2, [r3, #32]
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a8:	1ad2      	subs	r2, r2, r3
 800a0aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	781b      	ldrb	r3, [r3, #0]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4413      	add	r3, r2
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 80c6 	beq.w	800a26a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	785b      	ldrb	r3, [r3, #1]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d177      	bne.n	800a1ea <USB_EPStartXfer+0xb18>
 800a0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a106:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a10a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a114:	b29b      	uxth	r3, r3
 800a116:	461a      	mov	r2, r3
 800a118:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a11a:	4413      	add	r3, r2
 800a11c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a11e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	781b      	ldrb	r3, [r3, #0]
 800a12a:	00da      	lsls	r2, r3, #3
 800a12c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a12e:	4413      	add	r3, r2
 800a130:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a134:	667b      	str	r3, [r7, #100]	@ 0x64
 800a136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a140:	b29a      	uxth	r2, r3
 800a142:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a144:	801a      	strh	r2, [r3, #0]
 800a146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10a      	bne.n	800a164 <USB_EPStartXfer+0xa92>
 800a14e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	b29b      	uxth	r3, r3
 800a154:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a158:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a160:	801a      	strh	r2, [r3, #0]
 800a162:	e067      	b.n	800a234 <USB_EPStartXfer+0xb62>
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a168:	2b3e      	cmp	r3, #62	@ 0x3e
 800a16a:	d81c      	bhi.n	800a1a6 <USB_EPStartXfer+0xad4>
 800a16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a170:	085b      	lsrs	r3, r3, #1
 800a172:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d004      	beq.n	800a18c <USB_EPStartXfer+0xaba>
 800a182:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a186:	3301      	adds	r3, #1
 800a188:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a18c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	b29a      	uxth	r2, r3
 800a192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a196:	b29b      	uxth	r3, r3
 800a198:	029b      	lsls	r3, r3, #10
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	4313      	orrs	r3, r2
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1a2:	801a      	strh	r2, [r3, #0]
 800a1a4:	e046      	b.n	800a234 <USB_EPStartXfer+0xb62>
 800a1a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1aa:	095b      	lsrs	r3, r3, #5
 800a1ac:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b4:	f003 031f 	and.w	r3, r3, #31
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d104      	bne.n	800a1c6 <USB_EPStartXfer+0xaf4>
 800a1bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	029b      	lsls	r3, r3, #10
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1e2:	b29a      	uxth	r2, r3
 800a1e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1e6:	801a      	strh	r2, [r3, #0]
 800a1e8:	e024      	b.n	800a234 <USB_EPStartXfer+0xb62>
 800a1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	785b      	ldrb	r3, [r3, #1]
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d11c      	bne.n	800a234 <USB_EPStartXfer+0xb62>
 800a1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a208:	b29b      	uxth	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a20e:	4413      	add	r3, r2
 800a210:	673b      	str	r3, [r7, #112]	@ 0x70
 800a212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	00da      	lsls	r2, r3, #3
 800a220:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a222:	4413      	add	r3, r2
 800a224:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a228:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a22a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22e:	b29a      	uxth	r2, r3
 800a230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a232:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	895b      	ldrh	r3, [r3, #10]
 800a240:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	6959      	ldr	r1, [r3, #20]
 800a250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a254:	b29b      	uxth	r3, r3
 800a256:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a25a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a25e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a262:	6800      	ldr	r0, [r0, #0]
 800a264:	f000 ff21 	bl	800b0aa <USB_WritePMA>
 800a268:	e0ca      	b.n	800a400 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a26a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	785b      	ldrb	r3, [r3, #1]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d177      	bne.n	800a36a <USB_EPStartXfer+0xc98>
 800a27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a27e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a294:	b29b      	uxth	r3, r3
 800a296:	461a      	mov	r2, r3
 800a298:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a29a:	4413      	add	r3, r2
 800a29c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	00da      	lsls	r2, r3, #3
 800a2ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a2b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2b8:	881b      	ldrh	r3, [r3, #0]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2c4:	801a      	strh	r2, [r3, #0]
 800a2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <USB_EPStartXfer+0xc12>
 800a2ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2dc:	b29a      	uxth	r2, r3
 800a2de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2e0:	801a      	strh	r2, [r3, #0]
 800a2e2:	e073      	b.n	800a3cc <USB_EPStartXfer+0xcfa>
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e8:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2ea:	d81c      	bhi.n	800a326 <USB_EPStartXfer+0xc54>
 800a2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f0:	085b      	lsrs	r3, r3, #1
 800a2f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d004      	beq.n	800a30c <USB_EPStartXfer+0xc3a>
 800a302:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a306:	3301      	adds	r3, #1
 800a308:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a30c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29a      	uxth	r2, r3
 800a312:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a316:	b29b      	uxth	r3, r3
 800a318:	029b      	lsls	r3, r3, #10
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	4313      	orrs	r3, r2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a322:	801a      	strh	r2, [r3, #0]
 800a324:	e052      	b.n	800a3cc <USB_EPStartXfer+0xcfa>
 800a326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a32a:	095b      	lsrs	r3, r3, #5
 800a32c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a334:	f003 031f 	and.w	r3, r3, #31
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d104      	bne.n	800a346 <USB_EPStartXfer+0xc74>
 800a33c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a340:	3b01      	subs	r3, #1
 800a342:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a348:	881b      	ldrh	r3, [r3, #0]
 800a34a:	b29a      	uxth	r2, r3
 800a34c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a350:	b29b      	uxth	r3, r3
 800a352:	029b      	lsls	r3, r3, #10
 800a354:	b29b      	uxth	r3, r3
 800a356:	4313      	orrs	r3, r2
 800a358:	b29b      	uxth	r3, r3
 800a35a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a35e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a362:	b29a      	uxth	r2, r3
 800a364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a366:	801a      	strh	r2, [r3, #0]
 800a368:	e030      	b.n	800a3cc <USB_EPStartXfer+0xcfa>
 800a36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a36e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	785b      	ldrb	r3, [r3, #1]
 800a376:	2b01      	cmp	r3, #1
 800a378:	d128      	bne.n	800a3cc <USB_EPStartXfer+0xcfa>
 800a37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a396:	b29b      	uxth	r3, r3
 800a398:	461a      	mov	r2, r3
 800a39a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a39e:	4413      	add	r3, r2
 800a3a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	00da      	lsls	r2, r3, #3
 800a3b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c4:	b29a      	uxth	r2, r3
 800a3c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a3ca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a3cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	891b      	ldrh	r3, [r3, #8]
 800a3d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6959      	ldr	r1, [r3, #20]
 800a3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a3f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a3f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a3fa:	6800      	ldr	r0, [r0, #0]
 800a3fc:	f000 fe55 	bl	800b0aa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a404:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a40e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	881b      	ldrh	r3, [r3, #0]
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a426:	817b      	strh	r3, [r7, #10]
 800a428:	897b      	ldrh	r3, [r7, #10]
 800a42a:	f083 0310 	eor.w	r3, r3, #16
 800a42e:	817b      	strh	r3, [r7, #10]
 800a430:	897b      	ldrh	r3, [r7, #10]
 800a432:	f083 0320 	eor.w	r3, r3, #32
 800a436:	817b      	strh	r3, [r7, #10]
 800a438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a440:	681a      	ldr	r2, [r3, #0]
 800a442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	441a      	add	r2, r3
 800a452:	897b      	ldrh	r3, [r7, #10]
 800a454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a45c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a464:	b29b      	uxth	r3, r3
 800a466:	8013      	strh	r3, [r2, #0]
 800a468:	f000 bcdf 	b.w	800ae2a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	7b1b      	ldrb	r3, [r3, #12]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f040 80bc 	bne.w	800a5f6 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	699a      	ldr	r2, [r3, #24]
 800a48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	691b      	ldr	r3, [r3, #16]
 800a496:	429a      	cmp	r2, r3
 800a498:	d917      	bls.n	800a4ca <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699a      	ldr	r2, [r3, #24]
 800a4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4ba:	1ad2      	subs	r2, r2, r3
 800a4bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	619a      	str	r2, [r3, #24]
 800a4c8:	e00e      	b.n	800a4e8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a4ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a4e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a504:	b29b      	uxth	r3, r3
 800a506:	461a      	mov	r2, r3
 800a508:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a50c:	4413      	add	r3, r2
 800a50e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	00da      	lsls	r2, r3, #3
 800a520:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a524:	4413      	add	r3, r2
 800a526:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a52a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a52e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	b29b      	uxth	r3, r3
 800a536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a540:	801a      	strh	r2, [r3, #0]
 800a542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10d      	bne.n	800a566 <USB_EPStartXfer+0xe94>
 800a54a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a54e:	881b      	ldrh	r3, [r3, #0]
 800a550:	b29b      	uxth	r3, r3
 800a552:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a556:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a560:	801a      	strh	r2, [r3, #0]
 800a562:	f000 bc28 	b.w	800adb6 <USB_EPStartXfer+0x16e4>
 800a566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a56c:	d81f      	bhi.n	800a5ae <USB_EPStartXfer+0xedc>
 800a56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a572:	085b      	lsrs	r3, r3, #1
 800a574:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57c:	f003 0301 	and.w	r3, r3, #1
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <USB_EPStartXfer+0xebc>
 800a584:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a588:	3301      	adds	r3, #1
 800a58a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a58e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a592:	881b      	ldrh	r3, [r3, #0]
 800a594:	b29a      	uxth	r2, r3
 800a596:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	029b      	lsls	r3, r3, #10
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5a8:	801a      	strh	r2, [r3, #0]
 800a5aa:	f000 bc04 	b.w	800adb6 <USB_EPStartXfer+0x16e4>
 800a5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b2:	095b      	lsrs	r3, r3, #5
 800a5b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5bc:	f003 031f 	and.w	r3, r3, #31
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d104      	bne.n	800a5ce <USB_EPStartXfer+0xefc>
 800a5c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5d2:	881b      	ldrh	r3, [r3, #0]
 800a5d4:	b29a      	uxth	r2, r3
 800a5d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	029b      	lsls	r3, r3, #10
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	4313      	orrs	r3, r2
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5ec:	b29a      	uxth	r2, r3
 800a5ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5f2:	801a      	strh	r2, [r3, #0]
 800a5f4:	e3df      	b.n	800adb6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	78db      	ldrb	r3, [r3, #3]
 800a602:	2b02      	cmp	r3, #2
 800a604:	f040 8218 	bne.w	800aa38 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a60c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	785b      	ldrb	r3, [r3, #1]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 809d 	bne.w	800a754 <USB_EPStartXfer+0x1082>
 800a61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a62c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a636:	b29b      	uxth	r3, r3
 800a638:	461a      	mov	r2, r3
 800a63a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a63e:	4413      	add	r3, r2
 800a640:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	00da      	lsls	r2, r3, #3
 800a652:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a656:	4413      	add	r3, r2
 800a658:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a65c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	b29b      	uxth	r3, r3
 800a668:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	691b      	ldr	r3, [r3, #16]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d10c      	bne.n	800a69e <USB_EPStartXfer+0xfcc>
 800a684:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a688:	881b      	ldrh	r3, [r3, #0]
 800a68a:	b29b      	uxth	r3, r3
 800a68c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a694:	b29a      	uxth	r2, r3
 800a696:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a69a:	801a      	strh	r2, [r3, #0]
 800a69c:	e08f      	b.n	800a7be <USB_EPStartXfer+0x10ec>
 800a69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6ac:	d826      	bhi.n	800a6fc <USB_EPStartXfer+0x102a>
 800a6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	085b      	lsrs	r3, r3, #1
 800a6bc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	f003 0301 	and.w	r3, r3, #1
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d004      	beq.n	800a6de <USB_EPStartXfer+0x100c>
 800a6d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d8:	3301      	adds	r3, #1
 800a6da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6e2:	881b      	ldrh	r3, [r3, #0]
 800a6e4:	b29a      	uxth	r2, r3
 800a6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	029b      	lsls	r3, r3, #10
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6f8:	801a      	strh	r2, [r3, #0]
 800a6fa:	e060      	b.n	800a7be <USB_EPStartXfer+0x10ec>
 800a6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	691b      	ldr	r3, [r3, #16]
 800a708:	095b      	lsrs	r3, r3, #5
 800a70a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a70e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	f003 031f 	and.w	r3, r3, #31
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d104      	bne.n	800a72c <USB_EPStartXfer+0x105a>
 800a722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a726:	3b01      	subs	r3, #1
 800a728:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a72c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29a      	uxth	r2, r3
 800a734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a738:	b29b      	uxth	r3, r3
 800a73a:	029b      	lsls	r3, r3, #10
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	4313      	orrs	r3, r2
 800a740:	b29b      	uxth	r3, r3
 800a742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a750:	801a      	strh	r2, [r3, #0]
 800a752:	e034      	b.n	800a7be <USB_EPStartXfer+0x10ec>
 800a754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	785b      	ldrb	r3, [r3, #1]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d12c      	bne.n	800a7be <USB_EPStartXfer+0x10ec>
 800a764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a768:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a780:	b29b      	uxth	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a788:	4413      	add	r3, r2
 800a78a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	00da      	lsls	r2, r3, #3
 800a79c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	b29a      	uxth	r2, r3
 800a7b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7bc:	801a      	strh	r2, [r3, #0]
 800a7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a7cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	785b      	ldrb	r3, [r3, #1]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f040 809d 	bne.w	800a918 <USB_EPStartXfer+0x1246>
 800a7de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a802:	4413      	add	r3, r2
 800a804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a80c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	00da      	lsls	r2, r3, #3
 800a816:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a81a:	4413      	add	r3, r2
 800a81c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a830:	b29a      	uxth	r2, r3
 800a832:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a836:	801a      	strh	r2, [r3, #0]
 800a838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d10c      	bne.n	800a862 <USB_EPStartXfer+0x1190>
 800a848:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a858:	b29a      	uxth	r2, r3
 800a85a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	e088      	b.n	800a974 <USB_EPStartXfer+0x12a2>
 800a862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a870:	d826      	bhi.n	800a8c0 <USB_EPStartXfer+0x11ee>
 800a872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	085b      	lsrs	r3, r3, #1
 800a880:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d004      	beq.n	800a8a2 <USB_EPStartXfer+0x11d0>
 800a898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a89c:	3301      	adds	r3, #1
 800a89e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	029b      	lsls	r3, r3, #10
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8bc:	801a      	strh	r2, [r3, #0]
 800a8be:	e059      	b.n	800a974 <USB_EPStartXfer+0x12a2>
 800a8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	095b      	lsrs	r3, r3, #5
 800a8ce:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	691b      	ldr	r3, [r3, #16]
 800a8de:	f003 031f 	and.w	r3, r3, #31
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d104      	bne.n	800a8f0 <USB_EPStartXfer+0x121e>
 800a8e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8ea:	3b01      	subs	r3, #1
 800a8ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	029b      	lsls	r3, r3, #10
 800a900:	b29b      	uxth	r3, r3
 800a902:	4313      	orrs	r3, r2
 800a904:	b29b      	uxth	r3, r3
 800a906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a90a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a90e:	b29a      	uxth	r2, r3
 800a910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	e02d      	b.n	800a974 <USB_EPStartXfer+0x12a2>
 800a918:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	785b      	ldrb	r3, [r3, #1]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d125      	bne.n	800a974 <USB_EPStartXfer+0x12a2>
 800a928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a936:	b29b      	uxth	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a93e:	4413      	add	r3, r2
 800a940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	00da      	lsls	r2, r3, #3
 800a952:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a956:	4413      	add	r3, r2
 800a958:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a95c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a972:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	69db      	ldr	r3, [r3, #28]
 800a980:	2b00      	cmp	r3, #0
 800a982:	f000 8218 	beq.w	800adb6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a98a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	009b      	lsls	r3, r3, #2
 800a99e:	4413      	add	r3, r2
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d005      	beq.n	800a9be <USB_EPStartXfer+0x12ec>
 800a9b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d10d      	bne.n	800a9da <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f040 81f5 	bne.w	800adb6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	f040 81ee 	bne.w	800adb6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9e2:	681a      	ldr	r2, [r3, #0]
 800a9e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	009b      	lsls	r3, r3, #2
 800a9f2:	4413      	add	r3, r2
 800a9f4:	881b      	ldrh	r3, [r3, #0]
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa00:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800aa04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	441a      	add	r2, r3
 800aa1e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aa22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	8013      	strh	r3, [r2, #0]
 800aa36:	e1be      	b.n	800adb6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	78db      	ldrb	r3, [r3, #3]
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	f040 81b4 	bne.w	800adb2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	699a      	ldr	r2, [r3, #24]
 800aa56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d917      	bls.n	800aa96 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800aa66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800aa76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699a      	ldr	r2, [r3, #24]
 800aa82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa86:	1ad2      	subs	r2, r2, r3
 800aa88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	619a      	str	r2, [r3, #24]
 800aa94:	e00e      	b.n	800aab4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800aa96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	699b      	ldr	r3, [r3, #24]
 800aaa2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800aaa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2200      	movs	r2, #0
 800aab2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f040 8085 	bne.w	800abd0 <USB_EPStartXfer+0x14fe>
 800aac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aad4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aaea:	4413      	add	r3, r2
 800aaec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aaf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	00da      	lsls	r2, r3, #3
 800aafe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ab02:	4413      	add	r3, r2
 800ab04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab0c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab1e:	801a      	strh	r2, [r3, #0]
 800ab20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10c      	bne.n	800ab42 <USB_EPStartXfer+0x1470>
 800ab28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab2c:	881b      	ldrh	r3, [r3, #0]
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab3e:	801a      	strh	r2, [r3, #0]
 800ab40:	e077      	b.n	800ac32 <USB_EPStartXfer+0x1560>
 800ab42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab46:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab48:	d81e      	bhi.n	800ab88 <USB_EPStartXfer+0x14b6>
 800ab4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4e:	085b      	lsrs	r3, r3, #1
 800ab50:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <USB_EPStartXfer+0x1498>
 800ab60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab64:	3301      	adds	r3, #1
 800ab66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab6e:	881b      	ldrh	r3, [r3, #0]
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	029b      	lsls	r3, r3, #10
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab84:	801a      	strh	r2, [r3, #0]
 800ab86:	e054      	b.n	800ac32 <USB_EPStartXfer+0x1560>
 800ab88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab8c:	095b      	lsrs	r3, r3, #5
 800ab8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab96:	f003 031f 	and.w	r3, r3, #31
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <USB_EPStartXfer+0x14d6>
 800ab9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aba2:	3b01      	subs	r3, #1
 800aba4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aba8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abac:	881b      	ldrh	r3, [r3, #0]
 800abae:	b29a      	uxth	r2, r3
 800abb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	029b      	lsls	r3, r3, #10
 800abb8:	b29b      	uxth	r3, r3
 800abba:	4313      	orrs	r3, r2
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abcc:	801a      	strh	r2, [r3, #0]
 800abce:	e030      	b.n	800ac32 <USB_EPStartXfer+0x1560>
 800abd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	785b      	ldrb	r3, [r3, #1]
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d128      	bne.n	800ac32 <USB_EPStartXfer+0x1560>
 800abe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800abee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	461a      	mov	r2, r3
 800ac00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac04:	4413      	add	r3, r2
 800ac06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	00da      	lsls	r2, r3, #3
 800ac18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac2a:	b29a      	uxth	r2, r3
 800ac2c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac30:	801a      	strh	r2, [r3, #0]
 800ac32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	785b      	ldrb	r3, [r3, #1]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f040 8085 	bne.w	800ad5c <USB_EPStartXfer+0x168a>
 800ac52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	461a      	mov	r2, r3
 800ac72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac76:	4413      	add	r3, r2
 800ac78:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	00da      	lsls	r2, r3, #3
 800ac8a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac8e:	4413      	add	r3, r2
 800ac90:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aca4:	b29a      	uxth	r2, r3
 800aca6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acaa:	801a      	strh	r2, [r3, #0]
 800acac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10c      	bne.n	800acce <USB_EPStartXfer+0x15fc>
 800acb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acb8:	881b      	ldrh	r3, [r3, #0]
 800acba:	b29b      	uxth	r3, r3
 800acbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acca:	801a      	strh	r2, [r3, #0]
 800accc:	e073      	b.n	800adb6 <USB_EPStartXfer+0x16e4>
 800acce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acd2:	2b3e      	cmp	r3, #62	@ 0x3e
 800acd4:	d81e      	bhi.n	800ad14 <USB_EPStartXfer+0x1642>
 800acd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acda:	085b      	lsrs	r3, r3, #1
 800acdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ace0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d004      	beq.n	800acf6 <USB_EPStartXfer+0x1624>
 800acec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acf0:	3301      	adds	r3, #1
 800acf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800acf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	029b      	lsls	r3, r3, #10
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad10:	801a      	strh	r2, [r3, #0]
 800ad12:	e050      	b.n	800adb6 <USB_EPStartXfer+0x16e4>
 800ad14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad18:	095b      	lsrs	r3, r3, #5
 800ad1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad22:	f003 031f 	and.w	r3, r3, #31
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d104      	bne.n	800ad34 <USB_EPStartXfer+0x1662>
 800ad2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad38:	881b      	ldrh	r3, [r3, #0]
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	029b      	lsls	r3, r3, #10
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	4313      	orrs	r3, r2
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad58:	801a      	strh	r2, [r3, #0]
 800ad5a:	e02c      	b.n	800adb6 <USB_EPStartXfer+0x16e4>
 800ad5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	785b      	ldrb	r3, [r3, #1]
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d124      	bne.n	800adb6 <USB_EPStartXfer+0x16e4>
 800ad6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad7a:	b29b      	uxth	r3, r3
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad82:	4413      	add	r3, r2
 800ad84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	00da      	lsls	r2, r3, #3
 800ad96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad9a:	4413      	add	r3, r2
 800ad9c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ada0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ada4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada8:	b29a      	uxth	r2, r3
 800adaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adae:	801a      	strh	r2, [r3, #0]
 800adb0:	e001      	b.n	800adb6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800adb2:	2301      	movs	r3, #1
 800adb4:	e03a      	b.n	800ae2c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800add8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800addc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ade0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ade4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ade8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800adec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800adf0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800adf4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800adf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae00:	681a      	ldr	r2, [r3, #0]
 800ae02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	441a      	add	r2, r3
 800ae12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae36:	b480      	push	{r7}
 800ae38:	b085      	sub	sp, #20
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d020      	beq.n	800ae8a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	881b      	ldrh	r3, [r3, #0]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae5e:	81bb      	strh	r3, [r7, #12]
 800ae60:	89bb      	ldrh	r3, [r7, #12]
 800ae62:	f083 0310 	eor.w	r3, r3, #16
 800ae66:	81bb      	strh	r3, [r7, #12]
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	441a      	add	r2, r3
 800ae72:	89bb      	ldrh	r3, [r7, #12]
 800ae74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	8013      	strh	r3, [r2, #0]
 800ae88:	e01f      	b.n	800aeca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aea0:	81fb      	strh	r3, [r7, #14]
 800aea2:	89fb      	ldrh	r3, [r7, #14]
 800aea4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aea8:	81fb      	strh	r3, [r7, #14]
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	441a      	add	r2, r3
 800aeb4:	89fb      	ldrh	r3, [r7, #14]
 800aeb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aebe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b087      	sub	sp, #28
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	7b1b      	ldrb	r3, [r3, #12]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f040 809d 	bne.w	800b026 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	785b      	ldrb	r3, [r3, #1]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d04c      	beq.n	800af8e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	881b      	ldrh	r3, [r3, #0]
 800af00:	823b      	strh	r3, [r7, #16]
 800af02:	8a3b      	ldrh	r3, [r7, #16]
 800af04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d01b      	beq.n	800af44 <USB_EPClearStall+0x6c>
 800af0c:	687a      	ldr	r2, [r7, #4]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	b29b      	uxth	r3, r3
 800af1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af22:	81fb      	strh	r3, [r7, #14]
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	441a      	add	r2, r3
 800af2e:	89fb      	ldrh	r3, [r7, #14]
 800af30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af40:	b29b      	uxth	r3, r3
 800af42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	78db      	ldrb	r3, [r3, #3]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d06c      	beq.n	800b026 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af62:	81bb      	strh	r3, [r7, #12]
 800af64:	89bb      	ldrh	r3, [r7, #12]
 800af66:	f083 0320 	eor.w	r3, r3, #32
 800af6a:	81bb      	strh	r3, [r7, #12]
 800af6c:	687a      	ldr	r2, [r7, #4]
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	441a      	add	r2, r3
 800af76:	89bb      	ldrh	r3, [r7, #12]
 800af78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af88:	b29b      	uxth	r3, r3
 800af8a:	8013      	strh	r3, [r2, #0]
 800af8c:	e04b      	b.n	800b026 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	82fb      	strh	r3, [r7, #22]
 800af9c:	8afb      	ldrh	r3, [r7, #22]
 800af9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d01b      	beq.n	800afde <USB_EPClearStall+0x106>
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	881b      	ldrh	r3, [r3, #0]
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afbc:	82bb      	strh	r3, [r7, #20]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	441a      	add	r2, r3
 800afc8:	8abb      	ldrh	r3, [r7, #20]
 800afca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afda:	b29b      	uxth	r3, r3
 800afdc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	4413      	add	r3, r2
 800afe8:	881b      	ldrh	r3, [r3, #0]
 800afea:	b29b      	uxth	r3, r3
 800afec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aff0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aff4:	827b      	strh	r3, [r7, #18]
 800aff6:	8a7b      	ldrh	r3, [r7, #18]
 800aff8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800affc:	827b      	strh	r3, [r7, #18]
 800affe:	8a7b      	ldrh	r3, [r7, #18]
 800b000:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b004:	827b      	strh	r3, [r7, #18]
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	441a      	add	r2, r3
 800b010:	8a7b      	ldrh	r3, [r7, #18]
 800b012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b01a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b022:	b29b      	uxth	r3, r3
 800b024:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b026:	2300      	movs	r3, #0
}
 800b028:	4618      	mov	r0, r3
 800b02a:	371c      	adds	r7, #28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b040:	78fb      	ldrb	r3, [r7, #3]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d103      	bne.n	800b04e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2280      	movs	r2, #128	@ 0x80
 800b04a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b074:	b29a      	uxth	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b07c:	2300      	movs	r3, #0
}
 800b07e:	4618      	mov	r0, r3
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b08a:	b480      	push	{r7}
 800b08c:	b085      	sub	sp, #20
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b098:	b29b      	uxth	r3, r3
 800b09a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b09c:	68fb      	ldr	r3, [r7, #12]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0aa:	b480      	push	{r7}
 800b0ac:	b08b      	sub	sp, #44	@ 0x2c
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	80fb      	strh	r3, [r7, #6]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b0c0:	88bb      	ldrh	r3, [r7, #4]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	085b      	lsrs	r3, r3, #1
 800b0c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0d0:	88fa      	ldrh	r2, [r7, #6]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0da:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b0dc:	69bb      	ldr	r3, [r7, #24]
 800b0de:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0e0:	e01b      	b.n	800b11a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	021b      	lsls	r3, r3, #8
 800b0f0:	b21a      	sxth	r2, r3
 800b0f2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	b21b      	sxth	r3, r3
 800b0fa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	8a7a      	ldrh	r2, [r7, #18]
 800b100:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	3302      	adds	r3, #2
 800b106:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	3301      	adds	r3, #1
 800b10c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	3301      	adds	r3, #1
 800b112:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b116:	3b01      	subs	r3, #1
 800b118:	627b      	str	r3, [r7, #36]	@ 0x24
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1e0      	bne.n	800b0e2 <USB_WritePMA+0x38>
  }
}
 800b120:	bf00      	nop
 800b122:	bf00      	nop
 800b124:	372c      	adds	r7, #44	@ 0x2c
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b12e:	b480      	push	{r7}
 800b130:	b08b      	sub	sp, #44	@ 0x2c
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	4611      	mov	r1, r2
 800b13a:	461a      	mov	r2, r3
 800b13c:	460b      	mov	r3, r1
 800b13e:	80fb      	strh	r3, [r7, #6]
 800b140:	4613      	mov	r3, r2
 800b142:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b144:	88bb      	ldrh	r3, [r7, #4]
 800b146:	085b      	lsrs	r3, r3, #1
 800b148:	b29b      	uxth	r3, r3
 800b14a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b154:	88fa      	ldrh	r2, [r7, #6]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	4413      	add	r3, r2
 800b15a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b15e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	627b      	str	r3, [r7, #36]	@ 0x24
 800b164:	e018      	b.n	800b198 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b166:	6a3b      	ldr	r3, [r7, #32]
 800b168:	881b      	ldrh	r3, [r3, #0]
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	3302      	adds	r3, #2
 800b172:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	b2da      	uxtb	r2, r3
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	3301      	adds	r3, #1
 800b180:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	0a1b      	lsrs	r3, r3, #8
 800b186:	b2da      	uxtb	r2, r3
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	3301      	adds	r3, #1
 800b190:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b194:	3b01      	subs	r3, #1
 800b196:	627b      	str	r3, [r7, #36]	@ 0x24
 800b198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1e3      	bne.n	800b166 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b19e:	88bb      	ldrh	r3, [r7, #4]
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d007      	beq.n	800b1ba <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	b2da      	uxtb	r2, r3
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	701a      	strb	r2, [r3, #0]
  }
}
 800b1ba:	bf00      	nop
 800b1bc:	372c      	adds	r7, #44	@ 0x2c
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1d2:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b1d6:	f002 f8f9 	bl	800d3cc <USBD_static_malloc>
 800b1da:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d105      	bne.n	800b1ee <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	e066      	b.n	800b2bc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68fa      	ldr	r2, [r7, #12]
 800b1f2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	7c1b      	ldrb	r3, [r3, #16]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d119      	bne.n	800b232 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b202:	2202      	movs	r2, #2
 800b204:	2181      	movs	r1, #129	@ 0x81
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f001 ff87 	bl	800d11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b212:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b216:	2202      	movs	r2, #2
 800b218:	2101      	movs	r1, #1
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f001 ff7d 	bl	800d11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2201      	movs	r2, #1
 800b224:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2210      	movs	r2, #16
 800b22c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800b230:	e016      	b.n	800b260 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b232:	2340      	movs	r3, #64	@ 0x40
 800b234:	2202      	movs	r2, #2
 800b236:	2181      	movs	r1, #129	@ 0x81
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 ff6e 	bl	800d11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2201      	movs	r2, #1
 800b242:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b244:	2340      	movs	r3, #64	@ 0x40
 800b246:	2202      	movs	r2, #2
 800b248:	2101      	movs	r1, #1
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 ff65 	bl	800d11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2210      	movs	r2, #16
 800b25c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b260:	2308      	movs	r3, #8
 800b262:	2203      	movs	r2, #3
 800b264:	2182      	movs	r1, #130	@ 0x82
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f001 ff57 	bl	800d11a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2201      	movs	r2, #1
 800b270:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2200      	movs	r2, #0
 800b28a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	7c1b      	ldrb	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d109      	bne.n	800b2aa <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b29c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2a0:	2101      	movs	r1, #1
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f002 f828 	bl	800d2f8 <USBD_LL_PrepareReceive>
 800b2a8:	e007      	b.n	800b2ba <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2b0:	2340      	movs	r3, #64	@ 0x40
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f002 f81f 	bl	800d2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3710      	adds	r7, #16
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b2d0:	2181      	movs	r1, #129	@ 0x81
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f001 ff47 	bl	800d166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b2de:	2101      	movs	r1, #1
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f001 ff40 	bl	800d166 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b2ee:	2182      	movs	r1, #130	@ 0x82
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f001 ff38 	bl	800d166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00e      	beq.n	800b32e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b320:	4618      	mov	r0, r3
 800b322:	f002 f861 	bl	800d3e8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}

0800b338 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b348:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b34e:	2300      	movs	r3, #0
 800b350:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b352:	2300      	movs	r3, #0
 800b354:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b356:	693b      	ldr	r3, [r7, #16]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d101      	bne.n	800b360 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e0af      	b.n	800b4c0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d03f      	beq.n	800b3ec <USBD_CDC_Setup+0xb4>
 800b36c:	2b20      	cmp	r3, #32
 800b36e:	f040 809f 	bne.w	800b4b0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	88db      	ldrh	r3, [r3, #6]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d02e      	beq.n	800b3d8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	b25b      	sxtb	r3, r3
 800b380:	2b00      	cmp	r3, #0
 800b382:	da16      	bge.n	800b3b2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b390:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	88d2      	ldrh	r2, [r2, #6]
 800b396:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	88db      	ldrh	r3, [r3, #6]
 800b39c:	2b07      	cmp	r3, #7
 800b39e:	bf28      	it	cs
 800b3a0:	2307      	movcs	r3, #7
 800b3a2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	89fa      	ldrh	r2, [r7, #14]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f001 facd 	bl	800c94a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b3b0:	e085      	b.n	800b4be <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	785a      	ldrb	r2, [r3, #1]
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	88db      	ldrh	r3, [r3, #6]
 800b3c0:	b2da      	uxtb	r2, r3
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b3c8:	6939      	ldr	r1, [r7, #16]
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	88db      	ldrh	r3, [r3, #6]
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f001 fae6 	bl	800c9a2 <USBD_CtlPrepareRx>
      break;
 800b3d6:	e072      	b.n	800b4be <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3de:	689b      	ldr	r3, [r3, #8]
 800b3e0:	683a      	ldr	r2, [r7, #0]
 800b3e2:	7850      	ldrb	r0, [r2, #1]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	6839      	ldr	r1, [r7, #0]
 800b3e8:	4798      	blx	r3
      break;
 800b3ea:	e068      	b.n	800b4be <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	785b      	ldrb	r3, [r3, #1]
 800b3f0:	2b0b      	cmp	r3, #11
 800b3f2:	d852      	bhi.n	800b49a <USBD_CDC_Setup+0x162>
 800b3f4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3fc <USBD_CDC_Setup+0xc4>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b42d 	.word	0x0800b42d
 800b400:	0800b4a9 	.word	0x0800b4a9
 800b404:	0800b49b 	.word	0x0800b49b
 800b408:	0800b49b 	.word	0x0800b49b
 800b40c:	0800b49b 	.word	0x0800b49b
 800b410:	0800b49b 	.word	0x0800b49b
 800b414:	0800b49b 	.word	0x0800b49b
 800b418:	0800b49b 	.word	0x0800b49b
 800b41c:	0800b49b 	.word	0x0800b49b
 800b420:	0800b49b 	.word	0x0800b49b
 800b424:	0800b457 	.word	0x0800b457
 800b428:	0800b481 	.word	0x0800b481
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b432:	b2db      	uxtb	r3, r3
 800b434:	2b03      	cmp	r3, #3
 800b436:	d107      	bne.n	800b448 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b438:	f107 030a 	add.w	r3, r7, #10
 800b43c:	2202      	movs	r2, #2
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f001 fa82 	bl	800c94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b446:	e032      	b.n	800b4ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b448:	6839      	ldr	r1, [r7, #0]
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 fa0c 	bl	800c868 <USBD_CtlError>
            ret = USBD_FAIL;
 800b450:	2303      	movs	r3, #3
 800b452:	75fb      	strb	r3, [r7, #23]
          break;
 800b454:	e02b      	b.n	800b4ae <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d107      	bne.n	800b472 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b462:	f107 030d 	add.w	r3, r7, #13
 800b466:	2201      	movs	r2, #1
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f001 fa6d 	bl	800c94a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b470:	e01d      	b.n	800b4ae <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b472:	6839      	ldr	r1, [r7, #0]
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f001 f9f7 	bl	800c868 <USBD_CtlError>
            ret = USBD_FAIL;
 800b47a:	2303      	movs	r3, #3
 800b47c:	75fb      	strb	r3, [r7, #23]
          break;
 800b47e:	e016      	b.n	800b4ae <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d00f      	beq.n	800b4ac <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b48c:	6839      	ldr	r1, [r7, #0]
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f001 f9ea 	bl	800c868 <USBD_CtlError>
            ret = USBD_FAIL;
 800b494:	2303      	movs	r3, #3
 800b496:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b498:	e008      	b.n	800b4ac <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b49a:	6839      	ldr	r1, [r7, #0]
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f001 f9e3 	bl	800c868 <USBD_CtlError>
          ret = USBD_FAIL;
 800b4a2:	2303      	movs	r3, #3
 800b4a4:	75fb      	strb	r3, [r7, #23]
          break;
 800b4a6:	e002      	b.n	800b4ae <USBD_CDC_Setup+0x176>
          break;
 800b4a8:	bf00      	nop
 800b4aa:	e008      	b.n	800b4be <USBD_CDC_Setup+0x186>
          break;
 800b4ac:	bf00      	nop
      }
      break;
 800b4ae:	e006      	b.n	800b4be <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 f9d8 	bl	800c868 <USBD_CtlError>
      ret = USBD_FAIL;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	75fb      	strb	r3, [r7, #23]
      break;
 800b4bc:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3718      	adds	r7, #24
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b4da:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	e04f      	b.n	800b58a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4f0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b4f2:	78fa      	ldrb	r2, [r7, #3]
 800b4f4:	6879      	ldr	r1, [r7, #4]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	440b      	add	r3, r1
 800b500:	3318      	adds	r3, #24
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d029      	beq.n	800b55c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b508:	78fa      	ldrb	r2, [r7, #3]
 800b50a:	6879      	ldr	r1, [r7, #4]
 800b50c:	4613      	mov	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	440b      	add	r3, r1
 800b516:	3318      	adds	r3, #24
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	78f9      	ldrb	r1, [r7, #3]
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	460b      	mov	r3, r1
 800b520:	009b      	lsls	r3, r3, #2
 800b522:	440b      	add	r3, r1
 800b524:	00db      	lsls	r3, r3, #3
 800b526:	4403      	add	r3, r0
 800b528:	3320      	adds	r3, #32
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b530:	fb01 f303 	mul.w	r3, r1, r3
 800b534:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b536:	2b00      	cmp	r3, #0
 800b538:	d110      	bne.n	800b55c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b53a:	78fa      	ldrb	r2, [r7, #3]
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	3318      	adds	r3, #24
 800b54a:	2200      	movs	r2, #0
 800b54c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b54e:	78f9      	ldrb	r1, [r7, #3]
 800b550:	2300      	movs	r3, #0
 800b552:	2200      	movs	r2, #0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f001 feae 	bl	800d2b6 <USBD_LL_Transmit>
 800b55a:	e015      	b.n	800b588 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	2200      	movs	r2, #0
 800b560:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b57e:	68ba      	ldr	r2, [r7, #8]
 800b580:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b584:	78fa      	ldrb	r2, [r7, #3]
 800b586:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3710      	adds	r7, #16
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	b084      	sub	sp, #16
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
 800b59a:	460b      	mov	r3, r1
 800b59c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5a4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d101      	bne.n	800b5b4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5b0:	2303      	movs	r3, #3
 800b5b2:	e015      	b.n	800b5e0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5b4:	78fb      	ldrb	r3, [r7, #3]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f001 febe 	bl	800d33a <USBD_LL_GetRxDataSize>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5cc:	68db      	ldr	r3, [r3, #12]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b5da:	4611      	mov	r1, r2
 800b5dc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d101      	bne.n	800b602 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b5fe:	2303      	movs	r3, #3
 800b600:	e01a      	b.n	800b638 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d014      	beq.n	800b636 <USBD_CDC_EP0_RxReady+0x4e>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b612:	2bff      	cmp	r3, #255	@ 0xff
 800b614:	d00f      	beq.n	800b636 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b624:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b62c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	22ff      	movs	r2, #255	@ 0xff
 800b632:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3710      	adds	r7, #16
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2243      	movs	r2, #67	@ 0x43
 800b64c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b64e:	4b03      	ldr	r3, [pc, #12]	@ (800b65c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b650:	4618      	mov	r0, r3
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr
 800b65c:	20000094 	.word	0x20000094

0800b660 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b660:	b480      	push	{r7}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2243      	movs	r2, #67	@ 0x43
 800b66c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b66e:	4b03      	ldr	r3, [pc, #12]	@ (800b67c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20000050 	.word	0x20000050

0800b680 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2243      	movs	r2, #67	@ 0x43
 800b68c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b68e:	4b03      	ldr	r3, [pc, #12]	@ (800b69c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	200000d8 	.word	0x200000d8

0800b6a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	220a      	movs	r2, #10
 800b6ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6ae:	4b03      	ldr	r3, [pc, #12]	@ (800b6bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	370c      	adds	r7, #12
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr
 800b6bc:	2000000c 	.word	0x2000000c

0800b6c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b083      	sub	sp, #12
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	e004      	b.n	800b6de <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	370c      	adds	r7, #12
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b087      	sub	sp, #28
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	60f8      	str	r0, [r7, #12]
 800b6f2:	60b9      	str	r1, [r7, #8]
 800b6f4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6fc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d101      	bne.n	800b708 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b704:	2303      	movs	r3, #3
 800b706:	e008      	b.n	800b71a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	68ba      	ldr	r2, [r7, #8]
 800b70c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	371c      	adds	r7, #28
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b726:	b480      	push	{r7}
 800b728:	b085      	sub	sp, #20
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b736:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b73e:	2303      	movs	r3, #3
 800b740:	e004      	b.n	800b74c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	683a      	ldr	r2, [r7, #0]
 800b746:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3714      	adds	r7, #20
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b766:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b768:	2301      	movs	r3, #1
 800b76a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b776:	2303      	movs	r3, #3
 800b778:	e01a      	b.n	800b7b0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b780:	2b00      	cmp	r3, #0
 800b782:	d114      	bne.n	800b7ae <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2201      	movs	r2, #1
 800b788:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b7a2:	2181      	movs	r1, #129	@ 0x81
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 fd86 	bl	800d2b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7c6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	e016      	b.n	800b804 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	7c1b      	ldrb	r3, [r3, #16]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d109      	bne.n	800b7f2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7e8:	2101      	movs	r1, #1
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f001 fd84 	bl	800d2f8 <USBD_LL_PrepareReceive>
 800b7f0:	e007      	b.n	800b802 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7f8:	2340      	movs	r3, #64	@ 0x40
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f001 fd7b 	bl	800d2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	4613      	mov	r3, r2
 800b818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b820:	2303      	movs	r3, #3
 800b822:	e01f      	b.n	800b864 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2200      	movs	r2, #0
 800b830:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2200      	movs	r2, #0
 800b838:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d003      	beq.n	800b84a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	79fa      	ldrb	r2, [r7, #7]
 800b856:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f001 fbe3 	bl	800d024 <USBD_LL_Init>
 800b85e:	4603      	mov	r3, r0
 800b860:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b862:	7dfb      	ldrb	r3, [r7, #23]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b084      	sub	sp, #16
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b876:	2300      	movs	r3, #0
 800b878:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b880:	2303      	movs	r3, #3
 800b882:	e016      	b.n	800b8b2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00b      	beq.n	800b8b0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a0:	f107 020e 	add.w	r2, r7, #14
 800b8a4:	4610      	mov	r0, r2
 800b8a6:	4798      	blx	r3
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3710      	adds	r7, #16
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}

0800b8ba <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8ba:	b580      	push	{r7, lr}
 800b8bc:	b082      	sub	sp, #8
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f001 fc0e 	bl	800d0e4 <USBD_LL_Start>
 800b8c8:	4603      	mov	r3, r0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d009      	beq.n	800b916 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	78fa      	ldrb	r2, [r7, #3]
 800b90c:	4611      	mov	r1, r2
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	4798      	blx	r3
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b916:	7bfb      	ldrb	r3, [r7, #15]
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b932:	2b00      	cmp	r3, #0
 800b934:	d007      	beq.n	800b946 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	78fa      	ldrb	r2, [r7, #3]
 800b940:	4611      	mov	r1, r2
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	4798      	blx	r3
  }

  return USBD_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3708      	adds	r7, #8
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}

0800b950 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b084      	sub	sp, #16
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 ff46 	bl	800c7f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b976:	461a      	mov	r2, r3
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b984:	f003 031f 	and.w	r3, r3, #31
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d01a      	beq.n	800b9c2 <USBD_LL_SetupStage+0x72>
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d822      	bhi.n	800b9d6 <USBD_LL_SetupStage+0x86>
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <USBD_LL_SetupStage+0x4a>
 800b994:	2b01      	cmp	r3, #1
 800b996:	d00a      	beq.n	800b9ae <USBD_LL_SetupStage+0x5e>
 800b998:	e01d      	b.n	800b9d6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f9ee 	bl	800bd84 <USBD_StdDevReq>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ac:	e020      	b.n	800b9f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa52 	bl	800be60 <USBD_StdItfReq>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]
      break;
 800b9c0:	e016      	b.n	800b9f0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa91 	bl	800bef2 <USBD_StdEPReq>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b9d4:	e00c      	b.n	800b9f0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f001 fbdd 	bl	800d1a4 <USBD_LL_StallEP>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ee:	bf00      	nop
  }

  return ret;
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b086      	sub	sp, #24
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	60f8      	str	r0, [r7, #12]
 800ba02:	460b      	mov	r3, r1
 800ba04:	607a      	str	r2, [r7, #4]
 800ba06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba08:	7afb      	ldrb	r3, [r7, #11]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d138      	bne.n	800ba80 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba1c:	2b03      	cmp	r3, #3
 800ba1e:	d14a      	bne.n	800bab6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	689a      	ldr	r2, [r3, #8]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d913      	bls.n	800ba54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	689a      	ldr	r2, [r3, #8]
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	1ad2      	subs	r2, r2, r3
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	68da      	ldr	r2, [r3, #12]
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	4293      	cmp	r3, r2
 800ba44:	bf28      	it	cs
 800ba46:	4613      	movcs	r3, r2
 800ba48:	461a      	mov	r2, r3
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 ffc5 	bl	800c9dc <USBD_CtlContinueRx>
 800ba52:	e030      	b.n	800bab6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	d10b      	bne.n	800ba78 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d005      	beq.n	800ba78 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba72:	691b      	ldr	r3, [r3, #16]
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 ffc0 	bl	800c9fe <USBD_CtlSendStatus>
 800ba7e:	e01a      	b.n	800bab6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d114      	bne.n	800bab6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d00e      	beq.n	800bab6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9e:	699b      	ldr	r3, [r3, #24]
 800baa0:	7afa      	ldrb	r2, [r7, #11]
 800baa2:	4611      	mov	r1, r2
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	4798      	blx	r3
 800baa8:	4603      	mov	r3, r0
 800baaa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800baac:	7dfb      	ldrb	r3, [r7, #23]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d001      	beq.n	800bab6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	e000      	b.n	800bab8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	460b      	mov	r3, r1
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bace:	7afb      	ldrb	r3, [r7, #11]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d16b      	bne.n	800bbac <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	3314      	adds	r3, #20
 800bad8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800bae0:	2b02      	cmp	r3, #2
 800bae2:	d156      	bne.n	800bb92 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	689a      	ldr	r2, [r3, #8]
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	429a      	cmp	r2, r3
 800baee:	d914      	bls.n	800bb1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	689a      	ldr	r2, [r3, #8]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	1ad2      	subs	r2, r2, r3
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	461a      	mov	r2, r3
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f000 ff3a 	bl	800c980 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2100      	movs	r1, #0
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f001 fbf0 	bl	800d2f8 <USBD_LL_PrepareReceive>
 800bb18:	e03b      	b.n	800bb92 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d11c      	bne.n	800bb60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	685a      	ldr	r2, [r3, #4]
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d316      	bcc.n	800bb60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d20f      	bcs.n	800bb60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb40:	2200      	movs	r2, #0
 800bb42:	2100      	movs	r1, #0
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	f000 ff1b 	bl	800c980 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb52:	2300      	movs	r3, #0
 800bb54:	2200      	movs	r2, #0
 800bb56:	2100      	movs	r1, #0
 800bb58:	68f8      	ldr	r0, [r7, #12]
 800bb5a:	f001 fbcd 	bl	800d2f8 <USBD_LL_PrepareReceive>
 800bb5e:	e018      	b.n	800bb92 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d10b      	bne.n	800bb84 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb72:	68db      	ldr	r3, [r3, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb84:	2180      	movs	r1, #128	@ 0x80
 800bb86:	68f8      	ldr	r0, [r7, #12]
 800bb88:	f001 fb0c 	bl	800d1a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f000 ff49 	bl	800ca24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d122      	bne.n	800bbe2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f7ff fe98 	bl	800b8d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bbaa:	e01a      	b.n	800bbe2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d114      	bne.n	800bbe2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbbe:	695b      	ldr	r3, [r3, #20]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00e      	beq.n	800bbe2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	7afa      	ldrb	r2, [r7, #11]
 800bbce:	4611      	mov	r1, r2
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	4798      	blx	r3
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d001      	beq.n	800bbe2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bbde:	7dfb      	ldrb	r3, [r7, #23]
 800bbe0:	e000      	b.n	800bbe4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3718      	adds	r7, #24
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d101      	bne.n	800bc20 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bc1c:	2303      	movs	r3, #3
 800bc1e:	e02f      	b.n	800bc80 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00f      	beq.n	800bc4a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6852      	ldr	r2, [r2, #4]
 800bc42:	b2d2      	uxtb	r2, r2
 800bc44:	4611      	mov	r1, r2
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc4a:	2340      	movs	r3, #64	@ 0x40
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f001 fa62 	bl	800d11a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2240      	movs	r2, #64	@ 0x40
 800bc62:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc66:	2340      	movs	r3, #64	@ 0x40
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2180      	movs	r1, #128	@ 0x80
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f001 fa54 	bl	800d11a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2201      	movs	r2, #1
 800bc76:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2240      	movs	r2, #64	@ 0x40
 800bc7c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc7e:	2300      	movs	r3, #0
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	3708      	adds	r7, #8
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}

0800bc88 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b083      	sub	sp, #12
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
 800bc90:	460b      	mov	r3, r1
 800bc92:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	78fa      	ldrb	r2, [r7, #3]
 800bc98:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc9a:	2300      	movs	r3, #0
}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b083      	sub	sp, #12
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcb6:	b2da      	uxtb	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2204      	movs	r2, #4
 800bcc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	370c      	adds	r7, #12
 800bccc:	46bd      	mov	sp, r7
 800bcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd2:	4770      	bx	lr

0800bcd4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	d106      	bne.n	800bcf6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d101      	bne.n	800bd1a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e012      	b.n	800bd40 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d10b      	bne.n	800bd3e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d005      	beq.n	800bd3e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd38:	69db      	ldr	r3, [r3, #28]
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd3e:	2300      	movs	r3, #0
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3708      	adds	r7, #8
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}

0800bd48 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b087      	sub	sp, #28
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd66:	8a3b      	ldrh	r3, [r7, #16]
 800bd68:	021b      	lsls	r3, r3, #8
 800bd6a:	b21a      	sxth	r2, r3
 800bd6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	b21b      	sxth	r3, r3
 800bd74:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd76:	89fb      	ldrh	r3, [r7, #14]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	371c      	adds	r7, #28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd9a:	2b40      	cmp	r3, #64	@ 0x40
 800bd9c:	d005      	beq.n	800bdaa <USBD_StdDevReq+0x26>
 800bd9e:	2b40      	cmp	r3, #64	@ 0x40
 800bda0:	d853      	bhi.n	800be4a <USBD_StdDevReq+0xc6>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00b      	beq.n	800bdbe <USBD_StdDevReq+0x3a>
 800bda6:	2b20      	cmp	r3, #32
 800bda8:	d14f      	bne.n	800be4a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdb0:	689b      	ldr	r3, [r3, #8]
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	4798      	blx	r3
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73fb      	strb	r3, [r7, #15]
      break;
 800bdbc:	e04a      	b.n	800be54 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	785b      	ldrb	r3, [r3, #1]
 800bdc2:	2b09      	cmp	r3, #9
 800bdc4:	d83b      	bhi.n	800be3e <USBD_StdDevReq+0xba>
 800bdc6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdcc <USBD_StdDevReq+0x48>)
 800bdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdcc:	0800be21 	.word	0x0800be21
 800bdd0:	0800be35 	.word	0x0800be35
 800bdd4:	0800be3f 	.word	0x0800be3f
 800bdd8:	0800be2b 	.word	0x0800be2b
 800bddc:	0800be3f 	.word	0x0800be3f
 800bde0:	0800bdff 	.word	0x0800bdff
 800bde4:	0800bdf5 	.word	0x0800bdf5
 800bde8:	0800be3f 	.word	0x0800be3f
 800bdec:	0800be17 	.word	0x0800be17
 800bdf0:	0800be09 	.word	0x0800be09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f9de 	bl	800c1b8 <USBD_GetDescriptor>
          break;
 800bdfc:	e024      	b.n	800be48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdfe:	6839      	ldr	r1, [r7, #0]
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 fb6d 	bl	800c4e0 <USBD_SetAddress>
          break;
 800be06:	e01f      	b.n	800be48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be08:	6839      	ldr	r1, [r7, #0]
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f000 fbac 	bl	800c568 <USBD_SetConfig>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
          break;
 800be14:	e018      	b.n	800be48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be16:	6839      	ldr	r1, [r7, #0]
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 fc4b 	bl	800c6b4 <USBD_GetConfig>
          break;
 800be1e:	e013      	b.n	800be48 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 fc7c 	bl	800c720 <USBD_GetStatus>
          break;
 800be28:	e00e      	b.n	800be48 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be2a:	6839      	ldr	r1, [r7, #0]
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fcab 	bl	800c788 <USBD_SetFeature>
          break;
 800be32:	e009      	b.n	800be48 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fcba 	bl	800c7b0 <USBD_ClrFeature>
          break;
 800be3c:	e004      	b.n	800be48 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fd11 	bl	800c868 <USBD_CtlError>
          break;
 800be46:	bf00      	nop
      }
      break;
 800be48:	e004      	b.n	800be54 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fd0b 	bl	800c868 <USBD_CtlError>
      break;
 800be52:	bf00      	nop
  }

  return ret;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop

0800be60 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be6a:	2300      	movs	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	781b      	ldrb	r3, [r3, #0]
 800be72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be76:	2b40      	cmp	r3, #64	@ 0x40
 800be78:	d005      	beq.n	800be86 <USBD_StdItfReq+0x26>
 800be7a:	2b40      	cmp	r3, #64	@ 0x40
 800be7c:	d82f      	bhi.n	800bede <USBD_StdItfReq+0x7e>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d001      	beq.n	800be86 <USBD_StdItfReq+0x26>
 800be82:	2b20      	cmp	r3, #32
 800be84:	d12b      	bne.n	800bede <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	3b01      	subs	r3, #1
 800be90:	2b02      	cmp	r3, #2
 800be92:	d81d      	bhi.n	800bed0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	889b      	ldrh	r3, [r3, #4]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d813      	bhi.n	800bec6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	4798      	blx	r3
 800beac:	4603      	mov	r3, r0
 800beae:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	88db      	ldrh	r3, [r3, #6]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d110      	bne.n	800beda <USBD_StdItfReq+0x7a>
 800beb8:	7bfb      	ldrb	r3, [r7, #15]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10d      	bne.n	800beda <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fd9d 	bl	800c9fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bec4:	e009      	b.n	800beda <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bec6:	6839      	ldr	r1, [r7, #0]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f000 fccd 	bl	800c868 <USBD_CtlError>
          break;
 800bece:	e004      	b.n	800beda <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fcc8 	bl	800c868 <USBD_CtlError>
          break;
 800bed8:	e000      	b.n	800bedc <USBD_StdItfReq+0x7c>
          break;
 800beda:	bf00      	nop
      }
      break;
 800bedc:	e004      	b.n	800bee8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fcc1 	bl	800c868 <USBD_CtlError>
      break;
 800bee6:	bf00      	nop
  }

  return ret;
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
}
 800beea:	4618      	mov	r0, r3
 800beec:	3710      	adds	r7, #16
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
 800befa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	889b      	ldrh	r3, [r3, #4]
 800bf04:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	781b      	ldrb	r3, [r3, #0]
 800bf0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf0e:	2b40      	cmp	r3, #64	@ 0x40
 800bf10:	d007      	beq.n	800bf22 <USBD_StdEPReq+0x30>
 800bf12:	2b40      	cmp	r3, #64	@ 0x40
 800bf14:	f200 8145 	bhi.w	800c1a2 <USBD_StdEPReq+0x2b0>
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00c      	beq.n	800bf36 <USBD_StdEPReq+0x44>
 800bf1c:	2b20      	cmp	r3, #32
 800bf1e:	f040 8140 	bne.w	800c1a2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4798      	blx	r3
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]
      break;
 800bf34:	e13a      	b.n	800c1ac <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	785b      	ldrb	r3, [r3, #1]
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	d007      	beq.n	800bf4e <USBD_StdEPReq+0x5c>
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	f300 8129 	bgt.w	800c196 <USBD_StdEPReq+0x2a4>
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d07f      	beq.n	800c048 <USBD_StdEPReq+0x156>
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d03c      	beq.n	800bfc6 <USBD_StdEPReq+0xd4>
 800bf4c:	e123      	b.n	800c196 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	d002      	beq.n	800bf60 <USBD_StdEPReq+0x6e>
 800bf5a:	2b03      	cmp	r3, #3
 800bf5c:	d016      	beq.n	800bf8c <USBD_StdEPReq+0x9a>
 800bf5e:	e02c      	b.n	800bfba <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d00d      	beq.n	800bf82 <USBD_StdEPReq+0x90>
 800bf66:	7bbb      	ldrb	r3, [r7, #14]
 800bf68:	2b80      	cmp	r3, #128	@ 0x80
 800bf6a:	d00a      	beq.n	800bf82 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf6c:	7bbb      	ldrb	r3, [r7, #14]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 f917 	bl	800d1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf76:	2180      	movs	r1, #128	@ 0x80
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f001 f913 	bl	800d1a4 <USBD_LL_StallEP>
 800bf7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf80:	e020      	b.n	800bfc4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 fc6f 	bl	800c868 <USBD_CtlError>
              break;
 800bf8a:	e01b      	b.n	800bfc4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	885b      	ldrh	r3, [r3, #2]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d10e      	bne.n	800bfb2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00b      	beq.n	800bfb2 <USBD_StdEPReq+0xc0>
 800bf9a:	7bbb      	ldrb	r3, [r7, #14]
 800bf9c:	2b80      	cmp	r3, #128	@ 0x80
 800bf9e:	d008      	beq.n	800bfb2 <USBD_StdEPReq+0xc0>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	88db      	ldrh	r3, [r3, #6]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d104      	bne.n	800bfb2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfa8:	7bbb      	ldrb	r3, [r7, #14]
 800bfaa:	4619      	mov	r1, r3
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f001 f8f9 	bl	800d1a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fd23 	bl	800c9fe <USBD_CtlSendStatus>

              break;
 800bfb8:	e004      	b.n	800bfc4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fc53 	bl	800c868 <USBD_CtlError>
              break;
 800bfc2:	bf00      	nop
          }
          break;
 800bfc4:	e0ec      	b.n	800c1a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d002      	beq.n	800bfd8 <USBD_StdEPReq+0xe6>
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d016      	beq.n	800c004 <USBD_StdEPReq+0x112>
 800bfd6:	e030      	b.n	800c03a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfd8:	7bbb      	ldrb	r3, [r7, #14]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00d      	beq.n	800bffa <USBD_StdEPReq+0x108>
 800bfde:	7bbb      	ldrb	r3, [r7, #14]
 800bfe0:	2b80      	cmp	r3, #128	@ 0x80
 800bfe2:	d00a      	beq.n	800bffa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f001 f8db 	bl	800d1a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfee:	2180      	movs	r1, #128	@ 0x80
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f001 f8d7 	bl	800d1a4 <USBD_LL_StallEP>
 800bff6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bff8:	e025      	b.n	800c046 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fc33 	bl	800c868 <USBD_CtlError>
              break;
 800c002:	e020      	b.n	800c046 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	885b      	ldrh	r3, [r3, #2]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d11b      	bne.n	800c044 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c012:	2b00      	cmp	r3, #0
 800c014:	d004      	beq.n	800c020 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c016:	7bbb      	ldrb	r3, [r7, #14]
 800c018:	4619      	mov	r1, r3
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f001 f8e1 	bl	800d1e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f000 fcec 	bl	800c9fe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c02c:	689b      	ldr	r3, [r3, #8]
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	4798      	blx	r3
 800c034:	4603      	mov	r3, r0
 800c036:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c038:	e004      	b.n	800c044 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c03a:	6839      	ldr	r1, [r7, #0]
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fc13 	bl	800c868 <USBD_CtlError>
              break;
 800c042:	e000      	b.n	800c046 <USBD_StdEPReq+0x154>
              break;
 800c044:	bf00      	nop
          }
          break;
 800c046:	e0ab      	b.n	800c1a0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c04e:	b2db      	uxtb	r3, r3
 800c050:	2b02      	cmp	r3, #2
 800c052:	d002      	beq.n	800c05a <USBD_StdEPReq+0x168>
 800c054:	2b03      	cmp	r3, #3
 800c056:	d032      	beq.n	800c0be <USBD_StdEPReq+0x1cc>
 800c058:	e097      	b.n	800c18a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <USBD_StdEPReq+0x17e>
 800c060:	7bbb      	ldrb	r3, [r7, #14]
 800c062:	2b80      	cmp	r3, #128	@ 0x80
 800c064:	d004      	beq.n	800c070 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c066:	6839      	ldr	r1, [r7, #0]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 fbfd 	bl	800c868 <USBD_CtlError>
                break;
 800c06e:	e091      	b.n	800c194 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c070:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c074:	2b00      	cmp	r3, #0
 800c076:	da0b      	bge.n	800c090 <USBD_StdEPReq+0x19e>
 800c078:	7bbb      	ldrb	r3, [r7, #14]
 800c07a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	3310      	adds	r3, #16
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	4413      	add	r3, r2
 800c08c:	3304      	adds	r3, #4
 800c08e:	e00b      	b.n	800c0a8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c090:	7bbb      	ldrb	r3, [r7, #14]
 800c092:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c096:	4613      	mov	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	4413      	add	r3, r2
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	4413      	add	r3, r2
 800c0a6:	3304      	adds	r3, #4
 800c0a8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	2202      	movs	r2, #2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f000 fc47 	bl	800c94a <USBD_CtlSendData>
              break;
 800c0bc:	e06a      	b.n	800c194 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	da11      	bge.n	800c0ea <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
 800c0c8:	f003 020f 	and.w	r2, r3, #15
 800c0cc:	6879      	ldr	r1, [r7, #4]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	440b      	add	r3, r1
 800c0d8:	3324      	adds	r3, #36	@ 0x24
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d117      	bne.n	800c110 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 fbc0 	bl	800c868 <USBD_CtlError>
                  break;
 800c0e8:	e054      	b.n	800c194 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	f003 020f 	and.w	r2, r3, #15
 800c0f0:	6879      	ldr	r1, [r7, #4]
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	440b      	add	r3, r1
 800c0fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c100:	881b      	ldrh	r3, [r3, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d104      	bne.n	800c110 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c106:	6839      	ldr	r1, [r7, #0]
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 fbad 	bl	800c868 <USBD_CtlError>
                  break;
 800c10e:	e041      	b.n	800c194 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c110:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c114:	2b00      	cmp	r3, #0
 800c116:	da0b      	bge.n	800c130 <USBD_StdEPReq+0x23e>
 800c118:	7bbb      	ldrb	r3, [r7, #14]
 800c11a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c11e:	4613      	mov	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	3310      	adds	r3, #16
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	4413      	add	r3, r2
 800c12c:	3304      	adds	r3, #4
 800c12e:	e00b      	b.n	800c148 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c130:	7bbb      	ldrb	r3, [r7, #14]
 800c132:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c136:	4613      	mov	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	4413      	add	r3, r2
 800c146:	3304      	adds	r3, #4
 800c148:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <USBD_StdEPReq+0x264>
 800c150:	7bbb      	ldrb	r3, [r7, #14]
 800c152:	2b80      	cmp	r3, #128	@ 0x80
 800c154:	d103      	bne.n	800c15e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	e00e      	b.n	800c17c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f001 f85c 	bl	800d220 <USBD_LL_IsStallEP>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2201      	movs	r2, #1
 800c172:	601a      	str	r2, [r3, #0]
 800c174:	e002      	b.n	800c17c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	2202      	movs	r2, #2
 800c180:	4619      	mov	r1, r3
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f000 fbe1 	bl	800c94a <USBD_CtlSendData>
              break;
 800c188:	e004      	b.n	800c194 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fb6b 	bl	800c868 <USBD_CtlError>
              break;
 800c192:	bf00      	nop
          }
          break;
 800c194:	e004      	b.n	800c1a0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fb65 	bl	800c868 <USBD_CtlError>
          break;
 800c19e:	bf00      	nop
      }
      break;
 800c1a0:	e004      	b.n	800c1ac <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 fb5f 	bl	800c868 <USBD_CtlError>
      break;
 800c1aa:	bf00      	nop
  }

  return ret;
 800c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3710      	adds	r7, #16
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
	...

0800c1b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b084      	sub	sp, #16
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	885b      	ldrh	r3, [r3, #2]
 800c1d2:	0a1b      	lsrs	r3, r3, #8
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	3b01      	subs	r3, #1
 800c1d8:	2b0e      	cmp	r3, #14
 800c1da:	f200 8152 	bhi.w	800c482 <USBD_GetDescriptor+0x2ca>
 800c1de:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e4 <USBD_GetDescriptor+0x2c>)
 800c1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e4:	0800c255 	.word	0x0800c255
 800c1e8:	0800c26d 	.word	0x0800c26d
 800c1ec:	0800c2ad 	.word	0x0800c2ad
 800c1f0:	0800c483 	.word	0x0800c483
 800c1f4:	0800c483 	.word	0x0800c483
 800c1f8:	0800c423 	.word	0x0800c423
 800c1fc:	0800c44f 	.word	0x0800c44f
 800c200:	0800c483 	.word	0x0800c483
 800c204:	0800c483 	.word	0x0800c483
 800c208:	0800c483 	.word	0x0800c483
 800c20c:	0800c483 	.word	0x0800c483
 800c210:	0800c483 	.word	0x0800c483
 800c214:	0800c483 	.word	0x0800c483
 800c218:	0800c483 	.word	0x0800c483
 800c21c:	0800c221 	.word	0x0800c221
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c226:	69db      	ldr	r3, [r3, #28]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00b      	beq.n	800c244 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c232:	69db      	ldr	r3, [r3, #28]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	7c12      	ldrb	r2, [r2, #16]
 800c238:	f107 0108 	add.w	r1, r7, #8
 800c23c:	4610      	mov	r0, r2
 800c23e:	4798      	blx	r3
 800c240:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c242:	e126      	b.n	800c492 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c244:	6839      	ldr	r1, [r7, #0]
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 fb0e 	bl	800c868 <USBD_CtlError>
        err++;
 800c24c:	7afb      	ldrb	r3, [r7, #11]
 800c24e:	3301      	adds	r3, #1
 800c250:	72fb      	strb	r3, [r7, #11]
      break;
 800c252:	e11e      	b.n	800c492 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	7c12      	ldrb	r2, [r2, #16]
 800c260:	f107 0108 	add.w	r1, r7, #8
 800c264:	4610      	mov	r0, r2
 800c266:	4798      	blx	r3
 800c268:	60f8      	str	r0, [r7, #12]
      break;
 800c26a:	e112      	b.n	800c492 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	7c1b      	ldrb	r3, [r3, #16]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10d      	bne.n	800c290 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c27c:	f107 0208 	add.w	r2, r7, #8
 800c280:	4610      	mov	r0, r2
 800c282:	4798      	blx	r3
 800c284:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3301      	adds	r3, #1
 800c28a:	2202      	movs	r2, #2
 800c28c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c28e:	e100      	b.n	800c492 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c298:	f107 0208 	add.w	r2, r7, #8
 800c29c:	4610      	mov	r0, r2
 800c29e:	4798      	blx	r3
 800c2a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	3301      	adds	r3, #1
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	701a      	strb	r2, [r3, #0]
      break;
 800c2aa:	e0f2      	b.n	800c492 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	885b      	ldrh	r3, [r3, #2]
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	2b05      	cmp	r3, #5
 800c2b4:	f200 80ac 	bhi.w	800c410 <USBD_GetDescriptor+0x258>
 800c2b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c2c0 <USBD_GetDescriptor+0x108>)
 800c2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2be:	bf00      	nop
 800c2c0:	0800c2d9 	.word	0x0800c2d9
 800c2c4:	0800c30d 	.word	0x0800c30d
 800c2c8:	0800c341 	.word	0x0800c341
 800c2cc:	0800c375 	.word	0x0800c375
 800c2d0:	0800c3a9 	.word	0x0800c3a9
 800c2d4:	0800c3dd 	.word	0x0800c3dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00b      	beq.n	800c2fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	7c12      	ldrb	r2, [r2, #16]
 800c2f0:	f107 0108 	add.w	r1, r7, #8
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
 800c2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2fa:	e091      	b.n	800c420 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2fc:	6839      	ldr	r1, [r7, #0]
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f000 fab2 	bl	800c868 <USBD_CtlError>
            err++;
 800c304:	7afb      	ldrb	r3, [r7, #11]
 800c306:	3301      	adds	r3, #1
 800c308:	72fb      	strb	r3, [r7, #11]
          break;
 800c30a:	e089      	b.n	800c420 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d00b      	beq.n	800c330 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c31e:	689b      	ldr	r3, [r3, #8]
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	7c12      	ldrb	r2, [r2, #16]
 800c324:	f107 0108 	add.w	r1, r7, #8
 800c328:	4610      	mov	r0, r2
 800c32a:	4798      	blx	r3
 800c32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c32e:	e077      	b.n	800c420 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c330:	6839      	ldr	r1, [r7, #0]
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 fa98 	bl	800c868 <USBD_CtlError>
            err++;
 800c338:	7afb      	ldrb	r3, [r7, #11]
 800c33a:	3301      	adds	r3, #1
 800c33c:	72fb      	strb	r3, [r7, #11]
          break;
 800c33e:	e06f      	b.n	800c420 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00b      	beq.n	800c364 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c352:	68db      	ldr	r3, [r3, #12]
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	7c12      	ldrb	r2, [r2, #16]
 800c358:	f107 0108 	add.w	r1, r7, #8
 800c35c:	4610      	mov	r0, r2
 800c35e:	4798      	blx	r3
 800c360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c362:	e05d      	b.n	800c420 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 fa7e 	bl	800c868 <USBD_CtlError>
            err++;
 800c36c:	7afb      	ldrb	r3, [r7, #11]
 800c36e:	3301      	adds	r3, #1
 800c370:	72fb      	strb	r3, [r7, #11]
          break;
 800c372:	e055      	b.n	800c420 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d00b      	beq.n	800c398 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	7c12      	ldrb	r2, [r2, #16]
 800c38c:	f107 0108 	add.w	r1, r7, #8
 800c390:	4610      	mov	r0, r2
 800c392:	4798      	blx	r3
 800c394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c396:	e043      	b.n	800c420 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 fa64 	bl	800c868 <USBD_CtlError>
            err++;
 800c3a0:	7afb      	ldrb	r3, [r7, #11]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3a6:	e03b      	b.n	800c420 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d00b      	beq.n	800c3cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ba:	695b      	ldr	r3, [r3, #20]
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	7c12      	ldrb	r2, [r2, #16]
 800c3c0:	f107 0108 	add.w	r1, r7, #8
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	4798      	blx	r3
 800c3c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ca:	e029      	b.n	800c420 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f000 fa4a 	bl	800c868 <USBD_CtlError>
            err++;
 800c3d4:	7afb      	ldrb	r3, [r7, #11]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3da:	e021      	b.n	800c420 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d00b      	beq.n	800c400 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ee:	699b      	ldr	r3, [r3, #24]
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	7c12      	ldrb	r2, [r2, #16]
 800c3f4:	f107 0108 	add.w	r1, r7, #8
 800c3f8:	4610      	mov	r0, r2
 800c3fa:	4798      	blx	r3
 800c3fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3fe:	e00f      	b.n	800c420 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c400:	6839      	ldr	r1, [r7, #0]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 fa30 	bl	800c868 <USBD_CtlError>
            err++;
 800c408:	7afb      	ldrb	r3, [r7, #11]
 800c40a:	3301      	adds	r3, #1
 800c40c:	72fb      	strb	r3, [r7, #11]
          break;
 800c40e:	e007      	b.n	800c420 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c410:	6839      	ldr	r1, [r7, #0]
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f000 fa28 	bl	800c868 <USBD_CtlError>
          err++;
 800c418:	7afb      	ldrb	r3, [r7, #11]
 800c41a:	3301      	adds	r3, #1
 800c41c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c41e:	bf00      	nop
      }
      break;
 800c420:	e037      	b.n	800c492 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	7c1b      	ldrb	r3, [r3, #16]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d109      	bne.n	800c43e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c432:	f107 0208 	add.w	r2, r7, #8
 800c436:	4610      	mov	r0, r2
 800c438:	4798      	blx	r3
 800c43a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c43c:	e029      	b.n	800c492 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fa11 	bl	800c868 <USBD_CtlError>
        err++;
 800c446:	7afb      	ldrb	r3, [r7, #11]
 800c448:	3301      	adds	r3, #1
 800c44a:	72fb      	strb	r3, [r7, #11]
      break;
 800c44c:	e021      	b.n	800c492 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	7c1b      	ldrb	r3, [r3, #16]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d10d      	bne.n	800c472 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45e:	f107 0208 	add.w	r2, r7, #8
 800c462:	4610      	mov	r0, r2
 800c464:	4798      	blx	r3
 800c466:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3301      	adds	r3, #1
 800c46c:	2207      	movs	r2, #7
 800c46e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c470:	e00f      	b.n	800c492 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 f9f7 	bl	800c868 <USBD_CtlError>
        err++;
 800c47a:	7afb      	ldrb	r3, [r7, #11]
 800c47c:	3301      	adds	r3, #1
 800c47e:	72fb      	strb	r3, [r7, #11]
      break;
 800c480:	e007      	b.n	800c492 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f9ef 	bl	800c868 <USBD_CtlError>
      err++;
 800c48a:	7afb      	ldrb	r3, [r7, #11]
 800c48c:	3301      	adds	r3, #1
 800c48e:	72fb      	strb	r3, [r7, #11]
      break;
 800c490:	bf00      	nop
  }

  if (err != 0U)
 800c492:	7afb      	ldrb	r3, [r7, #11]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d11e      	bne.n	800c4d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	88db      	ldrh	r3, [r3, #6]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d016      	beq.n	800c4ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c4a0:	893b      	ldrh	r3, [r7, #8]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00e      	beq.n	800c4c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	88da      	ldrh	r2, [r3, #6]
 800c4aa:	893b      	ldrh	r3, [r7, #8]
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	bf28      	it	cs
 800c4b0:	4613      	movcs	r3, r2
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4b6:	893b      	ldrh	r3, [r7, #8]
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	68f9      	ldr	r1, [r7, #12]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fa44 	bl	800c94a <USBD_CtlSendData>
 800c4c2:	e009      	b.n	800c4d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4c4:	6839      	ldr	r1, [r7, #0]
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f9ce 	bl	800c868 <USBD_CtlError>
 800c4cc:	e004      	b.n	800c4d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa95 	bl	800c9fe <USBD_CtlSendStatus>
 800c4d4:	e000      	b.n	800c4d8 <USBD_GetDescriptor+0x320>
    return;
 800c4d6:	bf00      	nop
  }
}
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop

0800c4e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	889b      	ldrh	r3, [r3, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d131      	bne.n	800c556 <USBD_SetAddress+0x76>
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	88db      	ldrh	r3, [r3, #6]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d12d      	bne.n	800c556 <USBD_SetAddress+0x76>
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	885b      	ldrh	r3, [r3, #2]
 800c4fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800c500:	d829      	bhi.n	800c556 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	885b      	ldrh	r3, [r3, #2]
 800c506:	b2db      	uxtb	r3, r3
 800c508:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c50c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c514:	b2db      	uxtb	r3, r3
 800c516:	2b03      	cmp	r3, #3
 800c518:	d104      	bne.n	800c524 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 f9a3 	bl	800c868 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c522:	e01d      	b.n	800c560 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	7bfa      	ldrb	r2, [r7, #15]
 800c528:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c52c:	7bfb      	ldrb	r3, [r7, #15]
 800c52e:	4619      	mov	r1, r3
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 fea1 	bl	800d278 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fa61 	bl	800c9fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2202      	movs	r2, #2
 800c546:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c54a:	e009      	b.n	800c560 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c554:	e004      	b.n	800c560 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c556:	6839      	ldr	r1, [r7, #0]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f985 	bl	800c868 <USBD_CtlError>
  }
}
 800c55e:	bf00      	nop
 800c560:	bf00      	nop
 800c562:	3710      	adds	r7, #16
 800c564:	46bd      	mov	sp, r7
 800c566:	bd80      	pop	{r7, pc}

0800c568 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	885b      	ldrh	r3, [r3, #2]
 800c57a:	b2da      	uxtb	r2, r3
 800c57c:	4b4c      	ldr	r3, [pc, #304]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c57e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c580:	4b4b      	ldr	r3, [pc, #300]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c582:	781b      	ldrb	r3, [r3, #0]
 800c584:	2b01      	cmp	r3, #1
 800c586:	d905      	bls.n	800c594 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f96c 	bl	800c868 <USBD_CtlError>
    return USBD_FAIL;
 800c590:	2303      	movs	r3, #3
 800c592:	e088      	b.n	800c6a6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c59a:	b2db      	uxtb	r3, r3
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d002      	beq.n	800c5a6 <USBD_SetConfig+0x3e>
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	d025      	beq.n	800c5f0 <USBD_SetConfig+0x88>
 800c5a4:	e071      	b.n	800c68a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c5a6:	4b42      	ldr	r3, [pc, #264]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d01c      	beq.n	800c5e8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c5ae:	4b40      	ldr	r3, [pc, #256]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5b8:	4b3d      	ldr	r3, [pc, #244]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7ff f992 	bl	800b8e8 <USBD_SetClassConfig>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5c8:	7bfb      	ldrb	r3, [r7, #15]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d004      	beq.n	800c5d8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c5ce:	6839      	ldr	r1, [r7, #0]
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f000 f949 	bl	800c868 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5d6:	e065      	b.n	800c6a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fa10 	bl	800c9fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2203      	movs	r2, #3
 800c5e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5e6:	e05d      	b.n	800c6a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 fa08 	bl	800c9fe <USBD_CtlSendStatus>
      break;
 800c5ee:	e059      	b.n	800c6a4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5f0:	4b2f      	ldr	r3, [pc, #188]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d112      	bne.n	800c61e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2202      	movs	r2, #2
 800c5fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c600:	4b2b      	ldr	r3, [pc, #172]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	461a      	mov	r2, r3
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c60a:	4b29      	ldr	r3, [pc, #164]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	4619      	mov	r1, r3
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f7ff f985 	bl	800b920 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 f9f1 	bl	800c9fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c61c:	e042      	b.n	800c6a4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c61e:	4b24      	ldr	r3, [pc, #144]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	461a      	mov	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d02a      	beq.n	800c682 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	b2db      	uxtb	r3, r3
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff f973 	bl	800b920 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c63a:	4b1d      	ldr	r3, [pc, #116]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c63c:	781b      	ldrb	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c644:	4b1a      	ldr	r3, [pc, #104]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f7ff f94c 	bl	800b8e8 <USBD_SetClassConfig>
 800c650:	4603      	mov	r3, r0
 800c652:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c654:	7bfb      	ldrb	r3, [r7, #15]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00f      	beq.n	800c67a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f903 	bl	800c868 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7ff f958 	bl	800b920 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2202      	movs	r2, #2
 800c674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c678:	e014      	b.n	800c6a4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 f9bf 	bl	800c9fe <USBD_CtlSendStatus>
      break;
 800c680:	e010      	b.n	800c6a4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f9bb 	bl	800c9fe <USBD_CtlSendStatus>
      break;
 800c688:	e00c      	b.n	800c6a4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c68a:	6839      	ldr	r1, [r7, #0]
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f8eb 	bl	800c868 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c692:	4b07      	ldr	r3, [pc, #28]	@ (800c6b0 <USBD_SetConfig+0x148>)
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff f941 	bl	800b920 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c69e:	2303      	movs	r3, #3
 800c6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a2:	bf00      	nop
  }

  return ret;
 800c6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}
 800c6ae:	bf00      	nop
 800c6b0:	2000045c 	.word	0x2000045c

0800c6b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	88db      	ldrh	r3, [r3, #6]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d004      	beq.n	800c6d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6c6:	6839      	ldr	r1, [r7, #0]
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f000 f8cd 	bl	800c868 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6ce:	e023      	b.n	800c718 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	dc02      	bgt.n	800c6e2 <USBD_GetConfig+0x2e>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dc03      	bgt.n	800c6e8 <USBD_GetConfig+0x34>
 800c6e0:	e015      	b.n	800c70e <USBD_GetConfig+0x5a>
 800c6e2:	2b03      	cmp	r3, #3
 800c6e4:	d00b      	beq.n	800c6fe <USBD_GetConfig+0x4a>
 800c6e6:	e012      	b.n	800c70e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	3308      	adds	r3, #8
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f927 	bl	800c94a <USBD_CtlSendData>
        break;
 800c6fc:	e00c      	b.n	800c718 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	3304      	adds	r3, #4
 800c702:	2201      	movs	r2, #1
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f91f 	bl	800c94a <USBD_CtlSendData>
        break;
 800c70c:	e004      	b.n	800c718 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f8a9 	bl	800c868 <USBD_CtlError>
        break;
 800c716:	bf00      	nop
}
 800c718:	bf00      	nop
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c730:	b2db      	uxtb	r3, r3
 800c732:	3b01      	subs	r3, #1
 800c734:	2b02      	cmp	r3, #2
 800c736:	d81e      	bhi.n	800c776 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	88db      	ldrh	r3, [r3, #6]
 800c73c:	2b02      	cmp	r3, #2
 800c73e:	d004      	beq.n	800c74a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f890 	bl	800c868 <USBD_CtlError>
        break;
 800c748:	e01a      	b.n	800c780 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c756:	2b00      	cmp	r3, #0
 800c758:	d005      	beq.n	800c766 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	f043 0202 	orr.w	r2, r3, #2
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	330c      	adds	r3, #12
 800c76a:	2202      	movs	r2, #2
 800c76c:	4619      	mov	r1, r3
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f8eb 	bl	800c94a <USBD_CtlSendData>
      break;
 800c774:	e004      	b.n	800c780 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 f875 	bl	800c868 <USBD_CtlError>
      break;
 800c77e:	bf00      	nop
  }
}
 800c780:	bf00      	nop
 800c782:	3708      	adds	r7, #8
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b082      	sub	sp, #8
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	885b      	ldrh	r3, [r3, #2]
 800c796:	2b01      	cmp	r3, #1
 800c798:	d106      	bne.n	800c7a8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2201      	movs	r2, #1
 800c79e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f92b 	bl	800c9fe <USBD_CtlSendStatus>
  }
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}

0800c7b0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d80b      	bhi.n	800c7e0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	885b      	ldrh	r3, [r3, #2]
 800c7cc:	2b01      	cmp	r3, #1
 800c7ce:	d10c      	bne.n	800c7ea <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f910 	bl	800c9fe <USBD_CtlSendStatus>
      }
      break;
 800c7de:	e004      	b.n	800c7ea <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7e0:	6839      	ldr	r1, [r7, #0]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 f840 	bl	800c868 <USBD_CtlError>
      break;
 800c7e8:	e000      	b.n	800c7ec <USBD_ClrFeature+0x3c>
      break;
 800c7ea:	bf00      	nop
  }
}
 800c7ec:	bf00      	nop
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	781a      	ldrb	r2, [r3, #0]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	3301      	adds	r3, #1
 800c80e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	781a      	ldrb	r2, [r3, #0]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	3301      	adds	r3, #1
 800c81c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c81e:	68f8      	ldr	r0, [r7, #12]
 800c820:	f7ff fa92 	bl	800bd48 <SWAPBYTE>
 800c824:	4603      	mov	r3, r0
 800c826:	461a      	mov	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	3301      	adds	r3, #1
 800c830:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3301      	adds	r3, #1
 800c836:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	f7ff fa85 	bl	800bd48 <SWAPBYTE>
 800c83e:	4603      	mov	r3, r0
 800c840:	461a      	mov	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	3301      	adds	r3, #1
 800c84a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	3301      	adds	r3, #1
 800c850:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f7ff fa78 	bl	800bd48 <SWAPBYTE>
 800c858:	4603      	mov	r3, r0
 800c85a:	461a      	mov	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	80da      	strh	r2, [r3, #6]
}
 800c860:	bf00      	nop
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c872:	2180      	movs	r1, #128	@ 0x80
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 fc95 	bl	800d1a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c87a:	2100      	movs	r1, #0
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f000 fc91 	bl	800d1a4 <USBD_LL_StallEP>
}
 800c882:	bf00      	nop
 800c884:	3708      	adds	r7, #8
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b086      	sub	sp, #24
 800c88e:	af00      	add	r7, sp, #0
 800c890:	60f8      	str	r0, [r7, #12]
 800c892:	60b9      	str	r1, [r7, #8]
 800c894:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c896:	2300      	movs	r3, #0
 800c898:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d036      	beq.n	800c90e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8a4:	6938      	ldr	r0, [r7, #16]
 800c8a6:	f000 f836 	bl	800c916 <USBD_GetLen>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	005b      	lsls	r3, r3, #1
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8b8:	7dfb      	ldrb	r3, [r7, #23]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	4413      	add	r3, r2
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	7812      	ldrb	r2, [r2, #0]
 800c8c2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8c4:	7dfb      	ldrb	r3, [r7, #23]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8ca:	7dfb      	ldrb	r3, [r7, #23]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	4413      	add	r3, r2
 800c8d0:	2203      	movs	r2, #3
 800c8d2:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8da:	e013      	b.n	800c904 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	68ba      	ldr	r2, [r7, #8]
 800c8e0:	4413      	add	r3, r2
 800c8e2:	693a      	ldr	r2, [r7, #16]
 800c8e4:	7812      	ldrb	r2, [r2, #0]
 800c8e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	613b      	str	r3, [r7, #16]
    idx++;
 800c8ee:	7dfb      	ldrb	r3, [r7, #23]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8f4:	7dfb      	ldrb	r3, [r7, #23]
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8fe:	7dfb      	ldrb	r3, [r7, #23]
 800c900:	3301      	adds	r3, #1
 800c902:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d1e7      	bne.n	800c8dc <USBD_GetString+0x52>
 800c90c:	e000      	b.n	800c910 <USBD_GetString+0x86>
    return;
 800c90e:	bf00      	nop
  }
}
 800c910:	3718      	adds	r7, #24
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c916:	b480      	push	{r7}
 800c918:	b085      	sub	sp, #20
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c926:	e005      	b.n	800c934 <USBD_GetLen+0x1e>
  {
    len++;
 800c928:	7bfb      	ldrb	r3, [r7, #15]
 800c92a:	3301      	adds	r3, #1
 800c92c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	3301      	adds	r3, #1
 800c932:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1f5      	bne.n	800c928 <USBD_GetLen+0x12>
  }

  return len;
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr

0800c94a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c94a:	b580      	push	{r7, lr}
 800c94c:	b084      	sub	sp, #16
 800c94e:	af00      	add	r7, sp, #0
 800c950:	60f8      	str	r0, [r7, #12]
 800c952:	60b9      	str	r1, [r7, #8]
 800c954:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2202      	movs	r2, #2
 800c95a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	2100      	movs	r1, #0
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 fca0 	bl	800d2b6 <USBD_LL_Transmit>

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	2100      	movs	r1, #0
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	f000 fc8f 	bl	800d2b6 <USBD_LL_Transmit>

  return USBD_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3710      	adds	r7, #16
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd80      	pop	{r7, pc}

0800c9a2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c9a2:	b580      	push	{r7, lr}
 800c9a4:	b084      	sub	sp, #16
 800c9a6:	af00      	add	r7, sp, #0
 800c9a8:	60f8      	str	r0, [r7, #12]
 800c9aa:	60b9      	str	r1, [r7, #8]
 800c9ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2203      	movs	r2, #3
 800c9b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68ba      	ldr	r2, [r7, #8]
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 fc93 	bl	800d2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}

0800c9dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	68f8      	ldr	r0, [r7, #12]
 800c9f0:	f000 fc82 	bl	800d2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2204      	movs	r2, #4
 800ca0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca0e:	2300      	movs	r3, #0
 800ca10:	2200      	movs	r2, #0
 800ca12:	2100      	movs	r1, #0
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fc4e 	bl	800d2b6 <USBD_LL_Transmit>

  return USBD_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2205      	movs	r2, #5
 800ca30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca34:	2300      	movs	r3, #0
 800ca36:	2200      	movs	r2, #0
 800ca38:	2100      	movs	r1, #0
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f000 fc5c 	bl	800d2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca40:	2300      	movs	r3, #0
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3708      	adds	r7, #8
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
	...

0800ca4c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ca50:	2200      	movs	r2, #0
 800ca52:	4912      	ldr	r1, [pc, #72]	@ (800ca9c <MX_USB_Device_Init+0x50>)
 800ca54:	4812      	ldr	r0, [pc, #72]	@ (800caa0 <MX_USB_Device_Init+0x54>)
 800ca56:	f7fe fed9 	bl	800b80c <USBD_Init>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d001      	beq.n	800ca64 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ca60:	f7f4 ff2d 	bl	80018be <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ca64:	490f      	ldr	r1, [pc, #60]	@ (800caa4 <MX_USB_Device_Init+0x58>)
 800ca66:	480e      	ldr	r0, [pc, #56]	@ (800caa0 <MX_USB_Device_Init+0x54>)
 800ca68:	f7fe ff00 	bl	800b86c <USBD_RegisterClass>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d001      	beq.n	800ca76 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ca72:	f7f4 ff24 	bl	80018be <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ca76:	490c      	ldr	r1, [pc, #48]	@ (800caa8 <MX_USB_Device_Init+0x5c>)
 800ca78:	4809      	ldr	r0, [pc, #36]	@ (800caa0 <MX_USB_Device_Init+0x54>)
 800ca7a:	f7fe fe21 	bl	800b6c0 <USBD_CDC_RegisterInterface>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d001      	beq.n	800ca88 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ca84:	f7f4 ff1b 	bl	80018be <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ca88:	4805      	ldr	r0, [pc, #20]	@ (800caa0 <MX_USB_Device_Init+0x54>)
 800ca8a:	f7fe ff16 	bl	800b8ba <USBD_Start>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ca94:	f7f4 ff13 	bl	80018be <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ca98:	bf00      	nop
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20000130 	.word	0x20000130
 800caa0:	20000460 	.word	0x20000460
 800caa4:	20000018 	.word	0x20000018
 800caa8:	2000011c 	.word	0x2000011c

0800caac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cab0:	2200      	movs	r2, #0
 800cab2:	4905      	ldr	r1, [pc, #20]	@ (800cac8 <CDC_Init_FS+0x1c>)
 800cab4:	4805      	ldr	r0, [pc, #20]	@ (800cacc <CDC_Init_FS+0x20>)
 800cab6:	f7fe fe18 	bl	800b6ea <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800caba:	4905      	ldr	r1, [pc, #20]	@ (800cad0 <CDC_Init_FS+0x24>)
 800cabc:	4803      	ldr	r0, [pc, #12]	@ (800cacc <CDC_Init_FS+0x20>)
 800cabe:	f7fe fe32 	bl	800b726 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cac2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	20000b30 	.word	0x20000b30
 800cacc:	20000460 	.word	0x20000460
 800cad0:	20000730 	.word	0x20000730

0800cad4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cad4:	b480      	push	{r7}
 800cad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cad8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cada:	4618      	mov	r0, r3
 800cadc:	46bd      	mov	sp, r7
 800cade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae2:	4770      	bx	lr

0800cae4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	4603      	mov	r3, r0
 800caec:	6039      	str	r1, [r7, #0]
 800caee:	71fb      	strb	r3, [r7, #7]
 800caf0:	4613      	mov	r3, r2
 800caf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800caf4:	79fb      	ldrb	r3, [r7, #7]
 800caf6:	2b23      	cmp	r3, #35	@ 0x23
 800caf8:	d84a      	bhi.n	800cb90 <CDC_Control_FS+0xac>
 800cafa:	a201      	add	r2, pc, #4	@ (adr r2, 800cb00 <CDC_Control_FS+0x1c>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb91 	.word	0x0800cb91
 800cb04:	0800cb91 	.word	0x0800cb91
 800cb08:	0800cb91 	.word	0x0800cb91
 800cb0c:	0800cb91 	.word	0x0800cb91
 800cb10:	0800cb91 	.word	0x0800cb91
 800cb14:	0800cb91 	.word	0x0800cb91
 800cb18:	0800cb91 	.word	0x0800cb91
 800cb1c:	0800cb91 	.word	0x0800cb91
 800cb20:	0800cb91 	.word	0x0800cb91
 800cb24:	0800cb91 	.word	0x0800cb91
 800cb28:	0800cb91 	.word	0x0800cb91
 800cb2c:	0800cb91 	.word	0x0800cb91
 800cb30:	0800cb91 	.word	0x0800cb91
 800cb34:	0800cb91 	.word	0x0800cb91
 800cb38:	0800cb91 	.word	0x0800cb91
 800cb3c:	0800cb91 	.word	0x0800cb91
 800cb40:	0800cb91 	.word	0x0800cb91
 800cb44:	0800cb91 	.word	0x0800cb91
 800cb48:	0800cb91 	.word	0x0800cb91
 800cb4c:	0800cb91 	.word	0x0800cb91
 800cb50:	0800cb91 	.word	0x0800cb91
 800cb54:	0800cb91 	.word	0x0800cb91
 800cb58:	0800cb91 	.word	0x0800cb91
 800cb5c:	0800cb91 	.word	0x0800cb91
 800cb60:	0800cb91 	.word	0x0800cb91
 800cb64:	0800cb91 	.word	0x0800cb91
 800cb68:	0800cb91 	.word	0x0800cb91
 800cb6c:	0800cb91 	.word	0x0800cb91
 800cb70:	0800cb91 	.word	0x0800cb91
 800cb74:	0800cb91 	.word	0x0800cb91
 800cb78:	0800cb91 	.word	0x0800cb91
 800cb7c:	0800cb91 	.word	0x0800cb91
 800cb80:	0800cb91 	.word	0x0800cb91
 800cb84:	0800cb91 	.word	0x0800cb91
 800cb88:	0800cb91 	.word	0x0800cb91
 800cb8c:	0800cb91 	.word	0x0800cb91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb90:	bf00      	nop
  }

  return (USBD_OK);
 800cb92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	370c      	adds	r7, #12
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr

0800cba0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cbaa:	6879      	ldr	r1, [r7, #4]
 800cbac:	4805      	ldr	r0, [pc, #20]	@ (800cbc4 <CDC_Receive_FS+0x24>)
 800cbae:	f7fe fdba 	bl	800b726 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbb2:	4804      	ldr	r0, [pc, #16]	@ (800cbc4 <CDC_Receive_FS+0x24>)
 800cbb4:	f7fe fe00 	bl	800b7b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cbb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20000460 	.word	0x20000460

0800cbc8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cbd8:	4b0d      	ldr	r3, [pc, #52]	@ (800cc10 <CDC_Transmit_FS+0x48>)
 800cbda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cbde:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d001      	beq.n	800cbee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cbea:	2301      	movs	r3, #1
 800cbec:	e00b      	b.n	800cc06 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cbee:	887b      	ldrh	r3, [r7, #2]
 800cbf0:	461a      	mov	r2, r3
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	4806      	ldr	r0, [pc, #24]	@ (800cc10 <CDC_Transmit_FS+0x48>)
 800cbf6:	f7fe fd78 	bl	800b6ea <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cbfa:	4805      	ldr	r0, [pc, #20]	@ (800cc10 <CDC_Transmit_FS+0x48>)
 800cbfc:	f7fe fdac 	bl	800b758 <USBD_CDC_TransmitPacket>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000460 	.word	0x20000460

0800cc14 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b087      	sub	sp, #28
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60f8      	str	r0, [r7, #12]
 800cc1c:	60b9      	str	r1, [r7, #8]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	371c      	adds	r7, #28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc34:	4770      	bx	lr
	...

0800cc38 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b083      	sub	sp, #12
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	6039      	str	r1, [r7, #0]
 800cc42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	2212      	movs	r2, #18
 800cc48:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cc4a:	4b03      	ldr	r3, [pc, #12]	@ (800cc58 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr
 800cc58:	20000150 	.word	0x20000150

0800cc5c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc5c:	b480      	push	{r7}
 800cc5e:	b083      	sub	sp, #12
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	4603      	mov	r3, r0
 800cc64:	6039      	str	r1, [r7, #0]
 800cc66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	2204      	movs	r2, #4
 800cc6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc6e:	4b03      	ldr	r3, [pc, #12]	@ (800cc7c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	20000164 	.word	0x20000164

0800cc80 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	4603      	mov	r3, r0
 800cc88:	6039      	str	r1, [r7, #0]
 800cc8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc8c:	79fb      	ldrb	r3, [r7, #7]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d105      	bne.n	800cc9e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	4907      	ldr	r1, [pc, #28]	@ (800ccb4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cc96:	4808      	ldr	r0, [pc, #32]	@ (800ccb8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cc98:	f7ff fdf7 	bl	800c88a <USBD_GetString>
 800cc9c:	e004      	b.n	800cca8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc9e:	683a      	ldr	r2, [r7, #0]
 800cca0:	4904      	ldr	r1, [pc, #16]	@ (800ccb4 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cca2:	4805      	ldr	r0, [pc, #20]	@ (800ccb8 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cca4:	f7ff fdf1 	bl	800c88a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca8:	4b02      	ldr	r3, [pc, #8]	@ (800ccb4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3708      	adds	r7, #8
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	20000f30 	.word	0x20000f30
 800ccb8:	0800ddec 	.word	0x0800ddec

0800ccbc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	6039      	str	r1, [r7, #0]
 800ccc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccc8:	683a      	ldr	r2, [r7, #0]
 800ccca:	4904      	ldr	r1, [pc, #16]	@ (800ccdc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cccc:	4804      	ldr	r0, [pc, #16]	@ (800cce0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ccce:	f7ff fddc 	bl	800c88a <USBD_GetString>
  return USBD_StrDesc;
 800ccd2:	4b02      	ldr	r3, [pc, #8]	@ (800ccdc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	20000f30 	.word	0x20000f30
 800cce0:	0800de04 	.word	0x0800de04

0800cce4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	4603      	mov	r3, r0
 800ccec:	6039      	str	r1, [r7, #0]
 800ccee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	221a      	movs	r2, #26
 800ccf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccf6:	f000 f843 	bl	800cd80 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ccfa:	4b02      	ldr	r3, [pc, #8]	@ (800cd04 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	20000168 	.word	0x20000168

0800cd08 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	6039      	str	r1, [r7, #0]
 800cd12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd14:	79fb      	ldrb	r3, [r7, #7]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d105      	bne.n	800cd26 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd1a:	683a      	ldr	r2, [r7, #0]
 800cd1c:	4907      	ldr	r1, [pc, #28]	@ (800cd3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd1e:	4808      	ldr	r0, [pc, #32]	@ (800cd40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd20:	f7ff fdb3 	bl	800c88a <USBD_GetString>
 800cd24:	e004      	b.n	800cd30 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd26:	683a      	ldr	r2, [r7, #0]
 800cd28:	4904      	ldr	r1, [pc, #16]	@ (800cd3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd2a:	4805      	ldr	r0, [pc, #20]	@ (800cd40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd2c:	f7ff fdad 	bl	800c88a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd30:	4b02      	ldr	r3, [pc, #8]	@ (800cd3c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3708      	adds	r7, #8
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20000f30 	.word	0x20000f30
 800cd40:	0800de18 	.word	0x0800de18

0800cd44 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	6039      	str	r1, [r7, #0]
 800cd4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd50:	79fb      	ldrb	r3, [r7, #7]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d105      	bne.n	800cd62 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	4907      	ldr	r1, [pc, #28]	@ (800cd78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd5a:	4808      	ldr	r0, [pc, #32]	@ (800cd7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd5c:	f7ff fd95 	bl	800c88a <USBD_GetString>
 800cd60:	e004      	b.n	800cd6c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	4904      	ldr	r1, [pc, #16]	@ (800cd78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd66:	4805      	ldr	r0, [pc, #20]	@ (800cd7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd68:	f7ff fd8f 	bl	800c88a <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd6c:	4b02      	ldr	r3, [pc, #8]	@ (800cd78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3708      	adds	r7, #8
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	20000f30 	.word	0x20000f30
 800cd7c:	0800de24 	.word	0x0800de24

0800cd80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd86:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc4 <Get_SerialNum+0x44>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd8c:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc8 <Get_SerialNum+0x48>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd92:	4b0e      	ldr	r3, [pc, #56]	@ (800cdcc <Get_SerialNum+0x4c>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d009      	beq.n	800cdba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cda6:	2208      	movs	r2, #8
 800cda8:	4909      	ldr	r1, [pc, #36]	@ (800cdd0 <Get_SerialNum+0x50>)
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f000 f814 	bl	800cdd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cdb0:	2204      	movs	r2, #4
 800cdb2:	4908      	ldr	r1, [pc, #32]	@ (800cdd4 <Get_SerialNum+0x54>)
 800cdb4:	68b8      	ldr	r0, [r7, #8]
 800cdb6:	f000 f80f 	bl	800cdd8 <IntToUnicode>
  }
}
 800cdba:	bf00      	nop
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	1fff7590 	.word	0x1fff7590
 800cdc8:	1fff7594 	.word	0x1fff7594
 800cdcc:	1fff7598 	.word	0x1fff7598
 800cdd0:	2000016a 	.word	0x2000016a
 800cdd4:	2000017a 	.word	0x2000017a

0800cdd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b087      	sub	sp, #28
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	4613      	mov	r3, r2
 800cde4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cdea:	2300      	movs	r3, #0
 800cdec:	75fb      	strb	r3, [r7, #23]
 800cdee:	e027      	b.n	800ce40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	0f1b      	lsrs	r3, r3, #28
 800cdf4:	2b09      	cmp	r3, #9
 800cdf6:	d80b      	bhi.n	800ce10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	0f1b      	lsrs	r3, r3, #28
 800cdfc:	b2da      	uxtb	r2, r3
 800cdfe:	7dfb      	ldrb	r3, [r7, #23]
 800ce00:	005b      	lsls	r3, r3, #1
 800ce02:	4619      	mov	r1, r3
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	440b      	add	r3, r1
 800ce08:	3230      	adds	r2, #48	@ 0x30
 800ce0a:	b2d2      	uxtb	r2, r2
 800ce0c:	701a      	strb	r2, [r3, #0]
 800ce0e:	e00a      	b.n	800ce26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	0f1b      	lsrs	r3, r3, #28
 800ce14:	b2da      	uxtb	r2, r3
 800ce16:	7dfb      	ldrb	r3, [r7, #23]
 800ce18:	005b      	lsls	r3, r3, #1
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	68bb      	ldr	r3, [r7, #8]
 800ce1e:	440b      	add	r3, r1
 800ce20:	3237      	adds	r2, #55	@ 0x37
 800ce22:	b2d2      	uxtb	r2, r2
 800ce24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	011b      	lsls	r3, r3, #4
 800ce2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce2c:	7dfb      	ldrb	r3, [r7, #23]
 800ce2e:	005b      	lsls	r3, r3, #1
 800ce30:	3301      	adds	r3, #1
 800ce32:	68ba      	ldr	r2, [r7, #8]
 800ce34:	4413      	add	r3, r2
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce3a:	7dfb      	ldrb	r3, [r7, #23]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	75fb      	strb	r3, [r7, #23]
 800ce40:	7dfa      	ldrb	r2, [r7, #23]
 800ce42:	79fb      	ldrb	r3, [r7, #7]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d3d3      	bcc.n	800cdf0 <IntToUnicode+0x18>
  }
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr
	...

0800ce58 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b094      	sub	sp, #80	@ 0x50
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce60:	f107 030c 	add.w	r3, r7, #12
 800ce64:	2244      	movs	r2, #68	@ 0x44
 800ce66:	2100      	movs	r1, #0
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 fb2d 	bl	800d4c8 <memset>
  if(pcdHandle->Instance==USB)
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	4a15      	ldr	r2, [pc, #84]	@ (800cec8 <HAL_PCD_MspInit+0x70>)
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d123      	bne.n	800cec0 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ce78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce7c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ce7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ce82:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce84:	f107 030c 	add.w	r3, r7, #12
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7f9 ff23 	bl	8006cd4 <HAL_RCCEx_PeriphCLKConfig>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d001      	beq.n	800ce98 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ce94:	f7f4 fd13 	bl	80018be <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce98:	4b0c      	ldr	r3, [pc, #48]	@ (800cecc <HAL_PCD_MspInit+0x74>)
 800ce9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce9c:	4a0b      	ldr	r2, [pc, #44]	@ (800cecc <HAL_PCD_MspInit+0x74>)
 800ce9e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cea2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cea4:	4b09      	ldr	r3, [pc, #36]	@ (800cecc <HAL_PCD_MspInit+0x74>)
 800cea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cea8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ceac:	60bb      	str	r3, [r7, #8]
 800ceae:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	2014      	movs	r0, #20
 800ceb6:	f7f6 f970 	bl	800319a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ceba:	2014      	movs	r0, #20
 800cebc:	f7f6 f987 	bl	80031ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cec0:	bf00      	nop
 800cec2:	3750      	adds	r7, #80	@ 0x50
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	40005c00 	.word	0x40005c00
 800cecc:	40021000 	.word	0x40021000

0800ced0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cee4:	4619      	mov	r1, r3
 800cee6:	4610      	mov	r0, r2
 800cee8:	f7fe fd32 	bl	800b950 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ceec:	bf00      	nop
 800ceee:	3708      	adds	r7, #8
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	460b      	mov	r3, r1
 800cefe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cf06:	78fa      	ldrb	r2, [r7, #3]
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	4613      	mov	r3, r2
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	00db      	lsls	r3, r3, #3
 800cf12:	440b      	add	r3, r1
 800cf14:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	78fb      	ldrb	r3, [r7, #3]
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	f7fe fd6c 	bl	800b9fa <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf2a:	b580      	push	{r7, lr}
 800cf2c:	b082      	sub	sp, #8
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
 800cf32:	460b      	mov	r3, r1
 800cf34:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cf3c:	78fa      	ldrb	r2, [r7, #3]
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4613      	mov	r3, r2
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	4413      	add	r3, r2
 800cf46:	00db      	lsls	r3, r3, #3
 800cf48:	440b      	add	r3, r1
 800cf4a:	3324      	adds	r3, #36	@ 0x24
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	4619      	mov	r1, r3
 800cf52:	f7fe fdb5 	bl	800bac0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cf56:	bf00      	nop
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7fe fec9 	bl	800bd04 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cf72:	bf00      	nop
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}

0800cf7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf7a:	b580      	push	{r7, lr}
 800cf7c:	b084      	sub	sp, #16
 800cf7e:	af00      	add	r7, sp, #0
 800cf80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf82:	2301      	movs	r3, #1
 800cf84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	795b      	ldrb	r3, [r3, #5]
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	d001      	beq.n	800cf92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf8e:	f7f4 fc96 	bl	80018be <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf98:	7bfa      	ldrb	r2, [r7, #15]
 800cf9a:	4611      	mov	r1, r2
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fe fe73 	bl	800bc88 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7fe fe1f 	bl	800bbec <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cfae:	bf00      	nop
 800cfb0:	3710      	adds	r7, #16
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	bd80      	pop	{r7, pc}
	...

0800cfb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe fe6e 	bl	800bca8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	7a5b      	ldrb	r3, [r3, #9]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d005      	beq.n	800cfe0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfd4:	4b04      	ldr	r3, [pc, #16]	@ (800cfe8 <HAL_PCD_SuspendCallback+0x30>)
 800cfd6:	691b      	ldr	r3, [r3, #16]
 800cfd8:	4a03      	ldr	r2, [pc, #12]	@ (800cfe8 <HAL_PCD_SuspendCallback+0x30>)
 800cfda:	f043 0306 	orr.w	r3, r3, #6
 800cfde:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cfe0:	bf00      	nop
 800cfe2:	3708      	adds	r7, #8
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}
 800cfe8:	e000ed00 	.word	0xe000ed00

0800cfec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	7a5b      	ldrb	r3, [r3, #9]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d007      	beq.n	800d00c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cffc:	4b08      	ldr	r3, [pc, #32]	@ (800d020 <HAL_PCD_ResumeCallback+0x34>)
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	4a07      	ldr	r2, [pc, #28]	@ (800d020 <HAL_PCD_ResumeCallback+0x34>)
 800d002:	f023 0306 	bic.w	r3, r3, #6
 800d006:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d008:	f000 f9f8 	bl	800d3fc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d012:	4618      	mov	r0, r3
 800d014:	f7fe fe5e 	bl	800bcd4 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d018:	bf00      	nop
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	e000ed00 	.word	0xe000ed00

0800d024 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d02c:	4a2b      	ldr	r2, [pc, #172]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	4a29      	ldr	r2, [pc, #164]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d038:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d03c:	4b27      	ldr	r3, [pc, #156]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d03e:	4a28      	ldr	r2, [pc, #160]	@ (800d0e0 <USBD_LL_Init+0xbc>)
 800d040:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d042:	4b26      	ldr	r3, [pc, #152]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d044:	2208      	movs	r2, #8
 800d046:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d048:	4b24      	ldr	r3, [pc, #144]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d04a:	2202      	movs	r2, #2
 800d04c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d04e:	4b23      	ldr	r3, [pc, #140]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d050:	2202      	movs	r2, #2
 800d052:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d054:	4b21      	ldr	r3, [pc, #132]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d056:	2200      	movs	r2, #0
 800d058:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d05a:	4b20      	ldr	r3, [pc, #128]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d05c:	2200      	movs	r2, #0
 800d05e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d060:	4b1e      	ldr	r3, [pc, #120]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d062:	2200      	movs	r2, #0
 800d064:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d066:	4b1d      	ldr	r3, [pc, #116]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d068:	2200      	movs	r2, #0
 800d06a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d06c:	481b      	ldr	r0, [pc, #108]	@ (800d0dc <USBD_LL_Init+0xb8>)
 800d06e:	f7f7 fb2a 	bl	80046c6 <HAL_PCD_Init>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d078:	f7f4 fc21 	bl	80018be <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d082:	2318      	movs	r3, #24
 800d084:	2200      	movs	r2, #0
 800d086:	2100      	movs	r1, #0
 800d088:	f7f8 ffe5 	bl	8006056 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d092:	2358      	movs	r3, #88	@ 0x58
 800d094:	2200      	movs	r2, #0
 800d096:	2180      	movs	r1, #128	@ 0x80
 800d098:	f7f8 ffdd 	bl	8006056 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0a2:	23c0      	movs	r3, #192	@ 0xc0
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2181      	movs	r1, #129	@ 0x81
 800d0a8:	f7f8 ffd5 	bl	8006056 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0b2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	2101      	movs	r1, #1
 800d0ba:	f7f8 ffcc 	bl	8006056 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	2182      	movs	r1, #130	@ 0x82
 800d0cc:	f7f8 ffc3 	bl	8006056 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	20001130 	.word	0x20001130
 800d0e0:	40005c00 	.word	0x40005c00

0800d0e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f7 fbb1 	bl	8004862 <HAL_PCD_Start>
 800d100:	4603      	mov	r3, r0
 800d102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	4618      	mov	r0, r3
 800d108:	f000 f97e 	bl	800d408 <USBD_Get_USB_Status>
 800d10c:	4603      	mov	r3, r0
 800d10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d110:	7bbb      	ldrb	r3, [r7, #14]
}
 800d112:	4618      	mov	r0, r3
 800d114:	3710      	adds	r7, #16
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b084      	sub	sp, #16
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
 800d122:	4608      	mov	r0, r1
 800d124:	4611      	mov	r1, r2
 800d126:	461a      	mov	r2, r3
 800d128:	4603      	mov	r3, r0
 800d12a:	70fb      	strb	r3, [r7, #3]
 800d12c:	460b      	mov	r3, r1
 800d12e:	70bb      	strb	r3, [r7, #2]
 800d130:	4613      	mov	r3, r2
 800d132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d142:	78bb      	ldrb	r3, [r7, #2]
 800d144:	883a      	ldrh	r2, [r7, #0]
 800d146:	78f9      	ldrb	r1, [r7, #3]
 800d148:	f7f7 fcf8 	bl	8004b3c <HAL_PCD_EP_Open>
 800d14c:	4603      	mov	r3, r0
 800d14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	4618      	mov	r0, r3
 800d154:	f000 f958 	bl	800d408 <USBD_Get_USB_Status>
 800d158:	4603      	mov	r3, r0
 800d15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}

0800d166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	460b      	mov	r3, r1
 800d170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d176:	2300      	movs	r3, #0
 800d178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d180:	78fa      	ldrb	r2, [r7, #3]
 800d182:	4611      	mov	r1, r2
 800d184:	4618      	mov	r0, r3
 800d186:	f7f7 fd38 	bl	8004bfa <HAL_PCD_EP_Close>
 800d18a:	4603      	mov	r3, r0
 800d18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d18e:	7bfb      	ldrb	r3, [r7, #15]
 800d190:	4618      	mov	r0, r3
 800d192:	f000 f939 	bl	800d408 <USBD_Get_USB_Status>
 800d196:	4603      	mov	r3, r0
 800d198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1be:	78fa      	ldrb	r2, [r7, #3]
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7f7 fde1 	bl	8004d8a <HAL_PCD_EP_SetStall>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1cc:	7bfb      	ldrb	r3, [r7, #15]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 f91a 	bl	800d408 <USBD_Get_USB_Status>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3710      	adds	r7, #16
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}

0800d1e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1e2:	b580      	push	{r7, lr}
 800d1e4:	b084      	sub	sp, #16
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1fc:	78fa      	ldrb	r2, [r7, #3]
 800d1fe:	4611      	mov	r1, r2
 800d200:	4618      	mov	r0, r3
 800d202:	f7f7 fe14 	bl	8004e2e <HAL_PCD_EP_ClrStall>
 800d206:	4603      	mov	r3, r0
 800d208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d20a:	7bfb      	ldrb	r3, [r7, #15]
 800d20c:	4618      	mov	r0, r3
 800d20e:	f000 f8fb 	bl	800d408 <USBD_Get_USB_Status>
 800d212:	4603      	mov	r3, r0
 800d214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d216:	7bbb      	ldrb	r3, [r7, #14]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3710      	adds	r7, #16
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	460b      	mov	r3, r1
 800d22a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	da0b      	bge.n	800d254 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d242:	68f9      	ldr	r1, [r7, #12]
 800d244:	4613      	mov	r3, r2
 800d246:	009b      	lsls	r3, r3, #2
 800d248:	4413      	add	r3, r2
 800d24a:	00db      	lsls	r3, r3, #3
 800d24c:	440b      	add	r3, r1
 800d24e:	3312      	adds	r3, #18
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	e00b      	b.n	800d26c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d254:	78fb      	ldrb	r3, [r7, #3]
 800d256:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d25a:	68f9      	ldr	r1, [r7, #12]
 800d25c:	4613      	mov	r3, r2
 800d25e:	009b      	lsls	r3, r3, #2
 800d260:	4413      	add	r3, r2
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	440b      	add	r3, r1
 800d266:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d26a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d288:	2300      	movs	r3, #0
 800d28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d292:	78fa      	ldrb	r2, [r7, #3]
 800d294:	4611      	mov	r1, r2
 800d296:	4618      	mov	r0, r3
 800d298:	f7f7 fc2c 	bl	8004af4 <HAL_PCD_SetAddress>
 800d29c:	4603      	mov	r3, r0
 800d29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f000 f8b0 	bl	800d408 <USBD_Get_USB_Status>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b086      	sub	sp, #24
 800d2ba:	af00      	add	r7, sp, #0
 800d2bc:	60f8      	str	r0, [r7, #12]
 800d2be:	607a      	str	r2, [r7, #4]
 800d2c0:	603b      	str	r3, [r7, #0]
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d2d4:	7af9      	ldrb	r1, [r7, #11]
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	f7f7 fd1f 	bl	8004d1c <HAL_PCD_EP_Transmit>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2e2:	7dfb      	ldrb	r3, [r7, #23]
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 f88f 	bl	800d408 <USBD_Get_USB_Status>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	607a      	str	r2, [r7, #4]
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	460b      	mov	r3, r1
 800d306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d30c:	2300      	movs	r3, #0
 800d30e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d316:	7af9      	ldrb	r1, [r7, #11]
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	687a      	ldr	r2, [r7, #4]
 800d31c:	f7f7 fcb5 	bl	8004c8a <HAL_PCD_EP_Receive>
 800d320:	4603      	mov	r3, r0
 800d322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d324:	7dfb      	ldrb	r3, [r7, #23]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 f86e 	bl	800d408 <USBD_Get_USB_Status>
 800d32c:	4603      	mov	r3, r0
 800d32e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d330:	7dbb      	ldrb	r3, [r7, #22]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3718      	adds	r7, #24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b082      	sub	sp, #8
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	460b      	mov	r3, r1
 800d344:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d34c:	78fa      	ldrb	r2, [r7, #3]
 800d34e:	4611      	mov	r1, r2
 800d350:	4618      	mov	r0, r3
 800d352:	f7f7 fccb 	bl	8004cec <HAL_PCD_EP_GetRxCount>
 800d356:	4603      	mov	r3, r0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3708      	adds	r7, #8
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d36c:	78fb      	ldrb	r3, [r7, #3]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d002      	beq.n	800d378 <HAL_PCDEx_LPM_Callback+0x18>
 800d372:	2b01      	cmp	r3, #1
 800d374:	d013      	beq.n	800d39e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d376:	e023      	b.n	800d3c0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	7a5b      	ldrb	r3, [r3, #9]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d007      	beq.n	800d390 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d380:	f000 f83c 	bl	800d3fc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d384:	4b10      	ldr	r3, [pc, #64]	@ (800d3c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d386:	691b      	ldr	r3, [r3, #16]
 800d388:	4a0f      	ldr	r2, [pc, #60]	@ (800d3c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d38a:	f023 0306 	bic.w	r3, r3, #6
 800d38e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d396:	4618      	mov	r0, r3
 800d398:	f7fe fc9c 	bl	800bcd4 <USBD_LL_Resume>
    break;
 800d39c:	e010      	b.n	800d3c0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7fe fc7f 	bl	800bca8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	7a5b      	ldrb	r3, [r3, #9]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d005      	beq.n	800d3be <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3b2:	4b05      	ldr	r3, [pc, #20]	@ (800d3c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3b4:	691b      	ldr	r3, [r3, #16]
 800d3b6:	4a04      	ldr	r2, [pc, #16]	@ (800d3c8 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3b8:	f043 0306 	orr.w	r3, r3, #6
 800d3bc:	6113      	str	r3, [r2, #16]
    break;
 800d3be:	bf00      	nop
}
 800d3c0:	bf00      	nop
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	e000ed00 	.word	0xe000ed00

0800d3cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3d4:	4b03      	ldr	r3, [pc, #12]	@ (800d3e4 <USBD_static_malloc+0x18>)
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	370c      	adds	r7, #12
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
 800d3e2:	bf00      	nop
 800d3e4:	2000140c 	.word	0x2000140c

0800d3e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b083      	sub	sp, #12
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]

}
 800d3f0:	bf00      	nop
 800d3f2:	370c      	adds	r7, #12
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d400:	f7f4 fa0e 	bl	8001820 <SystemClock_Config>
}
 800d404:	bf00      	nop
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d408:	b480      	push	{r7}
 800d40a:	b085      	sub	sp, #20
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d416:	79fb      	ldrb	r3, [r7, #7]
 800d418:	2b03      	cmp	r3, #3
 800d41a:	d817      	bhi.n	800d44c <USBD_Get_USB_Status+0x44>
 800d41c:	a201      	add	r2, pc, #4	@ (adr r2, 800d424 <USBD_Get_USB_Status+0x1c>)
 800d41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d422:	bf00      	nop
 800d424:	0800d435 	.word	0x0800d435
 800d428:	0800d43b 	.word	0x0800d43b
 800d42c:	0800d441 	.word	0x0800d441
 800d430:	0800d447 	.word	0x0800d447
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	73fb      	strb	r3, [r7, #15]
    break;
 800d438:	e00b      	b.n	800d452 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d43a:	2303      	movs	r3, #3
 800d43c:	73fb      	strb	r3, [r7, #15]
    break;
 800d43e:	e008      	b.n	800d452 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d440:	2301      	movs	r3, #1
 800d442:	73fb      	strb	r3, [r7, #15]
    break;
 800d444:	e005      	b.n	800d452 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d446:	2303      	movs	r3, #3
 800d448:	73fb      	strb	r3, [r7, #15]
    break;
 800d44a:	e002      	b.n	800d452 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d44c:	2303      	movs	r3, #3
 800d44e:	73fb      	strb	r3, [r7, #15]
    break;
 800d450:	bf00      	nop
  }
  return usb_status;
 800d452:	7bfb      	ldrb	r3, [r7, #15]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <sniprintf>:
 800d460:	b40c      	push	{r2, r3}
 800d462:	b530      	push	{r4, r5, lr}
 800d464:	4b17      	ldr	r3, [pc, #92]	@ (800d4c4 <sniprintf+0x64>)
 800d466:	1e0c      	subs	r4, r1, #0
 800d468:	681d      	ldr	r5, [r3, #0]
 800d46a:	b09d      	sub	sp, #116	@ 0x74
 800d46c:	da08      	bge.n	800d480 <sniprintf+0x20>
 800d46e:	238b      	movs	r3, #139	@ 0x8b
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	f04f 30ff 	mov.w	r0, #4294967295
 800d476:	b01d      	add	sp, #116	@ 0x74
 800d478:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d47c:	b002      	add	sp, #8
 800d47e:	4770      	bx	lr
 800d480:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d484:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d488:	bf14      	ite	ne
 800d48a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d48e:	4623      	moveq	r3, r4
 800d490:	9304      	str	r3, [sp, #16]
 800d492:	9307      	str	r3, [sp, #28]
 800d494:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d498:	9002      	str	r0, [sp, #8]
 800d49a:	9006      	str	r0, [sp, #24]
 800d49c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d4a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d4a2:	ab21      	add	r3, sp, #132	@ 0x84
 800d4a4:	a902      	add	r1, sp, #8
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	9301      	str	r3, [sp, #4]
 800d4aa:	f000 f995 	bl	800d7d8 <_svfiprintf_r>
 800d4ae:	1c43      	adds	r3, r0, #1
 800d4b0:	bfbc      	itt	lt
 800d4b2:	238b      	movlt	r3, #139	@ 0x8b
 800d4b4:	602b      	strlt	r3, [r5, #0]
 800d4b6:	2c00      	cmp	r4, #0
 800d4b8:	d0dd      	beq.n	800d476 <sniprintf+0x16>
 800d4ba:	9b02      	ldr	r3, [sp, #8]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	e7d9      	b.n	800d476 <sniprintf+0x16>
 800d4c2:	bf00      	nop
 800d4c4:	20000184 	.word	0x20000184

0800d4c8 <memset>:
 800d4c8:	4402      	add	r2, r0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	d100      	bne.n	800d4d2 <memset+0xa>
 800d4d0:	4770      	bx	lr
 800d4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d4d6:	e7f9      	b.n	800d4cc <memset+0x4>

0800d4d8 <__errno>:
 800d4d8:	4b01      	ldr	r3, [pc, #4]	@ (800d4e0 <__errno+0x8>)
 800d4da:	6818      	ldr	r0, [r3, #0]
 800d4dc:	4770      	bx	lr
 800d4de:	bf00      	nop
 800d4e0:	20000184 	.word	0x20000184

0800d4e4 <__libc_init_array>:
 800d4e4:	b570      	push	{r4, r5, r6, lr}
 800d4e6:	4d0d      	ldr	r5, [pc, #52]	@ (800d51c <__libc_init_array+0x38>)
 800d4e8:	4c0d      	ldr	r4, [pc, #52]	@ (800d520 <__libc_init_array+0x3c>)
 800d4ea:	1b64      	subs	r4, r4, r5
 800d4ec:	10a4      	asrs	r4, r4, #2
 800d4ee:	2600      	movs	r6, #0
 800d4f0:	42a6      	cmp	r6, r4
 800d4f2:	d109      	bne.n	800d508 <__libc_init_array+0x24>
 800d4f4:	4d0b      	ldr	r5, [pc, #44]	@ (800d524 <__libc_init_array+0x40>)
 800d4f6:	4c0c      	ldr	r4, [pc, #48]	@ (800d528 <__libc_init_array+0x44>)
 800d4f8:	f000 fc66 	bl	800ddc8 <_init>
 800d4fc:	1b64      	subs	r4, r4, r5
 800d4fe:	10a4      	asrs	r4, r4, #2
 800d500:	2600      	movs	r6, #0
 800d502:	42a6      	cmp	r6, r4
 800d504:	d105      	bne.n	800d512 <__libc_init_array+0x2e>
 800d506:	bd70      	pop	{r4, r5, r6, pc}
 800d508:	f855 3b04 	ldr.w	r3, [r5], #4
 800d50c:	4798      	blx	r3
 800d50e:	3601      	adds	r6, #1
 800d510:	e7ee      	b.n	800d4f0 <__libc_init_array+0xc>
 800d512:	f855 3b04 	ldr.w	r3, [r5], #4
 800d516:	4798      	blx	r3
 800d518:	3601      	adds	r6, #1
 800d51a:	e7f2      	b.n	800d502 <__libc_init_array+0x1e>
 800d51c:	0800deb0 	.word	0x0800deb0
 800d520:	0800deb0 	.word	0x0800deb0
 800d524:	0800deb0 	.word	0x0800deb0
 800d528:	0800deb4 	.word	0x0800deb4

0800d52c <__retarget_lock_acquire_recursive>:
 800d52c:	4770      	bx	lr

0800d52e <__retarget_lock_release_recursive>:
 800d52e:	4770      	bx	lr

0800d530 <_free_r>:
 800d530:	b538      	push	{r3, r4, r5, lr}
 800d532:	4605      	mov	r5, r0
 800d534:	2900      	cmp	r1, #0
 800d536:	d041      	beq.n	800d5bc <_free_r+0x8c>
 800d538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d53c:	1f0c      	subs	r4, r1, #4
 800d53e:	2b00      	cmp	r3, #0
 800d540:	bfb8      	it	lt
 800d542:	18e4      	addlt	r4, r4, r3
 800d544:	f000 f8e0 	bl	800d708 <__malloc_lock>
 800d548:	4a1d      	ldr	r2, [pc, #116]	@ (800d5c0 <_free_r+0x90>)
 800d54a:	6813      	ldr	r3, [r2, #0]
 800d54c:	b933      	cbnz	r3, 800d55c <_free_r+0x2c>
 800d54e:	6063      	str	r3, [r4, #4]
 800d550:	6014      	str	r4, [r2, #0]
 800d552:	4628      	mov	r0, r5
 800d554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d558:	f000 b8dc 	b.w	800d714 <__malloc_unlock>
 800d55c:	42a3      	cmp	r3, r4
 800d55e:	d908      	bls.n	800d572 <_free_r+0x42>
 800d560:	6820      	ldr	r0, [r4, #0]
 800d562:	1821      	adds	r1, r4, r0
 800d564:	428b      	cmp	r3, r1
 800d566:	bf01      	itttt	eq
 800d568:	6819      	ldreq	r1, [r3, #0]
 800d56a:	685b      	ldreq	r3, [r3, #4]
 800d56c:	1809      	addeq	r1, r1, r0
 800d56e:	6021      	streq	r1, [r4, #0]
 800d570:	e7ed      	b.n	800d54e <_free_r+0x1e>
 800d572:	461a      	mov	r2, r3
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	b10b      	cbz	r3, 800d57c <_free_r+0x4c>
 800d578:	42a3      	cmp	r3, r4
 800d57a:	d9fa      	bls.n	800d572 <_free_r+0x42>
 800d57c:	6811      	ldr	r1, [r2, #0]
 800d57e:	1850      	adds	r0, r2, r1
 800d580:	42a0      	cmp	r0, r4
 800d582:	d10b      	bne.n	800d59c <_free_r+0x6c>
 800d584:	6820      	ldr	r0, [r4, #0]
 800d586:	4401      	add	r1, r0
 800d588:	1850      	adds	r0, r2, r1
 800d58a:	4283      	cmp	r3, r0
 800d58c:	6011      	str	r1, [r2, #0]
 800d58e:	d1e0      	bne.n	800d552 <_free_r+0x22>
 800d590:	6818      	ldr	r0, [r3, #0]
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	6053      	str	r3, [r2, #4]
 800d596:	4408      	add	r0, r1
 800d598:	6010      	str	r0, [r2, #0]
 800d59a:	e7da      	b.n	800d552 <_free_r+0x22>
 800d59c:	d902      	bls.n	800d5a4 <_free_r+0x74>
 800d59e:	230c      	movs	r3, #12
 800d5a0:	602b      	str	r3, [r5, #0]
 800d5a2:	e7d6      	b.n	800d552 <_free_r+0x22>
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	1821      	adds	r1, r4, r0
 800d5a8:	428b      	cmp	r3, r1
 800d5aa:	bf04      	itt	eq
 800d5ac:	6819      	ldreq	r1, [r3, #0]
 800d5ae:	685b      	ldreq	r3, [r3, #4]
 800d5b0:	6063      	str	r3, [r4, #4]
 800d5b2:	bf04      	itt	eq
 800d5b4:	1809      	addeq	r1, r1, r0
 800d5b6:	6021      	streq	r1, [r4, #0]
 800d5b8:	6054      	str	r4, [r2, #4]
 800d5ba:	e7ca      	b.n	800d552 <_free_r+0x22>
 800d5bc:	bd38      	pop	{r3, r4, r5, pc}
 800d5be:	bf00      	nop
 800d5c0:	20001770 	.word	0x20001770

0800d5c4 <sbrk_aligned>:
 800d5c4:	b570      	push	{r4, r5, r6, lr}
 800d5c6:	4e0f      	ldr	r6, [pc, #60]	@ (800d604 <sbrk_aligned+0x40>)
 800d5c8:	460c      	mov	r4, r1
 800d5ca:	6831      	ldr	r1, [r6, #0]
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	b911      	cbnz	r1, 800d5d6 <sbrk_aligned+0x12>
 800d5d0:	f000 fba6 	bl	800dd20 <_sbrk_r>
 800d5d4:	6030      	str	r0, [r6, #0]
 800d5d6:	4621      	mov	r1, r4
 800d5d8:	4628      	mov	r0, r5
 800d5da:	f000 fba1 	bl	800dd20 <_sbrk_r>
 800d5de:	1c43      	adds	r3, r0, #1
 800d5e0:	d103      	bne.n	800d5ea <sbrk_aligned+0x26>
 800d5e2:	f04f 34ff 	mov.w	r4, #4294967295
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ea:	1cc4      	adds	r4, r0, #3
 800d5ec:	f024 0403 	bic.w	r4, r4, #3
 800d5f0:	42a0      	cmp	r0, r4
 800d5f2:	d0f8      	beq.n	800d5e6 <sbrk_aligned+0x22>
 800d5f4:	1a21      	subs	r1, r4, r0
 800d5f6:	4628      	mov	r0, r5
 800d5f8:	f000 fb92 	bl	800dd20 <_sbrk_r>
 800d5fc:	3001      	adds	r0, #1
 800d5fe:	d1f2      	bne.n	800d5e6 <sbrk_aligned+0x22>
 800d600:	e7ef      	b.n	800d5e2 <sbrk_aligned+0x1e>
 800d602:	bf00      	nop
 800d604:	2000176c 	.word	0x2000176c

0800d608 <_malloc_r>:
 800d608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d60c:	1ccd      	adds	r5, r1, #3
 800d60e:	f025 0503 	bic.w	r5, r5, #3
 800d612:	3508      	adds	r5, #8
 800d614:	2d0c      	cmp	r5, #12
 800d616:	bf38      	it	cc
 800d618:	250c      	movcc	r5, #12
 800d61a:	2d00      	cmp	r5, #0
 800d61c:	4606      	mov	r6, r0
 800d61e:	db01      	blt.n	800d624 <_malloc_r+0x1c>
 800d620:	42a9      	cmp	r1, r5
 800d622:	d904      	bls.n	800d62e <_malloc_r+0x26>
 800d624:	230c      	movs	r3, #12
 800d626:	6033      	str	r3, [r6, #0]
 800d628:	2000      	movs	r0, #0
 800d62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d62e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d704 <_malloc_r+0xfc>
 800d632:	f000 f869 	bl	800d708 <__malloc_lock>
 800d636:	f8d8 3000 	ldr.w	r3, [r8]
 800d63a:	461c      	mov	r4, r3
 800d63c:	bb44      	cbnz	r4, 800d690 <_malloc_r+0x88>
 800d63e:	4629      	mov	r1, r5
 800d640:	4630      	mov	r0, r6
 800d642:	f7ff ffbf 	bl	800d5c4 <sbrk_aligned>
 800d646:	1c43      	adds	r3, r0, #1
 800d648:	4604      	mov	r4, r0
 800d64a:	d158      	bne.n	800d6fe <_malloc_r+0xf6>
 800d64c:	f8d8 4000 	ldr.w	r4, [r8]
 800d650:	4627      	mov	r7, r4
 800d652:	2f00      	cmp	r7, #0
 800d654:	d143      	bne.n	800d6de <_malloc_r+0xd6>
 800d656:	2c00      	cmp	r4, #0
 800d658:	d04b      	beq.n	800d6f2 <_malloc_r+0xea>
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	4639      	mov	r1, r7
 800d65e:	4630      	mov	r0, r6
 800d660:	eb04 0903 	add.w	r9, r4, r3
 800d664:	f000 fb5c 	bl	800dd20 <_sbrk_r>
 800d668:	4581      	cmp	r9, r0
 800d66a:	d142      	bne.n	800d6f2 <_malloc_r+0xea>
 800d66c:	6821      	ldr	r1, [r4, #0]
 800d66e:	1a6d      	subs	r5, r5, r1
 800d670:	4629      	mov	r1, r5
 800d672:	4630      	mov	r0, r6
 800d674:	f7ff ffa6 	bl	800d5c4 <sbrk_aligned>
 800d678:	3001      	adds	r0, #1
 800d67a:	d03a      	beq.n	800d6f2 <_malloc_r+0xea>
 800d67c:	6823      	ldr	r3, [r4, #0]
 800d67e:	442b      	add	r3, r5
 800d680:	6023      	str	r3, [r4, #0]
 800d682:	f8d8 3000 	ldr.w	r3, [r8]
 800d686:	685a      	ldr	r2, [r3, #4]
 800d688:	bb62      	cbnz	r2, 800d6e4 <_malloc_r+0xdc>
 800d68a:	f8c8 7000 	str.w	r7, [r8]
 800d68e:	e00f      	b.n	800d6b0 <_malloc_r+0xa8>
 800d690:	6822      	ldr	r2, [r4, #0]
 800d692:	1b52      	subs	r2, r2, r5
 800d694:	d420      	bmi.n	800d6d8 <_malloc_r+0xd0>
 800d696:	2a0b      	cmp	r2, #11
 800d698:	d917      	bls.n	800d6ca <_malloc_r+0xc2>
 800d69a:	1961      	adds	r1, r4, r5
 800d69c:	42a3      	cmp	r3, r4
 800d69e:	6025      	str	r5, [r4, #0]
 800d6a0:	bf18      	it	ne
 800d6a2:	6059      	strne	r1, [r3, #4]
 800d6a4:	6863      	ldr	r3, [r4, #4]
 800d6a6:	bf08      	it	eq
 800d6a8:	f8c8 1000 	streq.w	r1, [r8]
 800d6ac:	5162      	str	r2, [r4, r5]
 800d6ae:	604b      	str	r3, [r1, #4]
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	f000 f82f 	bl	800d714 <__malloc_unlock>
 800d6b6:	f104 000b 	add.w	r0, r4, #11
 800d6ba:	1d23      	adds	r3, r4, #4
 800d6bc:	f020 0007 	bic.w	r0, r0, #7
 800d6c0:	1ac2      	subs	r2, r0, r3
 800d6c2:	bf1c      	itt	ne
 800d6c4:	1a1b      	subne	r3, r3, r0
 800d6c6:	50a3      	strne	r3, [r4, r2]
 800d6c8:	e7af      	b.n	800d62a <_malloc_r+0x22>
 800d6ca:	6862      	ldr	r2, [r4, #4]
 800d6cc:	42a3      	cmp	r3, r4
 800d6ce:	bf0c      	ite	eq
 800d6d0:	f8c8 2000 	streq.w	r2, [r8]
 800d6d4:	605a      	strne	r2, [r3, #4]
 800d6d6:	e7eb      	b.n	800d6b0 <_malloc_r+0xa8>
 800d6d8:	4623      	mov	r3, r4
 800d6da:	6864      	ldr	r4, [r4, #4]
 800d6dc:	e7ae      	b.n	800d63c <_malloc_r+0x34>
 800d6de:	463c      	mov	r4, r7
 800d6e0:	687f      	ldr	r7, [r7, #4]
 800d6e2:	e7b6      	b.n	800d652 <_malloc_r+0x4a>
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	685b      	ldr	r3, [r3, #4]
 800d6e8:	42a3      	cmp	r3, r4
 800d6ea:	d1fb      	bne.n	800d6e4 <_malloc_r+0xdc>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	6053      	str	r3, [r2, #4]
 800d6f0:	e7de      	b.n	800d6b0 <_malloc_r+0xa8>
 800d6f2:	230c      	movs	r3, #12
 800d6f4:	6033      	str	r3, [r6, #0]
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f000 f80c 	bl	800d714 <__malloc_unlock>
 800d6fc:	e794      	b.n	800d628 <_malloc_r+0x20>
 800d6fe:	6005      	str	r5, [r0, #0]
 800d700:	e7d6      	b.n	800d6b0 <_malloc_r+0xa8>
 800d702:	bf00      	nop
 800d704:	20001770 	.word	0x20001770

0800d708 <__malloc_lock>:
 800d708:	4801      	ldr	r0, [pc, #4]	@ (800d710 <__malloc_lock+0x8>)
 800d70a:	f7ff bf0f 	b.w	800d52c <__retarget_lock_acquire_recursive>
 800d70e:	bf00      	nop
 800d710:	20001768 	.word	0x20001768

0800d714 <__malloc_unlock>:
 800d714:	4801      	ldr	r0, [pc, #4]	@ (800d71c <__malloc_unlock+0x8>)
 800d716:	f7ff bf0a 	b.w	800d52e <__retarget_lock_release_recursive>
 800d71a:	bf00      	nop
 800d71c:	20001768 	.word	0x20001768

0800d720 <__ssputs_r>:
 800d720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d724:	688e      	ldr	r6, [r1, #8]
 800d726:	461f      	mov	r7, r3
 800d728:	42be      	cmp	r6, r7
 800d72a:	680b      	ldr	r3, [r1, #0]
 800d72c:	4682      	mov	sl, r0
 800d72e:	460c      	mov	r4, r1
 800d730:	4690      	mov	r8, r2
 800d732:	d82d      	bhi.n	800d790 <__ssputs_r+0x70>
 800d734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d73c:	d026      	beq.n	800d78c <__ssputs_r+0x6c>
 800d73e:	6965      	ldr	r5, [r4, #20]
 800d740:	6909      	ldr	r1, [r1, #16]
 800d742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d746:	eba3 0901 	sub.w	r9, r3, r1
 800d74a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d74e:	1c7b      	adds	r3, r7, #1
 800d750:	444b      	add	r3, r9
 800d752:	106d      	asrs	r5, r5, #1
 800d754:	429d      	cmp	r5, r3
 800d756:	bf38      	it	cc
 800d758:	461d      	movcc	r5, r3
 800d75a:	0553      	lsls	r3, r2, #21
 800d75c:	d527      	bpl.n	800d7ae <__ssputs_r+0x8e>
 800d75e:	4629      	mov	r1, r5
 800d760:	f7ff ff52 	bl	800d608 <_malloc_r>
 800d764:	4606      	mov	r6, r0
 800d766:	b360      	cbz	r0, 800d7c2 <__ssputs_r+0xa2>
 800d768:	6921      	ldr	r1, [r4, #16]
 800d76a:	464a      	mov	r2, r9
 800d76c:	f000 fae8 	bl	800dd40 <memcpy>
 800d770:	89a3      	ldrh	r3, [r4, #12]
 800d772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d77a:	81a3      	strh	r3, [r4, #12]
 800d77c:	6126      	str	r6, [r4, #16]
 800d77e:	6165      	str	r5, [r4, #20]
 800d780:	444e      	add	r6, r9
 800d782:	eba5 0509 	sub.w	r5, r5, r9
 800d786:	6026      	str	r6, [r4, #0]
 800d788:	60a5      	str	r5, [r4, #8]
 800d78a:	463e      	mov	r6, r7
 800d78c:	42be      	cmp	r6, r7
 800d78e:	d900      	bls.n	800d792 <__ssputs_r+0x72>
 800d790:	463e      	mov	r6, r7
 800d792:	6820      	ldr	r0, [r4, #0]
 800d794:	4632      	mov	r2, r6
 800d796:	4641      	mov	r1, r8
 800d798:	f000 faa8 	bl	800dcec <memmove>
 800d79c:	68a3      	ldr	r3, [r4, #8]
 800d79e:	1b9b      	subs	r3, r3, r6
 800d7a0:	60a3      	str	r3, [r4, #8]
 800d7a2:	6823      	ldr	r3, [r4, #0]
 800d7a4:	4433      	add	r3, r6
 800d7a6:	6023      	str	r3, [r4, #0]
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ae:	462a      	mov	r2, r5
 800d7b0:	f000 fad4 	bl	800dd5c <_realloc_r>
 800d7b4:	4606      	mov	r6, r0
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	d1e0      	bne.n	800d77c <__ssputs_r+0x5c>
 800d7ba:	6921      	ldr	r1, [r4, #16]
 800d7bc:	4650      	mov	r0, sl
 800d7be:	f7ff feb7 	bl	800d530 <_free_r>
 800d7c2:	230c      	movs	r3, #12
 800d7c4:	f8ca 3000 	str.w	r3, [sl]
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ce:	81a3      	strh	r3, [r4, #12]
 800d7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d4:	e7e9      	b.n	800d7aa <__ssputs_r+0x8a>
	...

0800d7d8 <_svfiprintf_r>:
 800d7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7dc:	4698      	mov	r8, r3
 800d7de:	898b      	ldrh	r3, [r1, #12]
 800d7e0:	061b      	lsls	r3, r3, #24
 800d7e2:	b09d      	sub	sp, #116	@ 0x74
 800d7e4:	4607      	mov	r7, r0
 800d7e6:	460d      	mov	r5, r1
 800d7e8:	4614      	mov	r4, r2
 800d7ea:	d510      	bpl.n	800d80e <_svfiprintf_r+0x36>
 800d7ec:	690b      	ldr	r3, [r1, #16]
 800d7ee:	b973      	cbnz	r3, 800d80e <_svfiprintf_r+0x36>
 800d7f0:	2140      	movs	r1, #64	@ 0x40
 800d7f2:	f7ff ff09 	bl	800d608 <_malloc_r>
 800d7f6:	6028      	str	r0, [r5, #0]
 800d7f8:	6128      	str	r0, [r5, #16]
 800d7fa:	b930      	cbnz	r0, 800d80a <_svfiprintf_r+0x32>
 800d7fc:	230c      	movs	r3, #12
 800d7fe:	603b      	str	r3, [r7, #0]
 800d800:	f04f 30ff 	mov.w	r0, #4294967295
 800d804:	b01d      	add	sp, #116	@ 0x74
 800d806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d80a:	2340      	movs	r3, #64	@ 0x40
 800d80c:	616b      	str	r3, [r5, #20]
 800d80e:	2300      	movs	r3, #0
 800d810:	9309      	str	r3, [sp, #36]	@ 0x24
 800d812:	2320      	movs	r3, #32
 800d814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d818:	f8cd 800c 	str.w	r8, [sp, #12]
 800d81c:	2330      	movs	r3, #48	@ 0x30
 800d81e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9bc <_svfiprintf_r+0x1e4>
 800d822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d826:	f04f 0901 	mov.w	r9, #1
 800d82a:	4623      	mov	r3, r4
 800d82c:	469a      	mov	sl, r3
 800d82e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d832:	b10a      	cbz	r2, 800d838 <_svfiprintf_r+0x60>
 800d834:	2a25      	cmp	r2, #37	@ 0x25
 800d836:	d1f9      	bne.n	800d82c <_svfiprintf_r+0x54>
 800d838:	ebba 0b04 	subs.w	fp, sl, r4
 800d83c:	d00b      	beq.n	800d856 <_svfiprintf_r+0x7e>
 800d83e:	465b      	mov	r3, fp
 800d840:	4622      	mov	r2, r4
 800d842:	4629      	mov	r1, r5
 800d844:	4638      	mov	r0, r7
 800d846:	f7ff ff6b 	bl	800d720 <__ssputs_r>
 800d84a:	3001      	adds	r0, #1
 800d84c:	f000 80a7 	beq.w	800d99e <_svfiprintf_r+0x1c6>
 800d850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d852:	445a      	add	r2, fp
 800d854:	9209      	str	r2, [sp, #36]	@ 0x24
 800d856:	f89a 3000 	ldrb.w	r3, [sl]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f000 809f 	beq.w	800d99e <_svfiprintf_r+0x1c6>
 800d860:	2300      	movs	r3, #0
 800d862:	f04f 32ff 	mov.w	r2, #4294967295
 800d866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d86a:	f10a 0a01 	add.w	sl, sl, #1
 800d86e:	9304      	str	r3, [sp, #16]
 800d870:	9307      	str	r3, [sp, #28]
 800d872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d876:	931a      	str	r3, [sp, #104]	@ 0x68
 800d878:	4654      	mov	r4, sl
 800d87a:	2205      	movs	r2, #5
 800d87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d880:	484e      	ldr	r0, [pc, #312]	@ (800d9bc <_svfiprintf_r+0x1e4>)
 800d882:	f7f2 fccd 	bl	8000220 <memchr>
 800d886:	9a04      	ldr	r2, [sp, #16]
 800d888:	b9d8      	cbnz	r0, 800d8c2 <_svfiprintf_r+0xea>
 800d88a:	06d0      	lsls	r0, r2, #27
 800d88c:	bf44      	itt	mi
 800d88e:	2320      	movmi	r3, #32
 800d890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d894:	0711      	lsls	r1, r2, #28
 800d896:	bf44      	itt	mi
 800d898:	232b      	movmi	r3, #43	@ 0x2b
 800d89a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d89e:	f89a 3000 	ldrb.w	r3, [sl]
 800d8a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8a4:	d015      	beq.n	800d8d2 <_svfiprintf_r+0xfa>
 800d8a6:	9a07      	ldr	r2, [sp, #28]
 800d8a8:	4654      	mov	r4, sl
 800d8aa:	2000      	movs	r0, #0
 800d8ac:	f04f 0c0a 	mov.w	ip, #10
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8b6:	3b30      	subs	r3, #48	@ 0x30
 800d8b8:	2b09      	cmp	r3, #9
 800d8ba:	d94b      	bls.n	800d954 <_svfiprintf_r+0x17c>
 800d8bc:	b1b0      	cbz	r0, 800d8ec <_svfiprintf_r+0x114>
 800d8be:	9207      	str	r2, [sp, #28]
 800d8c0:	e014      	b.n	800d8ec <_svfiprintf_r+0x114>
 800d8c2:	eba0 0308 	sub.w	r3, r0, r8
 800d8c6:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	9304      	str	r3, [sp, #16]
 800d8ce:	46a2      	mov	sl, r4
 800d8d0:	e7d2      	b.n	800d878 <_svfiprintf_r+0xa0>
 800d8d2:	9b03      	ldr	r3, [sp, #12]
 800d8d4:	1d19      	adds	r1, r3, #4
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	9103      	str	r1, [sp, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	bfbb      	ittet	lt
 800d8de:	425b      	neglt	r3, r3
 800d8e0:	f042 0202 	orrlt.w	r2, r2, #2
 800d8e4:	9307      	strge	r3, [sp, #28]
 800d8e6:	9307      	strlt	r3, [sp, #28]
 800d8e8:	bfb8      	it	lt
 800d8ea:	9204      	strlt	r2, [sp, #16]
 800d8ec:	7823      	ldrb	r3, [r4, #0]
 800d8ee:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8f0:	d10a      	bne.n	800d908 <_svfiprintf_r+0x130>
 800d8f2:	7863      	ldrb	r3, [r4, #1]
 800d8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8f6:	d132      	bne.n	800d95e <_svfiprintf_r+0x186>
 800d8f8:	9b03      	ldr	r3, [sp, #12]
 800d8fa:	1d1a      	adds	r2, r3, #4
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	9203      	str	r2, [sp, #12]
 800d900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d904:	3402      	adds	r4, #2
 800d906:	9305      	str	r3, [sp, #20]
 800d908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9cc <_svfiprintf_r+0x1f4>
 800d90c:	7821      	ldrb	r1, [r4, #0]
 800d90e:	2203      	movs	r2, #3
 800d910:	4650      	mov	r0, sl
 800d912:	f7f2 fc85 	bl	8000220 <memchr>
 800d916:	b138      	cbz	r0, 800d928 <_svfiprintf_r+0x150>
 800d918:	9b04      	ldr	r3, [sp, #16]
 800d91a:	eba0 000a 	sub.w	r0, r0, sl
 800d91e:	2240      	movs	r2, #64	@ 0x40
 800d920:	4082      	lsls	r2, r0
 800d922:	4313      	orrs	r3, r2
 800d924:	3401      	adds	r4, #1
 800d926:	9304      	str	r3, [sp, #16]
 800d928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d92c:	4824      	ldr	r0, [pc, #144]	@ (800d9c0 <_svfiprintf_r+0x1e8>)
 800d92e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d932:	2206      	movs	r2, #6
 800d934:	f7f2 fc74 	bl	8000220 <memchr>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d036      	beq.n	800d9aa <_svfiprintf_r+0x1d2>
 800d93c:	4b21      	ldr	r3, [pc, #132]	@ (800d9c4 <_svfiprintf_r+0x1ec>)
 800d93e:	bb1b      	cbnz	r3, 800d988 <_svfiprintf_r+0x1b0>
 800d940:	9b03      	ldr	r3, [sp, #12]
 800d942:	3307      	adds	r3, #7
 800d944:	f023 0307 	bic.w	r3, r3, #7
 800d948:	3308      	adds	r3, #8
 800d94a:	9303      	str	r3, [sp, #12]
 800d94c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d94e:	4433      	add	r3, r6
 800d950:	9309      	str	r3, [sp, #36]	@ 0x24
 800d952:	e76a      	b.n	800d82a <_svfiprintf_r+0x52>
 800d954:	fb0c 3202 	mla	r2, ip, r2, r3
 800d958:	460c      	mov	r4, r1
 800d95a:	2001      	movs	r0, #1
 800d95c:	e7a8      	b.n	800d8b0 <_svfiprintf_r+0xd8>
 800d95e:	2300      	movs	r3, #0
 800d960:	3401      	adds	r4, #1
 800d962:	9305      	str	r3, [sp, #20]
 800d964:	4619      	mov	r1, r3
 800d966:	f04f 0c0a 	mov.w	ip, #10
 800d96a:	4620      	mov	r0, r4
 800d96c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d970:	3a30      	subs	r2, #48	@ 0x30
 800d972:	2a09      	cmp	r2, #9
 800d974:	d903      	bls.n	800d97e <_svfiprintf_r+0x1a6>
 800d976:	2b00      	cmp	r3, #0
 800d978:	d0c6      	beq.n	800d908 <_svfiprintf_r+0x130>
 800d97a:	9105      	str	r1, [sp, #20]
 800d97c:	e7c4      	b.n	800d908 <_svfiprintf_r+0x130>
 800d97e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d982:	4604      	mov	r4, r0
 800d984:	2301      	movs	r3, #1
 800d986:	e7f0      	b.n	800d96a <_svfiprintf_r+0x192>
 800d988:	ab03      	add	r3, sp, #12
 800d98a:	9300      	str	r3, [sp, #0]
 800d98c:	462a      	mov	r2, r5
 800d98e:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c8 <_svfiprintf_r+0x1f0>)
 800d990:	a904      	add	r1, sp, #16
 800d992:	4638      	mov	r0, r7
 800d994:	f3af 8000 	nop.w
 800d998:	1c42      	adds	r2, r0, #1
 800d99a:	4606      	mov	r6, r0
 800d99c:	d1d6      	bne.n	800d94c <_svfiprintf_r+0x174>
 800d99e:	89ab      	ldrh	r3, [r5, #12]
 800d9a0:	065b      	lsls	r3, r3, #25
 800d9a2:	f53f af2d 	bmi.w	800d800 <_svfiprintf_r+0x28>
 800d9a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9a8:	e72c      	b.n	800d804 <_svfiprintf_r+0x2c>
 800d9aa:	ab03      	add	r3, sp, #12
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	462a      	mov	r2, r5
 800d9b0:	4b05      	ldr	r3, [pc, #20]	@ (800d9c8 <_svfiprintf_r+0x1f0>)
 800d9b2:	a904      	add	r1, sp, #16
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	f000 f879 	bl	800daac <_printf_i>
 800d9ba:	e7ed      	b.n	800d998 <_svfiprintf_r+0x1c0>
 800d9bc:	0800de74 	.word	0x0800de74
 800d9c0:	0800de7e 	.word	0x0800de7e
 800d9c4:	00000000 	.word	0x00000000
 800d9c8:	0800d721 	.word	0x0800d721
 800d9cc:	0800de7a 	.word	0x0800de7a

0800d9d0 <_printf_common>:
 800d9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d4:	4616      	mov	r6, r2
 800d9d6:	4698      	mov	r8, r3
 800d9d8:	688a      	ldr	r2, [r1, #8]
 800d9da:	690b      	ldr	r3, [r1, #16]
 800d9dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	bfb8      	it	lt
 800d9e4:	4613      	movlt	r3, r2
 800d9e6:	6033      	str	r3, [r6, #0]
 800d9e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	460c      	mov	r4, r1
 800d9f0:	b10a      	cbz	r2, 800d9f6 <_printf_common+0x26>
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	6033      	str	r3, [r6, #0]
 800d9f6:	6823      	ldr	r3, [r4, #0]
 800d9f8:	0699      	lsls	r1, r3, #26
 800d9fa:	bf42      	ittt	mi
 800d9fc:	6833      	ldrmi	r3, [r6, #0]
 800d9fe:	3302      	addmi	r3, #2
 800da00:	6033      	strmi	r3, [r6, #0]
 800da02:	6825      	ldr	r5, [r4, #0]
 800da04:	f015 0506 	ands.w	r5, r5, #6
 800da08:	d106      	bne.n	800da18 <_printf_common+0x48>
 800da0a:	f104 0a19 	add.w	sl, r4, #25
 800da0e:	68e3      	ldr	r3, [r4, #12]
 800da10:	6832      	ldr	r2, [r6, #0]
 800da12:	1a9b      	subs	r3, r3, r2
 800da14:	42ab      	cmp	r3, r5
 800da16:	dc26      	bgt.n	800da66 <_printf_common+0x96>
 800da18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da1c:	6822      	ldr	r2, [r4, #0]
 800da1e:	3b00      	subs	r3, #0
 800da20:	bf18      	it	ne
 800da22:	2301      	movne	r3, #1
 800da24:	0692      	lsls	r2, r2, #26
 800da26:	d42b      	bmi.n	800da80 <_printf_common+0xb0>
 800da28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da2c:	4641      	mov	r1, r8
 800da2e:	4638      	mov	r0, r7
 800da30:	47c8      	blx	r9
 800da32:	3001      	adds	r0, #1
 800da34:	d01e      	beq.n	800da74 <_printf_common+0xa4>
 800da36:	6823      	ldr	r3, [r4, #0]
 800da38:	6922      	ldr	r2, [r4, #16]
 800da3a:	f003 0306 	and.w	r3, r3, #6
 800da3e:	2b04      	cmp	r3, #4
 800da40:	bf02      	ittt	eq
 800da42:	68e5      	ldreq	r5, [r4, #12]
 800da44:	6833      	ldreq	r3, [r6, #0]
 800da46:	1aed      	subeq	r5, r5, r3
 800da48:	68a3      	ldr	r3, [r4, #8]
 800da4a:	bf0c      	ite	eq
 800da4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da50:	2500      	movne	r5, #0
 800da52:	4293      	cmp	r3, r2
 800da54:	bfc4      	itt	gt
 800da56:	1a9b      	subgt	r3, r3, r2
 800da58:	18ed      	addgt	r5, r5, r3
 800da5a:	2600      	movs	r6, #0
 800da5c:	341a      	adds	r4, #26
 800da5e:	42b5      	cmp	r5, r6
 800da60:	d11a      	bne.n	800da98 <_printf_common+0xc8>
 800da62:	2000      	movs	r0, #0
 800da64:	e008      	b.n	800da78 <_printf_common+0xa8>
 800da66:	2301      	movs	r3, #1
 800da68:	4652      	mov	r2, sl
 800da6a:	4641      	mov	r1, r8
 800da6c:	4638      	mov	r0, r7
 800da6e:	47c8      	blx	r9
 800da70:	3001      	adds	r0, #1
 800da72:	d103      	bne.n	800da7c <_printf_common+0xac>
 800da74:	f04f 30ff 	mov.w	r0, #4294967295
 800da78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da7c:	3501      	adds	r5, #1
 800da7e:	e7c6      	b.n	800da0e <_printf_common+0x3e>
 800da80:	18e1      	adds	r1, r4, r3
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	2030      	movs	r0, #48	@ 0x30
 800da86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da8a:	4422      	add	r2, r4
 800da8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da94:	3302      	adds	r3, #2
 800da96:	e7c7      	b.n	800da28 <_printf_common+0x58>
 800da98:	2301      	movs	r3, #1
 800da9a:	4622      	mov	r2, r4
 800da9c:	4641      	mov	r1, r8
 800da9e:	4638      	mov	r0, r7
 800daa0:	47c8      	blx	r9
 800daa2:	3001      	adds	r0, #1
 800daa4:	d0e6      	beq.n	800da74 <_printf_common+0xa4>
 800daa6:	3601      	adds	r6, #1
 800daa8:	e7d9      	b.n	800da5e <_printf_common+0x8e>
	...

0800daac <_printf_i>:
 800daac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dab0:	7e0f      	ldrb	r7, [r1, #24]
 800dab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dab4:	2f78      	cmp	r7, #120	@ 0x78
 800dab6:	4691      	mov	r9, r2
 800dab8:	4680      	mov	r8, r0
 800daba:	460c      	mov	r4, r1
 800dabc:	469a      	mov	sl, r3
 800dabe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dac2:	d807      	bhi.n	800dad4 <_printf_i+0x28>
 800dac4:	2f62      	cmp	r7, #98	@ 0x62
 800dac6:	d80a      	bhi.n	800dade <_printf_i+0x32>
 800dac8:	2f00      	cmp	r7, #0
 800daca:	f000 80d2 	beq.w	800dc72 <_printf_i+0x1c6>
 800dace:	2f58      	cmp	r7, #88	@ 0x58
 800dad0:	f000 80b9 	beq.w	800dc46 <_printf_i+0x19a>
 800dad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dadc:	e03a      	b.n	800db54 <_printf_i+0xa8>
 800dade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dae2:	2b15      	cmp	r3, #21
 800dae4:	d8f6      	bhi.n	800dad4 <_printf_i+0x28>
 800dae6:	a101      	add	r1, pc, #4	@ (adr r1, 800daec <_printf_i+0x40>)
 800dae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800daec:	0800db45 	.word	0x0800db45
 800daf0:	0800db59 	.word	0x0800db59
 800daf4:	0800dad5 	.word	0x0800dad5
 800daf8:	0800dad5 	.word	0x0800dad5
 800dafc:	0800dad5 	.word	0x0800dad5
 800db00:	0800dad5 	.word	0x0800dad5
 800db04:	0800db59 	.word	0x0800db59
 800db08:	0800dad5 	.word	0x0800dad5
 800db0c:	0800dad5 	.word	0x0800dad5
 800db10:	0800dad5 	.word	0x0800dad5
 800db14:	0800dad5 	.word	0x0800dad5
 800db18:	0800dc59 	.word	0x0800dc59
 800db1c:	0800db83 	.word	0x0800db83
 800db20:	0800dc13 	.word	0x0800dc13
 800db24:	0800dad5 	.word	0x0800dad5
 800db28:	0800dad5 	.word	0x0800dad5
 800db2c:	0800dc7b 	.word	0x0800dc7b
 800db30:	0800dad5 	.word	0x0800dad5
 800db34:	0800db83 	.word	0x0800db83
 800db38:	0800dad5 	.word	0x0800dad5
 800db3c:	0800dad5 	.word	0x0800dad5
 800db40:	0800dc1b 	.word	0x0800dc1b
 800db44:	6833      	ldr	r3, [r6, #0]
 800db46:	1d1a      	adds	r2, r3, #4
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	6032      	str	r2, [r6, #0]
 800db4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db54:	2301      	movs	r3, #1
 800db56:	e09d      	b.n	800dc94 <_printf_i+0x1e8>
 800db58:	6833      	ldr	r3, [r6, #0]
 800db5a:	6820      	ldr	r0, [r4, #0]
 800db5c:	1d19      	adds	r1, r3, #4
 800db5e:	6031      	str	r1, [r6, #0]
 800db60:	0606      	lsls	r6, r0, #24
 800db62:	d501      	bpl.n	800db68 <_printf_i+0xbc>
 800db64:	681d      	ldr	r5, [r3, #0]
 800db66:	e003      	b.n	800db70 <_printf_i+0xc4>
 800db68:	0645      	lsls	r5, r0, #25
 800db6a:	d5fb      	bpl.n	800db64 <_printf_i+0xb8>
 800db6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db70:	2d00      	cmp	r5, #0
 800db72:	da03      	bge.n	800db7c <_printf_i+0xd0>
 800db74:	232d      	movs	r3, #45	@ 0x2d
 800db76:	426d      	negs	r5, r5
 800db78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db7c:	4859      	ldr	r0, [pc, #356]	@ (800dce4 <_printf_i+0x238>)
 800db7e:	230a      	movs	r3, #10
 800db80:	e011      	b.n	800dba6 <_printf_i+0xfa>
 800db82:	6821      	ldr	r1, [r4, #0]
 800db84:	6833      	ldr	r3, [r6, #0]
 800db86:	0608      	lsls	r0, r1, #24
 800db88:	f853 5b04 	ldr.w	r5, [r3], #4
 800db8c:	d402      	bmi.n	800db94 <_printf_i+0xe8>
 800db8e:	0649      	lsls	r1, r1, #25
 800db90:	bf48      	it	mi
 800db92:	b2ad      	uxthmi	r5, r5
 800db94:	2f6f      	cmp	r7, #111	@ 0x6f
 800db96:	4853      	ldr	r0, [pc, #332]	@ (800dce4 <_printf_i+0x238>)
 800db98:	6033      	str	r3, [r6, #0]
 800db9a:	bf14      	ite	ne
 800db9c:	230a      	movne	r3, #10
 800db9e:	2308      	moveq	r3, #8
 800dba0:	2100      	movs	r1, #0
 800dba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dba6:	6866      	ldr	r6, [r4, #4]
 800dba8:	60a6      	str	r6, [r4, #8]
 800dbaa:	2e00      	cmp	r6, #0
 800dbac:	bfa2      	ittt	ge
 800dbae:	6821      	ldrge	r1, [r4, #0]
 800dbb0:	f021 0104 	bicge.w	r1, r1, #4
 800dbb4:	6021      	strge	r1, [r4, #0]
 800dbb6:	b90d      	cbnz	r5, 800dbbc <_printf_i+0x110>
 800dbb8:	2e00      	cmp	r6, #0
 800dbba:	d04b      	beq.n	800dc54 <_printf_i+0x1a8>
 800dbbc:	4616      	mov	r6, r2
 800dbbe:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbc2:	fb03 5711 	mls	r7, r3, r1, r5
 800dbc6:	5dc7      	ldrb	r7, [r0, r7]
 800dbc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbcc:	462f      	mov	r7, r5
 800dbce:	42bb      	cmp	r3, r7
 800dbd0:	460d      	mov	r5, r1
 800dbd2:	d9f4      	bls.n	800dbbe <_printf_i+0x112>
 800dbd4:	2b08      	cmp	r3, #8
 800dbd6:	d10b      	bne.n	800dbf0 <_printf_i+0x144>
 800dbd8:	6823      	ldr	r3, [r4, #0]
 800dbda:	07df      	lsls	r7, r3, #31
 800dbdc:	d508      	bpl.n	800dbf0 <_printf_i+0x144>
 800dbde:	6923      	ldr	r3, [r4, #16]
 800dbe0:	6861      	ldr	r1, [r4, #4]
 800dbe2:	4299      	cmp	r1, r3
 800dbe4:	bfde      	ittt	le
 800dbe6:	2330      	movle	r3, #48	@ 0x30
 800dbe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbf0:	1b92      	subs	r2, r2, r6
 800dbf2:	6122      	str	r2, [r4, #16]
 800dbf4:	f8cd a000 	str.w	sl, [sp]
 800dbf8:	464b      	mov	r3, r9
 800dbfa:	aa03      	add	r2, sp, #12
 800dbfc:	4621      	mov	r1, r4
 800dbfe:	4640      	mov	r0, r8
 800dc00:	f7ff fee6 	bl	800d9d0 <_printf_common>
 800dc04:	3001      	adds	r0, #1
 800dc06:	d14a      	bne.n	800dc9e <_printf_i+0x1f2>
 800dc08:	f04f 30ff 	mov.w	r0, #4294967295
 800dc0c:	b004      	add	sp, #16
 800dc0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	f043 0320 	orr.w	r3, r3, #32
 800dc18:	6023      	str	r3, [r4, #0]
 800dc1a:	4833      	ldr	r0, [pc, #204]	@ (800dce8 <_printf_i+0x23c>)
 800dc1c:	2778      	movs	r7, #120	@ 0x78
 800dc1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	6831      	ldr	r1, [r6, #0]
 800dc26:	061f      	lsls	r7, r3, #24
 800dc28:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc2c:	d402      	bmi.n	800dc34 <_printf_i+0x188>
 800dc2e:	065f      	lsls	r7, r3, #25
 800dc30:	bf48      	it	mi
 800dc32:	b2ad      	uxthmi	r5, r5
 800dc34:	6031      	str	r1, [r6, #0]
 800dc36:	07d9      	lsls	r1, r3, #31
 800dc38:	bf44      	itt	mi
 800dc3a:	f043 0320 	orrmi.w	r3, r3, #32
 800dc3e:	6023      	strmi	r3, [r4, #0]
 800dc40:	b11d      	cbz	r5, 800dc4a <_printf_i+0x19e>
 800dc42:	2310      	movs	r3, #16
 800dc44:	e7ac      	b.n	800dba0 <_printf_i+0xf4>
 800dc46:	4827      	ldr	r0, [pc, #156]	@ (800dce4 <_printf_i+0x238>)
 800dc48:	e7e9      	b.n	800dc1e <_printf_i+0x172>
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	f023 0320 	bic.w	r3, r3, #32
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	e7f6      	b.n	800dc42 <_printf_i+0x196>
 800dc54:	4616      	mov	r6, r2
 800dc56:	e7bd      	b.n	800dbd4 <_printf_i+0x128>
 800dc58:	6833      	ldr	r3, [r6, #0]
 800dc5a:	6825      	ldr	r5, [r4, #0]
 800dc5c:	6961      	ldr	r1, [r4, #20]
 800dc5e:	1d18      	adds	r0, r3, #4
 800dc60:	6030      	str	r0, [r6, #0]
 800dc62:	062e      	lsls	r6, r5, #24
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	d501      	bpl.n	800dc6c <_printf_i+0x1c0>
 800dc68:	6019      	str	r1, [r3, #0]
 800dc6a:	e002      	b.n	800dc72 <_printf_i+0x1c6>
 800dc6c:	0668      	lsls	r0, r5, #25
 800dc6e:	d5fb      	bpl.n	800dc68 <_printf_i+0x1bc>
 800dc70:	8019      	strh	r1, [r3, #0]
 800dc72:	2300      	movs	r3, #0
 800dc74:	6123      	str	r3, [r4, #16]
 800dc76:	4616      	mov	r6, r2
 800dc78:	e7bc      	b.n	800dbf4 <_printf_i+0x148>
 800dc7a:	6833      	ldr	r3, [r6, #0]
 800dc7c:	1d1a      	adds	r2, r3, #4
 800dc7e:	6032      	str	r2, [r6, #0]
 800dc80:	681e      	ldr	r6, [r3, #0]
 800dc82:	6862      	ldr	r2, [r4, #4]
 800dc84:	2100      	movs	r1, #0
 800dc86:	4630      	mov	r0, r6
 800dc88:	f7f2 faca 	bl	8000220 <memchr>
 800dc8c:	b108      	cbz	r0, 800dc92 <_printf_i+0x1e6>
 800dc8e:	1b80      	subs	r0, r0, r6
 800dc90:	6060      	str	r0, [r4, #4]
 800dc92:	6863      	ldr	r3, [r4, #4]
 800dc94:	6123      	str	r3, [r4, #16]
 800dc96:	2300      	movs	r3, #0
 800dc98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc9c:	e7aa      	b.n	800dbf4 <_printf_i+0x148>
 800dc9e:	6923      	ldr	r3, [r4, #16]
 800dca0:	4632      	mov	r2, r6
 800dca2:	4649      	mov	r1, r9
 800dca4:	4640      	mov	r0, r8
 800dca6:	47d0      	blx	sl
 800dca8:	3001      	adds	r0, #1
 800dcaa:	d0ad      	beq.n	800dc08 <_printf_i+0x15c>
 800dcac:	6823      	ldr	r3, [r4, #0]
 800dcae:	079b      	lsls	r3, r3, #30
 800dcb0:	d413      	bmi.n	800dcda <_printf_i+0x22e>
 800dcb2:	68e0      	ldr	r0, [r4, #12]
 800dcb4:	9b03      	ldr	r3, [sp, #12]
 800dcb6:	4298      	cmp	r0, r3
 800dcb8:	bfb8      	it	lt
 800dcba:	4618      	movlt	r0, r3
 800dcbc:	e7a6      	b.n	800dc0c <_printf_i+0x160>
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	4632      	mov	r2, r6
 800dcc2:	4649      	mov	r1, r9
 800dcc4:	4640      	mov	r0, r8
 800dcc6:	47d0      	blx	sl
 800dcc8:	3001      	adds	r0, #1
 800dcca:	d09d      	beq.n	800dc08 <_printf_i+0x15c>
 800dccc:	3501      	adds	r5, #1
 800dcce:	68e3      	ldr	r3, [r4, #12]
 800dcd0:	9903      	ldr	r1, [sp, #12]
 800dcd2:	1a5b      	subs	r3, r3, r1
 800dcd4:	42ab      	cmp	r3, r5
 800dcd6:	dcf2      	bgt.n	800dcbe <_printf_i+0x212>
 800dcd8:	e7eb      	b.n	800dcb2 <_printf_i+0x206>
 800dcda:	2500      	movs	r5, #0
 800dcdc:	f104 0619 	add.w	r6, r4, #25
 800dce0:	e7f5      	b.n	800dcce <_printf_i+0x222>
 800dce2:	bf00      	nop
 800dce4:	0800de85 	.word	0x0800de85
 800dce8:	0800de96 	.word	0x0800de96

0800dcec <memmove>:
 800dcec:	4288      	cmp	r0, r1
 800dcee:	b510      	push	{r4, lr}
 800dcf0:	eb01 0402 	add.w	r4, r1, r2
 800dcf4:	d902      	bls.n	800dcfc <memmove+0x10>
 800dcf6:	4284      	cmp	r4, r0
 800dcf8:	4623      	mov	r3, r4
 800dcfa:	d807      	bhi.n	800dd0c <memmove+0x20>
 800dcfc:	1e43      	subs	r3, r0, #1
 800dcfe:	42a1      	cmp	r1, r4
 800dd00:	d008      	beq.n	800dd14 <memmove+0x28>
 800dd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd0a:	e7f8      	b.n	800dcfe <memmove+0x12>
 800dd0c:	4402      	add	r2, r0
 800dd0e:	4601      	mov	r1, r0
 800dd10:	428a      	cmp	r2, r1
 800dd12:	d100      	bne.n	800dd16 <memmove+0x2a>
 800dd14:	bd10      	pop	{r4, pc}
 800dd16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd1e:	e7f7      	b.n	800dd10 <memmove+0x24>

0800dd20 <_sbrk_r>:
 800dd20:	b538      	push	{r3, r4, r5, lr}
 800dd22:	4d06      	ldr	r5, [pc, #24]	@ (800dd3c <_sbrk_r+0x1c>)
 800dd24:	2300      	movs	r3, #0
 800dd26:	4604      	mov	r4, r0
 800dd28:	4608      	mov	r0, r1
 800dd2a:	602b      	str	r3, [r5, #0]
 800dd2c:	f7f3 ff3e 	bl	8001bac <_sbrk>
 800dd30:	1c43      	adds	r3, r0, #1
 800dd32:	d102      	bne.n	800dd3a <_sbrk_r+0x1a>
 800dd34:	682b      	ldr	r3, [r5, #0]
 800dd36:	b103      	cbz	r3, 800dd3a <_sbrk_r+0x1a>
 800dd38:	6023      	str	r3, [r4, #0]
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	20001764 	.word	0x20001764

0800dd40 <memcpy>:
 800dd40:	440a      	add	r2, r1
 800dd42:	4291      	cmp	r1, r2
 800dd44:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd48:	d100      	bne.n	800dd4c <memcpy+0xc>
 800dd4a:	4770      	bx	lr
 800dd4c:	b510      	push	{r4, lr}
 800dd4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd56:	4291      	cmp	r1, r2
 800dd58:	d1f9      	bne.n	800dd4e <memcpy+0xe>
 800dd5a:	bd10      	pop	{r4, pc}

0800dd5c <_realloc_r>:
 800dd5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd60:	4680      	mov	r8, r0
 800dd62:	4615      	mov	r5, r2
 800dd64:	460c      	mov	r4, r1
 800dd66:	b921      	cbnz	r1, 800dd72 <_realloc_r+0x16>
 800dd68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd6c:	4611      	mov	r1, r2
 800dd6e:	f7ff bc4b 	b.w	800d608 <_malloc_r>
 800dd72:	b92a      	cbnz	r2, 800dd80 <_realloc_r+0x24>
 800dd74:	f7ff fbdc 	bl	800d530 <_free_r>
 800dd78:	2400      	movs	r4, #0
 800dd7a:	4620      	mov	r0, r4
 800dd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd80:	f000 f81a 	bl	800ddb8 <_malloc_usable_size_r>
 800dd84:	4285      	cmp	r5, r0
 800dd86:	4606      	mov	r6, r0
 800dd88:	d802      	bhi.n	800dd90 <_realloc_r+0x34>
 800dd8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd8e:	d8f4      	bhi.n	800dd7a <_realloc_r+0x1e>
 800dd90:	4629      	mov	r1, r5
 800dd92:	4640      	mov	r0, r8
 800dd94:	f7ff fc38 	bl	800d608 <_malloc_r>
 800dd98:	4607      	mov	r7, r0
 800dd9a:	2800      	cmp	r0, #0
 800dd9c:	d0ec      	beq.n	800dd78 <_realloc_r+0x1c>
 800dd9e:	42b5      	cmp	r5, r6
 800dda0:	462a      	mov	r2, r5
 800dda2:	4621      	mov	r1, r4
 800dda4:	bf28      	it	cs
 800dda6:	4632      	movcs	r2, r6
 800dda8:	f7ff ffca 	bl	800dd40 <memcpy>
 800ddac:	4621      	mov	r1, r4
 800ddae:	4640      	mov	r0, r8
 800ddb0:	f7ff fbbe 	bl	800d530 <_free_r>
 800ddb4:	463c      	mov	r4, r7
 800ddb6:	e7e0      	b.n	800dd7a <_realloc_r+0x1e>

0800ddb8 <_malloc_usable_size_r>:
 800ddb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddbc:	1f18      	subs	r0, r3, #4
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	bfbc      	itt	lt
 800ddc2:	580b      	ldrlt	r3, [r1, r0]
 800ddc4:	18c0      	addlt	r0, r0, r3
 800ddc6:	4770      	bx	lr

0800ddc8 <_init>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	bf00      	nop
 800ddcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddce:	bc08      	pop	{r3}
 800ddd0:	469e      	mov	lr, r3
 800ddd2:	4770      	bx	lr

0800ddd4 <_fini>:
 800ddd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd6:	bf00      	nop
 800ddd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddda:	bc08      	pop	{r3}
 800dddc:	469e      	mov	lr, r3
 800ddde:	4770      	bx	lr
