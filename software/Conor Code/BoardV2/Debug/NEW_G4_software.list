
NEW_G4_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbfc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800dddc  0800dddc  0000eddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea4  0800dea4  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea4  0800dea4  0000eea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deac  0800deac  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deac  0800deac  0000eeac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800deb0  0800deb0  0000eeb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800deb4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a0  200001d4  0800e088  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  0800e088  0000f774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025582  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005902  00000000  00000000  00034786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db0  00000000  00000000  0003a088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016a0  00000000  00000000  0003be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283ac  00000000  00000000  0003d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a873  00000000  00000000  00065884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec48e  00000000  00000000  000900f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d4  00000000  00000000  0017c5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0018479c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ddc4 	.word	0x0800ddc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800ddc4 	.word	0x0800ddc4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2220      	movs	r2, #32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00c fb85 	bl	800d4c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dba:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dbc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de2:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e24:	4817      	ldr	r0, [pc, #92]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e26:	f001 fa9d 	bl	8002364 <HAL_ADC_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e30:	f000 fd43 	bl	80018ba <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e40:	f002 f82a 	bl	8002e98 <HAL_ADCEx_MultiModeConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e4a:	f000 fd36 	bl	80018ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_ADC1_Init+0xec>)
 8000e50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e52:	2306      	movs	r3, #6
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	237f      	movs	r3, #127	@ 0x7f
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e6c:	f001 fbfe 	bl	800266c <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e76:	f000 fd20 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	@ 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001f0 	.word	0x200001f0
 8000e88:	04300002 	.word	0x04300002

08000e8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2220      	movs	r2, #32
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00c fb13 	bl	800d4c4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f50 <MX_ADC2_Init+0xc4>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ea6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f06:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f08:	f001 fa2c 	bl	8002364 <HAL_ADC_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f12:	f000 fcd2 	bl	80018ba <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_ADC2_Init+0xc8>)
 8000f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f22:	237f      	movs	r3, #127	@ 0x7f
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f26:	2304      	movs	r3, #4
 8000f28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f34:	f001 fb9a 	bl	800266c <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f3e:	f000 fcbc 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000025c 	.word	0x2000025c
 8000f50:	50000100 	.word	0x50000100
 8000f54:	2e300800 	.word	0x2e300800

08000f58 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09e      	sub	sp, #120	@ 0x78
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	2244      	movs	r2, #68	@ 0x44
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00c faa3 	bl	800d4c4 <memset>
  if(adcHandle->Instance==ADC1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f86:	d16f      	bne.n	8001068 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fe99 	bl	8006cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fa4:	f000 fc89 	bl	80018ba <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fa8:	4b52      	ldr	r3, [pc, #328]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a51      	ldr	r2, [pc, #324]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000fb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fb2:	4b50      	ldr	r3, [pc, #320]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fba:	4b4f      	ldr	r3, [pc, #316]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b49      	ldr	r3, [pc, #292]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a48      	ldr	r2, [pc, #288]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b46      	ldr	r3, [pc, #280]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a42      	ldr	r2, [pc, #264]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b3d      	ldr	r3, [pc, #244]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	4a3c      	ldr	r2, [pc, #240]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_7_Pin|ADC_8_Pin|ADC_9_Pin|ADC_10_Pin;
 800101a:	230f      	movs	r3, #15
 800101c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800102a:	4619      	mov	r1, r3
 800102c:	4833      	ldr	r0, [pc, #204]	@ (80010fc <HAL_ADC_MspInit+0x1a4>)
 800102e:	f002 fac1 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|OPAMP_SIG_2_Pin|OPAMP_SIG_4_Pin;
 8001032:	230b      	movs	r3, #11
 8001034:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f002 fab4 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPAMP_SIG_1_Pin|ADC_3_Pin|DIGITAL_IO_2_Pin;
 800104c:	f245 0301 	movw	r3, #20481	@ 0x5001
 8001050:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800105e:	4619      	mov	r1, r3
 8001060:	4827      	ldr	r0, [pc, #156]	@ (8001100 <HAL_ADC_MspInit+0x1a8>)
 8001062:	f002 faa7 	bl	80035b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001066:	e041      	b.n	80010ec <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_ADC_MspInit+0x1ac>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d13c      	bne.n	80010ec <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001076:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001078:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800107c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fe24 	bl	8006cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 800108e:	f000 fc14 	bl	80018ba <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 800109a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10b      	bne.n	80010bc <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPAMP_SIG_3_Pin;
 80010d4:	2320      	movs	r3, #32
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d8:	2303      	movs	r3, #3
 80010da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OPAMP_SIG_3_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <HAL_ADC_MspInit+0x1a4>)
 80010e8:	f002 fa64 	bl	80035b4 <HAL_GPIO_Init>
}
 80010ec:	bf00      	nop
 80010ee:	3778      	adds	r7, #120	@ 0x78
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200002c8 	.word	0x200002c8
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000400 	.word	0x48000400
 8001104:	50000100 	.word	0x50000100

08001108 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	@ 0x30
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2230      	movs	r2, #48	@ 0x30
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00c f9d5 	bl	800d4c4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_DAC1_Init+0x80>)
 800111c:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <MX_DAC1_Init+0x84>)
 800111e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001120:	4819      	ldr	r0, [pc, #100]	@ (8001188 <MX_DAC1_Init+0x80>)
 8001122:	f002 f86c 	bl	80031fe <HAL_DAC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800112c:	f000 fbc5 	bl	80018ba <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001130:	2302      	movs	r3, #2
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800114c:	2301      	movs	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <MX_DAC1_Init+0x80>)
 800115c:	f002 f872 	bl	8003244 <HAL_DAC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001166:	f000 fba8 	bl	80018ba <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2210      	movs	r2, #16
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_DAC1_Init+0x80>)
 8001172:	f002 f867 	bl	8003244 <HAL_DAC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800117c:	f000 fb9d 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	@ 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200002cc 	.word	0x200002cc
 800118c:	50000800 	.word	0x50000800

08001190 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <HAL_DAC_MspInit+0x74>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d124      	bne.n	80011fc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 80011e2:	2330      	movs	r3, #48	@ 0x30
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f002 f9dc 	bl	80035b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	50000800 	.word	0x50000800
 8001208:	40021000 	.word	0x40021000

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a5c      	ldr	r2, [pc, #368]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b5a      	ldr	r3, [pc, #360]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <MX_GPIO_Init+0x18c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b54      	ldr	r3, [pc, #336]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b51      	ldr	r3, [pc, #324]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a50      	ldr	r2, [pc, #320]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <MX_GPIO_Init+0x18c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a44      	ldr	r2, [pc, #272]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 800129a:	2200      	movs	r2, #0
 800129c:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 80012a0:	483e      	ldr	r0, [pc, #248]	@ (800139c <MX_GPIO_Init+0x190>)
 80012a2:	f002 fb09 	bl	80038b8 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80012ac:	483c      	ldr	r0, [pc, #240]	@ (80013a0 <MX_GPIO_Init+0x194>)
 80012ae:	f002 fb03 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_EN_GPIO_Port, SD_CARD_EN_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012bc:	f002 fafc 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4837      	ldr	r0, [pc, #220]	@ (80013a4 <MX_GPIO_Init+0x198>)
 80012c6:	f002 faf7 	bl	80038b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_IO_1_Pin|COMMS_IO_2_Pin|COMMS_IO_3_Pin;
 80012ca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4830      	ldr	r0, [pc, #192]	@ (80013a0 <MX_GPIO_Init+0x194>)
 80012e0:	f002 f968 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 80012e4:	2304      	movs	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fa:	f002 f95b 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 80012fe:	f24a 43a2 	movw	r3, #42146	@ 0xa4a2
 8001302:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4821      	ldr	r0, [pc, #132]	@ (800139c <MX_GPIO_Init+0x190>)
 8001318:	f002 f94c 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_1_Pin|DIGITAL_IO_6_Pin|SD_CARD_DETECT_Pin;
 800131c:	f640 2304 	movw	r3, #2564	@ 0xa04
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	481a      	ldr	r0, [pc, #104]	@ (800139c <MX_GPIO_Init+0x190>)
 8001332:	f002 f93f 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin;
 8001336:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_GPIO_Init+0x194>)
 8001350:	f002 f930 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_EN_Pin;
 8001354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CARD_EN_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f002 f920 	bl	80035b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 8001374:	2304      	movs	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <MX_GPIO_Init+0x198>)
 800138c:	f002 f912 	bl	80035b4 <HAL_GPIO_Init>

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00

080013a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <MX_I2C2_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_I2C2_Init+0x74>)
 80013b4:	f240 1203 	movw	r2, #259	@ 0x103
 80013b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_I2C2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_I2C2_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <MX_I2C2_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_I2C2_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_I2C2_Init+0x74>)
 80013e6:	f002 fa99 	bl	800391c <HAL_I2C_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013f0:	f000 fa63 	bl	80018ba <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <MX_I2C2_Init+0x74>)
 80013f8:	f003 f8cc 	bl	8004594 <HAL_I2CEx_ConfigAnalogFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001402:	f000 fa5a 	bl	80018ba <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4804      	ldr	r0, [pc, #16]	@ (800141c <MX_I2C2_Init+0x74>)
 800140a:	f003 f90e 	bl	800462a <HAL_I2CEx_ConfigDigitalFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fa51 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002e0 	.word	0x200002e0
 8001420:	40005800 	.word	0x40005800

08001424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09c      	sub	sp, #112	@ 0x70
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2244      	movs	r2, #68	@ 0x44
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00c f83d 	bl	800d4c4 <memset>
  if(i2cHandle->Instance==I2C2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <HAL_I2C_MspInit+0xe0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d153      	bne.n	80014fc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fc35 	bl	8006cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f000 fa25 	bl	80018ba <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a24      	ldr	r2, [pc, #144]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014a0:	2310      	movs	r3, #16
 80014a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b0:	2304      	movs	r3, #4
 80014b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	@ (800150c <HAL_I2C_MspInit+0xe8>)
 80014bc:	f002 f87a 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d2:	2304      	movs	r3, #4
 80014d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e0:	f002 f868 	bl	80035b4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014fc:	bf00      	nop
 80014fe:	3770      	adds	r7, #112	@ 0x70
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005800 	.word	0x40005800
 8001508:	40021000 	.word	0x40021000
 800150c:	48000800 	.word	0x48000800

08001510 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2];
	int32_t tempC = -100;
 800151a:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800151e:	617b      	str	r3, [r7, #20]
	uint8_t store = MCP9804_REG_TEMP;
 8001520:	2305      	movs	r3, #5
 8001522:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_IsDeviceReady (&hi2c2, MCP9804_ADDR, 2, HAL_MAX_DELAY) == HAL_OK) { // Ready is unsuccessfull
 8001524:	f04f 33ff 	mov.w	r3, #4294967295
 8001528:	2202      	movs	r2, #2
 800152a:	2118      	movs	r1, #24
 800152c:	4833      	ldr	r0, [pc, #204]	@ (80015fc <readMCP9804Temp+0xec>)
 800152e:	f002 fc9f 	bl	8003e70 <HAL_I2C_IsDeviceReady>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d15b      	bne.n	80015f0 <readMCP9804Temp+0xe0>
			// Reception error
		if (HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &store, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001538:	f107 020f 	add.w	r2, r7, #15
 800153c:	f04f 33ff 	mov.w	r3, #4294967295
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2301      	movs	r3, #1
 8001544:	2118      	movs	r1, #24
 8001546:	482d      	ldr	r0, [pc, #180]	@ (80015fc <readMCP9804Temp+0xec>)
 8001548:	f002 fa84 	bl	8003a54 <HAL_I2C_Master_Transmit>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00f      	beq.n	8001572 <readMCP9804Temp+0x62>
			HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 8001552:	2200      	movs	r2, #0
 8001554:	2104      	movs	r1, #4
 8001556:	482a      	ldr	r0, [pc, #168]	@ (8001600 <readMCP9804Temp+0xf0>)
 8001558:	f002 f9ae 	bl	80038b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800155c:	2201      	movs	r2, #1
 800155e:	2120      	movs	r1, #32
 8001560:	4828      	ldr	r0, [pc, #160]	@ (8001604 <readMCP9804Temp+0xf4>)
 8001562:	f002 f9a9 	bl	80038b8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001566:	2201      	movs	r2, #1
 8001568:	2180      	movs	r1, #128	@ 0x80
 800156a:	4826      	ldr	r0, [pc, #152]	@ (8001604 <readMCP9804Temp+0xf4>)
 800156c:	f002 f9a4 	bl	80038b8 <HAL_GPIO_WritePin>
 8001570:	e03e      	b.n	80015f0 <readMCP9804Temp+0xe0>
		} else {
			HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY);
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	f04f 33ff 	mov.w	r3, #4294967295
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2302      	movs	r3, #2
 800157e:	2118      	movs	r1, #24
 8001580:	481e      	ldr	r0, [pc, #120]	@ (80015fc <readMCP9804Temp+0xec>)
 8001582:	f002 fb7f 	bl	8003c84 <HAL_I2C_Master_Receive>
			uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 8001586:	7c3b      	ldrb	r3, [r7, #16]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	b21a      	sxth	r2, r3
 800158c:	7c7b      	ldrb	r3, [r7, #17]
 800158e:	b21b      	sxth	r3, r3
 8001590:	4313      	orrs	r3, r2
 8001592:	b21b      	sxth	r3, r3
 8001594:	827b      	strh	r3, [r7, #18]
			rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 8001596:	8a7b      	ldrh	r3, [r7, #18]
 8001598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800159c:	827b      	strh	r3, [r7, #18]

			tempC = rawTemp & 0x0FFF;
 800159e:	8a7b      	ldrh	r3, [r7, #18]
 80015a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a4:	617b      	str	r3, [r7, #20]
			tempC /= 16.0;
 80015a6:	6978      	ldr	r0, [r7, #20]
 80015a8:	f7fe ffdc 	bl	8000564 <__aeabi_i2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <readMCP9804Temp+0xf8>)
 80015b2:	f7ff f96b 	bl	800088c <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fa4d 	bl	8000a5c <__aeabi_d2iz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	617b      	str	r3, [r7, #20]

			if (rawTemp & 0x1000) {  // Check sign bit
 80015c6:	8a7b      	ldrh	r3, [r7, #18]
 80015c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00f      	beq.n	80015f0 <readMCP9804Temp+0xe0>
			  tempC -= 256.0;
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f7fe ffc7 	bl	8000564 <__aeabi_i2d>
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <readMCP9804Temp+0xfc>)
 80015dc:	f7fe fe74 	bl	80002c8 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7ff fa38 	bl	8000a5c <__aeabi_d2iz>
 80015ec:	4603      	mov	r3, r0
 80015ee:	617b      	str	r3, [r7, #20]
			}
		}
	}
    return tempC;
 80015f0:	697b      	ldr	r3, [r7, #20]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3718      	adds	r7, #24
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200002e0 	.word	0x200002e0
 8001600:	48000c00 	.word	0x48000c00
 8001604:	48000400 	.word	0x48000400
 8001608:	40300000 	.word	0x40300000
 800160c:	40700000 	.word	0x40700000

08001610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b0c6      	sub	sp, #280	@ 0x118
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001616:	f000 fc3c 	bl	8001e92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800161a:	f000 f8ff 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800161e:	f7ff fdf5 	bl	800120c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001622:	f7ff fbbb 	bl	8000d9c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001626:	f7ff fc31 	bl	8000e8c <MX_ADC2_Init>
  MX_DAC1_Init();
 800162a:	f7ff fd6d 	bl	8001108 <MX_DAC1_Init>
  MX_SPI1_Init();
 800162e:	f000 f9bf 	bl	80019b0 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8001632:	f000 fb31 	bl	8001c98 <MX_UCPD1_Init>
  MX_I2C2_Init();
 8001636:	f7ff feb7 	bl	80013a8 <MX_I2C2_Init>
  MX_RTC_Init();
 800163a:	f000 f945 	bl	80018c8 <MX_RTC_Init>
  MX_USB_Device_Init();
 800163e:	f00b fa03 	bl	800ca48 <MX_USB_Device_Init>
  MX_UART4_Init();
 8001642:	f000 fb57 	bl	8001cf4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    int num_bytes = 4;
 800164c:	2304      	movs	r3, #4
 800164e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    uint8_t dataToSend[4];
    dataToSend[0] = 0xFF;// Example data
 8001652:	23ff      	movs	r3, #255	@ 0xff
 8001654:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
    dataToSend[1] = 0x5;// Example data
 8001658:	2305      	movs	r3, #5
 800165a:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    dataToSend[2] = 0xF0;// Example data
 800165e:	23f0      	movs	r3, #240	@ 0xf0
 8001660:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    dataToSend[3] = 0xF;// Example data
 8001664:	230f      	movs	r3, #15
 8001666:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

    //HAL_StatusTypeDef sts = HAL_OK;

    HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 800166a:	2201      	movs	r2, #1
 800166c:	2180      	movs	r1, #128	@ 0x80
 800166e:	4865      	ldr	r0, [pc, #404]	@ (8001804 <main+0x1f4>)
 8001670:	f002 f922 	bl	80038b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001674:	2201      	movs	r2, #1
 8001676:	2120      	movs	r1, #32
 8001678:	4862      	ldr	r0, [pc, #392]	@ (8001804 <main+0x1f4>)
 800167a:	f002 f91d 	bl	80038b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 800167e:	2201      	movs	r2, #1
 8001680:	2104      	movs	r1, #4
 8001682:	4861      	ldr	r0, [pc, #388]	@ (8001808 <main+0x1f8>)
 8001684:	f002 f918 	bl	80038b8 <HAL_GPIO_WritePin>


    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001688:	4860      	ldr	r0, [pc, #384]	@ (800180c <main+0x1fc>)
 800168a:	f002 f947 	bl	800391c <HAL_I2C_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d004      	beq.n	800169e <main+0x8e>
            // Initialization error
  	  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 8001694:	2200      	movs	r2, #0
 8001696:	2104      	movs	r1, #4
 8001698:	485b      	ldr	r0, [pc, #364]	@ (8001808 <main+0x1f8>)
 800169a:	f002 f90d 	bl	80038b8 <HAL_GPIO_WritePin>
        }
    uint8_t tempRegAddr = 0x05;
 800169e:	2305      	movs	r3, #5
 80016a0:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	HAL_Delay(1000);
 80016a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016a8:	f000 fc64 	bl	8001f74 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // CS low Digital IO 1 COMM_EN_3
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016b2:	4857      	ldr	r0, [pc, #348]	@ (8001810 <main+0x200>)
 80016b4:	f002 f900 	bl	80038b8 <HAL_GPIO_WritePin>
    	status = HAL_SPI_Transmit(&hspi1, (uint8_t *)&dataToSend, num_bytes, HAL_MAX_DELAY);
 80016b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016bc:	b29a      	uxth	r2, r3
 80016be:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	4853      	ldr	r0, [pc, #332]	@ (8001814 <main+0x204>)
 80016c8:	f005 ff2e 	bl	8007528 <HAL_SPI_Transmit>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // CS high Digital IO 1 COMM_EN_3
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d8:	484d      	ldr	r0, [pc, #308]	@ (8001810 <main+0x200>)
 80016da:	f002 f8ed 	bl	80038b8 <HAL_GPIO_WritePin>

    	if (status == HAL_OK)
 80016de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <main+0xf6>
    	{
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 80016e6:	2200      	movs	r2, #0
 80016e8:	2180      	movs	r1, #128	@ 0x80
 80016ea:	4846      	ldr	r0, [pc, #280]	@ (8001804 <main+0x1f4>)
 80016ec:	f002 f8e4 	bl	80038b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 80016f0:	2201      	movs	r2, #1
 80016f2:	2120      	movs	r1, #32
 80016f4:	4843      	ldr	r0, [pc, #268]	@ (8001804 <main+0x1f4>)
 80016f6:	f002 f8df 	bl	80038b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 80016fa:	2201      	movs	r2, #1
 80016fc:	2104      	movs	r1, #4
 80016fe:	4842      	ldr	r0, [pc, #264]	@ (8001808 <main+0x1f8>)
 8001700:	f002 f8da 	bl	80038b8 <HAL_GPIO_WritePin>
 8001704:	e022      	b.n	800174c <main+0x13c>
    	} else if (status == HAL_BUSY){
 8001706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800170a:	2b02      	cmp	r3, #2
 800170c:	d10f      	bne.n	800172e <main+0x11e>
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800170e:	2201      	movs	r2, #1
 8001710:	2104      	movs	r1, #4
 8001712:	483d      	ldr	r0, [pc, #244]	@ (8001808 <main+0x1f8>)
 8001714:	f002 f8d0 	bl	80038b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 8001718:	2200      	movs	r2, #0
 800171a:	2120      	movs	r1, #32
 800171c:	4839      	ldr	r0, [pc, #228]	@ (8001804 <main+0x1f4>)
 800171e:	f002 f8cb 	bl	80038b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001722:	2201      	movs	r2, #1
 8001724:	2180      	movs	r1, #128	@ 0x80
 8001726:	4837      	ldr	r0, [pc, #220]	@ (8001804 <main+0x1f4>)
 8001728:	f002 f8c6 	bl	80038b8 <HAL_GPIO_WritePin>
 800172c:	e00e      	b.n	800174c <main+0x13c>
    	}
    	else
    	{
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 800172e:	2200      	movs	r2, #0
 8001730:	2104      	movs	r1, #4
 8001732:	4835      	ldr	r0, [pc, #212]	@ (8001808 <main+0x1f8>)
 8001734:	f002 f8c0 	bl	80038b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001738:	2201      	movs	r2, #1
 800173a:	2120      	movs	r1, #32
 800173c:	4831      	ldr	r0, [pc, #196]	@ (8001804 <main+0x1f4>)
 800173e:	f002 f8bb 	bl	80038b8 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001742:	2201      	movs	r2, #1
 8001744:	2180      	movs	r1, #128	@ 0x80
 8001746:	482f      	ldr	r0, [pc, #188]	@ (8001804 <main+0x1f4>)
 8001748:	f002 f8b6 	bl	80038b8 <HAL_GPIO_WritePin>
    	}


    	HAL_Delay(1000);
 800174c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001750:	f000 fc10 	bl	8001f74 <HAL_Delay>
    	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001754:	2201      	movs	r2, #1
 8001756:	2104      	movs	r1, #4
 8001758:	482b      	ldr	r0, [pc, #172]	@ (8001808 <main+0x1f8>)
 800175a:	f002 f8ad 	bl	80038b8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800175e:	2201      	movs	r2, #1
 8001760:	2120      	movs	r1, #32
 8001762:	4828      	ldr	r0, [pc, #160]	@ (8001804 <main+0x1f4>)
 8001764:	f002 f8a8 	bl	80038b8 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 8001768:	2201      	movs	r2, #1
 800176a:	2180      	movs	r1, #128	@ 0x80
 800176c:	4825      	ldr	r0, [pc, #148]	@ (8001804 <main+0x1f4>)
 800176e:	f002 f8a3 	bl	80038b8 <HAL_GPIO_WritePin>
    	int32_t tempC = readMCP9804Temp(MCP9804_ADDR);
 8001772:	2018      	movs	r0, #24
 8001774:	f7ff fecc 	bl	8001510 <readMCP9804Temp>
 8001778:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    		//temp read error
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
    	} */
    	dataToSend[0] = (tempC >> 24) & 0xFF;
 800177c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001780:	0e1b      	lsrs	r3, r3, #24
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f887 3100 	strb.w	r3, [r7, #256]	@ 0x100
    	dataToSend[1] = (tempC >> 16) & 0xFF;
 8001788:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800178c:	141b      	asrs	r3, r3, #16
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f887 3101 	strb.w	r3, [r7, #257]	@ 0x101
    	dataToSend[2] = (tempC >> 8) & 0xFF;
 8001794:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001798:	121b      	asrs	r3, r3, #8
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f887 3102 	strb.w	r3, [r7, #258]	@ 0x102
    	dataToSend[3] = tempC & 0xFF;
 80017a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103

    	HAL_Delay(100);
 80017aa:	2064      	movs	r0, #100	@ 0x64
 80017ac:	f000 fbe2 	bl	8001f74 <HAL_Delay>
    	int amount_of_bytes = snprintf((char*) buffer, sizeof(buffer), "Temp:%ld \r\n" , tempC);
 80017b0:	4638      	mov	r0, r7
 80017b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80017b6:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <main+0x208>)
 80017b8:	21ff      	movs	r1, #255	@ 0xff
 80017ba:	f00b fe4f 	bl	800d45c <sniprintf>
 80017be:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    	  // int status = HAL_SPI_Transmit(&hspi3, spi_buf, amount_of_bytes+4, 1);
    	  // int status = HAL_SPI_Transmit(&hspi3, &count, 1, 1);
    	  // HAL_GPIO_WritePin(COMMS_EN_1_GPIO_Port, COMMS_EN_1_Pin, GPIO_PIN_SET);
    	  // USB_Print("count : %d", count++);

    	  switch (CDC_Transmit_FS((uint8_t*)buffer, amount_of_bytes)){
 80017c2:	463b      	mov	r3, r7
 80017c4:	f8d7 1104 	ldr.w	r1, [r7, #260]	@ 0x104
 80017c8:	4618      	mov	r0, r3
 80017ca:	f00b f9fb 	bl	800cbc4 <CDC_Transmit_FS>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d010      	beq.n	80017f6 <main+0x1e6>
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	dc13      	bgt.n	8001800 <main+0x1f0>
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d002      	beq.n	80017e2 <main+0x1d2>
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d005      	beq.n	80017ec <main+0x1dc>
    	    break;
    	  case USBD_FAIL: // if the device can support USB coms device it will blink red
    	    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
    	    break;
    	  default:
    	    break;
 80017e0:	e00e      	b.n	8001800 <main+0x1f0>
    	    HAL_GPIO_TogglePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin);
 80017e2:	2180      	movs	r1, #128	@ 0x80
 80017e4:	4807      	ldr	r0, [pc, #28]	@ (8001804 <main+0x1f4>)
 80017e6:	f002 f87f 	bl	80038e8 <HAL_GPIO_TogglePin>
    	    break;
 80017ea:	e00a      	b.n	8001802 <main+0x1f2>
    	    HAL_GPIO_TogglePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin);
 80017ec:	2120      	movs	r1, #32
 80017ee:	4805      	ldr	r0, [pc, #20]	@ (8001804 <main+0x1f4>)
 80017f0:	f002 f87a 	bl	80038e8 <HAL_GPIO_TogglePin>
    	    break;
 80017f4:	e005      	b.n	8001802 <main+0x1f2>
    	    HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
 80017f6:	2104      	movs	r1, #4
 80017f8:	4803      	ldr	r0, [pc, #12]	@ (8001808 <main+0x1f8>)
 80017fa:	f002 f875 	bl	80038e8 <HAL_GPIO_TogglePin>
    	    break;
 80017fe:	e000      	b.n	8001802 <main+0x1f2>
    	    break;
 8001800:	bf00      	nop
    {
 8001802:	e74f      	b.n	80016a4 <main+0x94>
 8001804:	48000400 	.word	0x48000400
 8001808:	48000c00 	.word	0x48000c00
 800180c:	200002e0 	.word	0x200002e0
 8001810:	48000800 	.word	0x48000800
 8001814:	2000035c 	.word	0x2000035c
 8001818:	0800dddc 	.word	0x0800dddc

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	@ 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	2238      	movs	r2, #56	@ 0x38
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f00b fe4a 	bl	800d4c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800183e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001842:	f004 fc73 	bl	800612c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001846:	230a      	movs	r3, #10
 8001848:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800184a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001850:	2340      	movs	r3, #64	@ 0x40
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001854:	2301      	movs	r3, #1
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001858:	2302      	movs	r3, #2
 800185a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800185c:	2302      	movs	r3, #2
 800185e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001860:	2301      	movs	r3, #1
 8001862:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001864:	230c      	movs	r3, #12
 8001866:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001868:	2302      	movs	r3, #2
 800186a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800186c:	2304      	movs	r3, #4
 800186e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001870:	2302      	movs	r3, #2
 8001872:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001874:	f107 0318 	add.w	r3, r7, #24
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fcfb 	bl	8006274 <HAL_RCC_OscConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001884:	f000 f819 	bl	80018ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001888:	230f      	movs	r3, #15
 800188a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800188c:	2301      	movs	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8001894:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f004 fff8 	bl	8006898 <HAL_RCC_ClockConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018ae:	f000 f804 	bl	80018ba <Error_Handler>
  }
}
 80018b2:	bf00      	nop
 80018b4:	3750      	adds	r7, #80	@ 0x50
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018be:	b672      	cpsid	i
}
 80018c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018c2:	bf00      	nop
 80018c4:	e7fd      	b.n	80018c2 <Error_Handler+0x8>
	...

080018c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018cc:	4b18      	ldr	r3, [pc, #96]	@ (8001930 <MX_RTC_Init+0x68>)
 80018ce:	4a19      	ldr	r2, [pc, #100]	@ (8001934 <MX_RTC_Init+0x6c>)
 80018d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018d2:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <MX_RTC_Init+0x68>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018d8:	4b15      	ldr	r3, [pc, #84]	@ (8001930 <MX_RTC_Init+0x68>)
 80018da:	227f      	movs	r2, #127	@ 0x7f
 80018dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018de:	4b14      	ldr	r3, [pc, #80]	@ (8001930 <MX_RTC_Init+0x68>)
 80018e0:	22ff      	movs	r2, #255	@ 0xff
 80018e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <MX_RTC_Init+0x68>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018ea:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <MX_RTC_Init+0x68>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001930 <MX_RTC_Init+0x68>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <MX_RTC_Init+0x68>)
 80018f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018fc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <MX_RTC_Init+0x68>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001904:	480a      	ldr	r0, [pc, #40]	@ (8001930 <MX_RTC_Init+0x68>)
 8001906:	f005 fbd3 	bl	80070b0 <HAL_RTC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001910:	f7ff ffd3 	bl	80018ba <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8001914:	2206      	movs	r2, #6
 8001916:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800191a:	4805      	ldr	r0, [pc, #20]	@ (8001930 <MX_RTC_Init+0x68>)
 800191c:	f005 fce5 	bl	80072ea <HAL_RTCEx_SetWakeUpTimer>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001926:	f7ff ffc8 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000334 	.word	0x20000334
 8001934:	40002800 	.word	0x40002800

08001938 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	@ 0x50
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	2244      	movs	r2, #68	@ 0x44
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f00b fdbb 	bl	800d4c4 <memset>
  if(rtcHandle->Instance==RTC)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <HAL_RTC_MspInit+0x70>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d123      	bne.n	80019a0 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001958:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800195c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800195e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001962:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	4618      	mov	r0, r3
 800196a:	f005 f9b1 	bl	8006cd0 <HAL_RCCEx_PeriphCLKConfig>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001974:	f7ff ffa1 	bl	80018ba <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <HAL_RTC_MspInit+0x74>)
 800197a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800197e:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <HAL_RTC_MspInit+0x74>)
 8001980:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001984:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <HAL_RTC_MspInit+0x74>)
 800198a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198c:	4a07      	ldr	r2, [pc, #28]	@ (80019ac <HAL_RTC_MspInit+0x74>)
 800198e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001992:	6593      	str	r3, [r2, #88]	@ 0x58
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RTC_MspInit+0x74>)
 8001996:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001998:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019a0:	bf00      	nop
 80019a2:	3750      	adds	r7, #80	@ 0x50
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40002800 	.word	0x40002800
 80019ac:	40021000 	.word	0x40021000

080019b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a28 <MX_SPI1_Init+0x78>)
 80019b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80019c8:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019ca:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80019ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019d0:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d6:	4b13      	ldr	r3, [pc, #76]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_SPI1_Init+0x74>)
 80019fe:	2207      	movs	r2, #7
 8001a00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a02:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <MX_SPI1_Init+0x74>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a08:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <MX_SPI1_Init+0x74>)
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a0e:	4805      	ldr	r0, [pc, #20]	@ (8001a24 <MX_SPI1_Init+0x74>)
 8001a10:	f005 fcdf 	bl	80073d2 <HAL_SPI_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a1a:	f7ff ff4e 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	2000035c 	.word	0x2000035c
 8001a28:	40013000 	.word	0x40013000

08001a2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 0314 	add.w	r3, r7, #20
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a25      	ldr	r2, [pc, #148]	@ (8001ae0 <HAL_SPI_MspInit+0xb4>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d144      	bne.n	8001ad8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a4e:	4b25      	ldr	r3, [pc, #148]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	4a24      	ldr	r2, [pc, #144]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5a:	4b22      	ldr	r3, [pc, #136]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a82:	4a18      	ldr	r2, [pc, #96]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <HAL_SPI_MspInit+0xb8>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a96:	23c0      	movs	r3, #192	@ 0xc0
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aa6:	2305      	movs	r3, #5
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab4:	f001 fd7e 	bl	80035b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab8:	2308      	movs	r3, #8
 8001aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac8:	2305      	movs	r3, #5
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <HAL_SPI_MspInit+0xbc>)
 8001ad4:	f001 fd6e 	bl	80035b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001ad8:	bf00      	nop
 8001ada:	3728      	adds	r7, #40	@ 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40013000 	.word	0x40013000
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	48000400 	.word	0x48000400

08001aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_MspInit+0x44>)
 8001af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001af6:	4a0e      	ldr	r2, [pc, #56]	@ (8001b30 <HAL_MspInit+0x44>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001afe:	4b0c      	ldr	r3, [pc, #48]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b14:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_MspInit+0x44>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b38:	bf00      	nop
 8001b3a:	e7fd      	b.n	8001b38 <NMI_Handler+0x4>

08001b3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <HardFault_Handler+0x4>

08001b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <MemManage_Handler+0x4>

08001b4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8a:	f000 f9d5 	bl	8001f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <USB_LP_IRQHandler+0x10>)
 8001b9a:	f002 fe82 	bl	80048a2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20001130 	.word	0x20001130

08001ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bb0:	4a14      	ldr	r2, [pc, #80]	@ (8001c04 <_sbrk+0x5c>)
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <_sbrk+0x60>)
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <_sbrk+0x64>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <_sbrk+0x68>)
 8001bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bca:	4b10      	ldr	r3, [pc, #64]	@ (8001c0c <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d207      	bcs.n	8001be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bd8:	f00b fc7c 	bl	800d4d4 <__errno>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	220c      	movs	r2, #12
 8001be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	e009      	b.n	8001bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001be8:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bee:	4b07      	ldr	r3, [pc, #28]	@ (8001c0c <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	4a05      	ldr	r2, [pc, #20]	@ (8001c0c <_sbrk+0x64>)
 8001bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20008000 	.word	0x20008000
 8001c08:	00000400 	.word	0x00000400
 8001c0c:	200003c0 	.word	0x200003c0
 8001c10:	20001778 	.word	0x20001778

08001c14 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <SystemInit+0x20>)
 8001c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c1e:	4a05      	ldr	r2, [pc, #20]	@ (8001c34 <SystemInit+0x20>)
 8001c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c40:	4b08      	ldr	r3, [pc, #32]	@ (8001c64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c44:	4907      	ldr	r1, [pc, #28]	@ (8001c64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4013      	ands	r3, r2
 8001c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000

08001c68 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001c72:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c74:	4907      	ldr	r1, [pc, #28]	@ (8001c94 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001c7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000

08001c98 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
 8001cac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001cae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001cb2:	f7ff ffd9 	bl	8001c68 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001cb6:	2002      	movs	r0, #2
 8001cb8:	f7ff ffbe 	bl	8001c38 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001cbc:	2310      	movs	r3, #16
 8001cbe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	463b      	mov	r3, r7
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4808      	ldr	r0, [pc, #32]	@ (8001cf0 <MX_UCPD1_Init+0x58>)
 8001cce:	f006 fe8e 	bl	80089ee <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001cd2:	2340      	movs	r3, #64	@ 0x40
 8001cd4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	463b      	mov	r3, r7
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4803      	ldr	r0, [pc, #12]	@ (8001cf0 <MX_UCPD1_Init+0x58>)
 8001ce4:	f006 fe83 	bl	80089ee <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	48000400 	.word	0x48000400

08001cf4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001cfa:	4a23      	ldr	r2, [pc, #140]	@ (8001d88 <MX_UART4_Init+0x94>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d00:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b1f      	ldr	r3, [pc, #124]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b1c      	ldr	r3, [pc, #112]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b1a      	ldr	r3, [pc, #104]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d30:	4b14      	ldr	r3, [pc, #80]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d36:	4b13      	ldr	r3, [pc, #76]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d3c:	4811      	ldr	r0, [pc, #68]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d3e:	f005 fecd 	bl	8007adc <HAL_UART_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001d48:	f7ff fdb7 	bl	80018ba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	480d      	ldr	r0, [pc, #52]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d50:	f006 fc38 	bl	80085c4 <HAL_UARTEx_SetTxFifoThreshold>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001d5a:	f7ff fdae 	bl	80018ba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	4808      	ldr	r0, [pc, #32]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d62:	f006 fc6d 	bl	8008640 <HAL_UARTEx_SetRxFifoThreshold>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001d6c:	f7ff fda5 	bl	80018ba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d70:	4804      	ldr	r0, [pc, #16]	@ (8001d84 <MX_UART4_Init+0x90>)
 8001d72:	f006 fbee 	bl	8008552 <HAL_UARTEx_DisableFifoMode>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001d7c:	f7ff fd9d 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200003c4 	.word	0x200003c4
 8001d88:	40004c00 	.word	0x40004c00

08001d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b09a      	sub	sp, #104	@ 0x68
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001da4:	f107 0310 	add.w	r3, r7, #16
 8001da8:	2244      	movs	r2, #68	@ 0x44
 8001daa:	2100      	movs	r1, #0
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00b fb89 	bl	800d4c4 <memset>
  if(uartHandle->Instance==UART4)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e34 <HAL_UART_MspInit+0xa8>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d136      	bne.n	8001e2a <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f004 ff81 	bl	8006cd0 <HAL_RCCEx_PeriphCLKConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dd4:	f7ff fd71 	bl	80018ba <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dd8:	4b17      	ldr	r3, [pc, #92]	@ (8001e38 <HAL_UART_MspInit+0xac>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ddc:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <HAL_UART_MspInit+0xac>)
 8001dde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de4:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <HAL_UART_MspInit+0xac>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df0:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_UART_MspInit+0xac>)
 8001df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df4:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <HAL_UART_MspInit+0xac>)
 8001df6:	f043 0304 	orr.w	r3, r3, #4
 8001dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e38 <HAL_UART_MspInit+0xac>)
 8001dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e0c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e22:	4619      	mov	r1, r3
 8001e24:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <HAL_UART_MspInit+0xb0>)
 8001e26:	f001 fbc5 	bl	80035b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3768      	adds	r7, #104	@ 0x68
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40004c00 	.word	0x40004c00
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	48000800 	.word	0x48000800

08001e40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e40:	480d      	ldr	r0, [pc, #52]	@ (8001e78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e44:	f7ff fee6 	bl	8001c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e48:	480c      	ldr	r0, [pc, #48]	@ (8001e7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e4a:	490d      	ldr	r1, [pc, #52]	@ (8001e80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001e84 <LoopForever+0xe>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e60:	4c0a      	ldr	r4, [pc, #40]	@ (8001e8c <LoopForever+0x16>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e6e:	f00b fb37 	bl	800d4e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e72:	f7ff fbcd 	bl	8001610 <main>

08001e76 <LoopForever>:

LoopForever:
    b LoopForever
 8001e76:	e7fe      	b.n	8001e76 <LoopForever>
  ldr   r0, =_estack
 8001e78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e80:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e84:	0800deb4 	.word	0x0800deb4
  ldr r2, =_sbss
 8001e88:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e8c:	20001774 	.word	0x20001774

08001e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e90:	e7fe      	b.n	8001e90 <ADC1_2_IRQHandler>

08001e92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f001 f96f 	bl	8003180 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f000 f80e 	bl	8001ec4 <HAL_InitTick>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	71fb      	strb	r3, [r7, #7]
 8001eb2:	e001      	b.n	8001eb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eb4:	f7ff fe1a 	bl	8001aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eb8:	79fb      	ldrb	r3, [r7, #7]

}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ed0:	4b16      	ldr	r3, [pc, #88]	@ (8001f2c <HAL_InitTick+0x68>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d022      	beq.n	8001f1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ed8:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_InitTick+0x6c>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <HAL_InitTick+0x68>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ee4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 f97a 	bl	80031e6 <HAL_SYSTICK_Config>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10f      	bne.n	8001f18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	d809      	bhi.n	8001f12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001efe:	2200      	movs	r2, #0
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	f04f 30ff 	mov.w	r0, #4294967295
 8001f06:	f001 f946 	bl	8003196 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <HAL_InitTick+0x70>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e007      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	73fb      	strb	r3, [r7, #15]
 8001f16:	e004      	b.n	8001f22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
 8001f1c:	e001      	b.n	8001f22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	20000000 	.word	0x20000000
 8001f34:	20000004 	.word	0x20000004

08001f38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	@ (8001f54 <HAL_IncTick+0x1c>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_IncTick+0x20>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	4a03      	ldr	r2, [pc, #12]	@ (8001f54 <HAL_IncTick+0x1c>)
 8001f48:	6013      	str	r3, [r2, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	20000458 	.word	0x20000458
 8001f58:	20000008 	.word	0x20000008

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	@ (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000458 	.word	0x20000458

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d004      	beq.n	8001f98 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	@ (8001fb4 <HAL_Delay+0x40>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	4413      	add	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f98:	bf00      	nop
 8001f9a:	f7ff ffdf 	bl	8001f5c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d8f7      	bhi.n	8001f9a <HAL_Delay+0x26>
  {
  }
}
 8001faa:	bf00      	nop
 8001fac:	bf00      	nop
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008

08001fb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002014:	4618      	mov	r0, r3
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	3360      	adds	r3, #96	@ 0x60
 8002032:	461a      	mov	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <LL_ADC_SetOffset+0x44>)
 8002042:	4013      	ands	r3, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	4313      	orrs	r3, r2
 8002050:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	03fff000 	.word	0x03fff000

08002068 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	3360      	adds	r3, #96	@ 0x60
 8002076:	461a      	mov	r2, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3360      	adds	r3, #96	@ 0x60
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	431a      	orrs	r2, r3
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020be:	bf00      	nop
 80020c0:	371c      	adds	r7, #28
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b087      	sub	sp, #28
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	60f8      	str	r0, [r7, #12]
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	3360      	adds	r3, #96	@ 0x60
 80020da:	461a      	mov	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4413      	add	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3360      	adds	r3, #96	@ 0x60
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800212a:	bf00      	nop
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	615a      	str	r2, [r3, #20]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3330      	adds	r3, #48	@ 0x30
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0a1b      	lsrs	r3, r3, #8
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f003 030c 	and.w	r3, r3, #12
 8002178:	4413      	add	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 031f 	and.w	r3, r3, #31
 8002186:	211f      	movs	r1, #31
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	401a      	ands	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	f003 011f 	and.w	r1, r3, #31
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 031f 	and.w	r3, r3, #31
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	431a      	orrs	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021a8:	bf00      	nop
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3314      	adds	r3, #20
 80021c4:	461a      	mov	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	0e5b      	lsrs	r3, r3, #25
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	4413      	add	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	0d1b      	lsrs	r3, r3, #20
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	2107      	movs	r1, #7
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	401a      	ands	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0d1b      	lsrs	r3, r3, #20
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	431a      	orrs	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021fe:	bf00      	nop
 8002200:	371c      	adds	r7, #28
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002224:	43db      	mvns	r3, r3
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f003 0318 	and.w	r3, r3, #24
 800222e:	4908      	ldr	r1, [pc, #32]	@ (8002250 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002230:	40d9      	lsrs	r1, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	400b      	ands	r3, r1
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	431a      	orrs	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002242:	bf00      	nop
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	0007ffff 	.word	0x0007ffff

08002254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002264:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6093      	str	r3, [r2, #8]
}
 800226c:	bf00      	nop
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800228c:	d101      	bne.n	8002292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022dc:	d101      	bne.n	80022e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <LL_ADC_IsEnabled+0x18>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <LL_ADC_IsEnabled+0x1a>
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 0304 	and.w	r3, r3, #4
 8002326:	2b04      	cmp	r3, #4
 8002328:	d101      	bne.n	800232e <LL_ADC_REG_IsConversionOngoing+0x18>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d101      	bne.n	8002354 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e167      	b.n	800264e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d109      	bne.n	80023a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7fe fde3 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ff67 	bl	8002278 <LL_ADC_IsDeepPowerDownEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d004      	beq.n	80023ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff4d 	bl	8002254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff82 	bl	80022c8 <LL_ADC_IsInternalRegulatorEnabled>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff66 	bl	80022a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d4:	4ba0      	ldr	r3, [pc, #640]	@ (8002658 <HAL_ADC_Init+0x2f4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	4aa0      	ldr	r2, [pc, #640]	@ (800265c <HAL_ADC_Init+0x2f8>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	3301      	adds	r3, #1
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023e8:	e002      	b.n	80023f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f9      	bne.n	80023ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff64 	bl	80022c8 <LL_ADC_IsInternalRegulatorEnabled>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10d      	bne.n	8002422 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800240a:	f043 0210 	orr.w	r2, r3, #16
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ff75 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 800242c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002432:	f003 0310 	and.w	r3, r3, #16
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 8100 	bne.w	800263c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	f040 80fc 	bne.w	800263c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002448:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800244c:	f043 0202 	orr.w	r2, r3, #2
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff49 	bl	80022f0 <LL_ADC_IsEnabled>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002464:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002468:	f7ff ff42 	bl	80022f0 <LL_ADC_IsEnabled>
 800246c:	4604      	mov	r4, r0
 800246e:	487c      	ldr	r0, [pc, #496]	@ (8002660 <HAL_ADC_Init+0x2fc>)
 8002470:	f7ff ff3e 	bl	80022f0 <LL_ADC_IsEnabled>
 8002474:	4603      	mov	r3, r0
 8002476:	4323      	orrs	r3, r4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	4619      	mov	r1, r3
 8002482:	4878      	ldr	r0, [pc, #480]	@ (8002664 <HAL_ADC_Init+0x300>)
 8002484:	f7ff fd98 	bl	8001fb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	7f5b      	ldrb	r3, [r3, #29]
 800248c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002492:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002498:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800249e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024a8:	4313      	orrs	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d106      	bne.n	80024c4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	045b      	lsls	r3, r3, #17
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	4b60      	ldr	r3, [pc, #384]	@ (8002668 <HAL_ADC_Init+0x304>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff ff14 	bl	800233c <LL_ADC_INJ_IsConversionOngoing>
 8002514:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d16d      	bne.n	80025f8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d16a      	bne.n	80025f8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002526:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800252e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800253e:	f023 0302 	bic.w	r3, r3, #2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	6812      	ldr	r2, [r2, #0]
 8002546:	69b9      	ldr	r1, [r7, #24]
 8002548:	430b      	orrs	r3, r1
 800254a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d017      	beq.n	8002584 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691a      	ldr	r2, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002562:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800256c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002570:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6911      	ldr	r1, [r2, #16]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002582:	e013      	b.n	80025ac <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002592:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d118      	bne.n	80025e8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025d8:	430a      	orrs	r2, r1
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	611a      	str	r2, [r3, #16]
 80025e6:	e007      	b.n	80025f8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10c      	bne.n	800261a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002606:	f023 010f 	bic.w	r1, r3, #15
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	1e5a      	subs	r2, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
 8002618:	e007      	b.n	800262a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 020f 	bic.w	r2, r2, #15
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	65da      	str	r2, [r3, #92]	@ 0x5c
 800263a:	e007      	b.n	800264c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800264c:	7ffb      	ldrb	r3, [r7, #31]
}
 800264e:	4618      	mov	r0, r3
 8002650:	3724      	adds	r7, #36	@ 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}
 8002656:	bf00      	nop
 8002658:	20000000 	.word	0x20000000
 800265c:	053e2d63 	.word	0x053e2d63
 8002660:	50000100 	.word	0x50000100
 8002664:	50000300 	.word	0x50000300
 8002668:	fff04007 	.word	0xfff04007

0800266c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0b6      	sub	sp, #216	@ 0xd8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x22>
 800268a:	2302      	movs	r3, #2
 800268c:	e3c8      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x7b4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fe3b 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 83ad 	bne.w	8002e02 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	f7ff fd51 	bl	800215c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe29 	bl	8002316 <LL_ADC_REG_IsConversionOngoing>
 80026c4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fe35 	bl	800233c <LL_ADC_INJ_IsConversionOngoing>
 80026d2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 81d9 	bne.w	8002a92 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 81d4 	bne.w	8002a92 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026f2:	d10f      	bne.n	8002714 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	4619      	mov	r1, r3
 8002700:	f7ff fd58 	bl	80021b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fd12 	bl	8002136 <LL_ADC_SetSamplingTimeCommonConfig>
 8002712:	e00e      	b.n	8002732 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	461a      	mov	r2, r3
 8002722:	f7ff fd47 	bl	80021b4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fd02 	bl	8002136 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d022      	beq.n	800279a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002764:	f7ff fc5c 	bl	8002020 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	461a      	mov	r2, r3
 8002776:	f7ff fca8 	bl	80020ca <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x124>
 800278a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800278e:	e000      	b.n	8002792 <HAL_ADC_ConfigChannel+0x126>
 8002790:	2300      	movs	r3, #0
 8002792:	461a      	mov	r2, r3
 8002794:	f7ff fcb4 	bl	8002100 <LL_ADC_SetOffsetSaturation>
 8002798:	e17b      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fc61 	bl	8002068 <LL_ADC_GetOffsetChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x15a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fc56 	bl	8002068 <LL_ADC_GetOffsetChannel>
 80027bc:	4603      	mov	r3, r0
 80027be:	0e9b      	lsrs	r3, r3, #26
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	e01e      	b.n	8002804 <HAL_ADC_ConfigChannel+0x198>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fc4b 	bl	8002068 <LL_ADC_GetOffsetChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e004      	b.n	8002802 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80027f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1b0>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	e018      	b.n	800284e <HAL_ADC_ConfigChannel+0x1e2>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002838:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002840:	2320      	movs	r3, #32
 8002842:	e004      	b.n	800284e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fc1a 	bl	8002094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fbfe 	bl	8002068 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_ADC_ConfigChannel+0x220>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fbf3 	bl	8002068 <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	f003 021f 	and.w	r2, r3, #31
 800288a:	e01e      	b.n	80028ca <HAL_ADC_ConfigChannel+0x25e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fbe8 	bl	8002068 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80028be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x276>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	e018      	b.n	8002914 <HAL_ADC_ConfigChannel+0x2a8>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e004      	b.n	8002914 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800290a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002914:	429a      	cmp	r2, r3
 8002916:	d106      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	2101      	movs	r1, #1
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fbb7 	bl	8002094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fb9b 	bl	8002068 <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x2e6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fb90 	bl	8002068 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	e01e      	b.n	8002990 <HAL_ADC_ConfigChannel+0x324>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fb85 	bl	8002068 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002970:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002974:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002978:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e004      	b.n	800298e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002984:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x33c>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	e016      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x36a>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e004      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d106      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fb56 	bl	8002094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2103      	movs	r1, #3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fb3a 	bl	8002068 <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x3a8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2103      	movs	r1, #3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fb2f 	bl	8002068 <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	e017      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x3d8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2103      	movs	r1, #3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fb24 	bl	8002068 <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a2e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x3f0>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	e011      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x414>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fb01 	bl	8002094 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fc2a 	bl	80022f0 <LL_ADC_IsEnabled>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 8140 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6819      	ldr	r1, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f7ff fbab 	bl	800220c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4a8f      	ldr	r2, [pc, #572]	@ (8002cf8 <HAL_ADC_ConfigChannel+0x68c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	f040 8131 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x47e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	bf94      	ite	ls
 8002ae2:	2301      	movls	r3, #1
 8002ae4:	2300      	movhi	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e019      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x4b2>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002afa:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002afc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e003      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	bf94      	ite	ls
 8002b18:	2301      	movls	r3, #1
 8002b1a:	2300      	movhi	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d079      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x4d2>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	3301      	adds	r3, #1
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b3c:	e015      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x4fe>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b4e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e003      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	069b      	lsls	r3, r3, #26
 8002b66:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x51e>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	e017      	b.n	8002bba <HAL_ADC_ConfigChannel+0x54e>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b9a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ba6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	ea42 0103 	orr.w	r1, r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x574>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f003 021f 	and.w	r2, r3, #31
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	051b      	lsls	r3, r3, #20
 8002bde:	e018      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x5a6>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	f003 021f 	and.w	r2, r3, #31
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c12:	430b      	orrs	r3, r1
 8002c14:	e081      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x5c6>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	3301      	adds	r3, #1
 8002c2a:	069b      	lsls	r3, r3, #26
 8002c2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c30:	e015      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x5f2>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c42:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	069b      	lsls	r3, r3, #26
 8002c5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x612>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	e017      	b.n	8002cae <HAL_ADC_ConfigChannel+0x642>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e003      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x66e>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b1e      	subs	r3, #30
 8002cd2:	051b      	lsls	r3, r3, #20
 8002cd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cd8:	e01e      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x6ac>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	613b      	str	r3, [r7, #16]
  return result;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e006      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x698>
 8002cf6:	bf00      	nop
 8002cf8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	f003 021f 	and.w	r2, r3, #31
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	3b1e      	subs	r3, #30
 8002d12:	051b      	lsls	r3, r3, #20
 8002d14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7ff fa48 	bl	80021b4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b3f      	ldr	r3, [pc, #252]	@ (8002e28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d071      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d30:	483e      	ldr	r0, [pc, #248]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d32:	f7ff f967 	bl	8002004 <LL_ADC_GetCommonPathInternalCh>
 8002d36:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x6e2>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3a      	ldr	r2, [pc, #232]	@ (8002e34 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d127      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d121      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d62:	d157      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	482f      	ldr	r0, [pc, #188]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d70:	f7ff f935 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d74:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	4a30      	ldr	r2, [pc, #192]	@ (8002e3c <HAL_ADC_ConfigChannel+0x7d0>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d8e:	e002      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f9      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d9c:	e03a      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a27      	ldr	r2, [pc, #156]	@ (8002e40 <HAL_ADC_ConfigChannel+0x7d4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d113      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02a      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4818      	ldr	r0, [pc, #96]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002dca:	f7ff f908 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dce:	e021      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e48 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d11c      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a16      	ldr	r2, [pc, #88]	@ (8002e44 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d011      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002df4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480c      	ldr	r0, [pc, #48]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002dfc:	f7ff f8ef 	bl	8001fde <LL_ADC_SetCommonPathInternalCh>
 8002e00:	e008      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e1c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	37d8      	adds	r7, #216	@ 0xd8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	80080000 	.word	0x80080000
 8002e2c:	50000300 	.word	0x50000300
 8002e30:	c3210000 	.word	0xc3210000
 8002e34:	90c00010 	.word	0x90c00010
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	053e2d63 	.word	0x053e2d63
 8002e40:	c7520000 	.word	0xc7520000
 8002e44:	50000100 	.word	0x50000100
 8002e48:	cb840000 	.word	0xcb840000

08002e4c <LL_ADC_IsEnabled>:
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d101      	bne.n	8002e64 <LL_ADC_IsEnabled+0x18>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <LL_ADC_IsEnabled+0x1a>
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr

08002e72 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d101      	bne.n	8002e8a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002e98:	b590      	push	{r4, r7, lr}
 8002e9a:	b0a1      	sub	sp, #132	@ 0x84
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	e08b      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ece:	d102      	bne.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ed0:	4b41      	ldr	r3, [pc, #260]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002ed2:	60bb      	str	r3, [r7, #8]
 8002ed4:	e001      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10b      	bne.n	8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e06a      	b.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ffb9 	bl	8002e72 <LL_ADC_REG_IsConversionOngoing>
 8002f00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff ffb3 	bl	8002e72 <LL_ADC_REG_IsConversionOngoing>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d14c      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d149      	bne.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f18:	4b30      	ldr	r3, [pc, #192]	@ (8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f1a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d028      	beq.n	8002f76 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f24:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	6859      	ldr	r1, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f36:	035b      	lsls	r3, r3, #13
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f3e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f40:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f44:	f7ff ff82 	bl	8002e4c <LL_ADC_IsEnabled>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	4823      	ldr	r0, [pc, #140]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f4c:	f7ff ff7e 	bl	8002e4c <LL_ADC_IsEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	4323      	orrs	r3, r4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d133      	bne.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f60:	f023 030f 	bic.w	r3, r3, #15
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	6811      	ldr	r1, [r2, #0]
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	6892      	ldr	r2, [r2, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f72:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f74:	e024      	b.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f82:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f86:	f7ff ff61 	bl	8002e4c <LL_ADC_IsEnabled>
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	4812      	ldr	r0, [pc, #72]	@ (8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f8e:	f7ff ff5d 	bl	8002e4c <LL_ADC_IsEnabled>
 8002f92:	4603      	mov	r3, r0
 8002f94:	4323      	orrs	r3, r4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d112      	bne.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fa2:	f023 030f 	bic.w	r3, r3, #15
 8002fa6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002fa8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002faa:	e009      	b.n	8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002fbe:	e000      	b.n	8002fc2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fc0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002fca:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3784      	adds	r7, #132	@ 0x84
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd90      	pop	{r4, r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	50000100 	.word	0x50000100
 8002fdc:	50000300 	.word	0x50000300

08002fe0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003008:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800300c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003010:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003012:	4a04      	ldr	r2, [pc, #16]	@ (8003024 <__NVIC_SetPriorityGrouping+0x44>)
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	60d3      	str	r3, [r2, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800302c:	4b04      	ldr	r3, [pc, #16]	@ (8003040 <__NVIC_GetPriorityGrouping+0x18>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	0a1b      	lsrs	r3, r3, #8
 8003032:	f003 0307 	and.w	r3, r3, #7
}
 8003036:	4618      	mov	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	2b00      	cmp	r3, #0
 8003054:	db0b      	blt.n	800306e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	4907      	ldr	r1, [pc, #28]	@ (800307c <__NVIC_EnableIRQ+0x38>)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	095b      	lsrs	r3, r3, #5
 8003064:	2001      	movs	r0, #1
 8003066:	fa00 f202 	lsl.w	r2, r0, r2
 800306a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000e100 	.word	0xe000e100

08003080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	@ (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	@ (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b089      	sub	sp, #36	@ 0x24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f1c3 0307 	rsb	r3, r3, #7
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	bf28      	it	cs
 80030f2:	2304      	movcs	r3, #4
 80030f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d902      	bls.n	8003104 <NVIC_EncodePriority+0x30>
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3b03      	subs	r3, #3
 8003102:	e000      	b.n	8003106 <NVIC_EncodePriority+0x32>
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43da      	mvns	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	401a      	ands	r2, r3
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800311c:	f04f 31ff 	mov.w	r1, #4294967295
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43d9      	mvns	r1, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800312c:	4313      	orrs	r3, r2
         );
}
 800312e:	4618      	mov	r0, r3
 8003130:	3724      	adds	r7, #36	@ 0x24
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800314c:	d301      	bcc.n	8003152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314e:	2301      	movs	r3, #1
 8003150:	e00f      	b.n	8003172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003152:	4a0a      	ldr	r2, [pc, #40]	@ (800317c <SysTick_Config+0x40>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800315a:	210f      	movs	r1, #15
 800315c:	f04f 30ff 	mov.w	r0, #4294967295
 8003160:	f7ff ff8e 	bl	8003080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <SysTick_Config+0x40>)
 8003166:	2200      	movs	r2, #0
 8003168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800316a:	4b04      	ldr	r3, [pc, #16]	@ (800317c <SysTick_Config+0x40>)
 800316c:	2207      	movs	r2, #7
 800316e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	e000e010 	.word	0xe000e010

08003180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff29 	bl	8002fe0 <__NVIC_SetPriorityGrouping>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}

08003196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003196:	b580      	push	{r7, lr}
 8003198:	b086      	sub	sp, #24
 800319a:	af00      	add	r7, sp, #0
 800319c:	4603      	mov	r3, r0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031a4:	f7ff ff40 	bl	8003028 <__NVIC_GetPriorityGrouping>
 80031a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff ff90 	bl	80030d4 <NVIC_EncodePriority>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff5f 	bl	8003080 <__NVIC_SetPriority>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff33 	bl	8003044 <__NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ffa4 	bl	800313c <SysTick_Config>
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e014      	b.n	800323a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	791b      	ldrb	r3, [r3, #4]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d105      	bne.n	8003226 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f7fd ffb5 	bl	8001190 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2202      	movs	r2, #2
 800322a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	@ 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <HAL_DAC_ConfigChannel+0x1c>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e19e      	b.n	80035a2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	795b      	ldrb	r3, [r3, #5]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_DAC_ConfigChannel+0x2c>
 800326c:	2302      	movs	r3, #2
 800326e:	e198      	b.n	80035a2 <HAL_DAC_ConfigChannel+0x35e>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2202      	movs	r2, #2
 800327a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d17a      	bne.n	800337a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003284:	f7fe fe6a 	bl	8001f5c <HAL_GetTick>
 8003288:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d13d      	bne.n	800330c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003290:	e018      	b.n	80032c4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003292:	f7fe fe63 	bl	8001f5c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d911      	bls.n	80032c4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f043 0208 	orr.w	r2, r3, #8
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2203      	movs	r2, #3
 80032be:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e16e      	b.n	80035a2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1df      	bne.n	8003292 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40
 80032dc:	e020      	b.n	8003320 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032de:	f7fe fe3d 	bl	8001f5c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d90f      	bls.n	800330c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	da0a      	bge.n	800330c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f043 0208 	orr.w	r2, r3, #8
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2203      	movs	r2, #3
 8003306:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e14a      	b.n	80035a2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003312:	2b00      	cmp	r3, #0
 8003314:	dbe3      	blt.n	80032de <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800331e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	43db      	mvns	r3, r3
 8003336:	ea02 0103 	and.w	r1, r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	409a      	lsls	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	21ff      	movs	r1, #255	@ 0xff
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	ea02 0103 	and.w	r1, r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	409a      	lsls	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d11d      	bne.n	80033be <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	221f      	movs	r2, #31
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339a:	4013      	ands	r3, r2
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b2:	4313      	orrs	r3, r2
 80033b4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f003 0310 	and.w	r3, r3, #16
 80033cc:	2207      	movs	r2, #7
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033d6:	4013      	ands	r3, r2
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d102      	bne.n	80033e8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	e00f      	b.n	8003408 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d102      	bne.n	80033f6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80033f0:	2301      	movs	r3, #1
 80033f2:	623b      	str	r3, [r7, #32]
 80033f4:	e008      	b.n	8003408 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80033fe:	2301      	movs	r3, #1
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	e001      	b.n	8003408 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003404:	2300      	movs	r3, #0
 8003406:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	6a3a      	ldr	r2, [r7, #32]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800342a:	4013      	ands	r3, r2
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	791b      	ldrb	r3, [r3, #4]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d102      	bne.n	800343c <HAL_DAC_ConfigChannel+0x1f8>
 8003436:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800343a:	e000      	b.n	800343e <HAL_DAC_ConfigChannel+0x1fa>
 800343c:	2300      	movs	r3, #0
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003456:	4013      	ands	r3, r2
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	795b      	ldrb	r3, [r3, #5]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d102      	bne.n	8003468 <HAL_DAC_ConfigChannel+0x224>
 8003462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003466:	e000      	b.n	800346a <HAL_DAC_ConfigChannel+0x226>
 8003468:	2300      	movs	r3, #0
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003472:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b02      	cmp	r3, #2
 800347e:	d114      	bne.n	80034aa <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003480:	f003 fba8 	bl	8006bd4 <HAL_RCC_GetHCLKFreq>
 8003484:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4a48      	ldr	r2, [pc, #288]	@ (80035ac <HAL_DAC_ConfigChannel+0x368>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d904      	bls.n	8003498 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800348e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003490:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
 8003496:	e00f      	b.n	80034b8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	4a45      	ldr	r2, [pc, #276]	@ (80035b0 <HAL_DAC_ConfigChannel+0x36c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d90a      	bls.n	80034b6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a8:	e006      	b.n	80034b8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034b0:	4313      	orrs	r3, r2
 80034b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b4:	e000      	b.n	80034b8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034b6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f003 0310 	and.w	r3, r3, #16
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c6:	4313      	orrs	r3, r2
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6819      	ldr	r1, [r3, #0]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	400a      	ands	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800350a:	4013      	ands	r3, r2
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003522:	4313      	orrs	r3, r2
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800352c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6819      	ldr	r1, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0310 	and.w	r3, r3, #16
 800353a:	22c0      	movs	r2, #192	@ 0xc0
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43da      	mvns	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	400a      	ands	r2, r1
 8003548:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	089b      	lsrs	r3, r3, #2
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	ea02 0103 	and.w	r1, r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80035a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3728      	adds	r7, #40	@ 0x28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	09896800 	.word	0x09896800
 80035b0:	04c4b400 	.word	0x04c4b400

080035b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035c2:	e15a      	b.n	800387a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2101      	movs	r1, #1
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	4013      	ands	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f000 814c 	beq.w	8003874 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d005      	beq.n	80035f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d130      	bne.n	8003656 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800362a:	2201      	movs	r2, #1
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43db      	mvns	r3, r3
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	f003 0201 	and.w	r2, r3, #1
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa02 f303 	lsl.w	r3, r2, r3
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 0303 	and.w	r3, r3, #3
 800365e:	2b03      	cmp	r3, #3
 8003660:	d017      	beq.n	8003692 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	2203      	movs	r2, #3
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43db      	mvns	r3, r3
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4013      	ands	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	693a      	ldr	r2, [r7, #16]
 8003690:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d123      	bne.n	80036e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	08da      	lsrs	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3208      	adds	r2, #8
 80036a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	220f      	movs	r2, #15
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43db      	mvns	r3, r3
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	08da      	lsrs	r2, r3, #3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3208      	adds	r2, #8
 80036e0:	6939      	ldr	r1, [r7, #16]
 80036e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	2203      	movs	r2, #3
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f003 0203 	and.w	r2, r3, #3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 80a6 	beq.w	8003874 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003728:	4b5b      	ldr	r3, [pc, #364]	@ (8003898 <HAL_GPIO_Init+0x2e4>)
 800372a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372c:	4a5a      	ldr	r2, [pc, #360]	@ (8003898 <HAL_GPIO_Init+0x2e4>)
 800372e:	f043 0301 	orr.w	r3, r3, #1
 8003732:	6613      	str	r3, [r2, #96]	@ 0x60
 8003734:	4b58      	ldr	r3, [pc, #352]	@ (8003898 <HAL_GPIO_Init+0x2e4>)
 8003736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003740:	4a56      	ldr	r2, [pc, #344]	@ (800389c <HAL_GPIO_Init+0x2e8>)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800374c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	220f      	movs	r2, #15
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800376a:	d01f      	beq.n	80037ac <HAL_GPIO_Init+0x1f8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a4c      	ldr	r2, [pc, #304]	@ (80038a0 <HAL_GPIO_Init+0x2ec>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d019      	beq.n	80037a8 <HAL_GPIO_Init+0x1f4>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a4b      	ldr	r2, [pc, #300]	@ (80038a4 <HAL_GPIO_Init+0x2f0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d013      	beq.n	80037a4 <HAL_GPIO_Init+0x1f0>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a4a      	ldr	r2, [pc, #296]	@ (80038a8 <HAL_GPIO_Init+0x2f4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00d      	beq.n	80037a0 <HAL_GPIO_Init+0x1ec>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a49      	ldr	r2, [pc, #292]	@ (80038ac <HAL_GPIO_Init+0x2f8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d007      	beq.n	800379c <HAL_GPIO_Init+0x1e8>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a48      	ldr	r2, [pc, #288]	@ (80038b0 <HAL_GPIO_Init+0x2fc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d101      	bne.n	8003798 <HAL_GPIO_Init+0x1e4>
 8003794:	2305      	movs	r3, #5
 8003796:	e00a      	b.n	80037ae <HAL_GPIO_Init+0x1fa>
 8003798:	2306      	movs	r3, #6
 800379a:	e008      	b.n	80037ae <HAL_GPIO_Init+0x1fa>
 800379c:	2304      	movs	r3, #4
 800379e:	e006      	b.n	80037ae <HAL_GPIO_Init+0x1fa>
 80037a0:	2303      	movs	r3, #3
 80037a2:	e004      	b.n	80037ae <HAL_GPIO_Init+0x1fa>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e002      	b.n	80037ae <HAL_GPIO_Init+0x1fa>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_GPIO_Init+0x1fa>
 80037ac:	2300      	movs	r3, #0
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	f002 0203 	and.w	r2, r2, #3
 80037b4:	0092      	lsls	r2, r2, #2
 80037b6:	4093      	lsls	r3, r2
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037be:	4937      	ldr	r1, [pc, #220]	@ (800389c <HAL_GPIO_Init+0x2e8>)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	089b      	lsrs	r3, r3, #2
 80037c4:	3302      	adds	r3, #2
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037cc:	4b39      	ldr	r3, [pc, #228]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037f0:	4a30      	ldr	r2, [pc, #192]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037f6:	4b2f      	ldr	r3, [pc, #188]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	43db      	mvns	r3, r3
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4013      	ands	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800381a:	4a26      	ldr	r2, [pc, #152]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003820:	4b24      	ldr	r3, [pc, #144]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	43db      	mvns	r3, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4013      	ands	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003844:	4a1b      	ldr	r2, [pc, #108]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800384a:	4b1a      	ldr	r3, [pc, #104]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	43db      	mvns	r3, r3
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	4013      	ands	r3, r2
 8003858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800386e:	4a11      	ldr	r2, [pc, #68]	@ (80038b4 <HAL_GPIO_Init+0x300>)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3301      	adds	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	f47f ae9d 	bne.w	80035c4 <HAL_GPIO_Init+0x10>
  }
}
 800388a:	bf00      	nop
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	40021000 	.word	0x40021000
 800389c:	40010000 	.word	0x40010000
 80038a0:	48000400 	.word	0x48000400
 80038a4:	48000800 	.word	0x48000800
 80038a8:	48000c00 	.word	0x48000c00
 80038ac:	48001000 	.word	0x48001000
 80038b0:	48001400 	.word	0x48001400
 80038b4:	40010400 	.word	0x40010400

080038b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038c8:	787b      	ldrb	r3, [r7, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038d4:	e002      	b.n	80038dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038d6:	887a      	ldrh	r2, [r7, #2]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038fa:	887a      	ldrh	r2, [r7, #2]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	041a      	lsls	r2, r3, #16
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	43d9      	mvns	r1, r3
 8003906:	887b      	ldrh	r3, [r7, #2]
 8003908:	400b      	ands	r3, r1
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	619a      	str	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e08d      	b.n	8003a4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fd6e 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2224      	movs	r2, #36	@ 0x24
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0201 	bic.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800396c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800397c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d107      	bne.n	8003996 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	e006      	b.n	80039a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d108      	bne.n	80039be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	e007      	b.n	80039ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685a      	ldr	r2, [r3, #4]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6812      	ldr	r2, [r2, #0]
 80039d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68da      	ldr	r2, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	69d9      	ldr	r1, [r3, #28]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1a      	ldr	r2, [r3, #32]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	460b      	mov	r3, r1
 8003a62:	817b      	strh	r3, [r7, #10]
 8003a64:	4613      	mov	r3, r2
 8003a66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	f040 80fd 	bne.w	8003c70 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_I2C_Master_Transmit+0x30>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e0f6      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x21e>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a8c:	f7fe fa66 	bl	8001f5c <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	2319      	movs	r3, #25
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 faf6 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0e1      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2221      	movs	r2, #33	@ 0x21
 8003ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2210      	movs	r2, #16
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	893a      	ldrh	r2, [r7, #8]
 8003ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2bff      	cmp	r3, #255	@ 0xff
 8003ade:	d906      	bls.n	8003aee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	22ff      	movs	r2, #255	@ 0xff
 8003ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003ae6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e007      	b.n	8003afe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003af8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003afc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d024      	beq.n	8003b50 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	8979      	ldrh	r1, [r7, #10]
 8003b42:	4b4e      	ldr	r3, [pc, #312]	@ (8003c7c <HAL_I2C_Master_Transmit+0x228>)
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fcf1 	bl	8004530 <I2C_TransferConfig>
 8003b4e:	e066      	b.n	8003c1e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	8979      	ldrh	r1, [r7, #10]
 8003b58:	4b48      	ldr	r3, [pc, #288]	@ (8003c7c <HAL_I2C_Master_Transmit+0x228>)
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 fce6 	bl	8004530 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b64:	e05b      	b.n	8003c1e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	6a39      	ldr	r1, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fae9 	bl	8004142 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e07b      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7e:	781a      	ldrb	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d034      	beq.n	8003c1e <HAL_I2C_Master_Transmit+0x1ca>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d130      	bne.n	8003c1e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	9300      	str	r3, [sp, #0]
 8003bc0:	6a3b      	ldr	r3, [r7, #32]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	2180      	movs	r1, #128	@ 0x80
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 fa62 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e04d      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	2bff      	cmp	r3, #255	@ 0xff
 8003bde:	d90e      	bls.n	8003bfe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	22ff      	movs	r2, #255	@ 0xff
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fc9a 	bl	8004530 <I2C_TransferConfig>
 8003bfc:	e00f      	b.n	8003c1e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	2300      	movs	r3, #0
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fc89 	bl	8004530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d19e      	bne.n	8003b66 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 facf 	bl	80041d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d001      	beq.n	8003c3c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e01a      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2220      	movs	r2, #32
 8003c42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6859      	ldr	r1, [r3, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <HAL_I2C_Master_Transmit+0x22c>)
 8003c50:	400b      	ands	r3, r1
 8003c52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e000      	b.n	8003c72 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003c70:	2302      	movs	r3, #2
  }
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	80002000 	.word	0x80002000
 8003c80:	fe00e800 	.word	0xfe00e800

08003c84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	460b      	mov	r3, r1
 8003c92:	817b      	strh	r3, [r7, #10]
 8003c94:	4613      	mov	r3, r2
 8003c96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	f040 80db 	bne.w	8003e5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_I2C_Master_Receive+0x30>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e0d4      	b.n	8003e5e <HAL_I2C_Master_Receive+0x1da>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cbc:	f7fe f94e 	bl	8001f5c <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2319      	movs	r3, #25
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 f9de 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e0bf      	b.n	8003e5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2222      	movs	r2, #34	@ 0x22
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2210      	movs	r2, #16
 8003cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	893a      	ldrh	r2, [r7, #8]
 8003cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2bff      	cmp	r3, #255	@ 0xff
 8003d0e:	d90e      	bls.n	8003d2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	22ff      	movs	r2, #255	@ 0xff
 8003d14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	4b52      	ldr	r3, [pc, #328]	@ (8003e68 <HAL_I2C_Master_Receive+0x1e4>)
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fc02 	bl	8004530 <I2C_TransferConfig>
 8003d2c:	e06d      	b.n	8003e0a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	8979      	ldrh	r1, [r7, #10]
 8003d40:	4b49      	ldr	r3, [pc, #292]	@ (8003e68 <HAL_I2C_Master_Receive+0x1e4>)
 8003d42:	9300      	str	r3, [sp, #0]
 8003d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fbf1 	bl	8004530 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003d4e:	e05c      	b.n	8003e0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	6a39      	ldr	r1, [r7, #32]
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fa7f 	bl	8004258 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e07c      	b.n	8003e5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d034      	beq.n	8003e0a <HAL_I2C_Master_Receive+0x186>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d130      	bne.n	8003e0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	6a3b      	ldr	r3, [r7, #32]
 8003dae:	2200      	movs	r2, #0
 8003db0:	2180      	movs	r1, #128	@ 0x80
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f96c 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e04d      	b.n	8003e5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2bff      	cmp	r3, #255	@ 0xff
 8003dca:	d90e      	bls.n	8003dea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	22ff      	movs	r2, #255	@ 0xff
 8003dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	8979      	ldrh	r1, [r7, #10]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fba4 	bl	8004530 <I2C_TransferConfig>
 8003de8:	e00f      	b.n	8003e0a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	8979      	ldrh	r1, [r7, #10]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 fb93 	bl	8004530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d19d      	bne.n	8003d50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	6a39      	ldr	r1, [r7, #32]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f9d9 	bl	80041d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e01a      	b.n	8003e5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <HAL_I2C_Master_Receive+0x1e8>)
 8003e3c:	400b      	ands	r3, r1
 8003e3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e000      	b.n	8003e5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003e5c:	2302      	movs	r3, #2
  }
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	80002400 	.word	0x80002400
 8003e6c:	fe00e800 	.word	0xfe00e800

08003e70 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	@ 0x28
 8003e74:	af02      	add	r7, sp, #8
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	f040 80d6 	bne.w	800403e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e0cc      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_I2C_IsDeviceReady+0x44>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e0c5      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x1d0>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2224      	movs	r2, #36	@ 0x24
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_I2C_IsDeviceReady+0x72>
 8003ed2:	897b      	ldrh	r3, [r7, #10]
 8003ed4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ed8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003edc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ee0:	e006      	b.n	8003ef0 <HAL_I2C_IsDeviceReady+0x80>
 8003ee2:	897b      	ldrh	r3, [r7, #10]
 8003ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003eec:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ef6:	f7fe f831 	bl	8001f5c <HAL_GetTick>
 8003efa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b20      	cmp	r3, #32
 8003f08:	bf0c      	ite	eq
 8003f0a:	2301      	moveq	r3, #1
 8003f0c:	2300      	movne	r3, #0
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	bf0c      	ite	eq
 8003f20:	2301      	moveq	r3, #1
 8003f22:	2300      	movne	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f28:	e034      	b.n	8003f94 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d01a      	beq.n	8003f68 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f32:	f7fe f813 	bl	8001f5c <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <HAL_I2C_IsDeviceReady+0xd8>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10f      	bne.n	8003f68 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f54:	f043 0220 	orr.w	r2, r3, #32
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e06b      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b20      	cmp	r3, #32
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b10      	cmp	r3, #16
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003f94:	7ffb      	ldrb	r3, [r7, #31]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d102      	bne.n	8003fa0 <HAL_I2C_IsDeviceReady+0x130>
 8003f9a:	7fbb      	ldrb	r3, [r7, #30]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0c4      	beq.n	8003f2a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f003 0310 	and.w	r3, r3, #16
 8003faa:	2b10      	cmp	r3, #16
 8003fac:	d01a      	beq.n	8003fe4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2120      	movs	r1, #32
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 f869 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e03b      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e02d      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2200      	movs	r2, #0
 8003fec:	2120      	movs	r1, #32
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f84e 	bl	8004090 <I2C_WaitOnFlagUntilTimeout>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e020      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2210      	movs	r2, #16
 8004004:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2220      	movs	r2, #32
 800400c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	3301      	adds	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	f63f af56 	bhi.w	8003eca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800402a:	f043 0220 	orr.w	r2, r3, #32
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800403e:	2302      	movs	r3, #2
  }
}
 8004040:	4618      	mov	r0, r3
 8004042:	3720      	adds	r7, #32
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b02      	cmp	r3, #2
 800405c:	d103      	bne.n	8004066 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2200      	movs	r2, #0
 8004064:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	2b01      	cmp	r3, #1
 8004072:	d007      	beq.n	8004084 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	699a      	ldr	r2, [r3, #24]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	619a      	str	r2, [r3, #24]
  }
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040a0:	e03b      	b.n	800411a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	6839      	ldr	r1, [r7, #0]
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 f962 	bl	8004370 <I2C_IsErrorOccurred>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e041      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040bc:	d02d      	beq.n	800411a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040be:	f7fd ff4d 	bl	8001f5c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d302      	bcc.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d122      	bne.n	800411a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699a      	ldr	r2, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d113      	bne.n	800411a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	f043 0220 	orr.w	r2, r3, #32
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e00f      	b.n	800413a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699a      	ldr	r2, [r3, #24]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	4013      	ands	r3, r2
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	429a      	cmp	r2, r3
 8004128:	bf0c      	ite	eq
 800412a:	2301      	moveq	r3, #1
 800412c:	2300      	movne	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	461a      	mov	r2, r3
 8004132:	79fb      	ldrb	r3, [r7, #7]
 8004134:	429a      	cmp	r2, r3
 8004136:	d0b4      	beq.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b084      	sub	sp, #16
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800414e:	e033      	b.n	80041b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f90b 	bl	8004370 <I2C_IsErrorOccurred>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e031      	b.n	80041c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d025      	beq.n	80041b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416c:	f7fd fef6 	bl	8001f5c <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d302      	bcc.n	8004182 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d11a      	bne.n	80041b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d013      	beq.n	80041b8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004194:	f043 0220 	orr.w	r2, r3, #32
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e007      	b.n	80041c8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d1c4      	bne.n	8004150 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041dc:	e02f      	b.n	800423e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	68b9      	ldr	r1, [r7, #8]
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f8c4 	bl	8004370 <I2C_IsErrorOccurred>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e02d      	b.n	800424e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041f2:	f7fd feb3 	bl	8001f5c <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d302      	bcc.n	8004208 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d11a      	bne.n	800423e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	f003 0320 	and.w	r3, r3, #32
 8004212:	2b20      	cmp	r3, #32
 8004214:	d013      	beq.n	800423e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0220 	orr.w	r2, r3, #32
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2220      	movs	r2, #32
 8004226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e007      	b.n	800424e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	f003 0320 	and.w	r3, r3, #32
 8004248:	2b20      	cmp	r3, #32
 800424a:	d1c8      	bne.n	80041de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004268:	e071      	b.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68b9      	ldr	r1, [r7, #8]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f87e 	bl	8004370 <I2C_IsErrorOccurred>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0320 	and.w	r3, r3, #32
 8004288:	2b20      	cmp	r3, #32
 800428a:	d13b      	bne.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800428c:	7dfb      	ldrb	r3, [r7, #23]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d138      	bne.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b04      	cmp	r3, #4
 800429e:	d105      	bne.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f003 0310 	and.w	r3, r3, #16
 80042b6:	2b10      	cmp	r3, #16
 80042b8:	d121      	bne.n	80042fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2210      	movs	r2, #16
 80042c0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2204      	movs	r2, #4
 80042c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2220      	movs	r2, #32
 80042ce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6859      	ldr	r1, [r3, #4]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b24      	ldr	r3, [pc, #144]	@ (800436c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80042dc:	400b      	ands	r3, r1
 80042de:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
 80042fc:	e002      	b.n	8004304 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8004304:	f7fd fe2a 	bl	8001f5c <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d119      	bne.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800431a:	7dfb      	ldrb	r3, [r7, #23]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d116      	bne.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b04      	cmp	r3, #4
 800432c:	d00f      	beq.n	800434e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004332:	f043 0220 	orr.w	r2, r3, #32
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2220      	movs	r2, #32
 800433e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b04      	cmp	r3, #4
 800435a:	d002      	beq.n	8004362 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d083      	beq.n	800426a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8004362:	7dfb      	ldrb	r3, [r7, #23]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	fe00e800 	.word	0xfe00e800

08004370 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08a      	sub	sp, #40	@ 0x28
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800437c:	2300      	movs	r3, #0
 800437e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d068      	beq.n	800446e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2210      	movs	r2, #16
 80043a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80043a4:	e049      	b.n	800443a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d045      	beq.n	800443a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fd fdd5 	bl	8001f5c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_IsErrorOccurred+0x54>
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d13a      	bne.n	800443a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e6:	d121      	bne.n	800442c <I2C_IsErrorOccurred+0xbc>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043ee:	d01d      	beq.n	800442c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b20      	cmp	r3, #32
 80043f4:	d01a      	beq.n	800442c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004404:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004406:	f7fd fda9 	bl	8001f5c <HAL_GetTick>
 800440a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800440c:	e00e      	b.n	800442c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800440e:	f7fd fda5 	bl	8001f5c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b19      	cmp	r3, #25
 800441a:	d907      	bls.n	800442c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	f043 0320 	orr.w	r3, r3, #32
 8004422:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800442a:	e006      	b.n	800443a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b20      	cmp	r3, #32
 8004438:	d1e9      	bne.n	800440e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b20      	cmp	r3, #32
 8004446:	d003      	beq.n	8004450 <I2C_IsErrorOccurred+0xe0>
 8004448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0aa      	beq.n	80043a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2220      	movs	r2, #32
 800445e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00b      	beq.n	8004498 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004490:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00b      	beq.n	80044ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	f043 0308 	orr.w	r3, r3, #8
 80044a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80044c4:	6a3b      	ldr	r3, [r7, #32]
 80044c6:	f043 0302 	orr.w	r3, r3, #2
 80044ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80044dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01c      	beq.n	800451e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fdaf 	bl	8004048 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6859      	ldr	r1, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	4b0d      	ldr	r3, [pc, #52]	@ (800452c <I2C_IsErrorOccurred+0x1bc>)
 80044f6:	400b      	ands	r3, r1
 80044f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	431a      	orrs	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800451e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004522:	4618      	mov	r0, r3
 8004524:	3728      	adds	r7, #40	@ 0x28
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	fe00e800 	.word	0xfe00e800

08004530 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	607b      	str	r3, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	4613      	mov	r3, r2
 8004540:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004542:	897b      	ldrh	r3, [r7, #10]
 8004544:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004548:	7a7b      	ldrb	r3, [r7, #9]
 800454a:	041b      	lsls	r3, r3, #16
 800454c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004550:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	4313      	orrs	r3, r2
 800455a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800455e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	0d5b      	lsrs	r3, r3, #21
 800456a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800456e:	4b08      	ldr	r3, [pc, #32]	@ (8004590 <I2C_TransferConfig+0x60>)
 8004570:	430b      	orrs	r3, r1
 8004572:	43db      	mvns	r3, r3
 8004574:	ea02 0103 	and.w	r1, r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	430a      	orrs	r2, r1
 8004580:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	03ff63ff 	.word	0x03ff63ff

08004594 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d138      	bne.n	800461c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e032      	b.n	800461e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	@ 0x24
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80045e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800462a:	b480      	push	{r7}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463a:	b2db      	uxtb	r3, r3
 800463c:	2b20      	cmp	r3, #32
 800463e:	d139      	bne.n	80046b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004646:	2b01      	cmp	r3, #1
 8004648:	d101      	bne.n	800464e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800464a:	2302      	movs	r3, #2
 800464c:	e033      	b.n	80046b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2224      	movs	r2, #36	@ 0x24
 800465a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0201 	bic.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800467c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2220      	movs	r2, #32
 80046a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80046b0:	2300      	movs	r3, #0
 80046b2:	e000      	b.n	80046b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80046b4:	2302      	movs	r3, #2
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e0c0      	b.n	8004856 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f008 fbb3 	bl	800ce54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2203      	movs	r2, #3
 80046f2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f004 f9fc 	bl	8008af8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004700:	2300      	movs	r3, #0
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	e03e      	b.n	8004784 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	440b      	add	r3, r1
 8004714:	3311      	adds	r3, #17
 8004716:	2201      	movs	r2, #1
 8004718:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	440b      	add	r3, r1
 8004728:	3310      	adds	r3, #16
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800472e:	7bfa      	ldrb	r2, [r7, #15]
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	440b      	add	r3, r1
 800473c:	3313      	adds	r3, #19
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004742:	7bfa      	ldrb	r2, [r7, #15]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	440b      	add	r3, r1
 8004750:	3320      	adds	r3, #32
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	3324      	adds	r3, #36	@ 0x24
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	1c5a      	adds	r2, r3, #1
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	440b      	add	r3, r1
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800477e:	7bfb      	ldrb	r3, [r7, #15]
 8004780:	3301      	adds	r3, #1
 8004782:	73fb      	strb	r3, [r7, #15]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	791b      	ldrb	r3, [r3, #4]
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	429a      	cmp	r2, r3
 800478c:	d3bb      	bcc.n	8004706 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	e044      	b.n	800481e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	440b      	add	r3, r1
 80047a2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80047a6:	2200      	movs	r2, #0
 80047a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	440b      	add	r3, r1
 80047b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047bc:	7bfa      	ldrb	r2, [r7, #15]
 80047be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004802:	7bfa      	ldrb	r2, [r7, #15]
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	440b      	add	r3, r1
 8004810:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	3301      	adds	r3, #1
 800481c:	73fb      	strb	r3, [r7, #15]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	791b      	ldrb	r3, [r3, #4]
 8004822:	7bfa      	ldrb	r2, [r7, #15]
 8004824:	429a      	cmp	r2, r3
 8004826:	d3b5      	bcc.n	8004794 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	3304      	adds	r3, #4
 8004830:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004834:	f004 f97b 	bl	8008b2e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	7a9b      	ldrb	r3, [r3, #10]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d102      	bne.n	8004854 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f001 fc42 	bl	80060d8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b082      	sub	sp, #8
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_PCD_Start+0x16>
 8004870:	2302      	movs	r3, #2
 8004872:	e012      	b.n	800489a <HAL_PCD_Start+0x3c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f004 f922 	bl	8008aca <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f006 fbe4 	bl	800b058 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f006 fbe9 	bl	800b086 <USB_ReadInterrupts>
 80048b4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fb06 	bl	8004ed2 <PCD_EP_ISR_Handler>

    return;
 80048c6:	e110      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d013      	beq.n	80048fa <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048da:	b29a      	uxth	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048e4:	b292      	uxth	r2, r2
 80048e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f008 fb43 	bl	800cf76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80048f0:	2100      	movs	r1, #0
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8fc 	bl	8004af0 <HAL_PCD_SetAddress>

    return;
 80048f8:	e0f7      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00c      	beq.n	800491e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800490c:	b29a      	uxth	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004916:	b292      	uxth	r2, r2
 8004918:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800491c:	e0e5      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800493a:	b292      	uxth	r2, r2
 800493c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004940:	e0d3      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d034      	beq.n	80049b6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0204 	bic.w	r2, r2, #4
 800495e:	b292      	uxth	r2, r2
 8004960:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800496c:	b29a      	uxth	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0208 	bic.w	r2, r2, #8
 8004976:	b292      	uxth	r2, r2
 8004978:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004982:	2b01      	cmp	r3, #1
 8004984:	d107      	bne.n	8004996 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800498e:	2100      	movs	r1, #0
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f008 fce3 	bl	800d35c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f008 fb26 	bl	800cfe8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049ae:	b292      	uxth	r2, r2
 80049b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80049b4:	e099      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d027      	beq.n	8004a10 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0208 	orr.w	r2, r2, #8
 80049d2:	b292      	uxth	r2, r2
 80049d4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049ea:	b292      	uxth	r2, r2
 80049ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0204 	orr.w	r2, r2, #4
 8004a02:	b292      	uxth	r2, r2
 8004a04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f008 fad3 	bl	800cfb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a0e:	e06c      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d040      	beq.n	8004a9c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a2c:	b292      	uxth	r2, r2
 8004a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d12b      	bne.n	8004a94 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a44:	b29a      	uxth	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0204 	orr.w	r2, r2, #4
 8004a4e:	b292      	uxth	r2, r2
 8004a50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	b292      	uxth	r2, r2
 8004a68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	089b      	lsrs	r3, r3, #2
 8004a80:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f008 fc65 	bl	800d35c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004a92:	e02a      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f008 fa8d 	bl	800cfb4 <HAL_PCD_SuspendCallback>
    return;
 8004a9a:	e026      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00f      	beq.n	8004ac6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004ab8:	b292      	uxth	r2, r2
 8004aba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f008 fa4b 	bl	800cf5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004ac4:	e011      	b.n	8004aea <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004ae8:	bf00      	nop
  }
}
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_PCD_SetAddress+0x1a>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e012      	b.n	8004b30 <HAL_PCD_SetAddress+0x40>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	78fa      	ldrb	r2, [r7, #3]
 8004b16:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	78fa      	ldrb	r2, [r7, #3]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4618      	mov	r0, r3
 8004b22:	f006 fa85 	bl	800b030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	4608      	mov	r0, r1
 8004b42:	4611      	mov	r1, r2
 8004b44:	461a      	mov	r2, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	70fb      	strb	r3, [r7, #3]
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	803b      	strh	r3, [r7, #0]
 8004b4e:	4613      	mov	r3, r2
 8004b50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	da0e      	bge.n	8004b7c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	f003 0207 	and.w	r2, r3, #7
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	4413      	add	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	705a      	strb	r2, [r3, #1]
 8004b7a:	e00e      	b.n	8004b9a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 0207 	and.w	r2, r3, #7
 8004b82:	4613      	mov	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	f003 0307 	and.w	r3, r3, #7
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004ba6:	883b      	ldrh	r3, [r7, #0]
 8004ba8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	78ba      	ldrb	r2, [r7, #2]
 8004bb4:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bb6:	78bb      	ldrb	r3, [r7, #2]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d102      	bne.n	8004bc2 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_PCD_EP_Open+0x98>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e00e      	b.n	8004bee <HAL_PCD_EP_Open+0xb6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f003 ffc4 	bl	8008b6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004bec:	7afb      	ldrb	r3, [r7, #11]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b084      	sub	sp, #16
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	da0e      	bge.n	8004c28 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f003 0207 	and.w	r2, r3, #7
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	3310      	adds	r3, #16
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	705a      	strb	r2, [r3, #1]
 8004c26:	e00e      	b.n	8004c46 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	f003 0207 	and.w	r2, r3, #7
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d101      	bne.n	8004c60 <HAL_PCD_EP_Close+0x6a>
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	e00e      	b.n	8004c7e <HAL_PCD_EP_Close+0x88>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f004 fb40 	bl	80092f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b086      	sub	sp, #24
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
 8004c92:	460b      	mov	r3, r1
 8004c94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c96:	7afb      	ldrb	r3, [r7, #11]
 8004c98:	f003 0207 	and.w	r2, r3, #7
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cc6:	7afb      	ldrb	r3, [r7, #11]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f004 fcf8 	bl	80096ce <USB_EPStartXfer>

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 0207 	and.w	r2, r3, #7
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	440b      	add	r3, r1
 8004d06:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b086      	sub	sp, #24
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	460b      	mov	r3, r1
 8004d26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d28:	7afb      	ldrb	r3, [r7, #11]
 8004d2a:	f003 0207 	and.w	r2, r3, #7
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	3310      	adds	r3, #16
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2201      	movs	r2, #1
 8004d62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d64:	7afb      	ldrb	r3, [r7, #11]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6979      	ldr	r1, [r7, #20]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 fca9 	bl	80096ce <USB_EPStartXfer>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b084      	sub	sp, #16
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d92:	78fb      	ldrb	r3, [r7, #3]
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	7912      	ldrb	r2, [r2, #4]
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e03e      	b.n	8004e22 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004da4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da0e      	bge.n	8004dca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	f003 0207 	and.w	r2, r3, #7
 8004db2:	4613      	mov	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4413      	add	r3, r2
 8004db8:	00db      	lsls	r3, r3, #3
 8004dba:	3310      	adds	r3, #16
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	705a      	strb	r2, [r3, #1]
 8004dc8:	e00c      	b.n	8004de4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	4413      	add	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004dea:	78fb      	ldrb	r3, [r7, #3]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_PCD_EP_SetStall+0x7e>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e00e      	b.n	8004e22 <HAL_PCD_EP_SetStall+0x9c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68f9      	ldr	r1, [r7, #12]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f006 f80d 	bl	800ae32 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3710      	adds	r7, #16
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e36:	78fb      	ldrb	r3, [r7, #3]
 8004e38:	f003 030f 	and.w	r3, r3, #15
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	7912      	ldrb	r2, [r2, #4]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d901      	bls.n	8004e48 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e040      	b.n	8004eca <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	da0e      	bge.n	8004e6e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	f003 0207 	and.w	r2, r3, #7
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	3310      	adds	r3, #16
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	4413      	add	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	705a      	strb	r2, [r3, #1]
 8004e6c:	e00e      	b.n	8004e8c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e6e:	78fb      	ldrb	r3, [r7, #3]
 8004e70:	f003 0207 	and.w	r2, r3, #7
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	4413      	add	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e92:	78fb      	ldrb	r3, [r7, #3]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_PCD_EP_ClrStall+0x82>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e00e      	b.n	8004eca <HAL_PCD_EP_ClrStall+0xa0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f006 f80a 	bl	800aed4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b096      	sub	sp, #88	@ 0x58
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004eda:	e3ad      	b.n	8005638 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ee4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004ee8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004ef6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 816f 	bne.w	80051de <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004f00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004f04:	f003 0310 	and.w	r3, r3, #16
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d14c      	bne.n	8004fa6 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	881b      	ldrh	r3, [r3, #0]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1c:	81fb      	strh	r3, [r7, #14]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	89fb      	ldrh	r3, [r7, #14]
 8004f24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3310      	adds	r3, #16
 8004f34:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004f54:	881b      	ldrh	r3, [r3, #0]
 8004f56:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	441a      	add	r2, r3
 8004f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f007 ffd9 	bl	800cf26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	7b1b      	ldrb	r3, [r3, #12]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 835c 	beq.w	8005638 <PCD_EP_ISR_Handler+0x766>
 8004f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f040 8357 	bne.w	8005638 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	7b1b      	ldrb	r3, [r3, #12]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	731a      	strb	r2, [r3, #12]
 8004fa4:	e348      	b.n	8005638 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004fac:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004fb8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004fbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d032      	beq.n	800502a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4413      	add	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fea:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f006 f893 	bl	800b12a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	b29a      	uxth	r2, r3
 800500c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005010:	4013      	ands	r3, r2
 8005012:	823b      	strh	r3, [r7, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	8a3a      	ldrh	r2, [r7, #16]
 800501a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800501e:	b292      	uxth	r2, r2
 8005020:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f007 ff52 	bl	800cecc <HAL_PCD_SetupStageCallback>
 8005028:	e306      	b.n	8005638 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800502a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800502e:	2b00      	cmp	r3, #0
 8005030:	f280 8302 	bge.w	8005638 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29a      	uxth	r2, r3
 800503c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005040:	4013      	ands	r3, r2
 8005042:	83fb      	strh	r3, [r7, #30]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	8bfa      	ldrh	r2, [r7, #30]
 800504a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800504e:	b292      	uxth	r2, r2
 8005050:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800505a:	b29b      	uxth	r3, r3
 800505c:	461a      	mov	r2, r3
 800505e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4413      	add	r3, r2
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	4413      	add	r3, r2
 800506c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005078:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800507a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d019      	beq.n	80050b6 <PCD_EP_ISR_Handler+0x1e4>
 8005082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d015      	beq.n	80050b6 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005090:	6959      	ldr	r1, [r3, #20]
 8005092:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005094:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005098:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800509a:	b29b      	uxth	r3, r3
 800509c:	f006 f845 	bl	800b12a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80050a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	441a      	add	r2, r3
 80050aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ac:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80050ae:	2100      	movs	r1, #0
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f007 ff1d 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80050c0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80050c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f040 82b5 	bne.w	8005638 <PCD_EP_ISR_Handler+0x766>
 80050ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80050d2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80050d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80050da:	f000 82ad 	beq.w	8005638 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	4413      	add	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	b29b      	uxth	r3, r3
 8005104:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005108:	b29a      	uxth	r2, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	801a      	strh	r2, [r3, #0]
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10a      	bne.n	800512c <PCD_EP_ISR_Handler+0x25a>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	881b      	ldrh	r3, [r3, #0]
 800511a:	b29b      	uxth	r3, r3
 800511c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005124:	b29a      	uxth	r2, r3
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	e039      	b.n	80051a0 <PCD_EP_ISR_Handler+0x2ce>
 800512c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	2b3e      	cmp	r3, #62	@ 0x3e
 8005132:	d818      	bhi.n	8005166 <PCD_EP_ISR_Handler+0x294>
 8005134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	085b      	lsrs	r3, r3, #1
 800513a:	647b      	str	r3, [r7, #68]	@ 0x44
 800513c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <PCD_EP_ISR_Handler+0x27c>
 8005148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800514a:	3301      	adds	r3, #1
 800514c:	647b      	str	r3, [r7, #68]	@ 0x44
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29a      	uxth	r2, r3
 8005154:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005156:	b29b      	uxth	r3, r3
 8005158:	029b      	lsls	r3, r3, #10
 800515a:	b29b      	uxth	r3, r3
 800515c:	4313      	orrs	r3, r2
 800515e:	b29a      	uxth	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	801a      	strh	r2, [r3, #0]
 8005164:	e01c      	b.n	80051a0 <PCD_EP_ISR_Handler+0x2ce>
 8005166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	647b      	str	r3, [r7, #68]	@ 0x44
 800516e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 031f 	and.w	r3, r3, #31
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <PCD_EP_ISR_Handler+0x2ae>
 800517a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517c:	3b01      	subs	r3, #1
 800517e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	881b      	ldrh	r3, [r3, #0]
 8005184:	b29a      	uxth	r2, r3
 8005186:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005188:	b29b      	uxth	r3, r3
 800518a:	029b      	lsls	r3, r3, #10
 800518c:	b29b      	uxth	r3, r3
 800518e:	4313      	orrs	r3, r2
 8005190:	b29b      	uxth	r3, r3
 8005192:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005196:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800519a:	b29a      	uxth	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051b0:	827b      	strh	r3, [r7, #18]
 80051b2:	8a7b      	ldrh	r3, [r7, #18]
 80051b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80051b8:	827b      	strh	r3, [r7, #18]
 80051ba:	8a7b      	ldrh	r3, [r7, #18]
 80051bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051c0:	827b      	strh	r3, [r7, #18]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	8a7b      	ldrh	r3, [r7, #18]
 80051c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051d8:	b29b      	uxth	r3, r3
 80051da:	8013      	strh	r3, [r2, #0]
 80051dc:	e22c      	b.n	8005638 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	4413      	add	r3, r2
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051f2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f280 80f6 	bge.w	80053e8 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	461a      	mov	r2, r3
 8005202:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	b29a      	uxth	r2, r3
 800520e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005212:	4013      	ands	r3, r2
 8005214:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800522a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800522e:	b292      	uxth	r2, r2
 8005230:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005232:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005236:	4613      	mov	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	4413      	add	r3, r2
 800523c:	00db      	lsls	r3, r3, #3
 800523e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	4413      	add	r3, r2
 8005246:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800524a:	7b1b      	ldrb	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d123      	bne.n	8005298 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005258:	b29b      	uxth	r3, r3
 800525a:	461a      	mov	r2, r3
 800525c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4413      	add	r3, r2
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	4413      	add	r3, r2
 800526a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800526e:	881b      	ldrh	r3, [r3, #0]
 8005270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005274:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005278:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 808e 	beq.w	800539e <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005288:	6959      	ldr	r1, [r3, #20]
 800528a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800528c:	88da      	ldrh	r2, [r3, #6]
 800528e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005292:	f005 ff4a 	bl	800b12a <USB_ReadPMA>
 8005296:	e082      	b.n	800539e <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800529a:	78db      	ldrb	r3, [r3, #3]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d10a      	bne.n	80052b6 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80052a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80052a4:	461a      	mov	r2, r3
 80052a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f9d3 	bl	8005654 <HAL_PCD_EP_DB_Receive>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80052b4:	e073      	b.n	800539e <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80052e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	4413      	add	r3, r2
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29b      	uxth	r3, r3
 800530c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d022      	beq.n	800535a <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800531c:	b29b      	uxth	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	4413      	add	r3, r2
 800532e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005338:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800533c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02c      	beq.n	800539e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534a:	6959      	ldr	r1, [r3, #20]
 800534c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534e:	891a      	ldrh	r2, [r3, #8]
 8005350:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005354:	f005 fee9 	bl	800b12a <USB_ReadPMA>
 8005358:	e021      	b.n	800539e <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005362:	b29b      	uxth	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6812      	ldr	r2, [r2, #0]
 8005372:	4413      	add	r3, r2
 8005374:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005382:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005390:	6959      	ldr	r1, [r3, #20]
 8005392:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005394:	895a      	ldrh	r2, [r3, #10]
 8005396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800539a:	f005 fec6 	bl	800b12a <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800539e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053a0:	69da      	ldr	r2, [r3, #28]
 80053a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053a6:	441a      	add	r2, r3
 80053a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80053ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80053b4:	441a      	add	r2, r3
 80053b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80053ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <PCD_EP_ISR_Handler+0x4fc>
 80053c2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80053c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d206      	bcs.n	80053dc <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80053ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	4619      	mov	r1, r3
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f007 fd8b 	bl	800cef0 <HAL_PCD_DataOutStageCallback>
 80053da:	e005      	b.n	80053e8 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80053e2:	4618      	mov	r0, r3
 80053e4:	f004 f973 	bl	80096ce <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80053e8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 8121 	beq.w	8005638 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80053f6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	3310      	adds	r3, #16
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29b      	uxth	r3, r3
 800541c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005424:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	461a      	mov	r2, r3
 800542e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	441a      	add	r2, r3
 8005436:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800543a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800543e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005442:	b29b      	uxth	r3, r3
 8005444:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005448:	78db      	ldrb	r3, [r3, #3]
 800544a:	2b01      	cmp	r3, #1
 800544c:	f040 80a2 	bne.w	8005594 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005452:	2200      	movs	r2, #0
 8005454:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005458:	7b1b      	ldrb	r3, [r3, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8093 	beq.w	8005586 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005460:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d046      	beq.n	80054fa <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800546c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d126      	bne.n	80054c2 <PCD_EP_ISR_Handler+0x5f0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	627b      	str	r3, [r7, #36]	@ 0x24
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005482:	b29b      	uxth	r3, r3
 8005484:	461a      	mov	r2, r3
 8005486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005488:	4413      	add	r3, r2
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
 800548c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	00da      	lsls	r2, r3, #3
 8005492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005494:	4413      	add	r3, r2
 8005496:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800549a:	623b      	str	r3, [r7, #32]
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	881b      	ldrh	r3, [r3, #0]
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	801a      	strh	r2, [r3, #0]
 80054c0:	e061      	b.n	8005586 <PCD_EP_ISR_Handler+0x6b4>
 80054c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c4:	785b      	ldrb	r3, [r3, #1]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d15d      	bne.n	8005586 <PCD_EP_ISR_Handler+0x6b4>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054de:	4413      	add	r3, r2
 80054e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	00da      	lsls	r2, r3, #3
 80054e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054ea:	4413      	add	r3, r2
 80054ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f4:	2200      	movs	r2, #0
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e045      	b.n	8005586 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005502:	785b      	ldrb	r3, [r3, #1]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d126      	bne.n	8005556 <PCD_EP_ISR_Handler+0x684>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	637b      	str	r3, [r7, #52]	@ 0x34
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005516:	b29b      	uxth	r3, r3
 8005518:	461a      	mov	r2, r3
 800551a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800551c:	4413      	add	r3, r2
 800551e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	00da      	lsls	r2, r3, #3
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005528:	4413      	add	r3, r2
 800552a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800552e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	881b      	ldrh	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553a:	b29a      	uxth	r2, r3
 800553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553e:	801a      	strh	r2, [r3, #0]
 8005540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800554a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800554e:	b29a      	uxth	r2, r3
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	e017      	b.n	8005586 <PCD_EP_ISR_Handler+0x6b4>
 8005556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005558:	785b      	ldrb	r3, [r3, #1]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d113      	bne.n	8005586 <PCD_EP_ISR_Handler+0x6b4>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005566:	b29b      	uxth	r3, r3
 8005568:	461a      	mov	r2, r3
 800556a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800556c:	4413      	add	r3, r2
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	00da      	lsls	r2, r3, #3
 8005576:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005578:	4413      	add	r3, r2
 800557a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800557e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	2200      	movs	r2, #0
 8005584:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f007 fcca 	bl	800cf26 <HAL_PCD_DataInStageCallback>
 8005592:	e051      	b.n	8005638 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005594:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559c:	2b00      	cmp	r3, #0
 800559e:	d144      	bne.n	800562a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	461a      	mov	r2, r3
 80055ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	4413      	add	r3, r2
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	4413      	add	r3, r2
 80055ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055c4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80055c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ca:	699a      	ldr	r2, [r3, #24]
 80055cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d907      	bls.n	80055e4 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80055d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d6:	699a      	ldr	r2, [r3, #24]
 80055d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055dc:	1ad2      	subs	r2, r2, r3
 80055de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e0:	619a      	str	r2, [r3, #24]
 80055e2:	e002      	b.n	80055ea <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80055e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e6:	2200      	movs	r2, #0
 80055e8:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80055ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ec:	699b      	ldr	r3, [r3, #24]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f007 fc94 	bl	800cf26 <HAL_PCD_DataInStageCallback>
 80055fe:	e01b      	b.n	8005638 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005608:	441a      	add	r2, r3
 800560a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800560c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800560e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005610:	69da      	ldr	r2, [r3, #28]
 8005612:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005616:	441a      	add	r2, r3
 8005618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005622:	4618      	mov	r0, r3
 8005624:	f004 f853 	bl	80096ce <USB_EPStartXfer>
 8005628:	e006      	b.n	8005638 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800562a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800562e:	461a      	mov	r2, r3
 8005630:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f917 	bl	8005866 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005640:	b29b      	uxth	r3, r3
 8005642:	b21b      	sxth	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	f6ff ac49 	blt.w	8004edc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800564a:	2300      	movs	r3, #0
}
 800564c:	4618      	mov	r0, r3
 800564e:	3758      	adds	r7, #88	@ 0x58
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d07c      	beq.n	8005766 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	6812      	ldr	r2, [r2, #0]
 8005684:	4413      	add	r3, r2
 8005686:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800568a:	881b      	ldrh	r3, [r3, #0]
 800568c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005690:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	8b7b      	ldrh	r3, [r7, #26]
 8005698:	429a      	cmp	r2, r3
 800569a:	d306      	bcc.n	80056aa <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	699a      	ldr	r2, [r3, #24]
 80056a0:	8b7b      	ldrh	r3, [r7, #26]
 80056a2:	1ad2      	subs	r2, r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	619a      	str	r2, [r3, #24]
 80056a8:	e002      	b.n	80056b0 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2200      	movs	r2, #0
 80056ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d123      	bne.n	8005700 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d2:	833b      	strh	r3, [r7, #24]
 80056d4:	8b3b      	ldrh	r3, [r7, #24]
 80056d6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80056da:	833b      	strh	r3, [r7, #24]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	441a      	add	r2, r3
 80056ea:	8b3b      	ldrh	r3, [r7, #24]
 80056ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01f      	beq.n	800574a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005724:	82fb      	strh	r3, [r7, #22]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	441a      	add	r2, r3
 8005734:	8afb      	ldrh	r3, [r7, #22]
 8005736:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800573a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800573e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005742:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005746:	b29b      	uxth	r3, r3
 8005748:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800574a:	8b7b      	ldrh	r3, [r7, #26]
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 8085 	beq.w	800585c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	6959      	ldr	r1, [r3, #20]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	891a      	ldrh	r2, [r3, #8]
 800575e:	8b7b      	ldrh	r3, [r7, #26]
 8005760:	f005 fce3 	bl	800b12a <USB_ReadPMA>
 8005764:	e07a      	b.n	800585c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800576e:	b29b      	uxth	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	4413      	add	r3, r2
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	6812      	ldr	r2, [r2, #0]
 800577e:	4413      	add	r3, r2
 8005780:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	699a      	ldr	r2, [r3, #24]
 8005790:	8b7b      	ldrh	r3, [r7, #26]
 8005792:	429a      	cmp	r2, r3
 8005794:	d306      	bcc.n	80057a4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	8b7b      	ldrh	r3, [r7, #26]
 800579c:	1ad2      	subs	r2, r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	619a      	str	r2, [r3, #24]
 80057a2:	e002      	b.n	80057aa <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2200      	movs	r2, #0
 80057a8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d123      	bne.n	80057fa <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057cc:	83fb      	strh	r3, [r7, #30]
 80057ce:	8bfb      	ldrh	r3, [r7, #30]
 80057d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80057d4:	83fb      	strh	r3, [r7, #30]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	441a      	add	r2, r3
 80057e4:	8bfb      	ldrh	r3, [r7, #30]
 80057e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80057fa:	88fb      	ldrh	r3, [r7, #6]
 80057fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11f      	bne.n	8005844 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	881b      	ldrh	r3, [r3, #0]
 8005814:	b29b      	uxth	r3, r3
 8005816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800581a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581e:	83bb      	strh	r3, [r7, #28]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	441a      	add	r2, r3
 800582e:	8bbb      	ldrh	r3, [r7, #28]
 8005830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800583c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005840:	b29b      	uxth	r3, r3
 8005842:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005844:	8b7b      	ldrh	r3, [r7, #26]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6959      	ldr	r1, [r3, #20]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	895a      	ldrh	r2, [r3, #10]
 8005856:	8b7b      	ldrh	r3, [r7, #26]
 8005858:	f005 fc67 	bl	800b12a <USB_ReadPMA>
    }
  }

  return count;
 800585c:	8b7b      	ldrh	r3, [r7, #26]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b0a4      	sub	sp, #144	@ 0x90
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 81db 	beq.w	8005c36 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005888:	b29b      	uxth	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	00db      	lsls	r3, r3, #3
 8005892:	4413      	add	r3, r2
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	4413      	add	r3, r2
 800589a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	699a      	ldr	r2, [r3, #24]
 80058ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d907      	bls.n	80058c4 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	699a      	ldr	r2, [r3, #24]
 80058b8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80058bc:	1ad2      	subs	r2, r2, r3
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	619a      	str	r2, [r3, #24]
 80058c2:	e002      	b.n	80058ca <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2200      	movs	r2, #0
 80058c8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 80b9 	bne.w	8005a46 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d126      	bne.n	800592a <HAL_PCD_EP_DB_Transmit+0xc4>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058f0:	4413      	add	r3, r2
 80058f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	00da      	lsls	r2, r3, #3
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	4413      	add	r3, r2
 80058fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590e:	b29a      	uxth	r2, r3
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	801a      	strh	r2, [r3, #0]
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800591e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005922:	b29a      	uxth	r2, r3
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	e01a      	b.n	8005960 <HAL_PCD_EP_DB_Transmit+0xfa>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	785b      	ldrb	r3, [r3, #1]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d116      	bne.n	8005960 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	637b      	str	r3, [r7, #52]	@ 0x34
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005946:	4413      	add	r3, r2
 8005948:	637b      	str	r3, [r7, #52]	@ 0x34
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	00da      	lsls	r2, r3, #3
 8005950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005952:	4413      	add	r3, r2
 8005954:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005958:	633b      	str	r3, [r7, #48]	@ 0x30
 800595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595c:	2200      	movs	r2, #0
 800595e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	785b      	ldrb	r3, [r3, #1]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d126      	bne.n	80059bc <HAL_PCD_EP_DB_Transmit+0x156>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800597c:	b29b      	uxth	r3, r3
 800597e:	461a      	mov	r2, r3
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	4413      	add	r3, r2
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	00da      	lsls	r2, r3, #3
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a0:	b29a      	uxth	r2, r3
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	801a      	strh	r2, [r3, #0]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	801a      	strh	r2, [r3, #0]
 80059ba:	e017      	b.n	80059ec <HAL_PCD_EP_DB_Transmit+0x186>
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d113      	bne.n	80059ec <HAL_PCD_EP_DB_Transmit+0x186>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	461a      	mov	r2, r3
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	4413      	add	r3, r2
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	00da      	lsls	r2, r3, #3
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	4413      	add	r3, r2
 80059e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059e4:	623b      	str	r3, [r7, #32]
 80059e6:	6a3b      	ldr	r3, [r7, #32]
 80059e8:	2200      	movs	r2, #0
 80059ea:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	4619      	mov	r1, r3
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f007 fa97 	bl	800cf26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f000 82fa 	beq.w	8005ff8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a1e:	82fb      	strh	r3, [r7, #22]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	441a      	add	r2, r3
 8005a2e:	8afb      	ldrh	r3, [r7, #22]
 8005a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	8013      	strh	r3, [r2, #0]
 8005a44:	e2d8      	b.n	8005ff8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d021      	beq.n	8005a94 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	461a      	mov	r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a6a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	441a      	add	r2, r3
 8005a7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	f040 82ac 	bne.w	8005ff8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	695a      	ldr	r2, [r3, #20]
 8005aa4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005aa8:	441a      	add	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005ab6:	441a      	add	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6a1a      	ldr	r2, [r3, #32]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d30b      	bcc.n	8005ae0 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad8:	1ad2      	subs	r2, r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	621a      	str	r2, [r3, #32]
 8005ade:	e017      	b.n	8005b10 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d108      	bne.n	8005afa <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005ae8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005aec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005af8:	e00a      	b.n	8005b10 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	785b      	ldrb	r3, [r3, #1]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d165      	bne.n	8005be4 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2c:	4413      	add	r3, r2
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	00da      	lsls	r2, r3, #3
 8005b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b38:	4413      	add	r3, r2
 8005b3a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <HAL_PCD_EP_DB_Transmit+0x308>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	801a      	strh	r2, [r3, #0]
 8005b6c:	e057      	b.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b72:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b74:	d818      	bhi.n	8005ba8 <HAL_PCD_EP_DB_Transmit+0x342>
 8005b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_PCD_EP_DB_Transmit+0x32a>
 8005b8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	029b      	lsls	r3, r3, #10
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	801a      	strh	r2, [r3, #0]
 8005ba6:	e03a      	b.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <HAL_PCD_EP_DB_Transmit+0x35c>
 8005bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	881b      	ldrh	r3, [r3, #0]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	029b      	lsls	r3, r3, #10
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e01c      	b.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d118      	bne.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c00:	4413      	add	r3, r2
 8005c02:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	00da      	lsls	r2, r3, #3
 8005c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c1c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6959      	ldr	r1, [r3, #20]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	891a      	ldrh	r2, [r3, #8]
 8005c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f005 fa39 	bl	800b0a6 <USB_WritePMA>
 8005c34:	e1e0      	b.n	8005ff8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4413      	add	r3, r2
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c5a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d307      	bcc.n	8005c7a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	699a      	ldr	r2, [r3, #24]
 8005c6e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	619a      	str	r2, [r3, #24]
 8005c78:	e002      	b.n	8005c80 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f040 80c0 	bne.w	8005e0a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	785b      	ldrb	r3, [r3, #1]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d126      	bne.n	8005ce0 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ca6:	4413      	add	r3, r2
 8005ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	00da      	lsls	r2, r3, #3
 8005cb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cb8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005cba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cc8:	801a      	strh	r2, [r3, #0]
 8005cca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	e01a      	b.n	8005d16 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d116      	bne.n	8005d16 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	667b      	str	r3, [r7, #100]	@ 0x64
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cfc:	4413      	add	r3, r2
 8005cfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	00da      	lsls	r2, r3, #3
 8005d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d12:	2200      	movs	r2, #0
 8005d14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	785b      	ldrb	r3, [r3, #1]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d12b      	bne.n	8005d7c <HAL_PCD_EP_DB_Transmit+0x516>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d38:	4413      	add	r3, r2
 8005d3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	00da      	lsls	r2, r3, #3
 8005d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d44:	4413      	add	r3, r2
 8005d46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d60:	801a      	strh	r2, [r3, #0]
 8005d62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e017      	b.n	8005dac <HAL_PCD_EP_DB_Transmit+0x546>
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d113      	bne.n	8005dac <HAL_PCD_EP_DB_Transmit+0x546>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d92:	4413      	add	r3, r2
 8005d94:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	00da      	lsls	r2, r3, #3
 8005d9c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d9e:	4413      	add	r3, r2
 8005da0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005da4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005da6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005da8:	2200      	movs	r2, #0
 8005daa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	4619      	mov	r1, r3
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f007 f8b7 	bl	800cf26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f040 811a 	bne.w	8005ff8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dde:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	461a      	mov	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dfc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
 8005e08:	e0f6      	b.n	8005ff8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d121      	bne.n	8005e58 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e2e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	461a      	mov	r2, r3
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	441a      	add	r2, r3
 8005e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	f040 80ca 	bne.w	8005ff8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005e6c:	441a      	add	r2, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	69da      	ldr	r2, [r3, #28]
 8005e76:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005e7a:	441a      	add	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d30b      	bcc.n	8005ea4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	621a      	str	r2, [r3, #32]
 8005ea2:	e017      	b.n	8005ed4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005eac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005eb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005ebc:	e00a      	b.n	8005ed4 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	785b      	ldrb	r3, [r3, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d165      	bne.n	8005fae <HAL_PCD_EP_DB_Transmit+0x748>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ef6:	4413      	add	r3, r2
 8005ef8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	00da      	lsls	r2, r3, #3
 8005f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f02:	4413      	add	r3, r2
 8005f04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f08:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f18:	801a      	strh	r2, [r3, #0]
 8005f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005f22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	e054      	b.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8005f3e:	d818      	bhi.n	8005f72 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005f54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f56:	3301      	adds	r3, #1
 8005f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	e037      	b.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f76:	095b      	lsrs	r3, r3, #5
 8005f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <HAL_PCD_EP_DB_Transmit+0x726>
 8005f86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	029b      	lsls	r3, r3, #10
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e019      	b.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d115      	bne.n	8005fe2 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc4:	4413      	add	r3, r2
 8005fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	00da      	lsls	r2, r3, #3
 8005fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6959      	ldr	r1, [r3, #20]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	895a      	ldrh	r2, [r3, #10]
 8005fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f005 f857 	bl	800b0a6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800600e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006012:	82bb      	strh	r3, [r7, #20]
 8006014:	8abb      	ldrh	r3, [r7, #20]
 8006016:	f083 0310 	eor.w	r3, r3, #16
 800601a:	82bb      	strh	r3, [r7, #20]
 800601c:	8abb      	ldrh	r3, [r7, #20]
 800601e:	f083 0320 	eor.w	r3, r3, #32
 8006022:	82bb      	strh	r3, [r7, #20]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	8abb      	ldrh	r3, [r7, #20]
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3790      	adds	r7, #144	@ 0x90
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006052:	b480      	push	{r7}
 8006054:	b087      	sub	sp, #28
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	607b      	str	r3, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	817b      	strh	r3, [r7, #10]
 8006060:	4613      	mov	r3, r2
 8006062:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006064:	897b      	ldrh	r3, [r7, #10]
 8006066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00b      	beq.n	8006088 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006070:	897b      	ldrh	r3, [r7, #10]
 8006072:	f003 0207 	and.w	r2, r3, #7
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	3310      	adds	r3, #16
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e009      	b.n	800609c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006088:	897a      	ldrh	r2, [r7, #10]
 800608a:	4613      	mov	r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4413      	add	r3, r2
 8006090:	00db      	lsls	r3, r3, #3
 8006092:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800609c:	893b      	ldrh	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2200      	movs	r2, #0
 80060a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	80da      	strh	r2, [r3, #6]
 80060b0:	e00b      	b.n	80060ca <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	2201      	movs	r2, #1
 80060b6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	0c1b      	lsrs	r3, r3, #16
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	371c      	adds	r7, #28
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006110:	b29b      	uxth	r3, r3
 8006112:	f043 0302 	orr.w	r3, r3, #2
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d141      	bne.n	80061be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800613a:	4b4b      	ldr	r3, [pc, #300]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006146:	d131      	bne.n	80061ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006148:	4b47      	ldr	r3, [pc, #284]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800614a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800614e:	4a46      	ldr	r2, [pc, #280]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006150:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006158:	4b43      	ldr	r3, [pc, #268]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006160:	4a41      	ldr	r2, [pc, #260]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006162:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006166:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006168:	4b40      	ldr	r3, [pc, #256]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2232      	movs	r2, #50	@ 0x32
 800616e:	fb02 f303 	mul.w	r3, r2, r3
 8006172:	4a3f      	ldr	r2, [pc, #252]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	0c9b      	lsrs	r3, r3, #18
 800617a:	3301      	adds	r3, #1
 800617c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800617e:	e002      	b.n	8006186 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	3b01      	subs	r3, #1
 8006184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006186:	4b38      	ldr	r3, [pc, #224]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006188:	695b      	ldr	r3, [r3, #20]
 800618a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006192:	d102      	bne.n	800619a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1f2      	bne.n	8006180 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800619a:	4b33      	ldr	r3, [pc, #204]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a6:	d158      	bne.n	800625a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e057      	b.n	800625c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061ac:	4b2e      	ldr	r3, [pc, #184]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061b2:	4a2d      	ldr	r2, [pc, #180]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061bc:	e04d      	b.n	800625a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061c4:	d141      	bne.n	800624a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80061c6:	4b28      	ldr	r3, [pc, #160]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80061ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d2:	d131      	bne.n	8006238 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061d4:	4b24      	ldr	r3, [pc, #144]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061da:	4a23      	ldr	r2, [pc, #140]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e4:	4b20      	ldr	r3, [pc, #128]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80061f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80061f4:	4b1d      	ldr	r3, [pc, #116]	@ (800626c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2232      	movs	r2, #50	@ 0x32
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
 80061fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006270 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	0c9b      	lsrs	r3, r3, #18
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800620a:	e002      	b.n	8006212 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3b01      	subs	r3, #1
 8006210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006212:	4b15      	ldr	r3, [pc, #84]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621e:	d102      	bne.n	8006226 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f2      	bne.n	800620c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006226:	4b10      	ldr	r3, [pc, #64]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006232:	d112      	bne.n	800625a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006234:	2303      	movs	r3, #3
 8006236:	e011      	b.n	800625c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006238:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800623a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800623e:	4a0a      	ldr	r2, [pc, #40]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006240:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006244:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006248:	e007      	b.n	800625a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800624a:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006252:	4a05      	ldr	r2, [pc, #20]	@ (8006268 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006258:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40007000 	.word	0x40007000
 800626c:	20000000 	.word	0x20000000
 8006270:	431bde83 	.word	0x431bde83

08006274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e2fe      	b.n	8006884 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 0301 	and.w	r3, r3, #1
 800628e:	2b00      	cmp	r3, #0
 8006290:	d075      	beq.n	800637e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006292:	4b97      	ldr	r3, [pc, #604]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
 800629a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800629c:	4b94      	ldr	r3, [pc, #592]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	2b0c      	cmp	r3, #12
 80062aa:	d102      	bne.n	80062b2 <HAL_RCC_OscConfig+0x3e>
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d002      	beq.n	80062b8 <HAL_RCC_OscConfig+0x44>
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10b      	bne.n	80062d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b8:	4b8d      	ldr	r3, [pc, #564]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d05b      	beq.n	800637c <HAL_RCC_OscConfig+0x108>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d157      	bne.n	800637c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e2d9      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d8:	d106      	bne.n	80062e8 <HAL_RCC_OscConfig+0x74>
 80062da:	4b85      	ldr	r3, [pc, #532]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a84      	ldr	r2, [pc, #528]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80062e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e4:	6013      	str	r3, [r2, #0]
 80062e6:	e01d      	b.n	8006324 <HAL_RCC_OscConfig+0xb0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062f0:	d10c      	bne.n	800630c <HAL_RCC_OscConfig+0x98>
 80062f2:	4b7f      	ldr	r3, [pc, #508]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a7e      	ldr	r2, [pc, #504]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80062f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4b7c      	ldr	r3, [pc, #496]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a7b      	ldr	r2, [pc, #492]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	e00b      	b.n	8006324 <HAL_RCC_OscConfig+0xb0>
 800630c:	4b78      	ldr	r3, [pc, #480]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a77      	ldr	r2, [pc, #476]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	4b75      	ldr	r3, [pc, #468]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a74      	ldr	r2, [pc, #464]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800631e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d013      	beq.n	8006354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7fb fe16 	bl	8001f5c <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006334:	f7fb fe12 	bl	8001f5c <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b64      	cmp	r3, #100	@ 0x64
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e29e      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006346:	4b6a      	ldr	r3, [pc, #424]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0xc0>
 8006352:	e014      	b.n	800637e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7fb fe02 	bl	8001f5c <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800635c:	f7fb fdfe 	bl	8001f5c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b64      	cmp	r3, #100	@ 0x64
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e28a      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800636e:	4b60      	ldr	r3, [pc, #384]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f0      	bne.n	800635c <HAL_RCC_OscConfig+0xe8>
 800637a:	e000      	b.n	800637e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800637c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0302 	and.w	r3, r3, #2
 8006386:	2b00      	cmp	r3, #0
 8006388:	d075      	beq.n	8006476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800638a:	4b59      	ldr	r3, [pc, #356]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006394:	4b56      	ldr	r3, [pc, #344]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	2b0c      	cmp	r3, #12
 80063a2:	d102      	bne.n	80063aa <HAL_RCC_OscConfig+0x136>
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d002      	beq.n	80063b0 <HAL_RCC_OscConfig+0x13c>
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	2b04      	cmp	r3, #4
 80063ae:	d11f      	bne.n	80063f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063b0:	4b4f      	ldr	r3, [pc, #316]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <HAL_RCC_OscConfig+0x154>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e25d      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063c8:	4b49      	ldr	r3, [pc, #292]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	061b      	lsls	r3, r3, #24
 80063d6:	4946      	ldr	r1, [pc, #280]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80063d8:	4313      	orrs	r3, r2
 80063da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80063dc:	4b45      	ldr	r3, [pc, #276]	@ (80064f4 <HAL_RCC_OscConfig+0x280>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fb fd6f 	bl	8001ec4 <HAL_InitTick>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d043      	beq.n	8006474 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e249      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d023      	beq.n	8006440 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063f8:	4b3d      	ldr	r3, [pc, #244]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a3c      	ldr	r2, [pc, #240]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80063fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fb fdaa 	bl	8001f5c <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800640c:	f7fb fda6 	bl	8001f5c <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e232      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800641e:	4b34      	ldr	r3, [pc, #208]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0f0      	beq.n	800640c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800642a:	4b31      	ldr	r3, [pc, #196]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	061b      	lsls	r3, r3, #24
 8006438:	492d      	ldr	r1, [pc, #180]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800643a:	4313      	orrs	r3, r2
 800643c:	604b      	str	r3, [r1, #4]
 800643e:	e01a      	b.n	8006476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006440:	4b2b      	ldr	r3, [pc, #172]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2a      	ldr	r2, [pc, #168]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006446:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800644a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644c:	f7fb fd86 	bl	8001f5c <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006452:	e008      	b.n	8006466 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006454:	f7fb fd82 	bl	8001f5c <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	2b02      	cmp	r3, #2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e20e      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006466:	4b22      	ldr	r3, [pc, #136]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1f0      	bne.n	8006454 <HAL_RCC_OscConfig+0x1e0>
 8006472:	e000      	b.n	8006476 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006474:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d041      	beq.n	8006506 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01c      	beq.n	80064c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800648a:	4b19      	ldr	r3, [pc, #100]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 800648c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006490:	4a17      	ldr	r2, [pc, #92]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 8006492:	f043 0301 	orr.w	r3, r3, #1
 8006496:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649a:	f7fb fd5f 	bl	8001f5c <HAL_GetTick>
 800649e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064a0:	e008      	b.n	80064b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064a2:	f7fb fd5b 	bl	8001f5c <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d901      	bls.n	80064b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80064b0:	2303      	movs	r3, #3
 80064b2:	e1e7      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064b4:	4b0e      	ldr	r3, [pc, #56]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80064b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ba:	f003 0302 	and.w	r3, r3, #2
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0ef      	beq.n	80064a2 <HAL_RCC_OscConfig+0x22e>
 80064c2:	e020      	b.n	8006506 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064c4:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80064c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064ca:	4a09      	ldr	r2, [pc, #36]	@ (80064f0 <HAL_RCC_OscConfig+0x27c>)
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d4:	f7fb fd42 	bl	8001f5c <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064da:	e00d      	b.n	80064f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064dc:	f7fb fd3e 	bl	8001f5c <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d906      	bls.n	80064f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e1ca      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
 80064ee:	bf00      	nop
 80064f0:	40021000 	.word	0x40021000
 80064f4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064f8:	4b8c      	ldr	r3, [pc, #560]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80064fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1ea      	bne.n	80064dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80a6 	beq.w	8006660 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006514:	2300      	movs	r3, #0
 8006516:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006518:	4b84      	ldr	r3, [pc, #528]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 800651a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800651c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RCC_OscConfig+0x2b4>
 8006524:	2301      	movs	r3, #1
 8006526:	e000      	b.n	800652a <HAL_RCC_OscConfig+0x2b6>
 8006528:	2300      	movs	r3, #0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00d      	beq.n	800654a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800652e:	4b7f      	ldr	r3, [pc, #508]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006532:	4a7e      	ldr	r2, [pc, #504]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006538:	6593      	str	r3, [r2, #88]	@ 0x58
 800653a:	4b7c      	ldr	r3, [pc, #496]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 800653c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800653e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006546:	2301      	movs	r3, #1
 8006548:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800654a:	4b79      	ldr	r3, [pc, #484]	@ (8006730 <HAL_RCC_OscConfig+0x4bc>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006552:	2b00      	cmp	r3, #0
 8006554:	d118      	bne.n	8006588 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006556:	4b76      	ldr	r3, [pc, #472]	@ (8006730 <HAL_RCC_OscConfig+0x4bc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a75      	ldr	r2, [pc, #468]	@ (8006730 <HAL_RCC_OscConfig+0x4bc>)
 800655c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006562:	f7fb fcfb 	bl	8001f5c <HAL_GetTick>
 8006566:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006568:	e008      	b.n	800657c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800656a:	f7fb fcf7 	bl	8001f5c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e183      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800657c:	4b6c      	ldr	r3, [pc, #432]	@ (8006730 <HAL_RCC_OscConfig+0x4bc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f0      	beq.n	800656a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d108      	bne.n	80065a2 <HAL_RCC_OscConfig+0x32e>
 8006590:	4b66      	ldr	r3, [pc, #408]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006596:	4a65      	ldr	r2, [pc, #404]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065a0:	e024      	b.n	80065ec <HAL_RCC_OscConfig+0x378>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	2b05      	cmp	r3, #5
 80065a8:	d110      	bne.n	80065cc <HAL_RCC_OscConfig+0x358>
 80065aa:	4b60      	ldr	r3, [pc, #384]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065b0:	4a5e      	ldr	r2, [pc, #376]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065b2:	f043 0304 	orr.w	r3, r3, #4
 80065b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065ba:	4b5c      	ldr	r3, [pc, #368]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c0:	4a5a      	ldr	r2, [pc, #360]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065ca:	e00f      	b.n	80065ec <HAL_RCC_OscConfig+0x378>
 80065cc:	4b57      	ldr	r3, [pc, #348]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065d2:	4a56      	ldr	r2, [pc, #344]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80065dc:	4b53      	ldr	r3, [pc, #332]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065e2:	4a52      	ldr	r2, [pc, #328]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80065e4:	f023 0304 	bic.w	r3, r3, #4
 80065e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d016      	beq.n	8006622 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f4:	f7fb fcb2 	bl	8001f5c <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065fa:	e00a      	b.n	8006612 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065fc:	f7fb fcae 	bl	8001f5c <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800660a:	4293      	cmp	r3, r2
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e138      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006612:	4b46      	ldr	r3, [pc, #280]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d0ed      	beq.n	80065fc <HAL_RCC_OscConfig+0x388>
 8006620:	e015      	b.n	800664e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006622:	f7fb fc9b 	bl	8001f5c <HAL_GetTick>
 8006626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006628:	e00a      	b.n	8006640 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662a:	f7fb fc97 	bl	8001f5c <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006638:	4293      	cmp	r3, r2
 800663a:	d901      	bls.n	8006640 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e121      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006640:	4b3a      	ldr	r3, [pc, #232]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1ed      	bne.n	800662a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800664e:	7ffb      	ldrb	r3, [r7, #31]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d105      	bne.n	8006660 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006654:	4b35      	ldr	r3, [pc, #212]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006658:	4a34      	ldr	r2, [pc, #208]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 800665a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800665e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d03c      	beq.n	80066e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d01c      	beq.n	80066ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006674:	4b2d      	ldr	r3, [pc, #180]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006676:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800667a:	4a2c      	ldr	r2, [pc, #176]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006684:	f7fb fc6a 	bl	8001f5c <HAL_GetTick>
 8006688:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800668a:	e008      	b.n	800669e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800668c:	f7fb fc66 	bl	8001f5c <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d901      	bls.n	800669e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e0f2      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800669e:	4b23      	ldr	r3, [pc, #140]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80066a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066a4:	f003 0302 	and.w	r3, r3, #2
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d0ef      	beq.n	800668c <HAL_RCC_OscConfig+0x418>
 80066ac:	e01b      	b.n	80066e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ae:	4b1f      	ldr	r3, [pc, #124]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80066b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066b4:	4a1d      	ldr	r2, [pc, #116]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80066b6:	f023 0301 	bic.w	r3, r3, #1
 80066ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066be:	f7fb fc4d 	bl	8001f5c <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066c6:	f7fb fc49 	bl	8001f5c <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e0d5      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80066d8:	4b14      	ldr	r3, [pc, #80]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80066da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1ef      	bne.n	80066c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80c9 	beq.w	8006882 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066f0:	4b0e      	ldr	r3, [pc, #56]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f003 030c 	and.w	r3, r3, #12
 80066f8:	2b0c      	cmp	r3, #12
 80066fa:	f000 8083 	beq.w	8006804 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d15e      	bne.n	80067c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006706:	4b09      	ldr	r3, [pc, #36]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a08      	ldr	r2, [pc, #32]	@ (800672c <HAL_RCC_OscConfig+0x4b8>)
 800670c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006712:	f7fb fc23 	bl	8001f5c <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006718:	e00c      	b.n	8006734 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800671a:	f7fb fc1f 	bl	8001f5c <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d905      	bls.n	8006734 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e0ab      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
 800672c:	40021000 	.word	0x40021000
 8006730:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006734:	4b55      	ldr	r3, [pc, #340]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1ec      	bne.n	800671a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006740:	4b52      	ldr	r3, [pc, #328]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	4b52      	ldr	r3, [pc, #328]	@ (8006890 <HAL_RCC_OscConfig+0x61c>)
 8006746:	4013      	ands	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	6a11      	ldr	r1, [r2, #32]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006750:	3a01      	subs	r2, #1
 8006752:	0112      	lsls	r2, r2, #4
 8006754:	4311      	orrs	r1, r2
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800675a:	0212      	lsls	r2, r2, #8
 800675c:	4311      	orrs	r1, r2
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006762:	0852      	lsrs	r2, r2, #1
 8006764:	3a01      	subs	r2, #1
 8006766:	0552      	lsls	r2, r2, #21
 8006768:	4311      	orrs	r1, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800676e:	0852      	lsrs	r2, r2, #1
 8006770:	3a01      	subs	r2, #1
 8006772:	0652      	lsls	r2, r2, #25
 8006774:	4311      	orrs	r1, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800677a:	06d2      	lsls	r2, r2, #27
 800677c:	430a      	orrs	r2, r1
 800677e:	4943      	ldr	r1, [pc, #268]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 8006780:	4313      	orrs	r3, r2
 8006782:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006784:	4b41      	ldr	r3, [pc, #260]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a40      	ldr	r2, [pc, #256]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 800678a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800678e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006790:	4b3e      	ldr	r3, [pc, #248]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	4a3d      	ldr	r2, [pc, #244]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 8006796:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800679a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fb fbde 	bl	8001f5c <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067a4:	f7fb fbda 	bl	8001f5c <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e066      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b6:	4b35      	ldr	r3, [pc, #212]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0f0      	beq.n	80067a4 <HAL_RCC_OscConfig+0x530>
 80067c2:	e05e      	b.n	8006882 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067c4:	4b31      	ldr	r3, [pc, #196]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a30      	ldr	r2, [pc, #192]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 80067ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fb fbc4 	bl	8001f5c <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067d8:	f7fb fbc0 	bl	8001f5c <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e04c      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80067ea:	4b28      	ldr	r3, [pc, #160]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80067f6:	4b25      	ldr	r3, [pc, #148]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	4924      	ldr	r1, [pc, #144]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 80067fc:	4b25      	ldr	r3, [pc, #148]	@ (8006894 <HAL_RCC_OscConfig+0x620>)
 80067fe:	4013      	ands	r3, r2
 8006800:	60cb      	str	r3, [r1, #12]
 8006802:	e03e      	b.n	8006882 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e039      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006810:	4b1e      	ldr	r3, [pc, #120]	@ (800688c <HAL_RCC_OscConfig+0x618>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f003 0203 	and.w	r2, r3, #3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	429a      	cmp	r2, r3
 8006822:	d12c      	bne.n	800687e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800682e:	3b01      	subs	r3, #1
 8006830:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006832:	429a      	cmp	r2, r3
 8006834:	d123      	bne.n	800687e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006840:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006842:	429a      	cmp	r2, r3
 8006844:	d11b      	bne.n	800687e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006850:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006852:	429a      	cmp	r2, r3
 8006854:	d113      	bne.n	800687e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006860:	085b      	lsrs	r3, r3, #1
 8006862:	3b01      	subs	r3, #1
 8006864:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006866:	429a      	cmp	r2, r3
 8006868:	d109      	bne.n	800687e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	3b01      	subs	r3, #1
 8006878:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800687a:	429a      	cmp	r2, r3
 800687c:	d001      	beq.n	8006882 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e000      	b.n	8006884 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3720      	adds	r7, #32
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40021000 	.word	0x40021000
 8006890:	019f800c 	.word	0x019f800c
 8006894:	feeefffc 	.word	0xfeeefffc

08006898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80068a2:	2300      	movs	r3, #0
 80068a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e11e      	b.n	8006aee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068b0:	4b91      	ldr	r3, [pc, #580]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 030f 	and.w	r3, r3, #15
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d910      	bls.n	80068e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068be:	4b8e      	ldr	r3, [pc, #568]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f023 020f 	bic.w	r2, r3, #15
 80068c6:	498c      	ldr	r1, [pc, #560]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b8a      	ldr	r3, [pc, #552]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d001      	beq.n	80068e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e106      	b.n	8006aee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d073      	beq.n	80069d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d129      	bne.n	8006948 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068f4:	4b81      	ldr	r3, [pc, #516]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0f4      	b.n	8006aee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006904:	f000 f99e 	bl	8006c44 <RCC_GetSysClockFreqFromPLLSource>
 8006908:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4a7c      	ldr	r2, [pc, #496]	@ (8006b00 <HAL_RCC_ClockConfig+0x268>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d93f      	bls.n	8006992 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006912:	4b7a      	ldr	r3, [pc, #488]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d009      	beq.n	8006932 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006926:	2b00      	cmp	r3, #0
 8006928:	d033      	beq.n	8006992 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800692e:	2b00      	cmp	r3, #0
 8006930:	d12f      	bne.n	8006992 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006932:	4b72      	ldr	r3, [pc, #456]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800693a:	4a70      	ldr	r2, [pc, #448]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 800693c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006940:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006942:	2380      	movs	r3, #128	@ 0x80
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e024      	b.n	8006992 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b02      	cmp	r3, #2
 800694e:	d107      	bne.n	8006960 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006950:	4b6a      	ldr	r3, [pc, #424]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d109      	bne.n	8006970 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e0c6      	b.n	8006aee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006960:	4b66      	ldr	r3, [pc, #408]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0be      	b.n	8006aee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006970:	f000 f8ce 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 8006974:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	4a61      	ldr	r2, [pc, #388]	@ (8006b00 <HAL_RCC_ClockConfig+0x268>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d909      	bls.n	8006992 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800697e:	4b5f      	ldr	r3, [pc, #380]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006986:	4a5d      	ldr	r2, [pc, #372]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800698c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800698e:	2380      	movs	r3, #128	@ 0x80
 8006990:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006992:	4b5a      	ldr	r3, [pc, #360]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f023 0203 	bic.w	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	4957      	ldr	r1, [pc, #348]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069a4:	f7fb fada 	bl	8001f5c <HAL_GetTick>
 80069a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069aa:	e00a      	b.n	80069c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069ac:	f7fb fad6 	bl	8001f5c <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1ad3      	subs	r3, r2, r3
 80069b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e095      	b.n	8006aee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069c2:	4b4e      	ldr	r3, [pc, #312]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 020c 	and.w	r2, r3, #12
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d1eb      	bne.n	80069ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d023      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0304 	and.w	r3, r3, #4
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069ec:	4b43      	ldr	r3, [pc, #268]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	4a42      	ldr	r2, [pc, #264]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 80069f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80069f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0308 	and.w	r3, r3, #8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006a04:	4b3d      	ldr	r3, [pc, #244]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006a0c:	4a3b      	ldr	r2, [pc, #236]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a0e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006a12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a14:	4b39      	ldr	r3, [pc, #228]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	4936      	ldr	r1, [pc, #216]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b80      	cmp	r3, #128	@ 0x80
 8006a2c:	d105      	bne.n	8006a3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006a2e:	4b33      	ldr	r3, [pc, #204]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	4a32      	ldr	r2, [pc, #200]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a3a:	4b2f      	ldr	r3, [pc, #188]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 030f 	and.w	r3, r3, #15
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d21d      	bcs.n	8006a84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a48:	4b2b      	ldr	r3, [pc, #172]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f023 020f 	bic.w	r2, r3, #15
 8006a50:	4929      	ldr	r1, [pc, #164]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006a58:	f7fb fa80 	bl	8001f5c <HAL_GetTick>
 8006a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5e:	e00a      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a60:	f7fb fa7c 	bl	8001f5c <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d901      	bls.n	8006a76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a72:	2303      	movs	r3, #3
 8006a74:	e03b      	b.n	8006aee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a76:	4b20      	ldr	r3, [pc, #128]	@ (8006af8 <HAL_RCC_ClockConfig+0x260>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d1ed      	bne.n	8006a60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d008      	beq.n	8006aa2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a90:	4b1a      	ldr	r3, [pc, #104]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	4917      	ldr	r1, [pc, #92]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0308 	and.w	r3, r3, #8
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d009      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aae:	4b13      	ldr	r3, [pc, #76]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	490f      	ldr	r1, [pc, #60]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ac2:	f000 f825 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8006afc <HAL_RCC_ClockConfig+0x264>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	091b      	lsrs	r3, r3, #4
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	490c      	ldr	r1, [pc, #48]	@ (8006b04 <HAL_RCC_ClockConfig+0x26c>)
 8006ad4:	5ccb      	ldrb	r3, [r1, r3]
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	fa22 f303 	lsr.w	r3, r2, r3
 8006ade:	4a0a      	ldr	r2, [pc, #40]	@ (8006b08 <HAL_RCC_ClockConfig+0x270>)
 8006ae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8006b0c <HAL_RCC_ClockConfig+0x274>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fb f9ec 	bl	8001ec4 <HAL_InitTick>
 8006aec:	4603      	mov	r3, r0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3718      	adds	r7, #24
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}
 8006af6:	bf00      	nop
 8006af8:	40022000 	.word	0x40022000
 8006afc:	40021000 	.word	0x40021000
 8006b00:	04c4b400 	.word	0x04c4b400
 8006b04:	0800de30 	.word	0x0800de30
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	20000004 	.word	0x20000004

08006b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006b16:	4b2c      	ldr	r3, [pc, #176]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f003 030c 	and.w	r3, r3, #12
 8006b1e:	2b04      	cmp	r3, #4
 8006b20:	d102      	bne.n	8006b28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006b22:	4b2a      	ldr	r3, [pc, #168]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	e047      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006b28:	4b27      	ldr	r3, [pc, #156]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f003 030c 	and.w	r3, r3, #12
 8006b30:	2b08      	cmp	r3, #8
 8006b32:	d102      	bne.n	8006b3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006b34:	4b26      	ldr	r3, [pc, #152]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b36:	613b      	str	r3, [r7, #16]
 8006b38:	e03e      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006b3a:	4b23      	ldr	r3, [pc, #140]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b0c      	cmp	r3, #12
 8006b44:	d136      	bne.n	8006bb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006b46:	4b20      	ldr	r3, [pc, #128]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b50:	4b1d      	ldr	r3, [pc, #116]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	091b      	lsrs	r3, r3, #4
 8006b56:	f003 030f 	and.w	r3, r3, #15
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d10c      	bne.n	8006b7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b64:	4a1a      	ldr	r2, [pc, #104]	@ (8006bd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b6c:	4a16      	ldr	r2, [pc, #88]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b6e:	68d2      	ldr	r2, [r2, #12]
 8006b70:	0a12      	lsrs	r2, r2, #8
 8006b72:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	617b      	str	r3, [r7, #20]
      break;
 8006b7c:	e00c      	b.n	8006b98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b7e:	4a13      	ldr	r2, [pc, #76]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b86:	4a10      	ldr	r2, [pc, #64]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b88:	68d2      	ldr	r2, [r2, #12]
 8006b8a:	0a12      	lsrs	r2, r2, #8
 8006b8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b90:	fb02 f303 	mul.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]
      break;
 8006b96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b98:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	0e5b      	lsrs	r3, r3, #25
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb0:	613b      	str	r3, [r7, #16]
 8006bb2:	e001      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006bb8:	693b      	ldr	r3, [r7, #16]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	40021000 	.word	0x40021000
 8006bcc:	00f42400 	.word	0x00f42400
 8006bd0:	007a1200 	.word	0x007a1200

08006bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd8:	4b03      	ldr	r3, [pc, #12]	@ (8006be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006bda:	681b      	ldr	r3, [r3, #0]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	20000000 	.word	0x20000000

08006bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006bf0:	f7ff fff0 	bl	8006bd4 <HAL_RCC_GetHCLKFreq>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	4b06      	ldr	r3, [pc, #24]	@ (8006c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	0a1b      	lsrs	r3, r3, #8
 8006bfc:	f003 0307 	and.w	r3, r3, #7
 8006c00:	4904      	ldr	r1, [pc, #16]	@ (8006c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c02:	5ccb      	ldrb	r3, [r1, r3]
 8006c04:	f003 031f 	and.w	r3, r3, #31
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40021000 	.word	0x40021000
 8006c14:	0800de40 	.word	0x0800de40

08006c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006c1c:	f7ff ffda 	bl	8006bd4 <HAL_RCC_GetHCLKFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b06      	ldr	r3, [pc, #24]	@ (8006c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	0adb      	lsrs	r3, r3, #11
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4904      	ldr	r1, [pc, #16]	@ (8006c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	f003 031f 	and.w	r3, r3, #31
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	0800de40 	.word	0x0800de40

08006c44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8006cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006c54:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	091b      	lsrs	r3, r3, #4
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	3301      	adds	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	2b03      	cmp	r3, #3
 8006c66:	d10c      	bne.n	8006c82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c68:	4a17      	ldr	r2, [pc, #92]	@ (8006cc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	4a14      	ldr	r2, [pc, #80]	@ (8006cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c72:	68d2      	ldr	r2, [r2, #12]
 8006c74:	0a12      	lsrs	r2, r2, #8
 8006c76:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
 8006c7e:	617b      	str	r3, [r7, #20]
    break;
 8006c80:	e00c      	b.n	8006c9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c82:	4a12      	ldr	r2, [pc, #72]	@ (8006ccc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8006cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c8c:	68d2      	ldr	r2, [r2, #12]
 8006c8e:	0a12      	lsrs	r2, r2, #8
 8006c90:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c94:	fb02 f303 	mul.w	r3, r2, r3
 8006c98:	617b      	str	r3, [r7, #20]
    break;
 8006c9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c9c:	4b09      	ldr	r3, [pc, #36]	@ (8006cc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	0e5b      	lsrs	r3, r3, #25
 8006ca2:	f003 0303 	and.w	r3, r3, #3
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006cb6:	687b      	ldr	r3, [r7, #4]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	007a1200 	.word	0x007a1200
 8006ccc:	00f42400 	.word	0x00f42400

08006cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cd8:	2300      	movs	r3, #0
 8006cda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cdc:	2300      	movs	r3, #0
 8006cde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8098 	beq.w	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cf2:	4b43      	ldr	r3, [pc, #268]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cfe:	4b40      	ldr	r3, [pc, #256]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d02:	4a3f      	ldr	r2, [pc, #252]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d0a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d16:	2301      	movs	r3, #1
 8006d18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d1a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a39      	ldr	r2, [pc, #228]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d26:	f7fb f919 	bl	8001f5c <HAL_GetTick>
 8006d2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d2c:	e009      	b.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d2e:	f7fb f915 	bl	8001f5c <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d902      	bls.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	74fb      	strb	r3, [r7, #19]
        break;
 8006d40:	e005      	b.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d42:	4b30      	ldr	r3, [pc, #192]	@ (8006e04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0ef      	beq.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006d4e:	7cfb      	ldrb	r3, [r7, #19]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d159      	bne.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006d54:	4b2a      	ldr	r3, [pc, #168]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01e      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d019      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d70:	4b23      	ldr	r3, [pc, #140]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d7c:	4b20      	ldr	r3, [pc, #128]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d82:	4a1f      	ldr	r2, [pc, #124]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d92:	4a1b      	ldr	r2, [pc, #108]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d9c:	4a18      	ldr	r2, [pc, #96]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d016      	beq.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dae:	f7fb f8d5 	bl	8001f5c <HAL_GetTick>
 8006db2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006db4:	e00b      	b.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fb f8d1 	bl	8001f5c <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d902      	bls.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	74fb      	strb	r3, [r7, #19]
            break;
 8006dcc:	e006      	b.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dce:	4b0c      	ldr	r3, [pc, #48]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d0ec      	beq.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ddc:	7cfb      	ldrb	r3, [r7, #19]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10b      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006de2:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df0:	4903      	ldr	r1, [pc, #12]	@ (8006e00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006df8:	e008      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dfa:	7cfb      	ldrb	r3, [r7, #19]
 8006dfc:	74bb      	strb	r3, [r7, #18]
 8006dfe:	e005      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006e00:	40021000 	.word	0x40021000
 8006e04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e08:	7cfb      	ldrb	r3, [r7, #19]
 8006e0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e0c:	7c7b      	ldrb	r3, [r7, #17]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d105      	bne.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e12:	4ba6      	ldr	r3, [pc, #664]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e16:	4aa5      	ldr	r2, [pc, #660]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e18:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e1c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00a      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006e2a:	4ba0      	ldr	r3, [pc, #640]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e30:	f023 0203 	bic.w	r2, r3, #3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	499c      	ldr	r1, [pc, #624]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00a      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e4c:	4b97      	ldr	r3, [pc, #604]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e52:	f023 020c 	bic.w	r2, r3, #12
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	4994      	ldr	r1, [pc, #592]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0304 	and.w	r3, r3, #4
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00a      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e6e:	4b8f      	ldr	r3, [pc, #572]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e74:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	498b      	ldr	r1, [pc, #556]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0308 	and.w	r3, r3, #8
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00a      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e90:	4b86      	ldr	r3, [pc, #536]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	4983      	ldr	r1, [pc, #524]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	497a      	ldr	r1, [pc, #488]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00a      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ed4:	4b75      	ldr	r3, [pc, #468]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eda:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	4972      	ldr	r1, [pc, #456]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00a      	beq.n	8006f0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ef6:	4b6d      	ldr	r3, [pc, #436]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006efc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	4969      	ldr	r1, [pc, #420]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f06:	4313      	orrs	r3, r2
 8006f08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d00a      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006f18:	4b64      	ldr	r3, [pc, #400]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f1e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	4961      	ldr	r1, [pc, #388]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	4958      	ldr	r1, [pc, #352]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d015      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f5c:	4b53      	ldr	r3, [pc, #332]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	4950      	ldr	r1, [pc, #320]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f7a:	d105      	bne.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	4a4a      	ldr	r2, [pc, #296]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f86:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d015      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f94:	4b45      	ldr	r3, [pc, #276]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	4942      	ldr	r1, [pc, #264]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006fb2:	d105      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb4:	4b3d      	ldr	r3, [pc, #244]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	4a3c      	ldr	r2, [pc, #240]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fbe:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d015      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006fcc:	4b37      	ldr	r3, [pc, #220]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fda:	4934      	ldr	r1, [pc, #208]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fe6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fea:	d105      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fec:	4b2f      	ldr	r3, [pc, #188]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ff6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d015      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007004:	4b29      	ldr	r3, [pc, #164]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007012:	4926      	ldr	r1, [pc, #152]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007014:	4313      	orrs	r3, r2
 8007016:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800701e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007022:	d105      	bne.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007024:	4b21      	ldr	r3, [pc, #132]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	4a20      	ldr	r2, [pc, #128]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800702a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800702e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d015      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800703c:	4b1b      	ldr	r3, [pc, #108]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007042:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800704a:	4918      	ldr	r1, [pc, #96]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800705a:	d105      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800705c:	4b13      	ldr	r3, [pc, #76]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	4a12      	ldr	r2, [pc, #72]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007062:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007066:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d015      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007074:	4b0d      	ldr	r3, [pc, #52]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800707a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007082:	490a      	ldr	r1, [pc, #40]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800708e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007092:	d105      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007094:	4b05      	ldr	r3, [pc, #20]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	4a04      	ldr	r2, [pc, #16]	@ (80070ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800709a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800709e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80070a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3718      	adds	r7, #24
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	40021000 	.word	0x40021000

080070b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d070      	beq.n	80071a4 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa fc2e 	bl	8001938 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2202      	movs	r2, #2
 80070e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b10      	cmp	r3, #16
 80070f0:	d04f      	beq.n	8007192 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	22ca      	movs	r2, #202	@ 0xca
 80070f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2253      	movs	r2, #83	@ 0x53
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f878 	bl	80071f8 <RTC_EnterInitMode>
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800710c:	7bfb      	ldrb	r3, [r7, #15]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d126      	bne.n	8007160 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6812      	ldr	r2, [r2, #0]
 800711c:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8007120:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007124:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6999      	ldr	r1, [r3, #24]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	431a      	orrs	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	68d9      	ldr	r1, [r3, #12]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	041a      	lsls	r2, r3, #16
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	430a      	orrs	r2, r1
 8007154:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f884 	bl	8007264 <RTC_ExitInitMode>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d110      	bne.n	8007188 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1a      	ldr	r2, [r3, #32]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	431a      	orrs	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	431a      	orrs	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	22ff      	movs	r2, #255	@ 0xff
 800718e:	625a      	str	r2, [r3, #36]	@ 0x24
 8007190:	e001      	b.n	8007196 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 80071a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3710      	adds	r7, #16
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
	...

080071b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a0d      	ldr	r2, [pc, #52]	@ (80071f4 <HAL_RTC_WaitForSynchro+0x44>)
 80071be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80071c0:	f7fa fecc 	bl	8001f5c <HAL_GetTick>
 80071c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80071c6:	e009      	b.n	80071dc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071c8:	f7fa fec8 	bl	8001f5c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071d6:	d901      	bls.n	80071dc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e007      	b.n	80071ec <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0320 	and.w	r3, r3, #32
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0ee      	beq.n	80071c8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	0001005f 	.word	0x0001005f

080071f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800720e:	2b00      	cmp	r3, #0
 8007210:	d123      	bne.n	800725a <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007220:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007222:	f7fa fe9b 	bl	8001f5c <HAL_GetTick>
 8007226:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007228:	e00d      	b.n	8007246 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800722a:	f7fa fe97 	bl	8001f5c <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007238:	d905      	bls.n	8007246 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2203      	movs	r2, #3
 8007242:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <RTC_EnterInitMode+0x62>
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b03      	cmp	r3, #3
 8007258:	d1e7      	bne.n	800722a <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 800725a:	7bfb      	ldrb	r3, [r7, #15]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800727e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f003 0320 	and.w	r3, r3, #32
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10c      	bne.n	80072a8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff ff8e 	bl	80071b0 <HAL_RTC_WaitForSynchro>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d022      	beq.n	80072e0 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2203      	movs	r2, #3
 800729e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	73fb      	strb	r3, [r7, #15]
 80072a6:	e01b      	b.n	80072e0 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 0220 	bic.w	r2, r2, #32
 80072b6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7ff ff79 	bl	80071b0 <HAL_RTC_WaitForSynchro>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2203      	movs	r2, #3
 80072c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699a      	ldr	r2, [r3, #24]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f042 0220 	orr.w	r2, r2, #32
 80072de:	619a      	str	r2, [r3, #24]
  }

  return status;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8007300:	2302      	movs	r3, #2
 8007302:	e062      	b.n	80073ca <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2202      	movs	r2, #2
 8007310:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	22ca      	movs	r2, #202	@ 0xca
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2253      	movs	r2, #83	@ 0x53
 8007322:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699a      	ldr	r2, [r3, #24]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007332:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d120      	bne.n	8007384 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 8007342:	f7fa fe0b 	bl	8001f5c <HAL_GetTick>
 8007346:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8007348:	e015      	b.n	8007376 <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800734a:	f7fa fe07 	bl	8001f5c <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007358:	d90d      	bls.n	8007376 <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	22ff      	movs	r2, #255	@ 0xff
 8007360:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2203      	movs	r2, #3
 8007366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e029      	b.n	80073ca <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0e2      	beq.n	800734a <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f023 0107 	bic.w	r1, r3, #7
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	430a      	orrs	r2, r1
 8007396:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073ae:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	22ff      	movs	r2, #255	@ 0xff
 80073b6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e09d      	b.n	8007520 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073f4:	d009      	beq.n	800740a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	61da      	str	r2, [r3, #28]
 80073fc:	e005      	b.n	800740a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007416:	b2db      	uxtb	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d106      	bne.n	800742a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7fa fb01 	bl	8001a2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2202      	movs	r2, #2
 800742e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007440:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800744a:	d902      	bls.n	8007452 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e002      	b.n	8007458 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007452:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007456:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007460:	d007      	beq.n	8007472 <HAL_SPI_Init+0xa0>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800746a:	d002      	beq.n	8007472 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	69db      	ldr	r3, [r3, #28]
 80074a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074b4:	ea42 0103 	orr.w	r1, r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	0c1b      	lsrs	r3, r3, #16
 80074ce:	f003 0204 	and.w	r2, r3, #4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	f003 0310 	and.w	r3, r3, #16
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e0:	f003 0308 	and.w	r3, r3, #8
 80074e4:	431a      	orrs	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80074ee:	ea42 0103 	orr.w	r1, r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800750e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b088      	sub	sp, #32
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	603b      	str	r3, [r7, #0]
 8007534:	4613      	mov	r3, r2
 8007536:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_SPI_Transmit+0x22>
 8007546:	2302      	movs	r3, #2
 8007548:	e15f      	b.n	800780a <HAL_SPI_Transmit+0x2e2>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007552:	f7fa fd03 	bl	8001f5c <HAL_GetTick>
 8007556:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007558:	88fb      	ldrh	r3, [r7, #6]
 800755a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	d002      	beq.n	800756e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007568:	2302      	movs	r3, #2
 800756a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800756c:	e148      	b.n	8007800 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d002      	beq.n	800757a <HAL_SPI_Transmit+0x52>
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d102      	bne.n	8007580 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800757e:	e13f      	b.n	8007800 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2203      	movs	r2, #3
 8007584:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	88fa      	ldrh	r2, [r7, #6]
 8007598:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	88fa      	ldrh	r2, [r7, #6]
 800759e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2200      	movs	r2, #0
 80075ba:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075ca:	d10f      	bne.n	80075ec <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	681a      	ldr	r2, [r3, #0]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f6:	2b40      	cmp	r3, #64	@ 0x40
 80075f8:	d007      	beq.n	800760a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007608:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007612:	d94f      	bls.n	80076b4 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_Transmit+0xfa>
 800761c:	8afb      	ldrh	r3, [r7, #22]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d142      	bne.n	80076a8 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007626:	881a      	ldrh	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007632:	1c9a      	adds	r2, r3, #2
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800763c:	b29b      	uxth	r3, r3
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007646:	e02f      	b.n	80076a8 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b02      	cmp	r3, #2
 8007654:	d112      	bne.n	800767c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007666:	1c9a      	adds	r2, r3, #2
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007670:	b29b      	uxth	r3, r3
 8007672:	3b01      	subs	r3, #1
 8007674:	b29a      	uxth	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800767a:	e015      	b.n	80076a8 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800767c:	f7fa fc6e 	bl	8001f5c <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	429a      	cmp	r2, r3
 800768a:	d803      	bhi.n	8007694 <HAL_SPI_Transmit+0x16c>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007692:	d102      	bne.n	800769a <HAL_SPI_Transmit+0x172>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d106      	bne.n	80076a8 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80076a6:	e0ab      	b.n	8007800 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1ca      	bne.n	8007648 <HAL_SPI_Transmit+0x120>
 80076b2:	e080      	b.n	80077b6 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_SPI_Transmit+0x19a>
 80076bc:	8afb      	ldrh	r3, [r7, #22]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d174      	bne.n	80077ac <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d912      	bls.n	80076f2 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	881a      	ldrh	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076dc:	1c9a      	adds	r2, r3, #2
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	3b02      	subs	r3, #2
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80076f0:	e05c      	b.n	80077ac <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	330c      	adds	r3, #12
 80076fc:	7812      	ldrb	r2, [r2, #0]
 80076fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007704:	1c5a      	adds	r2, r3, #1
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	3b01      	subs	r3, #1
 8007712:	b29a      	uxth	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007718:	e048      	b.n	80077ac <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 0302 	and.w	r3, r3, #2
 8007724:	2b02      	cmp	r3, #2
 8007726:	d12b      	bne.n	8007780 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b01      	cmp	r3, #1
 8007730:	d912      	bls.n	8007758 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b02      	subs	r3, #2
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007756:	e029      	b.n	80077ac <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	330c      	adds	r3, #12
 8007762:	7812      	ldrb	r2, [r2, #0]
 8007764:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776a:	1c5a      	adds	r2, r3, #1
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007774:	b29b      	uxth	r3, r3
 8007776:	3b01      	subs	r3, #1
 8007778:	b29a      	uxth	r2, r3
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800777e:	e015      	b.n	80077ac <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007780:	f7fa fbec 	bl	8001f5c <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	683a      	ldr	r2, [r7, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d803      	bhi.n	8007798 <HAL_SPI_Transmit+0x270>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d102      	bne.n	800779e <HAL_SPI_Transmit+0x276>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d106      	bne.n	80077ac <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80077aa:	e029      	b.n	8007800 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1b1      	bne.n	800771a <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077b6:	69ba      	ldr	r2, [r7, #24]
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f000 f948 	bl	8007a50 <SPI_EndRxTxTransaction>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2220      	movs	r2, #32
 80077ca:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10a      	bne.n	80077ea <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	613b      	str	r3, [r7, #16]
 80077e8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d002      	beq.n	80077f8 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	77fb      	strb	r3, [r7, #31]
 80077f6:	e003      	b.n	8007800 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007808:	7ffb      	ldrb	r3, [r7, #31]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	603b      	str	r3, [r7, #0]
 8007820:	4613      	mov	r3, r2
 8007822:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007824:	f7fa fb9a 	bl	8001f5c <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782c:	1a9b      	subs	r3, r3, r2
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	4413      	add	r3, r2
 8007832:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007834:	f7fa fb92 	bl	8001f5c <HAL_GetTick>
 8007838:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800783a:	4b39      	ldr	r3, [pc, #228]	@ (8007920 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	015b      	lsls	r3, r3, #5
 8007840:	0d1b      	lsrs	r3, r3, #20
 8007842:	69fa      	ldr	r2, [r7, #28]
 8007844:	fb02 f303 	mul.w	r3, r2, r3
 8007848:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800784a:	e054      	b.n	80078f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007852:	d050      	beq.n	80078f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007854:	f7fa fb82 	bl	8001f5c <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	69fa      	ldr	r2, [r7, #28]
 8007860:	429a      	cmp	r2, r3
 8007862:	d902      	bls.n	800786a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d13d      	bne.n	80078e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007878:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007882:	d111      	bne.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800788c:	d004      	beq.n	8007898 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007896:	d107      	bne.n	80078a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078b0:	d10f      	bne.n	80078d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078c0:	601a      	str	r2, [r3, #0]
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e017      	b.n	8007916 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4013      	ands	r3, r2
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	429a      	cmp	r2, r3
 8007904:	bf0c      	ite	eq
 8007906:	2301      	moveq	r3, #1
 8007908:	2300      	movne	r3, #0
 800790a:	b2db      	uxtb	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	429a      	cmp	r2, r3
 8007912:	d19b      	bne.n	800784c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20000000 	.word	0x20000000

08007924 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08a      	sub	sp, #40	@ 0x28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]
 8007930:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007936:	f7fa fb11 	bl	8001f5c <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	4413      	add	r3, r2
 8007944:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007946:	f7fa fb09 	bl	8001f5c <HAL_GetTick>
 800794a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	330c      	adds	r3, #12
 8007952:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007954:	4b3d      	ldr	r3, [pc, #244]	@ (8007a4c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	00da      	lsls	r2, r3, #3
 8007960:	1ad3      	subs	r3, r2, r3
 8007962:	0d1b      	lsrs	r3, r3, #20
 8007964:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800796c:	e060      	b.n	8007a30 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007974:	d107      	bne.n	8007986 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d104      	bne.n	8007986 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007984:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800798c:	d050      	beq.n	8007a30 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800798e:	f7fa fae5 	bl	8001f5c <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800799a:	429a      	cmp	r2, r3
 800799c:	d902      	bls.n	80079a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d13d      	bne.n	8007a20 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80079b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80079bc:	d111      	bne.n	80079e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80079c6:	d004      	beq.n	80079d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d0:	d107      	bne.n	80079e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80079e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079ea:	d10f      	bne.n	8007a0c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079fa:	601a      	str	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e010      	b.n	8007a42 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	4013      	ands	r3, r2
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d196      	bne.n	800796e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3728      	adds	r7, #40	@ 0x28
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000000 	.word	0x20000000

08007a50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f7ff ff5b 	bl	8007924 <SPI_WaitFifoStateUntilTimeout>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a78:	f043 0220 	orr.w	r2, r3, #32
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e027      	b.n	8007ad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2180      	movs	r1, #128	@ 0x80
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff fec0 	bl	8007814 <SPI_WaitFlagStateUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a9e:	f043 0220 	orr.w	r2, r3, #32
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e014      	b.n	8007ad4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff ff34 	bl	8007924 <SPI_WaitFifoStateUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d007      	beq.n	8007ad2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac6:	f043 0220 	orr.w	r2, r3, #32
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e000      	b.n	8007ad4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3710      	adds	r7, #16
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e042      	b.n	8007b74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7fa f943 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2224      	movs	r2, #36	@ 0x24
 8007b0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0201 	bic.w	r2, r2, #1
 8007b1c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 faf4 	bl	8008114 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f825 	bl	8007b7c <UART_SetConfig>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e01b      	b.n	8007b74 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689a      	ldr	r2, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fb73 	bl	8008258 <UART_CheckIdleState>
 8007b72:	4603      	mov	r3, r0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b80:	b08c      	sub	sp, #48	@ 0x30
 8007b82:	af00      	add	r7, sp, #0
 8007b84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	431a      	orrs	r2, r3
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	69db      	ldr	r3, [r3, #28]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4bab      	ldr	r3, [pc, #684]	@ (8007e58 <UART_SetConfig+0x2dc>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	6812      	ldr	r2, [r2, #0]
 8007bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bb4:	430b      	orrs	r3, r1
 8007bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4aa0      	ldr	r2, [pc, #640]	@ (8007e5c <UART_SetConfig+0x2e0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007be4:	4313      	orrs	r3, r2
 8007be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007bf2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c06:	f023 010f 	bic.w	r1, r3, #15
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a91      	ldr	r2, [pc, #580]	@ (8007e60 <UART_SetConfig+0x2e4>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d125      	bne.n	8007c6c <UART_SetConfig+0xf0>
 8007c20:	4b90      	ldr	r3, [pc, #576]	@ (8007e64 <UART_SetConfig+0x2e8>)
 8007c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d81a      	bhi.n	8007c64 <UART_SetConfig+0xe8>
 8007c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c34 <UART_SetConfig+0xb8>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c55 	.word	0x08007c55
 8007c3c:	08007c4d 	.word	0x08007c4d
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	2301      	movs	r3, #1
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	e0d6      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007c4c:	2302      	movs	r3, #2
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c52:	e0d2      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007c54:	2304      	movs	r3, #4
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5a:	e0ce      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007c5c:	2308      	movs	r3, #8
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c62:	e0ca      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007c64:	2310      	movs	r3, #16
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6a:	e0c6      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a7d      	ldr	r2, [pc, #500]	@ (8007e68 <UART_SetConfig+0x2ec>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d138      	bne.n	8007ce8 <UART_SetConfig+0x16c>
 8007c76:	4b7b      	ldr	r3, [pc, #492]	@ (8007e64 <UART_SetConfig+0x2e8>)
 8007c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c7c:	f003 030c 	and.w	r3, r3, #12
 8007c80:	2b0c      	cmp	r3, #12
 8007c82:	d82d      	bhi.n	8007ce0 <UART_SetConfig+0x164>
 8007c84:	a201      	add	r2, pc, #4	@ (adr r2, 8007c8c <UART_SetConfig+0x110>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007cc1 	.word	0x08007cc1
 8007c90:	08007ce1 	.word	0x08007ce1
 8007c94:	08007ce1 	.word	0x08007ce1
 8007c98:	08007ce1 	.word	0x08007ce1
 8007c9c:	08007cd1 	.word	0x08007cd1
 8007ca0:	08007ce1 	.word	0x08007ce1
 8007ca4:	08007ce1 	.word	0x08007ce1
 8007ca8:	08007ce1 	.word	0x08007ce1
 8007cac:	08007cc9 	.word	0x08007cc9
 8007cb0:	08007ce1 	.word	0x08007ce1
 8007cb4:	08007ce1 	.word	0x08007ce1
 8007cb8:	08007ce1 	.word	0x08007ce1
 8007cbc:	08007cd9 	.word	0x08007cd9
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc6:	e098      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cce:	e094      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007cd0:	2304      	movs	r3, #4
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd6:	e090      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007cd8:	2308      	movs	r3, #8
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cde:	e08c      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007ce0:	2310      	movs	r3, #16
 8007ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ce6:	e088      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a5f      	ldr	r2, [pc, #380]	@ (8007e6c <UART_SetConfig+0x2f0>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d125      	bne.n	8007d3e <UART_SetConfig+0x1c2>
 8007cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8007e64 <UART_SetConfig+0x2e8>)
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007cfc:	2b30      	cmp	r3, #48	@ 0x30
 8007cfe:	d016      	beq.n	8007d2e <UART_SetConfig+0x1b2>
 8007d00:	2b30      	cmp	r3, #48	@ 0x30
 8007d02:	d818      	bhi.n	8007d36 <UART_SetConfig+0x1ba>
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d00a      	beq.n	8007d1e <UART_SetConfig+0x1a2>
 8007d08:	2b20      	cmp	r3, #32
 8007d0a:	d814      	bhi.n	8007d36 <UART_SetConfig+0x1ba>
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <UART_SetConfig+0x19a>
 8007d10:	2b10      	cmp	r3, #16
 8007d12:	d008      	beq.n	8007d26 <UART_SetConfig+0x1aa>
 8007d14:	e00f      	b.n	8007d36 <UART_SetConfig+0x1ba>
 8007d16:	2300      	movs	r3, #0
 8007d18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d1c:	e06d      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d1e:	2302      	movs	r3, #2
 8007d20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d24:	e069      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d26:	2304      	movs	r3, #4
 8007d28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d2c:	e065      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d2e:	2308      	movs	r3, #8
 8007d30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d34:	e061      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d36:	2310      	movs	r3, #16
 8007d38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d3c:	e05d      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a4b      	ldr	r2, [pc, #300]	@ (8007e70 <UART_SetConfig+0x2f4>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d125      	bne.n	8007d94 <UART_SetConfig+0x218>
 8007d48:	4b46      	ldr	r3, [pc, #280]	@ (8007e64 <UART_SetConfig+0x2e8>)
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007d52:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d54:	d016      	beq.n	8007d84 <UART_SetConfig+0x208>
 8007d56:	2bc0      	cmp	r3, #192	@ 0xc0
 8007d58:	d818      	bhi.n	8007d8c <UART_SetConfig+0x210>
 8007d5a:	2b80      	cmp	r3, #128	@ 0x80
 8007d5c:	d00a      	beq.n	8007d74 <UART_SetConfig+0x1f8>
 8007d5e:	2b80      	cmp	r3, #128	@ 0x80
 8007d60:	d814      	bhi.n	8007d8c <UART_SetConfig+0x210>
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <UART_SetConfig+0x1f0>
 8007d66:	2b40      	cmp	r3, #64	@ 0x40
 8007d68:	d008      	beq.n	8007d7c <UART_SetConfig+0x200>
 8007d6a:	e00f      	b.n	8007d8c <UART_SetConfig+0x210>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d72:	e042      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d74:	2302      	movs	r3, #2
 8007d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d7a:	e03e      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d7c:	2304      	movs	r3, #4
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d82:	e03a      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d84:	2308      	movs	r3, #8
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d8a:	e036      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d8c:	2310      	movs	r3, #16
 8007d8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d92:	e032      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a30      	ldr	r2, [pc, #192]	@ (8007e5c <UART_SetConfig+0x2e0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d12a      	bne.n	8007df4 <UART_SetConfig+0x278>
 8007d9e:	4b31      	ldr	r3, [pc, #196]	@ (8007e64 <UART_SetConfig+0x2e8>)
 8007da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007da8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007dac:	d01a      	beq.n	8007de4 <UART_SetConfig+0x268>
 8007dae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007db2:	d81b      	bhi.n	8007dec <UART_SetConfig+0x270>
 8007db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007db8:	d00c      	beq.n	8007dd4 <UART_SetConfig+0x258>
 8007dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007dbe:	d815      	bhi.n	8007dec <UART_SetConfig+0x270>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <UART_SetConfig+0x250>
 8007dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc8:	d008      	beq.n	8007ddc <UART_SetConfig+0x260>
 8007dca:	e00f      	b.n	8007dec <UART_SetConfig+0x270>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dd2:	e012      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dda:	e00e      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007ddc:	2304      	movs	r3, #4
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007de2:	e00a      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007de4:	2308      	movs	r3, #8
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dea:	e006      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007dec:	2310      	movs	r3, #16
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007df2:	e002      	b.n	8007dfa <UART_SetConfig+0x27e>
 8007df4:	2310      	movs	r3, #16
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a17      	ldr	r2, [pc, #92]	@ (8007e5c <UART_SetConfig+0x2e0>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	f040 80a8 	bne.w	8007f56 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	2b08      	cmp	r3, #8
 8007e0c:	d834      	bhi.n	8007e78 <UART_SetConfig+0x2fc>
 8007e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e14 <UART_SetConfig+0x298>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e39 	.word	0x08007e39
 8007e18:	08007e79 	.word	0x08007e79
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e79 	.word	0x08007e79
 8007e24:	08007e47 	.word	0x08007e47
 8007e28:	08007e79 	.word	0x08007e79
 8007e2c:	08007e79 	.word	0x08007e79
 8007e30:	08007e79 	.word	0x08007e79
 8007e34:	08007e4f 	.word	0x08007e4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e38:	f7fe fed8 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e3e:	e021      	b.n	8007e84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e40:	4b0c      	ldr	r3, [pc, #48]	@ (8007e74 <UART_SetConfig+0x2f8>)
 8007e42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e44:	e01e      	b.n	8007e84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e46:	f7fe fe63 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 8007e4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e4c:	e01a      	b.n	8007e84 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e54:	e016      	b.n	8007e84 <UART_SetConfig+0x308>
 8007e56:	bf00      	nop
 8007e58:	cfff69f3 	.word	0xcfff69f3
 8007e5c:	40008000 	.word	0x40008000
 8007e60:	40013800 	.word	0x40013800
 8007e64:	40021000 	.word	0x40021000
 8007e68:	40004400 	.word	0x40004400
 8007e6c:	40004800 	.word	0x40004800
 8007e70:	40004c00 	.word	0x40004c00
 8007e74:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e82:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 812a 	beq.w	80080e0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e90:	4a9e      	ldr	r2, [pc, #632]	@ (800810c <UART_SetConfig+0x590>)
 8007e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e96:	461a      	mov	r2, r3
 8007e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d305      	bcc.n	8007ebc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d903      	bls.n	8007ec4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ec2:	e10d      	b.n	80080e0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	60bb      	str	r3, [r7, #8]
 8007eca:	60fa      	str	r2, [r7, #12]
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	4a8e      	ldr	r2, [pc, #568]	@ (800810c <UART_SetConfig+0x590>)
 8007ed2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	2200      	movs	r2, #0
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007ee6:	f7f8 fde1 	bl	8000aac <__aeabi_uldivmod>
 8007eea:	4602      	mov	r2, r0
 8007eec:	460b      	mov	r3, r1
 8007eee:	4610      	mov	r0, r2
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 0300 	mov.w	r3, #0
 8007efa:	020b      	lsls	r3, r1, #8
 8007efc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f00:	0202      	lsls	r2, r0, #8
 8007f02:	6979      	ldr	r1, [r7, #20]
 8007f04:	6849      	ldr	r1, [r1, #4]
 8007f06:	0849      	lsrs	r1, r1, #1
 8007f08:	2000      	movs	r0, #0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	eb12 0804 	adds.w	r8, r2, r4
 8007f12:	eb43 0905 	adc.w	r9, r3, r5
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	469a      	mov	sl, r3
 8007f1e:	4693      	mov	fp, r2
 8007f20:	4652      	mov	r2, sl
 8007f22:	465b      	mov	r3, fp
 8007f24:	4640      	mov	r0, r8
 8007f26:	4649      	mov	r1, r9
 8007f28:	f7f8 fdc0 	bl	8000aac <__aeabi_uldivmod>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4613      	mov	r3, r2
 8007f32:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f34:	6a3b      	ldr	r3, [r7, #32]
 8007f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f3a:	d308      	bcc.n	8007f4e <UART_SetConfig+0x3d2>
 8007f3c:	6a3b      	ldr	r3, [r7, #32]
 8007f3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f42:	d204      	bcs.n	8007f4e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6a3a      	ldr	r2, [r7, #32]
 8007f4a:	60da      	str	r2, [r3, #12]
 8007f4c:	e0c8      	b.n	80080e0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f54:	e0c4      	b.n	80080e0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	69db      	ldr	r3, [r3, #28]
 8007f5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f5e:	d167      	bne.n	8008030 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007f60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f64:	2b08      	cmp	r3, #8
 8007f66:	d828      	bhi.n	8007fba <UART_SetConfig+0x43e>
 8007f68:	a201      	add	r2, pc, #4	@ (adr r2, 8007f70 <UART_SetConfig+0x3f4>)
 8007f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6e:	bf00      	nop
 8007f70:	08007f95 	.word	0x08007f95
 8007f74:	08007f9d 	.word	0x08007f9d
 8007f78:	08007fa5 	.word	0x08007fa5
 8007f7c:	08007fbb 	.word	0x08007fbb
 8007f80:	08007fab 	.word	0x08007fab
 8007f84:	08007fbb 	.word	0x08007fbb
 8007f88:	08007fbb 	.word	0x08007fbb
 8007f8c:	08007fbb 	.word	0x08007fbb
 8007f90:	08007fb3 	.word	0x08007fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f94:	f7fe fe2a 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 8007f98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f9a:	e014      	b.n	8007fc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f9c:	f7fe fe3c 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 8007fa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fa2:	e010      	b.n	8007fc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fa4:	4b5a      	ldr	r3, [pc, #360]	@ (8008110 <UART_SetConfig+0x594>)
 8007fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fa8:	e00d      	b.n	8007fc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007faa:	f7fe fdb1 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 8007fae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007fb0:	e009      	b.n	8007fc6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007fb8:	e005      	b.n	8007fc6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8089 	beq.w	80080e0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800810c <UART_SetConfig+0x590>)
 8007fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fe0:	005a      	lsls	r2, r3, #1
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	085b      	lsrs	r3, r3, #1
 8007fe8:	441a      	add	r2, r3
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ff4:	6a3b      	ldr	r3, [r7, #32]
 8007ff6:	2b0f      	cmp	r3, #15
 8007ff8:	d916      	bls.n	8008028 <UART_SetConfig+0x4ac>
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008000:	d212      	bcs.n	8008028 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	b29b      	uxth	r3, r3
 8008006:	f023 030f 	bic.w	r3, r3, #15
 800800a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	085b      	lsrs	r3, r3, #1
 8008010:	b29b      	uxth	r3, r3
 8008012:	f003 0307 	and.w	r3, r3, #7
 8008016:	b29a      	uxth	r2, r3
 8008018:	8bfb      	ldrh	r3, [r7, #30]
 800801a:	4313      	orrs	r3, r2
 800801c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	8bfa      	ldrh	r2, [r7, #30]
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	e05b      	b.n	80080e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008028:	2301      	movs	r3, #1
 800802a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800802e:	e057      	b.n	80080e0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008030:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008034:	2b08      	cmp	r3, #8
 8008036:	d828      	bhi.n	800808a <UART_SetConfig+0x50e>
 8008038:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <UART_SetConfig+0x4c4>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008065 	.word	0x08008065
 8008044:	0800806d 	.word	0x0800806d
 8008048:	08008075 	.word	0x08008075
 800804c:	0800808b 	.word	0x0800808b
 8008050:	0800807b 	.word	0x0800807b
 8008054:	0800808b 	.word	0x0800808b
 8008058:	0800808b 	.word	0x0800808b
 800805c:	0800808b 	.word	0x0800808b
 8008060:	08008083 	.word	0x08008083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008064:	f7fe fdc2 	bl	8006bec <HAL_RCC_GetPCLK1Freq>
 8008068:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800806a:	e014      	b.n	8008096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800806c:	f7fe fdd4 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 8008070:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008072:	e010      	b.n	8008096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008074:	4b26      	ldr	r3, [pc, #152]	@ (8008110 <UART_SetConfig+0x594>)
 8008076:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008078:	e00d      	b.n	8008096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807a:	f7fe fd49 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 800807e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008080:	e009      	b.n	8008096 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008088:	e005      	b.n	8008096 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008094:	bf00      	nop
    }

    if (pclk != 0U)
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	2b00      	cmp	r3, #0
 800809a:	d021      	beq.n	80080e0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a0:	4a1a      	ldr	r2, [pc, #104]	@ (800810c <UART_SetConfig+0x590>)
 80080a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	085b      	lsrs	r3, r3, #1
 80080b4:	441a      	add	r2, r3
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80080be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	2b0f      	cmp	r3, #15
 80080c4:	d909      	bls.n	80080da <UART_SetConfig+0x55e>
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080cc:	d205      	bcs.n	80080da <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	60da      	str	r2, [r3, #12]
 80080d8:	e002      	b.n	80080e0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2200      	movs	r2, #0
 80080f4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2200      	movs	r2, #0
 80080fa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008100:	4618      	mov	r0, r3
 8008102:	3730      	adds	r7, #48	@ 0x30
 8008104:	46bd      	mov	sp, r7
 8008106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800810a:	bf00      	nop
 800810c:	0800de48 	.word	0x0800de48
 8008110:	00f42400 	.word	0x00f42400

08008114 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008120:	f003 0308 	and.w	r3, r3, #8
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00a      	beq.n	8008182 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d00a      	beq.n	80081a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a8:	f003 0310 	and.w	r3, r3, #16
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00a      	beq.n	80081c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00a      	beq.n	80081e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	430a      	orrs	r2, r1
 80081e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01a      	beq.n	800822a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	430a      	orrs	r2, r1
 8008208:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800820e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008212:	d10a      	bne.n	800822a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800822e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	605a      	str	r2, [r3, #4]
  }
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b098      	sub	sp, #96	@ 0x60
 800825c:	af02      	add	r7, sp, #8
 800825e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008268:	f7f9 fe78 	bl	8001f5c <HAL_GetTick>
 800826c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0308 	and.w	r3, r3, #8
 8008278:	2b08      	cmp	r3, #8
 800827a:	d12f      	bne.n	80082dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800827c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008284:	2200      	movs	r2, #0
 8008286:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f88e 	bl	80083ac <UART_WaitOnFlagUntilTimeout>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d022      	beq.n	80082dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829e:	e853 3f00 	ldrex	r3, [r3]
 80082a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80082a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	461a      	mov	r2, r3
 80082b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80082b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80082ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082bc:	e841 2300 	strex	r3, r2, [r1]
 80082c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80082c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e6      	bne.n	8008296 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2220      	movs	r2, #32
 80082cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e063      	b.n	80083a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 0304 	and.w	r3, r3, #4
 80082e6:	2b04      	cmp	r3, #4
 80082e8:	d149      	bne.n	800837e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f2:	2200      	movs	r2, #0
 80082f4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f857 	bl	80083ac <UART_WaitOnFlagUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d03c      	beq.n	800837e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	e853 3f00 	ldrex	r3, [r3]
 8008310:	623b      	str	r3, [r7, #32]
   return(result);
 8008312:	6a3b      	ldr	r3, [r7, #32]
 8008314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008318:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008322:	633b      	str	r3, [r7, #48]	@ 0x30
 8008324:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832a:	e841 2300 	strex	r3, r2, [r1]
 800832e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1e6      	bne.n	8008304 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	3308      	adds	r3, #8
 800833c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	60fb      	str	r3, [r7, #12]
   return(result);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	3308      	adds	r3, #8
 8008354:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008356:	61fa      	str	r2, [r7, #28]
 8008358:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	69b9      	ldr	r1, [r7, #24]
 800835c:	69fa      	ldr	r2, [r7, #28]
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	617b      	str	r3, [r7, #20]
   return(result);
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e5      	bne.n	8008336 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2220      	movs	r2, #32
 800836e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e012      	b.n	80083a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2220      	movs	r2, #32
 8008382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2220      	movs	r2, #32
 800838a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3758      	adds	r7, #88	@ 0x58
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	603b      	str	r3, [r7, #0]
 80083b8:	4613      	mov	r3, r2
 80083ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083bc:	e04f      	b.n	800845e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c4:	d04b      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083c6:	f7f9 fdc9 	bl	8001f5c <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	69ba      	ldr	r2, [r7, #24]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d302      	bcc.n	80083dc <UART_WaitOnFlagUntilTimeout+0x30>
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e04e      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d037      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0xb2>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b80      	cmp	r3, #128	@ 0x80
 80083f2:	d034      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0xb2>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d031      	beq.n	800845e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69db      	ldr	r3, [r3, #28]
 8008400:	f003 0308 	and.w	r3, r3, #8
 8008404:	2b08      	cmp	r3, #8
 8008406:	d110      	bne.n	800842a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2208      	movs	r2, #8
 800840e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f000 f838 	bl	8008486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2208      	movs	r2, #8
 800841a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e029      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008438:	d111      	bne.n	800845e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008442:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f000 f81e 	bl	8008486 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800845a:	2303      	movs	r3, #3
 800845c:	e00f      	b.n	800847e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69da      	ldr	r2, [r3, #28]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4013      	ands	r3, r2
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	429a      	cmp	r2, r3
 800846c:	bf0c      	ite	eq
 800846e:	2301      	moveq	r3, #1
 8008470:	2300      	movne	r3, #0
 8008472:	b2db      	uxtb	r3, r3
 8008474:	461a      	mov	r2, r3
 8008476:	79fb      	ldrb	r3, [r7, #7]
 8008478:	429a      	cmp	r2, r3
 800847a:	d0a0      	beq.n	80083be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008486:	b480      	push	{r7}
 8008488:	b095      	sub	sp, #84	@ 0x54
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800849c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	461a      	mov	r2, r3
 80084aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80084ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80084b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80084b4:	e841 2300 	strex	r3, r2, [r1]
 80084b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80084ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1e6      	bne.n	800848e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	3308      	adds	r3, #8
 80084c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c8:	6a3b      	ldr	r3, [r7, #32]
 80084ca:	e853 3f00 	ldrex	r3, [r3]
 80084ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d0:	69fb      	ldr	r3, [r7, #28]
 80084d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80084e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e3      	bne.n	80084c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d118      	bne.n	8008532 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	e853 3f00 	ldrex	r3, [r3]
 800850c:	60bb      	str	r3, [r7, #8]
   return(result);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f023 0310 	bic.w	r3, r3, #16
 8008514:	647b      	str	r3, [r7, #68]	@ 0x44
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	461a      	mov	r2, r3
 800851c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800851e:	61bb      	str	r3, [r7, #24]
 8008520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008522:	6979      	ldr	r1, [r7, #20]
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	e841 2300 	strex	r3, r2, [r1]
 800852a:	613b      	str	r3, [r7, #16]
   return(result);
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1e6      	bne.n	8008500 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2220      	movs	r2, #32
 8008536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2200      	movs	r2, #0
 800853e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008546:	bf00      	nop
 8008548:	3754      	adds	r7, #84	@ 0x54
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008552:	b480      	push	{r7}
 8008554:	b085      	sub	sp, #20
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008560:	2b01      	cmp	r3, #1
 8008562:	d101      	bne.n	8008568 <HAL_UARTEx_DisableFifoMode+0x16>
 8008564:	2302      	movs	r3, #2
 8008566:	e027      	b.n	80085b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2224      	movs	r2, #36	@ 0x24
 8008574:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008596:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3714      	adds	r7, #20
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085d8:	2302      	movs	r3, #2
 80085da:	e02d      	b.n	8008638 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2224      	movs	r2, #36	@ 0x24
 80085e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0201 	bic.w	r2, r2, #1
 8008602:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 f84f 	bl	80086bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68fa      	ldr	r2, [r7, #12]
 8008624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2220      	movs	r2, #32
 800862a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008650:	2b01      	cmp	r3, #1
 8008652:	d101      	bne.n	8008658 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008654:	2302      	movs	r3, #2
 8008656:	e02d      	b.n	80086b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2224      	movs	r2, #36	@ 0x24
 8008664:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0201 	bic.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	430a      	orrs	r2, r1
 8008692:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f811 	bl	80086bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2220      	movs	r2, #32
 80086a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086b2:	2300      	movs	r3, #0
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3710      	adds	r7, #16
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d108      	bne.n	80086de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80086dc:	e031      	b.n	8008742 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80086de:	2308      	movs	r3, #8
 80086e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80086e2:	2308      	movs	r3, #8
 80086e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	0e5b      	lsrs	r3, r3, #25
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	0f5b      	lsrs	r3, r3, #29
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	7b3a      	ldrb	r2, [r7, #12]
 800870a:	4911      	ldr	r1, [pc, #68]	@ (8008750 <UARTEx_SetNbDataToProcess+0x94>)
 800870c:	5c8a      	ldrb	r2, [r1, r2]
 800870e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008712:	7b3a      	ldrb	r2, [r7, #12]
 8008714:	490f      	ldr	r1, [pc, #60]	@ (8008754 <UARTEx_SetNbDataToProcess+0x98>)
 8008716:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008718:	fb93 f3f2 	sdiv	r3, r3, r2
 800871c:	b29a      	uxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	7b7a      	ldrb	r2, [r7, #13]
 8008728:	4909      	ldr	r1, [pc, #36]	@ (8008750 <UARTEx_SetNbDataToProcess+0x94>)
 800872a:	5c8a      	ldrb	r2, [r1, r2]
 800872c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008730:	7b7a      	ldrb	r2, [r7, #13]
 8008732:	4908      	ldr	r1, [pc, #32]	@ (8008754 <UARTEx_SetNbDataToProcess+0x98>)
 8008734:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008736:	fb93 f3f2 	sdiv	r3, r3, r2
 800873a:	b29a      	uxth	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008742:	bf00      	nop
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	0800de60 	.word	0x0800de60
 8008754:	0800de68 	.word	0x0800de68

08008758 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008758:	b480      	push	{r7}
 800875a:	b08b      	sub	sp, #44	@ 0x2c
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	fa93 f3a3 	rbit	r3, r3
 8008772:	613b      	str	r3, [r7, #16]
  return result;
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d101      	bne.n	8008782 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800877e:	2320      	movs	r3, #32
 8008780:	e003      	b.n	800878a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	fab3 f383 	clz	r3, r3
 8008788:	b2db      	uxtb	r3, r3
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	2103      	movs	r1, #3
 800878e:	fa01 f303 	lsl.w	r3, r1, r3
 8008792:	43db      	mvns	r3, r3
 8008794:	401a      	ands	r2, r3
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	fa93 f3a3 	rbit	r3, r3
 80087a0:	61fb      	str	r3, [r7, #28]
  return result;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80087ac:	2320      	movs	r3, #32
 80087ae:	e003      	b.n	80087b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	fab3 f383 	clz	r3, r3
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	fa01 f303 	lsl.w	r3, r1, r3
 80087c0:	431a      	orrs	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	601a      	str	r2, [r3, #0]
}
 80087c6:	bf00      	nop
 80087c8:	372c      	adds	r7, #44	@ 0x2c
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	60f8      	str	r0, [r7, #12]
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	43db      	mvns	r3, r3
 80087e6:	401a      	ands	r2, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	fb01 f303 	mul.w	r3, r1, r3
 80087f0:	431a      	orrs	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	605a      	str	r2, [r3, #4]
}
 80087f6:	bf00      	nop
 80087f8:	3714      	adds	r7, #20
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008802:	b480      	push	{r7}
 8008804:	b08b      	sub	sp, #44	@ 0x2c
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	60b9      	str	r1, [r7, #8]
 800880c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	689a      	ldr	r2, [r3, #8]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	fa93 f3a3 	rbit	r3, r3
 800881c:	613b      	str	r3, [r7, #16]
  return result;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008822:	69bb      	ldr	r3, [r7, #24]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008828:	2320      	movs	r3, #32
 800882a:	e003      	b.n	8008834 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	fab3 f383 	clz	r3, r3
 8008832:	b2db      	uxtb	r3, r3
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	2103      	movs	r1, #3
 8008838:	fa01 f303 	lsl.w	r3, r1, r3
 800883c:	43db      	mvns	r3, r3
 800883e:	401a      	ands	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	fa93 f3a3 	rbit	r3, r3
 800884a:	61fb      	str	r3, [r7, #28]
  return result;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008852:	2b00      	cmp	r3, #0
 8008854:	d101      	bne.n	800885a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008856:	2320      	movs	r3, #32
 8008858:	e003      	b.n	8008862 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885c:	fab3 f383 	clz	r3, r3
 8008860:	b2db      	uxtb	r3, r3
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	6879      	ldr	r1, [r7, #4]
 8008866:	fa01 f303 	lsl.w	r3, r1, r3
 800886a:	431a      	orrs	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008870:	bf00      	nop
 8008872:	372c      	adds	r7, #44	@ 0x2c
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800887c:	b480      	push	{r7}
 800887e:	b08b      	sub	sp, #44	@ 0x2c
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68da      	ldr	r2, [r3, #12]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	fa93 f3a3 	rbit	r3, r3
 8008896:	613b      	str	r3, [r7, #16]
  return result;
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d101      	bne.n	80088a6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80088a2:	2320      	movs	r3, #32
 80088a4:	e003      	b.n	80088ae <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	fab3 f383 	clz	r3, r3
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	2103      	movs	r1, #3
 80088b2:	fa01 f303 	lsl.w	r3, r1, r3
 80088b6:	43db      	mvns	r3, r3
 80088b8:	401a      	ands	r2, r3
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	fa93 f3a3 	rbit	r3, r3
 80088c4:	61fb      	str	r3, [r7, #28]
  return result;
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80088d0:	2320      	movs	r3, #32
 80088d2:	e003      	b.n	80088dc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80088d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d6:	fab3 f383 	clz	r3, r3
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	6879      	ldr	r1, [r7, #4]
 80088e0:	fa01 f303 	lsl.w	r3, r1, r3
 80088e4:	431a      	orrs	r2, r3
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	60da      	str	r2, [r3, #12]
}
 80088ea:	bf00      	nop
 80088ec:	372c      	adds	r7, #44	@ 0x2c
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b08b      	sub	sp, #44	@ 0x2c
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6a1a      	ldr	r2, [r3, #32]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	fa93 f3a3 	rbit	r3, r3
 8008910:	613b      	str	r3, [r7, #16]
  return result;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d101      	bne.n	8008920 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800891c:	2320      	movs	r3, #32
 800891e:	e003      	b.n	8008928 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	fab3 f383 	clz	r3, r3
 8008926:	b2db      	uxtb	r3, r3
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	210f      	movs	r1, #15
 800892c:	fa01 f303 	lsl.w	r3, r1, r3
 8008930:	43db      	mvns	r3, r3
 8008932:	401a      	ands	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008938:	6a3b      	ldr	r3, [r7, #32]
 800893a:	fa93 f3a3 	rbit	r3, r3
 800893e:	61fb      	str	r3, [r7, #28]
  return result;
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800894a:	2320      	movs	r3, #32
 800894c:	e003      	b.n	8008956 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800894e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008950:	fab3 f383 	clz	r3, r3
 8008954:	b2db      	uxtb	r3, r3
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	6879      	ldr	r1, [r7, #4]
 800895a:	fa01 f303 	lsl.w	r3, r1, r3
 800895e:	431a      	orrs	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008964:	bf00      	nop
 8008966:	372c      	adds	r7, #44	@ 0x2c
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008970:	b480      	push	{r7}
 8008972:	b08b      	sub	sp, #44	@ 0x2c
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	0a1b      	lsrs	r3, r3, #8
 8008984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	fa93 f3a3 	rbit	r3, r3
 800898c:	613b      	str	r3, [r7, #16]
  return result;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008998:	2320      	movs	r3, #32
 800899a:	e003      	b.n	80089a4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	fab3 f383 	clz	r3, r3
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	210f      	movs	r1, #15
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	43db      	mvns	r3, r3
 80089ae:	401a      	ands	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	0a1b      	lsrs	r3, r3, #8
 80089b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	fa93 f3a3 	rbit	r3, r3
 80089bc:	61fb      	str	r3, [r7, #28]
  return result;
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80089c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80089c8:	2320      	movs	r3, #32
 80089ca:	e003      	b.n	80089d4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	fab3 f383 	clz	r3, r3
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	fa01 f303 	lsl.w	r3, r1, r3
 80089dc:	431a      	orrs	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80089e2:	bf00      	nop
 80089e4:	372c      	adds	r7, #44	@ 0x2c
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b088      	sub	sp, #32
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	fa93 f3a3 	rbit	r3, r3
 8008a04:	60fb      	str	r3, [r7, #12]
  return result;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <LL_GPIO_Init+0x26>
    return 32U;
 8008a10:	2320      	movs	r3, #32
 8008a12:	e003      	b.n	8008a1c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	fab3 f383 	clz	r3, r3
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008a1e:	e048      	b.n	8008ab2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	2101      	movs	r1, #1
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	fa01 f303 	lsl.w	r3, r1, r3
 8008a2c:	4013      	ands	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d03a      	beq.n	8008aac <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d003      	beq.n	8008a46 <LL_GPIO_Init+0x58>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2b02      	cmp	r3, #2
 8008a44:	d10e      	bne.n	8008a64 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	69b9      	ldr	r1, [r7, #24]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff fed7 	bl	8008802 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	6819      	ldr	r1, [r3, #0]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7ff feb7 	bl	80087d2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	69b9      	ldr	r1, [r7, #24]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff ff05 	bl	800887c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d111      	bne.n	8008a9e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	2bff      	cmp	r3, #255	@ 0xff
 8008a7e:	d807      	bhi.n	8008a90 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	695b      	ldr	r3, [r3, #20]
 8008a84:	461a      	mov	r2, r3
 8008a86:	69b9      	ldr	r1, [r7, #24]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7ff ff34 	bl	80088f6 <LL_GPIO_SetAFPin_0_7>
 8008a8e:	e006      	b.n	8008a9e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	461a      	mov	r2, r3
 8008a96:	69b9      	ldr	r1, [r7, #24]
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7ff ff69 	bl	8008970 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	69b9      	ldr	r1, [r7, #24]
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7ff fe56 	bl	8008758 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1af      	bne.n	8008a20 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008aca:	b480      	push	{r7}
 8008acc:	b085      	sub	sp, #20
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008ada:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008ade:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008b00:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008b04:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	43db      	mvns	r3, r3
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	4013      	ands	r3, r2
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b085      	sub	sp, #20
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	1d3b      	adds	r3, r7, #4
 8008b38:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
	...

08008b6c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b09d      	sub	sp, #116	@ 0x74
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b92:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	78db      	ldrb	r3, [r3, #3]
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d81f      	bhi.n	8008bde <USB_ActivateEndpoint+0x72>
 8008b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ba4 <USB_ActivateEndpoint+0x38>)
 8008ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ba4:	08008bb5 	.word	0x08008bb5
 8008ba8:	08008bd1 	.word	0x08008bd1
 8008bac:	08008be7 	.word	0x08008be7
 8008bb0:	08008bc3 	.word	0x08008bc3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008bb4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008bbc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008bc0:	e012      	b.n	8008be8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008bc2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bc6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008bca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008bce:	e00b      	b.n	8008be8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008bd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008bd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008bdc:	e004      	b.n	8008be8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008be4:	e000      	b.n	8008be8 <USB_ActivateEndpoint+0x7c>
      break;
 8008be6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	009b      	lsls	r3, r3, #2
 8008bf0:	441a      	add	r2, r3
 8008bf2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	b21b      	sxth	r3, r3
 8008c1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c22:	b21a      	sxth	r2, r3
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	b21b      	sxth	r3, r3
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	b21b      	sxth	r3, r3
 8008c2e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	441a      	add	r2, r3
 8008c3c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	7b1b      	ldrb	r3, [r3, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f040 8178 	bne.w	8008f4e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	785b      	ldrb	r3, [r3, #1]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f000 8084 	beq.w	8008d70 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	61bb      	str	r3, [r7, #24]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	461a      	mov	r2, r3
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	4413      	add	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	00da      	lsls	r2, r3, #3
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c8a:	617b      	str	r3, [r7, #20]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	88db      	ldrh	r3, [r3, #6]
 8008c90:	085b      	lsrs	r3, r3, #1
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	005b      	lsls	r3, r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	827b      	strh	r3, [r7, #18]
 8008caa:	8a7b      	ldrh	r3, [r7, #18]
 8008cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d01b      	beq.n	8008cec <USB_ActivateEndpoint+0x180>
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	881b      	ldrh	r3, [r3, #0]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cca:	823b      	strh	r3, [r7, #16]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	441a      	add	r2, r3
 8008cd6:	8a3b      	ldrh	r3, [r7, #16]
 8008cd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ce4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	78db      	ldrb	r3, [r3, #3]
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d020      	beq.n	8008d36 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	4413      	add	r3, r2
 8008cfe:	881b      	ldrh	r3, [r3, #0]
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d0a:	81bb      	strh	r3, [r7, #12]
 8008d0c:	89bb      	ldrh	r3, [r7, #12]
 8008d0e:	f083 0320 	eor.w	r3, r3, #32
 8008d12:	81bb      	strh	r3, [r7, #12]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	441a      	add	r2, r3
 8008d1e:	89bb      	ldrh	r3, [r7, #12]
 8008d20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	8013      	strh	r3, [r2, #0]
 8008d34:	e2d5      	b.n	80092e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	881b      	ldrh	r3, [r3, #0]
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d4c:	81fb      	strh	r3, [r7, #14]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	441a      	add	r2, r3
 8008d58:	89fb      	ldrh	r3, [r7, #14]
 8008d5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	8013      	strh	r3, [r2, #0]
 8008d6e:	e2b8      	b.n	80092e2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	4413      	add	r3, r2
 8008d82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	781b      	ldrb	r3, [r3, #0]
 8008d88:	00da      	lsls	r2, r3, #3
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	4413      	add	r3, r2
 8008d8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	88db      	ldrh	r3, [r3, #6]
 8008d98:	085b      	lsrs	r3, r3, #1
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	461a      	mov	r2, r3
 8008db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db4:	4413      	add	r3, r2
 8008db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	00da      	lsls	r2, r3, #3
 8008dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dca:	881b      	ldrh	r3, [r3, #0]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	801a      	strh	r2, [r3, #0]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	691b      	ldr	r3, [r3, #16]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10a      	bne.n	8008df6 <USB_ActivateEndpoint+0x28a>
 8008de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de2:	881b      	ldrh	r3, [r3, #0]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	e039      	b.n	8008e6a <USB_ActivateEndpoint+0x2fe>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8008dfc:	d818      	bhi.n	8008e30 <USB_ActivateEndpoint+0x2c4>
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	691b      	ldr	r3, [r3, #16]
 8008e02:	085b      	lsrs	r3, r3, #1
 8008e04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <USB_ActivateEndpoint+0x2ac>
 8008e12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e14:	3301      	adds	r3, #1
 8008e16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e1a:	881b      	ldrh	r3, [r3, #0]
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	029b      	lsls	r3, r3, #10
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	4313      	orrs	r3, r2
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e01c      	b.n	8008e6a <USB_ActivateEndpoint+0x2fe>
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	095b      	lsrs	r3, r3, #5
 8008e36:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	f003 031f 	and.w	r3, r3, #31
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d102      	bne.n	8008e4a <USB_ActivateEndpoint+0x2de>
 8008e44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e46:	3b01      	subs	r3, #1
 8008e48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	029b      	lsls	r3, r3, #10
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e68:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	009b      	lsls	r3, r3, #2
 8008e72:	4413      	add	r3, r2
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01b      	beq.n	8008eba <USB_ActivateEndpoint+0x34e>
 8008e82:	687a      	ldr	r2, [r7, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	881b      	ldrh	r3, [r3, #0]
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e98:	843b      	strh	r3, [r7, #32]
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	441a      	add	r2, r3
 8008ea4:	8c3b      	ldrh	r3, [r7, #32]
 8008ea6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d124      	bne.n	8008f0c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	009b      	lsls	r3, r3, #2
 8008eca:	4413      	add	r3, r2
 8008ecc:	881b      	ldrh	r3, [r3, #0]
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ed4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ed8:	83bb      	strh	r3, [r7, #28]
 8008eda:	8bbb      	ldrh	r3, [r7, #28]
 8008edc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008ee0:	83bb      	strh	r3, [r7, #28]
 8008ee2:	8bbb      	ldrh	r3, [r7, #28]
 8008ee4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ee8:	83bb      	strh	r3, [r7, #28]
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	441a      	add	r2, r3
 8008ef4:	8bbb      	ldrh	r3, [r7, #28]
 8008ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	8013      	strh	r3, [r2, #0]
 8008f0a:	e1ea      	b.n	80092e2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f22:	83fb      	strh	r3, [r7, #30]
 8008f24:	8bfb      	ldrh	r3, [r7, #30]
 8008f26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f2a:	83fb      	strh	r3, [r7, #30]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	441a      	add	r2, r3
 8008f36:	8bfb      	ldrh	r3, [r7, #30]
 8008f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]
 8008f4c:	e1c9      	b.n	80092e2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	78db      	ldrb	r3, [r3, #3]
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d11e      	bne.n	8008f94 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	441a      	add	r2, r3
 8008f7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f86:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
 8008f92:	e01d      	b.n	8008fd0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008faa:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	441a      	add	r2, r3
 8008fb8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fe0:	4413      	add	r3, r2
 8008fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	00da      	lsls	r2, r3, #3
 8008fea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ff2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	891b      	ldrh	r3, [r3, #8]
 8008ff8:	085b      	lsrs	r3, r3, #1
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	005b      	lsls	r3, r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009002:	801a      	strh	r2, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	657b      	str	r3, [r7, #84]	@ 0x54
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800900e:	b29b      	uxth	r3, r3
 8009010:	461a      	mov	r2, r3
 8009012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009014:	4413      	add	r3, r2
 8009016:	657b      	str	r3, [r7, #84]	@ 0x54
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	781b      	ldrb	r3, [r3, #0]
 800901c:	00da      	lsls	r2, r3, #3
 800901e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009020:	4413      	add	r3, r2
 8009022:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009026:	653b      	str	r3, [r7, #80]	@ 0x50
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	895b      	ldrh	r3, [r3, #10]
 800902c:	085b      	lsrs	r3, r3, #1
 800902e:	b29b      	uxth	r3, r3
 8009030:	005b      	lsls	r3, r3, #1
 8009032:	b29a      	uxth	r2, r3
 8009034:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009036:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	2b00      	cmp	r3, #0
 800903e:	f040 8093 	bne.w	8009168 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	4413      	add	r3, r2
 800904c:	881b      	ldrh	r3, [r3, #0]
 800904e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009052:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800905a:	2b00      	cmp	r3, #0
 800905c:	d01b      	beq.n	8009096 <USB_ActivateEndpoint+0x52a>
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	4413      	add	r3, r2
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	b29b      	uxth	r3, r3
 800906c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009074:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	441a      	add	r2, r3
 8009080:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800908a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800908e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009092:	b29b      	uxth	r3, r3
 8009094:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 80090a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80090a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d01b      	beq.n	80090e6 <USB_ActivateEndpoint+0x57a>
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c4:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	441a      	add	r2, r3
 80090d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80090d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090fc:	873b      	strh	r3, [r7, #56]	@ 0x38
 80090fe:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009100:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009104:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009106:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009108:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800910c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	441a      	add	r2, r3
 8009118:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800911a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912a:	b29b      	uxth	r3, r3
 800912c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009144:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	441a      	add	r2, r3
 8009150:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800915a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800915e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009162:	b29b      	uxth	r3, r3
 8009164:	8013      	strh	r3, [r2, #0]
 8009166:	e0bc      	b.n	80092e2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009178:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800917c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01d      	beq.n	80091c0 <USB_ActivateEndpoint+0x654>
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	441a      	add	r2, r3
 80091a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80091ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091bc:	b29b      	uxth	r3, r3
 80091be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	4413      	add	r3, r2
 80091ca:	881b      	ldrh	r3, [r3, #0]
 80091cc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80091d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80091d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d01d      	beq.n	8009218 <USB_ActivateEndpoint+0x6ac>
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4413      	add	r3, r2
 80091e6:	881b      	ldrh	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091f2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	441a      	add	r2, r3
 8009200:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800920c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009210:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009214:	b29b      	uxth	r3, r3
 8009216:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	78db      	ldrb	r3, [r3, #3]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d024      	beq.n	800926a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	4413      	add	r3, r2
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	b29b      	uxth	r3, r3
 800922e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009232:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009236:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800923a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800923e:	f083 0320 	eor.w	r3, r3, #32
 8009242:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	441a      	add	r2, r3
 8009250:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009254:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009258:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800925c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009264:	b29b      	uxth	r3, r3
 8009266:	8013      	strh	r3, [r2, #0]
 8009268:	e01d      	b.n	80092a6 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	881b      	ldrh	r3, [r3, #0]
 8009276:	b29b      	uxth	r3, r3
 8009278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800927c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009280:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	441a      	add	r2, r3
 800928e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009292:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009296:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800929a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800929e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	881b      	ldrh	r3, [r3, #0]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	441a      	add	r2, r3
 80092ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80092ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092de:	b29b      	uxth	r3, r3
 80092e0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80092e2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3774      	adds	r7, #116	@ 0x74
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop

080092f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b08d      	sub	sp, #52	@ 0x34
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	7b1b      	ldrb	r3, [r3, #12]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f040 808e 	bne.w	8009424 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d044      	beq.n	800939a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4413      	add	r3, r2
 800931a:	881b      	ldrh	r3, [r3, #0]
 800931c:	81bb      	strh	r3, [r7, #12]
 800931e:	89bb      	ldrh	r3, [r7, #12]
 8009320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009324:	2b00      	cmp	r3, #0
 8009326:	d01b      	beq.n	8009360 <USB_DeactivateEndpoint+0x6c>
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29b      	uxth	r3, r3
 8009336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800933a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933e:	817b      	strh	r3, [r7, #10]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	441a      	add	r2, r3
 800934a:	897b      	ldrh	r3, [r7, #10]
 800934c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009358:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800935c:	b29b      	uxth	r3, r3
 800935e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	4413      	add	r3, r2
 800936a:	881b      	ldrh	r3, [r3, #0]
 800936c:	b29b      	uxth	r3, r3
 800936e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009376:	813b      	strh	r3, [r7, #8]
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	009b      	lsls	r3, r3, #2
 8009380:	441a      	add	r2, r3
 8009382:	893b      	ldrh	r3, [r7, #8]
 8009384:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009388:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800938c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009394:	b29b      	uxth	r3, r3
 8009396:	8013      	strh	r3, [r2, #0]
 8009398:	e192      	b.n	80096c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	881b      	ldrh	r3, [r3, #0]
 80093a6:	827b      	strh	r3, [r7, #18]
 80093a8:	8a7b      	ldrh	r3, [r7, #18]
 80093aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d01b      	beq.n	80093ea <USB_DeactivateEndpoint+0xf6>
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c8:	823b      	strh	r3, [r7, #16]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	441a      	add	r2, r3
 80093d4:	8a3b      	ldrh	r3, [r7, #16]
 80093d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80093e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093e6:	b29b      	uxth	r3, r3
 80093e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80093fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009400:	81fb      	strh	r3, [r7, #14]
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	441a      	add	r2, r3
 800940c:	89fb      	ldrh	r3, [r7, #14]
 800940e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009412:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800941a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941e:	b29b      	uxth	r3, r3
 8009420:	8013      	strh	r3, [r2, #0]
 8009422:	e14d      	b.n	80096c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 80a5 	bne.w	8009578 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	843b      	strh	r3, [r7, #32]
 800943c:	8c3b      	ldrh	r3, [r7, #32]
 800943e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01b      	beq.n	800947e <USB_DeactivateEndpoint+0x18a>
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29b      	uxth	r3, r3
 8009454:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009458:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800945c:	83fb      	strh	r3, [r7, #30]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	441a      	add	r2, r3
 8009468:	8bfb      	ldrh	r3, [r7, #30]
 800946a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800946e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009472:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800947a:	b29b      	uxth	r3, r3
 800947c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	881b      	ldrh	r3, [r3, #0]
 800948a:	83bb      	strh	r3, [r7, #28]
 800948c:	8bbb      	ldrh	r3, [r7, #28]
 800948e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	d01b      	beq.n	80094ce <USB_DeactivateEndpoint+0x1da>
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ac:	837b      	strh	r3, [r7, #26]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	441a      	add	r2, r3
 80094b8:	8b7b      	ldrh	r3, [r7, #26]
 80094ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4413      	add	r3, r2
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	b29b      	uxth	r3, r3
 80094dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094e4:	833b      	strh	r3, [r7, #24]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	441a      	add	r2, r3
 80094f0:	8b3b      	ldrh	r3, [r7, #24]
 80094f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009502:	b29b      	uxth	r3, r3
 8009504:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009518:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800951c:	82fb      	strh	r3, [r7, #22]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	441a      	add	r2, r3
 8009528:	8afb      	ldrh	r3, [r7, #22]
 800952a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800952e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800953a:	b29b      	uxth	r3, r3
 800953c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009554:	82bb      	strh	r3, [r7, #20]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	441a      	add	r2, r3
 8009560:	8abb      	ldrh	r3, [r7, #20]
 8009562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800956a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800956e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009572:	b29b      	uxth	r3, r3
 8009574:	8013      	strh	r3, [r2, #0]
 8009576:	e0a3      	b.n	80096c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009586:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d01b      	beq.n	80095c8 <USB_DeactivateEndpoint+0x2d4>
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	4413      	add	r3, r2
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	441a      	add	r2, r3
 80095b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80095b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80095c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80095d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80095d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01b      	beq.n	8009618 <USB_DeactivateEndpoint+0x324>
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4413      	add	r3, r2
 80095ea:	881b      	ldrh	r3, [r3, #0]
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80095f8:	687a      	ldr	r2, [r7, #4]
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	441a      	add	r2, r3
 8009602:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009604:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009608:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800960c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009610:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009614:	b29b      	uxth	r3, r3
 8009616:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	781b      	ldrb	r3, [r3, #0]
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4413      	add	r3, r2
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800962a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800962e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	781b      	ldrb	r3, [r3, #0]
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	441a      	add	r2, r3
 800963a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800963c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009644:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800964c:	b29b      	uxth	r3, r3
 800964e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4413      	add	r3, r2
 800965a:	881b      	ldrh	r3, [r3, #0]
 800965c:	b29b      	uxth	r3, r3
 800965e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009662:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009666:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	441a      	add	r2, r3
 8009672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800967c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009684:	b29b      	uxth	r3, r3
 8009686:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800969a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800969e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	441a      	add	r2, r3
 80096aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80096ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096bc:	b29b      	uxth	r3, r3
 80096be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3734      	adds	r7, #52	@ 0x34
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b0c2      	sub	sp, #264	@ 0x108
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096dc:	6018      	str	r0, [r3, #0]
 80096de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	785b      	ldrb	r3, [r3, #1]
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	f040 86b7 	bne.w	800a468 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80096fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699a      	ldr	r2, [r3, #24]
 8009706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800970a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	429a      	cmp	r2, r3
 8009714:	d908      	bls.n	8009728 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009726:	e007      	b.n	8009738 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800973c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	7b1b      	ldrb	r3, [r3, #12]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d13a      	bne.n	80097be <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6959      	ldr	r1, [r3, #20]
 8009754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009758:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	88da      	ldrh	r2, [r3, #6]
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	b29b      	uxth	r3, r3
 8009766:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800976a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800976e:	6800      	ldr	r0, [r0, #0]
 8009770:	f001 fc99 	bl	800b0a6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009778:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	613b      	str	r3, [r7, #16]
 8009780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009784:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800978e:	b29b      	uxth	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	4413      	add	r3, r2
 8009796:	613b      	str	r3, [r7, #16]
 8009798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800979c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	00da      	lsls	r2, r3, #3
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	4413      	add	r3, r2
 80097aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b4:	b29a      	uxth	r2, r3
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	801a      	strh	r2, [r3, #0]
 80097ba:	f000 be1f 	b.w	800a3fc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80097be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	78db      	ldrb	r3, [r3, #3]
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	f040 8462 	bne.w	800a094 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80097d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6a1a      	ldr	r2, [r3, #32]
 80097dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	f240 83df 	bls.w	8009fac <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80097ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	b29b      	uxth	r3, r3
 800980c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009810:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009814:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	441a      	add	r2, r3
 8009832:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009836:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800983a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800983e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009842:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009846:	b29b      	uxth	r3, r3
 8009848:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800984a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800984e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	6a1a      	ldr	r2, [r3, #32]
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985a:	1ad2      	subs	r2, r2, r3
 800985c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	881b      	ldrh	r3, [r3, #0]
 8009884:	b29b      	uxth	r3, r3
 8009886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 81c7 	beq.w	8009c1e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	633b      	str	r3, [r7, #48]	@ 0x30
 800989c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	785b      	ldrb	r3, [r3, #1]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d177      	bne.n	800999c <USB_EPStartXfer+0x2ce>
 80098ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098cc:	4413      	add	r3, r2
 80098ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	00da      	lsls	r2, r3, #3
 80098de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098e0:	4413      	add	r3, r2
 80098e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80098e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ea:	881b      	ldrh	r3, [r3, #0]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10a      	bne.n	8009916 <USB_EPStartXfer+0x248>
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29b      	uxth	r3, r3
 8009906:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800990a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800990e:	b29a      	uxth	r2, r3
 8009910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009912:	801a      	strh	r2, [r3, #0]
 8009914:	e067      	b.n	80099e6 <USB_EPStartXfer+0x318>
 8009916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800991a:	2b3e      	cmp	r3, #62	@ 0x3e
 800991c:	d81c      	bhi.n	8009958 <USB_EPStartXfer+0x28a>
 800991e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009922:	085b      	lsrs	r3, r3, #1
 8009924:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d004      	beq.n	800993e <USB_EPStartXfer+0x270>
 8009934:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009938:	3301      	adds	r3, #1
 800993a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800993e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009940:	881b      	ldrh	r3, [r3, #0]
 8009942:	b29a      	uxth	r2, r3
 8009944:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009948:	b29b      	uxth	r3, r3
 800994a:	029b      	lsls	r3, r3, #10
 800994c:	b29b      	uxth	r3, r3
 800994e:	4313      	orrs	r3, r2
 8009950:	b29a      	uxth	r2, r3
 8009952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009954:	801a      	strh	r2, [r3, #0]
 8009956:	e046      	b.n	80099e6 <USB_EPStartXfer+0x318>
 8009958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800995c:	095b      	lsrs	r3, r3, #5
 800995e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009966:	f003 031f 	and.w	r3, r3, #31
 800996a:	2b00      	cmp	r3, #0
 800996c:	d104      	bne.n	8009978 <USB_EPStartXfer+0x2aa>
 800996e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009972:	3b01      	subs	r3, #1
 8009974:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29a      	uxth	r2, r3
 800997e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009982:	b29b      	uxth	r3, r3
 8009984:	029b      	lsls	r3, r3, #10
 8009986:	b29b      	uxth	r3, r3
 8009988:	4313      	orrs	r3, r2
 800998a:	b29b      	uxth	r3, r3
 800998c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009990:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009994:	b29a      	uxth	r2, r3
 8009996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009998:	801a      	strh	r2, [r3, #0]
 800999a:	e024      	b.n	80099e6 <USB_EPStartXfer+0x318>
 800999c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	785b      	ldrb	r3, [r3, #1]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d11c      	bne.n	80099e6 <USB_EPStartXfer+0x318>
 80099ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	461a      	mov	r2, r3
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	4413      	add	r3, r2
 80099c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80099c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	00da      	lsls	r2, r3, #3
 80099d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d4:	4413      	add	r3, r2
 80099d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80099da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e0:	b29a      	uxth	r2, r3
 80099e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80099e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	895b      	ldrh	r3, [r3, #10]
 80099f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6959      	ldr	r1, [r3, #20]
 8009a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a14:	6800      	ldr	r0, [r0, #0]
 8009a16:	f001 fb46 	bl	800b0a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	695a      	ldr	r2, [r3, #20]
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2a:	441a      	add	r2, r3
 8009a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	6a1a      	ldr	r2, [r3, #32]
 8009a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d90f      	bls.n	8009a74 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6a1a      	ldr	r2, [r3, #32]
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a64:	1ad2      	subs	r2, r2, r3
 8009a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	621a      	str	r2, [r3, #32]
 8009a72:	e00e      	b.n	8009a92 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	6a1b      	ldr	r3, [r3, #32]
 8009a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	2200      	movs	r2, #0
 8009a90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	785b      	ldrb	r3, [r3, #1]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d177      	bne.n	8009b92 <USB_EPStartXfer+0x4c4>
 8009aa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	61bb      	str	r3, [r7, #24]
 8009aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	461a      	mov	r2, r3
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	61bb      	str	r3, [r7, #24]
 8009ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	00da      	lsls	r2, r3, #3
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10a      	bne.n	8009b0c <USB_EPStartXfer+0x43e>
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	881b      	ldrh	r3, [r3, #0]
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	801a      	strh	r2, [r3, #0]
 8009b0a:	e06d      	b.n	8009be8 <USB_EPStartXfer+0x51a>
 8009b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b10:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b12:	d81c      	bhi.n	8009b4e <USB_EPStartXfer+0x480>
 8009b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b18:	085b      	lsrs	r3, r3, #1
 8009b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d004      	beq.n	8009b34 <USB_EPStartXfer+0x466>
 8009b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b2e:	3301      	adds	r3, #1
 8009b30:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	029b      	lsls	r3, r3, #10
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	4313      	orrs	r3, r2
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	801a      	strh	r2, [r3, #0]
 8009b4c:	e04c      	b.n	8009be8 <USB_EPStartXfer+0x51a>
 8009b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b52:	095b      	lsrs	r3, r3, #5
 8009b54:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5c:	f003 031f 	and.w	r3, r3, #31
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d104      	bne.n	8009b6e <USB_EPStartXfer+0x4a0>
 8009b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	881b      	ldrh	r3, [r3, #0]
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	029b      	lsls	r3, r3, #10
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	e02a      	b.n	8009be8 <USB_EPStartXfer+0x51a>
 8009b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d122      	bne.n	8009be8 <USB_EPStartXfer+0x51a>
 8009ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	623b      	str	r3, [r7, #32]
 8009bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	623b      	str	r3, [r7, #32]
 8009bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	781b      	ldrb	r3, [r3, #0]
 8009bd2:	00da      	lsls	r2, r3, #3
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bdc:	61fb      	str	r3, [r7, #28]
 8009bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009be2:	b29a      	uxth	r2, r3
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	891b      	ldrh	r3, [r3, #8]
 8009bf4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6959      	ldr	r1, [r3, #20]
 8009c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c16:	6800      	ldr	r0, [r0, #0]
 8009c18:	f001 fa45 	bl	800b0a6 <USB_WritePMA>
 8009c1c:	e3ee      	b.n	800a3fc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	785b      	ldrb	r3, [r3, #1]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d177      	bne.n	8009d1e <USB_EPStartXfer+0x650>
 8009c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c4e:	4413      	add	r3, r2
 8009c50:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	00da      	lsls	r2, r3, #3
 8009c60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c62:	4413      	add	r3, r2
 8009c64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c68:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c74:	b29a      	uxth	r2, r3
 8009c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c78:	801a      	strh	r2, [r3, #0]
 8009c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10a      	bne.n	8009c98 <USB_EPStartXfer+0x5ca>
 8009c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c94:	801a      	strh	r2, [r3, #0]
 8009c96:	e06d      	b.n	8009d74 <USB_EPStartXfer+0x6a6>
 8009c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c9e:	d81c      	bhi.n	8009cda <USB_EPStartXfer+0x60c>
 8009ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca4:	085b      	lsrs	r3, r3, #1
 8009ca6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cae:	f003 0301 	and.w	r3, r3, #1
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d004      	beq.n	8009cc0 <USB_EPStartXfer+0x5f2>
 8009cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cba:	3301      	adds	r3, #1
 8009cbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc2:	881b      	ldrh	r3, [r3, #0]
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	029b      	lsls	r3, r3, #10
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	e04c      	b.n	8009d74 <USB_EPStartXfer+0x6a6>
 8009cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cde:	095b      	lsrs	r3, r3, #5
 8009ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce8:	f003 031f 	and.w	r3, r3, #31
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d104      	bne.n	8009cfa <USB_EPStartXfer+0x62c>
 8009cf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	029b      	lsls	r3, r3, #10
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009d1a:	801a      	strh	r2, [r3, #0]
 8009d1c:	e02a      	b.n	8009d74 <USB_EPStartXfer+0x6a6>
 8009d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d122      	bne.n	8009d74 <USB_EPStartXfer+0x6a6>
 8009d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d4e:	4413      	add	r3, r2
 8009d50:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	00da      	lsls	r2, r3, #3
 8009d60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d62:	4413      	add	r3, r2
 8009d64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	891b      	ldrh	r3, [r3, #8]
 8009d80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6959      	ldr	r1, [r3, #20]
 8009d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009da2:	6800      	ldr	r0, [r0, #0]
 8009da4:	f001 f97f 	bl	800b0a6 <USB_WritePMA>
            ep->xfer_buff += len;
 8009da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	695a      	ldr	r2, [r3, #20]
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009db8:	441a      	add	r2, r3
 8009dba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009dc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6a1a      	ldr	r2, [r3, #32]
 8009dd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	691b      	ldr	r3, [r3, #16]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d90f      	bls.n	8009e02 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009de2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6a1a      	ldr	r2, [r3, #32]
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	1ad2      	subs	r2, r2, r3
 8009df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	621a      	str	r2, [r3, #32]
 8009e00:	e00e      	b.n	8009e20 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009e02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6a1b      	ldr	r3, [r3, #32]
 8009e0e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009e12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009e20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009e2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d177      	bne.n	8009f2c <USB_EPStartXfer+0x85e>
 8009e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	461a      	mov	r2, r3
 8009e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5c:	4413      	add	r3, r2
 8009e5e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009e60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	00da      	lsls	r2, r3, #3
 8009e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e70:	4413      	add	r3, r2
 8009e72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e7a:	881b      	ldrh	r3, [r3, #0]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d10a      	bne.n	8009ea6 <USB_EPStartXfer+0x7d8>
 8009e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea2:	801a      	strh	r2, [r3, #0]
 8009ea4:	e067      	b.n	8009f76 <USB_EPStartXfer+0x8a8>
 8009ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eaa:	2b3e      	cmp	r3, #62	@ 0x3e
 8009eac:	d81c      	bhi.n	8009ee8 <USB_EPStartXfer+0x81a>
 8009eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb2:	085b      	lsrs	r3, r3, #1
 8009eb4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d004      	beq.n	8009ece <USB_EPStartXfer+0x800>
 8009ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec8:	3301      	adds	r3, #1
 8009eca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ece:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed0:	881b      	ldrh	r3, [r3, #0]
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	029b      	lsls	r3, r3, #10
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee4:	801a      	strh	r2, [r3, #0]
 8009ee6:	e046      	b.n	8009f76 <USB_EPStartXfer+0x8a8>
 8009ee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eec:	095b      	lsrs	r3, r3, #5
 8009eee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ef6:	f003 031f 	and.w	r3, r3, #31
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d104      	bne.n	8009f08 <USB_EPStartXfer+0x83a>
 8009efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f02:	3b01      	subs	r3, #1
 8009f04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29a      	uxth	r2, r3
 8009f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f28:	801a      	strh	r2, [r3, #0]
 8009f2a:	e024      	b.n	8009f76 <USB_EPStartXfer+0x8a8>
 8009f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	785b      	ldrb	r3, [r3, #1]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d11c      	bne.n	8009f76 <USB_EPStartXfer+0x8a8>
 8009f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f40:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f50:	4413      	add	r3, r2
 8009f52:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	00da      	lsls	r2, r3, #3
 8009f62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f64:	4413      	add	r3, r2
 8009f66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009f74:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	895b      	ldrh	r3, [r3, #10]
 8009f82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6959      	ldr	r1, [r3, #20]
 8009f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f9c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009fa0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009fa4:	6800      	ldr	r0, [r0, #0]
 8009fa6:	f001 f87e 	bl	800b0a6 <USB_WritePMA>
 8009faa:	e227      	b.n	800a3fc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
 8009fb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fe2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	441a      	add	r2, r3
 800a000:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a00c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a014:	b29b      	uxth	r3, r3
 800a016:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a01c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a028:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a032:	b29b      	uxth	r3, r3
 800a034:	461a      	mov	r2, r3
 800a036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a038:	4413      	add	r3, r2
 800a03a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	00da      	lsls	r2, r3, #3
 800a04a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a04c:	4413      	add	r3, r2
 800a04e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a052:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a058:	b29a      	uxth	r2, r3
 800a05a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a05c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	891b      	ldrh	r3, [r3, #8]
 800a06a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6959      	ldr	r1, [r3, #20]
 800a07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a07e:	b29b      	uxth	r3, r3
 800a080:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a084:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a088:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a08c:	6800      	ldr	r0, [r0, #0]
 800a08e:	f001 f80a 	bl	800b0a6 <USB_WritePMA>
 800a092:	e1b3      	b.n	800a3fc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a094:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a098:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6a1a      	ldr	r2, [r3, #32]
 800a0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a4:	1ad2      	subs	r2, r2, r3
 800a0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0ba:	681a      	ldr	r2, [r3, #0]
 800a0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	4413      	add	r3, r2
 800a0cc:	881b      	ldrh	r3, [r3, #0]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 80c6 	beq.w	800a266 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a0e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	785b      	ldrb	r3, [r3, #1]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d177      	bne.n	800a1e6 <USB_EPStartXfer+0xb18>
 800a0f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a106:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a110:	b29b      	uxth	r3, r3
 800a112:	461a      	mov	r2, r3
 800a114:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a116:	4413      	add	r3, r2
 800a118:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	781b      	ldrb	r3, [r3, #0]
 800a126:	00da      	lsls	r2, r3, #3
 800a128:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a12a:	4413      	add	r3, r2
 800a12c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a130:	667b      	str	r3, [r7, #100]	@ 0x64
 800a132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29b      	uxth	r3, r3
 800a138:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a140:	801a      	strh	r2, [r3, #0]
 800a142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10a      	bne.n	800a160 <USB_EPStartXfer+0xa92>
 800a14a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a154:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a158:	b29a      	uxth	r2, r3
 800a15a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a15c:	801a      	strh	r2, [r3, #0]
 800a15e:	e067      	b.n	800a230 <USB_EPStartXfer+0xb62>
 800a160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a164:	2b3e      	cmp	r3, #62	@ 0x3e
 800a166:	d81c      	bhi.n	800a1a2 <USB_EPStartXfer+0xad4>
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16c:	085b      	lsrs	r3, r3, #1
 800a16e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d004      	beq.n	800a188 <USB_EPStartXfer+0xaba>
 800a17e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a182:	3301      	adds	r3, #1
 800a184:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a188:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a18a:	881b      	ldrh	r3, [r3, #0]
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a192:	b29b      	uxth	r3, r3
 800a194:	029b      	lsls	r3, r3, #10
 800a196:	b29b      	uxth	r3, r3
 800a198:	4313      	orrs	r3, r2
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a19e:	801a      	strh	r2, [r3, #0]
 800a1a0:	e046      	b.n	800a230 <USB_EPStartXfer+0xb62>
 800a1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b0:	f003 031f 	and.w	r3, r3, #31
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d104      	bne.n	800a1c2 <USB_EPStartXfer+0xaf4>
 800a1b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a1c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1c4:	881b      	ldrh	r3, [r3, #0]
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	029b      	lsls	r3, r3, #10
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a1e2:	801a      	strh	r2, [r3, #0]
 800a1e4:	e024      	b.n	800a230 <USB_EPStartXfer+0xb62>
 800a1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d11c      	bne.n	800a230 <USB_EPStartXfer+0xb62>
 800a1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a204:	b29b      	uxth	r3, r3
 800a206:	461a      	mov	r2, r3
 800a208:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a20a:	4413      	add	r3, r2
 800a20c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a20e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	00da      	lsls	r2, r3, #3
 800a21c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a21e:	4413      	add	r3, r2
 800a220:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a224:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a22e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	895b      	ldrh	r3, [r3, #10]
 800a23c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6959      	ldr	r1, [r3, #20]
 800a24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a250:	b29b      	uxth	r3, r3
 800a252:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a256:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a25a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a25e:	6800      	ldr	r0, [r0, #0]
 800a260:	f000 ff21 	bl	800b0a6 <USB_WritePMA>
 800a264:	e0ca      	b.n	800a3fc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d177      	bne.n	800a366 <USB_EPStartXfer+0xc98>
 800a276:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a27a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a282:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a286:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a290:	b29b      	uxth	r3, r3
 800a292:	461a      	mov	r2, r3
 800a294:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a296:	4413      	add	r3, r2
 800a298:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a29e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	00da      	lsls	r2, r3, #3
 800a2a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a2b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2b4:	881b      	ldrh	r3, [r3, #0]
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2c0:	801a      	strh	r2, [r3, #0]
 800a2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d10a      	bne.n	800a2e0 <USB_EPStartXfer+0xc12>
 800a2ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a2dc:	801a      	strh	r2, [r3, #0]
 800a2de:	e073      	b.n	800a3c8 <USB_EPStartXfer+0xcfa>
 800a2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2e6:	d81c      	bhi.n	800a322 <USB_EPStartXfer+0xc54>
 800a2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2ec:	085b      	lsrs	r3, r3, #1
 800a2ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d004      	beq.n	800a308 <USB_EPStartXfer+0xc3a>
 800a2fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a302:	3301      	adds	r3, #1
 800a304:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a308:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a312:	b29b      	uxth	r3, r3
 800a314:	029b      	lsls	r3, r3, #10
 800a316:	b29b      	uxth	r3, r3
 800a318:	4313      	orrs	r3, r2
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a31e:	801a      	strh	r2, [r3, #0]
 800a320:	e052      	b.n	800a3c8 <USB_EPStartXfer+0xcfa>
 800a322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a326:	095b      	lsrs	r3, r3, #5
 800a328:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a32c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a330:	f003 031f 	and.w	r3, r3, #31
 800a334:	2b00      	cmp	r3, #0
 800a336:	d104      	bne.n	800a342 <USB_EPStartXfer+0xc74>
 800a338:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a33c:	3b01      	subs	r3, #1
 800a33e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a342:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	b29a      	uxth	r2, r3
 800a348:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	029b      	lsls	r3, r3, #10
 800a350:	b29b      	uxth	r3, r3
 800a352:	4313      	orrs	r3, r2
 800a354:	b29b      	uxth	r3, r3
 800a356:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a35a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a35e:	b29a      	uxth	r2, r3
 800a360:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a362:	801a      	strh	r2, [r3, #0]
 800a364:	e030      	b.n	800a3c8 <USB_EPStartXfer+0xcfa>
 800a366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a36a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	785b      	ldrb	r3, [r3, #1]
 800a372:	2b01      	cmp	r3, #1
 800a374:	d128      	bne.n	800a3c8 <USB_EPStartXfer+0xcfa>
 800a376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a37a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a392:	b29b      	uxth	r3, r3
 800a394:	461a      	mov	r2, r3
 800a396:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a39a:	4413      	add	r3, r2
 800a39c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a3a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	00da      	lsls	r2, r3, #3
 800a3ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a3bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a3c6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	891b      	ldrh	r3, [r3, #8]
 800a3d4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	6959      	ldr	r1, [r3, #20]
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a3ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a3f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a3f6:	6800      	ldr	r0, [r0, #0]
 800a3f8:	f000 fe55 	bl	800b0a6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a40a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a41e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a422:	817b      	strh	r3, [r7, #10]
 800a424:	897b      	ldrh	r3, [r7, #10]
 800a426:	f083 0310 	eor.w	r3, r3, #16
 800a42a:	817b      	strh	r3, [r7, #10]
 800a42c:	897b      	ldrh	r3, [r7, #10]
 800a42e:	f083 0320 	eor.w	r3, r3, #32
 800a432:	817b      	strh	r3, [r7, #10]
 800a434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	441a      	add	r2, r3
 800a44e:	897b      	ldrh	r3, [r7, #10]
 800a450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a45c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a460:	b29b      	uxth	r3, r3
 800a462:	8013      	strh	r3, [r2, #0]
 800a464:	f000 bcdf 	b.w	800ae26 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a46c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	7b1b      	ldrb	r3, [r3, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	f040 80bc 	bne.w	800a5f2 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	699a      	ldr	r2, [r3, #24]
 800a486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	429a      	cmp	r2, r3
 800a494:	d917      	bls.n	800a4c6 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	699a      	ldr	r2, [r3, #24]
 800a4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4b6:	1ad2      	subs	r2, r2, r3
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	619a      	str	r2, [r3, #24]
 800a4c4:	e00e      	b.n	800a4e4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	699b      	ldr	r3, [r3, #24]
 800a4d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a4e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a500:	b29b      	uxth	r3, r3
 800a502:	461a      	mov	r2, r3
 800a504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a508:	4413      	add	r3, r2
 800a50a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	00da      	lsls	r2, r3, #3
 800a51c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a520:	4413      	add	r3, r2
 800a522:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a526:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a52a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a52e:	881b      	ldrh	r3, [r3, #0]
 800a530:	b29b      	uxth	r3, r3
 800a532:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a536:	b29a      	uxth	r2, r3
 800a538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a53c:	801a      	strh	r2, [r3, #0]
 800a53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10d      	bne.n	800a562 <USB_EPStartXfer+0xe94>
 800a546:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a552:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a556:	b29a      	uxth	r2, r3
 800a558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a55c:	801a      	strh	r2, [r3, #0]
 800a55e:	f000 bc28 	b.w	800adb2 <USB_EPStartXfer+0x16e4>
 800a562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a566:	2b3e      	cmp	r3, #62	@ 0x3e
 800a568:	d81f      	bhi.n	800a5aa <USB_EPStartXfer+0xedc>
 800a56a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a56e:	085b      	lsrs	r3, r3, #1
 800a570:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d004      	beq.n	800a58a <USB_EPStartXfer+0xebc>
 800a580:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a584:	3301      	adds	r3, #1
 800a586:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a58a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29a      	uxth	r2, r3
 800a592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a596:	b29b      	uxth	r3, r3
 800a598:	029b      	lsls	r3, r3, #10
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	4313      	orrs	r3, r2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	f000 bc04 	b.w	800adb2 <USB_EPStartXfer+0x16e4>
 800a5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ae:	095b      	lsrs	r3, r3, #5
 800a5b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5b8:	f003 031f 	and.w	r3, r3, #31
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <USB_EPStartXfer+0xefc>
 800a5c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a5ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	029b      	lsls	r3, r3, #10
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a5ee:	801a      	strh	r2, [r3, #0]
 800a5f0:	e3df      	b.n	800adb2 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	78db      	ldrb	r3, [r3, #3]
 800a5fe:	2b02      	cmp	r3, #2
 800a600:	f040 8218 	bne.w	800aa34 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a604:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a608:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	785b      	ldrb	r3, [r3, #1]
 800a610:	2b00      	cmp	r3, #0
 800a612:	f040 809d 	bne.w	800a750 <USB_EPStartXfer+0x1082>
 800a616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a628:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a632:	b29b      	uxth	r3, r3
 800a634:	461a      	mov	r2, r3
 800a636:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a63a:	4413      	add	r3, r2
 800a63c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	781b      	ldrb	r3, [r3, #0]
 800a64c:	00da      	lsls	r2, r3, #3
 800a64e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a652:	4413      	add	r3, r2
 800a654:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a658:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a65c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a660:	881b      	ldrh	r3, [r3, #0]
 800a662:	b29b      	uxth	r3, r3
 800a664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a668:	b29a      	uxth	r2, r3
 800a66a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a66e:	801a      	strh	r2, [r3, #0]
 800a670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10c      	bne.n	800a69a <USB_EPStartXfer+0xfcc>
 800a680:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a684:	881b      	ldrh	r3, [r3, #0]
 800a686:	b29b      	uxth	r3, r3
 800a688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a68c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a690:	b29a      	uxth	r2, r3
 800a692:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a696:	801a      	strh	r2, [r3, #0]
 800a698:	e08f      	b.n	800a7ba <USB_EPStartXfer+0x10ec>
 800a69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a69e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6a8:	d826      	bhi.n	800a6f8 <USB_EPStartXfer+0x102a>
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	085b      	lsrs	r3, r3, #1
 800a6b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f003 0301 	and.w	r3, r3, #1
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d004      	beq.n	800a6da <USB_EPStartXfer+0x100c>
 800a6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a6da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	029b      	lsls	r3, r3, #10
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a6f4:	801a      	strh	r2, [r3, #0]
 800a6f6:	e060      	b.n	800a7ba <USB_EPStartXfer+0x10ec>
 800a6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	691b      	ldr	r3, [r3, #16]
 800a704:	095b      	lsrs	r3, r3, #5
 800a706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	f003 031f 	and.w	r3, r3, #31
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d104      	bne.n	800a728 <USB_EPStartXfer+0x105a>
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a722:	3b01      	subs	r3, #1
 800a724:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a734:	b29b      	uxth	r3, r3
 800a736:	029b      	lsls	r3, r3, #10
 800a738:	b29b      	uxth	r3, r3
 800a73a:	4313      	orrs	r3, r2
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a742:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a746:	b29a      	uxth	r2, r3
 800a748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a74c:	801a      	strh	r2, [r3, #0]
 800a74e:	e034      	b.n	800a7ba <USB_EPStartXfer+0x10ec>
 800a750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	785b      	ldrb	r3, [r3, #1]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d12c      	bne.n	800a7ba <USB_EPStartXfer+0x10ec>
 800a760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a764:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a772:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a77c:	b29b      	uxth	r3, r3
 800a77e:	461a      	mov	r2, r3
 800a780:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a784:	4413      	add	r3, r2
 800a786:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a78a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a78e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	781b      	ldrb	r3, [r3, #0]
 800a796:	00da      	lsls	r2, r3, #3
 800a798:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a79c:	4413      	add	r3, r2
 800a79e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	691b      	ldr	r3, [r3, #16]
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a7b8:	801a      	strh	r2, [r3, #0]
 800a7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a7c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	785b      	ldrb	r3, [r3, #1]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f040 809d 	bne.w	800a914 <USB_EPStartXfer+0x1246>
 800a7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a7e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a7fe:	4413      	add	r3, r2
 800a800:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	00da      	lsls	r2, r3, #3
 800a812:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a816:	4413      	add	r3, r2
 800a818:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a81c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a824:	881b      	ldrh	r3, [r3, #0]
 800a826:	b29b      	uxth	r3, r3
 800a828:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a832:	801a      	strh	r2, [r3, #0]
 800a834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10c      	bne.n	800a85e <USB_EPStartXfer+0x1190>
 800a844:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a854:	b29a      	uxth	r2, r3
 800a856:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	e088      	b.n	800a970 <USB_EPStartXfer+0x12a2>
 800a85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a86c:	d826      	bhi.n	800a8bc <USB_EPStartXfer+0x11ee>
 800a86e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a872:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	691b      	ldr	r3, [r3, #16]
 800a87a:	085b      	lsrs	r3, r3, #1
 800a87c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	691b      	ldr	r3, [r3, #16]
 800a88c:	f003 0301 	and.w	r3, r3, #1
 800a890:	2b00      	cmp	r3, #0
 800a892:	d004      	beq.n	800a89e <USB_EPStartXfer+0x11d0>
 800a894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a898:	3301      	adds	r3, #1
 800a89a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a89e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	029b      	lsls	r3, r3, #10
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8b8:	801a      	strh	r2, [r3, #0]
 800a8ba:	e059      	b.n	800a970 <USB_EPStartXfer+0x12a2>
 800a8bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 031f 	and.w	r3, r3, #31
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d104      	bne.n	800a8ec <USB_EPStartXfer+0x121e>
 800a8e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8e6:	3b01      	subs	r3, #1
 800a8e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a8ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a8f0:	881b      	ldrh	r3, [r3, #0]
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	029b      	lsls	r3, r3, #10
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4313      	orrs	r3, r2
 800a900:	b29b      	uxth	r3, r3
 800a902:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a906:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a910:	801a      	strh	r2, [r3, #0]
 800a912:	e02d      	b.n	800a970 <USB_EPStartXfer+0x12a2>
 800a914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	785b      	ldrb	r3, [r3, #1]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d125      	bne.n	800a970 <USB_EPStartXfer+0x12a2>
 800a924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a928:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a932:	b29b      	uxth	r3, r3
 800a934:	461a      	mov	r2, r3
 800a936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a93a:	4413      	add	r3, r2
 800a93c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	00da      	lsls	r2, r3, #3
 800a94e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a952:	4413      	add	r3, r2
 800a954:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a95c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	b29a      	uxth	r2, r3
 800a96a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a96e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8218 	beq.w	800adb2 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9a2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d005      	beq.n	800a9ba <USB_EPStartXfer+0x12ec>
 800a9ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10d      	bne.n	800a9d6 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f040 81f5 	bne.w	800adb2 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a9c8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a9cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 81ee 	bne.w	800adb2 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a9d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	781b      	ldrb	r3, [r3, #0]
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	881b      	ldrh	r3, [r3, #0]
 800a9f2:	b29b      	uxth	r3, r3
 800a9f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9fc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800aa00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	781b      	ldrb	r3, [r3, #0]
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	441a      	add	r2, r3
 800aa1a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800aa1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa2a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	8013      	strh	r3, [r2, #0]
 800aa32:	e1be      	b.n	800adb2 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800aa34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	78db      	ldrb	r3, [r3, #3]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	f040 81b4 	bne.w	800adae <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800aa46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	699a      	ldr	r2, [r3, #24]
 800aa52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	691b      	ldr	r3, [r3, #16]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d917      	bls.n	800aa92 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800aa62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	691b      	ldr	r3, [r3, #16]
 800aa6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800aa72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	699a      	ldr	r2, [r3, #24]
 800aa7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa82:	1ad2      	subs	r2, r2, r3
 800aa84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	619a      	str	r2, [r3, #24]
 800aa90:	e00e      	b.n	800aab0 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800aa92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800aaa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	2200      	movs	r2, #0
 800aaae:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800aab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	785b      	ldrb	r3, [r3, #1]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f040 8085 	bne.w	800abcc <USB_EPStartXfer+0x14fe>
 800aac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aade:	b29b      	uxth	r3, r3
 800aae0:	461a      	mov	r2, r3
 800aae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aae6:	4413      	add	r3, r2
 800aae8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800aaec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	00da      	lsls	r2, r3, #3
 800aafa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800aafe:	4413      	add	r3, r2
 800ab00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ab04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ab08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab1a:	801a      	strh	r2, [r3, #0]
 800ab1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10c      	bne.n	800ab3e <USB_EPStartXfer+0x1470>
 800ab24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab3a:	801a      	strh	r2, [r3, #0]
 800ab3c:	e077      	b.n	800ac2e <USB_EPStartXfer+0x1560>
 800ab3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab42:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab44:	d81e      	bhi.n	800ab84 <USB_EPStartXfer+0x14b6>
 800ab46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab4a:	085b      	lsrs	r3, r3, #1
 800ab4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d004      	beq.n	800ab66 <USB_EPStartXfer+0x1498>
 800ab5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab60:	3301      	adds	r3, #1
 800ab62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	029b      	lsls	r3, r3, #10
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	b29a      	uxth	r2, r3
 800ab7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ab80:	801a      	strh	r2, [r3, #0]
 800ab82:	e054      	b.n	800ac2e <USB_EPStartXfer+0x1560>
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab88:	095b      	lsrs	r3, r3, #5
 800ab8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ab8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab92:	f003 031f 	and.w	r3, r3, #31
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d104      	bne.n	800aba4 <USB_EPStartXfer+0x14d6>
 800ab9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800aba4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29a      	uxth	r2, r3
 800abac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	029b      	lsls	r3, r3, #10
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	4313      	orrs	r3, r2
 800abb8:	b29b      	uxth	r3, r3
 800abba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800abc8:	801a      	strh	r2, [r3, #0]
 800abca:	e030      	b.n	800ac2e <USB_EPStartXfer+0x1560>
 800abcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	785b      	ldrb	r3, [r3, #1]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d128      	bne.n	800ac2e <USB_EPStartXfer+0x1560>
 800abdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800abea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac00:	4413      	add	r3, r2
 800ac02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ac06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	00da      	lsls	r2, r3, #3
 800ac14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac18:	4413      	add	r3, r2
 800ac1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac26:	b29a      	uxth	r2, r3
 800ac28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800ac2c:	801a      	strh	r2, [r3, #0]
 800ac2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ac3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	785b      	ldrb	r3, [r3, #1]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f040 8085 	bne.w	800ad58 <USB_EPStartXfer+0x168a>
 800ac4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac72:	4413      	add	r3, r2
 800ac74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800ac78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	00da      	lsls	r2, r3, #3
 800ac86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ac90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ac98:	881b      	ldrh	r3, [r3, #0]
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acac:	2b00      	cmp	r3, #0
 800acae:	d10c      	bne.n	800acca <USB_EPStartXfer+0x15fc>
 800acb0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acb4:	881b      	ldrh	r3, [r3, #0]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acc6:	801a      	strh	r2, [r3, #0]
 800acc8:	e073      	b.n	800adb2 <USB_EPStartXfer+0x16e4>
 800acca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acce:	2b3e      	cmp	r3, #62	@ 0x3e
 800acd0:	d81e      	bhi.n	800ad10 <USB_EPStartXfer+0x1642>
 800acd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acd6:	085b      	lsrs	r3, r3, #1
 800acd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800acdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace0:	f003 0301 	and.w	r3, r3, #1
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d004      	beq.n	800acf2 <USB_EPStartXfer+0x1624>
 800ace8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acec:	3301      	adds	r3, #1
 800acee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800acf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	b29a      	uxth	r2, r3
 800acfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	029b      	lsls	r3, r3, #10
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	4313      	orrs	r3, r2
 800ad06:	b29a      	uxth	r2, r3
 800ad08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad0c:	801a      	strh	r2, [r3, #0]
 800ad0e:	e050      	b.n	800adb2 <USB_EPStartXfer+0x16e4>
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad14:	095b      	lsrs	r3, r3, #5
 800ad16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad1e:	f003 031f 	and.w	r3, r3, #31
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d104      	bne.n	800ad30 <USB_EPStartXfer+0x1662>
 800ad26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ad30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	029b      	lsls	r3, r3, #10
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	4313      	orrs	r3, r2
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad54:	801a      	strh	r2, [r3, #0]
 800ad56:	e02c      	b.n	800adb2 <USB_EPStartXfer+0x16e4>
 800ad58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	785b      	ldrb	r3, [r3, #1]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d124      	bne.n	800adb2 <USB_EPStartXfer+0x16e4>
 800ad68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad7e:	4413      	add	r3, r2
 800ad80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ad84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	00da      	lsls	r2, r3, #3
 800ad92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ad96:	4413      	add	r3, r2
 800ad98:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ada0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800adaa:	801a      	strh	r2, [r3, #0]
 800adac:	e001      	b.n	800adb2 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e03a      	b.n	800ae28 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	4413      	add	r3, r2
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	b29b      	uxth	r3, r3
 800add0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800add4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800add8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800addc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ade0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ade4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ade8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800adec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800adf0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800adf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	441a      	add	r2, r3
 800ae0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ae12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	785b      	ldrb	r3, [r3, #1]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d020      	beq.n	800ae86 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4413      	add	r3, r2
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae5a:	81bb      	strh	r3, [r7, #12]
 800ae5c:	89bb      	ldrh	r3, [r7, #12]
 800ae5e:	f083 0310 	eor.w	r3, r3, #16
 800ae62:	81bb      	strh	r3, [r7, #12]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	441a      	add	r2, r3
 800ae6e:	89bb      	ldrh	r3, [r7, #12]
 800ae70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae80:	b29b      	uxth	r3, r3
 800ae82:	8013      	strh	r3, [r2, #0]
 800ae84:	e01f      	b.n	800aec6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ae86:	687a      	ldr	r2, [r7, #4]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	781b      	ldrb	r3, [r3, #0]
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	4413      	add	r3, r2
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae9c:	81fb      	strh	r3, [r7, #14]
 800ae9e:	89fb      	ldrh	r3, [r7, #14]
 800aea0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aea4:	81fb      	strh	r3, [r7, #14]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	441a      	add	r2, r3
 800aeb0:	89fb      	ldrh	r3, [r7, #14]
 800aeb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aeba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3714      	adds	r7, #20
 800aecc:	46bd      	mov	sp, r7
 800aece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed2:	4770      	bx	lr

0800aed4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	7b1b      	ldrb	r3, [r3, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f040 809d 	bne.w	800b022 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d04c      	beq.n	800af8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	4413      	add	r3, r2
 800aefa:	881b      	ldrh	r3, [r3, #0]
 800aefc:	823b      	strh	r3, [r7, #16]
 800aefe:	8a3b      	ldrh	r3, [r7, #16]
 800af00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af04:	2b00      	cmp	r3, #0
 800af06:	d01b      	beq.n	800af40 <USB_EPClearStall+0x6c>
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	b29b      	uxth	r3, r3
 800af16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af1e:	81fb      	strh	r3, [r7, #14]
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	441a      	add	r2, r3
 800af2a:	89fb      	ldrh	r3, [r7, #14]
 800af2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	78db      	ldrb	r3, [r3, #3]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d06c      	beq.n	800b022 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	009b      	lsls	r3, r3, #2
 800af50:	4413      	add	r3, r2
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	b29b      	uxth	r3, r3
 800af56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af5e:	81bb      	strh	r3, [r7, #12]
 800af60:	89bb      	ldrh	r3, [r7, #12]
 800af62:	f083 0320 	eor.w	r3, r3, #32
 800af66:	81bb      	strh	r3, [r7, #12]
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	441a      	add	r2, r3
 800af72:	89bb      	ldrh	r3, [r7, #12]
 800af74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af84:	b29b      	uxth	r3, r3
 800af86:	8013      	strh	r3, [r2, #0]
 800af88:	e04b      	b.n	800b022 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	781b      	ldrb	r3, [r3, #0]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	881b      	ldrh	r3, [r3, #0]
 800af96:	82fb      	strh	r3, [r7, #22]
 800af98:	8afb      	ldrh	r3, [r7, #22]
 800af9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d01b      	beq.n	800afda <USB_EPClearStall+0x106>
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	881b      	ldrh	r3, [r3, #0]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afb8:	82bb      	strh	r3, [r7, #20]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	441a      	add	r2, r3
 800afc4:	8abb      	ldrh	r3, [r7, #20]
 800afc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aff0:	827b      	strh	r3, [r7, #18]
 800aff2:	8a7b      	ldrh	r3, [r7, #18]
 800aff4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aff8:	827b      	strh	r3, [r7, #18]
 800affa:	8a7b      	ldrh	r3, [r7, #18]
 800affc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b000:	827b      	strh	r3, [r7, #18]
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	441a      	add	r2, r3
 800b00c:	8a7b      	ldrh	r3, [r7, #18]
 800b00e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b01e:	b29b      	uxth	r3, r3
 800b020:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b022:	2300      	movs	r3, #0
}
 800b024:	4618      	mov	r0, r3
 800b026:	371c      	adds	r7, #28
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d103      	bne.n	800b04a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2280      	movs	r2, #128	@ 0x80
 800b046:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b066:	b29b      	uxth	r3, r3
 800b068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b06c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b070:	b29a      	uxth	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	370c      	adds	r7, #12
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr

0800b086 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b086:	b480      	push	{r7}
 800b088:	b085      	sub	sp, #20
 800b08a:	af00      	add	r7, sp, #0
 800b08c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800b094:	b29b      	uxth	r3, r3
 800b096:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b098:	68fb      	ldr	r3, [r7, #12]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3714      	adds	r7, #20
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b0a6:	b480      	push	{r7}
 800b0a8:	b08b      	sub	sp, #44	@ 0x2c
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	60f8      	str	r0, [r7, #12]
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	4611      	mov	r1, r2
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	460b      	mov	r3, r1
 800b0b6:	80fb      	strh	r3, [r7, #6]
 800b0b8:	4613      	mov	r3, r2
 800b0ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b0bc:	88bb      	ldrh	r3, [r7, #4]
 800b0be:	3301      	adds	r3, #1
 800b0c0:	085b      	lsrs	r3, r3, #1
 800b0c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b0cc:	88fa      	ldrh	r2, [r7, #6]
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b0d6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800b0dc:	e01b      	b.n	800b116 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	b21a      	sxth	r2, r3
 800b0ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b0f2:	4313      	orrs	r3, r2
 800b0f4:	b21b      	sxth	r3, r3
 800b0f6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	8a7a      	ldrh	r2, [r7, #18]
 800b0fc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	3302      	adds	r3, #2
 800b102:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	3301      	adds	r3, #1
 800b108:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	3301      	adds	r3, #1
 800b10e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	3b01      	subs	r3, #1
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e0      	bne.n	800b0de <USB_WritePMA+0x38>
  }
}
 800b11c:	bf00      	nop
 800b11e:	bf00      	nop
 800b120:	372c      	adds	r7, #44	@ 0x2c
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b12a:	b480      	push	{r7}
 800b12c:	b08b      	sub	sp, #44	@ 0x2c
 800b12e:	af00      	add	r7, sp, #0
 800b130:	60f8      	str	r0, [r7, #12]
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	4611      	mov	r1, r2
 800b136:	461a      	mov	r2, r3
 800b138:	460b      	mov	r3, r1
 800b13a:	80fb      	strh	r3, [r7, #6]
 800b13c:	4613      	mov	r3, r2
 800b13e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b140:	88bb      	ldrh	r3, [r7, #4]
 800b142:	085b      	lsrs	r3, r3, #1
 800b144:	b29b      	uxth	r3, r3
 800b146:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b150:	88fa      	ldrh	r2, [r7, #6]
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	4413      	add	r3, r2
 800b156:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b15a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b160:	e018      	b.n	800b194 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b16a:	6a3b      	ldr	r3, [r7, #32]
 800b16c:	3302      	adds	r3, #2
 800b16e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	b2da      	uxtb	r2, r3
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	3301      	adds	r3, #1
 800b17c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	0a1b      	lsrs	r3, r3, #8
 800b182:	b2da      	uxtb	r2, r3
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	3301      	adds	r3, #1
 800b18c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b190:	3b01      	subs	r3, #1
 800b192:	627b      	str	r3, [r7, #36]	@ 0x24
 800b194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b196:	2b00      	cmp	r3, #0
 800b198:	d1e3      	bne.n	800b162 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b19a:	88bb      	ldrh	r3, [r7, #4]
 800b19c:	f003 0301 	and.w	r3, r3, #1
 800b1a0:	b29b      	uxth	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d007      	beq.n	800b1b6 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	881b      	ldrh	r3, [r3, #0]
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	b2da      	uxtb	r2, r3
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	701a      	strb	r2, [r3, #0]
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	372c      	adds	r7, #44	@ 0x2c
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c0:	4770      	bx	lr

0800b1c2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b1ce:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b1d2:	f002 f8f9 	bl	800d3c8 <USBD_static_malloc>
 800b1d6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d105      	bne.n	800b1ea <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	e066      	b.n	800b2b8 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	7c1b      	ldrb	r3, [r3, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d119      	bne.n	800b22e <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b1fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1fe:	2202      	movs	r2, #2
 800b200:	2181      	movs	r1, #129	@ 0x81
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f001 ff87 	bl	800d116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b20e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b212:	2202      	movs	r2, #2
 800b214:	2101      	movs	r1, #1
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 ff7d 	bl	800d116 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2210      	movs	r2, #16
 800b228:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800b22c:	e016      	b.n	800b25c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b22e:	2340      	movs	r3, #64	@ 0x40
 800b230:	2202      	movs	r2, #2
 800b232:	2181      	movs	r1, #129	@ 0x81
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f001 ff6e 	bl	800d116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2201      	movs	r2, #1
 800b23e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b240:	2340      	movs	r3, #64	@ 0x40
 800b242:	2202      	movs	r2, #2
 800b244:	2101      	movs	r1, #1
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f001 ff65 	bl	800d116 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2201      	movs	r2, #1
 800b250:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2210      	movs	r2, #16
 800b258:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b25c:	2308      	movs	r3, #8
 800b25e:	2203      	movs	r2, #3
 800b260:	2182      	movs	r1, #130	@ 0x82
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f001 ff57 	bl	800d116 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2200      	movs	r2, #0
 800b27e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	7c1b      	ldrb	r3, [r3, #16]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d109      	bne.n	800b2a6 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b29c:	2101      	movs	r1, #1
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f002 f828 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800b2a4:	e007      	b.n	800b2b6 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2ac:	2340      	movs	r3, #64	@ 0x40
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f002 f81f 	bl	800d2f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2b6:	2300      	movs	r3, #0
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3710      	adds	r7, #16
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	460b      	mov	r3, r1
 800b2ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b2cc:	2181      	movs	r1, #129	@ 0x81
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f001 ff47 	bl	800d162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b2da:	2101      	movs	r1, #1
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f001 ff40 	bl	800d162 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b2ea:	2182      	movs	r1, #130	@ 0x82
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f001 ff38 	bl	800d162 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00e      	beq.n	800b32a <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b312:	685b      	ldr	r3, [r3, #4]
 800b314:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b31c:	4618      	mov	r0, r3
 800b31e:	f002 f861 	bl	800d3e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b344:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b346:	2300      	movs	r3, #0
 800b348:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b34e:	2300      	movs	r3, #0
 800b350:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b358:	2303      	movs	r3, #3
 800b35a:	e0af      	b.n	800b4bc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b364:	2b00      	cmp	r3, #0
 800b366:	d03f      	beq.n	800b3e8 <USBD_CDC_Setup+0xb4>
 800b368:	2b20      	cmp	r3, #32
 800b36a:	f040 809f 	bne.w	800b4ac <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	88db      	ldrh	r3, [r3, #6]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d02e      	beq.n	800b3d4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	b25b      	sxtb	r3, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	da16      	bge.n	800b3ae <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	683a      	ldr	r2, [r7, #0]
 800b38a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b38c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b38e:	683a      	ldr	r2, [r7, #0]
 800b390:	88d2      	ldrh	r2, [r2, #6]
 800b392:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	88db      	ldrh	r3, [r3, #6]
 800b398:	2b07      	cmp	r3, #7
 800b39a:	bf28      	it	cs
 800b39c:	2307      	movcs	r3, #7
 800b39e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	89fa      	ldrh	r2, [r7, #14]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f001 facd 	bl	800c946 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b3ac:	e085      	b.n	800b4ba <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	785a      	ldrb	r2, [r3, #1]
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	88db      	ldrh	r3, [r3, #6]
 800b3bc:	b2da      	uxtb	r2, r3
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b3c4:	6939      	ldr	r1, [r7, #16]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	88db      	ldrh	r3, [r3, #6]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f001 fae6 	bl	800c99e <USBD_CtlPrepareRx>
      break;
 800b3d2:	e072      	b.n	800b4ba <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	7850      	ldrb	r0, [r2, #1]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	6839      	ldr	r1, [r7, #0]
 800b3e4:	4798      	blx	r3
      break;
 800b3e6:	e068      	b.n	800b4ba <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b3e8:	683b      	ldr	r3, [r7, #0]
 800b3ea:	785b      	ldrb	r3, [r3, #1]
 800b3ec:	2b0b      	cmp	r3, #11
 800b3ee:	d852      	bhi.n	800b496 <USBD_CDC_Setup+0x162>
 800b3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f8 <USBD_CDC_Setup+0xc4>)
 800b3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f6:	bf00      	nop
 800b3f8:	0800b429 	.word	0x0800b429
 800b3fc:	0800b4a5 	.word	0x0800b4a5
 800b400:	0800b497 	.word	0x0800b497
 800b404:	0800b497 	.word	0x0800b497
 800b408:	0800b497 	.word	0x0800b497
 800b40c:	0800b497 	.word	0x0800b497
 800b410:	0800b497 	.word	0x0800b497
 800b414:	0800b497 	.word	0x0800b497
 800b418:	0800b497 	.word	0x0800b497
 800b41c:	0800b497 	.word	0x0800b497
 800b420:	0800b453 	.word	0x0800b453
 800b424:	0800b47d 	.word	0x0800b47d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b03      	cmp	r3, #3
 800b432:	d107      	bne.n	800b444 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b434:	f107 030a 	add.w	r3, r7, #10
 800b438:	2202      	movs	r2, #2
 800b43a:	4619      	mov	r1, r3
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 fa82 	bl	800c946 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b442:	e032      	b.n	800b4aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b444:	6839      	ldr	r1, [r7, #0]
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f001 fa0c 	bl	800c864 <USBD_CtlError>
            ret = USBD_FAIL;
 800b44c:	2303      	movs	r3, #3
 800b44e:	75fb      	strb	r3, [r7, #23]
          break;
 800b450:	e02b      	b.n	800b4aa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b458:	b2db      	uxtb	r3, r3
 800b45a:	2b03      	cmp	r3, #3
 800b45c:	d107      	bne.n	800b46e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b45e:	f107 030d 	add.w	r3, r7, #13
 800b462:	2201      	movs	r2, #1
 800b464:	4619      	mov	r1, r3
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f001 fa6d 	bl	800c946 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b46c:	e01d      	b.n	800b4aa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f001 f9f7 	bl	800c864 <USBD_CtlError>
            ret = USBD_FAIL;
 800b476:	2303      	movs	r3, #3
 800b478:	75fb      	strb	r3, [r7, #23]
          break;
 800b47a:	e016      	b.n	800b4aa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b03      	cmp	r3, #3
 800b486:	d00f      	beq.n	800b4a8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f001 f9ea 	bl	800c864 <USBD_CtlError>
            ret = USBD_FAIL;
 800b490:	2303      	movs	r3, #3
 800b492:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b494:	e008      	b.n	800b4a8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b496:	6839      	ldr	r1, [r7, #0]
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f001 f9e3 	bl	800c864 <USBD_CtlError>
          ret = USBD_FAIL;
 800b49e:	2303      	movs	r3, #3
 800b4a0:	75fb      	strb	r3, [r7, #23]
          break;
 800b4a2:	e002      	b.n	800b4aa <USBD_CDC_Setup+0x176>
          break;
 800b4a4:	bf00      	nop
 800b4a6:	e008      	b.n	800b4ba <USBD_CDC_Setup+0x186>
          break;
 800b4a8:	bf00      	nop
      }
      break;
 800b4aa:	e006      	b.n	800b4ba <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f001 f9d8 	bl	800c864 <USBD_CtlError>
      ret = USBD_FAIL;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b4ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3718      	adds	r7, #24
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b4d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4e2:	2303      	movs	r3, #3
 800b4e4:	e04f      	b.n	800b586 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b4ec:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b4ee:	78fa      	ldrb	r2, [r7, #3]
 800b4f0:	6879      	ldr	r1, [r7, #4]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	3318      	adds	r3, #24
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d029      	beq.n	800b558 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b504:	78fa      	ldrb	r2, [r7, #3]
 800b506:	6879      	ldr	r1, [r7, #4]
 800b508:	4613      	mov	r3, r2
 800b50a:	009b      	lsls	r3, r3, #2
 800b50c:	4413      	add	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	440b      	add	r3, r1
 800b512:	3318      	adds	r3, #24
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	78f9      	ldrb	r1, [r7, #3]
 800b518:	68f8      	ldr	r0, [r7, #12]
 800b51a:	460b      	mov	r3, r1
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	440b      	add	r3, r1
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	4403      	add	r3, r0
 800b524:	3320      	adds	r3, #32
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	fbb2 f1f3 	udiv	r1, r2, r3
 800b52c:	fb01 f303 	mul.w	r3, r1, r3
 800b530:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b532:	2b00      	cmp	r3, #0
 800b534:	d110      	bne.n	800b558 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b536:	78fa      	ldrb	r2, [r7, #3]
 800b538:	6879      	ldr	r1, [r7, #4]
 800b53a:	4613      	mov	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	440b      	add	r3, r1
 800b544:	3318      	adds	r3, #24
 800b546:	2200      	movs	r2, #0
 800b548:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b54a:	78f9      	ldrb	r1, [r7, #3]
 800b54c:	2300      	movs	r3, #0
 800b54e:	2200      	movs	r2, #0
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f001 feae 	bl	800d2b2 <USBD_LL_Transmit>
 800b556:	e015      	b.n	800b584 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2200      	movs	r2, #0
 800b55c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00b      	beq.n	800b584 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b57a:	68ba      	ldr	r2, [r7, #8]
 800b57c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b580:	78fa      	ldrb	r2, [r7, #3]
 800b582:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
 800b596:	460b      	mov	r3, r1
 800b598:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b5ac:	2303      	movs	r3, #3
 800b5ae:	e015      	b.n	800b5dc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b5b0:	78fb      	ldrb	r3, [r7, #3]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f001 febe 	bl	800d336 <USBD_LL_GetRxDataSize>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b5d0:	68fa      	ldr	r2, [r7, #12]
 800b5d2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b5d6:	4611      	mov	r1, r2
 800b5d8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3710      	adds	r7, #16
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d101      	bne.n	800b5fe <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b5fa:	2303      	movs	r3, #3
 800b5fc:	e01a      	b.n	800b634 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b604:	2b00      	cmp	r3, #0
 800b606:	d014      	beq.n	800b632 <USBD_CDC_EP0_RxReady+0x4e>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b60e:	2bff      	cmp	r3, #255	@ 0xff
 800b610:	d00f      	beq.n	800b632 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	68fa      	ldr	r2, [r7, #12]
 800b61c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b620:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b628:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	22ff      	movs	r2, #255	@ 0xff
 800b62e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3710      	adds	r7, #16
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b083      	sub	sp, #12
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2243      	movs	r2, #67	@ 0x43
 800b648:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b64a:	4b03      	ldr	r3, [pc, #12]	@ (800b658 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	370c      	adds	r7, #12
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr
 800b658:	20000094 	.word	0x20000094

0800b65c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2243      	movs	r2, #67	@ 0x43
 800b668:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b66a:	4b03      	ldr	r3, [pc, #12]	@ (800b678 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr
 800b678:	20000050 	.word	0x20000050

0800b67c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2243      	movs	r2, #67	@ 0x43
 800b688:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b68a:	4b03      	ldr	r3, [pc, #12]	@ (800b698 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	200000d8 	.word	0x200000d8

0800b69c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b69c:	b480      	push	{r7}
 800b69e:	b083      	sub	sp, #12
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	220a      	movs	r2, #10
 800b6a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6aa:	4b03      	ldr	r3, [pc, #12]	@ (800b6b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	2000000c 	.word	0x2000000c

0800b6bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d101      	bne.n	800b6d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6cc:	2303      	movs	r3, #3
 800b6ce:	e004      	b.n	800b6da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b087      	sub	sp, #28
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	60f8      	str	r0, [r7, #12]
 800b6ee:	60b9      	str	r1, [r7, #8]
 800b6f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b6f8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b700:	2303      	movs	r3, #3
 800b702:	e008      	b.n	800b716 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr

0800b722 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b722:	b480      	push	{r7}
 800b724:	b085      	sub	sp, #20
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
 800b72a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b732:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d101      	bne.n	800b73e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b73a:	2303      	movs	r3, #3
 800b73c:	e004      	b.n	800b748 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b746:	2300      	movs	r3, #0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b762:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b764:	2301      	movs	r3, #1
 800b766:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d101      	bne.n	800b776 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b772:	2303      	movs	r3, #3
 800b774:	e01a      	b.n	800b7ac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d114      	bne.n	800b7aa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2201      	movs	r2, #1
 800b784:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b79e:	2181      	movs	r1, #129	@ 0x81
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 fd86 	bl	800d2b2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3710      	adds	r7, #16
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b7ce:	2303      	movs	r3, #3
 800b7d0:	e016      	b.n	800b800 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7c1b      	ldrb	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d109      	bne.n	800b7ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b7e4:	2101      	movs	r1, #1
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 fd84 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800b7ec:	e007      	b.n	800b7fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b7f4:	2340      	movs	r3, #64	@ 0x40
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f001 fd7b 	bl	800d2f4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b7fe:	2300      	movs	r3, #0
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b086      	sub	sp, #24
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	60f8      	str	r0, [r7, #12]
 800b810:	60b9      	str	r1, [r7, #8]
 800b812:	4613      	mov	r3, r2
 800b814:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d101      	bne.n	800b820 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b81c:	2303      	movs	r3, #3
 800b81e:	e01f      	b.n	800b860 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d003      	beq.n	800b846 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2201      	movs	r2, #1
 800b84a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	79fa      	ldrb	r2, [r7, #7]
 800b852:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b854:	68f8      	ldr	r0, [r7, #12]
 800b856:	f001 fbe3 	bl	800d020 <USBD_LL_Init>
 800b85a:	4603      	mov	r3, r0
 800b85c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b860:	4618      	mov	r0, r3
 800b862:	3718      	adds	r7, #24
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d101      	bne.n	800b880 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e016      	b.n	800b8ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	683a      	ldr	r2, [r7, #0]
 800b884:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00b      	beq.n	800b8ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b89a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b89c:	f107 020e 	add.w	r2, r7, #14
 800b8a0:	4610      	mov	r0, r2
 800b8a2:	4798      	blx	r3
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f001 fc0e 	bl	800d0e0 <USBD_LL_Start>
 800b8c4:	4603      	mov	r3, r0
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3708      	adds	r7, #8
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}

0800b8ce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	b083      	sub	sp, #12
 800b8d2:	af00      	add	r7, sp, #0
 800b8d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	370c      	adds	r7, #12
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b084      	sub	sp, #16
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	460b      	mov	r3, r1
 800b8ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d009      	beq.n	800b912 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	78fa      	ldrb	r2, [r7, #3]
 800b908:	4611      	mov	r1, r2
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	4798      	blx	r3
 800b90e:	4603      	mov	r3, r0
 800b910:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b912:	7bfb      	ldrb	r3, [r7, #15]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	460b      	mov	r3, r1
 800b926:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d007      	beq.n	800b942 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	78fa      	ldrb	r2, [r7, #3]
 800b93c:	4611      	mov	r1, r2
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
  }

  return USBD_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3708      	adds	r7, #8
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b95c:	6839      	ldr	r1, [r7, #0]
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 ff46 	bl	800c7f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b972:	461a      	mov	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b980:	f003 031f 	and.w	r3, r3, #31
 800b984:	2b02      	cmp	r3, #2
 800b986:	d01a      	beq.n	800b9be <USBD_LL_SetupStage+0x72>
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d822      	bhi.n	800b9d2 <USBD_LL_SetupStage+0x86>
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d002      	beq.n	800b996 <USBD_LL_SetupStage+0x4a>
 800b990:	2b01      	cmp	r3, #1
 800b992:	d00a      	beq.n	800b9aa <USBD_LL_SetupStage+0x5e>
 800b994:	e01d      	b.n	800b9d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b99c:	4619      	mov	r1, r3
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 f9ee 	bl	800bd80 <USBD_StdDevReq>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a8:	e020      	b.n	800b9ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 fa52 	bl	800be5c <USBD_StdItfReq>
 800b9b8:	4603      	mov	r3, r0
 800b9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b9bc:	e016      	b.n	800b9ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fa91 	bl	800beee <USBD_StdEPReq>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b9d0:	e00c      	b.n	800b9ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b9d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	4619      	mov	r1, r3
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 fbdd 	bl	800d1a0 <USBD_LL_StallEP>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b9ea:	bf00      	nop
  }

  return ret;
 800b9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b086      	sub	sp, #24
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	60f8      	str	r0, [r7, #12]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	607a      	str	r2, [r7, #4]
 800ba02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba04:	7afb      	ldrb	r3, [r7, #11]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d138      	bne.n	800ba7c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ba10:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d14a      	bne.n	800bab2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	689a      	ldr	r2, [r3, #8]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	68db      	ldr	r3, [r3, #12]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d913      	bls.n	800ba50 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	689a      	ldr	r2, [r3, #8]
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	68db      	ldr	r3, [r3, #12]
 800ba30:	1ad2      	subs	r2, r2, r3
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	68da      	ldr	r2, [r3, #12]
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	689b      	ldr	r3, [r3, #8]
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	bf28      	it	cs
 800ba42:	4613      	movcs	r3, r2
 800ba44:	461a      	mov	r2, r3
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 ffc5 	bl	800c9d8 <USBD_CtlContinueRx>
 800ba4e:	e030      	b.n	800bab2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	2b03      	cmp	r3, #3
 800ba5a:	d10b      	bne.n	800ba74 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d005      	beq.n	800ba74 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba6e:	691b      	ldr	r3, [r3, #16]
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f000 ffc0 	bl	800c9fa <USBD_CtlSendStatus>
 800ba7a:	e01a      	b.n	800bab2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d114      	bne.n	800bab2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00e      	beq.n	800bab2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba9a:	699b      	ldr	r3, [r3, #24]
 800ba9c:	7afa      	ldrb	r2, [r7, #11]
 800ba9e:	4611      	mov	r1, r2
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	4798      	blx	r3
 800baa4:	4603      	mov	r3, r0
 800baa6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800baae:	7dfb      	ldrb	r3, [r7, #23]
 800bab0:	e000      	b.n	800bab4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3718      	adds	r7, #24
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	460b      	mov	r3, r1
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800baca:	7afb      	ldrb	r3, [r7, #11]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d16b      	bne.n	800bba8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	3314      	adds	r3, #20
 800bad4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800badc:	2b02      	cmp	r3, #2
 800bade:	d156      	bne.n	800bb8e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	68db      	ldr	r3, [r3, #12]
 800bae8:	429a      	cmp	r2, r3
 800baea:	d914      	bls.n	800bb16 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	689a      	ldr	r2, [r3, #8]
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	1ad2      	subs	r2, r2, r3
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	461a      	mov	r2, r3
 800bb00:	6879      	ldr	r1, [r7, #4]
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 ff3a 	bl	800c97c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb08:	2300      	movs	r3, #0
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f001 fbf0 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800bb14:	e03b      	b.n	800bb8e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d11c      	bne.n	800bb5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d316      	bcc.n	800bb5c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d20f      	bcs.n	800bb5c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	2100      	movs	r1, #0
 800bb40:	68f8      	ldr	r0, [r7, #12]
 800bb42:	f000 ff1b 	bl	800c97c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb4e:	2300      	movs	r3, #0
 800bb50:	2200      	movs	r2, #0
 800bb52:	2100      	movs	r1, #0
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f001 fbcd 	bl	800d2f4 <USBD_LL_PrepareReceive>
 800bb5a:	e018      	b.n	800bb8e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d10b      	bne.n	800bb80 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d005      	beq.n	800bb80 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb80:	2180      	movs	r1, #128	@ 0x80
 800bb82:	68f8      	ldr	r0, [r7, #12]
 800bb84:	f001 fb0c 	bl	800d1a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 ff49 	bl	800ca20 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d122      	bne.n	800bbde <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bb98:	68f8      	ldr	r0, [r7, #12]
 800bb9a:	f7ff fe98 	bl	800b8ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2200      	movs	r2, #0
 800bba2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800bba6:	e01a      	b.n	800bbde <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	2b03      	cmp	r3, #3
 800bbb2:	d114      	bne.n	800bbde <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbba:	695b      	ldr	r3, [r3, #20]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00e      	beq.n	800bbde <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	7afa      	ldrb	r2, [r7, #11]
 800bbca:	4611      	mov	r1, r2
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	4798      	blx	r3
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d001      	beq.n	800bbde <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bbda:	7dfb      	ldrb	r3, [r7, #23]
 800bbdc:	e000      	b.n	800bbe0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3718      	adds	r7, #24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b082      	sub	sp, #8
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d101      	bne.n	800bc1c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bc18:	2303      	movs	r3, #3
 800bc1a:	e02f      	b.n	800bc7c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d00f      	beq.n	800bc46 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d009      	beq.n	800bc46 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	6852      	ldr	r2, [r2, #4]
 800bc3e:	b2d2      	uxtb	r2, r2
 800bc40:	4611      	mov	r1, r2
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc46:	2340      	movs	r3, #64	@ 0x40
 800bc48:	2200      	movs	r2, #0
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f001 fa62 	bl	800d116 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2240      	movs	r2, #64	@ 0x40
 800bc5e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc62:	2340      	movs	r3, #64	@ 0x40
 800bc64:	2200      	movs	r2, #0
 800bc66:	2180      	movs	r1, #128	@ 0x80
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f001 fa54 	bl	800d116 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2240      	movs	r2, #64	@ 0x40
 800bc78:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3708      	adds	r7, #8
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	460b      	mov	r3, r1
 800bc8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	78fa      	ldrb	r2, [r7, #3]
 800bc94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcb2:	b2da      	uxtb	r2, r3
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2204      	movs	r2, #4
 800bcbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	d106      	bne.n	800bcf2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bcea:	b2da      	uxtb	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d101      	bne.n	800bd16 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e012      	b.n	800bd3c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b03      	cmp	r3, #3
 800bd20:	d10b      	bne.n	800bd3a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d005      	beq.n	800bd3a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd34:	69db      	ldr	r3, [r3, #28]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b087      	sub	sp, #28
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd62:	8a3b      	ldrh	r3, [r7, #16]
 800bd64:	021b      	lsls	r3, r3, #8
 800bd66:	b21a      	sxth	r2, r3
 800bd68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd6c:	4313      	orrs	r3, r2
 800bd6e:	b21b      	sxth	r3, r3
 800bd70:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd72:	89fb      	ldrh	r3, [r7, #14]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	371c      	adds	r7, #28
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd96:	2b40      	cmp	r3, #64	@ 0x40
 800bd98:	d005      	beq.n	800bda6 <USBD_StdDevReq+0x26>
 800bd9a:	2b40      	cmp	r3, #64	@ 0x40
 800bd9c:	d853      	bhi.n	800be46 <USBD_StdDevReq+0xc6>
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00b      	beq.n	800bdba <USBD_StdDevReq+0x3a>
 800bda2:	2b20      	cmp	r3, #32
 800bda4:	d14f      	bne.n	800be46 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	4798      	blx	r3
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	73fb      	strb	r3, [r7, #15]
      break;
 800bdb8:	e04a      	b.n	800be50 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	785b      	ldrb	r3, [r3, #1]
 800bdbe:	2b09      	cmp	r3, #9
 800bdc0:	d83b      	bhi.n	800be3a <USBD_StdDevReq+0xba>
 800bdc2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdc8 <USBD_StdDevReq+0x48>)
 800bdc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdc8:	0800be1d 	.word	0x0800be1d
 800bdcc:	0800be31 	.word	0x0800be31
 800bdd0:	0800be3b 	.word	0x0800be3b
 800bdd4:	0800be27 	.word	0x0800be27
 800bdd8:	0800be3b 	.word	0x0800be3b
 800bddc:	0800bdfb 	.word	0x0800bdfb
 800bde0:	0800bdf1 	.word	0x0800bdf1
 800bde4:	0800be3b 	.word	0x0800be3b
 800bde8:	0800be13 	.word	0x0800be13
 800bdec:	0800be05 	.word	0x0800be05
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bdf0:	6839      	ldr	r1, [r7, #0]
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f9de 	bl	800c1b4 <USBD_GetDescriptor>
          break;
 800bdf8:	e024      	b.n	800be44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fb6d 	bl	800c4dc <USBD_SetAddress>
          break;
 800be02:	e01f      	b.n	800be44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be04:	6839      	ldr	r1, [r7, #0]
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fbac 	bl	800c564 <USBD_SetConfig>
 800be0c:	4603      	mov	r3, r0
 800be0e:	73fb      	strb	r3, [r7, #15]
          break;
 800be10:	e018      	b.n	800be44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fc4b 	bl	800c6b0 <USBD_GetConfig>
          break;
 800be1a:	e013      	b.n	800be44 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be1c:	6839      	ldr	r1, [r7, #0]
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 fc7c 	bl	800c71c <USBD_GetStatus>
          break;
 800be24:	e00e      	b.n	800be44 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fcab 	bl	800c784 <USBD_SetFeature>
          break;
 800be2e:	e009      	b.n	800be44 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fcba 	bl	800c7ac <USBD_ClrFeature>
          break;
 800be38:	e004      	b.n	800be44 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fd11 	bl	800c864 <USBD_CtlError>
          break;
 800be42:	bf00      	nop
      }
      break;
 800be44:	e004      	b.n	800be50 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fd0b 	bl	800c864 <USBD_CtlError>
      break;
 800be4e:	bf00      	nop
  }

  return ret;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop

0800be5c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
 800be64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be66:	2300      	movs	r3, #0
 800be68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be72:	2b40      	cmp	r3, #64	@ 0x40
 800be74:	d005      	beq.n	800be82 <USBD_StdItfReq+0x26>
 800be76:	2b40      	cmp	r3, #64	@ 0x40
 800be78:	d82f      	bhi.n	800beda <USBD_StdItfReq+0x7e>
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <USBD_StdItfReq+0x26>
 800be7e:	2b20      	cmp	r3, #32
 800be80:	d12b      	bne.n	800beda <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	3b01      	subs	r3, #1
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d81d      	bhi.n	800becc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	889b      	ldrh	r3, [r3, #4]
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2b01      	cmp	r3, #1
 800be98:	d813      	bhi.n	800bec2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	6839      	ldr	r1, [r7, #0]
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	4798      	blx	r3
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	88db      	ldrh	r3, [r3, #6]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d110      	bne.n	800bed6 <USBD_StdItfReq+0x7a>
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10d      	bne.n	800bed6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 fd9d 	bl	800c9fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bec0:	e009      	b.n	800bed6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bec2:	6839      	ldr	r1, [r7, #0]
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 fccd 	bl	800c864 <USBD_CtlError>
          break;
 800beca:	e004      	b.n	800bed6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800becc:	6839      	ldr	r1, [r7, #0]
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fcc8 	bl	800c864 <USBD_CtlError>
          break;
 800bed4:	e000      	b.n	800bed8 <USBD_StdItfReq+0x7c>
          break;
 800bed6:	bf00      	nop
      }
      break;
 800bed8:	e004      	b.n	800bee4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fcc1 	bl	800c864 <USBD_CtlError>
      break;
 800bee2:	bf00      	nop
  }

  return ret;
 800bee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3710      	adds	r7, #16
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}

0800beee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beee:	b580      	push	{r7, lr}
 800bef0:	b084      	sub	sp, #16
 800bef2:	af00      	add	r7, sp, #0
 800bef4:	6078      	str	r0, [r7, #4]
 800bef6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bef8:	2300      	movs	r3, #0
 800befa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	889b      	ldrh	r3, [r3, #4]
 800bf00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf0a:	2b40      	cmp	r3, #64	@ 0x40
 800bf0c:	d007      	beq.n	800bf1e <USBD_StdEPReq+0x30>
 800bf0e:	2b40      	cmp	r3, #64	@ 0x40
 800bf10:	f200 8145 	bhi.w	800c19e <USBD_StdEPReq+0x2b0>
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00c      	beq.n	800bf32 <USBD_StdEPReq+0x44>
 800bf18:	2b20      	cmp	r3, #32
 800bf1a:	f040 8140 	bne.w	800c19e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	6839      	ldr	r1, [r7, #0]
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	4798      	blx	r3
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	73fb      	strb	r3, [r7, #15]
      break;
 800bf30:	e13a      	b.n	800c1a8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	785b      	ldrb	r3, [r3, #1]
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d007      	beq.n	800bf4a <USBD_StdEPReq+0x5c>
 800bf3a:	2b03      	cmp	r3, #3
 800bf3c:	f300 8129 	bgt.w	800c192 <USBD_StdEPReq+0x2a4>
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d07f      	beq.n	800c044 <USBD_StdEPReq+0x156>
 800bf44:	2b01      	cmp	r3, #1
 800bf46:	d03c      	beq.n	800bfc2 <USBD_StdEPReq+0xd4>
 800bf48:	e123      	b.n	800c192 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf50:	b2db      	uxtb	r3, r3
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d002      	beq.n	800bf5c <USBD_StdEPReq+0x6e>
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d016      	beq.n	800bf88 <USBD_StdEPReq+0x9a>
 800bf5a:	e02c      	b.n	800bfb6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf5c:	7bbb      	ldrb	r3, [r7, #14]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00d      	beq.n	800bf7e <USBD_StdEPReq+0x90>
 800bf62:	7bbb      	ldrb	r3, [r7, #14]
 800bf64:	2b80      	cmp	r3, #128	@ 0x80
 800bf66:	d00a      	beq.n	800bf7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf68:	7bbb      	ldrb	r3, [r7, #14]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f001 f917 	bl	800d1a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf72:	2180      	movs	r1, #128	@ 0x80
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f001 f913 	bl	800d1a0 <USBD_LL_StallEP>
 800bf7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf7c:	e020      	b.n	800bfc0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fc6f 	bl	800c864 <USBD_CtlError>
              break;
 800bf86:	e01b      	b.n	800bfc0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	885b      	ldrh	r3, [r3, #2]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10e      	bne.n	800bfae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d00b      	beq.n	800bfae <USBD_StdEPReq+0xc0>
 800bf96:	7bbb      	ldrb	r3, [r7, #14]
 800bf98:	2b80      	cmp	r3, #128	@ 0x80
 800bf9a:	d008      	beq.n	800bfae <USBD_StdEPReq+0xc0>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	88db      	ldrh	r3, [r3, #6]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d104      	bne.n	800bfae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfa4:	7bbb      	ldrb	r3, [r7, #14]
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 f8f9 	bl	800d1a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fd23 	bl	800c9fa <USBD_CtlSendStatus>

              break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fc53 	bl	800c864 <USBD_CtlError>
              break;
 800bfbe:	bf00      	nop
          }
          break;
 800bfc0:	e0ec      	b.n	800c19c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d002      	beq.n	800bfd4 <USBD_StdEPReq+0xe6>
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d016      	beq.n	800c000 <USBD_StdEPReq+0x112>
 800bfd2:	e030      	b.n	800c036 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00d      	beq.n	800bff6 <USBD_StdEPReq+0x108>
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	2b80      	cmp	r3, #128	@ 0x80
 800bfde:	d00a      	beq.n	800bff6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfe0:	7bbb      	ldrb	r3, [r7, #14]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f001 f8db 	bl	800d1a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfea:	2180      	movs	r1, #128	@ 0x80
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f001 f8d7 	bl	800d1a0 <USBD_LL_StallEP>
 800bff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bff4:	e025      	b.n	800c042 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fc33 	bl	800c864 <USBD_CtlError>
              break;
 800bffe:	e020      	b.n	800c042 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	885b      	ldrh	r3, [r3, #2]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d11b      	bne.n	800c040 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d004      	beq.n	800c01c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c012:	7bbb      	ldrb	r3, [r7, #14]
 800c014:	4619      	mov	r1, r3
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f001 f8e1 	bl	800d1de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fcec 	bl	800c9fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	6839      	ldr	r1, [r7, #0]
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	4798      	blx	r3
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c034:	e004      	b.n	800c040 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 fc13 	bl	800c864 <USBD_CtlError>
              break;
 800c03e:	e000      	b.n	800c042 <USBD_StdEPReq+0x154>
              break;
 800c040:	bf00      	nop
          }
          break;
 800c042:	e0ab      	b.n	800c19c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d002      	beq.n	800c056 <USBD_StdEPReq+0x168>
 800c050:	2b03      	cmp	r3, #3
 800c052:	d032      	beq.n	800c0ba <USBD_StdEPReq+0x1cc>
 800c054:	e097      	b.n	800c186 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c056:	7bbb      	ldrb	r3, [r7, #14]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d007      	beq.n	800c06c <USBD_StdEPReq+0x17e>
 800c05c:	7bbb      	ldrb	r3, [r7, #14]
 800c05e:	2b80      	cmp	r3, #128	@ 0x80
 800c060:	d004      	beq.n	800c06c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c062:	6839      	ldr	r1, [r7, #0]
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f000 fbfd 	bl	800c864 <USBD_CtlError>
                break;
 800c06a:	e091      	b.n	800c190 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c06c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c070:	2b00      	cmp	r3, #0
 800c072:	da0b      	bge.n	800c08c <USBD_StdEPReq+0x19e>
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	3310      	adds	r3, #16
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	4413      	add	r3, r2
 800c088:	3304      	adds	r3, #4
 800c08a:	e00b      	b.n	800c0a4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c08c:	7bbb      	ldrb	r3, [r7, #14]
 800c08e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c092:	4613      	mov	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4413      	add	r3, r2
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	3304      	adds	r3, #4
 800c0a4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 fc47 	bl	800c946 <USBD_CtlSendData>
              break;
 800c0b8:	e06a      	b.n	800c190 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c0ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	da11      	bge.n	800c0e6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c0c2:	7bbb      	ldrb	r3, [r7, #14]
 800c0c4:	f003 020f 	and.w	r2, r3, #15
 800c0c8:	6879      	ldr	r1, [r7, #4]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	440b      	add	r3, r1
 800c0d4:	3324      	adds	r3, #36	@ 0x24
 800c0d6:	881b      	ldrh	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d117      	bne.n	800c10c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c0dc:	6839      	ldr	r1, [r7, #0]
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 fbc0 	bl	800c864 <USBD_CtlError>
                  break;
 800c0e4:	e054      	b.n	800c190 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c0e6:	7bbb      	ldrb	r3, [r7, #14]
 800c0e8:	f003 020f 	and.w	r2, r3, #15
 800c0ec:	6879      	ldr	r1, [r7, #4]
 800c0ee:	4613      	mov	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	4413      	add	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	440b      	add	r3, r1
 800c0f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d104      	bne.n	800c10c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c102:	6839      	ldr	r1, [r7, #0]
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fbad 	bl	800c864 <USBD_CtlError>
                  break;
 800c10a:	e041      	b.n	800c190 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c10c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c110:	2b00      	cmp	r3, #0
 800c112:	da0b      	bge.n	800c12c <USBD_StdEPReq+0x23e>
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c11a:	4613      	mov	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	3310      	adds	r3, #16
 800c124:	687a      	ldr	r2, [r7, #4]
 800c126:	4413      	add	r3, r2
 800c128:	3304      	adds	r3, #4
 800c12a:	e00b      	b.n	800c144 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c132:	4613      	mov	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	4413      	add	r3, r2
 800c142:	3304      	adds	r3, #4
 800c144:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c146:	7bbb      	ldrb	r3, [r7, #14]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d002      	beq.n	800c152 <USBD_StdEPReq+0x264>
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
 800c14e:	2b80      	cmp	r3, #128	@ 0x80
 800c150:	d103      	bne.n	800c15a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2200      	movs	r2, #0
 800c156:	601a      	str	r2, [r3, #0]
 800c158:	e00e      	b.n	800c178 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	4619      	mov	r1, r3
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f001 f85c 	bl	800d21c <USBD_LL_IsStallEP>
 800c164:	4603      	mov	r3, r0
 800c166:	2b00      	cmp	r3, #0
 800c168:	d003      	beq.n	800c172 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	2201      	movs	r2, #1
 800c16e:	601a      	str	r2, [r3, #0]
 800c170:	e002      	b.n	800c178 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	2200      	movs	r2, #0
 800c176:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2202      	movs	r2, #2
 800c17c:	4619      	mov	r1, r3
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fbe1 	bl	800c946 <USBD_CtlSendData>
              break;
 800c184:	e004      	b.n	800c190 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fb6b 	bl	800c864 <USBD_CtlError>
              break;
 800c18e:	bf00      	nop
          }
          break;
 800c190:	e004      	b.n	800c19c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fb65 	bl	800c864 <USBD_CtlError>
          break;
 800c19a:	bf00      	nop
      }
      break;
 800c19c:	e004      	b.n	800c1a8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fb5f 	bl	800c864 <USBD_CtlError>
      break;
 800c1a6:	bf00      	nop
  }

  return ret;
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
	...

0800c1b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	885b      	ldrh	r3, [r3, #2]
 800c1ce:	0a1b      	lsrs	r3, r3, #8
 800c1d0:	b29b      	uxth	r3, r3
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	2b0e      	cmp	r3, #14
 800c1d6:	f200 8152 	bhi.w	800c47e <USBD_GetDescriptor+0x2ca>
 800c1da:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <USBD_GetDescriptor+0x2c>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c251 	.word	0x0800c251
 800c1e4:	0800c269 	.word	0x0800c269
 800c1e8:	0800c2a9 	.word	0x0800c2a9
 800c1ec:	0800c47f 	.word	0x0800c47f
 800c1f0:	0800c47f 	.word	0x0800c47f
 800c1f4:	0800c41f 	.word	0x0800c41f
 800c1f8:	0800c44b 	.word	0x0800c44b
 800c1fc:	0800c47f 	.word	0x0800c47f
 800c200:	0800c47f 	.word	0x0800c47f
 800c204:	0800c47f 	.word	0x0800c47f
 800c208:	0800c47f 	.word	0x0800c47f
 800c20c:	0800c47f 	.word	0x0800c47f
 800c210:	0800c47f 	.word	0x0800c47f
 800c214:	0800c47f 	.word	0x0800c47f
 800c218:	0800c21d 	.word	0x0800c21d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c222:	69db      	ldr	r3, [r3, #28]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00b      	beq.n	800c240 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c22e:	69db      	ldr	r3, [r3, #28]
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	7c12      	ldrb	r2, [r2, #16]
 800c234:	f107 0108 	add.w	r1, r7, #8
 800c238:	4610      	mov	r0, r2
 800c23a:	4798      	blx	r3
 800c23c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c23e:	e126      	b.n	800c48e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fb0e 	bl	800c864 <USBD_CtlError>
        err++;
 800c248:	7afb      	ldrb	r3, [r7, #11]
 800c24a:	3301      	adds	r3, #1
 800c24c:	72fb      	strb	r3, [r7, #11]
      break;
 800c24e:	e11e      	b.n	800c48e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	7c12      	ldrb	r2, [r2, #16]
 800c25c:	f107 0108 	add.w	r1, r7, #8
 800c260:	4610      	mov	r0, r2
 800c262:	4798      	blx	r3
 800c264:	60f8      	str	r0, [r7, #12]
      break;
 800c266:	e112      	b.n	800c48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	7c1b      	ldrb	r3, [r3, #16]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10d      	bne.n	800c28c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c278:	f107 0208 	add.w	r2, r7, #8
 800c27c:	4610      	mov	r0, r2
 800c27e:	4798      	blx	r3
 800c280:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	3301      	adds	r3, #1
 800c286:	2202      	movs	r2, #2
 800c288:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c28a:	e100      	b.n	800c48e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c294:	f107 0208 	add.w	r2, r7, #8
 800c298:	4610      	mov	r0, r2
 800c29a:	4798      	blx	r3
 800c29c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	701a      	strb	r2, [r3, #0]
      break;
 800c2a6:	e0f2      	b.n	800c48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	885b      	ldrh	r3, [r3, #2]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2b05      	cmp	r3, #5
 800c2b0:	f200 80ac 	bhi.w	800c40c <USBD_GetDescriptor+0x258>
 800c2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2bc <USBD_GetDescriptor+0x108>)
 800c2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ba:	bf00      	nop
 800c2bc:	0800c2d5 	.word	0x0800c2d5
 800c2c0:	0800c309 	.word	0x0800c309
 800c2c4:	0800c33d 	.word	0x0800c33d
 800c2c8:	0800c371 	.word	0x0800c371
 800c2cc:	0800c3a5 	.word	0x0800c3a5
 800c2d0:	0800c3d9 	.word	0x0800c3d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00b      	beq.n	800c2f8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	687a      	ldr	r2, [r7, #4]
 800c2ea:	7c12      	ldrb	r2, [r2, #16]
 800c2ec:	f107 0108 	add.w	r1, r7, #8
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4798      	blx	r3
 800c2f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2f6:	e091      	b.n	800c41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fab2 	bl	800c864 <USBD_CtlError>
            err++;
 800c300:	7afb      	ldrb	r3, [r7, #11]
 800c302:	3301      	adds	r3, #1
 800c304:	72fb      	strb	r3, [r7, #11]
          break;
 800c306:	e089      	b.n	800c41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00b      	beq.n	800c32c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	7c12      	ldrb	r2, [r2, #16]
 800c320:	f107 0108 	add.w	r1, r7, #8
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
 800c328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c32a:	e077      	b.n	800c41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 fa98 	bl	800c864 <USBD_CtlError>
            err++;
 800c334:	7afb      	ldrb	r3, [r7, #11]
 800c336:	3301      	adds	r3, #1
 800c338:	72fb      	strb	r3, [r7, #11]
          break;
 800c33a:	e06f      	b.n	800c41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c34e:	68db      	ldr	r3, [r3, #12]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c35e:	e05d      	b.n	800c41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fa7e 	bl	800c864 <USBD_CtlError>
            err++;
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	3301      	adds	r3, #1
 800c36c:	72fb      	strb	r3, [r7, #11]
          break;
 800c36e:	e055      	b.n	800c41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c382:	691b      	ldr	r3, [r3, #16]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	7c12      	ldrb	r2, [r2, #16]
 800c388:	f107 0108 	add.w	r1, r7, #8
 800c38c:	4610      	mov	r0, r2
 800c38e:	4798      	blx	r3
 800c390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c392:	e043      	b.n	800c41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c394:	6839      	ldr	r1, [r7, #0]
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f000 fa64 	bl	800c864 <USBD_CtlError>
            err++;
 800c39c:	7afb      	ldrb	r3, [r7, #11]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3a2:	e03b      	b.n	800c41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3aa:	695b      	ldr	r3, [r3, #20]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00b      	beq.n	800c3c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3b6:	695b      	ldr	r3, [r3, #20]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	7c12      	ldrb	r2, [r2, #16]
 800c3bc:	f107 0108 	add.w	r1, r7, #8
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	4798      	blx	r3
 800c3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c6:	e029      	b.n	800c41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fa4a 	bl	800c864 <USBD_CtlError>
            err++;
 800c3d0:	7afb      	ldrb	r3, [r7, #11]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3d6:	e021      	b.n	800c41c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00b      	beq.n	800c3fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	7c12      	ldrb	r2, [r2, #16]
 800c3f0:	f107 0108 	add.w	r1, r7, #8
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	4798      	blx	r3
 800c3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3fa:	e00f      	b.n	800c41c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fa30 	bl	800c864 <USBD_CtlError>
            err++;
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	3301      	adds	r3, #1
 800c408:	72fb      	strb	r3, [r7, #11]
          break;
 800c40a:	e007      	b.n	800c41c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fa28 	bl	800c864 <USBD_CtlError>
          err++;
 800c414:	7afb      	ldrb	r3, [r7, #11]
 800c416:	3301      	adds	r3, #1
 800c418:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c41a:	bf00      	nop
      }
      break;
 800c41c:	e037      	b.n	800c48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	7c1b      	ldrb	r3, [r3, #16]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d109      	bne.n	800c43a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c42c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c42e:	f107 0208 	add.w	r2, r7, #8
 800c432:	4610      	mov	r0, r2
 800c434:	4798      	blx	r3
 800c436:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c438:	e029      	b.n	800c48e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fa11 	bl	800c864 <USBD_CtlError>
        err++;
 800c442:	7afb      	ldrb	r3, [r7, #11]
 800c444:	3301      	adds	r3, #1
 800c446:	72fb      	strb	r3, [r7, #11]
      break;
 800c448:	e021      	b.n	800c48e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	7c1b      	ldrb	r3, [r3, #16]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10d      	bne.n	800c46e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c45a:	f107 0208 	add.w	r2, r7, #8
 800c45e:	4610      	mov	r0, r2
 800c460:	4798      	blx	r3
 800c462:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	3301      	adds	r3, #1
 800c468:	2207      	movs	r2, #7
 800c46a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c46c:	e00f      	b.n	800c48e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 f9f7 	bl	800c864 <USBD_CtlError>
        err++;
 800c476:	7afb      	ldrb	r3, [r7, #11]
 800c478:	3301      	adds	r3, #1
 800c47a:	72fb      	strb	r3, [r7, #11]
      break;
 800c47c:	e007      	b.n	800c48e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f9ef 	bl	800c864 <USBD_CtlError>
      err++;
 800c486:	7afb      	ldrb	r3, [r7, #11]
 800c488:	3301      	adds	r3, #1
 800c48a:	72fb      	strb	r3, [r7, #11]
      break;
 800c48c:	bf00      	nop
  }

  if (err != 0U)
 800c48e:	7afb      	ldrb	r3, [r7, #11]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d11e      	bne.n	800c4d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	88db      	ldrh	r3, [r3, #6]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d016      	beq.n	800c4ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c49c:	893b      	ldrh	r3, [r7, #8]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00e      	beq.n	800c4c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	88da      	ldrh	r2, [r3, #6]
 800c4a6:	893b      	ldrh	r3, [r7, #8]
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	bf28      	it	cs
 800c4ac:	4613      	movcs	r3, r2
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c4b2:	893b      	ldrh	r3, [r7, #8]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	68f9      	ldr	r1, [r7, #12]
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 fa44 	bl	800c946 <USBD_CtlSendData>
 800c4be:	e009      	b.n	800c4d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f9ce 	bl	800c864 <USBD_CtlError>
 800c4c8:	e004      	b.n	800c4d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fa95 	bl	800c9fa <USBD_CtlSendStatus>
 800c4d0:	e000      	b.n	800c4d4 <USBD_GetDescriptor+0x320>
    return;
 800c4d2:	bf00      	nop
  }
}
 800c4d4:	3710      	adds	r7, #16
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	bd80      	pop	{r7, pc}
 800c4da:	bf00      	nop

0800c4dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	889b      	ldrh	r3, [r3, #4]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d131      	bne.n	800c552 <USBD_SetAddress+0x76>
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	88db      	ldrh	r3, [r3, #6]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d12d      	bne.n	800c552 <USBD_SetAddress+0x76>
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	885b      	ldrh	r3, [r3, #2]
 800c4fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4fc:	d829      	bhi.n	800c552 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	885b      	ldrh	r3, [r3, #2]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c508:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c510:	b2db      	uxtb	r3, r3
 800c512:	2b03      	cmp	r3, #3
 800c514:	d104      	bne.n	800c520 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c516:	6839      	ldr	r1, [r7, #0]
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 f9a3 	bl	800c864 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c51e:	e01d      	b.n	800c55c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7bfa      	ldrb	r2, [r7, #15]
 800c524:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	4619      	mov	r1, r3
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fea1 	bl	800d274 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fa61 	bl	800c9fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c538:	7bfb      	ldrb	r3, [r7, #15]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d004      	beq.n	800c548 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2202      	movs	r2, #2
 800c542:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c546:	e009      	b.n	800c55c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2201      	movs	r2, #1
 800c54c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c550:	e004      	b.n	800c55c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 f985 	bl	800c864 <USBD_CtlError>
  }
}
 800c55a:	bf00      	nop
 800c55c:	bf00      	nop
 800c55e:	3710      	adds	r7, #16
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c56e:	2300      	movs	r3, #0
 800c570:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	885b      	ldrh	r3, [r3, #2]
 800c576:	b2da      	uxtb	r2, r3
 800c578:	4b4c      	ldr	r3, [pc, #304]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c57a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c57c:	4b4b      	ldr	r3, [pc, #300]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c57e:	781b      	ldrb	r3, [r3, #0]
 800c580:	2b01      	cmp	r3, #1
 800c582:	d905      	bls.n	800c590 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 f96c 	bl	800c864 <USBD_CtlError>
    return USBD_FAIL;
 800c58c:	2303      	movs	r3, #3
 800c58e:	e088      	b.n	800c6a2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c596:	b2db      	uxtb	r3, r3
 800c598:	2b02      	cmp	r3, #2
 800c59a:	d002      	beq.n	800c5a2 <USBD_SetConfig+0x3e>
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d025      	beq.n	800c5ec <USBD_SetConfig+0x88>
 800c5a0:	e071      	b.n	800c686 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c5a2:	4b42      	ldr	r3, [pc, #264]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d01c      	beq.n	800c5e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c5aa:	4b40      	ldr	r3, [pc, #256]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c5b4:	4b3d      	ldr	r3, [pc, #244]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff f992 	bl	800b8e4 <USBD_SetClassConfig>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d004      	beq.n	800c5d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f949 	bl	800c864 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c5d2:	e065      	b.n	800c6a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fa10 	bl	800c9fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2203      	movs	r2, #3
 800c5de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5e2:	e05d      	b.n	800c6a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 fa08 	bl	800c9fa <USBD_CtlSendStatus>
      break;
 800c5ea:	e059      	b.n	800c6a0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5ec:	4b2f      	ldr	r3, [pc, #188]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d112      	bne.n	800c61a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2202      	movs	r2, #2
 800c5f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c5fc:	4b2b      	ldr	r3, [pc, #172]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	461a      	mov	r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c606:	4b29      	ldr	r3, [pc, #164]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff f985 	bl	800b91c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f000 f9f1 	bl	800c9fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c618:	e042      	b.n	800c6a0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c61a:	4b24      	ldr	r3, [pc, #144]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	429a      	cmp	r2, r3
 800c626:	d02a      	beq.n	800c67e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	4619      	mov	r1, r3
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff f973 	bl	800b91c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c636:	4b1d      	ldr	r3, [pc, #116]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c638:	781b      	ldrb	r3, [r3, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c640:	4b1a      	ldr	r3, [pc, #104]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c642:	781b      	ldrb	r3, [r3, #0]
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff f94c 	bl	800b8e4 <USBD_SetClassConfig>
 800c64c:	4603      	mov	r3, r0
 800c64e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c650:	7bfb      	ldrb	r3, [r7, #15]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00f      	beq.n	800c676 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f000 f903 	bl	800c864 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	b2db      	uxtb	r3, r3
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7ff f958 	bl	800b91c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2202      	movs	r2, #2
 800c670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c674:	e014      	b.n	800c6a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f9bf 	bl	800c9fa <USBD_CtlSendStatus>
      break;
 800c67c:	e010      	b.n	800c6a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f9bb 	bl	800c9fa <USBD_CtlSendStatus>
      break;
 800c684:	e00c      	b.n	800c6a0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f8eb 	bl	800c864 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c68e:	4b07      	ldr	r3, [pc, #28]	@ (800c6ac <USBD_SetConfig+0x148>)
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7ff f941 	bl	800b91c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c69a:	2303      	movs	r3, #3
 800c69c:	73fb      	strb	r3, [r7, #15]
      break;
 800c69e:	bf00      	nop
  }

  return ret;
 800c6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	2000045c 	.word	0x2000045c

0800c6b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c6ba:	683b      	ldr	r3, [r7, #0]
 800c6bc:	88db      	ldrh	r3, [r3, #6]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d004      	beq.n	800c6cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c6c2:	6839      	ldr	r1, [r7, #0]
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 f8cd 	bl	800c864 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c6ca:	e023      	b.n	800c714 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	dc02      	bgt.n	800c6de <USBD_GetConfig+0x2e>
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	dc03      	bgt.n	800c6e4 <USBD_GetConfig+0x34>
 800c6dc:	e015      	b.n	800c70a <USBD_GetConfig+0x5a>
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d00b      	beq.n	800c6fa <USBD_GetConfig+0x4a>
 800c6e2:	e012      	b.n	800c70a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	4619      	mov	r1, r3
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f927 	bl	800c946 <USBD_CtlSendData>
        break;
 800c6f8:	e00c      	b.n	800c714 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	2201      	movs	r2, #1
 800c700:	4619      	mov	r1, r3
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f91f 	bl	800c946 <USBD_CtlSendData>
        break;
 800c708:	e004      	b.n	800c714 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f8a9 	bl	800c864 <USBD_CtlError>
        break;
 800c712:	bf00      	nop
}
 800c714:	bf00      	nop
 800c716:	3708      	adds	r7, #8
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	3b01      	subs	r3, #1
 800c730:	2b02      	cmp	r3, #2
 800c732:	d81e      	bhi.n	800c772 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	88db      	ldrh	r3, [r3, #6]
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d004      	beq.n	800c746 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c73c:	6839      	ldr	r1, [r7, #0]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f890 	bl	800c864 <USBD_CtlError>
        break;
 800c744:	e01a      	b.n	800c77c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2201      	movs	r2, #1
 800c74a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c752:	2b00      	cmp	r3, #0
 800c754:	d005      	beq.n	800c762 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	f043 0202 	orr.w	r2, r3, #2
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	330c      	adds	r3, #12
 800c766:	2202      	movs	r2, #2
 800c768:	4619      	mov	r1, r3
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f8eb 	bl	800c946 <USBD_CtlSendData>
      break;
 800c770:	e004      	b.n	800c77c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 f875 	bl	800c864 <USBD_CtlError>
      break;
 800c77a:	bf00      	nop
  }
}
 800c77c:	bf00      	nop
 800c77e:	3708      	adds	r7, #8
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}

0800c784 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	885b      	ldrh	r3, [r3, #2]
 800c792:	2b01      	cmp	r3, #1
 800c794:	d106      	bne.n	800c7a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	2201      	movs	r2, #1
 800c79a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f92b 	bl	800c9fa <USBD_CtlSendStatus>
  }
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7bc:	b2db      	uxtb	r3, r3
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d80b      	bhi.n	800c7dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	885b      	ldrh	r3, [r3, #2]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d10c      	bne.n	800c7e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f910 	bl	800c9fa <USBD_CtlSendStatus>
      }
      break;
 800c7da:	e004      	b.n	800c7e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c7dc:	6839      	ldr	r1, [r7, #0]
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f840 	bl	800c864 <USBD_CtlError>
      break;
 800c7e4:	e000      	b.n	800c7e8 <USBD_ClrFeature+0x3c>
      break;
 800c7e6:	bf00      	nop
  }
}
 800c7e8:	bf00      	nop
 800c7ea:	3708      	adds	r7, #8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b084      	sub	sp, #16
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	781a      	ldrb	r2, [r3, #0]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	3301      	adds	r3, #1
 800c80a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	781a      	ldrb	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3301      	adds	r3, #1
 800c818:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c81a:	68f8      	ldr	r0, [r7, #12]
 800c81c:	f7ff fa92 	bl	800bd44 <SWAPBYTE>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3301      	adds	r3, #1
 800c82c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	3301      	adds	r3, #1
 800c832:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff fa85 	bl	800bd44 <SWAPBYTE>
 800c83a:	4603      	mov	r3, r0
 800c83c:	461a      	mov	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3301      	adds	r3, #1
 800c846:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	3301      	adds	r3, #1
 800c84c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c84e:	68f8      	ldr	r0, [r7, #12]
 800c850:	f7ff fa78 	bl	800bd44 <SWAPBYTE>
 800c854:	4603      	mov	r3, r0
 800c856:	461a      	mov	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	80da      	strh	r2, [r3, #6]
}
 800c85c:	bf00      	nop
 800c85e:	3710      	adds	r7, #16
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c86e:	2180      	movs	r1, #128	@ 0x80
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 fc95 	bl	800d1a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c876:	2100      	movs	r1, #0
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 fc91 	bl	800d1a0 <USBD_LL_StallEP>
}
 800c87e:	bf00      	nop
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c892:	2300      	movs	r3, #0
 800c894:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d036      	beq.n	800c90a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c8a0:	6938      	ldr	r0, [r7, #16]
 800c8a2:	f000 f836 	bl	800c912 <USBD_GetLen>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	3301      	adds	r3, #1
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	005b      	lsls	r3, r3, #1
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c8b4:	7dfb      	ldrb	r3, [r7, #23]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	7812      	ldrb	r2, [r2, #0]
 800c8be:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8c0:	7dfb      	ldrb	r3, [r7, #23]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c8c6:	7dfb      	ldrb	r3, [r7, #23]
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800c8d0:	7dfb      	ldrb	r3, [r7, #23]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c8d6:	e013      	b.n	800c900 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c8d8:	7dfb      	ldrb	r3, [r7, #23]
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	4413      	add	r3, r2
 800c8de:	693a      	ldr	r2, [r7, #16]
 800c8e0:	7812      	ldrb	r2, [r2, #0]
 800c8e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	613b      	str	r3, [r7, #16]
    idx++;
 800c8ea:	7dfb      	ldrb	r3, [r7, #23]
 800c8ec:	3301      	adds	r3, #1
 800c8ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c8f0:	7dfb      	ldrb	r3, [r7, #23]
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	701a      	strb	r2, [r3, #0]
    idx++;
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1e7      	bne.n	800c8d8 <USBD_GetString+0x52>
 800c908:	e000      	b.n	800c90c <USBD_GetString+0x86>
    return;
 800c90a:	bf00      	nop
  }
}
 800c90c:	3718      	adds	r7, #24
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c912:	b480      	push	{r7}
 800c914:	b085      	sub	sp, #20
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c91a:	2300      	movs	r3, #0
 800c91c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c922:	e005      	b.n	800c930 <USBD_GetLen+0x1e>
  {
    len++;
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	3301      	adds	r3, #1
 800c928:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	3301      	adds	r3, #1
 800c92e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1f5      	bne.n	800c924 <USBD_GetLen+0x12>
  }

  return len;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3714      	adds	r7, #20
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	60f8      	str	r0, [r7, #12]
 800c94e:	60b9      	str	r1, [r7, #8]
 800c950:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2202      	movs	r2, #2
 800c956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	68ba      	ldr	r2, [r7, #8]
 800c96a:	2100      	movs	r1, #0
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 fca0 	bl	800d2b2 <USBD_LL_Transmit>

  return USBD_OK;
 800c972:	2300      	movs	r3, #0
}
 800c974:	4618      	mov	r0, r3
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	68ba      	ldr	r2, [r7, #8]
 800c98c:	2100      	movs	r1, #0
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f000 fc8f 	bl	800d2b2 <USBD_LL_Transmit>

  return USBD_OK;
 800c994:	2300      	movs	r3, #0
}
 800c996:	4618      	mov	r0, r3
 800c998:	3710      	adds	r7, #16
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}

0800c99e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c99e:	b580      	push	{r7, lr}
 800c9a0:	b084      	sub	sp, #16
 800c9a2:	af00      	add	r7, sp, #0
 800c9a4:	60f8      	str	r0, [r7, #12]
 800c9a6:	60b9      	str	r1, [r7, #8]
 800c9a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2203      	movs	r2, #3
 800c9ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	68ba      	ldr	r2, [r7, #8]
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f000 fc93 	bl	800d2f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}

0800c9d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f000 fc82 	bl	800d2f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9f0:	2300      	movs	r3, #0
}
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	3710      	adds	r7, #16
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}

0800c9fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c9fa:	b580      	push	{r7, lr}
 800c9fc:	b082      	sub	sp, #8
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2204      	movs	r2, #4
 800ca06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	2100      	movs	r1, #0
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	f000 fc4e 	bl	800d2b2 <USBD_LL_Transmit>

  return USBD_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}

0800ca20 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2205      	movs	r2, #5
 800ca2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca30:	2300      	movs	r3, #0
 800ca32:	2200      	movs	r2, #0
 800ca34:	2100      	movs	r1, #0
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f000 fc5c 	bl	800d2f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3708      	adds	r7, #8
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
	...

0800ca48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	4912      	ldr	r1, [pc, #72]	@ (800ca98 <MX_USB_Device_Init+0x50>)
 800ca50:	4812      	ldr	r0, [pc, #72]	@ (800ca9c <MX_USB_Device_Init+0x54>)
 800ca52:	f7fe fed9 	bl	800b808 <USBD_Init>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d001      	beq.n	800ca60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800ca5c:	f7f4 ff2d 	bl	80018ba <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800ca60:	490f      	ldr	r1, [pc, #60]	@ (800caa0 <MX_USB_Device_Init+0x58>)
 800ca62:	480e      	ldr	r0, [pc, #56]	@ (800ca9c <MX_USB_Device_Init+0x54>)
 800ca64:	f7fe ff00 	bl	800b868 <USBD_RegisterClass>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d001      	beq.n	800ca72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800ca6e:	f7f4 ff24 	bl	80018ba <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800ca72:	490c      	ldr	r1, [pc, #48]	@ (800caa4 <MX_USB_Device_Init+0x5c>)
 800ca74:	4809      	ldr	r0, [pc, #36]	@ (800ca9c <MX_USB_Device_Init+0x54>)
 800ca76:	f7fe fe21 	bl	800b6bc <USBD_CDC_RegisterInterface>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800ca80:	f7f4 ff1b 	bl	80018ba <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800ca84:	4805      	ldr	r0, [pc, #20]	@ (800ca9c <MX_USB_Device_Init+0x54>)
 800ca86:	f7fe ff16 	bl	800b8b6 <USBD_Start>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800ca90:	f7f4 ff13 	bl	80018ba <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800ca94:	bf00      	nop
 800ca96:	bd80      	pop	{r7, pc}
 800ca98:	20000130 	.word	0x20000130
 800ca9c:	20000460 	.word	0x20000460
 800caa0:	20000018 	.word	0x20000018
 800caa4:	2000011c 	.word	0x2000011c

0800caa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800caac:	2200      	movs	r2, #0
 800caae:	4905      	ldr	r1, [pc, #20]	@ (800cac4 <CDC_Init_FS+0x1c>)
 800cab0:	4805      	ldr	r0, [pc, #20]	@ (800cac8 <CDC_Init_FS+0x20>)
 800cab2:	f7fe fe18 	bl	800b6e6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cab6:	4905      	ldr	r1, [pc, #20]	@ (800cacc <CDC_Init_FS+0x24>)
 800cab8:	4803      	ldr	r0, [pc, #12]	@ (800cac8 <CDC_Init_FS+0x20>)
 800caba:	f7fe fe32 	bl	800b722 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cabe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	20000b30 	.word	0x20000b30
 800cac8:	20000460 	.word	0x20000460
 800cacc:	20000730 	.word	0x20000730

0800cad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cad0:	b480      	push	{r7}
 800cad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr

0800cae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	6039      	str	r1, [r7, #0]
 800caea:	71fb      	strb	r3, [r7, #7]
 800caec:	4613      	mov	r3, r2
 800caee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	2b23      	cmp	r3, #35	@ 0x23
 800caf4:	d84a      	bhi.n	800cb8c <CDC_Control_FS+0xac>
 800caf6:	a201      	add	r2, pc, #4	@ (adr r2, 800cafc <CDC_Control_FS+0x1c>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb8d 	.word	0x0800cb8d
 800cb00:	0800cb8d 	.word	0x0800cb8d
 800cb04:	0800cb8d 	.word	0x0800cb8d
 800cb08:	0800cb8d 	.word	0x0800cb8d
 800cb0c:	0800cb8d 	.word	0x0800cb8d
 800cb10:	0800cb8d 	.word	0x0800cb8d
 800cb14:	0800cb8d 	.word	0x0800cb8d
 800cb18:	0800cb8d 	.word	0x0800cb8d
 800cb1c:	0800cb8d 	.word	0x0800cb8d
 800cb20:	0800cb8d 	.word	0x0800cb8d
 800cb24:	0800cb8d 	.word	0x0800cb8d
 800cb28:	0800cb8d 	.word	0x0800cb8d
 800cb2c:	0800cb8d 	.word	0x0800cb8d
 800cb30:	0800cb8d 	.word	0x0800cb8d
 800cb34:	0800cb8d 	.word	0x0800cb8d
 800cb38:	0800cb8d 	.word	0x0800cb8d
 800cb3c:	0800cb8d 	.word	0x0800cb8d
 800cb40:	0800cb8d 	.word	0x0800cb8d
 800cb44:	0800cb8d 	.word	0x0800cb8d
 800cb48:	0800cb8d 	.word	0x0800cb8d
 800cb4c:	0800cb8d 	.word	0x0800cb8d
 800cb50:	0800cb8d 	.word	0x0800cb8d
 800cb54:	0800cb8d 	.word	0x0800cb8d
 800cb58:	0800cb8d 	.word	0x0800cb8d
 800cb5c:	0800cb8d 	.word	0x0800cb8d
 800cb60:	0800cb8d 	.word	0x0800cb8d
 800cb64:	0800cb8d 	.word	0x0800cb8d
 800cb68:	0800cb8d 	.word	0x0800cb8d
 800cb6c:	0800cb8d 	.word	0x0800cb8d
 800cb70:	0800cb8d 	.word	0x0800cb8d
 800cb74:	0800cb8d 	.word	0x0800cb8d
 800cb78:	0800cb8d 	.word	0x0800cb8d
 800cb7c:	0800cb8d 	.word	0x0800cb8d
 800cb80:	0800cb8d 	.word	0x0800cb8d
 800cb84:	0800cb8d 	.word	0x0800cb8d
 800cb88:	0800cb8d 	.word	0x0800cb8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cb8c:	bf00      	nop
  }

  return (USBD_OK);
 800cb8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb90:	4618      	mov	r0, r3
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr

0800cb9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cba6:	6879      	ldr	r1, [r7, #4]
 800cba8:	4805      	ldr	r0, [pc, #20]	@ (800cbc0 <CDC_Receive_FS+0x24>)
 800cbaa:	f7fe fdba 	bl	800b722 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cbae:	4804      	ldr	r0, [pc, #16]	@ (800cbc0 <CDC_Receive_FS+0x24>)
 800cbb0:	f7fe fe00 	bl	800b7b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cbb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	20000460 	.word	0x20000460

0800cbc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b084      	sub	sp, #16
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cbd4:	4b0d      	ldr	r3, [pc, #52]	@ (800cc0c <CDC_Transmit_FS+0x48>)
 800cbd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cbda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d001      	beq.n	800cbea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	e00b      	b.n	800cc02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cbea:	887b      	ldrh	r3, [r7, #2]
 800cbec:	461a      	mov	r2, r3
 800cbee:	6879      	ldr	r1, [r7, #4]
 800cbf0:	4806      	ldr	r0, [pc, #24]	@ (800cc0c <CDC_Transmit_FS+0x48>)
 800cbf2:	f7fe fd78 	bl	800b6e6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cbf6:	4805      	ldr	r0, [pc, #20]	@ (800cc0c <CDC_Transmit_FS+0x48>)
 800cbf8:	f7fe fdac 	bl	800b754 <USBD_CDC_TransmitPacket>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000460 	.word	0x20000460

0800cc10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	371c      	adds	r7, #28
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr
	...

0800cc34 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	6039      	str	r1, [r7, #0]
 800cc3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2212      	movs	r2, #18
 800cc44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cc46:	4b03      	ldr	r3, [pc, #12]	@ (800cc54 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr
 800cc54:	20000150 	.word	0x20000150

0800cc58 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b083      	sub	sp, #12
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	4603      	mov	r3, r0
 800cc60:	6039      	str	r1, [r7, #0]
 800cc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	2204      	movs	r2, #4
 800cc68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cc6a:	4b03      	ldr	r3, [pc, #12]	@ (800cc78 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	20000164 	.word	0x20000164

0800cc7c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	6039      	str	r1, [r7, #0]
 800cc86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc88:	79fb      	ldrb	r3, [r7, #7]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d105      	bne.n	800cc9a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	4907      	ldr	r1, [pc, #28]	@ (800ccb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cc92:	4808      	ldr	r0, [pc, #32]	@ (800ccb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cc94:	f7ff fdf7 	bl	800c886 <USBD_GetString>
 800cc98:	e004      	b.n	800cca4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	4904      	ldr	r1, [pc, #16]	@ (800ccb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cc9e:	4805      	ldr	r0, [pc, #20]	@ (800ccb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cca0:	f7ff fdf1 	bl	800c886 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca4:	4b02      	ldr	r3, [pc, #8]	@ (800ccb0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000f30 	.word	0x20000f30
 800ccb4:	0800dde8 	.word	0x0800dde8

0800ccb8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	6039      	str	r1, [r7, #0]
 800ccc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	4904      	ldr	r1, [pc, #16]	@ (800ccd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ccc8:	4804      	ldr	r0, [pc, #16]	@ (800ccdc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ccca:	f7ff fddc 	bl	800c886 <USBD_GetString>
  return USBD_StrDesc;
 800ccce:	4b02      	ldr	r3, [pc, #8]	@ (800ccd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3708      	adds	r7, #8
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	20000f30 	.word	0x20000f30
 800ccdc:	0800de00 	.word	0x0800de00

0800cce0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	4603      	mov	r3, r0
 800cce8:	6039      	str	r1, [r7, #0]
 800ccea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	221a      	movs	r2, #26
 800ccf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ccf2:	f000 f843 	bl	800cd7c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ccf6:	4b02      	ldr	r3, [pc, #8]	@ (800cd00 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3708      	adds	r7, #8
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	20000168 	.word	0x20000168

0800cd04 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	6039      	str	r1, [r7, #0]
 800cd0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d105      	bne.n	800cd22 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd16:	683a      	ldr	r2, [r7, #0]
 800cd18:	4907      	ldr	r1, [pc, #28]	@ (800cd38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd1a:	4808      	ldr	r0, [pc, #32]	@ (800cd3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd1c:	f7ff fdb3 	bl	800c886 <USBD_GetString>
 800cd20:	e004      	b.n	800cd2c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	4904      	ldr	r1, [pc, #16]	@ (800cd38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd26:	4805      	ldr	r0, [pc, #20]	@ (800cd3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd28:	f7ff fdad 	bl	800c886 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd2c:	4b02      	ldr	r3, [pc, #8]	@ (800cd38 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	20000f30 	.word	0x20000f30
 800cd3c:	0800de14 	.word	0x0800de14

0800cd40 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b082      	sub	sp, #8
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	6039      	str	r1, [r7, #0]
 800cd4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d105      	bne.n	800cd5e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	4907      	ldr	r1, [pc, #28]	@ (800cd74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd56:	4808      	ldr	r0, [pc, #32]	@ (800cd78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd58:	f7ff fd95 	bl	800c886 <USBD_GetString>
 800cd5c:	e004      	b.n	800cd68 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	4904      	ldr	r1, [pc, #16]	@ (800cd74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd62:	4805      	ldr	r0, [pc, #20]	@ (800cd78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd64:	f7ff fd8f 	bl	800c886 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd68:	4b02      	ldr	r3, [pc, #8]	@ (800cd74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3708      	adds	r7, #8
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}
 800cd72:	bf00      	nop
 800cd74:	20000f30 	.word	0x20000f30
 800cd78:	0800de20 	.word	0x0800de20

0800cd7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cd82:	4b0f      	ldr	r3, [pc, #60]	@ (800cdc0 <Get_SerialNum+0x44>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd88:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc4 <Get_SerialNum+0x48>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd8e:	4b0e      	ldr	r3, [pc, #56]	@ (800cdc8 <Get_SerialNum+0x4c>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd94:	68fa      	ldr	r2, [r7, #12]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4413      	add	r3, r2
 800cd9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d009      	beq.n	800cdb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cda2:	2208      	movs	r2, #8
 800cda4:	4909      	ldr	r1, [pc, #36]	@ (800cdcc <Get_SerialNum+0x50>)
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f000 f814 	bl	800cdd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cdac:	2204      	movs	r2, #4
 800cdae:	4908      	ldr	r1, [pc, #32]	@ (800cdd0 <Get_SerialNum+0x54>)
 800cdb0:	68b8      	ldr	r0, [r7, #8]
 800cdb2:	f000 f80f 	bl	800cdd4 <IntToUnicode>
  }
}
 800cdb6:	bf00      	nop
 800cdb8:	3710      	adds	r7, #16
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	1fff7590 	.word	0x1fff7590
 800cdc4:	1fff7594 	.word	0x1fff7594
 800cdc8:	1fff7598 	.word	0x1fff7598
 800cdcc:	2000016a 	.word	0x2000016a
 800cdd0:	2000017a 	.word	0x2000017a

0800cdd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b087      	sub	sp, #28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4613      	mov	r3, r2
 800cde0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cde2:	2300      	movs	r3, #0
 800cde4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cde6:	2300      	movs	r3, #0
 800cde8:	75fb      	strb	r3, [r7, #23]
 800cdea:	e027      	b.n	800ce3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	0f1b      	lsrs	r3, r3, #28
 800cdf0:	2b09      	cmp	r3, #9
 800cdf2:	d80b      	bhi.n	800ce0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	0f1b      	lsrs	r3, r3, #28
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
 800cdfc:	005b      	lsls	r3, r3, #1
 800cdfe:	4619      	mov	r1, r3
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	440b      	add	r3, r1
 800ce04:	3230      	adds	r2, #48	@ 0x30
 800ce06:	b2d2      	uxtb	r2, r2
 800ce08:	701a      	strb	r2, [r3, #0]
 800ce0a:	e00a      	b.n	800ce22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	0f1b      	lsrs	r3, r3, #28
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	4619      	mov	r1, r3
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	440b      	add	r3, r1
 800ce1c:	3237      	adds	r2, #55	@ 0x37
 800ce1e:	b2d2      	uxtb	r2, r2
 800ce20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	011b      	lsls	r3, r3, #4
 800ce26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	3301      	adds	r3, #1
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	4413      	add	r3, r2
 800ce32:	2200      	movs	r2, #0
 800ce34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce36:	7dfb      	ldrb	r3, [r7, #23]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	75fb      	strb	r3, [r7, #23]
 800ce3c:	7dfa      	ldrb	r2, [r7, #23]
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	429a      	cmp	r2, r3
 800ce42:	d3d3      	bcc.n	800cdec <IntToUnicode+0x18>
  }
}
 800ce44:	bf00      	nop
 800ce46:	bf00      	nop
 800ce48:	371c      	adds	r7, #28
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
	...

0800ce54 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b094      	sub	sp, #80	@ 0x50
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce5c:	f107 030c 	add.w	r3, r7, #12
 800ce60:	2244      	movs	r2, #68	@ 0x44
 800ce62:	2100      	movs	r1, #0
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 fb2d 	bl	800d4c4 <memset>
  if(pcdHandle->Instance==USB)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4a15      	ldr	r2, [pc, #84]	@ (800cec4 <HAL_PCD_MspInit+0x70>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d123      	bne.n	800cebc <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ce74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ce78:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ce7a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ce7e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ce80:	f107 030c 	add.w	r3, r7, #12
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7f9 ff23 	bl	8006cd0 <HAL_RCCEx_PeriphCLKConfig>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800ce90:	f7f4 fd13 	bl	80018ba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce94:	4b0c      	ldr	r3, [pc, #48]	@ (800cec8 <HAL_PCD_MspInit+0x74>)
 800ce96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce98:	4a0b      	ldr	r2, [pc, #44]	@ (800cec8 <HAL_PCD_MspInit+0x74>)
 800ce9a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ce9e:	6593      	str	r3, [r2, #88]	@ 0x58
 800cea0:	4b09      	ldr	r3, [pc, #36]	@ (800cec8 <HAL_PCD_MspInit+0x74>)
 800cea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cea4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cea8:	60bb      	str	r3, [r7, #8]
 800ceaa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ceac:	2200      	movs	r2, #0
 800ceae:	2100      	movs	r1, #0
 800ceb0:	2014      	movs	r0, #20
 800ceb2:	f7f6 f970 	bl	8003196 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ceb6:	2014      	movs	r0, #20
 800ceb8:	f7f6 f987 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cebc:	bf00      	nop
 800cebe:	3750      	adds	r7, #80	@ 0x50
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	40005c00 	.word	0x40005c00
 800cec8:	40021000 	.word	0x40021000

0800cecc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cee0:	4619      	mov	r1, r3
 800cee2:	4610      	mov	r0, r2
 800cee4:	f7fe fd32 	bl	800b94c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cee8:	bf00      	nop
 800ceea:	3708      	adds	r7, #8
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	460b      	mov	r3, r1
 800cefa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cf02:	78fa      	ldrb	r2, [r7, #3]
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	4613      	mov	r3, r2
 800cf08:	009b      	lsls	r3, r3, #2
 800cf0a:	4413      	add	r3, r2
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	440b      	add	r3, r1
 800cf10:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	78fb      	ldrb	r3, [r7, #3]
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f7fe fd6c 	bl	800b9f6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	460b      	mov	r3, r1
 800cf30:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cf38:	78fa      	ldrb	r2, [r7, #3]
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	4413      	add	r3, r2
 800cf42:	00db      	lsls	r3, r3, #3
 800cf44:	440b      	add	r3, r1
 800cf46:	3324      	adds	r3, #36	@ 0x24
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	78fb      	ldrb	r3, [r7, #3]
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	f7fe fdb5 	bl	800babc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cf52:	bf00      	nop
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5a:	b580      	push	{r7, lr}
 800cf5c:	b082      	sub	sp, #8
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f7fe fec9 	bl	800bd00 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cf6e:	bf00      	nop
 800cf70:	3708      	adds	r7, #8
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}

0800cf76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf76:	b580      	push	{r7, lr}
 800cf78:	b084      	sub	sp, #16
 800cf7a:	af00      	add	r7, sp, #0
 800cf7c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	795b      	ldrb	r3, [r3, #5]
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d001      	beq.n	800cf8e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf8a:	f7f4 fc96 	bl	80018ba <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cf94:	7bfa      	ldrb	r2, [r7, #15]
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7fe fe73 	bl	800bc84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	f7fe fe1f 	bl	800bbe8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cfaa:	bf00      	nop
 800cfac:	3710      	adds	r7, #16
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
	...

0800cfb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f7fe fe6e 	bl	800bca4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	7a5b      	ldrb	r3, [r3, #9]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d005      	beq.n	800cfdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfd0:	4b04      	ldr	r3, [pc, #16]	@ (800cfe4 <HAL_PCD_SuspendCallback+0x30>)
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	4a03      	ldr	r2, [pc, #12]	@ (800cfe4 <HAL_PCD_SuspendCallback+0x30>)
 800cfd6:	f043 0306 	orr.w	r3, r3, #6
 800cfda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cfdc:	bf00      	nop
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	e000ed00 	.word	0xe000ed00

0800cfe8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	7a5b      	ldrb	r3, [r3, #9]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d007      	beq.n	800d008 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cff8:	4b08      	ldr	r3, [pc, #32]	@ (800d01c <HAL_PCD_ResumeCallback+0x34>)
 800cffa:	691b      	ldr	r3, [r3, #16]
 800cffc:	4a07      	ldr	r2, [pc, #28]	@ (800d01c <HAL_PCD_ResumeCallback+0x34>)
 800cffe:	f023 0306 	bic.w	r3, r3, #6
 800d002:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d004:	f000 f9f8 	bl	800d3f8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe fe5e 	bl	800bcd0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	e000ed00 	.word	0xe000ed00

0800d020 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d028:	4a2b      	ldr	r2, [pc, #172]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	4a29      	ldr	r2, [pc, #164]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d034:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d038:	4b27      	ldr	r3, [pc, #156]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d03a:	4a28      	ldr	r2, [pc, #160]	@ (800d0dc <USBD_LL_Init+0xbc>)
 800d03c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d03e:	4b26      	ldr	r3, [pc, #152]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d040:	2208      	movs	r2, #8
 800d042:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d044:	4b24      	ldr	r3, [pc, #144]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d046:	2202      	movs	r2, #2
 800d048:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d04a:	4b23      	ldr	r3, [pc, #140]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d04c:	2202      	movs	r2, #2
 800d04e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d050:	4b21      	ldr	r3, [pc, #132]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d052:	2200      	movs	r2, #0
 800d054:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d056:	4b20      	ldr	r3, [pc, #128]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d058:	2200      	movs	r2, #0
 800d05a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d05c:	4b1e      	ldr	r3, [pc, #120]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d05e:	2200      	movs	r2, #0
 800d060:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d062:	4b1d      	ldr	r3, [pc, #116]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d064:	2200      	movs	r2, #0
 800d066:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d068:	481b      	ldr	r0, [pc, #108]	@ (800d0d8 <USBD_LL_Init+0xb8>)
 800d06a:	f7f7 fb2a 	bl	80046c2 <HAL_PCD_Init>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d074:	f7f4 fc21 	bl	80018ba <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d07e:	2318      	movs	r3, #24
 800d080:	2200      	movs	r2, #0
 800d082:	2100      	movs	r1, #0
 800d084:	f7f8 ffe5 	bl	8006052 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d08e:	2358      	movs	r3, #88	@ 0x58
 800d090:	2200      	movs	r2, #0
 800d092:	2180      	movs	r1, #128	@ 0x80
 800d094:	f7f8 ffdd 	bl	8006052 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d09e:	23c0      	movs	r3, #192	@ 0xc0
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2181      	movs	r1, #129	@ 0x81
 800d0a4:	f7f8 ffd5 	bl	8006052 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0ae:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	2101      	movs	r1, #1
 800d0b6:	f7f8 ffcc 	bl	8006052 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	2182      	movs	r1, #130	@ 0x82
 800d0c8:	f7f8 ffc3 	bl	8006052 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20001130 	.word	0x20001130
 800d0dc:	40005c00 	.word	0x40005c00

0800d0e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f7 fbb1 	bl	800485e <HAL_PCD_Start>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d100:	7bfb      	ldrb	r3, [r7, #15]
 800d102:	4618      	mov	r0, r3
 800d104:	f000 f97e 	bl	800d404 <USBD_Get_USB_Status>
 800d108:	4603      	mov	r3, r0
 800d10a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	4608      	mov	r0, r1
 800d120:	4611      	mov	r1, r2
 800d122:	461a      	mov	r2, r3
 800d124:	4603      	mov	r3, r0
 800d126:	70fb      	strb	r3, [r7, #3]
 800d128:	460b      	mov	r3, r1
 800d12a:	70bb      	strb	r3, [r7, #2]
 800d12c:	4613      	mov	r3, r2
 800d12e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d130:	2300      	movs	r3, #0
 800d132:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d134:	2300      	movs	r3, #0
 800d136:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d13e:	78bb      	ldrb	r3, [r7, #2]
 800d140:	883a      	ldrh	r2, [r7, #0]
 800d142:	78f9      	ldrb	r1, [r7, #3]
 800d144:	f7f7 fcf8 	bl	8004b38 <HAL_PCD_EP_Open>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	4618      	mov	r0, r3
 800d150:	f000 f958 	bl	800d404 <USBD_Get_USB_Status>
 800d154:	4603      	mov	r3, r0
 800d156:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d158:	7bbb      	ldrb	r3, [r7, #14]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3710      	adds	r7, #16
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}

0800d162 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d162:	b580      	push	{r7, lr}
 800d164:	b084      	sub	sp, #16
 800d166:	af00      	add	r7, sp, #0
 800d168:	6078      	str	r0, [r7, #4]
 800d16a:	460b      	mov	r3, r1
 800d16c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d16e:	2300      	movs	r3, #0
 800d170:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d17c:	78fa      	ldrb	r2, [r7, #3]
 800d17e:	4611      	mov	r1, r2
 800d180:	4618      	mov	r0, r3
 800d182:	f7f7 fd38 	bl	8004bf6 <HAL_PCD_EP_Close>
 800d186:	4603      	mov	r3, r0
 800d188:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d18a:	7bfb      	ldrb	r3, [r7, #15]
 800d18c:	4618      	mov	r0, r3
 800d18e:	f000 f939 	bl	800d404 <USBD_Get_USB_Status>
 800d192:	4603      	mov	r3, r0
 800d194:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d196:	7bbb      	ldrb	r3, [r7, #14]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}

0800d1a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	460b      	mov	r3, r1
 800d1aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1ba:	78fa      	ldrb	r2, [r7, #3]
 800d1bc:	4611      	mov	r1, r2
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7f7 fde1 	bl	8004d86 <HAL_PCD_EP_SetStall>
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 f91a 	bl	800d404 <USBD_Get_USB_Status>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3710      	adds	r7, #16
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}

0800d1de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b084      	sub	sp, #16
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1f8:	78fa      	ldrb	r2, [r7, #3]
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7f7 fe14 	bl	8004e2a <HAL_PCD_EP_ClrStall>
 800d202:	4603      	mov	r3, r0
 800d204:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d206:	7bfb      	ldrb	r3, [r7, #15]
 800d208:	4618      	mov	r0, r3
 800d20a:	f000 f8fb 	bl	800d404 <USBD_Get_USB_Status>
 800d20e:	4603      	mov	r3, r0
 800d210:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d212:	7bbb      	ldrb	r3, [r7, #14]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3710      	adds	r7, #16
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	460b      	mov	r3, r1
 800d226:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d22e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d230:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d234:	2b00      	cmp	r3, #0
 800d236:	da0b      	bge.n	800d250 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d238:	78fb      	ldrb	r3, [r7, #3]
 800d23a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d23e:	68f9      	ldr	r1, [r7, #12]
 800d240:	4613      	mov	r3, r2
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	440b      	add	r3, r1
 800d24a:	3312      	adds	r3, #18
 800d24c:	781b      	ldrb	r3, [r3, #0]
 800d24e:	e00b      	b.n	800d268 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d250:	78fb      	ldrb	r3, [r7, #3]
 800d252:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d256:	68f9      	ldr	r1, [r7, #12]
 800d258:	4613      	mov	r3, r2
 800d25a:	009b      	lsls	r3, r3, #2
 800d25c:	4413      	add	r3, r2
 800d25e:	00db      	lsls	r3, r3, #3
 800d260:	440b      	add	r3, r1
 800d262:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d266:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3714      	adds	r7, #20
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d28e:	78fa      	ldrb	r2, [r7, #3]
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f7f7 fc2c 	bl	8004af0 <HAL_PCD_SetAddress>
 800d298:	4603      	mov	r3, r0
 800d29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 f8b0 	bl	800d404 <USBD_Get_USB_Status>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b086      	sub	sp, #24
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	60f8      	str	r0, [r7, #12]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
 800d2be:	460b      	mov	r3, r1
 800d2c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d2d0:	7af9      	ldrb	r1, [r7, #11]
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	687a      	ldr	r2, [r7, #4]
 800d2d6:	f7f7 fd1f 	bl	8004d18 <HAL_PCD_EP_Transmit>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2de:	7dfb      	ldrb	r3, [r7, #23]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f000 f88f 	bl	800d404 <USBD_Get_USB_Status>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d2ea:	7dbb      	ldrb	r3, [r7, #22]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b086      	sub	sp, #24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	60f8      	str	r0, [r7, #12]
 800d2fc:	607a      	str	r2, [r7, #4]
 800d2fe:	603b      	str	r3, [r7, #0]
 800d300:	460b      	mov	r3, r1
 800d302:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d308:	2300      	movs	r3, #0
 800d30a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d312:	7af9      	ldrb	r1, [r7, #11]
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	687a      	ldr	r2, [r7, #4]
 800d318:	f7f7 fcb5 	bl	8004c86 <HAL_PCD_EP_Receive>
 800d31c:	4603      	mov	r3, r0
 800d31e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d320:	7dfb      	ldrb	r3, [r7, #23]
 800d322:	4618      	mov	r0, r3
 800d324:	f000 f86e 	bl	800d404 <USBD_Get_USB_Status>
 800d328:	4603      	mov	r3, r0
 800d32a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d32c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3718      	adds	r7, #24
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b082      	sub	sp, #8
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	460b      	mov	r3, r1
 800d340:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d348:	78fa      	ldrb	r2, [r7, #3]
 800d34a:	4611      	mov	r1, r2
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7f7 fccb 	bl	8004ce8 <HAL_PCD_EP_GetRxCount>
 800d352:	4603      	mov	r3, r0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3708      	adds	r7, #8
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	460b      	mov	r3, r1
 800d366:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d368:	78fb      	ldrb	r3, [r7, #3]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d002      	beq.n	800d374 <HAL_PCDEx_LPM_Callback+0x18>
 800d36e:	2b01      	cmp	r3, #1
 800d370:	d013      	beq.n	800d39a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d372:	e023      	b.n	800d3bc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	7a5b      	ldrb	r3, [r3, #9]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d007      	beq.n	800d38c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d37c:	f000 f83c 	bl	800d3f8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d380:	4b10      	ldr	r3, [pc, #64]	@ (800d3c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d382:	691b      	ldr	r3, [r3, #16]
 800d384:	4a0f      	ldr	r2, [pc, #60]	@ (800d3c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d386:	f023 0306 	bic.w	r3, r3, #6
 800d38a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe fc9c 	bl	800bcd0 <USBD_LL_Resume>
    break;
 800d398:	e010      	b.n	800d3bc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fe fc7f 	bl	800bca4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	7a5b      	ldrb	r3, [r3, #9]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d005      	beq.n	800d3ba <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3ae:	4b05      	ldr	r3, [pc, #20]	@ (800d3c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3b0:	691b      	ldr	r3, [r3, #16]
 800d3b2:	4a04      	ldr	r2, [pc, #16]	@ (800d3c4 <HAL_PCDEx_LPM_Callback+0x68>)
 800d3b4:	f043 0306 	orr.w	r3, r3, #6
 800d3b8:	6113      	str	r3, [r2, #16]
    break;
 800d3ba:	bf00      	nop
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	e000ed00 	.word	0xe000ed00

0800d3c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d3c8:	b480      	push	{r7}
 800d3ca:	b083      	sub	sp, #12
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d3d0:	4b03      	ldr	r3, [pc, #12]	@ (800d3e0 <USBD_static_malloc+0x18>)
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	370c      	adds	r7, #12
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	2000140c 	.word	0x2000140c

0800d3e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	b083      	sub	sp, #12
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]

}
 800d3ec:	bf00      	nop
 800d3ee:	370c      	adds	r7, #12
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f6:	4770      	bx	lr

0800d3f8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d3fc:	f7f4 fa0e 	bl	800181c <SystemClock_Config>
}
 800d400:	bf00      	nop
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	4603      	mov	r3, r0
 800d40c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d40e:	2300      	movs	r3, #0
 800d410:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d412:	79fb      	ldrb	r3, [r7, #7]
 800d414:	2b03      	cmp	r3, #3
 800d416:	d817      	bhi.n	800d448 <USBD_Get_USB_Status+0x44>
 800d418:	a201      	add	r2, pc, #4	@ (adr r2, 800d420 <USBD_Get_USB_Status+0x1c>)
 800d41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41e:	bf00      	nop
 800d420:	0800d431 	.word	0x0800d431
 800d424:	0800d437 	.word	0x0800d437
 800d428:	0800d43d 	.word	0x0800d43d
 800d42c:	0800d443 	.word	0x0800d443
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d430:	2300      	movs	r3, #0
 800d432:	73fb      	strb	r3, [r7, #15]
    break;
 800d434:	e00b      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d436:	2303      	movs	r3, #3
 800d438:	73fb      	strb	r3, [r7, #15]
    break;
 800d43a:	e008      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d43c:	2301      	movs	r3, #1
 800d43e:	73fb      	strb	r3, [r7, #15]
    break;
 800d440:	e005      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d442:	2303      	movs	r3, #3
 800d444:	73fb      	strb	r3, [r7, #15]
    break;
 800d446:	e002      	b.n	800d44e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d448:	2303      	movs	r3, #3
 800d44a:	73fb      	strb	r3, [r7, #15]
    break;
 800d44c:	bf00      	nop
  }
  return usb_status;
 800d44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <sniprintf>:
 800d45c:	b40c      	push	{r2, r3}
 800d45e:	b530      	push	{r4, r5, lr}
 800d460:	4b17      	ldr	r3, [pc, #92]	@ (800d4c0 <sniprintf+0x64>)
 800d462:	1e0c      	subs	r4, r1, #0
 800d464:	681d      	ldr	r5, [r3, #0]
 800d466:	b09d      	sub	sp, #116	@ 0x74
 800d468:	da08      	bge.n	800d47c <sniprintf+0x20>
 800d46a:	238b      	movs	r3, #139	@ 0x8b
 800d46c:	602b      	str	r3, [r5, #0]
 800d46e:	f04f 30ff 	mov.w	r0, #4294967295
 800d472:	b01d      	add	sp, #116	@ 0x74
 800d474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d478:	b002      	add	sp, #8
 800d47a:	4770      	bx	lr
 800d47c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d480:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d484:	bf14      	ite	ne
 800d486:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d48a:	4623      	moveq	r3, r4
 800d48c:	9304      	str	r3, [sp, #16]
 800d48e:	9307      	str	r3, [sp, #28]
 800d490:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d494:	9002      	str	r0, [sp, #8]
 800d496:	9006      	str	r0, [sp, #24]
 800d498:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d49c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d49e:	ab21      	add	r3, sp, #132	@ 0x84
 800d4a0:	a902      	add	r1, sp, #8
 800d4a2:	4628      	mov	r0, r5
 800d4a4:	9301      	str	r3, [sp, #4]
 800d4a6:	f000 f995 	bl	800d7d4 <_svfiprintf_r>
 800d4aa:	1c43      	adds	r3, r0, #1
 800d4ac:	bfbc      	itt	lt
 800d4ae:	238b      	movlt	r3, #139	@ 0x8b
 800d4b0:	602b      	strlt	r3, [r5, #0]
 800d4b2:	2c00      	cmp	r4, #0
 800d4b4:	d0dd      	beq.n	800d472 <sniprintf+0x16>
 800d4b6:	9b02      	ldr	r3, [sp, #8]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	701a      	strb	r2, [r3, #0]
 800d4bc:	e7d9      	b.n	800d472 <sniprintf+0x16>
 800d4be:	bf00      	nop
 800d4c0:	20000184 	.word	0x20000184

0800d4c4 <memset>:
 800d4c4:	4402      	add	r2, r0
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d100      	bne.n	800d4ce <memset+0xa>
 800d4cc:	4770      	bx	lr
 800d4ce:	f803 1b01 	strb.w	r1, [r3], #1
 800d4d2:	e7f9      	b.n	800d4c8 <memset+0x4>

0800d4d4 <__errno>:
 800d4d4:	4b01      	ldr	r3, [pc, #4]	@ (800d4dc <__errno+0x8>)
 800d4d6:	6818      	ldr	r0, [r3, #0]
 800d4d8:	4770      	bx	lr
 800d4da:	bf00      	nop
 800d4dc:	20000184 	.word	0x20000184

0800d4e0 <__libc_init_array>:
 800d4e0:	b570      	push	{r4, r5, r6, lr}
 800d4e2:	4d0d      	ldr	r5, [pc, #52]	@ (800d518 <__libc_init_array+0x38>)
 800d4e4:	4c0d      	ldr	r4, [pc, #52]	@ (800d51c <__libc_init_array+0x3c>)
 800d4e6:	1b64      	subs	r4, r4, r5
 800d4e8:	10a4      	asrs	r4, r4, #2
 800d4ea:	2600      	movs	r6, #0
 800d4ec:	42a6      	cmp	r6, r4
 800d4ee:	d109      	bne.n	800d504 <__libc_init_array+0x24>
 800d4f0:	4d0b      	ldr	r5, [pc, #44]	@ (800d520 <__libc_init_array+0x40>)
 800d4f2:	4c0c      	ldr	r4, [pc, #48]	@ (800d524 <__libc_init_array+0x44>)
 800d4f4:	f000 fc66 	bl	800ddc4 <_init>
 800d4f8:	1b64      	subs	r4, r4, r5
 800d4fa:	10a4      	asrs	r4, r4, #2
 800d4fc:	2600      	movs	r6, #0
 800d4fe:	42a6      	cmp	r6, r4
 800d500:	d105      	bne.n	800d50e <__libc_init_array+0x2e>
 800d502:	bd70      	pop	{r4, r5, r6, pc}
 800d504:	f855 3b04 	ldr.w	r3, [r5], #4
 800d508:	4798      	blx	r3
 800d50a:	3601      	adds	r6, #1
 800d50c:	e7ee      	b.n	800d4ec <__libc_init_array+0xc>
 800d50e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d512:	4798      	blx	r3
 800d514:	3601      	adds	r6, #1
 800d516:	e7f2      	b.n	800d4fe <__libc_init_array+0x1e>
 800d518:	0800deac 	.word	0x0800deac
 800d51c:	0800deac 	.word	0x0800deac
 800d520:	0800deac 	.word	0x0800deac
 800d524:	0800deb0 	.word	0x0800deb0

0800d528 <__retarget_lock_acquire_recursive>:
 800d528:	4770      	bx	lr

0800d52a <__retarget_lock_release_recursive>:
 800d52a:	4770      	bx	lr

0800d52c <_free_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4605      	mov	r5, r0
 800d530:	2900      	cmp	r1, #0
 800d532:	d041      	beq.n	800d5b8 <_free_r+0x8c>
 800d534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d538:	1f0c      	subs	r4, r1, #4
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	bfb8      	it	lt
 800d53e:	18e4      	addlt	r4, r4, r3
 800d540:	f000 f8e0 	bl	800d704 <__malloc_lock>
 800d544:	4a1d      	ldr	r2, [pc, #116]	@ (800d5bc <_free_r+0x90>)
 800d546:	6813      	ldr	r3, [r2, #0]
 800d548:	b933      	cbnz	r3, 800d558 <_free_r+0x2c>
 800d54a:	6063      	str	r3, [r4, #4]
 800d54c:	6014      	str	r4, [r2, #0]
 800d54e:	4628      	mov	r0, r5
 800d550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d554:	f000 b8dc 	b.w	800d710 <__malloc_unlock>
 800d558:	42a3      	cmp	r3, r4
 800d55a:	d908      	bls.n	800d56e <_free_r+0x42>
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	1821      	adds	r1, r4, r0
 800d560:	428b      	cmp	r3, r1
 800d562:	bf01      	itttt	eq
 800d564:	6819      	ldreq	r1, [r3, #0]
 800d566:	685b      	ldreq	r3, [r3, #4]
 800d568:	1809      	addeq	r1, r1, r0
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	e7ed      	b.n	800d54a <_free_r+0x1e>
 800d56e:	461a      	mov	r2, r3
 800d570:	685b      	ldr	r3, [r3, #4]
 800d572:	b10b      	cbz	r3, 800d578 <_free_r+0x4c>
 800d574:	42a3      	cmp	r3, r4
 800d576:	d9fa      	bls.n	800d56e <_free_r+0x42>
 800d578:	6811      	ldr	r1, [r2, #0]
 800d57a:	1850      	adds	r0, r2, r1
 800d57c:	42a0      	cmp	r0, r4
 800d57e:	d10b      	bne.n	800d598 <_free_r+0x6c>
 800d580:	6820      	ldr	r0, [r4, #0]
 800d582:	4401      	add	r1, r0
 800d584:	1850      	adds	r0, r2, r1
 800d586:	4283      	cmp	r3, r0
 800d588:	6011      	str	r1, [r2, #0]
 800d58a:	d1e0      	bne.n	800d54e <_free_r+0x22>
 800d58c:	6818      	ldr	r0, [r3, #0]
 800d58e:	685b      	ldr	r3, [r3, #4]
 800d590:	6053      	str	r3, [r2, #4]
 800d592:	4408      	add	r0, r1
 800d594:	6010      	str	r0, [r2, #0]
 800d596:	e7da      	b.n	800d54e <_free_r+0x22>
 800d598:	d902      	bls.n	800d5a0 <_free_r+0x74>
 800d59a:	230c      	movs	r3, #12
 800d59c:	602b      	str	r3, [r5, #0]
 800d59e:	e7d6      	b.n	800d54e <_free_r+0x22>
 800d5a0:	6820      	ldr	r0, [r4, #0]
 800d5a2:	1821      	adds	r1, r4, r0
 800d5a4:	428b      	cmp	r3, r1
 800d5a6:	bf04      	itt	eq
 800d5a8:	6819      	ldreq	r1, [r3, #0]
 800d5aa:	685b      	ldreq	r3, [r3, #4]
 800d5ac:	6063      	str	r3, [r4, #4]
 800d5ae:	bf04      	itt	eq
 800d5b0:	1809      	addeq	r1, r1, r0
 800d5b2:	6021      	streq	r1, [r4, #0]
 800d5b4:	6054      	str	r4, [r2, #4]
 800d5b6:	e7ca      	b.n	800d54e <_free_r+0x22>
 800d5b8:	bd38      	pop	{r3, r4, r5, pc}
 800d5ba:	bf00      	nop
 800d5bc:	20001770 	.word	0x20001770

0800d5c0 <sbrk_aligned>:
 800d5c0:	b570      	push	{r4, r5, r6, lr}
 800d5c2:	4e0f      	ldr	r6, [pc, #60]	@ (800d600 <sbrk_aligned+0x40>)
 800d5c4:	460c      	mov	r4, r1
 800d5c6:	6831      	ldr	r1, [r6, #0]
 800d5c8:	4605      	mov	r5, r0
 800d5ca:	b911      	cbnz	r1, 800d5d2 <sbrk_aligned+0x12>
 800d5cc:	f000 fba6 	bl	800dd1c <_sbrk_r>
 800d5d0:	6030      	str	r0, [r6, #0]
 800d5d2:	4621      	mov	r1, r4
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f000 fba1 	bl	800dd1c <_sbrk_r>
 800d5da:	1c43      	adds	r3, r0, #1
 800d5dc:	d103      	bne.n	800d5e6 <sbrk_aligned+0x26>
 800d5de:	f04f 34ff 	mov.w	r4, #4294967295
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	bd70      	pop	{r4, r5, r6, pc}
 800d5e6:	1cc4      	adds	r4, r0, #3
 800d5e8:	f024 0403 	bic.w	r4, r4, #3
 800d5ec:	42a0      	cmp	r0, r4
 800d5ee:	d0f8      	beq.n	800d5e2 <sbrk_aligned+0x22>
 800d5f0:	1a21      	subs	r1, r4, r0
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f000 fb92 	bl	800dd1c <_sbrk_r>
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	d1f2      	bne.n	800d5e2 <sbrk_aligned+0x22>
 800d5fc:	e7ef      	b.n	800d5de <sbrk_aligned+0x1e>
 800d5fe:	bf00      	nop
 800d600:	2000176c 	.word	0x2000176c

0800d604 <_malloc_r>:
 800d604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d608:	1ccd      	adds	r5, r1, #3
 800d60a:	f025 0503 	bic.w	r5, r5, #3
 800d60e:	3508      	adds	r5, #8
 800d610:	2d0c      	cmp	r5, #12
 800d612:	bf38      	it	cc
 800d614:	250c      	movcc	r5, #12
 800d616:	2d00      	cmp	r5, #0
 800d618:	4606      	mov	r6, r0
 800d61a:	db01      	blt.n	800d620 <_malloc_r+0x1c>
 800d61c:	42a9      	cmp	r1, r5
 800d61e:	d904      	bls.n	800d62a <_malloc_r+0x26>
 800d620:	230c      	movs	r3, #12
 800d622:	6033      	str	r3, [r6, #0]
 800d624:	2000      	movs	r0, #0
 800d626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d62a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d700 <_malloc_r+0xfc>
 800d62e:	f000 f869 	bl	800d704 <__malloc_lock>
 800d632:	f8d8 3000 	ldr.w	r3, [r8]
 800d636:	461c      	mov	r4, r3
 800d638:	bb44      	cbnz	r4, 800d68c <_malloc_r+0x88>
 800d63a:	4629      	mov	r1, r5
 800d63c:	4630      	mov	r0, r6
 800d63e:	f7ff ffbf 	bl	800d5c0 <sbrk_aligned>
 800d642:	1c43      	adds	r3, r0, #1
 800d644:	4604      	mov	r4, r0
 800d646:	d158      	bne.n	800d6fa <_malloc_r+0xf6>
 800d648:	f8d8 4000 	ldr.w	r4, [r8]
 800d64c:	4627      	mov	r7, r4
 800d64e:	2f00      	cmp	r7, #0
 800d650:	d143      	bne.n	800d6da <_malloc_r+0xd6>
 800d652:	2c00      	cmp	r4, #0
 800d654:	d04b      	beq.n	800d6ee <_malloc_r+0xea>
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	4639      	mov	r1, r7
 800d65a:	4630      	mov	r0, r6
 800d65c:	eb04 0903 	add.w	r9, r4, r3
 800d660:	f000 fb5c 	bl	800dd1c <_sbrk_r>
 800d664:	4581      	cmp	r9, r0
 800d666:	d142      	bne.n	800d6ee <_malloc_r+0xea>
 800d668:	6821      	ldr	r1, [r4, #0]
 800d66a:	1a6d      	subs	r5, r5, r1
 800d66c:	4629      	mov	r1, r5
 800d66e:	4630      	mov	r0, r6
 800d670:	f7ff ffa6 	bl	800d5c0 <sbrk_aligned>
 800d674:	3001      	adds	r0, #1
 800d676:	d03a      	beq.n	800d6ee <_malloc_r+0xea>
 800d678:	6823      	ldr	r3, [r4, #0]
 800d67a:	442b      	add	r3, r5
 800d67c:	6023      	str	r3, [r4, #0]
 800d67e:	f8d8 3000 	ldr.w	r3, [r8]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	bb62      	cbnz	r2, 800d6e0 <_malloc_r+0xdc>
 800d686:	f8c8 7000 	str.w	r7, [r8]
 800d68a:	e00f      	b.n	800d6ac <_malloc_r+0xa8>
 800d68c:	6822      	ldr	r2, [r4, #0]
 800d68e:	1b52      	subs	r2, r2, r5
 800d690:	d420      	bmi.n	800d6d4 <_malloc_r+0xd0>
 800d692:	2a0b      	cmp	r2, #11
 800d694:	d917      	bls.n	800d6c6 <_malloc_r+0xc2>
 800d696:	1961      	adds	r1, r4, r5
 800d698:	42a3      	cmp	r3, r4
 800d69a:	6025      	str	r5, [r4, #0]
 800d69c:	bf18      	it	ne
 800d69e:	6059      	strne	r1, [r3, #4]
 800d6a0:	6863      	ldr	r3, [r4, #4]
 800d6a2:	bf08      	it	eq
 800d6a4:	f8c8 1000 	streq.w	r1, [r8]
 800d6a8:	5162      	str	r2, [r4, r5]
 800d6aa:	604b      	str	r3, [r1, #4]
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f000 f82f 	bl	800d710 <__malloc_unlock>
 800d6b2:	f104 000b 	add.w	r0, r4, #11
 800d6b6:	1d23      	adds	r3, r4, #4
 800d6b8:	f020 0007 	bic.w	r0, r0, #7
 800d6bc:	1ac2      	subs	r2, r0, r3
 800d6be:	bf1c      	itt	ne
 800d6c0:	1a1b      	subne	r3, r3, r0
 800d6c2:	50a3      	strne	r3, [r4, r2]
 800d6c4:	e7af      	b.n	800d626 <_malloc_r+0x22>
 800d6c6:	6862      	ldr	r2, [r4, #4]
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	bf0c      	ite	eq
 800d6cc:	f8c8 2000 	streq.w	r2, [r8]
 800d6d0:	605a      	strne	r2, [r3, #4]
 800d6d2:	e7eb      	b.n	800d6ac <_malloc_r+0xa8>
 800d6d4:	4623      	mov	r3, r4
 800d6d6:	6864      	ldr	r4, [r4, #4]
 800d6d8:	e7ae      	b.n	800d638 <_malloc_r+0x34>
 800d6da:	463c      	mov	r4, r7
 800d6dc:	687f      	ldr	r7, [r7, #4]
 800d6de:	e7b6      	b.n	800d64e <_malloc_r+0x4a>
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	42a3      	cmp	r3, r4
 800d6e6:	d1fb      	bne.n	800d6e0 <_malloc_r+0xdc>
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	6053      	str	r3, [r2, #4]
 800d6ec:	e7de      	b.n	800d6ac <_malloc_r+0xa8>
 800d6ee:	230c      	movs	r3, #12
 800d6f0:	6033      	str	r3, [r6, #0]
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f000 f80c 	bl	800d710 <__malloc_unlock>
 800d6f8:	e794      	b.n	800d624 <_malloc_r+0x20>
 800d6fa:	6005      	str	r5, [r0, #0]
 800d6fc:	e7d6      	b.n	800d6ac <_malloc_r+0xa8>
 800d6fe:	bf00      	nop
 800d700:	20001770 	.word	0x20001770

0800d704 <__malloc_lock>:
 800d704:	4801      	ldr	r0, [pc, #4]	@ (800d70c <__malloc_lock+0x8>)
 800d706:	f7ff bf0f 	b.w	800d528 <__retarget_lock_acquire_recursive>
 800d70a:	bf00      	nop
 800d70c:	20001768 	.word	0x20001768

0800d710 <__malloc_unlock>:
 800d710:	4801      	ldr	r0, [pc, #4]	@ (800d718 <__malloc_unlock+0x8>)
 800d712:	f7ff bf0a 	b.w	800d52a <__retarget_lock_release_recursive>
 800d716:	bf00      	nop
 800d718:	20001768 	.word	0x20001768

0800d71c <__ssputs_r>:
 800d71c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d720:	688e      	ldr	r6, [r1, #8]
 800d722:	461f      	mov	r7, r3
 800d724:	42be      	cmp	r6, r7
 800d726:	680b      	ldr	r3, [r1, #0]
 800d728:	4682      	mov	sl, r0
 800d72a:	460c      	mov	r4, r1
 800d72c:	4690      	mov	r8, r2
 800d72e:	d82d      	bhi.n	800d78c <__ssputs_r+0x70>
 800d730:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d734:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d738:	d026      	beq.n	800d788 <__ssputs_r+0x6c>
 800d73a:	6965      	ldr	r5, [r4, #20]
 800d73c:	6909      	ldr	r1, [r1, #16]
 800d73e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d742:	eba3 0901 	sub.w	r9, r3, r1
 800d746:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d74a:	1c7b      	adds	r3, r7, #1
 800d74c:	444b      	add	r3, r9
 800d74e:	106d      	asrs	r5, r5, #1
 800d750:	429d      	cmp	r5, r3
 800d752:	bf38      	it	cc
 800d754:	461d      	movcc	r5, r3
 800d756:	0553      	lsls	r3, r2, #21
 800d758:	d527      	bpl.n	800d7aa <__ssputs_r+0x8e>
 800d75a:	4629      	mov	r1, r5
 800d75c:	f7ff ff52 	bl	800d604 <_malloc_r>
 800d760:	4606      	mov	r6, r0
 800d762:	b360      	cbz	r0, 800d7be <__ssputs_r+0xa2>
 800d764:	6921      	ldr	r1, [r4, #16]
 800d766:	464a      	mov	r2, r9
 800d768:	f000 fae8 	bl	800dd3c <memcpy>
 800d76c:	89a3      	ldrh	r3, [r4, #12]
 800d76e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d776:	81a3      	strh	r3, [r4, #12]
 800d778:	6126      	str	r6, [r4, #16]
 800d77a:	6165      	str	r5, [r4, #20]
 800d77c:	444e      	add	r6, r9
 800d77e:	eba5 0509 	sub.w	r5, r5, r9
 800d782:	6026      	str	r6, [r4, #0]
 800d784:	60a5      	str	r5, [r4, #8]
 800d786:	463e      	mov	r6, r7
 800d788:	42be      	cmp	r6, r7
 800d78a:	d900      	bls.n	800d78e <__ssputs_r+0x72>
 800d78c:	463e      	mov	r6, r7
 800d78e:	6820      	ldr	r0, [r4, #0]
 800d790:	4632      	mov	r2, r6
 800d792:	4641      	mov	r1, r8
 800d794:	f000 faa8 	bl	800dce8 <memmove>
 800d798:	68a3      	ldr	r3, [r4, #8]
 800d79a:	1b9b      	subs	r3, r3, r6
 800d79c:	60a3      	str	r3, [r4, #8]
 800d79e:	6823      	ldr	r3, [r4, #0]
 800d7a0:	4433      	add	r3, r6
 800d7a2:	6023      	str	r3, [r4, #0]
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	f000 fad4 	bl	800dd58 <_realloc_r>
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d1e0      	bne.n	800d778 <__ssputs_r+0x5c>
 800d7b6:	6921      	ldr	r1, [r4, #16]
 800d7b8:	4650      	mov	r0, sl
 800d7ba:	f7ff feb7 	bl	800d52c <_free_r>
 800d7be:	230c      	movs	r3, #12
 800d7c0:	f8ca 3000 	str.w	r3, [sl]
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7ca:	81a3      	strh	r3, [r4, #12]
 800d7cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d0:	e7e9      	b.n	800d7a6 <__ssputs_r+0x8a>
	...

0800d7d4 <_svfiprintf_r>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	4698      	mov	r8, r3
 800d7da:	898b      	ldrh	r3, [r1, #12]
 800d7dc:	061b      	lsls	r3, r3, #24
 800d7de:	b09d      	sub	sp, #116	@ 0x74
 800d7e0:	4607      	mov	r7, r0
 800d7e2:	460d      	mov	r5, r1
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	d510      	bpl.n	800d80a <_svfiprintf_r+0x36>
 800d7e8:	690b      	ldr	r3, [r1, #16]
 800d7ea:	b973      	cbnz	r3, 800d80a <_svfiprintf_r+0x36>
 800d7ec:	2140      	movs	r1, #64	@ 0x40
 800d7ee:	f7ff ff09 	bl	800d604 <_malloc_r>
 800d7f2:	6028      	str	r0, [r5, #0]
 800d7f4:	6128      	str	r0, [r5, #16]
 800d7f6:	b930      	cbnz	r0, 800d806 <_svfiprintf_r+0x32>
 800d7f8:	230c      	movs	r3, #12
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d800:	b01d      	add	sp, #116	@ 0x74
 800d802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d806:	2340      	movs	r3, #64	@ 0x40
 800d808:	616b      	str	r3, [r5, #20]
 800d80a:	2300      	movs	r3, #0
 800d80c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d80e:	2320      	movs	r3, #32
 800d810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d814:	f8cd 800c 	str.w	r8, [sp, #12]
 800d818:	2330      	movs	r3, #48	@ 0x30
 800d81a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d9b8 <_svfiprintf_r+0x1e4>
 800d81e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d822:	f04f 0901 	mov.w	r9, #1
 800d826:	4623      	mov	r3, r4
 800d828:	469a      	mov	sl, r3
 800d82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d82e:	b10a      	cbz	r2, 800d834 <_svfiprintf_r+0x60>
 800d830:	2a25      	cmp	r2, #37	@ 0x25
 800d832:	d1f9      	bne.n	800d828 <_svfiprintf_r+0x54>
 800d834:	ebba 0b04 	subs.w	fp, sl, r4
 800d838:	d00b      	beq.n	800d852 <_svfiprintf_r+0x7e>
 800d83a:	465b      	mov	r3, fp
 800d83c:	4622      	mov	r2, r4
 800d83e:	4629      	mov	r1, r5
 800d840:	4638      	mov	r0, r7
 800d842:	f7ff ff6b 	bl	800d71c <__ssputs_r>
 800d846:	3001      	adds	r0, #1
 800d848:	f000 80a7 	beq.w	800d99a <_svfiprintf_r+0x1c6>
 800d84c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d84e:	445a      	add	r2, fp
 800d850:	9209      	str	r2, [sp, #36]	@ 0x24
 800d852:	f89a 3000 	ldrb.w	r3, [sl]
 800d856:	2b00      	cmp	r3, #0
 800d858:	f000 809f 	beq.w	800d99a <_svfiprintf_r+0x1c6>
 800d85c:	2300      	movs	r3, #0
 800d85e:	f04f 32ff 	mov.w	r2, #4294967295
 800d862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d866:	f10a 0a01 	add.w	sl, sl, #1
 800d86a:	9304      	str	r3, [sp, #16]
 800d86c:	9307      	str	r3, [sp, #28]
 800d86e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d872:	931a      	str	r3, [sp, #104]	@ 0x68
 800d874:	4654      	mov	r4, sl
 800d876:	2205      	movs	r2, #5
 800d878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d87c:	484e      	ldr	r0, [pc, #312]	@ (800d9b8 <_svfiprintf_r+0x1e4>)
 800d87e:	f7f2 fccf 	bl	8000220 <memchr>
 800d882:	9a04      	ldr	r2, [sp, #16]
 800d884:	b9d8      	cbnz	r0, 800d8be <_svfiprintf_r+0xea>
 800d886:	06d0      	lsls	r0, r2, #27
 800d888:	bf44      	itt	mi
 800d88a:	2320      	movmi	r3, #32
 800d88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d890:	0711      	lsls	r1, r2, #28
 800d892:	bf44      	itt	mi
 800d894:	232b      	movmi	r3, #43	@ 0x2b
 800d896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d89a:	f89a 3000 	ldrb.w	r3, [sl]
 800d89e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8a0:	d015      	beq.n	800d8ce <_svfiprintf_r+0xfa>
 800d8a2:	9a07      	ldr	r2, [sp, #28]
 800d8a4:	4654      	mov	r4, sl
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	f04f 0c0a 	mov.w	ip, #10
 800d8ac:	4621      	mov	r1, r4
 800d8ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d8b2:	3b30      	subs	r3, #48	@ 0x30
 800d8b4:	2b09      	cmp	r3, #9
 800d8b6:	d94b      	bls.n	800d950 <_svfiprintf_r+0x17c>
 800d8b8:	b1b0      	cbz	r0, 800d8e8 <_svfiprintf_r+0x114>
 800d8ba:	9207      	str	r2, [sp, #28]
 800d8bc:	e014      	b.n	800d8e8 <_svfiprintf_r+0x114>
 800d8be:	eba0 0308 	sub.w	r3, r0, r8
 800d8c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d8c6:	4313      	orrs	r3, r2
 800d8c8:	9304      	str	r3, [sp, #16]
 800d8ca:	46a2      	mov	sl, r4
 800d8cc:	e7d2      	b.n	800d874 <_svfiprintf_r+0xa0>
 800d8ce:	9b03      	ldr	r3, [sp, #12]
 800d8d0:	1d19      	adds	r1, r3, #4
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	9103      	str	r1, [sp, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	bfbb      	ittet	lt
 800d8da:	425b      	neglt	r3, r3
 800d8dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d8e0:	9307      	strge	r3, [sp, #28]
 800d8e2:	9307      	strlt	r3, [sp, #28]
 800d8e4:	bfb8      	it	lt
 800d8e6:	9204      	strlt	r2, [sp, #16]
 800d8e8:	7823      	ldrb	r3, [r4, #0]
 800d8ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8ec:	d10a      	bne.n	800d904 <_svfiprintf_r+0x130>
 800d8ee:	7863      	ldrb	r3, [r4, #1]
 800d8f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8f2:	d132      	bne.n	800d95a <_svfiprintf_r+0x186>
 800d8f4:	9b03      	ldr	r3, [sp, #12]
 800d8f6:	1d1a      	adds	r2, r3, #4
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	9203      	str	r2, [sp, #12]
 800d8fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d900:	3402      	adds	r4, #2
 800d902:	9305      	str	r3, [sp, #20]
 800d904:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9c8 <_svfiprintf_r+0x1f4>
 800d908:	7821      	ldrb	r1, [r4, #0]
 800d90a:	2203      	movs	r2, #3
 800d90c:	4650      	mov	r0, sl
 800d90e:	f7f2 fc87 	bl	8000220 <memchr>
 800d912:	b138      	cbz	r0, 800d924 <_svfiprintf_r+0x150>
 800d914:	9b04      	ldr	r3, [sp, #16]
 800d916:	eba0 000a 	sub.w	r0, r0, sl
 800d91a:	2240      	movs	r2, #64	@ 0x40
 800d91c:	4082      	lsls	r2, r0
 800d91e:	4313      	orrs	r3, r2
 800d920:	3401      	adds	r4, #1
 800d922:	9304      	str	r3, [sp, #16]
 800d924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d928:	4824      	ldr	r0, [pc, #144]	@ (800d9bc <_svfiprintf_r+0x1e8>)
 800d92a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d92e:	2206      	movs	r2, #6
 800d930:	f7f2 fc76 	bl	8000220 <memchr>
 800d934:	2800      	cmp	r0, #0
 800d936:	d036      	beq.n	800d9a6 <_svfiprintf_r+0x1d2>
 800d938:	4b21      	ldr	r3, [pc, #132]	@ (800d9c0 <_svfiprintf_r+0x1ec>)
 800d93a:	bb1b      	cbnz	r3, 800d984 <_svfiprintf_r+0x1b0>
 800d93c:	9b03      	ldr	r3, [sp, #12]
 800d93e:	3307      	adds	r3, #7
 800d940:	f023 0307 	bic.w	r3, r3, #7
 800d944:	3308      	adds	r3, #8
 800d946:	9303      	str	r3, [sp, #12]
 800d948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d94a:	4433      	add	r3, r6
 800d94c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d94e:	e76a      	b.n	800d826 <_svfiprintf_r+0x52>
 800d950:	fb0c 3202 	mla	r2, ip, r2, r3
 800d954:	460c      	mov	r4, r1
 800d956:	2001      	movs	r0, #1
 800d958:	e7a8      	b.n	800d8ac <_svfiprintf_r+0xd8>
 800d95a:	2300      	movs	r3, #0
 800d95c:	3401      	adds	r4, #1
 800d95e:	9305      	str	r3, [sp, #20]
 800d960:	4619      	mov	r1, r3
 800d962:	f04f 0c0a 	mov.w	ip, #10
 800d966:	4620      	mov	r0, r4
 800d968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d96c:	3a30      	subs	r2, #48	@ 0x30
 800d96e:	2a09      	cmp	r2, #9
 800d970:	d903      	bls.n	800d97a <_svfiprintf_r+0x1a6>
 800d972:	2b00      	cmp	r3, #0
 800d974:	d0c6      	beq.n	800d904 <_svfiprintf_r+0x130>
 800d976:	9105      	str	r1, [sp, #20]
 800d978:	e7c4      	b.n	800d904 <_svfiprintf_r+0x130>
 800d97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d97e:	4604      	mov	r4, r0
 800d980:	2301      	movs	r3, #1
 800d982:	e7f0      	b.n	800d966 <_svfiprintf_r+0x192>
 800d984:	ab03      	add	r3, sp, #12
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	462a      	mov	r2, r5
 800d98a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c4 <_svfiprintf_r+0x1f0>)
 800d98c:	a904      	add	r1, sp, #16
 800d98e:	4638      	mov	r0, r7
 800d990:	f3af 8000 	nop.w
 800d994:	1c42      	adds	r2, r0, #1
 800d996:	4606      	mov	r6, r0
 800d998:	d1d6      	bne.n	800d948 <_svfiprintf_r+0x174>
 800d99a:	89ab      	ldrh	r3, [r5, #12]
 800d99c:	065b      	lsls	r3, r3, #25
 800d99e:	f53f af2d 	bmi.w	800d7fc <_svfiprintf_r+0x28>
 800d9a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d9a4:	e72c      	b.n	800d800 <_svfiprintf_r+0x2c>
 800d9a6:	ab03      	add	r3, sp, #12
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	462a      	mov	r2, r5
 800d9ac:	4b05      	ldr	r3, [pc, #20]	@ (800d9c4 <_svfiprintf_r+0x1f0>)
 800d9ae:	a904      	add	r1, sp, #16
 800d9b0:	4638      	mov	r0, r7
 800d9b2:	f000 f879 	bl	800daa8 <_printf_i>
 800d9b6:	e7ed      	b.n	800d994 <_svfiprintf_r+0x1c0>
 800d9b8:	0800de70 	.word	0x0800de70
 800d9bc:	0800de7a 	.word	0x0800de7a
 800d9c0:	00000000 	.word	0x00000000
 800d9c4:	0800d71d 	.word	0x0800d71d
 800d9c8:	0800de76 	.word	0x0800de76

0800d9cc <_printf_common>:
 800d9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d0:	4616      	mov	r6, r2
 800d9d2:	4698      	mov	r8, r3
 800d9d4:	688a      	ldr	r2, [r1, #8]
 800d9d6:	690b      	ldr	r3, [r1, #16]
 800d9d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	bfb8      	it	lt
 800d9e0:	4613      	movlt	r3, r2
 800d9e2:	6033      	str	r3, [r6, #0]
 800d9e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9e8:	4607      	mov	r7, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	b10a      	cbz	r2, 800d9f2 <_printf_common+0x26>
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	6033      	str	r3, [r6, #0]
 800d9f2:	6823      	ldr	r3, [r4, #0]
 800d9f4:	0699      	lsls	r1, r3, #26
 800d9f6:	bf42      	ittt	mi
 800d9f8:	6833      	ldrmi	r3, [r6, #0]
 800d9fa:	3302      	addmi	r3, #2
 800d9fc:	6033      	strmi	r3, [r6, #0]
 800d9fe:	6825      	ldr	r5, [r4, #0]
 800da00:	f015 0506 	ands.w	r5, r5, #6
 800da04:	d106      	bne.n	800da14 <_printf_common+0x48>
 800da06:	f104 0a19 	add.w	sl, r4, #25
 800da0a:	68e3      	ldr	r3, [r4, #12]
 800da0c:	6832      	ldr	r2, [r6, #0]
 800da0e:	1a9b      	subs	r3, r3, r2
 800da10:	42ab      	cmp	r3, r5
 800da12:	dc26      	bgt.n	800da62 <_printf_common+0x96>
 800da14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800da18:	6822      	ldr	r2, [r4, #0]
 800da1a:	3b00      	subs	r3, #0
 800da1c:	bf18      	it	ne
 800da1e:	2301      	movne	r3, #1
 800da20:	0692      	lsls	r2, r2, #26
 800da22:	d42b      	bmi.n	800da7c <_printf_common+0xb0>
 800da24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da28:	4641      	mov	r1, r8
 800da2a:	4638      	mov	r0, r7
 800da2c:	47c8      	blx	r9
 800da2e:	3001      	adds	r0, #1
 800da30:	d01e      	beq.n	800da70 <_printf_common+0xa4>
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	6922      	ldr	r2, [r4, #16]
 800da36:	f003 0306 	and.w	r3, r3, #6
 800da3a:	2b04      	cmp	r3, #4
 800da3c:	bf02      	ittt	eq
 800da3e:	68e5      	ldreq	r5, [r4, #12]
 800da40:	6833      	ldreq	r3, [r6, #0]
 800da42:	1aed      	subeq	r5, r5, r3
 800da44:	68a3      	ldr	r3, [r4, #8]
 800da46:	bf0c      	ite	eq
 800da48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da4c:	2500      	movne	r5, #0
 800da4e:	4293      	cmp	r3, r2
 800da50:	bfc4      	itt	gt
 800da52:	1a9b      	subgt	r3, r3, r2
 800da54:	18ed      	addgt	r5, r5, r3
 800da56:	2600      	movs	r6, #0
 800da58:	341a      	adds	r4, #26
 800da5a:	42b5      	cmp	r5, r6
 800da5c:	d11a      	bne.n	800da94 <_printf_common+0xc8>
 800da5e:	2000      	movs	r0, #0
 800da60:	e008      	b.n	800da74 <_printf_common+0xa8>
 800da62:	2301      	movs	r3, #1
 800da64:	4652      	mov	r2, sl
 800da66:	4641      	mov	r1, r8
 800da68:	4638      	mov	r0, r7
 800da6a:	47c8      	blx	r9
 800da6c:	3001      	adds	r0, #1
 800da6e:	d103      	bne.n	800da78 <_printf_common+0xac>
 800da70:	f04f 30ff 	mov.w	r0, #4294967295
 800da74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da78:	3501      	adds	r5, #1
 800da7a:	e7c6      	b.n	800da0a <_printf_common+0x3e>
 800da7c:	18e1      	adds	r1, r4, r3
 800da7e:	1c5a      	adds	r2, r3, #1
 800da80:	2030      	movs	r0, #48	@ 0x30
 800da82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da86:	4422      	add	r2, r4
 800da88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da90:	3302      	adds	r3, #2
 800da92:	e7c7      	b.n	800da24 <_printf_common+0x58>
 800da94:	2301      	movs	r3, #1
 800da96:	4622      	mov	r2, r4
 800da98:	4641      	mov	r1, r8
 800da9a:	4638      	mov	r0, r7
 800da9c:	47c8      	blx	r9
 800da9e:	3001      	adds	r0, #1
 800daa0:	d0e6      	beq.n	800da70 <_printf_common+0xa4>
 800daa2:	3601      	adds	r6, #1
 800daa4:	e7d9      	b.n	800da5a <_printf_common+0x8e>
	...

0800daa8 <_printf_i>:
 800daa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daac:	7e0f      	ldrb	r7, [r1, #24]
 800daae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dab0:	2f78      	cmp	r7, #120	@ 0x78
 800dab2:	4691      	mov	r9, r2
 800dab4:	4680      	mov	r8, r0
 800dab6:	460c      	mov	r4, r1
 800dab8:	469a      	mov	sl, r3
 800daba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dabe:	d807      	bhi.n	800dad0 <_printf_i+0x28>
 800dac0:	2f62      	cmp	r7, #98	@ 0x62
 800dac2:	d80a      	bhi.n	800dada <_printf_i+0x32>
 800dac4:	2f00      	cmp	r7, #0
 800dac6:	f000 80d2 	beq.w	800dc6e <_printf_i+0x1c6>
 800daca:	2f58      	cmp	r7, #88	@ 0x58
 800dacc:	f000 80b9 	beq.w	800dc42 <_printf_i+0x19a>
 800dad0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dad4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dad8:	e03a      	b.n	800db50 <_printf_i+0xa8>
 800dada:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dade:	2b15      	cmp	r3, #21
 800dae0:	d8f6      	bhi.n	800dad0 <_printf_i+0x28>
 800dae2:	a101      	add	r1, pc, #4	@ (adr r1, 800dae8 <_printf_i+0x40>)
 800dae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dae8:	0800db41 	.word	0x0800db41
 800daec:	0800db55 	.word	0x0800db55
 800daf0:	0800dad1 	.word	0x0800dad1
 800daf4:	0800dad1 	.word	0x0800dad1
 800daf8:	0800dad1 	.word	0x0800dad1
 800dafc:	0800dad1 	.word	0x0800dad1
 800db00:	0800db55 	.word	0x0800db55
 800db04:	0800dad1 	.word	0x0800dad1
 800db08:	0800dad1 	.word	0x0800dad1
 800db0c:	0800dad1 	.word	0x0800dad1
 800db10:	0800dad1 	.word	0x0800dad1
 800db14:	0800dc55 	.word	0x0800dc55
 800db18:	0800db7f 	.word	0x0800db7f
 800db1c:	0800dc0f 	.word	0x0800dc0f
 800db20:	0800dad1 	.word	0x0800dad1
 800db24:	0800dad1 	.word	0x0800dad1
 800db28:	0800dc77 	.word	0x0800dc77
 800db2c:	0800dad1 	.word	0x0800dad1
 800db30:	0800db7f 	.word	0x0800db7f
 800db34:	0800dad1 	.word	0x0800dad1
 800db38:	0800dad1 	.word	0x0800dad1
 800db3c:	0800dc17 	.word	0x0800dc17
 800db40:	6833      	ldr	r3, [r6, #0]
 800db42:	1d1a      	adds	r2, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6032      	str	r2, [r6, #0]
 800db48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db50:	2301      	movs	r3, #1
 800db52:	e09d      	b.n	800dc90 <_printf_i+0x1e8>
 800db54:	6833      	ldr	r3, [r6, #0]
 800db56:	6820      	ldr	r0, [r4, #0]
 800db58:	1d19      	adds	r1, r3, #4
 800db5a:	6031      	str	r1, [r6, #0]
 800db5c:	0606      	lsls	r6, r0, #24
 800db5e:	d501      	bpl.n	800db64 <_printf_i+0xbc>
 800db60:	681d      	ldr	r5, [r3, #0]
 800db62:	e003      	b.n	800db6c <_printf_i+0xc4>
 800db64:	0645      	lsls	r5, r0, #25
 800db66:	d5fb      	bpl.n	800db60 <_printf_i+0xb8>
 800db68:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db6c:	2d00      	cmp	r5, #0
 800db6e:	da03      	bge.n	800db78 <_printf_i+0xd0>
 800db70:	232d      	movs	r3, #45	@ 0x2d
 800db72:	426d      	negs	r5, r5
 800db74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db78:	4859      	ldr	r0, [pc, #356]	@ (800dce0 <_printf_i+0x238>)
 800db7a:	230a      	movs	r3, #10
 800db7c:	e011      	b.n	800dba2 <_printf_i+0xfa>
 800db7e:	6821      	ldr	r1, [r4, #0]
 800db80:	6833      	ldr	r3, [r6, #0]
 800db82:	0608      	lsls	r0, r1, #24
 800db84:	f853 5b04 	ldr.w	r5, [r3], #4
 800db88:	d402      	bmi.n	800db90 <_printf_i+0xe8>
 800db8a:	0649      	lsls	r1, r1, #25
 800db8c:	bf48      	it	mi
 800db8e:	b2ad      	uxthmi	r5, r5
 800db90:	2f6f      	cmp	r7, #111	@ 0x6f
 800db92:	4853      	ldr	r0, [pc, #332]	@ (800dce0 <_printf_i+0x238>)
 800db94:	6033      	str	r3, [r6, #0]
 800db96:	bf14      	ite	ne
 800db98:	230a      	movne	r3, #10
 800db9a:	2308      	moveq	r3, #8
 800db9c:	2100      	movs	r1, #0
 800db9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dba2:	6866      	ldr	r6, [r4, #4]
 800dba4:	60a6      	str	r6, [r4, #8]
 800dba6:	2e00      	cmp	r6, #0
 800dba8:	bfa2      	ittt	ge
 800dbaa:	6821      	ldrge	r1, [r4, #0]
 800dbac:	f021 0104 	bicge.w	r1, r1, #4
 800dbb0:	6021      	strge	r1, [r4, #0]
 800dbb2:	b90d      	cbnz	r5, 800dbb8 <_printf_i+0x110>
 800dbb4:	2e00      	cmp	r6, #0
 800dbb6:	d04b      	beq.n	800dc50 <_printf_i+0x1a8>
 800dbb8:	4616      	mov	r6, r2
 800dbba:	fbb5 f1f3 	udiv	r1, r5, r3
 800dbbe:	fb03 5711 	mls	r7, r3, r1, r5
 800dbc2:	5dc7      	ldrb	r7, [r0, r7]
 800dbc4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dbc8:	462f      	mov	r7, r5
 800dbca:	42bb      	cmp	r3, r7
 800dbcc:	460d      	mov	r5, r1
 800dbce:	d9f4      	bls.n	800dbba <_printf_i+0x112>
 800dbd0:	2b08      	cmp	r3, #8
 800dbd2:	d10b      	bne.n	800dbec <_printf_i+0x144>
 800dbd4:	6823      	ldr	r3, [r4, #0]
 800dbd6:	07df      	lsls	r7, r3, #31
 800dbd8:	d508      	bpl.n	800dbec <_printf_i+0x144>
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	6861      	ldr	r1, [r4, #4]
 800dbde:	4299      	cmp	r1, r3
 800dbe0:	bfde      	ittt	le
 800dbe2:	2330      	movle	r3, #48	@ 0x30
 800dbe4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbe8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800dbec:	1b92      	subs	r2, r2, r6
 800dbee:	6122      	str	r2, [r4, #16]
 800dbf0:	f8cd a000 	str.w	sl, [sp]
 800dbf4:	464b      	mov	r3, r9
 800dbf6:	aa03      	add	r2, sp, #12
 800dbf8:	4621      	mov	r1, r4
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	f7ff fee6 	bl	800d9cc <_printf_common>
 800dc00:	3001      	adds	r0, #1
 800dc02:	d14a      	bne.n	800dc9a <_printf_i+0x1f2>
 800dc04:	f04f 30ff 	mov.w	r0, #4294967295
 800dc08:	b004      	add	sp, #16
 800dc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc0e:	6823      	ldr	r3, [r4, #0]
 800dc10:	f043 0320 	orr.w	r3, r3, #32
 800dc14:	6023      	str	r3, [r4, #0]
 800dc16:	4833      	ldr	r0, [pc, #204]	@ (800dce4 <_printf_i+0x23c>)
 800dc18:	2778      	movs	r7, #120	@ 0x78
 800dc1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dc1e:	6823      	ldr	r3, [r4, #0]
 800dc20:	6831      	ldr	r1, [r6, #0]
 800dc22:	061f      	lsls	r7, r3, #24
 800dc24:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc28:	d402      	bmi.n	800dc30 <_printf_i+0x188>
 800dc2a:	065f      	lsls	r7, r3, #25
 800dc2c:	bf48      	it	mi
 800dc2e:	b2ad      	uxthmi	r5, r5
 800dc30:	6031      	str	r1, [r6, #0]
 800dc32:	07d9      	lsls	r1, r3, #31
 800dc34:	bf44      	itt	mi
 800dc36:	f043 0320 	orrmi.w	r3, r3, #32
 800dc3a:	6023      	strmi	r3, [r4, #0]
 800dc3c:	b11d      	cbz	r5, 800dc46 <_printf_i+0x19e>
 800dc3e:	2310      	movs	r3, #16
 800dc40:	e7ac      	b.n	800db9c <_printf_i+0xf4>
 800dc42:	4827      	ldr	r0, [pc, #156]	@ (800dce0 <_printf_i+0x238>)
 800dc44:	e7e9      	b.n	800dc1a <_printf_i+0x172>
 800dc46:	6823      	ldr	r3, [r4, #0]
 800dc48:	f023 0320 	bic.w	r3, r3, #32
 800dc4c:	6023      	str	r3, [r4, #0]
 800dc4e:	e7f6      	b.n	800dc3e <_printf_i+0x196>
 800dc50:	4616      	mov	r6, r2
 800dc52:	e7bd      	b.n	800dbd0 <_printf_i+0x128>
 800dc54:	6833      	ldr	r3, [r6, #0]
 800dc56:	6825      	ldr	r5, [r4, #0]
 800dc58:	6961      	ldr	r1, [r4, #20]
 800dc5a:	1d18      	adds	r0, r3, #4
 800dc5c:	6030      	str	r0, [r6, #0]
 800dc5e:	062e      	lsls	r6, r5, #24
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	d501      	bpl.n	800dc68 <_printf_i+0x1c0>
 800dc64:	6019      	str	r1, [r3, #0]
 800dc66:	e002      	b.n	800dc6e <_printf_i+0x1c6>
 800dc68:	0668      	lsls	r0, r5, #25
 800dc6a:	d5fb      	bpl.n	800dc64 <_printf_i+0x1bc>
 800dc6c:	8019      	strh	r1, [r3, #0]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	4616      	mov	r6, r2
 800dc74:	e7bc      	b.n	800dbf0 <_printf_i+0x148>
 800dc76:	6833      	ldr	r3, [r6, #0]
 800dc78:	1d1a      	adds	r2, r3, #4
 800dc7a:	6032      	str	r2, [r6, #0]
 800dc7c:	681e      	ldr	r6, [r3, #0]
 800dc7e:	6862      	ldr	r2, [r4, #4]
 800dc80:	2100      	movs	r1, #0
 800dc82:	4630      	mov	r0, r6
 800dc84:	f7f2 facc 	bl	8000220 <memchr>
 800dc88:	b108      	cbz	r0, 800dc8e <_printf_i+0x1e6>
 800dc8a:	1b80      	subs	r0, r0, r6
 800dc8c:	6060      	str	r0, [r4, #4]
 800dc8e:	6863      	ldr	r3, [r4, #4]
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	2300      	movs	r3, #0
 800dc94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc98:	e7aa      	b.n	800dbf0 <_printf_i+0x148>
 800dc9a:	6923      	ldr	r3, [r4, #16]
 800dc9c:	4632      	mov	r2, r6
 800dc9e:	4649      	mov	r1, r9
 800dca0:	4640      	mov	r0, r8
 800dca2:	47d0      	blx	sl
 800dca4:	3001      	adds	r0, #1
 800dca6:	d0ad      	beq.n	800dc04 <_printf_i+0x15c>
 800dca8:	6823      	ldr	r3, [r4, #0]
 800dcaa:	079b      	lsls	r3, r3, #30
 800dcac:	d413      	bmi.n	800dcd6 <_printf_i+0x22e>
 800dcae:	68e0      	ldr	r0, [r4, #12]
 800dcb0:	9b03      	ldr	r3, [sp, #12]
 800dcb2:	4298      	cmp	r0, r3
 800dcb4:	bfb8      	it	lt
 800dcb6:	4618      	movlt	r0, r3
 800dcb8:	e7a6      	b.n	800dc08 <_printf_i+0x160>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4632      	mov	r2, r6
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	47d0      	blx	sl
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d09d      	beq.n	800dc04 <_printf_i+0x15c>
 800dcc8:	3501      	adds	r5, #1
 800dcca:	68e3      	ldr	r3, [r4, #12]
 800dccc:	9903      	ldr	r1, [sp, #12]
 800dcce:	1a5b      	subs	r3, r3, r1
 800dcd0:	42ab      	cmp	r3, r5
 800dcd2:	dcf2      	bgt.n	800dcba <_printf_i+0x212>
 800dcd4:	e7eb      	b.n	800dcae <_printf_i+0x206>
 800dcd6:	2500      	movs	r5, #0
 800dcd8:	f104 0619 	add.w	r6, r4, #25
 800dcdc:	e7f5      	b.n	800dcca <_printf_i+0x222>
 800dcde:	bf00      	nop
 800dce0:	0800de81 	.word	0x0800de81
 800dce4:	0800de92 	.word	0x0800de92

0800dce8 <memmove>:
 800dce8:	4288      	cmp	r0, r1
 800dcea:	b510      	push	{r4, lr}
 800dcec:	eb01 0402 	add.w	r4, r1, r2
 800dcf0:	d902      	bls.n	800dcf8 <memmove+0x10>
 800dcf2:	4284      	cmp	r4, r0
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	d807      	bhi.n	800dd08 <memmove+0x20>
 800dcf8:	1e43      	subs	r3, r0, #1
 800dcfa:	42a1      	cmp	r1, r4
 800dcfc:	d008      	beq.n	800dd10 <memmove+0x28>
 800dcfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd06:	e7f8      	b.n	800dcfa <memmove+0x12>
 800dd08:	4402      	add	r2, r0
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	428a      	cmp	r2, r1
 800dd0e:	d100      	bne.n	800dd12 <memmove+0x2a>
 800dd10:	bd10      	pop	{r4, pc}
 800dd12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd1a:	e7f7      	b.n	800dd0c <memmove+0x24>

0800dd1c <_sbrk_r>:
 800dd1c:	b538      	push	{r3, r4, r5, lr}
 800dd1e:	4d06      	ldr	r5, [pc, #24]	@ (800dd38 <_sbrk_r+0x1c>)
 800dd20:	2300      	movs	r3, #0
 800dd22:	4604      	mov	r4, r0
 800dd24:	4608      	mov	r0, r1
 800dd26:	602b      	str	r3, [r5, #0]
 800dd28:	f7f3 ff3e 	bl	8001ba8 <_sbrk>
 800dd2c:	1c43      	adds	r3, r0, #1
 800dd2e:	d102      	bne.n	800dd36 <_sbrk_r+0x1a>
 800dd30:	682b      	ldr	r3, [r5, #0]
 800dd32:	b103      	cbz	r3, 800dd36 <_sbrk_r+0x1a>
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	bd38      	pop	{r3, r4, r5, pc}
 800dd38:	20001764 	.word	0x20001764

0800dd3c <memcpy>:
 800dd3c:	440a      	add	r2, r1
 800dd3e:	4291      	cmp	r1, r2
 800dd40:	f100 33ff 	add.w	r3, r0, #4294967295
 800dd44:	d100      	bne.n	800dd48 <memcpy+0xc>
 800dd46:	4770      	bx	lr
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dd4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dd52:	4291      	cmp	r1, r2
 800dd54:	d1f9      	bne.n	800dd4a <memcpy+0xe>
 800dd56:	bd10      	pop	{r4, pc}

0800dd58 <_realloc_r>:
 800dd58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd5c:	4680      	mov	r8, r0
 800dd5e:	4615      	mov	r5, r2
 800dd60:	460c      	mov	r4, r1
 800dd62:	b921      	cbnz	r1, 800dd6e <_realloc_r+0x16>
 800dd64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd68:	4611      	mov	r1, r2
 800dd6a:	f7ff bc4b 	b.w	800d604 <_malloc_r>
 800dd6e:	b92a      	cbnz	r2, 800dd7c <_realloc_r+0x24>
 800dd70:	f7ff fbdc 	bl	800d52c <_free_r>
 800dd74:	2400      	movs	r4, #0
 800dd76:	4620      	mov	r0, r4
 800dd78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd7c:	f000 f81a 	bl	800ddb4 <_malloc_usable_size_r>
 800dd80:	4285      	cmp	r5, r0
 800dd82:	4606      	mov	r6, r0
 800dd84:	d802      	bhi.n	800dd8c <_realloc_r+0x34>
 800dd86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd8a:	d8f4      	bhi.n	800dd76 <_realloc_r+0x1e>
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	4640      	mov	r0, r8
 800dd90:	f7ff fc38 	bl	800d604 <_malloc_r>
 800dd94:	4607      	mov	r7, r0
 800dd96:	2800      	cmp	r0, #0
 800dd98:	d0ec      	beq.n	800dd74 <_realloc_r+0x1c>
 800dd9a:	42b5      	cmp	r5, r6
 800dd9c:	462a      	mov	r2, r5
 800dd9e:	4621      	mov	r1, r4
 800dda0:	bf28      	it	cs
 800dda2:	4632      	movcs	r2, r6
 800dda4:	f7ff ffca 	bl	800dd3c <memcpy>
 800dda8:	4621      	mov	r1, r4
 800ddaa:	4640      	mov	r0, r8
 800ddac:	f7ff fbbe 	bl	800d52c <_free_r>
 800ddb0:	463c      	mov	r4, r7
 800ddb2:	e7e0      	b.n	800dd76 <_realloc_r+0x1e>

0800ddb4 <_malloc_usable_size_r>:
 800ddb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddb8:	1f18      	subs	r0, r3, #4
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	bfbc      	itt	lt
 800ddbe:	580b      	ldrlt	r3, [r1, r0]
 800ddc0:	18c0      	addlt	r0, r0, r3
 800ddc2:	4770      	bx	lr

0800ddc4 <_init>:
 800ddc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc6:	bf00      	nop
 800ddc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddca:	bc08      	pop	{r3}
 800ddcc:	469e      	mov	lr, r3
 800ddce:	4770      	bx	lr

0800ddd0 <_fini>:
 800ddd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddd2:	bf00      	nop
 800ddd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddd6:	bc08      	pop	{r3}
 800ddd8:	469e      	mov	lr, r3
 800ddda:	4770      	bx	lr
