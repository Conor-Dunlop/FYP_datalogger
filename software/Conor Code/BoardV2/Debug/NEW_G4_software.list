
NEW_G4_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0a0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800d278  0800d278  0000e278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d300  0800d300  0000f184  2**0
                  CONTENTS
  4 .ARM          00000008  0800d300  0800d300  0000e300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d308  0800d308  0000f184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d308  0800d308  0000e308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d30c  0800d30c  0000e30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800d310  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000184  0800d494  0000f184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800d494  0000f5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025274  00000000  00000000  0000f1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005819  00000000  00000000  00034428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  00039c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001686  00000000  00000000  0003b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280c7  00000000  00000000  0003d056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a27d  00000000  00000000  0006511d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebee2  00000000  00000000  0008f39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b27c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c2c  00000000  00000000  0017b2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00182eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d260 	.word	0x0800d260

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800d260 	.word	0x0800d260

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	@ 0x30
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00c fa7b 	bl	800d208 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d12:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d22:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d34:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d40:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d46:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d7e:	f001 fa37 	bl	80021f0 <HAL_ADC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d88:	f000 fd13 	bl	80017b2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4811      	ldr	r0, [pc, #68]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d98:	f001 ffc4 	bl	8002d24 <HAL_ADCEx_MultiModeConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000da2:	f000 fd06 	bl	80017b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_ADC1_Init+0xec>)
 8000da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000daa:	2306      	movs	r3, #6
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db2:	237f      	movs	r3, #127	@ 0x7f
 8000db4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db6:	2304      	movs	r3, #4
 8000db8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000dc4:	f001 fb98 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000dce:	f000 fcf0 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	@ 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001a0 	.word	0x200001a0
 8000de0:	04300002 	.word	0x04300002

08000de4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2220      	movs	r2, #32
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00c fa09 	bl	800d208 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000df6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000df8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea8 <MX_ADC2_Init+0xc4>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000dfe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e02:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e22:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e5e:	4811      	ldr	r0, [pc, #68]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e60:	f001 f9c6 	bl	80021f0 <HAL_ADC_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 fca2 	bl	80017b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_ADC2_Init+0xc8>)
 8000e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e72:	2306      	movs	r3, #6
 8000e74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7a:	237f      	movs	r3, #127	@ 0x7f
 8000e7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e8c:	f001 fb34 	bl	80024f8 <HAL_ADC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000e96:	f000 fc8c 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000020c 	.word	0x2000020c
 8000ea8:	50000100 	.word	0x50000100
 8000eac:	2e300800 	.word	0x2e300800

08000eb0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09e      	sub	sp, #120	@ 0x78
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	2244      	movs	r2, #68	@ 0x44
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00c f999 	bl	800d208 <memset>
  if(adcHandle->Instance==ADC1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ede:	d16f      	bne.n	8000fc0 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ee4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ee6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f005 fe19 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000efc:	f000 fc59 	bl	80017b2 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f00:	4b52      	ldr	r3, [pc, #328]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a51      	ldr	r2, [pc, #324]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000f08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f0a:	4b50      	ldr	r3, [pc, #320]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10b      	bne.n	8000f2a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f12:	4b4f      	ldr	r3, [pc, #316]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a4e      	ldr	r2, [pc, #312]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b49      	ldr	r3, [pc, #292]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a48      	ldr	r2, [pc, #288]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f36:	4b46      	ldr	r3, [pc, #280]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b43      	ldr	r3, [pc, #268]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a42      	ldr	r2, [pc, #264]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b40      	ldr	r3, [pc, #256]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b3a      	ldr	r3, [pc, #232]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_7_Pin|ADC_8_Pin|ADC_9_Pin|ADC_10_Pin;
 8000f72:	230f      	movs	r3, #15
 8000f74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f82:	4619      	mov	r1, r3
 8000f84:	4833      	ldr	r0, [pc, #204]	@ (8001054 <HAL_ADC_MspInit+0x1a4>)
 8000f86:	f002 fa5b 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|OPAMP_SIG_2_Pin|OPAMP_SIG_4_Pin;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f002 fa4e 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPAMP_SIG_1_Pin|ADC_3_Pin|DIGITAL_IO_2_Pin;
 8000fa4:	f245 0301 	movw	r3, #20481	@ 0x5001
 8000fa8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000faa:	2303      	movs	r3, #3
 8000fac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4827      	ldr	r0, [pc, #156]	@ (8001058 <HAL_ADC_MspInit+0x1a8>)
 8000fba:	f002 fa41 	bl	8003440 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000fbe:	e041      	b.n	8001044 <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a25      	ldr	r2, [pc, #148]	@ (800105c <HAL_ADC_MspInit+0x1ac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d13c      	bne.n	8001044 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fd0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 fda4 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 8000fe6:	f000 fbe4 	bl	80017b2 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a16      	ldr	r2, [pc, #88]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000ff2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10b      	bne.n	8001014 <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a13      	ldr	r2, [pc, #76]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8001002:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPAMP_SIG_3_Pin;
 800102c:	2320      	movs	r3, #32
 800102e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001030:	2303      	movs	r3, #3
 8001032:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OPAMP_SIG_3_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <HAL_ADC_MspInit+0x1a4>)
 8001040:	f002 f9fe 	bl	8003440 <HAL_GPIO_Init>
}
 8001044:	bf00      	nop
 8001046:	3778      	adds	r7, #120	@ 0x78
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000278 	.word	0x20000278
 8001050:	40021000 	.word	0x40021000
 8001054:	48000800 	.word	0x48000800
 8001058:	48000400 	.word	0x48000400
 800105c:	50000100 	.word	0x50000100

08001060 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2230      	movs	r2, #48	@ 0x30
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00c f8cb 	bl	800d208 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_DAC1_Init+0x80>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <MX_DAC1_Init+0x84>)
 8001076:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001078:	4819      	ldr	r0, [pc, #100]	@ (80010e0 <MX_DAC1_Init+0x80>)
 800107a:	f002 f806 	bl	800308a <HAL_DAC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001084:	f000 fb95 	bl	80017b2 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001088:	2302      	movs	r3, #2
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <MX_DAC1_Init+0x80>)
 80010b4:	f002 f80c 	bl	80030d0 <HAL_DAC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80010be:	f000 fb78 	bl	80017b2 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2210      	movs	r2, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_DAC1_Init+0x80>)
 80010ca:	f002 f801 	bl	80030d0 <HAL_DAC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80010d4:	f000 fb6d 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	@ 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000027c 	.word	0x2000027c
 80010e4:	50000800 	.word	0x50000800

080010e8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a15      	ldr	r2, [pc, #84]	@ (800115c <HAL_DAC_MspInit+0x74>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d124      	bne.n	8001154 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 800113a:	2330      	movs	r3, #48	@ 0x30
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f002 f976 	bl	8003440 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50000800 	.word	0x50000800
 8001160:	40021000 	.word	0x40021000

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b5d      	ldr	r3, [pc, #372]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a5c      	ldr	r2, [pc, #368]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b5a      	ldr	r3, [pc, #360]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001192:	4b57      	ldr	r3, [pc, #348]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a56      	ldr	r2, [pc, #344]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b54      	ldr	r3, [pc, #336]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b51      	ldr	r3, [pc, #324]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a50      	ldr	r2, [pc, #320]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b4e      	ldr	r3, [pc, #312]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	4b45      	ldr	r3, [pc, #276]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a44      	ldr	r2, [pc, #272]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b42      	ldr	r3, [pc, #264]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 80011f2:	2200      	movs	r2, #0
 80011f4:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 80011f8:	483e      	ldr	r0, [pc, #248]	@ (80012f4 <MX_GPIO_Init+0x190>)
 80011fa:	f002 faa3 	bl	8003744 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001204:	483c      	ldr	r0, [pc, #240]	@ (80012f8 <MX_GPIO_Init+0x194>)
 8001206:	f002 fa9d 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_EN_GPIO_Port, SD_CARD_EN_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f002 fa96 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2104      	movs	r1, #4
 800121c:	4837      	ldr	r0, [pc, #220]	@ (80012fc <MX_GPIO_Init+0x198>)
 800121e:	f002 fa91 	bl	8003744 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_IO_1_Pin|COMMS_IO_2_Pin|COMMS_IO_3_Pin;
 8001222:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4830      	ldr	r0, [pc, #192]	@ (80012f8 <MX_GPIO_Init+0x194>)
 8001238:	f002 f902 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 800123c:	2304      	movs	r3, #4
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001252:	f002 f8f5 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 8001256:	f24a 43a2 	movw	r3, #42146	@ 0xa4a2
 800125a:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4821      	ldr	r0, [pc, #132]	@ (80012f4 <MX_GPIO_Init+0x190>)
 8001270:	f002 f8e6 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_1_Pin|DIGITAL_IO_6_Pin|SD_CARD_DETECT_Pin;
 8001274:	f640 2304 	movw	r3, #2564	@ 0xa04
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	481a      	ldr	r0, [pc, #104]	@ (80012f4 <MX_GPIO_Init+0x190>)
 800128a:	f002 f8d9 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin;
 800128e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <MX_GPIO_Init+0x194>)
 80012a8:	f002 f8ca 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_EN_Pin;
 80012ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CARD_EN_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c8:	f002 f8ba 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 80012cc:	2304      	movs	r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_GPIO_Init+0x198>)
 80012e4:	f002 f8ac 	bl	8003440 <HAL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00

08001300 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001306:	4a1c      	ldr	r2, [pc, #112]	@ (8001378 <MX_I2C2_Init+0x78>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_I2C2_Init+0x74>)
 800130c:	f240 1203 	movw	r2, #259	@ 0x103
 8001310:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_I2C2_Init+0x74>)
 800131a:	2201      	movs	r2, #1
 800131c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_I2C2_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800133c:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_I2C2_Init+0x74>)
 800133e:	f002 fa19 	bl	8003774 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 fa33 	bl	80017b2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	4809      	ldr	r0, [pc, #36]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001350:	f003 f84c 	bl	80043ec <HAL_I2CEx_ConfigAnalogFilter>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800135a:	f000 fa2a 	bl	80017b2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001362:	f003 f88e 	bl	8004482 <HAL_I2CEx_ConfigDigitalFilter>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800136c:	f000 fa21 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000290 	.word	0x20000290
 8001378:	40005800 	.word	0x40005800

0800137c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b09c      	sub	sp, #112	@ 0x70
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2244      	movs	r2, #68	@ 0x44
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00b ff33 	bl	800d208 <memset>
  if(i2cHandle->Instance==I2C2)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a2d      	ldr	r2, [pc, #180]	@ (800145c <HAL_I2C_MspInit+0xe0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d153      	bne.n	8001454 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f005 fbb5 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013c4:	f000 f9f5 	bl	80017b2 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	4a24      	ldr	r2, [pc, #144]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d4:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013f8:	2310      	movs	r3, #16
 80013fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fc:	2312      	movs	r3, #18
 80013fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001408:	2304      	movs	r3, #4
 800140a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001410:	4619      	mov	r1, r3
 8001412:	4814      	ldr	r0, [pc, #80]	@ (8001464 <HAL_I2C_MspInit+0xe8>)
 8001414:	f002 f814 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	2312      	movs	r3, #18
 8001420:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800142a:	2304      	movs	r3, #4
 800142c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f002 f802 	bl	8003440 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 8001442:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001446:	6593      	str	r3, [r2, #88]	@ 0x58
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001454:	bf00      	nop
 8001456:	3770      	adds	r7, #112	@ 0x70
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40005800 	.word	0x40005800
 8001460:	40021000 	.word	0x40021000
 8001464:	48000800 	.word	0x48000800

08001468 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af02      	add	r7, sp, #8
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2] = {0};
 8001472:	2300      	movs	r3, #0
 8001474:	813b      	strh	r3, [r7, #8]
	int32_t tempC = -100;
 8001476:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 800147a:	60fb      	str	r3, [r7, #12]
		// Receive the temperature data
	//if (HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY) != HAL_OK) { // Receive is unsuccessfull
		// Reception error
		//HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
	//}
	if (HAL_I2C_IsDeviceReady (&hi2c2, MCP9804_ADDR, 2, HAL_MAX_DELAY) == HAL_OK) { // Ready is unsuccessfull
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	2202      	movs	r2, #2
 8001482:	211c      	movs	r1, #28
 8001484:	4832      	ldr	r0, [pc, #200]	@ (8001550 <readMCP9804Temp+0xe8>)
 8001486:	f002 fc1f 	bl	8003cc8 <HAL_I2C_IsDeviceReady>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d15a      	bne.n	8001546 <readMCP9804Temp+0xde>
			// Reception error
		if (HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &tempRegAddr, 1, HAL_MAX_DELAY) != HAL_OK) {
 8001490:	1dfa      	adds	r2, r7, #7
 8001492:	f04f 33ff 	mov.w	r3, #4294967295
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2301      	movs	r3, #1
 800149a:	211c      	movs	r1, #28
 800149c:	482c      	ldr	r0, [pc, #176]	@ (8001550 <readMCP9804Temp+0xe8>)
 800149e:	f002 fa05 	bl	80038ac <HAL_I2C_Master_Transmit>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00f      	beq.n	80014c8 <readMCP9804Temp+0x60>
			HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 80014a8:	2200      	movs	r2, #0
 80014aa:	2104      	movs	r1, #4
 80014ac:	4829      	ldr	r0, [pc, #164]	@ (8001554 <readMCP9804Temp+0xec>)
 80014ae:	f002 f949 	bl	8003744 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 80014b2:	2201      	movs	r2, #1
 80014b4:	2120      	movs	r1, #32
 80014b6:	4828      	ldr	r0, [pc, #160]	@ (8001558 <readMCP9804Temp+0xf0>)
 80014b8:	f002 f944 	bl	8003744 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 80014bc:	2201      	movs	r2, #1
 80014be:	2180      	movs	r1, #128	@ 0x80
 80014c0:	4825      	ldr	r0, [pc, #148]	@ (8001558 <readMCP9804Temp+0xf0>)
 80014c2:	f002 f93f 	bl	8003744 <HAL_GPIO_WritePin>
 80014c6:	e03e      	b.n	8001546 <readMCP9804Temp+0xde>
		} else {
			HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY);
 80014c8:	f107 0208 	add.w	r2, r7, #8
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2302      	movs	r3, #2
 80014d4:	211c      	movs	r1, #28
 80014d6:	481e      	ldr	r0, [pc, #120]	@ (8001550 <readMCP9804Temp+0xe8>)
 80014d8:	f002 fb00 	bl	8003adc <HAL_I2C_Master_Receive>
			uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 80014dc:	7a3b      	ldrb	r3, [r7, #8]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	7a7b      	ldrb	r3, [r7, #9]
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	b21b      	sxth	r3, r3
 80014ea:	817b      	strh	r3, [r7, #10]
			rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 80014ec:	897b      	ldrh	r3, [r7, #10]
 80014ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f2:	817b      	strh	r3, [r7, #10]

			tempC = rawTemp & 0x0FFF;
 80014f4:	897b      	ldrh	r3, [r7, #10]
 80014f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fa:	60fb      	str	r3, [r7, #12]
			tempC /= 16.0;
 80014fc:	68f8      	ldr	r0, [r7, #12]
 80014fe:	f7fe ffdd 	bl	80004bc <__aeabi_i2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <readMCP9804Temp+0xf4>)
 8001508:	f7ff f96c 	bl	80007e4 <__aeabi_ddiv>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fa4e 	bl	80009b4 <__aeabi_d2iz>
 8001518:	4603      	mov	r3, r0
 800151a:	60fb      	str	r3, [r7, #12]

			if (rawTemp & 0x1000) {  // Check sign bit
 800151c:	897b      	ldrh	r3, [r7, #10]
 800151e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d00f      	beq.n	8001546 <readMCP9804Temp+0xde>
			  tempC -= 256.0;
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7fe ffc8 	bl	80004bc <__aeabi_i2d>
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <readMCP9804Temp+0xf8>)
 8001532:	f7fe fe75 	bl	8000220 <__aeabi_dsub>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fa39 	bl	80009b4 <__aeabi_d2iz>
 8001542:	4603      	mov	r3, r0
 8001544:	60fb      	str	r3, [r7, #12]
			}
		}
	}
    return tempC;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000290 	.word	0x20000290
 8001554:	48000c00 	.word	0x48000c00
 8001558:	48000400 	.word	0x48000400
 800155c:	40300000 	.word	0x40300000
 8001560:	40700000 	.word	0x40700000

08001564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156a:	f000 fbd8 	bl	8001d1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800156e:	f000 f8d1 	bl	8001714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001572:	f7ff fdf7 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001576:	f7ff fbbd 	bl	8000cf4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800157a:	f7ff fc33 	bl	8000de4 <MX_ADC2_Init>
  MX_DAC1_Init();
 800157e:	f7ff fd6f 	bl	8001060 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001582:	f000 f991 	bl	80018a8 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8001586:	f000 facd 	bl	8001b24 <MX_UCPD1_Init>
  MX_I2C2_Init();
 800158a:	f7ff feb9 	bl	8001300 <MX_I2C2_Init>
  MX_RTC_Init();
 800158e:	f000 f917 	bl	80017c0 <MX_RTC_Init>
  MX_USB_Device_Init();
 8001592:	f00b f955 	bl	800c840 <MX_USB_Device_Init>
  MX_UART4_Init();
 8001596:	f000 faf3 	bl	8001b80 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]

    int num_bytes = 4;
 800159e:	2304      	movs	r3, #4
 80015a0:	613b      	str	r3, [r7, #16]

    uint8_t dataToSend[4];
    dataToSend[0] = 0x5;// Example data
 80015a2:	2305      	movs	r3, #5
 80015a4:	713b      	strb	r3, [r7, #4]
    dataToSend[1] = 0x5;// Example data
 80015a6:	2305      	movs	r3, #5
 80015a8:	717b      	strb	r3, [r7, #5]
    dataToSend[2] = 0x5;// Example data
 80015aa:	2305      	movs	r3, #5
 80015ac:	71bb      	strb	r3, [r7, #6]
    dataToSend[3] = 0x5;// Example data
 80015ae:	2305      	movs	r3, #5
 80015b0:	71fb      	strb	r3, [r7, #7]

    //HAL_StatusTypeDef sts = HAL_OK;

    HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 80015b2:	2201      	movs	r2, #1
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	4852      	ldr	r0, [pc, #328]	@ (8001700 <main+0x19c>)
 80015b8:	f002 f8c4 	bl	8003744 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 80015bc:	2201      	movs	r2, #1
 80015be:	2120      	movs	r1, #32
 80015c0:	484f      	ldr	r0, [pc, #316]	@ (8001700 <main+0x19c>)
 80015c2:	f002 f8bf 	bl	8003744 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 80015c6:	2201      	movs	r2, #1
 80015c8:	2104      	movs	r1, #4
 80015ca:	484e      	ldr	r0, [pc, #312]	@ (8001704 <main+0x1a0>)
 80015cc:	f002 f8ba 	bl	8003744 <HAL_GPIO_WritePin>


    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80015d0:	484d      	ldr	r0, [pc, #308]	@ (8001708 <main+0x1a4>)
 80015d2:	f002 f8cf 	bl	8003774 <HAL_I2C_Init>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <main+0x82>
            // Initialization error
  	  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 80015dc:	2200      	movs	r2, #0
 80015de:	2104      	movs	r1, #4
 80015e0:	4848      	ldr	r0, [pc, #288]	@ (8001704 <main+0x1a0>)
 80015e2:	f002 f8af 	bl	8003744 <HAL_GPIO_WritePin>
        }
    uint8_t tempRegAddr = 0x05;
 80015e6:	2305      	movs	r3, #5
 80015e8:	73fb      	strb	r3, [r7, #15]
    	  {
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
    	  }*/


    	HAL_Delay(1000);
 80015ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015ee:	f000 fc07 	bl	8001e00 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // CS low Digital IO 1 COMM_EN_3
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f8:	4844      	ldr	r0, [pc, #272]	@ (800170c <main+0x1a8>)
 80015fa:	f002 f8a3 	bl	8003744 <HAL_GPIO_WritePin>
    	status = HAL_SPI_Transmit(&hspi1, (uint8_t *)&dataToSend, num_bytes, HAL_MAX_DELAY);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	b29a      	uxth	r2, r3
 8001602:	1d39      	adds	r1, r7, #4
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
 8001608:	4841      	ldr	r0, [pc, #260]	@ (8001710 <main+0x1ac>)
 800160a:	f005 feb9 	bl	8007380 <HAL_SPI_Transmit>
 800160e:	4603      	mov	r3, r0
 8001610:	617b      	str	r3, [r7, #20]
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // CS high Digital IO 1 COMM_EN_3
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001618:	483c      	ldr	r0, [pc, #240]	@ (800170c <main+0x1a8>)
 800161a:	f002 f893 	bl	8003744 <HAL_GPIO_WritePin>

    	if (status == HAL_OK)
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d10f      	bne.n	8001644 <main+0xe0>
    	{
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 8001624:	2200      	movs	r2, #0
 8001626:	2180      	movs	r1, #128	@ 0x80
 8001628:	4835      	ldr	r0, [pc, #212]	@ (8001700 <main+0x19c>)
 800162a:	f002 f88b 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800162e:	2201      	movs	r2, #1
 8001630:	2120      	movs	r1, #32
 8001632:	4833      	ldr	r0, [pc, #204]	@ (8001700 <main+0x19c>)
 8001634:	f002 f886 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001638:	2201      	movs	r2, #1
 800163a:	2104      	movs	r1, #4
 800163c:	4831      	ldr	r0, [pc, #196]	@ (8001704 <main+0x1a0>)
 800163e:	f002 f881 	bl	8003744 <HAL_GPIO_WritePin>
 8001642:	e021      	b.n	8001688 <main+0x124>
    	} else if (status == HAL_BUSY){
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d10f      	bne.n	800166a <main+0x106>
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800164a:	2201      	movs	r2, #1
 800164c:	2104      	movs	r1, #4
 800164e:	482d      	ldr	r0, [pc, #180]	@ (8001704 <main+0x1a0>)
 8001650:	f002 f878 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 8001654:	2200      	movs	r2, #0
 8001656:	2120      	movs	r1, #32
 8001658:	4829      	ldr	r0, [pc, #164]	@ (8001700 <main+0x19c>)
 800165a:	f002 f873 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 800165e:	2201      	movs	r2, #1
 8001660:	2180      	movs	r1, #128	@ 0x80
 8001662:	4827      	ldr	r0, [pc, #156]	@ (8001700 <main+0x19c>)
 8001664:	f002 f86e 	bl	8003744 <HAL_GPIO_WritePin>
 8001668:	e00e      	b.n	8001688 <main+0x124>
    	}
    	else
    	{
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn on error LED
 800166a:	2201      	movs	r2, #1
 800166c:	2104      	movs	r1, #4
 800166e:	4825      	ldr	r0, [pc, #148]	@ (8001704 <main+0x1a0>)
 8001670:	f002 f868 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001674:	2201      	movs	r2, #1
 8001676:	2120      	movs	r1, #32
 8001678:	4821      	ldr	r0, [pc, #132]	@ (8001700 <main+0x19c>)
 800167a:	f002 f863 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 800167e:	2201      	movs	r2, #1
 8001680:	2180      	movs	r1, #128	@ 0x80
 8001682:	481f      	ldr	r0, [pc, #124]	@ (8001700 <main+0x19c>)
 8001684:	f002 f85e 	bl	8003744 <HAL_GPIO_WritePin>
    	}



    	HAL_Delay(1000);
 8001688:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800168c:	f000 fbb8 	bl	8001e00 <HAL_Delay>
    	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001690:	2201      	movs	r2, #1
 8001692:	2104      	movs	r1, #4
 8001694:	481b      	ldr	r0, [pc, #108]	@ (8001704 <main+0x1a0>)
 8001696:	f002 f855 	bl	8003744 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 800169a:	2201      	movs	r2, #1
 800169c:	2120      	movs	r1, #32
 800169e:	4818      	ldr	r0, [pc, #96]	@ (8001700 <main+0x19c>)
 80016a0:	f002 f850 	bl	8003744 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
 80016a4:	2201      	movs	r2, #1
 80016a6:	2180      	movs	r1, #128	@ 0x80
 80016a8:	4815      	ldr	r0, [pc, #84]	@ (8001700 <main+0x19c>)
 80016aa:	f002 f84b 	bl	8003744 <HAL_GPIO_WritePin>
    	int32_t tempC = readMCP9804Temp(tempRegAddr);
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fed9 	bl	8001468 <readMCP9804Temp>
 80016b6:	60b8      	str	r0, [r7, #8]
    	if (tempC == -100) {
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 80016be:	d10e      	bne.n	80016de <main+0x17a>
    		//temp read error
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 80016c0:	2200      	movs	r2, #0
 80016c2:	2104      	movs	r1, #4
 80016c4:	480f      	ldr	r0, [pc, #60]	@ (8001704 <main+0x1a0>)
 80016c6:	f002 f83d 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 80016ca:	2200      	movs	r2, #0
 80016cc:	2120      	movs	r1, #32
 80016ce:	480c      	ldr	r0, [pc, #48]	@ (8001700 <main+0x19c>)
 80016d0:	f002 f838 	bl	8003744 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
 80016d4:	2200      	movs	r2, #0
 80016d6:	2180      	movs	r1, #128	@ 0x80
 80016d8:	4809      	ldr	r0, [pc, #36]	@ (8001700 <main+0x19c>)
 80016da:	f002 f833 	bl	8003744 <HAL_GPIO_WritePin>
    	}
    	dataToSend[0] = (tempC >> 24) & 0xFF;
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	0e1b      	lsrs	r3, r3, #24
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	713b      	strb	r3, [r7, #4]
    	dataToSend[1] = (tempC >> 16) & 0xFF;
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	141b      	asrs	r3, r3, #16
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	717b      	strb	r3, [r7, #5]
    	dataToSend[2] = (tempC >> 8) & 0xFF;
 80016ee:	68bb      	ldr	r3, [r7, #8]
 80016f0:	121b      	asrs	r3, r3, #8
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	71bb      	strb	r3, [r7, #6]
    	dataToSend[3] = tempC & 0xFF;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	71fb      	strb	r3, [r7, #7]
    {// mototola or TIS versions who knows which is on or compatable with arduino due to (Frame Formats) for spi
 80016fc:	e775      	b.n	80015ea <main+0x86>
 80016fe:	bf00      	nop
 8001700:	48000400 	.word	0x48000400
 8001704:	48000c00 	.word	0x48000c00
 8001708:	20000290 	.word	0x20000290
 800170c:	48000800 	.word	0x48000800
 8001710:	2000030c 	.word	0x2000030c

08001714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b094      	sub	sp, #80	@ 0x50
 8001718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171a:	f107 0318 	add.w	r3, r7, #24
 800171e:	2238      	movs	r2, #56	@ 0x38
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f00b fd70 	bl	800d208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001736:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800173a:	f004 fc23 	bl	8005f84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800173e:	230a      	movs	r3, #10
 8001740:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001742:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001748:	2340      	movs	r3, #64	@ 0x40
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800174c:	2301      	movs	r3, #1
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001750:	2302      	movs	r3, #2
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001754:	2302      	movs	r3, #2
 8001756:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001758:	2301      	movs	r3, #1
 800175a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 800175c:	230c      	movs	r3, #12
 800175e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001760:	2302      	movs	r3, #2
 8001762:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001764:	2304      	movs	r3, #4
 8001766:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001768:	2302      	movs	r3, #2
 800176a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176c:	f107 0318 	add.w	r3, r7, #24
 8001770:	4618      	mov	r0, r3
 8001772:	f004 fcab 	bl	80060cc <HAL_RCC_OscConfig>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 800177c:	f000 f819 	bl	80017b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001780:	230f      	movs	r3, #15
 8001782:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001784:	2301      	movs	r3, #1
 8001786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800178c:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001790:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f004 ffa8 	bl	80066f0 <HAL_RCC_ClockConfig>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017a6:	f000 f804 	bl	80017b2 <Error_Handler>
  }
}
 80017aa:	bf00      	nop
 80017ac:	3750      	adds	r7, #80	@ 0x50
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b6:	b672      	cpsid	i
}
 80017b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <Error_Handler+0x8>
	...

080017c0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017c4:	4b18      	ldr	r3, [pc, #96]	@ (8001828 <MX_RTC_Init+0x68>)
 80017c6:	4a19      	ldr	r2, [pc, #100]	@ (800182c <MX_RTC_Init+0x6c>)
 80017c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <MX_RTC_Init+0x68>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017d0:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <MX_RTC_Init+0x68>)
 80017d2:	227f      	movs	r2, #127	@ 0x7f
 80017d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017d6:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <MX_RTC_Init+0x68>)
 80017d8:	22ff      	movs	r2, #255	@ 0xff
 80017da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017dc:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <MX_RTC_Init+0x68>)
 80017de:	2200      	movs	r2, #0
 80017e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <MX_RTC_Init+0x68>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001828 <MX_RTC_Init+0x68>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_RTC_Init+0x68>)
 80017f0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <MX_RTC_Init+0x68>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017fc:	480a      	ldr	r0, [pc, #40]	@ (8001828 <MX_RTC_Init+0x68>)
 80017fe:	f005 fb83 	bl	8006f08 <HAL_RTC_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001808:	f7ff ffd3 	bl	80017b2 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 800180c:	2206      	movs	r2, #6
 800180e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_RTC_Init+0x68>)
 8001814:	f005 fc95 	bl	8007142 <HAL_RTCEx_SetWakeUpTimer>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800181e:	f7ff ffc8 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200002e4 	.word	0x200002e4
 800182c:	40002800 	.word	0x40002800

08001830 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	@ 0x50
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2244      	movs	r2, #68	@ 0x44
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f00b fce1 	bl	800d208 <memset>
  if(rtcHandle->Instance==RTC)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a15      	ldr	r2, [pc, #84]	@ (80018a0 <HAL_RTC_MspInit+0x70>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d123      	bne.n	8001898 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001850:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001854:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001856:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800185a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4618      	mov	r0, r3
 8001862:	f005 f961 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800186c:	f7ff ffa1 	bl	80017b2 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001870:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <HAL_RTC_MspInit+0x74>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001876:	4a0b      	ldr	r2, [pc, #44]	@ (80018a4 <HAL_RTC_MspInit+0x74>)
 8001878:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <HAL_RTC_MspInit+0x74>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001884:	4a07      	ldr	r2, [pc, #28]	@ (80018a4 <HAL_RTC_MspInit+0x74>)
 8001886:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800188a:	6593      	str	r3, [r2, #88]	@ 0x58
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <HAL_RTC_MspInit+0x74>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001898:	bf00      	nop
 800189a:	3750      	adds	r7, #80	@ 0x50
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40002800 	.word	0x40002800
 80018a4:	40021000 	.word	0x40021000

080018a8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <MX_SPI1_Init+0x74>)
 80018ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001920 <MX_SPI1_Init+0x78>)
 80018b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018b2:	4b1a      	ldr	r3, [pc, #104]	@ (800191c <MX_SPI1_Init+0x74>)
 80018b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018ba:	4b18      	ldr	r3, [pc, #96]	@ (800191c <MX_SPI1_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018c0:	4b16      	ldr	r3, [pc, #88]	@ (800191c <MX_SPI1_Init+0x74>)
 80018c2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018c8:	4b14      	ldr	r3, [pc, #80]	@ (800191c <MX_SPI1_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ce:	4b13      	ldr	r3, [pc, #76]	@ (800191c <MX_SPI1_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <MX_SPI1_Init+0x74>)
 80018d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018da:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018dc:	4b0f      	ldr	r3, [pc, #60]	@ (800191c <MX_SPI1_Init+0x74>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <MX_SPI1_Init+0x74>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	@ (800191c <MX_SPI1_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	@ (800191c <MX_SPI1_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80018f4:	4b09      	ldr	r3, [pc, #36]	@ (800191c <MX_SPI1_Init+0x74>)
 80018f6:	2207      	movs	r2, #7
 80018f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <MX_SPI1_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <MX_SPI1_Init+0x74>)
 8001902:	2208      	movs	r2, #8
 8001904:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	@ (800191c <MX_SPI1_Init+0x74>)
 8001908:	f005 fc8f 	bl	800722a <HAL_SPI_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001912:	f7ff ff4e 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000030c 	.word	0x2000030c
 8001920:	40013000 	.word	0x40013000

08001924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	@ 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a25      	ldr	r2, [pc, #148]	@ (80019d8 <HAL_SPI_MspInit+0xb4>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d144      	bne.n	80019d0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800194a:	4a24      	ldr	r2, [pc, #144]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 800194c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001950:	6613      	str	r3, [r2, #96]	@ 0x60
 8001952:	4b22      	ldr	r3, [pc, #136]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001956:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	4b1f      	ldr	r3, [pc, #124]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001962:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001976:	4b19      	ldr	r3, [pc, #100]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197a:	4a18      	ldr	r2, [pc, #96]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001982:	4b16      	ldr	r3, [pc, #88]	@ (80019dc <HAL_SPI_MspInit+0xb8>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800198e:	23c0      	movs	r3, #192	@ 0xc0
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199e:	2305      	movs	r3, #5
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ac:	f001 fd48 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019b0:	2308      	movs	r3, #8
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019c0:	2305      	movs	r3, #5
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4805      	ldr	r0, [pc, #20]	@ (80019e0 <HAL_SPI_MspInit+0xbc>)
 80019cc:	f001 fd38 	bl	8003440 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	@ 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40013000 	.word	0x40013000
 80019dc:	40021000 	.word	0x40021000
 80019e0:	48000400 	.word	0x48000400

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001a28 <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001a28 <HAL_MspInit+0x44>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <HAL_MspInit+0x44>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a06:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_MspInit+0x44>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_MspInit+0x44>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f99f 	bl	8001dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <USB_LP_IRQHandler+0x10>)
 8001a92:	f002 fe32 	bl	80046fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200010dc 	.word	0x200010dc

08001aa0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ad0:	4907      	ldr	r1, [pc, #28]	@ (8001af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001ada:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40021000 	.word	0x40021000

08001af4 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001afc:	4b08      	ldr	r3, [pc, #32]	@ (8001b20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001afe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b00:	4907      	ldr	r1, [pc, #28]	@ (8001b20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001b0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40021000 	.word	0x40021000

08001b24 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	611a      	str	r2, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001b3a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b3e:	f7ff ffd9 	bl	8001af4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001b42:	2002      	movs	r0, #2
 8001b44:	f7ff ffbe 	bl	8001ac4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001b48:	2310      	movs	r3, #16
 8001b4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b50:	2300      	movs	r3, #0
 8001b52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4808      	ldr	r0, [pc, #32]	@ (8001b7c <MX_UCPD1_Init+0x58>)
 8001b5a:	f006 fe74 	bl	8008846 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001b5e:	2340      	movs	r3, #64	@ 0x40
 8001b60:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b62:	2303      	movs	r3, #3
 8001b64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4803      	ldr	r0, [pc, #12]	@ (8001b7c <MX_UCPD1_Init+0x58>)
 8001b70:	f006 fe69 	bl	8008846 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	48000400 	.word	0x48000400

08001b80 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b84:	4b22      	ldr	r3, [pc, #136]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001b86:	4a23      	ldr	r2, [pc, #140]	@ (8001c14 <MX_UART4_Init+0x94>)
 8001b88:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001b8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001b90:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b92:	4b1f      	ldr	r3, [pc, #124]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001baa:	4b19      	ldr	r3, [pc, #100]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bb6:	4b16      	ldr	r3, [pc, #88]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bbc:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc2:	4b13      	ldr	r3, [pc, #76]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bc8:	4811      	ldr	r0, [pc, #68]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bca:	f005 feb3 	bl	8007934 <HAL_UART_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001bd4:	f7ff fded 	bl	80017b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bd8:	2100      	movs	r1, #0
 8001bda:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bdc:	f006 fc1e 	bl	800841c <HAL_UARTEx_SetTxFifoThreshold>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001be6:	f7ff fde4 	bl	80017b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bea:	2100      	movs	r1, #0
 8001bec:	4808      	ldr	r0, [pc, #32]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bee:	f006 fc53 	bl	8008498 <HAL_UARTEx_SetRxFifoThreshold>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001bf8:	f7ff fddb 	bl	80017b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001bfc:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <MX_UART4_Init+0x90>)
 8001bfe:	f006 fbd4 	bl	80083aa <HAL_UARTEx_DisableFifoMode>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c08:	f7ff fdd3 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20000370 	.word	0x20000370
 8001c14:	40004c00 	.word	0x40004c00

08001c18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09a      	sub	sp, #104	@ 0x68
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	2244      	movs	r2, #68	@ 0x44
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00b fae5 	bl	800d208 <memset>
  if(uartHandle->Instance==UART4)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc0 <HAL_UART_MspInit+0xa8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d136      	bne.n	8001cb6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c48:	2308      	movs	r3, #8
 8001c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4618      	mov	r0, r3
 8001c56:	f004 ff67 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c60:	f7ff fda7 	bl	80017b2 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c64:	4b17      	ldr	r3, [pc, #92]	@ (8001cc4 <HAL_UART_MspInit+0xac>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c68:	4a16      	ldr	r2, [pc, #88]	@ (8001cc4 <HAL_UART_MspInit+0xac>)
 8001c6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <HAL_UART_MspInit+0xac>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <HAL_UART_MspInit+0xac>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c80:	4a10      	ldr	r2, [pc, #64]	@ (8001cc4 <HAL_UART_MspInit+0xac>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_UART_MspInit+0xac>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c94:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001c98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001ca6:	2305      	movs	r3, #5
 8001ca8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001caa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <HAL_UART_MspInit+0xb0>)
 8001cb2:	f001 fbc5 	bl	8003440 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	3768      	adds	r7, #104	@ 0x68
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40004c00 	.word	0x40004c00
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	48000800 	.word	0x48000800

08001ccc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ccc:	480d      	ldr	r0, [pc, #52]	@ (8001d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cce:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd0:	f7ff fee6 	bl	8001aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cd6:	490d      	ldr	r1, [pc, #52]	@ (8001d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <LoopForever+0xe>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001cdc:	e002      	b.n	8001ce4 <LoopCopyDataInit>

08001cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ce2:	3304      	adds	r3, #4

08001ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ce8:	d3f9      	bcc.n	8001cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cec:	4c0a      	ldr	r4, [pc, #40]	@ (8001d18 <LoopForever+0x16>)
  movs r3, #0
 8001cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf0:	e001      	b.n	8001cf6 <LoopFillZerobss>

08001cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cf4:	3204      	adds	r2, #4

08001cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cf8:	d3fb      	bcc.n	8001cf2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001cfa:	f00b fa8d 	bl	800d218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cfe:	f7ff fc31 	bl	8001564 <main>

08001d02 <LoopForever>:

LoopForever:
    b LoopForever
 8001d02:	e7fe      	b.n	8001d02 <LoopForever>
  ldr   r0, =_estack
 8001d04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d0c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001d10:	0800d310 	.word	0x0800d310
  ldr r2, =_sbss
 8001d14:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001d18:	200015d8 	.word	0x200015d8

08001d1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d1c:	e7fe      	b.n	8001d1c <ADC1_2_IRQHandler>

08001d1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d28:	2003      	movs	r0, #3
 8001d2a:	f001 f96f 	bl	800300c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2e:	200f      	movs	r0, #15
 8001d30:	f000 f80e 	bl	8001d50 <HAL_InitTick>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	71fb      	strb	r3, [r7, #7]
 8001d3e:	e001      	b.n	8001d44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d40:	f7ff fe50 	bl	80019e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d44:	79fb      	ldrb	r3, [r7, #7]

}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	@ (8001db8 <HAL_InitTick+0x68>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d022      	beq.n	8001daa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001d64:	4b15      	ldr	r3, [pc, #84]	@ (8001dbc <HAL_InitTick+0x6c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b13      	ldr	r3, [pc, #76]	@ (8001db8 <HAL_InitTick+0x68>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 f97a 	bl	8003072 <HAL_SYSTICK_Config>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10f      	bne.n	8001da4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	d809      	bhi.n	8001d9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d92:	f001 f946 	bl	8003022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d96:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc0 <HAL_InitTick+0x70>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e007      	b.n	8001dae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	73fb      	strb	r3, [r7, #15]
 8001da2:	e004      	b.n	8001dae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73fb      	strb	r3, [r7, #15]
 8001da8:	e001      	b.n	8001dae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000008 	.word	0x20000008
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	20000004 	.word	0x20000004

08001dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_IncTick+0x1c>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b05      	ldr	r3, [pc, #20]	@ (8001de4 <HAL_IncTick+0x20>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a03      	ldr	r2, [pc, #12]	@ (8001de0 <HAL_IncTick+0x1c>)
 8001dd4:	6013      	str	r3, [r2, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	20000404 	.word	0x20000404
 8001de4:	20000008 	.word	0x20000008

08001de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return uwTick;
 8001dec:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <HAL_GetTick+0x14>)
 8001dee:	681b      	ldr	r3, [r3, #0]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20000404 	.word	0x20000404

08001e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e08:	f7ff ffee 	bl	8001de8 <HAL_GetTick>
 8001e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d004      	beq.n	8001e24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_Delay+0x40>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4413      	add	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e24:	bf00      	nop
 8001e26:	f7ff ffdf 	bl	8001de8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d8f7      	bhi.n	8001e26 <HAL_Delay+0x26>
  {
  }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000008 	.word	0x20000008

08001e44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3360      	adds	r3, #96	@ 0x60
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	4b08      	ldr	r3, [pc, #32]	@ (8001ef0 <LL_ADC_SetOffset+0x44>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	03fff000 	.word	0x03fff000

08001ef4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3360      	adds	r3, #96	@ 0x60
 8001f02:	461a      	mov	r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3360      	adds	r3, #96	@ 0x60
 8001f30:	461a      	mov	r2, r3
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f4a:	bf00      	nop
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b087      	sub	sp, #28
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3360      	adds	r3, #96	@ 0x60
 8001f66:	461a      	mov	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3360      	adds	r3, #96	@ 0x60
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	695b      	ldr	r3, [r3, #20]
 8001fd0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	615a      	str	r2, [r3, #20]
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3330      	adds	r3, #48	@ 0x30
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	211f      	movs	r1, #31
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 011f 	and.w	r1, r3, #31
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3314      	adds	r3, #20
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0e5b      	lsrs	r3, r3, #25
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0d1b      	lsrs	r3, r3, #20
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2107      	movs	r1, #7
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	401a      	ands	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	0d1b      	lsrs	r3, r3, #20
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	431a      	orrs	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0318 	and.w	r3, r3, #24
 80020ba:	4908      	ldr	r1, [pc, #32]	@ (80020dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80020bc:	40d9      	lsrs	r1, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	400b      	ands	r3, r1
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	0007ffff 	.word	0x0007ffff

080020e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80020f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6093      	str	r3, [r2, #8]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002114:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002118:	d101      	bne.n	800211e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800213c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002140:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002164:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002168:	d101      	bne.n	800216e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <LL_ADC_IsEnabled+0x18>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <LL_ADC_IsEnabled+0x1a>
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d101      	bne.n	80021ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d101      	bne.n	80021e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b089      	sub	sp, #36	@ 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e167      	b.n	80024da <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d109      	bne.n	800222c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7fe fe49 	bl	8000eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff67 	bl	8002104 <LL_ADC_IsDeepPowerDownEnabled>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d004      	beq.n	8002246 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff4d 	bl	80020e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff ff82 	bl	8002154 <LL_ADC_IsInternalRegulatorEnabled>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff ff66 	bl	800212c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002260:	4ba0      	ldr	r3, [pc, #640]	@ (80024e4 <HAL_ADC_Init+0x2f4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	4aa0      	ldr	r2, [pc, #640]	@ (80024e8 <HAL_ADC_Init+0x2f8>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	099b      	lsrs	r3, r3, #6
 800226e:	3301      	adds	r3, #1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002274:	e002      	b.n	800227c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3b01      	subs	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f9      	bne.n	8002276 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff ff64 	bl	8002154 <LL_ADC_IsInternalRegulatorEnabled>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10d      	bne.n	80022ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	f043 0210 	orr.w	r2, r3, #16
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff75 	bl	80021a2 <LL_ADC_REG_IsConversionOngoing>
 80022b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 8100 	bne.w	80024c8 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f040 80fc 	bne.w	80024c8 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022d4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022d8:	f043 0202 	orr.w	r2, r3, #2
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff49 	bl	800217c <LL_ADC_IsEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d111      	bne.n	8002314 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022f0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80022f4:	f7ff ff42 	bl	800217c <LL_ADC_IsEnabled>
 80022f8:	4604      	mov	r4, r0
 80022fa:	487c      	ldr	r0, [pc, #496]	@ (80024ec <HAL_ADC_Init+0x2fc>)
 80022fc:	f7ff ff3e 	bl	800217c <LL_ADC_IsEnabled>
 8002300:	4603      	mov	r3, r0
 8002302:	4323      	orrs	r3, r4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4619      	mov	r1, r3
 800230e:	4878      	ldr	r0, [pc, #480]	@ (80024f0 <HAL_ADC_Init+0x300>)
 8002310:	f7ff fd98 	bl	8001e44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7f5b      	ldrb	r3, [r3, #29]
 8002318:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800231e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002324:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800232a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002332:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800233e:	2b01      	cmp	r3, #1
 8002340:	d106      	bne.n	8002350 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002346:	3b01      	subs	r3, #1
 8002348:	045b      	lsls	r3, r3, #17
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	4b60      	ldr	r3, [pc, #384]	@ (80024f4 <HAL_ADC_Init+0x304>)
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	430b      	orrs	r3, r1
 800237e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff14 	bl	80021c8 <LL_ADC_INJ_IsConversionOngoing>
 80023a0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d16d      	bne.n	8002484 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d16a      	bne.n	8002484 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023b2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023ca:	f023 0302 	bic.w	r3, r3, #2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d017      	beq.n	8002410 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80023ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80023f8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80023fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	6911      	ldr	r1, [r2, #16]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	430b      	orrs	r3, r1
 800240a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800240e:	e013      	b.n	8002438 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800241e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002430:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002434:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800243e:	2b01      	cmp	r3, #1
 8002440:	d118      	bne.n	8002474 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800245e:	4311      	orrs	r1, r2
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002464:	430a      	orrs	r2, r1
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	611a      	str	r2, [r3, #16]
 8002472:	e007      	b.n	8002484 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	695b      	ldr	r3, [r3, #20]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10c      	bne.n	80024a6 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	f023 010f 	bic.w	r1, r3, #15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	1e5a      	subs	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a4:	e007      	b.n	80024b6 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 020f 	bic.w	r2, r2, #15
 80024b4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ba:	f023 0303 	bic.w	r3, r3, #3
 80024be:	f043 0201 	orr.w	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024c6:	e007      	b.n	80024d8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024cc:	f043 0210 	orr.w	r2, r3, #16
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	@ 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd90      	pop	{r4, r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000000 	.word	0x20000000
 80024e8:	053e2d63 	.word	0x053e2d63
 80024ec:	50000100 	.word	0x50000100
 80024f0:	50000300 	.word	0x50000300
 80024f4:	fff04007 	.word	0xfff04007

080024f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b0b6      	sub	sp, #216	@ 0xd8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002508:	2300      	movs	r3, #0
 800250a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x22>
 8002516:	2302      	movs	r3, #2
 8002518:	e3c8      	b.n	8002cac <HAL_ADC_ConfigChannel+0x7b4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fe3b 	bl	80021a2 <LL_ADC_REG_IsConversionOngoing>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f040 83ad 	bne.w	8002c8e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	461a      	mov	r2, r3
 8002542:	f7ff fd51 	bl	8001fe8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fe29 	bl	80021a2 <LL_ADC_REG_IsConversionOngoing>
 8002550:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe35 	bl	80021c8 <LL_ADC_INJ_IsConversionOngoing>
 800255e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002562:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002566:	2b00      	cmp	r3, #0
 8002568:	f040 81d9 	bne.w	800291e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800256c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002570:	2b00      	cmp	r3, #0
 8002572:	f040 81d4 	bne.w	800291e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800257e:	d10f      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	4619      	mov	r1, r3
 800258c:	f7ff fd58 	bl	8002040 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fd12 	bl	8001fc2 <LL_ADC_SetSamplingTimeCommonConfig>
 800259e:	e00e      	b.n	80025be <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	6819      	ldr	r1, [r3, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	461a      	mov	r2, r3
 80025ae:	f7ff fd47 	bl	8002040 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fd02 	bl	8001fc2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	08db      	lsrs	r3, r3, #3
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fa02 f303 	lsl.w	r3, r2, r3
 80025d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d022      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6818      	ldr	r0, [r3, #0]
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6919      	ldr	r1, [r3, #16]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80025f0:	f7ff fc5c 	bl	8001eac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6919      	ldr	r1, [r3, #16]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	461a      	mov	r2, r3
 8002602:	f7ff fca8 	bl	8001f56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002612:	2b01      	cmp	r3, #1
 8002614:	d102      	bne.n	800261c <HAL_ADC_ConfigChannel+0x124>
 8002616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800261a:	e000      	b.n	800261e <HAL_ADC_ConfigChannel+0x126>
 800261c:	2300      	movs	r3, #0
 800261e:	461a      	mov	r2, r3
 8002620:	f7ff fcb4 	bl	8001f8c <LL_ADC_SetOffsetSaturation>
 8002624:	e17b      	b.n	800291e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff fc61 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 8002632:	4603      	mov	r3, r0
 8002634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x15a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fc56 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 8002648:	4603      	mov	r3, r0
 800264a:	0e9b      	lsrs	r3, r3, #26
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	e01e      	b.n	8002690 <HAL_ADC_ConfigChannel+0x198>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fc4b 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 800265e:	4603      	mov	r3, r0
 8002660:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002668:	fa93 f3a3 	rbit	r3, r3
 800266c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002670:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002678:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e004      	b.n	800268e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002684:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002698:	2b00      	cmp	r3, #0
 800269a:	d105      	bne.n	80026a8 <HAL_ADC_ConfigChannel+0x1b0>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	0e9b      	lsrs	r3, r3, #26
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	e018      	b.n	80026da <HAL_ADC_ConfigChannel+0x1e2>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80026bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80026c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80026cc:	2320      	movs	r3, #32
 80026ce:	e004      	b.n	80026da <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80026d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026da:	429a      	cmp	r2, r3
 80026dc:	d106      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fc1a 	bl	8001f20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fbfe 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10a      	bne.n	8002718 <HAL_ADC_ConfigChannel+0x220>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fbf3 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	f003 021f 	and.w	r2, r3, #31
 8002716:	e01e      	b.n	8002756 <HAL_ADC_ConfigChannel+0x25e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2101      	movs	r1, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fbe8 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 8002724:	4603      	mov	r3, r0
 8002726:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800272e:	fa93 f3a3 	rbit	r3, r3
 8002732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800273a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800273e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002746:	2320      	movs	r3, #32
 8002748:	e004      	b.n	8002754 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800274a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800274e:	fab3 f383 	clz	r3, r3
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <HAL_ADC_ConfigChannel+0x276>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	0e9b      	lsrs	r3, r3, #26
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	e018      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x2a8>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800277a:	fa93 f3a3 	rbit	r3, r3
 800277e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002782:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800278a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002792:	2320      	movs	r3, #32
 8002794:	e004      	b.n	80027a0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002796:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d106      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2101      	movs	r1, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fbb7 	bl	8001f20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2102      	movs	r1, #2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fb9b 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 80027be:	4603      	mov	r3, r0
 80027c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_ADC_ConfigChannel+0x2e6>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2102      	movs	r1, #2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fb90 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 80027d4:	4603      	mov	r3, r0
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	e01e      	b.n	800281c <HAL_ADC_ConfigChannel+0x324>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2102      	movs	r1, #2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fb85 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f4:	fa93 f3a3 	rbit	r3, r3
 80027f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80027fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002800:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002804:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e004      	b.n	800281a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002810:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002824:	2b00      	cmp	r3, #0
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x33c>
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	0e9b      	lsrs	r3, r3, #26
 800282e:	f003 031f 	and.w	r3, r3, #31
 8002832:	e016      	b.n	8002862 <HAL_ADC_ConfigChannel+0x36a>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002846:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002848:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800284c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e004      	b.n	8002862 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002862:	429a      	cmp	r2, r3
 8002864:	d106      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2200      	movs	r2, #0
 800286c:	2102      	movs	r1, #2
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fb56 	bl	8001f20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2103      	movs	r1, #3
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff fb3a 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 8002880:	4603      	mov	r3, r0
 8002882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_ADC_ConfigChannel+0x3a8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2103      	movs	r1, #3
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fb2f 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 8002896:	4603      	mov	r3, r0
 8002898:	0e9b      	lsrs	r3, r3, #26
 800289a:	f003 021f 	and.w	r2, r3, #31
 800289e:	e017      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x3d8>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2103      	movs	r1, #3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fb24 	bl	8001ef4 <LL_ADC_GetOffsetChannel>
 80028ac:	4603      	mov	r3, r0
 80028ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80028b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80028ba:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80028bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e003      	b.n	80028ce <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80028c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d105      	bne.n	80028e8 <HAL_ADC_ConfigChannel+0x3f0>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	e011      	b.n	800290c <HAL_ADC_ConfigChannel+0x414>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80028f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80028fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002900:	2320      	movs	r3, #32
 8002902:	e003      	b.n	800290c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002906:	fab3 f383 	clz	r3, r3
 800290a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800290c:	429a      	cmp	r2, r3
 800290e:	d106      	bne.n	800291e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2200      	movs	r2, #0
 8002916:	2103      	movs	r1, #3
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fb01 	bl	8001f20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fc2a 	bl	800217c <LL_ADC_IsEnabled>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 8140 	bne.w	8002bb0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	461a      	mov	r2, r3
 800293e:	f7ff fbab 	bl	8002098 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	4a8f      	ldr	r2, [pc, #572]	@ (8002b84 <HAL_ADC_ConfigChannel+0x68c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	f040 8131 	bne.w	8002bb0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <HAL_ADC_ConfigChannel+0x47e>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	0e9b      	lsrs	r3, r3, #26
 8002964:	3301      	adds	r3, #1
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2b09      	cmp	r3, #9
 800296c:	bf94      	ite	ls
 800296e:	2301      	movls	r3, #1
 8002970:	2300      	movhi	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	e019      	b.n	80029aa <HAL_ADC_ConfigChannel+0x4b2>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002984:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002986:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002988:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800298e:	2320      	movs	r3, #32
 8002990:	e003      	b.n	800299a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002992:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	3301      	adds	r3, #1
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2b09      	cmp	r3, #9
 80029a2:	bf94      	ite	ls
 80029a4:	2301      	movls	r3, #1
 80029a6:	2300      	movhi	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d079      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x4d2>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	3301      	adds	r3, #1
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029c8:	e015      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x4fe>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80029d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029da:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80029dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80029e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x51e>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	e017      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x54e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a26:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002a28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	ea42 0103 	orr.w	r1, r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x574>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 021f 	and.w	r2, r3, #31
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	051b      	lsls	r3, r3, #20
 8002a6a:	e018      	b.n	8002a9e <HAL_ADC_ConfigChannel+0x5a6>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	f003 021f 	and.w	r2, r3, #31
 8002a96:	4613      	mov	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4413      	add	r3, r2
 8002a9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	e081      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x5c6>
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	0e9b      	lsrs	r3, r3, #26
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	069b      	lsls	r3, r3, #26
 8002ab8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002abc:	e015      	b.n	8002aea <HAL_ADC_ConfigChannel+0x5f2>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	fa93 f3a3 	rbit	r3, r3
 8002aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e003      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	fab3 f383 	clz	r3, r3
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	069b      	lsls	r3, r3, #26
 8002ae6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x612>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0e9b      	lsrs	r3, r3, #26
 8002afc:	3301      	adds	r3, #1
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	e017      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x642>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	fa93 f3a3 	rbit	r3, r3
 8002b16:	61fb      	str	r3, [r7, #28]
  return result;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e003      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3a:	ea42 0103 	orr.w	r1, r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x66e>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	3301      	adds	r3, #1
 8002b52:	f003 021f 	and.w	r2, r3, #31
 8002b56:	4613      	mov	r3, r2
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b1e      	subs	r3, #30
 8002b5e:	051b      	lsls	r3, r3, #20
 8002b60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b64:	e01e      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x6ac>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	613b      	str	r3, [r7, #16]
  return result;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002b7e:	2320      	movs	r3, #32
 8002b80:	e006      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x698>
 8002b82:	bf00      	nop
 8002b84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	fab3 f383 	clz	r3, r3
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	3301      	adds	r3, #1
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	4613      	mov	r3, r2
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3b1e      	subs	r3, #30
 8002b9e:	051b      	lsls	r3, r3, #20
 8002ba0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ba4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002baa:	4619      	mov	r1, r3
 8002bac:	f7ff fa48 	bl	8002040 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d071      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bbc:	483e      	ldr	r0, [pc, #248]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bbe:	f7ff f967 	bl	8001e90 <LL_ADC_GetCommonPathInternalCh>
 8002bc2:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a3c      	ldr	r2, [pc, #240]	@ (8002cbc <HAL_ADC_ConfigChannel+0x7c4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_ADC_ConfigChannel+0x6e2>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8002cc0 <HAL_ADC_ConfigChannel+0x7c8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d127      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002bda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d121      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bee:	d157      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bf0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	482f      	ldr	r0, [pc, #188]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002bfc:	f7ff f935 	bl	8001e6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c00:	4b30      	ldr	r3, [pc, #192]	@ (8002cc4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	099b      	lsrs	r3, r3, #6
 8002c06:	4a30      	ldr	r2, [pc, #192]	@ (8002cc8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	1c5a      	adds	r2, r3, #1
 8002c10:	4613      	mov	r3, r2
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	4413      	add	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c1a:	e002      	b.n	8002c22 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1f9      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c28:	e03a      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a27      	ldr	r2, [pc, #156]	@ (8002ccc <HAL_ADC_ConfigChannel+0x7d4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d113      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002c34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10d      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a22      	ldr	r2, [pc, #136]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d02a      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c52:	4619      	mov	r1, r3
 8002c54:	4818      	ldr	r0, [pc, #96]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c56:	f7ff f908 	bl	8001e6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c5a:	e021      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d11c      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d116      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d011      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002c80:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c84:	4619      	mov	r1, r3
 8002c86:	480c      	ldr	r0, [pc, #48]	@ (8002cb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002c88:	f7ff f8ef 	bl	8001e6a <LL_ADC_SetCommonPathInternalCh>
 8002c8c:	e008      	b.n	8002ca0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	f043 0220 	orr.w	r2, r3, #32
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ca8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	37d8      	adds	r7, #216	@ 0xd8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	80080000 	.word	0x80080000
 8002cb8:	50000300 	.word	0x50000300
 8002cbc:	c3210000 	.word	0xc3210000
 8002cc0:	90c00010 	.word	0x90c00010
 8002cc4:	20000000 	.word	0x20000000
 8002cc8:	053e2d63 	.word	0x053e2d63
 8002ccc:	c7520000 	.word	0xc7520000
 8002cd0:	50000100 	.word	0x50000100
 8002cd4:	cb840000 	.word	0xcb840000

08002cd8 <LL_ADC_IsEnabled>:
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <LL_ADC_IsEnabled+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_ADC_IsEnabled+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_REG_IsConversionOngoing>:
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0304 	and.w	r3, r3, #4
 8002d0e:	2b04      	cmp	r3, #4
 8002d10:	d101      	bne.n	8002d16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	b0a1      	sub	sp, #132	@ 0x84
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e08b      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d5a:	d102      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d5c:	4b41      	ldr	r3, [pc, #260]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	e001      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e06a      	b.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ffb9 	bl	8002cfe <LL_ADC_REG_IsConversionOngoing>
 8002d8c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ffb3 	bl	8002cfe <LL_ADC_REG_IsConversionOngoing>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d14c      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002d9e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d149      	bne.n	8002e38 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002da4:	4b30      	ldr	r3, [pc, #192]	@ (8002e68 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002da6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d028      	beq.n	8002e02 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002db0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dc2:	035b      	lsls	r3, r3, #13
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002dcc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002dd0:	f7ff ff82 	bl	8002cd8 <LL_ADC_IsEnabled>
 8002dd4:	4604      	mov	r4, r0
 8002dd6:	4823      	ldr	r0, [pc, #140]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002dd8:	f7ff ff7e 	bl	8002cd8 <LL_ADC_IsEnabled>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4323      	orrs	r3, r4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d133      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002de4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002dec:	f023 030f 	bic.w	r3, r3, #15
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	6811      	ldr	r1, [r2, #0]
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	6892      	ldr	r2, [r2, #8]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002dfe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e00:	e024      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e0c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e0e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002e12:	f7ff ff61 	bl	8002cd8 <LL_ADC_IsEnabled>
 8002e16:	4604      	mov	r4, r0
 8002e18:	4812      	ldr	r0, [pc, #72]	@ (8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e1a:	f7ff ff5d 	bl	8002cd8 <LL_ADC_IsEnabled>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4323      	orrs	r3, r4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d112      	bne.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002e26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002e2e:	f023 030f 	bic.w	r3, r3, #15
 8002e32:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002e34:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e36:	e009      	b.n	8002e4c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3c:	f043 0220 	orr.w	r2, r3, #32
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002e4a:	e000      	b.n	8002e4e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e56:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3784      	adds	r7, #132	@ 0x84
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd90      	pop	{r4, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	50000100 	.word	0x50000100
 8002e68:	50000300 	.word	0x50000300

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	@ (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	@ (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	@ (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	@ (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	@ 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	@ 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fd8:	d301      	bcc.n	8002fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e00f      	b.n	8002ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fde:	4a0a      	ldr	r2, [pc, #40]	@ (8003008 <SysTick_Config+0x40>)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fe6:	210f      	movs	r1, #15
 8002fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fec:	f7ff ff8e 	bl	8002f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <SysTick_Config+0x40>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <SysTick_Config+0x40>)
 8002ff8:	2207      	movs	r2, #7
 8002ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff ff29 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b086      	sub	sp, #24
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003030:	f7ff ff40 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8003034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	6978      	ldr	r0, [r7, #20]
 800303c:	f7ff ff90 	bl	8002f60 <NVIC_EncodePriority>
 8003040:	4602      	mov	r2, r0
 8003042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff5f 	bl	8002f0c <__NVIC_SetPriority>
}
 800304e:	bf00      	nop
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff33 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b082      	sub	sp, #8
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff ffa4 	bl	8002fc8 <SysTick_Config>
 8003080:	4603      	mov	r3, r0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e014      	b.n	80030c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	791b      	ldrb	r3, [r3, #4]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d105      	bne.n	80030b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fe f81b 	bl	80010e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	@ 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030dc:	2300      	movs	r3, #0
 80030de:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_DAC_ConfigChannel+0x1c>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e19e      	b.n	800342e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	795b      	ldrb	r3, [r3, #5]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_DAC_ConfigChannel+0x2c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e198      	b.n	800342e <HAL_DAC_ConfigChannel+0x35e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2201      	movs	r2, #1
 8003100:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2202      	movs	r2, #2
 8003106:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b04      	cmp	r3, #4
 800310e:	d17a      	bne.n	8003206 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003110:	f7fe fe6a 	bl	8001de8 <HAL_GetTick>
 8003114:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d13d      	bne.n	8003198 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800311c:	e018      	b.n	8003150 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800311e:	f7fe fe63 	bl	8001de8 <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d911      	bls.n	8003150 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003132:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2203      	movs	r2, #3
 800314a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e16e      	b.n	800342e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1df      	bne.n	800311e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40
 8003168:	e020      	b.n	80031ac <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800316a:	f7fe fe3d 	bl	8001de8 <HAL_GetTick>
 800316e:	4602      	mov	r2, r0
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	2b01      	cmp	r3, #1
 8003176:	d90f      	bls.n	8003198 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317e:	2b00      	cmp	r3, #0
 8003180:	da0a      	bge.n	8003198 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	f043 0208 	orr.w	r2, r3, #8
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2203      	movs	r2, #3
 8003192:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e14a      	b.n	800342e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dbe3      	blt.n	800316a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031aa:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80031bc:	fa01 f303 	lsl.w	r3, r1, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	ea02 0103 	and.w	r1, r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	409a      	lsls	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	21ff      	movs	r1, #255	@ 0xff
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	ea02 0103 	and.w	r1, r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d11d      	bne.n	800324a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003214:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f003 0310 	and.w	r3, r3, #16
 800321c:	221f      	movs	r2, #31
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003226:	4013      	ands	r3, r2
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	4313      	orrs	r3, r2
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2207      	movs	r2, #7
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003262:	4013      	ands	r3, r2
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d102      	bne.n	8003274 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	e00f      	b.n	8003294 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d102      	bne.n	8003282 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800327c:	2301      	movs	r3, #1
 800327e:	623b      	str	r3, [r7, #32]
 8003280:	e008      	b.n	8003294 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800328a:	2301      	movs	r3, #1
 800328c:	623b      	str	r3, [r7, #32]
 800328e:	e001      	b.n	8003294 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003290:	2300      	movs	r3, #0
 8003292:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	689a      	ldr	r2, [r3, #8]
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	4313      	orrs	r3, r2
 800329e:	6a3a      	ldr	r2, [r7, #32]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b6:	4013      	ands	r3, r2
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d102      	bne.n	80032c8 <HAL_DAC_ConfigChannel+0x1f8>
 80032c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80032c6:	e000      	b.n	80032ca <HAL_DAC_ConfigChannel+0x1fa>
 80032c8:	2300      	movs	r3, #0
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f003 0310 	and.w	r3, r3, #16
 80032d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e2:	4013      	ands	r3, r2
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	795b      	ldrb	r3, [r3, #5]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_DAC_ConfigChannel+0x224>
 80032ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032f2:	e000      	b.n	80032f6 <HAL_DAC_ConfigChannel+0x226>
 80032f4:	2300      	movs	r3, #0
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fe:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d114      	bne.n	8003336 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800330c:	f003 fb8e 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8003310:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4a48      	ldr	r2, [pc, #288]	@ (8003438 <HAL_DAC_ConfigChannel+0x368>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d904      	bls.n	8003324 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
 8003322:	e00f      	b.n	8003344 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4a45      	ldr	r2, [pc, #276]	@ (800343c <HAL_DAC_ConfigChannel+0x36c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d90a      	bls.n	8003342 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800332c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
 8003334:	e006      	b.n	8003344 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333c:	4313      	orrs	r3, r2
 800333e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003340:	e000      	b.n	8003344 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003342:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0310 	and.w	r3, r3, #16
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003352:	4313      	orrs	r3, r2
 8003354:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800335c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800336e:	fa02 f303 	lsl.w	r3, r2, r3
 8003372:	43da      	mvns	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	400a      	ands	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003396:	4013      	ands	r3, r2
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ae:	4313      	orrs	r3, r2
 80033b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	22c0      	movs	r2, #192	@ 0xc0
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43da      	mvns	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	400a      	ands	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	089b      	lsrs	r3, r3, #2
 80033dc:	f003 030f 	and.w	r3, r3, #15
 80033e0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	021b      	lsls	r3, r3, #8
 80033ea:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003404:	fa01 f303 	lsl.w	r3, r1, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	ea02 0103 	and.w	r1, r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f003 0310 	and.w	r3, r3, #16
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	409a      	lsls	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800342c:	7ffb      	ldrb	r3, [r7, #31]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3728      	adds	r7, #40	@ 0x28
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	09896800 	.word	0x09896800
 800343c:	04c4b400 	.word	0x04c4b400

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800344e:	e15a      	b.n	8003706 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2101      	movs	r1, #1
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	fa01 f303 	lsl.w	r3, r1, r3
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 814c 	beq.w	8003700 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d005      	beq.n	8003480 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800347c:	2b02      	cmp	r3, #2
 800347e:	d130      	bne.n	80034e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034b6:	2201      	movs	r2, #1
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 0201 	and.w	r2, r3, #1
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	2b03      	cmp	r3, #3
 80034ec:	d017      	beq.n	800351e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	005b      	lsls	r3, r3, #1
 80034f8:	2203      	movs	r2, #3
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	43db      	mvns	r3, r3
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4013      	ands	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d123      	bne.n	8003572 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	08da      	lsrs	r2, r3, #3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3208      	adds	r2, #8
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003536:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	220f      	movs	r2, #15
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43db      	mvns	r3, r3
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	4013      	ands	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 0307 	and.w	r3, r3, #7
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	08da      	lsrs	r2, r3, #3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3208      	adds	r2, #8
 800356c:	6939      	ldr	r1, [r7, #16]
 800356e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	2203      	movs	r2, #3
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f003 0203 	and.w	r2, r3, #3
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80a6 	beq.w	8003700 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b4:	4b5b      	ldr	r3, [pc, #364]	@ (8003724 <HAL_GPIO_Init+0x2e4>)
 80035b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003724 <HAL_GPIO_Init+0x2e4>)
 80035ba:	f043 0301 	orr.w	r3, r3, #1
 80035be:	6613      	str	r3, [r2, #96]	@ 0x60
 80035c0:	4b58      	ldr	r3, [pc, #352]	@ (8003724 <HAL_GPIO_Init+0x2e4>)
 80035c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035cc:	4a56      	ldr	r2, [pc, #344]	@ (8003728 <HAL_GPIO_Init+0x2e8>)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	089b      	lsrs	r3, r3, #2
 80035d2:	3302      	adds	r3, #2
 80035d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80035f6:	d01f      	beq.n	8003638 <HAL_GPIO_Init+0x1f8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a4c      	ldr	r2, [pc, #304]	@ (800372c <HAL_GPIO_Init+0x2ec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d019      	beq.n	8003634 <HAL_GPIO_Init+0x1f4>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a4b      	ldr	r2, [pc, #300]	@ (8003730 <HAL_GPIO_Init+0x2f0>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_GPIO_Init+0x1f0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a4a      	ldr	r2, [pc, #296]	@ (8003734 <HAL_GPIO_Init+0x2f4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00d      	beq.n	800362c <HAL_GPIO_Init+0x1ec>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a49      	ldr	r2, [pc, #292]	@ (8003738 <HAL_GPIO_Init+0x2f8>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d007      	beq.n	8003628 <HAL_GPIO_Init+0x1e8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a48      	ldr	r2, [pc, #288]	@ (800373c <HAL_GPIO_Init+0x2fc>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_GPIO_Init+0x1e4>
 8003620:	2305      	movs	r3, #5
 8003622:	e00a      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003624:	2306      	movs	r3, #6
 8003626:	e008      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003628:	2304      	movs	r3, #4
 800362a:	e006      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 800362c:	2303      	movs	r3, #3
 800362e:	e004      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003630:	2302      	movs	r3, #2
 8003632:	e002      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003634:	2301      	movs	r3, #1
 8003636:	e000      	b.n	800363a <HAL_GPIO_Init+0x1fa>
 8003638:	2300      	movs	r3, #0
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	f002 0203 	and.w	r2, r2, #3
 8003640:	0092      	lsls	r2, r2, #2
 8003642:	4093      	lsls	r3, r2
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800364a:	4937      	ldr	r1, [pc, #220]	@ (8003728 <HAL_GPIO_Init+0x2e8>)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	3302      	adds	r3, #2
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003658:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <HAL_GPIO_Init+0x300>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800367c:	4a30      	ldr	r2, [pc, #192]	@ (8003740 <HAL_GPIO_Init+0x300>)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003682:	4b2f      	ldr	r3, [pc, #188]	@ (8003740 <HAL_GPIO_Init+0x300>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	43db      	mvns	r3, r3
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	4013      	ands	r3, r2
 8003690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036a6:	4a26      	ldr	r2, [pc, #152]	@ (8003740 <HAL_GPIO_Init+0x300>)
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036ac:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <HAL_GPIO_Init+0x300>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4013      	ands	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003740 <HAL_GPIO_Init+0x300>)
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_GPIO_Init+0x300>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	43db      	mvns	r3, r3
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4013      	ands	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036fa:	4a11      	ldr	r2, [pc, #68]	@ (8003740 <HAL_GPIO_Init+0x300>)
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	3301      	adds	r3, #1
 8003704:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	f47f ae9d 	bne.w	8003450 <HAL_GPIO_Init+0x10>
  }
}
 8003716:	bf00      	nop
 8003718:	bf00      	nop
 800371a:	371c      	adds	r7, #28
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000
 8003728:	40010000 	.word	0x40010000
 800372c:	48000400 	.word	0x48000400
 8003730:	48000800 	.word	0x48000800
 8003734:	48000c00 	.word	0x48000c00
 8003738:	48001000 	.word	0x48001000
 800373c:	48001400 	.word	0x48001400
 8003740:	40010400 	.word	0x40010400

08003744 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
 8003750:	4613      	mov	r3, r2
 8003752:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003754:	787b      	ldrb	r3, [r7, #1]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800375a:	887a      	ldrh	r2, [r7, #2]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003760:	e002      	b.n	8003768 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003762:	887a      	ldrh	r2, [r7, #2]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e08d      	b.n	80038a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fdee 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	@ 0x24
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d107      	bne.n	80037ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	e006      	b.n	80037fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d108      	bne.n	8003816 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e007      	b.n	8003826 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003824:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003834:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003838:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68da      	ldr	r2, [r3, #12]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003848:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	69d9      	ldr	r1, [r3, #28]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1a      	ldr	r2, [r3, #32]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	461a      	mov	r2, r3
 80038b8:	460b      	mov	r3, r1
 80038ba:	817b      	strh	r3, [r7, #10]
 80038bc:	4613      	mov	r3, r2
 80038be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	f040 80fd 	bne.w	8003ac8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_I2C_Master_Transmit+0x30>
 80038d8:	2302      	movs	r3, #2
 80038da:	e0f6      	b.n	8003aca <HAL_I2C_Master_Transmit+0x21e>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038e4:	f7fe fa80 	bl	8001de8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	2319      	movs	r3, #25
 80038f0:	2201      	movs	r2, #1
 80038f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 faf6 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0e1      	b.n	8003aca <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2221      	movs	r2, #33	@ 0x21
 800390a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2210      	movs	r2, #16
 8003912:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2bff      	cmp	r3, #255	@ 0xff
 8003936:	d906      	bls.n	8003946 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	22ff      	movs	r2, #255	@ 0xff
 800393c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800393e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e007      	b.n	8003956 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003950:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003954:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800395a:	2b00      	cmp	r3, #0
 800395c:	d024      	beq.n	80039a8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003978:	b29b      	uxth	r3, r3
 800397a:	3b01      	subs	r3, #1
 800397c:	b29a      	uxth	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003992:	b2db      	uxtb	r3, r3
 8003994:	3301      	adds	r3, #1
 8003996:	b2da      	uxtb	r2, r3
 8003998:	8979      	ldrh	r1, [r7, #10]
 800399a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ad4 <HAL_I2C_Master_Transmit+0x228>)
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fcf1 	bl	8004388 <I2C_TransferConfig>
 80039a6:	e066      	b.n	8003a76 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	8979      	ldrh	r1, [r7, #10]
 80039b0:	4b48      	ldr	r3, [pc, #288]	@ (8003ad4 <HAL_I2C_Master_Transmit+0x228>)
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	68f8      	ldr	r0, [r7, #12]
 80039b8:	f000 fce6 	bl	8004388 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80039bc:	e05b      	b.n	8003a76 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	6a39      	ldr	r1, [r7, #32]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fae9 	bl	8003f9a <I2C_WaitOnTXISFlagUntilTimeout>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e07b      	b.n	8003aca <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	781a      	ldrb	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d034      	beq.n	8003a76 <HAL_I2C_Master_Transmit+0x1ca>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d130      	bne.n	8003a76 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2180      	movs	r1, #128	@ 0x80
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 fa62 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e04d      	b.n	8003aca <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	2bff      	cmp	r3, #255	@ 0xff
 8003a36:	d90e      	bls.n	8003a56 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	22ff      	movs	r2, #255	@ 0xff
 8003a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	8979      	ldrh	r1, [r7, #10]
 8003a46:	2300      	movs	r3, #0
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fc9a 	bl	8004388 <I2C_TransferConfig>
 8003a54:	e00f      	b.n	8003a76 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	8979      	ldrh	r1, [r7, #10]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fc89 	bl	8004388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d19e      	bne.n	80039be <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	6a39      	ldr	r1, [r7, #32]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 facf 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e01a      	b.n	8003aca <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2220      	movs	r2, #32
 8003a9a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <HAL_I2C_Master_Transmit+0x22c>)
 8003aa8:	400b      	ands	r3, r1
 8003aaa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	e000      	b.n	8003aca <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003ac8:	2302      	movs	r3, #2
  }
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	80002000 	.word	0x80002000
 8003ad8:	fe00e800 	.word	0xfe00e800

08003adc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	460b      	mov	r3, r1
 8003aea:	817b      	strh	r3, [r7, #10]
 8003aec:	4613      	mov	r3, r2
 8003aee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	f040 80db 	bne.w	8003cb4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_I2C_Master_Receive+0x30>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0d4      	b.n	8003cb6 <HAL_I2C_Master_Receive+0x1da>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b14:	f7fe f968 	bl	8001de8 <HAL_GetTick>
 8003b18:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	2319      	movs	r3, #25
 8003b20:	2201      	movs	r2, #1
 8003b22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f9de 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0bf      	b.n	8003cb6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2222      	movs	r2, #34	@ 0x22
 8003b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2210      	movs	r2, #16
 8003b42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	893a      	ldrh	r2, [r7, #8]
 8003b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	2bff      	cmp	r3, #255	@ 0xff
 8003b66:	d90e      	bls.n	8003b86 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	22ff      	movs	r2, #255	@ 0xff
 8003b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b72:	b2da      	uxtb	r2, r3
 8003b74:	8979      	ldrh	r1, [r7, #10]
 8003b76:	4b52      	ldr	r3, [pc, #328]	@ (8003cc0 <HAL_I2C_Master_Receive+0x1e4>)
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fc02 	bl	8004388 <I2C_TransferConfig>
 8003b84:	e06d      	b.n	8003c62 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	4b49      	ldr	r3, [pc, #292]	@ (8003cc0 <HAL_I2C_Master_Receive+0x1e4>)
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fbf1 	bl	8004388 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ba6:	e05c      	b.n	8003c62 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	6a39      	ldr	r1, [r7, #32]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa7f 	bl	80040b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e07c      	b.n	8003cb6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d034      	beq.n	8003c62 <HAL_I2C_Master_Receive+0x186>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d130      	bne.n	8003c62 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2200      	movs	r2, #0
 8003c08:	2180      	movs	r1, #128	@ 0x80
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 f96c 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e04d      	b.n	8003cb6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2bff      	cmp	r3, #255	@ 0xff
 8003c22:	d90e      	bls.n	8003c42 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	22ff      	movs	r2, #255	@ 0xff
 8003c28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	8979      	ldrh	r1, [r7, #10]
 8003c32:	2300      	movs	r3, #0
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 fba4 	bl	8004388 <I2C_TransferConfig>
 8003c40:	e00f      	b.n	8003c62 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	8979      	ldrh	r1, [r7, #10]
 8003c54:	2300      	movs	r3, #0
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fb93 	bl	8004388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d19d      	bne.n	8003ba8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	6a39      	ldr	r1, [r7, #32]
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f9d9 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e01a      	b.n	8003cb6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2220      	movs	r2, #32
 8003c86:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc4 <HAL_I2C_Master_Receive+0x1e8>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	80002400 	.word	0x80002400
 8003cc4:	fe00e800 	.word	0xfe00e800

08003cc8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08a      	sub	sp, #40	@ 0x28
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	607a      	str	r2, [r7, #4]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	f040 80d6 	bne.w	8003e96 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	699b      	ldr	r3, [r3, #24]
 8003cf0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003cf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cf8:	d101      	bne.n	8003cfe <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	e0cc      	b.n	8003e98 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_I2C_IsDeviceReady+0x44>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e0c5      	b.n	8003e98 <HAL_I2C_IsDeviceReady+0x1d0>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2224      	movs	r2, #36	@ 0x24
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d107      	bne.n	8003d3a <HAL_I2C_IsDeviceReady+0x72>
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d34:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d38:	e006      	b.n	8003d48 <HAL_I2C_IsDeviceReady+0x80>
 8003d3a:	897b      	ldrh	r3, [r7, #10]
 8003d3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d44:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe f84b 	bl	8001de8 <HAL_GetTick>
 8003d52:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d80:	e034      	b.n	8003dec <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d01a      	beq.n	8003dc0 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fe f82d 	bl	8001de8 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <HAL_I2C_IsDeviceReady+0xd8>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10f      	bne.n	8003dc0 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e06b      	b.n	8003e98 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	bf0c      	ite	eq
 8003dce:	2301      	moveq	r3, #1
 8003dd0:	2300      	movne	r3, #0
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f003 0310 	and.w	r3, r3, #16
 8003de0:	2b10      	cmp	r3, #16
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003dec:	7ffb      	ldrb	r3, [r7, #31]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d102      	bne.n	8003df8 <HAL_I2C_IsDeviceReady+0x130>
 8003df2:	7fbb      	ldrb	r3, [r7, #30]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0c4      	beq.n	8003d82 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b10      	cmp	r3, #16
 8003e04:	d01a      	beq.n	8003e3c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2120      	movs	r1, #32
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f869 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e03b      	b.n	8003e98 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2220      	movs	r2, #32
 8003e26:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e02d      	b.n	8003e98 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	2120      	movs	r1, #32
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 f84e 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e020      	b.n	8003e98 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2210      	movs	r2, #16
 8003e5c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2220      	movs	r2, #32
 8003e64:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	f63f af56 	bhi.w	8003d22 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	f043 0220 	orr.w	r2, r3, #32
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
  }
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3720      	adds	r7, #32
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d103      	bne.n	8003ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d007      	beq.n	8003edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	619a      	str	r2, [r3, #24]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef8:	e03b      	b.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f962 	bl	80041c8 <I2C_IsErrorOccurred>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e041      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d02d      	beq.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fd ff67 	bl	8001de8 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d122      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d113      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e00f      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d0b4      	beq.n	8003efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fa6:	e033      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f90b 	bl	80041c8 <I2C_IsErrorOccurred>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e031      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d025      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fd ff10 	bl	8001de8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11a      	bne.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d013      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e007      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d1c4      	bne.n	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	e02f      	b.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8c4 	bl	80041c8 <I2C_IsErrorOccurred>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e02d      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fd fecd 	bl	8001de8 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11a      	bne.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b20      	cmp	r3, #32
 800406c:	d013      	beq.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e007      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d1c8      	bne.n	8004036 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80040c0:	e071      	b.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f87e 	bl	80041c8 <I2C_IsErrorOccurred>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d13b      	bne.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d138      	bne.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d105      	bne.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	d121      	bne.n	8004156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2210      	movs	r2, #16
 8004118:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2204      	movs	r2, #4
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2220      	movs	r2, #32
 8004126:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004134:	400b      	ands	r3, r1
 8004136:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
 8004154:	e002      	b.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800415c:	f7fd fe44 	bl	8001de8 <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d119      	bne.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d116      	bne.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00f      	beq.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d002      	beq.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d083      	beq.n	80040c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	fe00e800 	.word	0xfe00e800

080041c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	@ 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d068      	beq.n	80042c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041fc:	e049      	b.n	8004292 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d045      	beq.n	8004292 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fd fdef 	bl	8001de8 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <I2C_IsErrorOccurred+0x54>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d13a      	bne.n	8004292 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004226:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800422e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800423a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800423e:	d121      	bne.n	8004284 <I2C_IsErrorOccurred+0xbc>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004246:	d01d      	beq.n	8004284 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b20      	cmp	r3, #32
 800424c:	d01a      	beq.n	8004284 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800425c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800425e:	f7fd fdc3 	bl	8001de8 <HAL_GetTick>
 8004262:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004264:	e00e      	b.n	8004284 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004266:	f7fd fdbf 	bl	8001de8 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b19      	cmp	r3, #25
 8004272:	d907      	bls.n	8004284 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f043 0320 	orr.w	r3, r3, #32
 800427a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004282:	e006      	b.n	8004292 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d1e9      	bne.n	8004266 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b20      	cmp	r3, #32
 800429e:	d003      	beq.n	80042a8 <I2C_IsErrorOccurred+0xe0>
 80042a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0aa      	beq.n	80041fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2220      	movs	r2, #32
 80042b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f043 0304 	orr.w	r3, r3, #4
 80042be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800430a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f043 0302 	orr.w	r3, r3, #2
 8004322:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800432c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01c      	beq.n	8004376 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff fdaf 	bl	8003ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <I2C_IsErrorOccurred+0x1bc>)
 800434e:	400b      	ands	r3, r1
 8004350:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800437a:	4618      	mov	r0, r3
 800437c:	3728      	adds	r7, #40	@ 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	fe00e800 	.word	0xfe00e800

08004388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	817b      	strh	r3, [r7, #10]
 8004396:	4613      	mov	r3, r2
 8004398:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043a0:	7a7b      	ldrb	r3, [r7, #9]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	0d5b      	lsrs	r3, r3, #21
 80043c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043c6:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <I2C_TransferConfig+0x60>)
 80043c8:	430b      	orrs	r3, r1
 80043ca:	43db      	mvns	r3, r3
 80043cc:	ea02 0103 	and.w	r1, r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	03ff63ff 	.word	0x03ff63ff

080043ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d138      	bne.n	8004474 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800440c:	2302      	movs	r3, #2
 800440e:	e032      	b.n	8004476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	@ 0x24
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800443e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b20      	cmp	r3, #32
 8004496:	d139      	bne.n	800450c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e033      	b.n	800450e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2224      	movs	r2, #36	@ 0x24
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800451a:	b580      	push	{r7, lr}
 800451c:	b084      	sub	sp, #16
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0c0      	b.n	80046ae <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d106      	bne.n	8004546 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f008 fb5d 	bl	800cc00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f004 f9fc 	bl	8008950 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004558:	2300      	movs	r3, #0
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e03e      	b.n	80045dc <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800455e:	7bfa      	ldrb	r2, [r7, #15]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4613      	mov	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	4413      	add	r3, r2
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	440b      	add	r3, r1
 800456c:	3311      	adds	r3, #17
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004572:	7bfa      	ldrb	r2, [r7, #15]
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	00db      	lsls	r3, r3, #3
 800457e:	440b      	add	r3, r1
 8004580:	3310      	adds	r3, #16
 8004582:	7bfa      	ldrb	r2, [r7, #15]
 8004584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004586:	7bfa      	ldrb	r2, [r7, #15]
 8004588:	6879      	ldr	r1, [r7, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	440b      	add	r3, r1
 8004594:	3313      	adds	r3, #19
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800459a:	7bfa      	ldrb	r2, [r7, #15]
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	440b      	add	r3, r1
 80045a8:	3320      	adds	r3, #32
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045ae:	7bfa      	ldrb	r2, [r7, #15]
 80045b0:	6879      	ldr	r1, [r7, #4]
 80045b2:	4613      	mov	r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	440b      	add	r3, r1
 80045bc:	3324      	adds	r3, #36	@ 0x24
 80045be:	2200      	movs	r2, #0
 80045c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80045c2:	7bfb      	ldrb	r3, [r7, #15]
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	440b      	add	r3, r1
 80045d2:	2200      	movs	r2, #0
 80045d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
 80045d8:	3301      	adds	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	791b      	ldrb	r3, [r3, #4]
 80045e0:	7bfa      	ldrb	r2, [r7, #15]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d3bb      	bcc.n	800455e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
 80045ea:	e044      	b.n	8004676 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80045ec:	7bfa      	ldrb	r2, [r7, #15]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	440b      	add	r3, r1
 80045fa:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004602:	7bfa      	ldrb	r2, [r7, #15]
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	440b      	add	r3, r1
 8004610:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004618:	7bfa      	ldrb	r2, [r7, #15]
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	440b      	add	r3, r1
 8004626:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800462a:	2200      	movs	r2, #0
 800462c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800462e:	7bfa      	ldrb	r2, [r7, #15]
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	440b      	add	r3, r1
 800463c:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004640:	2200      	movs	r2, #0
 8004642:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	440b      	add	r3, r1
 8004652:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004656:	2200      	movs	r2, #0
 8004658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800465a:	7bfa      	ldrb	r2, [r7, #15]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	440b      	add	r3, r1
 8004668:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800466c:	2200      	movs	r2, #0
 800466e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	3301      	adds	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	791b      	ldrb	r3, [r3, #4]
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	429a      	cmp	r2, r3
 800467e:	d3b5      	bcc.n	80045ec <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	e893 0006 	ldmia.w	r3, {r1, r2}
 800468c:	f004 f97b 	bl	8008986 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7a9b      	ldrb	r3, [r3, #10]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d102      	bne.n	80046ac <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f001 fc42 	bl	8005f30 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_PCD_Start+0x16>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e012      	b.n	80046f2 <HAL_PCD_Start+0x3c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f004 f922 	bl	8008922 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f006 fbe4 	bl	800aeb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f006 fbe9 	bl	800aede <USB_ReadInterrupts>
 800470c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fb06 	bl	8004d2a <PCD_EP_ISR_Handler>

    return;
 800471e:	e110      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004726:	2b00      	cmp	r3, #0
 8004728:	d013      	beq.n	8004752 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004732:	b29a      	uxth	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800473c:	b292      	uxth	r2, r2
 800473e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f008 faed 	bl	800cd22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004748:	2100      	movs	r1, #0
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f8fc 	bl	8004948 <HAL_PCD_SetAddress>

    return;
 8004750:	e0f7      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800476e:	b292      	uxth	r2, r2
 8004770:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004774:	e0e5      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004788:	b29a      	uxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004792:	b292      	uxth	r2, r2
 8004794:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004798:	e0d3      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d034      	beq.n	800480e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0204 	bic.w	r2, r2, #4
 80047b6:	b292      	uxth	r2, r2
 80047b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0208 	bic.w	r2, r2, #8
 80047ce:	b292      	uxth	r2, r2
 80047d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d107      	bne.n	80047ee <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80047e6:	2100      	movs	r1, #0
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f008 fc8d 	bl	800d108 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f008 fad0 	bl	800cd94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004806:	b292      	uxth	r2, r2
 8004808:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800480c:	e099      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004814:	2b00      	cmp	r3, #0
 8004816:	d027      	beq.n	8004868 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004820:	b29a      	uxth	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0208 	orr.w	r2, r2, #8
 800482a:	b292      	uxth	r2, r2
 800482c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004842:	b292      	uxth	r2, r2
 8004844:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004850:	b29a      	uxth	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0204 	orr.w	r2, r2, #4
 800485a:	b292      	uxth	r2, r2
 800485c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f008 fa7d 	bl	800cd60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004866:	e06c      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d040      	beq.n	80048f4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800487a:	b29a      	uxth	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004884:	b292      	uxth	r2, r2
 8004886:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d12b      	bne.n	80048ec <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0204 	orr.w	r2, r2, #4
 80048a6:	b292      	uxth	r2, r2
 80048a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0208 	orr.w	r2, r2, #8
 80048be:	b292      	uxth	r2, r2
 80048c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048e2:	2101      	movs	r1, #1
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f008 fc0f 	bl	800d108 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80048ea:	e02a      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f008 fa37 	bl	800cd60 <HAL_PCD_SuspendCallback>
    return;
 80048f2:	e026      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00f      	beq.n	800491e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004906:	b29a      	uxth	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004910:	b292      	uxth	r2, r2
 8004912:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f008 f9f5 	bl	800cd06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800491c:	e011      	b.n	8004942 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004930:	b29a      	uxth	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800493a:	b292      	uxth	r2, r2
 800493c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004940:	bf00      	nop
  }
}
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_PCD_SetAddress+0x1a>
 800495e:	2302      	movs	r3, #2
 8004960:	e012      	b.n	8004988 <HAL_PCD_SetAddress+0x40>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	78fa      	ldrb	r2, [r7, #3]
 8004976:	4611      	mov	r1, r2
 8004978:	4618      	mov	r0, r3
 800497a:	f006 fa85 	bl	800ae88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	4608      	mov	r0, r1
 800499a:	4611      	mov	r1, r2
 800499c:	461a      	mov	r2, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	70fb      	strb	r3, [r7, #3]
 80049a2:	460b      	mov	r3, r1
 80049a4:	803b      	strh	r3, [r7, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	da0e      	bge.n	80049d4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	f003 0207 	and.w	r2, r3, #7
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	3310      	adds	r3, #16
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4413      	add	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	705a      	strb	r2, [r3, #1]
 80049d2:	e00e      	b.n	80049f2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 0207 	and.w	r2, r3, #7
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	4413      	add	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049f2:	78fb      	ldrb	r3, [r7, #3]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	b2da      	uxtb	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049fe:	883b      	ldrh	r3, [r7, #0]
 8004a00:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	78ba      	ldrb	r2, [r7, #2]
 8004a0c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a0e:	78bb      	ldrb	r3, [r7, #2]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d102      	bne.n	8004a1a <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_PCD_EP_Open+0x98>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e00e      	b.n	8004a46 <HAL_PCD_EP_Open+0xb6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f003 ffc4 	bl	80089c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004a44:	7afb      	ldrb	r3, [r7, #11]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	da0e      	bge.n	8004a80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	f003 0207 	and.w	r2, r3, #7
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	3310      	adds	r3, #16
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4413      	add	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	705a      	strb	r2, [r3, #1]
 8004a7e:	e00e      	b.n	8004a9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	f003 0207 	and.w	r2, r3, #7
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	4413      	add	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_PCD_EP_Close+0x6a>
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e00e      	b.n	8004ad6 <HAL_PCD_EP_Close+0x88>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f004 fb40 	bl	800914c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
 8004aea:	460b      	mov	r3, r1
 8004aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aee:	7afb      	ldrb	r3, [r7, #11]
 8004af0:	f003 0207 	and.w	r2, r3, #7
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1e:	7afb      	ldrb	r3, [r7, #11]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6979      	ldr	r1, [r7, #20]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f004 fcf8 	bl	8009526 <USB_EPStartXfer>

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b4c:	78fb      	ldrb	r3, [r7, #3]
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	4613      	mov	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	440b      	add	r3, r1
 8004b5e:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	370c      	adds	r7, #12
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	603b      	str	r3, [r7, #0]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b80:	7afb      	ldrb	r3, [r7, #11]
 8004b82:	f003 0207 	and.w	r2, r3, #7
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	3310      	adds	r3, #16
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bbc:	7afb      	ldrb	r3, [r7, #11]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f004 fca9 	bl	8009526 <USB_EPStartXfer>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bea:	78fb      	ldrb	r3, [r7, #3]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	7912      	ldrb	r2, [r2, #4]
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e03e      	b.n	8004c7a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	da0e      	bge.n	8004c22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c04:	78fb      	ldrb	r3, [r7, #3]
 8004c06:	f003 0207 	and.w	r2, r3, #7
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	3310      	adds	r3, #16
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	705a      	strb	r2, [r3, #1]
 8004c20:	e00c      	b.n	8004c3c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	4613      	mov	r3, r2
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4413      	add	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c42:	78fb      	ldrb	r3, [r7, #3]
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d101      	bne.n	8004c5c <HAL_PCD_EP_SetStall+0x7e>
 8004c58:	2302      	movs	r3, #2
 8004c5a:	e00e      	b.n	8004c7a <HAL_PCD_EP_SetStall+0x9c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68f9      	ldr	r1, [r7, #12]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f006 f80d 	bl	800ac8a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c8e:	78fb      	ldrb	r3, [r7, #3]
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	7912      	ldrb	r2, [r2, #4]
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e040      	b.n	8004d22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da0e      	bge.n	8004cc6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 0207 	and.w	r2, r3, #7
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	3310      	adds	r3, #16
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	4413      	add	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	705a      	strb	r2, [r3, #1]
 8004cc4:	e00e      	b.n	8004ce4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc6:	78fb      	ldrb	r3, [r7, #3]
 8004cc8:	f003 0207 	and.w	r2, r3, #7
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d101      	bne.n	8004d04 <HAL_PCD_EP_ClrStall+0x82>
 8004d00:	2302      	movs	r3, #2
 8004d02:	e00e      	b.n	8004d22 <HAL_PCD_EP_ClrStall+0xa0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68f9      	ldr	r1, [r7, #12]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f006 f80a 	bl	800ad2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b096      	sub	sp, #88	@ 0x58
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d32:	e3ad      	b.n	8005490 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d3c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004d40:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004d4e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 816f 	bne.w	8005036 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004d58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d14c      	bne.n	8004dfe <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d74:	81fb      	strh	r3, [r7, #14]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	89fb      	ldrh	r3, [r7, #14]
 8004d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3310      	adds	r3, #16
 8004d8c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	6812      	ldr	r2, [r2, #0]
 8004da6:	4413      	add	r3, r2
 8004da8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	441a      	add	r2, r3
 8004dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f007 ff83 	bl	800ccd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	7b1b      	ldrb	r3, [r3, #12]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 835c 	beq.w	8005490 <PCD_EP_ISR_Handler+0x766>
 8004dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f040 8357 	bne.w	8005490 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	7b1b      	ldrb	r3, [r3, #12]
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	731a      	strb	r2, [r3, #12]
 8004dfc:	e348      	b.n	8005490 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e04:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	881b      	ldrh	r3, [r3, #0]
 8004e0c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004e10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004e14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d032      	beq.n	8004e82 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	4413      	add	r3, r2
 8004e36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e42:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e50:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e54:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f006 f893 	bl	800af82 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004e68:	4013      	ands	r3, r2
 8004e6a:	823b      	strh	r3, [r7, #16]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	8a3a      	ldrh	r2, [r7, #16]
 8004e72:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e76:	b292      	uxth	r2, r2
 8004e78:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f007 fefc 	bl	800cc78 <HAL_PCD_SetupStageCallback>
 8004e80:	e306      	b.n	8005490 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e82:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f280 8302 	bge.w	8005490 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004e98:	4013      	ands	r3, r2
 8004e9a:	83fb      	strh	r3, [r7, #30]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	8bfa      	ldrh	r2, [r7, #30]
 8004ea2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004ea6:	b292      	uxth	r2, r2
 8004ea8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d019      	beq.n	8004f0e <PCD_EP_ISR_Handler+0x1e4>
 8004eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d015      	beq.n	8004f0e <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ee8:	6959      	ldr	r1, [r3, #20]
 8004eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eec:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f006 f845 	bl	800af82 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efa:	695a      	ldr	r2, [r3, #20]
 8004efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	441a      	add	r2, r3
 8004f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f04:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004f06:	2100      	movs	r1, #0
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f007 fec7 	bl	800cc9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004f18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 82b5 	bne.w	8005490 <PCD_EP_ISR_Handler+0x766>
 8004f26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f2a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004f2e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f32:	f000 82ad 	beq.w	8005490 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <PCD_EP_ISR_Handler+0x25a>
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	801a      	strh	r2, [r3, #0]
 8004f82:	e039      	b.n	8004ff8 <PCD_EP_ISR_Handler+0x2ce>
 8004f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	2b3e      	cmp	r3, #62	@ 0x3e
 8004f8a:	d818      	bhi.n	8004fbe <PCD_EP_ISR_Handler+0x294>
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <PCD_EP_ISR_Handler+0x27c>
 8004fa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	881b      	ldrh	r3, [r3, #0]
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	029b      	lsls	r3, r3, #10
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	801a      	strh	r2, [r3, #0]
 8004fbc:	e01c      	b.n	8004ff8 <PCD_EP_ISR_Handler+0x2ce>
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 031f 	and.w	r3, r3, #31
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <PCD_EP_ISR_Handler+0x2ae>
 8004fd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	029b      	lsls	r3, r3, #10
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005008:	827b      	strh	r3, [r7, #18]
 800500a:	8a7b      	ldrh	r3, [r7, #18]
 800500c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005010:	827b      	strh	r3, [r7, #18]
 8005012:	8a7b      	ldrh	r3, [r7, #18]
 8005014:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005018:	827b      	strh	r3, [r7, #18]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	8a7b      	ldrh	r3, [r7, #18]
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005028:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800502c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
 8005034:	e22c      	b.n	8005490 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	881b      	ldrh	r3, [r3, #0]
 8005046:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800504a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800504e:	2b00      	cmp	r3, #0
 8005050:	f280 80f6 	bge.w	8005240 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	461a      	mov	r2, r3
 800505a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29a      	uxth	r2, r3
 8005066:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800506a:	4013      	ands	r3, r2
 800506c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	461a      	mov	r2, r3
 8005076:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	4413      	add	r3, r2
 800507e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8005082:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005086:	b292      	uxth	r2, r2
 8005088:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800508a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80050a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a2:	7b1b      	ldrb	r3, [r3, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d123      	bne.n	80050f0 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	461a      	mov	r2, r3
 80050b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4413      	add	r3, r2
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	4413      	add	r3, r2
 80050c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050c6:	881b      	ldrh	r3, [r3, #0]
 80050c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050cc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80050d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 808e 	beq.w	80051f6 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e0:	6959      	ldr	r1, [r3, #20]
 80050e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050e4:	88da      	ldrh	r2, [r3, #6]
 80050e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80050ea:	f005 ff4a 	bl	800af82 <USB_ReadPMA>
 80050ee:	e082      	b.n	80051f6 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80050f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050f2:	78db      	ldrb	r3, [r3, #3]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d10a      	bne.n	800510e <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80050f8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80050fc:	461a      	mov	r2, r3
 80050fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 f9d3 	bl	80054ac <HAL_PCD_EP_DB_Receive>
 8005106:	4603      	mov	r3, r0
 8005108:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800510c:	e073      	b.n	80051f6 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29b      	uxth	r3, r3
 8005120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005128:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800513e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800514a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800514e:	b29b      	uxth	r3, r3
 8005150:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	461a      	mov	r2, r3
 8005158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	881b      	ldrh	r3, [r3, #0]
 8005162:	b29b      	uxth	r3, r3
 8005164:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005168:	2b00      	cmp	r3, #0
 800516a:	d022      	beq.n	80051b2 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005174:	b29b      	uxth	r3, r3
 8005176:	461a      	mov	r2, r3
 8005178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	4413      	add	r3, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	4413      	add	r3, r2
 8005186:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005190:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005194:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005198:	2b00      	cmp	r3, #0
 800519a:	d02c      	beq.n	80051f6 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a2:	6959      	ldr	r1, [r3, #20]
 80051a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a6:	891a      	ldrh	r2, [r3, #8]
 80051a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051ac:	f005 fee9 	bl	800af82 <USB_ReadPMA>
 80051b0:	e021      	b.n	80051f6 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	4413      	add	r3, r2
 80051cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80051d0:	881b      	ldrh	r3, [r3, #0]
 80051d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051d6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80051da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051e8:	6959      	ldr	r1, [r3, #20]
 80051ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ec:	895a      	ldrh	r2, [r3, #10]
 80051ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051f2:	f005 fec6 	bl	800af82 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80051f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f8:	69da      	ldr	r2, [r3, #28]
 80051fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80051fe:	441a      	add	r2, r3
 8005200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005202:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800520c:	441a      	add	r2, r3
 800520e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005210:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <PCD_EP_ISR_Handler+0x4fc>
 800521a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800521e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005220:	691b      	ldr	r3, [r3, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	d206      	bcs.n	8005234 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f007 fd35 	bl	800cc9c <HAL_PCD_DataOutStageCallback>
 8005232:	e005      	b.n	8005240 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800523a:	4618      	mov	r0, r3
 800523c:	f004 f973 	bl	8009526 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005240:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005244:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8121 	beq.w	8005490 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800524e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005252:	4613      	mov	r3, r2
 8005254:	009b      	lsls	r3, r3, #2
 8005256:	4413      	add	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	3310      	adds	r3, #16
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	4413      	add	r3, r2
 8005260:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800527c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	461a      	mov	r2, r3
 8005286:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	441a      	add	r2, r3
 800528e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800529a:	b29b      	uxth	r3, r3
 800529c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800529e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	f040 80a2 	bne.w	80053ec <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80052a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052aa:	2200      	movs	r2, #0
 80052ac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80052ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b0:	7b1b      	ldrb	r3, [r3, #12]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 8093 	beq.w	80053de <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80052bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d046      	beq.n	8005352 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052c6:	785b      	ldrb	r3, [r3, #1]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d126      	bne.n	800531a <PCD_EP_ISR_Handler+0x5f0>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052da:	b29b      	uxth	r3, r3
 80052dc:	461a      	mov	r2, r3
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	4413      	add	r3, r2
 80052e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	00da      	lsls	r2, r3, #3
 80052ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ec:	4413      	add	r3, r2
 80052ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052f2:	623b      	str	r3, [r7, #32]
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052fe:	b29a      	uxth	r2, r3
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	801a      	strh	r2, [r3, #0]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800530e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005312:	b29a      	uxth	r2, r3
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e061      	b.n	80053de <PCD_EP_ISR_Handler+0x6b4>
 800531a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d15d      	bne.n	80053de <PCD_EP_ISR_Handler+0x6b4>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005336:	4413      	add	r3, r2
 8005338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800533a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	00da      	lsls	r2, r3, #3
 8005340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005342:	4413      	add	r3, r2
 8005344:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	2200      	movs	r2, #0
 800534e:	801a      	strh	r2, [r3, #0]
 8005350:	e045      	b.n	80053de <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d126      	bne.n	80053ae <PCD_EP_ISR_Handler+0x684>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800536e:	b29b      	uxth	r3, r3
 8005370:	461a      	mov	r2, r3
 8005372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005374:	4413      	add	r3, r2
 8005376:	637b      	str	r3, [r7, #52]	@ 0x34
 8005378:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	00da      	lsls	r2, r3, #3
 800537e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005380:	4413      	add	r3, r2
 8005382:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
 8005388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	b29b      	uxth	r3, r3
 800538e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005392:	b29a      	uxth	r2, r3
 8005394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a6:	b29a      	uxth	r2, r3
 80053a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053aa:	801a      	strh	r2, [r3, #0]
 80053ac:	e017      	b.n	80053de <PCD_EP_ISR_Handler+0x6b4>
 80053ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b0:	785b      	ldrb	r3, [r3, #1]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d113      	bne.n	80053de <PCD_EP_ISR_Handler+0x6b4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053be:	b29b      	uxth	r3, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c4:	4413      	add	r3, r2
 80053c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	00da      	lsls	r2, r3, #3
 80053ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d0:	4413      	add	r3, r2
 80053d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80053d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80053d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053da:	2200      	movs	r2, #0
 80053dc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80053de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f007 fc74 	bl	800ccd2 <HAL_PCD_DataInStageCallback>
 80053ea:	e051      	b.n	8005490 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80053ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80053f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d144      	bne.n	8005482 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005400:	b29b      	uxth	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	4413      	add	r3, r2
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	6812      	ldr	r2, [r2, #0]
 8005410:	4413      	add	r3, r2
 8005412:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005416:	881b      	ldrh	r3, [r3, #0]
 8005418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800541c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005420:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005428:	429a      	cmp	r2, r3
 800542a:	d907      	bls.n	800543c <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800542c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005434:	1ad2      	subs	r2, r2, r3
 8005436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005438:	619a      	str	r2, [r3, #24]
 800543a:	e002      	b.n	8005442 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800543c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800543e:	2200      	movs	r2, #0
 8005440:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800544a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	4619      	mov	r1, r3
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f007 fc3e 	bl	800ccd2 <HAL_PCD_DataInStageCallback>
 8005456:	e01b      	b.n	8005490 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005460:	441a      	add	r2, r3
 8005462:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005464:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005466:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800546e:	441a      	add	r2, r3
 8005470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005472:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800547a:	4618      	mov	r0, r3
 800547c:	f004 f853 	bl	8009526 <USB_EPStartXfer>
 8005480:	e006      	b.n	8005490 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005482:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005486:	461a      	mov	r2, r3
 8005488:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f917 	bl	80056be <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005498:	b29b      	uxth	r3, r3
 800549a:	b21b      	sxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	f6ff ac49 	blt.w	8004d34 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80054a2:	2300      	movs	r3, #0
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3758      	adds	r7, #88	@ 0x58
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d07c      	beq.n	80055be <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	8b7b      	ldrh	r3, [r7, #26]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d306      	bcc.n	8005502 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	8b7b      	ldrh	r3, [r7, #26]
 80054fa:	1ad2      	subs	r2, r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	619a      	str	r2, [r3, #24]
 8005500:	e002      	b.n	8005508 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	2200      	movs	r2, #0
 8005506:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d123      	bne.n	8005558 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	4413      	add	r3, r2
 800551e:	881b      	ldrh	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552a:	833b      	strh	r3, [r7, #24]
 800552c:	8b3b      	ldrh	r3, [r7, #24]
 800552e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005532:	833b      	strh	r3, [r7, #24]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	441a      	add	r2, r3
 8005542:	8b3b      	ldrh	r3, [r7, #24]
 8005544:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005548:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800554c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005550:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005554:	b29b      	uxth	r3, r3
 8005556:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005558:	88fb      	ldrh	r3, [r7, #6]
 800555a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	d01f      	beq.n	80055a2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	461a      	mov	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	881b      	ldrh	r3, [r3, #0]
 8005572:	b29b      	uxth	r3, r3
 8005574:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800557c:	82fb      	strh	r3, [r7, #22]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	441a      	add	r2, r3
 800558c:	8afb      	ldrh	r3, [r7, #22]
 800558e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005592:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800559a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800559e:	b29b      	uxth	r3, r3
 80055a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80055a2:	8b7b      	ldrh	r3, [r7, #26]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 8085 	beq.w	80056b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	6959      	ldr	r1, [r3, #20]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	891a      	ldrh	r2, [r3, #8]
 80055b6:	8b7b      	ldrh	r3, [r7, #26]
 80055b8:	f005 fce3 	bl	800af82 <USB_ReadPMA>
 80055bc:	e07a      	b.n	80056b4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	4413      	add	r3, r2
 80055d8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	8b7b      	ldrh	r3, [r7, #26]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d306      	bcc.n	80055fc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	8b7b      	ldrh	r3, [r7, #26]
 80055f4:	1ad2      	subs	r2, r2, r3
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	619a      	str	r2, [r3, #24]
 80055fa:	e002      	b.n	8005602 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2200      	movs	r2, #0
 8005600:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d123      	bne.n	8005652 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	b29b      	uxth	r3, r3
 800561c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005620:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005624:	83fb      	strh	r3, [r7, #30]
 8005626:	8bfb      	ldrh	r3, [r7, #30]
 8005628:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800562c:	83fb      	strh	r3, [r7, #30]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	461a      	mov	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	441a      	add	r2, r3
 800563c:	8bfb      	ldrh	r3, [r7, #30]
 800563e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005642:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800564a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800564e:	b29b      	uxth	r3, r3
 8005650:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11f      	bne.n	800569c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	881b      	ldrh	r3, [r3, #0]
 800566c:	b29b      	uxth	r3, r3
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005676:	83bb      	strh	r3, [r7, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	461a      	mov	r2, r3
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	441a      	add	r2, r3
 8005686:	8bbb      	ldrh	r3, [r7, #28]
 8005688:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800568c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005690:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005694:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005698:	b29b      	uxth	r3, r3
 800569a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800569c:	8b7b      	ldrh	r3, [r7, #26]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6959      	ldr	r1, [r3, #20]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	895a      	ldrh	r2, [r3, #10]
 80056ae:	8b7b      	ldrh	r3, [r7, #26]
 80056b0:	f005 fc67 	bl	800af82 <USB_ReadPMA>
    }
  }

  return count;
 80056b4:	8b7b      	ldrh	r3, [r7, #26]
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3720      	adds	r7, #32
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b0a4      	sub	sp, #144	@ 0x90
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	4613      	mov	r3, r2
 80056ca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 81db 	beq.w	8005a8e <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4413      	add	r3, r2
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	6812      	ldr	r2, [r2, #0]
 80056f0:	4413      	add	r3, r2
 80056f2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056fc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005708:	429a      	cmp	r2, r3
 800570a:	d907      	bls.n	800571c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005714:	1ad2      	subs	r2, r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	619a      	str	r2, [r3, #24]
 800571a:	e002      	b.n	8005722 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 80b9 	bne.w	800589e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d126      	bne.n	8005782 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005742:	b29b      	uxth	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005748:	4413      	add	r3, r2
 800574a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	00da      	lsls	r2, r3, #3
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	4413      	add	r3, r2
 8005756:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800575a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800575c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575e:	881b      	ldrh	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005766:	b29a      	uxth	r2, r3
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	801a      	strh	r2, [r3, #0]
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800577a:	b29a      	uxth	r2, r3
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	801a      	strh	r2, [r3, #0]
 8005780:	e01a      	b.n	80057b8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d116      	bne.n	80057b8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005798:	b29b      	uxth	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	4413      	add	r3, r2
 80057a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	00da      	lsls	r2, r3, #3
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	4413      	add	r3, r2
 80057ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	2200      	movs	r2, #0
 80057b6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	785b      	ldrb	r3, [r3, #1]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d126      	bne.n	8005814 <HAL_PCD_EP_DB_Transmit+0x156>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	461a      	mov	r2, r3
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	61fb      	str	r3, [r7, #28]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	00da      	lsls	r2, r3, #3
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	801a      	strh	r2, [r3, #0]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	881b      	ldrh	r3, [r3, #0]
 8005802:	b29b      	uxth	r3, r3
 8005804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800580c:	b29a      	uxth	r2, r3
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	e017      	b.n	8005844 <HAL_PCD_EP_DB_Transmit+0x186>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d113      	bne.n	8005844 <HAL_PCD_EP_DB_Transmit+0x186>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005824:	b29b      	uxth	r3, r3
 8005826:	461a      	mov	r2, r3
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	4413      	add	r3, r2
 800582c:	627b      	str	r3, [r7, #36]	@ 0x24
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	00da      	lsls	r2, r3, #3
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	4413      	add	r3, r2
 8005838:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	2200      	movs	r2, #0
 8005842:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	4619      	mov	r1, r3
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f007 fa41 	bl	800ccd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005850:	88fb      	ldrh	r3, [r7, #6]
 8005852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005856:	2b00      	cmp	r3, #0
 8005858:	f000 82fa 	beq.w	8005e50 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005872:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005876:	82fb      	strh	r3, [r7, #22]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	461a      	mov	r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	441a      	add	r2, r3
 8005886:	8afb      	ldrh	r3, [r7, #22]
 8005888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800588c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005890:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005898:	b29b      	uxth	r3, r3
 800589a:	8013      	strh	r3, [r2, #0]
 800589c:	e2d8      	b.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d021      	beq.n	80058ec <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	461a      	mov	r2, r3
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80058d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	f040 82ac 	bne.w	8005e50 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005900:	441a      	add	r2, r3
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	69da      	ldr	r2, [r3, #28]
 800590a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800590e:	441a      	add	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	429a      	cmp	r2, r3
 800591e:	d30b      	bcc.n	8005938 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	6a1a      	ldr	r2, [r3, #32]
 800592c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005930:	1ad2      	subs	r2, r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	621a      	str	r2, [r3, #32]
 8005936:	e017      	b.n	8005968 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d108      	bne.n	8005952 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005940:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005944:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005950:	e00a      	b.n	8005968 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	785b      	ldrb	r3, [r3, #1]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d165      	bne.n	8005a3c <HAL_PCD_EP_DB_Transmit+0x37e>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800597e:	b29b      	uxth	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005984:	4413      	add	r3, r2
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	00da      	lsls	r2, r3, #3
 800598e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005990:	4413      	add	r3, r2
 8005992:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005996:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	b29b      	uxth	r3, r3
 800599e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	801a      	strh	r2, [r3, #0]
 80059a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10a      	bne.n	80059c6 <HAL_PCD_EP_DB_Transmit+0x308>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e057      	b.n	8005a76 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80059c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059ca:	2b3e      	cmp	r3, #62	@ 0x3e
 80059cc:	d818      	bhi.n	8005a00 <HAL_PCD_EP_DB_Transmit+0x342>
 80059ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059d2:	085b      	lsrs	r3, r3, #1
 80059d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_PCD_EP_DB_Transmit+0x32a>
 80059e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059e4:	3301      	adds	r3, #1
 80059e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	881b      	ldrh	r3, [r3, #0]
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	029b      	lsls	r3, r3, #10
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	4313      	orrs	r3, r2
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	801a      	strh	r2, [r3, #0]
 80059fe:	e03a      	b.n	8005a76 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a04:	095b      	lsrs	r3, r3, #5
 8005a06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <HAL_PCD_EP_DB_Transmit+0x35c>
 8005a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a16:	3b01      	subs	r3, #1
 8005a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	029b      	lsls	r3, r3, #10
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a38:	801a      	strh	r2, [r3, #0]
 8005a3a:	e01c      	b.n	8005a76 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	785b      	ldrb	r3, [r3, #1]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d118      	bne.n	8005a76 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	461a      	mov	r2, r3
 8005a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a58:	4413      	add	r3, r2
 8005a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	00da      	lsls	r2, r3, #3
 8005a62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a64:	4413      	add	r3, r2
 8005a66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a74:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	891a      	ldrh	r2, [r3, #8]
 8005a82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f005 fa39 	bl	800aefe <USB_WritePMA>
 8005a8c:	e1e0      	b.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005aac:	881b      	ldrh	r3, [r3, #0]
 8005aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	699a      	ldr	r2, [r3, #24]
 8005aba:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d307      	bcc.n	8005ad2 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	619a      	str	r2, [r3, #24]
 8005ad0:	e002      	b.n	8005ad8 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 80c0 	bne.w	8005c62 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	785b      	ldrb	r3, [r3, #1]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d126      	bne.n	8005b38 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	461a      	mov	r2, r3
 8005afc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005afe:	4413      	add	r3, r2
 8005b00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	00da      	lsls	r2, r3, #3
 8005b08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	e01a      	b.n	8005b6e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d116      	bne.n	8005b6e <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b54:	4413      	add	r3, r2
 8005b56:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	00da      	lsls	r2, r3, #3
 8005b5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b60:	4413      	add	r3, r2
 8005b62:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b66:	663b      	str	r3, [r7, #96]	@ 0x60
 8005b68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	785b      	ldrb	r3, [r3, #1]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d12b      	bne.n	8005bd4 <HAL_PCD_EP_DB_Transmit+0x516>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b90:	4413      	add	r3, r2
 8005b92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	00da      	lsls	r2, r3, #3
 8005b9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005ba2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ba6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bd0:	801a      	strh	r2, [r3, #0]
 8005bd2:	e017      	b.n	8005c04 <HAL_PCD_EP_DB_Transmit+0x546>
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	785b      	ldrb	r3, [r3, #1]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d113      	bne.n	8005c04 <HAL_PCD_EP_DB_Transmit+0x546>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	461a      	mov	r2, r3
 8005be8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bea:	4413      	add	r3, r2
 8005bec:	677b      	str	r3, [r7, #116]	@ 0x74
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	00da      	lsls	r2, r3, #3
 8005bf4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005bfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c00:	2200      	movs	r2, #0
 8005c02:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	4619      	mov	r1, r3
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f007 f861 	bl	800ccd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c10:	88fb      	ldrh	r3, [r7, #6]
 8005c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 811a 	bne.w	8005e50 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c36:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	441a      	add	r2, r3
 8005c48:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c54:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]
 8005c60:	e0f6      	b.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d121      	bne.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c86:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ca0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ca4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ca8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	f040 80ca 	bne.w	8005e50 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005cc4:	441a      	add	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d30b      	bcc.n	8005cfc <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	6a1a      	ldr	r2, [r3, #32]
 8005cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005cf4:	1ad2      	subs	r2, r2, r3
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	621a      	str	r2, [r3, #32]
 8005cfa:	e017      	b.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d108      	bne.n	8005d16 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005d04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005d08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005d14:	e00a      	b.n	8005d2c <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2200      	movs	r2, #0
 8005d22:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	785b      	ldrb	r3, [r3, #1]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d165      	bne.n	8005e06 <HAL_PCD_EP_DB_Transmit+0x748>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d4e:	4413      	add	r3, r2
 8005d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	00da      	lsls	r2, r3, #3
 8005d58:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d70:	801a      	strh	r2, [r3, #0]
 8005d72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005d7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e054      	b.n	8005e3a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005d90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d94:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d96:	d818      	bhi.n	8005dca <HAL_PCD_EP_DB_Transmit+0x70c>
 8005d98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dae:	3301      	adds	r3, #1
 8005db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005db2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	029b      	lsls	r3, r3, #10
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e037      	b.n	8005e3a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <HAL_PCD_EP_DB_Transmit+0x726>
 8005dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005de0:	3b01      	subs	r3, #1
 8005de2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005de4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	b29a      	uxth	r2, r3
 8005dea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	029b      	lsls	r3, r3, #10
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4313      	orrs	r3, r2
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e02:	801a      	strh	r2, [r3, #0]
 8005e04:	e019      	b.n	8005e3a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	785b      	ldrb	r3, [r3, #1]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d115      	bne.n	8005e3a <HAL_PCD_EP_DB_Transmit+0x77c>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e1c:	4413      	add	r3, r2
 8005e1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	00da      	lsls	r2, r3, #3
 8005e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e28:	4413      	add	r3, r2
 8005e2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e38:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	6959      	ldr	r1, [r3, #20]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	895a      	ldrh	r2, [r3, #10]
 8005e46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	f005 f857 	bl	800aefe <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	461a      	mov	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4413      	add	r3, r2
 8005e5e:	881b      	ldrh	r3, [r3, #0]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e6a:	82bb      	strh	r3, [r7, #20]
 8005e6c:	8abb      	ldrh	r3, [r7, #20]
 8005e6e:	f083 0310 	eor.w	r3, r3, #16
 8005e72:	82bb      	strh	r3, [r7, #20]
 8005e74:	8abb      	ldrh	r3, [r7, #20]
 8005e76:	f083 0320 	eor.w	r3, r3, #32
 8005e7a:	82bb      	strh	r3, [r7, #20]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	8abb      	ldrh	r3, [r7, #20]
 8005e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3790      	adds	r7, #144	@ 0x90
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b087      	sub	sp, #28
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	817b      	strh	r3, [r7, #10]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005ebc:	897b      	ldrh	r3, [r7, #10]
 8005ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec8:	897b      	ldrh	r3, [r7, #10]
 8005eca:	f003 0207 	and.w	r2, r3, #7
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	3310      	adds	r3, #16
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4413      	add	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e009      	b.n	8005ef4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ee0:	897a      	ldrh	r2, [r7, #10]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005ef4:	893b      	ldrh	r3, [r7, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2200      	movs	r2, #0
 8005efe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	80da      	strh	r2, [r3, #6]
 8005f08:	e00b      	b.n	8005f22 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0c1b      	lsrs	r3, r3, #16
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	f043 0301 	orr.w	r3, r3, #1
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d141      	bne.n	8006016 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f92:	4b4b      	ldr	r3, [pc, #300]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f9e:	d131      	bne.n	8006004 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005fa0:	4b47      	ldr	r3, [pc, #284]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa6:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005fb0:	4b43      	ldr	r3, [pc, #268]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005fb8:	4a41      	ldr	r2, [pc, #260]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005fbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005fc0:	4b40      	ldr	r3, [pc, #256]	@ (80060c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2232      	movs	r2, #50	@ 0x32
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	4a3f      	ldr	r2, [pc, #252]	@ (80060c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	0c9b      	lsrs	r3, r3, #18
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fd6:	e002      	b.n	8005fde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005fde:	4b38      	ldr	r3, [pc, #224]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fea:	d102      	bne.n	8005ff2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f2      	bne.n	8005fd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ff2:	4b33      	ldr	r3, [pc, #204]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ffe:	d158      	bne.n	80060b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e057      	b.n	80060b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006004:	4b2e      	ldr	r3, [pc, #184]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800600a:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800600c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006010:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006014:	e04d      	b.n	80060b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800601c:	d141      	bne.n	80060a2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800601e:	4b28      	ldr	r3, [pc, #160]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006026:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800602a:	d131      	bne.n	8006090 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800602c:	4b24      	ldr	r3, [pc, #144]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800602e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006032:	4a23      	ldr	r2, [pc, #140]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006038:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800603c:	4b20      	ldr	r3, [pc, #128]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006044:	4a1e      	ldr	r2, [pc, #120]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800604a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800604c:	4b1d      	ldr	r3, [pc, #116]	@ (80060c4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2232      	movs	r2, #50	@ 0x32
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	4a1c      	ldr	r2, [pc, #112]	@ (80060c8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	0c9b      	lsrs	r3, r3, #18
 800605e:	3301      	adds	r3, #1
 8006060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006062:	e002      	b.n	800606a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3b01      	subs	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800606a:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006076:	d102      	bne.n	800607e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1f2      	bne.n	8006064 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800607e:	4b10      	ldr	r3, [pc, #64]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800608a:	d112      	bne.n	80060b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e011      	b.n	80060b4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006090:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006092:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006096:	4a0a      	ldr	r2, [pc, #40]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006098:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800609c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80060a0:	e007      	b.n	80060b2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060aa:	4a05      	ldr	r2, [pc, #20]	@ (80060c0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060b0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40007000 	.word	0x40007000
 80060c4:	20000000 	.word	0x20000000
 80060c8:	431bde83 	.word	0x431bde83

080060cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e2fe      	b.n	80066dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d075      	beq.n	80061d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ea:	4b97      	ldr	r3, [pc, #604]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 030c 	and.w	r3, r3, #12
 80060f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060f4:	4b94      	ldr	r3, [pc, #592]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	2b0c      	cmp	r3, #12
 8006102:	d102      	bne.n	800610a <HAL_RCC_OscConfig+0x3e>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b03      	cmp	r3, #3
 8006108:	d002      	beq.n	8006110 <HAL_RCC_OscConfig+0x44>
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2b08      	cmp	r3, #8
 800610e:	d10b      	bne.n	8006128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006110:	4b8d      	ldr	r3, [pc, #564]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d05b      	beq.n	80061d4 <HAL_RCC_OscConfig+0x108>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d157      	bne.n	80061d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e2d9      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006130:	d106      	bne.n	8006140 <HAL_RCC_OscConfig+0x74>
 8006132:	4b85      	ldr	r3, [pc, #532]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a84      	ldr	r2, [pc, #528]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	e01d      	b.n	800617c <HAL_RCC_OscConfig+0xb0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006148:	d10c      	bne.n	8006164 <HAL_RCC_OscConfig+0x98>
 800614a:	4b7f      	ldr	r3, [pc, #508]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a7e      	ldr	r2, [pc, #504]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	4b7c      	ldr	r3, [pc, #496]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a7b      	ldr	r2, [pc, #492]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800615c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	e00b      	b.n	800617c <HAL_RCC_OscConfig+0xb0>
 8006164:	4b78      	ldr	r3, [pc, #480]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a77      	ldr	r2, [pc, #476]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800616a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800616e:	6013      	str	r3, [r2, #0]
 8006170:	4b75      	ldr	r3, [pc, #468]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a74      	ldr	r2, [pc, #464]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800617a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d013      	beq.n	80061ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006184:	f7fb fe30 	bl	8001de8 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800618c:	f7fb fe2c 	bl	8001de8 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b64      	cmp	r3, #100	@ 0x64
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e29e      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800619e:	4b6a      	ldr	r3, [pc, #424]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0xc0>
 80061aa:	e014      	b.n	80061d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fb fe1c 	bl	8001de8 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061b4:	f7fb fe18 	bl	8001de8 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b64      	cmp	r3, #100	@ 0x64
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e28a      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80061c6:	4b60      	ldr	r3, [pc, #384]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0xe8>
 80061d2:	e000      	b.n	80061d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061e2:	4b59      	ldr	r3, [pc, #356]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061ec:	4b56      	ldr	r3, [pc, #344]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b0c      	cmp	r3, #12
 80061fa:	d102      	bne.n	8006202 <HAL_RCC_OscConfig+0x136>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d002      	beq.n	8006208 <HAL_RCC_OscConfig+0x13c>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	2b04      	cmp	r3, #4
 8006206:	d11f      	bne.n	8006248 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006208:	4b4f      	ldr	r3, [pc, #316]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_RCC_OscConfig+0x154>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e25d      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006220:	4b49      	ldr	r3, [pc, #292]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	061b      	lsls	r3, r3, #24
 800622e:	4946      	ldr	r1, [pc, #280]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006230:	4313      	orrs	r3, r2
 8006232:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006234:	4b45      	ldr	r3, [pc, #276]	@ (800634c <HAL_RCC_OscConfig+0x280>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4618      	mov	r0, r3
 800623a:	f7fb fd89 	bl	8001d50 <HAL_InitTick>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d043      	beq.n	80062cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e249      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d023      	beq.n	8006298 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006250:	4b3d      	ldr	r3, [pc, #244]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a3c      	ldr	r2, [pc, #240]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800625a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625c:	f7fb fdc4 	bl	8001de8 <HAL_GetTick>
 8006260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006262:	e008      	b.n	8006276 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006264:	f7fb fdc0 	bl	8001de8 <HAL_GetTick>
 8006268:	4602      	mov	r2, r0
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	1ad3      	subs	r3, r2, r3
 800626e:	2b02      	cmp	r3, #2
 8006270:	d901      	bls.n	8006276 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e232      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006276:	4b34      	ldr	r3, [pc, #208]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0f0      	beq.n	8006264 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006282:	4b31      	ldr	r3, [pc, #196]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	061b      	lsls	r3, r3, #24
 8006290:	492d      	ldr	r1, [pc, #180]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	604b      	str	r3, [r1, #4]
 8006296:	e01a      	b.n	80062ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006298:	4b2b      	ldr	r3, [pc, #172]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a2a      	ldr	r2, [pc, #168]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800629e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a4:	f7fb fda0 	bl	8001de8 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ac:	f7fb fd9c 	bl	8001de8 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e20e      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80062be:	4b22      	ldr	r3, [pc, #136]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0x1e0>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0308 	and.w	r3, r3, #8
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d041      	beq.n	800635e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d01c      	beq.n	800631c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e2:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80062e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062e8:	4a17      	ldr	r2, [pc, #92]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f2:	f7fb fd79 	bl	8001de8 <HAL_GetTick>
 80062f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80062f8:	e008      	b.n	800630c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062fa:	f7fb fd75 	bl	8001de8 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	2b02      	cmp	r3, #2
 8006306:	d901      	bls.n	800630c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e1e7      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800630c:	4b0e      	ldr	r3, [pc, #56]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800630e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006312:	f003 0302 	and.w	r3, r3, #2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d0ef      	beq.n	80062fa <HAL_RCC_OscConfig+0x22e>
 800631a:	e020      	b.n	800635e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800631c:	4b0a      	ldr	r3, [pc, #40]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 800631e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006322:	4a09      	ldr	r2, [pc, #36]	@ (8006348 <HAL_RCC_OscConfig+0x27c>)
 8006324:	f023 0301 	bic.w	r3, r3, #1
 8006328:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632c:	f7fb fd5c 	bl	8001de8 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006332:	e00d      	b.n	8006350 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006334:	f7fb fd58 	bl	8001de8 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d906      	bls.n	8006350 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e1ca      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
 8006346:	bf00      	nop
 8006348:	40021000 	.word	0x40021000
 800634c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006350:	4b8c      	ldr	r3, [pc, #560]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1ea      	bne.n	8006334 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 80a6 	beq.w	80064b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800636c:	2300      	movs	r3, #0
 800636e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006370:	4b84      	ldr	r3, [pc, #528]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006374:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_RCC_OscConfig+0x2b4>
 800637c:	2301      	movs	r3, #1
 800637e:	e000      	b.n	8006382 <HAL_RCC_OscConfig+0x2b6>
 8006380:	2300      	movs	r3, #0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006386:	4b7f      	ldr	r3, [pc, #508]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638a:	4a7e      	ldr	r2, [pc, #504]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800638c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006390:	6593      	str	r3, [r2, #88]	@ 0x58
 8006392:	4b7c      	ldr	r3, [pc, #496]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800639e:	2301      	movs	r3, #1
 80063a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063a2:	4b79      	ldr	r3, [pc, #484]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d118      	bne.n	80063e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063ae:	4b76      	ldr	r3, [pc, #472]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a75      	ldr	r2, [pc, #468]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ba:	f7fb fd15 	bl	8001de8 <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063c0:	e008      	b.n	80063d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063c2:	f7fb fd11 	bl	8001de8 <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e183      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80063d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006588 <HAL_RCC_OscConfig+0x4bc>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d108      	bne.n	80063fa <HAL_RCC_OscConfig+0x32e>
 80063e8:	4b66      	ldr	r3, [pc, #408]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80063ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063ee:	4a65      	ldr	r2, [pc, #404]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80063f0:	f043 0301 	orr.w	r3, r3, #1
 80063f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80063f8:	e024      	b.n	8006444 <HAL_RCC_OscConfig+0x378>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b05      	cmp	r3, #5
 8006400:	d110      	bne.n	8006424 <HAL_RCC_OscConfig+0x358>
 8006402:	4b60      	ldr	r3, [pc, #384]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006408:	4a5e      	ldr	r2, [pc, #376]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800640a:	f043 0304 	orr.w	r3, r3, #4
 800640e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006412:	4b5c      	ldr	r3, [pc, #368]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006418:	4a5a      	ldr	r2, [pc, #360]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800641a:	f043 0301 	orr.w	r3, r3, #1
 800641e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006422:	e00f      	b.n	8006444 <HAL_RCC_OscConfig+0x378>
 8006424:	4b57      	ldr	r3, [pc, #348]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800642a:	4a56      	ldr	r2, [pc, #344]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800642c:	f023 0301 	bic.w	r3, r3, #1
 8006430:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006434:	4b53      	ldr	r3, [pc, #332]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800643a:	4a52      	ldr	r2, [pc, #328]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800643c:	f023 0304 	bic.w	r3, r3, #4
 8006440:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d016      	beq.n	800647a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800644c:	f7fb fccc 	bl	8001de8 <HAL_GetTick>
 8006450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006452:	e00a      	b.n	800646a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006454:	f7fb fcc8 	bl	8001de8 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006462:	4293      	cmp	r3, r2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e138      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800646a:	4b46      	ldr	r3, [pc, #280]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800646c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ed      	beq.n	8006454 <HAL_RCC_OscConfig+0x388>
 8006478:	e015      	b.n	80064a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800647a:	f7fb fcb5 	bl	8001de8 <HAL_GetTick>
 800647e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006480:	e00a      	b.n	8006498 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006482:	f7fb fcb1 	bl	8001de8 <HAL_GetTick>
 8006486:	4602      	mov	r2, r0
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	1ad3      	subs	r3, r2, r3
 800648c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006490:	4293      	cmp	r3, r2
 8006492:	d901      	bls.n	8006498 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e121      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006498:	4b3a      	ldr	r3, [pc, #232]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800649a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1ed      	bne.n	8006482 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064a6:	7ffb      	ldrb	r3, [r7, #31]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d105      	bne.n	80064b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064ac:	4b35      	ldr	r3, [pc, #212]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b0:	4a34      	ldr	r2, [pc, #208]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d03c      	beq.n	800653e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d01c      	beq.n	8006506 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80064cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064dc:	f7fb fc84 	bl	8001de8 <HAL_GetTick>
 80064e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064e2:	e008      	b.n	80064f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80064e4:	f7fb fc80 	bl	8001de8 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0f2      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80064f6:	4b23      	ldr	r3, [pc, #140]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 80064f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0ef      	beq.n	80064e4 <HAL_RCC_OscConfig+0x418>
 8006504:	e01b      	b.n	800653e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006506:	4b1f      	ldr	r3, [pc, #124]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006508:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800650c:	4a1d      	ldr	r2, [pc, #116]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800650e:	f023 0301 	bic.w	r3, r3, #1
 8006512:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006516:	f7fb fc67 	bl	8001de8 <HAL_GetTick>
 800651a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800651c:	e008      	b.n	8006530 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800651e:	f7fb fc63 	bl	8001de8 <HAL_GetTick>
 8006522:	4602      	mov	r2, r0
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	1ad3      	subs	r3, r2, r3
 8006528:	2b02      	cmp	r3, #2
 800652a:	d901      	bls.n	8006530 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0d5      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006530:	4b14      	ldr	r3, [pc, #80]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006532:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1ef      	bne.n	800651e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 80c9 	beq.w	80066da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006548:	4b0e      	ldr	r3, [pc, #56]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	2b0c      	cmp	r3, #12
 8006552:	f000 8083 	beq.w	800665c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2b02      	cmp	r3, #2
 800655c:	d15e      	bne.n	800661c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800655e:	4b09      	ldr	r3, [pc, #36]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a08      	ldr	r2, [pc, #32]	@ (8006584 <HAL_RCC_OscConfig+0x4b8>)
 8006564:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006568:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800656a:	f7fb fc3d 	bl	8001de8 <HAL_GetTick>
 800656e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006570:	e00c      	b.n	800658c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006572:	f7fb fc39 	bl	8001de8 <HAL_GetTick>
 8006576:	4602      	mov	r2, r0
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b02      	cmp	r3, #2
 800657e:	d905      	bls.n	800658c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e0ab      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
 8006584:	40021000 	.word	0x40021000
 8006588:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800658c:	4b55      	ldr	r3, [pc, #340]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1ec      	bne.n	8006572 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006598:	4b52      	ldr	r3, [pc, #328]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	4b52      	ldr	r3, [pc, #328]	@ (80066e8 <HAL_RCC_OscConfig+0x61c>)
 800659e:	4013      	ands	r3, r2
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	6a11      	ldr	r1, [r2, #32]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065a8:	3a01      	subs	r2, #1
 80065aa:	0112      	lsls	r2, r2, #4
 80065ac:	4311      	orrs	r1, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80065b2:	0212      	lsls	r2, r2, #8
 80065b4:	4311      	orrs	r1, r2
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80065ba:	0852      	lsrs	r2, r2, #1
 80065bc:	3a01      	subs	r2, #1
 80065be:	0552      	lsls	r2, r2, #21
 80065c0:	4311      	orrs	r1, r2
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80065c6:	0852      	lsrs	r2, r2, #1
 80065c8:	3a01      	subs	r2, #1
 80065ca:	0652      	lsls	r2, r2, #25
 80065cc:	4311      	orrs	r1, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80065d2:	06d2      	lsls	r2, r2, #27
 80065d4:	430a      	orrs	r2, r1
 80065d6:	4943      	ldr	r1, [pc, #268]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065d8:	4313      	orrs	r3, r2
 80065da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065dc:	4b41      	ldr	r3, [pc, #260]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a40      	ldr	r2, [pc, #256]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80065e8:	4b3e      	ldr	r3, [pc, #248]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	4a3d      	ldr	r2, [pc, #244]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 80065ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f4:	f7fb fbf8 	bl	8001de8 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80065fa:	e008      	b.n	800660e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065fc:	f7fb fbf4 	bl	8001de8 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e066      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800660e:	4b35      	ldr	r3, [pc, #212]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCC_OscConfig+0x530>
 800661a:	e05e      	b.n	80066da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661c:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a30      	ldr	r2, [pc, #192]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006622:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006626:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006628:	f7fb fbde 	bl	8001de8 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006630:	f7fb fbda 	bl	8001de8 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e04c      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006642:	4b28      	ldr	r3, [pc, #160]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800664e:	4b25      	ldr	r3, [pc, #148]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	4924      	ldr	r1, [pc, #144]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 8006654:	4b25      	ldr	r3, [pc, #148]	@ (80066ec <HAL_RCC_OscConfig+0x620>)
 8006656:	4013      	ands	r3, r2
 8006658:	60cb      	str	r3, [r1, #12]
 800665a:	e03e      	b.n	80066da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e039      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006668:	4b1e      	ldr	r3, [pc, #120]	@ (80066e4 <HAL_RCC_OscConfig+0x618>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 0203 	and.w	r2, r3, #3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	429a      	cmp	r2, r3
 800667a:	d12c      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006686:	3b01      	subs	r3, #1
 8006688:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	429a      	cmp	r2, r3
 800668c:	d123      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800669a:	429a      	cmp	r2, r3
 800669c:	d11b      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d113      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80066be:	429a      	cmp	r2, r3
 80066c0:	d109      	bne.n	80066d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	3b01      	subs	r3, #1
 80066d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d001      	beq.n	80066da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	40021000 	.word	0x40021000
 80066e8:	019f800c 	.word	0x019f800c
 80066ec:	feeefffc 	.word	0xfeeefffc

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e11e      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006708:	4b91      	ldr	r3, [pc, #580]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 030f 	and.w	r3, r3, #15
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d910      	bls.n	8006738 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006716:	4b8e      	ldr	r3, [pc, #568]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f023 020f 	bic.w	r2, r3, #15
 800671e:	498c      	ldr	r1, [pc, #560]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	4313      	orrs	r3, r2
 8006724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006726:	4b8a      	ldr	r3, [pc, #552]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	429a      	cmp	r2, r3
 8006732:	d001      	beq.n	8006738 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e106      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0301 	and.w	r3, r3, #1
 8006740:	2b00      	cmp	r3, #0
 8006742:	d073      	beq.n	800682c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b03      	cmp	r3, #3
 800674a:	d129      	bne.n	80067a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800674c:	4b81      	ldr	r3, [pc, #516]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e0f4      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800675c:	f000 f99e 	bl	8006a9c <RCC_GetSysClockFreqFromPLLSource>
 8006760:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	4a7c      	ldr	r2, [pc, #496]	@ (8006958 <HAL_RCC_ClockConfig+0x268>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d93f      	bls.n	80067ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800676a:	4b7a      	ldr	r3, [pc, #488]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d009      	beq.n	800678a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800677e:	2b00      	cmp	r3, #0
 8006780:	d033      	beq.n	80067ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006786:	2b00      	cmp	r3, #0
 8006788:	d12f      	bne.n	80067ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800678a:	4b72      	ldr	r3, [pc, #456]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006792:	4a70      	ldr	r2, [pc, #448]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006798:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800679a:	2380      	movs	r3, #128	@ 0x80
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	e024      	b.n	80067ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d107      	bne.n	80067b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d109      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e0c6      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067b8:	4b66      	ldr	r3, [pc, #408]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e0be      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80067c8:	f000 f8ce 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 80067cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	4a61      	ldr	r2, [pc, #388]	@ (8006958 <HAL_RCC_ClockConfig+0x268>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d909      	bls.n	80067ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80067d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067de:	4a5d      	ldr	r2, [pc, #372]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80067e6:	2380      	movs	r3, #128	@ 0x80
 80067e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80067ea:	4b5a      	ldr	r3, [pc, #360]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f023 0203 	bic.w	r2, r3, #3
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	4957      	ldr	r1, [pc, #348]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067fc:	f7fb faf4 	bl	8001de8 <HAL_GetTick>
 8006800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006802:	e00a      	b.n	800681a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006804:	f7fb faf0 	bl	8001de8 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e095      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681a:	4b4e      	ldr	r3, [pc, #312]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f003 020c 	and.w	r2, r3, #12
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	429a      	cmp	r2, r3
 800682a:	d1eb      	bne.n	8006804 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0302 	and.w	r3, r3, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d023      	beq.n	8006880 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006844:	4b43      	ldr	r3, [pc, #268]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4a42      	ldr	r2, [pc, #264]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800684a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800684e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800685c:	4b3d      	ldr	r3, [pc, #244]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006864:	4a3b      	ldr	r2, [pc, #236]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800686a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800686c:	4b39      	ldr	r3, [pc, #228]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	4936      	ldr	r1, [pc, #216]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800687a:	4313      	orrs	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
 800687e:	e008      	b.n	8006892 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b80      	cmp	r3, #128	@ 0x80
 8006884:	d105      	bne.n	8006892 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006886:	4b33      	ldr	r3, [pc, #204]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4a32      	ldr	r2, [pc, #200]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 800688c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006890:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006892:	4b2f      	ldr	r3, [pc, #188]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 030f 	and.w	r3, r3, #15
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d21d      	bcs.n	80068dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f023 020f 	bic.w	r2, r3, #15
 80068a8:	4929      	ldr	r1, [pc, #164]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80068b0:	f7fb fa9a 	bl	8001de8 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068b6:	e00a      	b.n	80068ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068b8:	f7fb fa96 	bl	8001de8 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e03b      	b.n	8006946 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ce:	4b20      	ldr	r3, [pc, #128]	@ (8006950 <HAL_RCC_ClockConfig+0x260>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d1ed      	bne.n	80068b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	4917      	ldr	r1, [pc, #92]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d009      	beq.n	800691a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006906:	4b13      	ldr	r3, [pc, #76]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	490f      	ldr	r1, [pc, #60]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006916:	4313      	orrs	r3, r2
 8006918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800691a:	f000 f825 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 800691e:	4602      	mov	r2, r0
 8006920:	4b0c      	ldr	r3, [pc, #48]	@ (8006954 <HAL_RCC_ClockConfig+0x264>)
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	091b      	lsrs	r3, r3, #4
 8006926:	f003 030f 	and.w	r3, r3, #15
 800692a:	490c      	ldr	r1, [pc, #48]	@ (800695c <HAL_RCC_ClockConfig+0x26c>)
 800692c:	5ccb      	ldrb	r3, [r1, r3]
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	fa22 f303 	lsr.w	r3, r2, r3
 8006936:	4a0a      	ldr	r2, [pc, #40]	@ (8006960 <HAL_RCC_ClockConfig+0x270>)
 8006938:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800693a:	4b0a      	ldr	r3, [pc, #40]	@ (8006964 <HAL_RCC_ClockConfig+0x274>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4618      	mov	r0, r3
 8006940:	f7fb fa06 	bl	8001d50 <HAL_InitTick>
 8006944:	4603      	mov	r3, r0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	40022000 	.word	0x40022000
 8006954:	40021000 	.word	0x40021000
 8006958:	04c4b400 	.word	0x04c4b400
 800695c:	0800d2c0 	.word	0x0800d2c0
 8006960:	20000000 	.word	0x20000000
 8006964:	20000004 	.word	0x20000004

08006968 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006968:	b480      	push	{r7}
 800696a:	b087      	sub	sp, #28
 800696c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800696e:	4b2c      	ldr	r3, [pc, #176]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 030c 	and.w	r3, r3, #12
 8006976:	2b04      	cmp	r3, #4
 8006978:	d102      	bne.n	8006980 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800697a:	4b2a      	ldr	r3, [pc, #168]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800697c:	613b      	str	r3, [r7, #16]
 800697e:	e047      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006980:	4b27      	ldr	r3, [pc, #156]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 030c 	and.w	r3, r3, #12
 8006988:	2b08      	cmp	r3, #8
 800698a:	d102      	bne.n	8006992 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800698c:	4b26      	ldr	r3, [pc, #152]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	e03e      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006992:	4b23      	ldr	r3, [pc, #140]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
 800699a:	2b0c      	cmp	r3, #12
 800699c:	d136      	bne.n	8006a0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800699e:	4b20      	ldr	r3, [pc, #128]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80069a8:	4b1d      	ldr	r3, [pc, #116]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	3301      	adds	r3, #1
 80069b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2b03      	cmp	r3, #3
 80069ba:	d10c      	bne.n	80069d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069bc:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <HAL_RCC_GetSysClockFreq+0xc0>)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	4a16      	ldr	r2, [pc, #88]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069c6:	68d2      	ldr	r2, [r2, #12]
 80069c8:	0a12      	lsrs	r2, r2, #8
 80069ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	617b      	str	r3, [r7, #20]
      break;
 80069d4:	e00c      	b.n	80069f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80069d6:	4a13      	ldr	r2, [pc, #76]	@ (8006a24 <HAL_RCC_GetSysClockFreq+0xbc>)
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	fbb2 f3f3 	udiv	r3, r2, r3
 80069de:	4a10      	ldr	r2, [pc, #64]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069e0:	68d2      	ldr	r2, [r2, #12]
 80069e2:	0a12      	lsrs	r2, r2, #8
 80069e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80069e8:	fb02 f303 	mul.w	r3, r2, r3
 80069ec:	617b      	str	r3, [r7, #20]
      break;
 80069ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80069f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006a20 <HAL_RCC_GetSysClockFreq+0xb8>)
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	0e5b      	lsrs	r3, r3, #25
 80069f6:	f003 0303 	and.w	r3, r3, #3
 80069fa:	3301      	adds	r3, #1
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006a00:	697a      	ldr	r2, [r7, #20]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	e001      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006a10:	693b      	ldr	r3, [r7, #16]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	371c      	adds	r7, #28
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	40021000 	.word	0x40021000
 8006a24:	00f42400 	.word	0x00f42400
 8006a28:	007a1200 	.word	0x007a1200

08006a2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a30:	4b03      	ldr	r3, [pc, #12]	@ (8006a40 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a32:	681b      	ldr	r3, [r3, #0]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20000000 	.word	0x20000000

08006a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006a48:	f7ff fff0 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f003 0307 	and.w	r3, r3, #7
 8006a58:	4904      	ldr	r1, [pc, #16]	@ (8006a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	40021000 	.word	0x40021000
 8006a6c:	0800d2d0 	.word	0x0800d2d0

08006a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006a74:	f7ff ffda 	bl	8006a2c <HAL_RCC_GetHCLKFreq>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	0adb      	lsrs	r3, r3, #11
 8006a80:	f003 0307 	and.w	r3, r3, #7
 8006a84:	4904      	ldr	r1, [pc, #16]	@ (8006a98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a86:	5ccb      	ldrb	r3, [r1, r3]
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40021000 	.word	0x40021000
 8006a98:	0800d2d0 	.word	0x0800d2d0

08006a9c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006aac:	4b1b      	ldr	r3, [pc, #108]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	091b      	lsrs	r3, r3, #4
 8006ab2:	f003 030f 	and.w	r3, r3, #15
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b03      	cmp	r3, #3
 8006abe:	d10c      	bne.n	8006ada <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ac0:	4a17      	ldr	r2, [pc, #92]	@ (8006b20 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac8:	4a14      	ldr	r2, [pc, #80]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006aca:	68d2      	ldr	r2, [r2, #12]
 8006acc:	0a12      	lsrs	r2, r2, #8
 8006ace:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ad2:	fb02 f303 	mul.w	r3, r2, r3
 8006ad6:	617b      	str	r3, [r7, #20]
    break;
 8006ad8:	e00c      	b.n	8006af4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ada:	4a12      	ldr	r2, [pc, #72]	@ (8006b24 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ae4:	68d2      	ldr	r2, [r2, #12]
 8006ae6:	0a12      	lsrs	r2, r2, #8
 8006ae8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006aec:	fb02 f303 	mul.w	r3, r2, r3
 8006af0:	617b      	str	r3, [r7, #20]
    break;
 8006af2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006af4:	4b09      	ldr	r3, [pc, #36]	@ (8006b1c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	0e5b      	lsrs	r3, r3, #25
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	3301      	adds	r3, #1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006b0e:	687b      	ldr	r3, [r7, #4]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40021000 	.word	0x40021000
 8006b20:	007a1200 	.word	0x007a1200
 8006b24:	00f42400 	.word	0x00f42400

08006b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b086      	sub	sp, #24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b30:	2300      	movs	r3, #0
 8006b32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b34:	2300      	movs	r3, #0
 8006b36:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 8098 	beq.w	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b46:	2300      	movs	r3, #0
 8006b48:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4a:	4b43      	ldr	r3, [pc, #268]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10d      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b56:	4b40      	ldr	r3, [pc, #256]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b5a:	4a3f      	ldr	r2, [pc, #252]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b62:	4b3d      	ldr	r3, [pc, #244]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b72:	4b3a      	ldr	r3, [pc, #232]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a39      	ldr	r2, [pc, #228]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b7e:	f7fb f933 	bl	8001de8 <HAL_GetTick>
 8006b82:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b84:	e009      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b86:	f7fb f92f 	bl	8001de8 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d902      	bls.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	74fb      	strb	r3, [r7, #19]
        break;
 8006b98:	e005      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b9a:	4b30      	ldr	r3, [pc, #192]	@ (8006c5c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0ef      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ba6:	7cfb      	ldrb	r3, [r7, #19]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d159      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006bac:	4b2a      	ldr	r3, [pc, #168]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bb6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01e      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d019      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006bc8:	4b23      	ldr	r3, [pc, #140]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bd4:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bda:	4a1f      	ldr	r2, [pc, #124]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006be4:	4b1c      	ldr	r3, [pc, #112]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bea:	4a1b      	ldr	r2, [pc, #108]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006bf4:	4a18      	ldr	r2, [pc, #96]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d016      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c06:	f7fb f8ef 	bl	8001de8 <HAL_GetTick>
 8006c0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c0c:	e00b      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c0e:	f7fb f8eb 	bl	8001de8 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d902      	bls.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	74fb      	strb	r3, [r7, #19]
            break;
 8006c24:	e006      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c26:	4b0c      	ldr	r3, [pc, #48]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c2c:	f003 0302 	and.w	r3, r3, #2
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0ec      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006c34:	7cfb      	ldrb	r3, [r7, #19]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10b      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c3a:	4b07      	ldr	r3, [pc, #28]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c48:	4903      	ldr	r1, [pc, #12]	@ (8006c58 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006c50:	e008      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c52:	7cfb      	ldrb	r3, [r7, #19]
 8006c54:	74bb      	strb	r3, [r7, #18]
 8006c56:	e005      	b.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c60:	7cfb      	ldrb	r3, [r7, #19]
 8006c62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c64:	7c7b      	ldrb	r3, [r7, #17]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d105      	bne.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c6a:	4ba6      	ldr	r3, [pc, #664]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6e:	4aa5      	ldr	r2, [pc, #660]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c74:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006c82:	4ba0      	ldr	r3, [pc, #640]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c88:	f023 0203 	bic.w	r2, r3, #3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	499c      	ldr	r1, [pc, #624]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ca4:	4b97      	ldr	r3, [pc, #604]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006caa:	f023 020c 	bic.w	r2, r3, #12
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	4994      	ldr	r1, [pc, #592]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006cc6:	4b8f      	ldr	r3, [pc, #572]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ccc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	498b      	ldr	r1, [pc, #556]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00a      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006ce8:	4b86      	ldr	r3, [pc, #536]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	4983      	ldr	r1, [pc, #524]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0320 	and.w	r3, r3, #32
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00a      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006d0a:	4b7e      	ldr	r3, [pc, #504]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d10:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	695b      	ldr	r3, [r3, #20]
 8006d18:	497a      	ldr	r1, [pc, #488]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d2c:	4b75      	ldr	r3, [pc, #468]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d32:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	4972      	ldr	r1, [pc, #456]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	4969      	ldr	r1, [pc, #420]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006d70:	4b64      	ldr	r3, [pc, #400]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d76:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	4961      	ldr	r1, [pc, #388]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d80:	4313      	orrs	r3, r2
 8006d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00a      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006d92:	4b5c      	ldr	r3, [pc, #368]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d98:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da0:	4958      	ldr	r1, [pc, #352]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d015      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006db4:	4b53      	ldr	r3, [pc, #332]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc2:	4950      	ldr	r1, [pc, #320]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dd2:	d105      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	4a4a      	ldr	r2, [pc, #296]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dde:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d015      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006dec:	4b45      	ldr	r3, [pc, #276]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006df2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	4942      	ldr	r1, [pc, #264]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006e0a:	d105      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4a3c      	ldr	r2, [pc, #240]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e16:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d015      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e24:	4b37      	ldr	r3, [pc, #220]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e32:	4934      	ldr	r1, [pc, #208]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e42:	d105      	bne.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e44:	4b2f      	ldr	r3, [pc, #188]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	4a2e      	ldr	r2, [pc, #184]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e4e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d015      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e5c:	4b29      	ldr	r3, [pc, #164]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e62:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e6a:	4926      	ldr	r1, [pc, #152]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e7a:	d105      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e7c:	4b21      	ldr	r3, [pc, #132]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	4a20      	ldr	r2, [pc, #128]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e86:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d015      	beq.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006e94:	4b1b      	ldr	r3, [pc, #108]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea2:	4918      	ldr	r1, [pc, #96]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006eb2:	d105      	bne.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006eb4:	4b13      	ldr	r3, [pc, #76]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	4a12      	ldr	r2, [pc, #72]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ebe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eda:	490a      	ldr	r1, [pc, #40]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006eea:	d105      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006eec:	4b05      	ldr	r3, [pc, #20]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	4a04      	ldr	r2, [pc, #16]	@ (8006f04 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006ef8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3718      	adds	r7, #24
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40021000 	.word	0x40021000

08006f08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d070      	beq.n	8006ffc <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fa fc7e 	bl	8001830 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f003 0310 	and.w	r3, r3, #16
 8006f46:	2b10      	cmp	r3, #16
 8006f48:	d04f      	beq.n	8006fea <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	22ca      	movs	r2, #202	@ 0xca
 8006f50:	625a      	str	r2, [r3, #36]	@ 0x24
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2253      	movs	r2, #83	@ 0x53
 8006f58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f878 	bl	8007050 <RTC_EnterInitMode>
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d126      	bne.n	8006fb8 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006f78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f7c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6999      	ldr	r1, [r3, #24]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	68d9      	ldr	r1, [r3, #12]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	041a      	lsls	r2, r3, #16
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f000 f884 	bl	80070bc <RTC_ExitInitMode>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d110      	bne.n	8006fe0 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	22ff      	movs	r2, #255	@ 0xff
 8006fe6:	625a      	str	r2, [r3, #36]	@ 0x24
 8006fe8:	e001      	b.n	8006fee <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006fee:	7bfb      	ldrb	r3, [r7, #15]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a0d      	ldr	r2, [pc, #52]	@ (800704c <HAL_RTC_WaitForSynchro+0x44>)
 8007016:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007018:	f7fa fee6 	bl	8001de8 <HAL_GetTick>
 800701c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800701e:	e009      	b.n	8007034 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007020:	f7fa fee2 	bl	8001de8 <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800702e:	d901      	bls.n	8007034 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e007      	b.n	8007044 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0320 	and.w	r3, r3, #32
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0ee      	beq.n	8007020 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	0001005f 	.word	0x0001005f

08007050 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d123      	bne.n	80070b2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68da      	ldr	r2, [r3, #12]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007078:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800707a:	f7fa feb5 	bl	8001de8 <HAL_GetTick>
 800707e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007080:	e00d      	b.n	800709e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007082:	f7fa feb1 	bl	8001de8 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007090:	d905      	bls.n	800709e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2203      	movs	r2, #3
 800709a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d102      	bne.n	80070b2 <RTC_EnterInitMode+0x62>
 80070ac:	7bfb      	ldrb	r3, [r7, #15]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d1e7      	bne.n	8007082 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c4:	2300      	movs	r3, #0
 80070c6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070d6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f003 0320 	and.w	r3, r3, #32
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10c      	bne.n	8007100 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff ff8e 	bl	8007008 <HAL_RTC_WaitForSynchro>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d022      	beq.n	8007138 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2203      	movs	r2, #3
 80070f6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	73fb      	strb	r3, [r7, #15]
 80070fe:	e01b      	b.n	8007138 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0220 	bic.w	r2, r2, #32
 800710e:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff ff79 	bl	8007008 <HAL_RTC_WaitForSynchro>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2203      	movs	r2, #3
 8007120:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	699a      	ldr	r2, [r3, #24]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f042 0220 	orr.w	r2, r2, #32
 8007136:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b086      	sub	sp, #24
 8007146:	af00      	add	r7, sp, #0
 8007148:	60f8      	str	r0, [r7, #12]
 800714a:	60b9      	str	r1, [r7, #8]
 800714c:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8007158:	2302      	movs	r3, #2
 800715a:	e062      	b.n	8007222 <HAL_RTCEx_SetWakeUpTimer+0xe0>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2202      	movs	r2, #2
 8007168:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	22ca      	movs	r2, #202	@ 0xca
 8007172:	625a      	str	r2, [r3, #36]	@ 0x24
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2253      	movs	r2, #83	@ 0x53
 800717a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800718a:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d120      	bne.n	80071dc <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 800719a:	f7fa fe25 	bl	8001de8 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80071a0:	e015      	b.n	80071ce <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071a2:	f7fa fe21 	bl	8001de8 <HAL_GetTick>
 80071a6:	4602      	mov	r2, r0
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	1ad3      	subs	r3, r2, r3
 80071ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071b0:	d90d      	bls.n	80071ce <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	22ff      	movs	r2, #255	@ 0xff
 80071b8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2203      	movs	r2, #3
 80071be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e029      	b.n	8007222 <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0304 	and.w	r3, r3, #4
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d0e2      	beq.n	80071a2 <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	f023 0107 	bic.w	r1, r3, #7
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007206:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	22ff      	movs	r2, #255	@ 0xff
 800720e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3718      	adds	r7, #24
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b084      	sub	sp, #16
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e09d      	b.n	8007378 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	2b00      	cmp	r3, #0
 8007242:	d108      	bne.n	8007256 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800724c:	d009      	beq.n	8007262 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2200      	movs	r2, #0
 8007252:	61da      	str	r2, [r3, #28]
 8007254:	e005      	b.n	8007262 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fa fb51 	bl	8001924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2202      	movs	r2, #2
 8007286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007298:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072a2:	d902      	bls.n	80072aa <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e002      	b.n	80072b0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80072aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80072ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80072b8:	d007      	beq.n	80072ca <HAL_SPI_Init+0xa0>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80072c2:	d002      	beq.n	80072ca <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	f003 0302 	and.w	r3, r3, #2
 80072e4:	431a      	orrs	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	431a      	orrs	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	699b      	ldr	r3, [r3, #24]
 80072f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072f8:	431a      	orrs	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007302:	431a      	orrs	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800730c:	ea42 0103 	orr.w	r1, r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	f003 0204 	and.w	r2, r3, #4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800732e:	f003 0310 	and.w	r3, r3, #16
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007338:	f003 0308 	and.w	r3, r3, #8
 800733c:	431a      	orrs	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007346:	ea42 0103 	orr.w	r1, r2, r3
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	69da      	ldr	r2, [r3, #28]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007366:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	603b      	str	r3, [r7, #0]
 800738c:	4613      	mov	r3, r2
 800738e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Transmit+0x22>
 800739e:	2302      	movs	r3, #2
 80073a0:	e15f      	b.n	8007662 <HAL_SPI_Transmit+0x2e2>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073aa:	f7fa fd1d 	bl	8001de8 <HAL_GetTick>
 80073ae:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d002      	beq.n	80073c6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80073c0:	2302      	movs	r3, #2
 80073c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073c4:	e148      	b.n	8007658 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_SPI_Transmit+0x52>
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d102      	bne.n	80073d8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80073d6:	e13f      	b.n	8007658 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2203      	movs	r2, #3
 80073dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	88fa      	ldrh	r2, [r7, #6]
 80073f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2200      	movs	r2, #0
 8007412:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007422:	d10f      	bne.n	8007444 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007432:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007442:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744e:	2b40      	cmp	r3, #64	@ 0x40
 8007450:	d007      	beq.n	8007462 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007460:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	68db      	ldr	r3, [r3, #12]
 8007466:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800746a:	d94f      	bls.n	800750c <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_SPI_Transmit+0xfa>
 8007474:	8afb      	ldrh	r3, [r7, #22]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d142      	bne.n	8007500 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747e:	881a      	ldrh	r2, [r3, #0]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748a:	1c9a      	adds	r2, r3, #2
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007494:	b29b      	uxth	r3, r3
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800749e:	e02f      	b.n	8007500 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d112      	bne.n	80074d4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	881a      	ldrh	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	1c9a      	adds	r2, r3, #2
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80074d2:	e015      	b.n	8007500 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074d4:	f7fa fc88 	bl	8001de8 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	69bb      	ldr	r3, [r7, #24]
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d803      	bhi.n	80074ec <HAL_SPI_Transmit+0x16c>
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ea:	d102      	bne.n	80074f2 <HAL_SPI_Transmit+0x172>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d106      	bne.n	8007500 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 80074fe:	e0ab      	b.n	8007658 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1ca      	bne.n	80074a0 <HAL_SPI_Transmit+0x120>
 800750a:	e080      	b.n	800760e <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d002      	beq.n	800751a <HAL_SPI_Transmit+0x19a>
 8007514:	8afb      	ldrh	r3, [r7, #22]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d174      	bne.n	8007604 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800751e:	b29b      	uxth	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d912      	bls.n	800754a <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007528:	881a      	ldrh	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	1c9a      	adds	r2, r3, #2
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800753e:	b29b      	uxth	r3, r3
 8007540:	3b02      	subs	r3, #2
 8007542:	b29a      	uxth	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007548:	e05c      	b.n	8007604 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	330c      	adds	r3, #12
 8007554:	7812      	ldrb	r2, [r2, #0]
 8007556:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007570:	e048      	b.n	8007604 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 0302 	and.w	r3, r3, #2
 800757c:	2b02      	cmp	r3, #2
 800757e:	d12b      	bne.n	80075d8 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b01      	cmp	r3, #1
 8007588:	d912      	bls.n	80075b0 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758e:	881a      	ldrh	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800759a:	1c9a      	adds	r2, r3, #2
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b02      	subs	r3, #2
 80075a8:	b29a      	uxth	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075ae:	e029      	b.n	8007604 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	330c      	adds	r3, #12
 80075ba:	7812      	ldrb	r2, [r2, #0]
 80075bc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075c2:	1c5a      	adds	r2, r3, #1
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80075d6:	e015      	b.n	8007604 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075d8:	f7fa fc06 	bl	8001de8 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d803      	bhi.n	80075f0 <HAL_SPI_Transmit+0x270>
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d102      	bne.n	80075f6 <HAL_SPI_Transmit+0x276>
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d106      	bne.n	8007604 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8007602:	e029      	b.n	8007658 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007608:	b29b      	uxth	r3, r3
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1b1      	bne.n	8007572 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800760e:	69ba      	ldr	r2, [r7, #24]
 8007610:	6839      	ldr	r1, [r7, #0]
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f948 	bl	80078a8 <SPI_EndRxTxTransaction>
 8007618:	4603      	mov	r3, r0
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	613b      	str	r3, [r7, #16]
 8007640:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	77fb      	strb	r3, [r7, #31]
 800764e:	e003      	b.n	8007658 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007660:	7ffb      	ldrb	r3, [r7, #31]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3720      	adds	r7, #32
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
	...

0800766c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800767c:	f7fa fbb4 	bl	8001de8 <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4413      	add	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800768c:	f7fa fbac 	bl	8001de8 <HAL_GetTick>
 8007690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007692:	4b39      	ldr	r3, [pc, #228]	@ (8007778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	015b      	lsls	r3, r3, #5
 8007698:	0d1b      	lsrs	r3, r3, #20
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	fb02 f303 	mul.w	r3, r2, r3
 80076a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076a2:	e054      	b.n	800774e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076aa:	d050      	beq.n	800774e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80076ac:	f7fa fb9c 	bl	8001de8 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	69bb      	ldr	r3, [r7, #24]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	69fa      	ldr	r2, [r7, #28]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d902      	bls.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d13d      	bne.n	800773e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80076d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076da:	d111      	bne.n	8007700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076e4:	d004      	beq.n	80076f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076ee:	d107      	bne.n	8007700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80076fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007708:	d10f      	bne.n	800772a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e017      	b.n	800776e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	3b01      	subs	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4013      	ands	r3, r2
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	429a      	cmp	r2, r3
 800775c:	bf0c      	ite	eq
 800775e:	2301      	moveq	r3, #1
 8007760:	2300      	movne	r3, #0
 8007762:	b2db      	uxtb	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	79fb      	ldrb	r3, [r7, #7]
 8007768:	429a      	cmp	r2, r3
 800776a:	d19b      	bne.n	80076a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000000 	.word	0x20000000

0800777c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b08a      	sub	sp, #40	@ 0x28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800778e:	f7fa fb2b 	bl	8001de8 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	1a9b      	subs	r3, r3, r2
 8007798:	683a      	ldr	r2, [r7, #0]
 800779a:	4413      	add	r3, r2
 800779c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800779e:	f7fa fb23 	bl	8001de8 <HAL_GetTick>
 80077a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	330c      	adds	r3, #12
 80077aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077ac:	4b3d      	ldr	r3, [pc, #244]	@ (80078a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80077ae:	681a      	ldr	r2, [r3, #0]
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	00da      	lsls	r2, r3, #3
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	0d1b      	lsrs	r3, r3, #20
 80077bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077be:	fb02 f303 	mul.w	r3, r2, r3
 80077c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077c4:	e060      	b.n	8007888 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80077cc:	d107      	bne.n	80077de <SPI_WaitFifoStateUntilTimeout+0x62>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d104      	bne.n	80077de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077e4:	d050      	beq.n	8007888 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077e6:	f7fa faff 	bl	8001de8 <HAL_GetTick>
 80077ea:	4602      	mov	r2, r0
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	1ad3      	subs	r3, r2, r3
 80077f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d902      	bls.n	80077fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d13d      	bne.n	8007878 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800780a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007814:	d111      	bne.n	800783a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800781e:	d004      	beq.n	800782a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007828:	d107      	bne.n	800783a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007838:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007842:	d10f      	bne.n	8007864 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007862:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e010      	b.n	800789a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007878:	69bb      	ldr	r3, [r7, #24]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800787e:	2300      	movs	r3, #0
 8007880:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	3b01      	subs	r3, #1
 8007886:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689a      	ldr	r2, [r3, #8]
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	4013      	ands	r3, r2
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	429a      	cmp	r2, r3
 8007896:	d196      	bne.n	80077c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3728      	adds	r7, #40	@ 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	20000000 	.word	0x20000000

080078a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f7ff ff5b 	bl	800777c <SPI_WaitFifoStateUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d007      	beq.n	80078dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078d0:	f043 0220 	orr.w	r2, r3, #32
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078d8:	2303      	movs	r3, #3
 80078da:	e027      	b.n	800792c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2200      	movs	r2, #0
 80078e4:	2180      	movs	r1, #128	@ 0x80
 80078e6:	68f8      	ldr	r0, [r7, #12]
 80078e8:	f7ff fec0 	bl	800766c <SPI_WaitFlagStateUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d007      	beq.n	8007902 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078f6:	f043 0220 	orr.w	r2, r3, #32
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80078fe:	2303      	movs	r3, #3
 8007900:	e014      	b.n	800792c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	2200      	movs	r2, #0
 800790a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f7ff ff34 	bl	800777c <SPI_WaitFifoStateUntilTimeout>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d007      	beq.n	800792a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791e:	f043 0220 	orr.w	r2, r3, #32
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e000      	b.n	800792c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e042      	b.n	80079cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800794c:	2b00      	cmp	r3, #0
 800794e:	d106      	bne.n	800795e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7fa f95d 	bl	8001c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2224      	movs	r2, #36	@ 0x24
 8007962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0201 	bic.w	r2, r2, #1
 8007974:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 faf4 	bl	8007f6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f825 	bl	80079d4 <UART_SetConfig>
 800798a:	4603      	mov	r3, r0
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e01b      	b.n	80079cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685a      	ldr	r2, [r3, #4]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80079b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fb73 	bl	80080b0 <UART_CheckIdleState>
 80079ca:	4603      	mov	r3, r0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d8:	b08c      	sub	sp, #48	@ 0x30
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	431a      	orrs	r2, r3
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	431a      	orrs	r2, r3
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	69db      	ldr	r3, [r3, #28]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4bab      	ldr	r3, [pc, #684]	@ (8007cb0 <UART_SetConfig+0x2dc>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	6812      	ldr	r2, [r2, #0]
 8007a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4aa0      	ldr	r2, [pc, #640]	@ (8007cb4 <UART_SetConfig+0x2e0>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d004      	beq.n	8007a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a4a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a4e:	697a      	ldr	r2, [r7, #20]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5e:	f023 010f 	bic.w	r1, r3, #15
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	430a      	orrs	r2, r1
 8007a6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a91      	ldr	r2, [pc, #580]	@ (8007cb8 <UART_SetConfig+0x2e4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d125      	bne.n	8007ac4 <UART_SetConfig+0xf0>
 8007a78:	4b90      	ldr	r3, [pc, #576]	@ (8007cbc <UART_SetConfig+0x2e8>)
 8007a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d81a      	bhi.n	8007abc <UART_SetConfig+0xe8>
 8007a86:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <UART_SetConfig+0xb8>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aad 	.word	0x08007aad
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007ab5 	.word	0x08007ab5
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aa2:	e0d6      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aaa:	e0d2      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007aac:	2304      	movs	r3, #4
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ab2:	e0ce      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007ab4:	2308      	movs	r3, #8
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aba:	e0ca      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007abc:	2310      	movs	r3, #16
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ac2:	e0c6      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a7d      	ldr	r2, [pc, #500]	@ (8007cc0 <UART_SetConfig+0x2ec>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d138      	bne.n	8007b40 <UART_SetConfig+0x16c>
 8007ace:	4b7b      	ldr	r3, [pc, #492]	@ (8007cbc <UART_SetConfig+0x2e8>)
 8007ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad4:	f003 030c 	and.w	r3, r3, #12
 8007ad8:	2b0c      	cmp	r3, #12
 8007ada:	d82d      	bhi.n	8007b38 <UART_SetConfig+0x164>
 8007adc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae4 <UART_SetConfig+0x110>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b19 	.word	0x08007b19
 8007ae8:	08007b39 	.word	0x08007b39
 8007aec:	08007b39 	.word	0x08007b39
 8007af0:	08007b39 	.word	0x08007b39
 8007af4:	08007b29 	.word	0x08007b29
 8007af8:	08007b39 	.word	0x08007b39
 8007afc:	08007b39 	.word	0x08007b39
 8007b00:	08007b39 	.word	0x08007b39
 8007b04:	08007b21 	.word	0x08007b21
 8007b08:	08007b39 	.word	0x08007b39
 8007b0c:	08007b39 	.word	0x08007b39
 8007b10:	08007b39 	.word	0x08007b39
 8007b14:	08007b31 	.word	0x08007b31
 8007b18:	2300      	movs	r3, #0
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b1e:	e098      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b20:	2302      	movs	r3, #2
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b26:	e094      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b28:	2304      	movs	r3, #4
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b2e:	e090      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b30:	2308      	movs	r3, #8
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b36:	e08c      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b38:	2310      	movs	r3, #16
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b3e:	e088      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a5f      	ldr	r2, [pc, #380]	@ (8007cc4 <UART_SetConfig+0x2f0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d125      	bne.n	8007b96 <UART_SetConfig+0x1c2>
 8007b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8007cbc <UART_SetConfig+0x2e8>)
 8007b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b54:	2b30      	cmp	r3, #48	@ 0x30
 8007b56:	d016      	beq.n	8007b86 <UART_SetConfig+0x1b2>
 8007b58:	2b30      	cmp	r3, #48	@ 0x30
 8007b5a:	d818      	bhi.n	8007b8e <UART_SetConfig+0x1ba>
 8007b5c:	2b20      	cmp	r3, #32
 8007b5e:	d00a      	beq.n	8007b76 <UART_SetConfig+0x1a2>
 8007b60:	2b20      	cmp	r3, #32
 8007b62:	d814      	bhi.n	8007b8e <UART_SetConfig+0x1ba>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <UART_SetConfig+0x19a>
 8007b68:	2b10      	cmp	r3, #16
 8007b6a:	d008      	beq.n	8007b7e <UART_SetConfig+0x1aa>
 8007b6c:	e00f      	b.n	8007b8e <UART_SetConfig+0x1ba>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b74:	e06d      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b76:	2302      	movs	r3, #2
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b7c:	e069      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b7e:	2304      	movs	r3, #4
 8007b80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b84:	e065      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b86:	2308      	movs	r3, #8
 8007b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b8c:	e061      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b8e:	2310      	movs	r3, #16
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b94:	e05d      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a4b      	ldr	r2, [pc, #300]	@ (8007cc8 <UART_SetConfig+0x2f4>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d125      	bne.n	8007bec <UART_SetConfig+0x218>
 8007ba0:	4b46      	ldr	r3, [pc, #280]	@ (8007cbc <UART_SetConfig+0x2e8>)
 8007ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ba6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007baa:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bac:	d016      	beq.n	8007bdc <UART_SetConfig+0x208>
 8007bae:	2bc0      	cmp	r3, #192	@ 0xc0
 8007bb0:	d818      	bhi.n	8007be4 <UART_SetConfig+0x210>
 8007bb2:	2b80      	cmp	r3, #128	@ 0x80
 8007bb4:	d00a      	beq.n	8007bcc <UART_SetConfig+0x1f8>
 8007bb6:	2b80      	cmp	r3, #128	@ 0x80
 8007bb8:	d814      	bhi.n	8007be4 <UART_SetConfig+0x210>
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <UART_SetConfig+0x1f0>
 8007bbe:	2b40      	cmp	r3, #64	@ 0x40
 8007bc0:	d008      	beq.n	8007bd4 <UART_SetConfig+0x200>
 8007bc2:	e00f      	b.n	8007be4 <UART_SetConfig+0x210>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bca:	e042      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bd2:	e03e      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007bd4:	2304      	movs	r3, #4
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bda:	e03a      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007bdc:	2308      	movs	r3, #8
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007be2:	e036      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007be4:	2310      	movs	r3, #16
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bea:	e032      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a30      	ldr	r2, [pc, #192]	@ (8007cb4 <UART_SetConfig+0x2e0>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d12a      	bne.n	8007c4c <UART_SetConfig+0x278>
 8007bf6:	4b31      	ldr	r3, [pc, #196]	@ (8007cbc <UART_SetConfig+0x2e8>)
 8007bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bfc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c04:	d01a      	beq.n	8007c3c <UART_SetConfig+0x268>
 8007c06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c0a:	d81b      	bhi.n	8007c44 <UART_SetConfig+0x270>
 8007c0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c10:	d00c      	beq.n	8007c2c <UART_SetConfig+0x258>
 8007c12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c16:	d815      	bhi.n	8007c44 <UART_SetConfig+0x270>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d003      	beq.n	8007c24 <UART_SetConfig+0x250>
 8007c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c20:	d008      	beq.n	8007c34 <UART_SetConfig+0x260>
 8007c22:	e00f      	b.n	8007c44 <UART_SetConfig+0x270>
 8007c24:	2300      	movs	r3, #0
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c2a:	e012      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c32:	e00e      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007c34:	2304      	movs	r3, #4
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c3a:	e00a      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007c3c:	2308      	movs	r3, #8
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c42:	e006      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007c44:	2310      	movs	r3, #16
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c4a:	e002      	b.n	8007c52 <UART_SetConfig+0x27e>
 8007c4c:	2310      	movs	r3, #16
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a17      	ldr	r2, [pc, #92]	@ (8007cb4 <UART_SetConfig+0x2e0>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	f040 80a8 	bne.w	8007dae <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c5e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c62:	2b08      	cmp	r3, #8
 8007c64:	d834      	bhi.n	8007cd0 <UART_SetConfig+0x2fc>
 8007c66:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <UART_SetConfig+0x298>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007cd1 	.word	0x08007cd1
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007cd1 	.word	0x08007cd1
 8007c7c:	08007c9f 	.word	0x08007c9f
 8007c80:	08007cd1 	.word	0x08007cd1
 8007c84:	08007cd1 	.word	0x08007cd1
 8007c88:	08007cd1 	.word	0x08007cd1
 8007c8c:	08007ca7 	.word	0x08007ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c90:	f7fe fed8 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 8007c94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c96:	e021      	b.n	8007cdc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c98:	4b0c      	ldr	r3, [pc, #48]	@ (8007ccc <UART_SetConfig+0x2f8>)
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c9c:	e01e      	b.n	8007cdc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c9e:	f7fe fe63 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 8007ca2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ca4:	e01a      	b.n	8007cdc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007caa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007cac:	e016      	b.n	8007cdc <UART_SetConfig+0x308>
 8007cae:	bf00      	nop
 8007cb0:	cfff69f3 	.word	0xcfff69f3
 8007cb4:	40008000 	.word	0x40008000
 8007cb8:	40013800 	.word	0x40013800
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	40004400 	.word	0x40004400
 8007cc4:	40004800 	.word	0x40004800
 8007cc8:	40004c00 	.word	0x40004c00
 8007ccc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007cda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 812a 	beq.w	8007f38 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	4a9e      	ldr	r2, [pc, #632]	@ (8007f64 <UART_SetConfig+0x590>)
 8007cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cee:	461a      	mov	r2, r3
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	4413      	add	r3, r2
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d305      	bcc.n	8007d14 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d0e:	69ba      	ldr	r2, [r7, #24]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d903      	bls.n	8007d1c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007d1a:	e10d      	b.n	8007f38 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1e:	2200      	movs	r2, #0
 8007d20:	60bb      	str	r3, [r7, #8]
 8007d22:	60fa      	str	r2, [r7, #12]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d28:	4a8e      	ldr	r2, [pc, #568]	@ (8007f64 <UART_SetConfig+0x590>)
 8007d2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	2200      	movs	r2, #0
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	607a      	str	r2, [r7, #4]
 8007d36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d3e:	f7f8 fe61 	bl	8000a04 <__aeabi_uldivmod>
 8007d42:	4602      	mov	r2, r0
 8007d44:	460b      	mov	r3, r1
 8007d46:	4610      	mov	r0, r2
 8007d48:	4619      	mov	r1, r3
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	020b      	lsls	r3, r1, #8
 8007d54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d58:	0202      	lsls	r2, r0, #8
 8007d5a:	6979      	ldr	r1, [r7, #20]
 8007d5c:	6849      	ldr	r1, [r1, #4]
 8007d5e:	0849      	lsrs	r1, r1, #1
 8007d60:	2000      	movs	r0, #0
 8007d62:	460c      	mov	r4, r1
 8007d64:	4605      	mov	r5, r0
 8007d66:	eb12 0804 	adds.w	r8, r2, r4
 8007d6a:	eb43 0905 	adc.w	r9, r3, r5
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2200      	movs	r2, #0
 8007d74:	469a      	mov	sl, r3
 8007d76:	4693      	mov	fp, r2
 8007d78:	4652      	mov	r2, sl
 8007d7a:	465b      	mov	r3, fp
 8007d7c:	4640      	mov	r0, r8
 8007d7e:	4649      	mov	r1, r9
 8007d80:	f7f8 fe40 	bl	8000a04 <__aeabi_uldivmod>
 8007d84:	4602      	mov	r2, r0
 8007d86:	460b      	mov	r3, r1
 8007d88:	4613      	mov	r3, r2
 8007d8a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d8c:	6a3b      	ldr	r3, [r7, #32]
 8007d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d92:	d308      	bcc.n	8007da6 <UART_SetConfig+0x3d2>
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d9a:	d204      	bcs.n	8007da6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6a3a      	ldr	r2, [r7, #32]
 8007da2:	60da      	str	r2, [r3, #12]
 8007da4:	e0c8      	b.n	8007f38 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dac:	e0c4      	b.n	8007f38 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	69db      	ldr	r3, [r3, #28]
 8007db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007db6:	d167      	bne.n	8007e88 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007db8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007dbc:	2b08      	cmp	r3, #8
 8007dbe:	d828      	bhi.n	8007e12 <UART_SetConfig+0x43e>
 8007dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <UART_SetConfig+0x3f4>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007ded 	.word	0x08007ded
 8007dcc:	08007df5 	.word	0x08007df5
 8007dd0:	08007dfd 	.word	0x08007dfd
 8007dd4:	08007e13 	.word	0x08007e13
 8007dd8:	08007e03 	.word	0x08007e03
 8007ddc:	08007e13 	.word	0x08007e13
 8007de0:	08007e13 	.word	0x08007e13
 8007de4:	08007e13 	.word	0x08007e13
 8007de8:	08007e0b 	.word	0x08007e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dec:	f7fe fe2a 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 8007df0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007df2:	e014      	b.n	8007e1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007df4:	f7fe fe3c 	bl	8006a70 <HAL_RCC_GetPCLK2Freq>
 8007df8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007dfa:	e010      	b.n	8007e1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8007f68 <UART_SetConfig+0x594>)
 8007dfe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e00:	e00d      	b.n	8007e1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e02:	f7fe fdb1 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 8007e06:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e08:	e009      	b.n	8007e1e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e10:	e005      	b.n	8007e1e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007e12:	2300      	movs	r3, #0
 8007e14:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8089 	beq.w	8007f38 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2a:	4a4e      	ldr	r2, [pc, #312]	@ (8007f64 <UART_SetConfig+0x590>)
 8007e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e38:	005a      	lsls	r2, r3, #1
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	441a      	add	r2, r3
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e4c:	6a3b      	ldr	r3, [r7, #32]
 8007e4e:	2b0f      	cmp	r3, #15
 8007e50:	d916      	bls.n	8007e80 <UART_SetConfig+0x4ac>
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e58:	d212      	bcs.n	8007e80 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f023 030f 	bic.w	r3, r3, #15
 8007e62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	085b      	lsrs	r3, r3, #1
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f003 0307 	and.w	r3, r3, #7
 8007e6e:	b29a      	uxth	r2, r3
 8007e70:	8bfb      	ldrh	r3, [r7, #30]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	8bfa      	ldrh	r2, [r7, #30]
 8007e7c:	60da      	str	r2, [r3, #12]
 8007e7e:	e05b      	b.n	8007f38 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e86:	e057      	b.n	8007f38 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e88:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	d828      	bhi.n	8007ee2 <UART_SetConfig+0x50e>
 8007e90:	a201      	add	r2, pc, #4	@ (adr r2, 8007e98 <UART_SetConfig+0x4c4>)
 8007e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e96:	bf00      	nop
 8007e98:	08007ebd 	.word	0x08007ebd
 8007e9c:	08007ec5 	.word	0x08007ec5
 8007ea0:	08007ecd 	.word	0x08007ecd
 8007ea4:	08007ee3 	.word	0x08007ee3
 8007ea8:	08007ed3 	.word	0x08007ed3
 8007eac:	08007ee3 	.word	0x08007ee3
 8007eb0:	08007ee3 	.word	0x08007ee3
 8007eb4:	08007ee3 	.word	0x08007ee3
 8007eb8:	08007edb 	.word	0x08007edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ebc:	f7fe fdc2 	bl	8006a44 <HAL_RCC_GetPCLK1Freq>
 8007ec0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ec2:	e014      	b.n	8007eee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ec4:	f7fe fdd4 	bl	8006a70 <HAL_RCC_GetPCLK2Freq>
 8007ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007eca:	e010      	b.n	8007eee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ecc:	4b26      	ldr	r3, [pc, #152]	@ (8007f68 <UART_SetConfig+0x594>)
 8007ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ed0:	e00d      	b.n	8007eee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ed2:	f7fe fd49 	bl	8006968 <HAL_RCC_GetSysClockFreq>
 8007ed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ed8:	e009      	b.n	8007eee <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ee0:	e005      	b.n	8007eee <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007eec:	bf00      	nop
    }

    if (pclk != 0U)
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d021      	beq.n	8007f38 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8007f64 <UART_SetConfig+0x590>)
 8007efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007efe:	461a      	mov	r2, r3
 8007f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	085b      	lsrs	r3, r3, #1
 8007f0c:	441a      	add	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	2b0f      	cmp	r3, #15
 8007f1c:	d909      	bls.n	8007f32 <UART_SetConfig+0x55e>
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f24:	d205      	bcs.n	8007f32 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60da      	str	r2, [r3, #12]
 8007f30:	e002      	b.n	8007f38 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2200      	movs	r2, #0
 8007f52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007f54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3730      	adds	r7, #48	@ 0x30
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f62:	bf00      	nop
 8007f64:	0800d2d8 	.word	0x0800d2d8
 8007f68:	00f42400 	.word	0x00f42400

08007f6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00a      	beq.n	8007fda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fde:	f003 0304 	and.w	r3, r3, #4
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00a      	beq.n	8007ffc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008000:	f003 0310 	and.w	r3, r3, #16
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00a      	beq.n	800801e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008048:	2b00      	cmp	r3, #0
 800804a:	d01a      	beq.n	8008082 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008066:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800806a:	d10a      	bne.n	8008082 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	430a      	orrs	r2, r1
 8008080:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00a      	beq.n	80080a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	430a      	orrs	r2, r1
 80080a2:	605a      	str	r2, [r3, #4]
  }
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b098      	sub	sp, #96	@ 0x60
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080c0:	f7f9 fe92 	bl	8001de8 <HAL_GetTick>
 80080c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0308 	and.w	r3, r3, #8
 80080d0:	2b08      	cmp	r3, #8
 80080d2:	d12f      	bne.n	8008134 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080dc:	2200      	movs	r2, #0
 80080de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f88e 	bl	8008204 <UART_WaitOnFlagUntilTimeout>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d022      	beq.n	8008134 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80080fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008102:	653b      	str	r3, [r7, #80]	@ 0x50
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800810c:	647b      	str	r3, [r7, #68]	@ 0x44
 800810e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008112:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800811a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e6      	bne.n	80080ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e063      	b.n	80081fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b04      	cmp	r3, #4
 8008140:	d149      	bne.n	80081d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008142:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800814a:	2200      	movs	r2, #0
 800814c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 f857 	bl	8008204 <UART_WaitOnFlagUntilTimeout>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d03c      	beq.n	80081d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	623b      	str	r3, [r7, #32]
   return(result);
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008170:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800817a:	633b      	str	r3, [r7, #48]	@ 0x30
 800817c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008180:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	60fb      	str	r3, [r7, #12]
   return(result);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081ae:	61fa      	str	r2, [r7, #28]
 80081b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	69b9      	ldr	r1, [r7, #24]
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	617b      	str	r3, [r7, #20]
   return(result);
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2220      	movs	r2, #32
 80081c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081d2:	2303      	movs	r3, #3
 80081d4:	e012      	b.n	80081fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2220      	movs	r2, #32
 80081e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3758      	adds	r7, #88	@ 0x58
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	4613      	mov	r3, r2
 8008212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008214:	e04f      	b.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821c:	d04b      	beq.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800821e:	f7f9 fde3 	bl	8001de8 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	429a      	cmp	r2, r3
 800822c:	d302      	bcc.n	8008234 <UART_WaitOnFlagUntilTimeout+0x30>
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008234:	2303      	movs	r3, #3
 8008236:	e04e      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0304 	and.w	r3, r3, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d037      	beq.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b80      	cmp	r3, #128	@ 0x80
 800824a:	d034      	beq.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b40      	cmp	r3, #64	@ 0x40
 8008250:	d031      	beq.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b08      	cmp	r3, #8
 800825e:	d110      	bne.n	8008282 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2208      	movs	r2, #8
 8008266:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 f838 	bl	80082de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2208      	movs	r2, #8
 8008272:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e029      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800828c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008290:	d111      	bne.n	80082b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800829a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 f81e 	bl	80082de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2220      	movs	r2, #32
 80082a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e00f      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	69da      	ldr	r2, [r3, #28]
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	4013      	ands	r3, r2
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	bf0c      	ite	eq
 80082c6:	2301      	moveq	r3, #1
 80082c8:	2300      	movne	r3, #0
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	79fb      	ldrb	r3, [r7, #7]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d0a0      	beq.n	8008216 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082de:	b480      	push	{r7}
 80082e0:	b095      	sub	sp, #84	@ 0x54
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ee:	e853 3f00 	ldrex	r3, [r3]
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	461a      	mov	r2, r3
 8008302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008304:	643b      	str	r3, [r7, #64]	@ 0x40
 8008306:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008308:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800830a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800830c:	e841 2300 	strex	r3, r2, [r1]
 8008310:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1e6      	bne.n	80082e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3308      	adds	r3, #8
 800831e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	e853 3f00 	ldrex	r3, [r3]
 8008326:	61fb      	str	r3, [r7, #28]
   return(result);
 8008328:	69fb      	ldr	r3, [r7, #28]
 800832a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	3308      	adds	r3, #8
 800833a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800833c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800833e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008340:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008342:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008344:	e841 2300 	strex	r3, r2, [r1]
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	2b00      	cmp	r3, #0
 800834e:	d1e3      	bne.n	8008318 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d118      	bne.n	800838a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	60bb      	str	r3, [r7, #8]
   return(result);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f023 0310 	bic.w	r3, r3, #16
 800836c:	647b      	str	r3, [r7, #68]	@ 0x44
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	461a      	mov	r2, r3
 8008374:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008376:	61bb      	str	r3, [r7, #24]
 8008378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837a:	6979      	ldr	r1, [r7, #20]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	e841 2300 	strex	r3, r2, [r1]
 8008382:	613b      	str	r3, [r7, #16]
   return(result);
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d1e6      	bne.n	8008358 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2220      	movs	r2, #32
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800839e:	bf00      	nop
 80083a0:	3754      	adds	r7, #84	@ 0x54
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_UARTEx_DisableFifoMode+0x16>
 80083bc:	2302      	movs	r3, #2
 80083be:	e027      	b.n	8008410 <HAL_UARTEx_DisableFifoMode+0x66>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2224      	movs	r2, #36	@ 0x24
 80083cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f022 0201 	bic.w	r2, r2, #1
 80083e6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80083ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2200      	movs	r2, #0
 800840a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800842c:	2b01      	cmp	r3, #1
 800842e:	d101      	bne.n	8008434 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008430:	2302      	movs	r3, #2
 8008432:	e02d      	b.n	8008490 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2224      	movs	r2, #36	@ 0x24
 8008440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f022 0201 	bic.w	r2, r2, #1
 800845a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	683a      	ldr	r2, [r7, #0]
 800846c:	430a      	orrs	r2, r1
 800846e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f000 f84f 	bl	8008514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2220      	movs	r2, #32
 8008482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e02d      	b.n	800850c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2224      	movs	r2, #36	@ 0x24
 80084bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0201 	bic.w	r2, r2, #1
 80084d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	430a      	orrs	r2, r1
 80084ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f811 	bl	8008514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008520:	2b00      	cmp	r3, #0
 8008522:	d108      	bne.n	8008536 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008534:	e031      	b.n	800859a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008536:	2308      	movs	r3, #8
 8008538:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800853a:	2308      	movs	r3, #8
 800853c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	0e5b      	lsrs	r3, r3, #25
 8008546:	b2db      	uxtb	r3, r3
 8008548:	f003 0307 	and.w	r3, r3, #7
 800854c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	0f5b      	lsrs	r3, r3, #29
 8008556:	b2db      	uxtb	r3, r3
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800855e:	7bbb      	ldrb	r3, [r7, #14]
 8008560:	7b3a      	ldrb	r2, [r7, #12]
 8008562:	4911      	ldr	r1, [pc, #68]	@ (80085a8 <UARTEx_SetNbDataToProcess+0x94>)
 8008564:	5c8a      	ldrb	r2, [r1, r2]
 8008566:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800856a:	7b3a      	ldrb	r2, [r7, #12]
 800856c:	490f      	ldr	r1, [pc, #60]	@ (80085ac <UARTEx_SetNbDataToProcess+0x98>)
 800856e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008570:	fb93 f3f2 	sdiv	r3, r3, r2
 8008574:	b29a      	uxth	r2, r3
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	7b7a      	ldrb	r2, [r7, #13]
 8008580:	4909      	ldr	r1, [pc, #36]	@ (80085a8 <UARTEx_SetNbDataToProcess+0x94>)
 8008582:	5c8a      	ldrb	r2, [r1, r2]
 8008584:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008588:	7b7a      	ldrb	r2, [r7, #13]
 800858a:	4908      	ldr	r1, [pc, #32]	@ (80085ac <UARTEx_SetNbDataToProcess+0x98>)
 800858c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800858e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008592:	b29a      	uxth	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800859a:	bf00      	nop
 800859c:	3714      	adds	r7, #20
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	0800d2f0 	.word	0x0800d2f0
 80085ac:	0800d2f8 	.word	0x0800d2f8

080085b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b08b      	sub	sp, #44	@ 0x2c
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	fa93 f3a3 	rbit	r3, r3
 80085ca:	613b      	str	r3, [r7, #16]
  return result;
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80085d6:	2320      	movs	r3, #32
 80085d8:	e003      	b.n	80085e2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	fab3 f383 	clz	r3, r3
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	2103      	movs	r1, #3
 80085e6:	fa01 f303 	lsl.w	r3, r1, r3
 80085ea:	43db      	mvns	r3, r3
 80085ec:	401a      	ands	r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	fa93 f3a3 	rbit	r3, r3
 80085f8:	61fb      	str	r3, [r7, #28]
  return result;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80085fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	d101      	bne.n	8008608 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008604:	2320      	movs	r3, #32
 8008606:	e003      	b.n	8008610 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	fab3 f383 	clz	r3, r3
 800860e:	b2db      	uxtb	r3, r3
 8008610:	005b      	lsls	r3, r3, #1
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	fa01 f303 	lsl.w	r3, r1, r3
 8008618:	431a      	orrs	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	601a      	str	r2, [r3, #0]
}
 800861e:	bf00      	nop
 8008620:	372c      	adds	r7, #44	@ 0x2c
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	60b9      	str	r1, [r7, #8]
 8008634:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685a      	ldr	r2, [r3, #4]
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	43db      	mvns	r3, r3
 800863e:	401a      	ands	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	fb01 f303 	mul.w	r3, r1, r3
 8008648:	431a      	orrs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	605a      	str	r2, [r3, #4]
}
 800864e:	bf00      	nop
 8008650:	3714      	adds	r7, #20
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800865a:	b480      	push	{r7}
 800865c:	b08b      	sub	sp, #44	@ 0x2c
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	60b9      	str	r1, [r7, #8]
 8008664:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	fa93 f3a3 	rbit	r3, r3
 8008674:	613b      	str	r3, [r7, #16]
  return result;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008680:	2320      	movs	r3, #32
 8008682:	e003      	b.n	800868c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	fab3 f383 	clz	r3, r3
 800868a:	b2db      	uxtb	r3, r3
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	2103      	movs	r1, #3
 8008690:	fa01 f303 	lsl.w	r3, r1, r3
 8008694:	43db      	mvns	r3, r3
 8008696:	401a      	ands	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	fa93 f3a3 	rbit	r3, r3
 80086a2:	61fb      	str	r3, [r7, #28]
  return result;
 80086a4:	69fb      	ldr	r3, [r7, #28]
 80086a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80086a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d101      	bne.n	80086b2 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80086ae:	2320      	movs	r3, #32
 80086b0:	e003      	b.n	80086ba <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b4:	fab3 f383 	clz	r3, r3
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	005b      	lsls	r3, r3, #1
 80086bc:	6879      	ldr	r1, [r7, #4]
 80086be:	fa01 f303 	lsl.w	r3, r1, r3
 80086c2:	431a      	orrs	r2, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80086c8:	bf00      	nop
 80086ca:	372c      	adds	r7, #44	@ 0x2c
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b08b      	sub	sp, #44	@ 0x2c
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68da      	ldr	r2, [r3, #12]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	fa93 f3a3 	rbit	r3, r3
 80086ee:	613b      	str	r3, [r7, #16]
  return result;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80086fa:	2320      	movs	r3, #32
 80086fc:	e003      	b.n	8008706 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	fab3 f383 	clz	r3, r3
 8008704:	b2db      	uxtb	r3, r3
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	2103      	movs	r1, #3
 800870a:	fa01 f303 	lsl.w	r3, r1, r3
 800870e:	43db      	mvns	r3, r3
 8008710:	401a      	ands	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008716:	6a3b      	ldr	r3, [r7, #32]
 8008718:	fa93 f3a3 	rbit	r3, r3
 800871c:	61fb      	str	r3, [r7, #28]
  return result;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008724:	2b00      	cmp	r3, #0
 8008726:	d101      	bne.n	800872c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008728:	2320      	movs	r3, #32
 800872a:	e003      	b.n	8008734 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800872c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872e:	fab3 f383 	clz	r3, r3
 8008732:	b2db      	uxtb	r3, r3
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	6879      	ldr	r1, [r7, #4]
 8008738:	fa01 f303 	lsl.w	r3, r1, r3
 800873c:	431a      	orrs	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	60da      	str	r2, [r3, #12]
}
 8008742:	bf00      	nop
 8008744:	372c      	adds	r7, #44	@ 0x2c
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800874e:	b480      	push	{r7}
 8008750:	b08b      	sub	sp, #44	@ 0x2c
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6a1a      	ldr	r2, [r3, #32]
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	fa93 f3a3 	rbit	r3, r3
 8008768:	613b      	str	r3, [r7, #16]
  return result;
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008774:	2320      	movs	r3, #32
 8008776:	e003      	b.n	8008780 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	fab3 f383 	clz	r3, r3
 800877e:	b2db      	uxtb	r3, r3
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	210f      	movs	r1, #15
 8008784:	fa01 f303 	lsl.w	r3, r1, r3
 8008788:	43db      	mvns	r3, r3
 800878a:	401a      	ands	r2, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	fa93 f3a3 	rbit	r3, r3
 8008796:	61fb      	str	r3, [r7, #28]
  return result;
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800879c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80087a2:	2320      	movs	r3, #32
 80087a4:	e003      	b.n	80087ae <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80087a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a8:	fab3 f383 	clz	r3, r3
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	6879      	ldr	r1, [r7, #4]
 80087b2:	fa01 f303 	lsl.w	r3, r1, r3
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80087bc:	bf00      	nop
 80087be:	372c      	adds	r7, #44	@ 0x2c
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b08b      	sub	sp, #44	@ 0x2c
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	0a1b      	lsrs	r3, r3, #8
 80087dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	fa93 f3a3 	rbit	r3, r3
 80087e4:	613b      	str	r3, [r7, #16]
  return result;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80087f0:	2320      	movs	r3, #32
 80087f2:	e003      	b.n	80087fc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	fab3 f383 	clz	r3, r3
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	210f      	movs	r1, #15
 8008800:	fa01 f303 	lsl.w	r3, r1, r3
 8008804:	43db      	mvns	r3, r3
 8008806:	401a      	ands	r2, r3
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	fa93 f3a3 	rbit	r3, r3
 8008814:	61fb      	str	r3, [r7, #28]
  return result;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800881a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008820:	2320      	movs	r3, #32
 8008822:	e003      	b.n	800882c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008826:	fab3 f383 	clz	r3, r3
 800882a:	b2db      	uxtb	r3, r3
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	fa01 f303 	lsl.w	r3, r1, r3
 8008834:	431a      	orrs	r2, r3
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800883a:	bf00      	nop
 800883c:	372c      	adds	r7, #44	@ 0x2c
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b088      	sub	sp, #32
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	fa93 f3a3 	rbit	r3, r3
 800885c:	60fb      	str	r3, [r7, #12]
  return result;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <LL_GPIO_Init+0x26>
    return 32U;
 8008868:	2320      	movs	r3, #32
 800886a:	e003      	b.n	8008874 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	fab3 f383 	clz	r3, r3
 8008872:	b2db      	uxtb	r3, r3
 8008874:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008876:	e048      	b.n	800890a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	2101      	movs	r1, #1
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	fa01 f303 	lsl.w	r3, r1, r3
 8008884:	4013      	ands	r3, r2
 8008886:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d03a      	beq.n	8008904 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2b01      	cmp	r3, #1
 8008894:	d003      	beq.n	800889e <LL_GPIO_Init+0x58>
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b02      	cmp	r3, #2
 800889c:	d10e      	bne.n	80088bc <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	461a      	mov	r2, r3
 80088a4:	69b9      	ldr	r1, [r7, #24]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f7ff fed7 	bl	800865a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	6819      	ldr	r1, [r3, #0]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	461a      	mov	r2, r3
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7ff feb7 	bl	800862a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	461a      	mov	r2, r3
 80088c2:	69b9      	ldr	r1, [r7, #24]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f7ff ff05 	bl	80086d4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	d111      	bne.n	80088f6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	2bff      	cmp	r3, #255	@ 0xff
 80088d6:	d807      	bhi.n	80088e8 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	461a      	mov	r2, r3
 80088de:	69b9      	ldr	r1, [r7, #24]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f7ff ff34 	bl	800874e <LL_GPIO_SetAFPin_0_7>
 80088e6:	e006      	b.n	80088f6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	461a      	mov	r2, r3
 80088ee:	69b9      	ldr	r1, [r7, #24]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7ff ff69 	bl	80087c8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	461a      	mov	r2, r3
 80088fc:	69b9      	ldr	r1, [r7, #24]
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff fe56 	bl	80085b0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	3301      	adds	r3, #1
 8008908:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	fa22 f303 	lsr.w	r3, r2, r3
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1af      	bne.n	8008878 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3720      	adds	r7, #32
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008922:	b480      	push	{r7}
 8008924:	b085      	sub	sp, #20
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008932:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008936:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	b29a      	uxth	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008958:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800895c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008964:	b29a      	uxth	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	b29b      	uxth	r3, r3
 800896a:	43db      	mvns	r3, r3
 800896c:	b29b      	uxth	r3, r3
 800896e:	4013      	ands	r3, r2
 8008970:	b29a      	uxth	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3714      	adds	r7, #20
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008986:	b480      	push	{r7}
 8008988:	b085      	sub	sp, #20
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	1d3b      	adds	r3, r7, #4
 8008990:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2201      	movs	r2, #1
 8008998:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3714      	adds	r7, #20
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b09d      	sub	sp, #116	@ 0x74
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80089e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	78db      	ldrb	r3, [r3, #3]
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d81f      	bhi.n	8008a36 <USB_ActivateEndpoint+0x72>
 80089f6:	a201      	add	r2, pc, #4	@ (adr r2, 80089fc <USB_ActivateEndpoint+0x38>)
 80089f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089fc:	08008a0d 	.word	0x08008a0d
 8008a00:	08008a29 	.word	0x08008a29
 8008a04:	08008a3f 	.word	0x08008a3f
 8008a08:	08008a1b 	.word	0x08008a1b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008a0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a14:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008a18:	e012      	b.n	8008a40 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008a1a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a1e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008a22:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008a26:	e00b      	b.n	8008a40 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008a28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008a34:	e004      	b.n	8008a40 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008a3c:	e000      	b.n	8008a40 <USB_ActivateEndpoint+0x7c>
      break;
 8008a3e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	441a      	add	r2, r3
 8008a4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	781b      	ldrb	r3, [r3, #0]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	b21b      	sxth	r3, r3
 8008a72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a7a:	b21a      	sxth	r2, r3
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b21b      	sxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b21b      	sxth	r3, r3
 8008a86:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	441a      	add	r2, r3
 8008a94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008a98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aa8:	b29b      	uxth	r3, r3
 8008aaa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	7b1b      	ldrb	r3, [r3, #12]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f040 8178 	bne.w	8008da6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f000 8084 	beq.w	8008bc8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	61bb      	str	r3, [r7, #24]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	461a      	mov	r2, r3
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	00da      	lsls	r2, r3, #3
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ae2:	617b      	str	r3, [r7, #20]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	88db      	ldrh	r3, [r3, #6]
 8008ae8:	085b      	lsrs	r3, r3, #1
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	827b      	strh	r3, [r7, #18]
 8008b02:	8a7b      	ldrh	r3, [r7, #18]
 8008b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01b      	beq.n	8008b44 <USB_ActivateEndpoint+0x180>
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b22:	823b      	strh	r3, [r7, #16]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	8a3b      	ldrh	r3, [r7, #16]
 8008b30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	78db      	ldrb	r3, [r3, #3]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d020      	beq.n	8008b8e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	781b      	ldrb	r3, [r3, #0]
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b62:	81bb      	strh	r3, [r7, #12]
 8008b64:	89bb      	ldrh	r3, [r7, #12]
 8008b66:	f083 0320 	eor.w	r3, r3, #32
 8008b6a:	81bb      	strh	r3, [r7, #12]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	441a      	add	r2, r3
 8008b76:	89bb      	ldrh	r3, [r7, #12]
 8008b78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	8013      	strh	r3, [r2, #0]
 8008b8c:	e2d5      	b.n	800913a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ba0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba4:	81fb      	strh	r3, [r7, #14]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	441a      	add	r2, r3
 8008bb0:	89fb      	ldrh	r3, [r7, #14]
 8008bb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	8013      	strh	r3, [r2, #0]
 8008bc6:	e2b8      	b.n	800913a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd8:	4413      	add	r3, r2
 8008bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	00da      	lsls	r2, r3, #3
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	4413      	add	r3, r2
 8008be6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	88db      	ldrh	r3, [r3, #6]
 8008bf0:	085b      	lsrs	r3, r3, #1
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bfa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	4413      	add	r3, r2
 8008c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	00da      	lsls	r2, r3, #3
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	4413      	add	r3, r2
 8008c1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	881b      	ldrh	r3, [r3, #0]
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	691b      	ldr	r3, [r3, #16]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <USB_ActivateEndpoint+0x28a>
 8008c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4a:	801a      	strh	r2, [r3, #0]
 8008c4c:	e039      	b.n	8008cc2 <USB_ActivateEndpoint+0x2fe>
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c54:	d818      	bhi.n	8008c88 <USB_ActivateEndpoint+0x2c4>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	085b      	lsrs	r3, r3, #1
 8008c5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	f003 0301 	and.w	r3, r3, #1
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d002      	beq.n	8008c70 <USB_ActivateEndpoint+0x2ac>
 8008c6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	881b      	ldrh	r3, [r3, #0]
 8008c74:	b29a      	uxth	r2, r3
 8008c76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c78:	b29b      	uxth	r3, r3
 8008c7a:	029b      	lsls	r3, r3, #10
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	b29a      	uxth	r2, r3
 8008c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c84:	801a      	strh	r2, [r3, #0]
 8008c86:	e01c      	b.n	8008cc2 <USB_ActivateEndpoint+0x2fe>
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f003 031f 	and.w	r3, r3, #31
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <USB_ActivateEndpoint+0x2de>
 8008c9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29a      	uxth	r2, r3
 8008ca8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	029b      	lsls	r3, r3, #10
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008cd0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008cd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d01b      	beq.n	8008d12 <USB_ActivateEndpoint+0x34e>
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cf0:	843b      	strh	r3, [r7, #32]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	441a      	add	r2, r3
 8008cfc:	8c3b      	ldrh	r3, [r7, #32]
 8008cfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d124      	bne.n	8008d64 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781b      	ldrb	r3, [r3, #0]
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	881b      	ldrh	r3, [r3, #0]
 8008d26:	b29b      	uxth	r3, r3
 8008d28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d30:	83bb      	strh	r3, [r7, #28]
 8008d32:	8bbb      	ldrh	r3, [r7, #28]
 8008d34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d38:	83bb      	strh	r3, [r7, #28]
 8008d3a:	8bbb      	ldrh	r3, [r7, #28]
 8008d3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d40:	83bb      	strh	r3, [r7, #28]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	441a      	add	r2, r3
 8008d4c:	8bbb      	ldrh	r3, [r7, #28]
 8008d4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	8013      	strh	r3, [r2, #0]
 8008d62:	e1ea      	b.n	800913a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d7a:	83fb      	strh	r3, [r7, #30]
 8008d7c:	8bfb      	ldrh	r3, [r7, #30]
 8008d7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d82:	83fb      	strh	r3, [r7, #30]
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	441a      	add	r2, r3
 8008d8e:	8bfb      	ldrh	r3, [r7, #30]
 8008d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	8013      	strh	r3, [r2, #0]
 8008da4:	e1c9      	b.n	800913a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	78db      	ldrb	r3, [r3, #3]
 8008daa:	2b02      	cmp	r3, #2
 8008dac:	d11e      	bne.n	8008dec <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dc4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	441a      	add	r2, r3
 8008dd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dde:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	8013      	strh	r3, [r2, #0]
 8008dea:	e01d      	b.n	8008e28 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	4413      	add	r3, r2
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e02:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	441a      	add	r2, r3
 8008e10:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008e14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	461a      	mov	r2, r3
 8008e36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e38:	4413      	add	r3, r2
 8008e3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	00da      	lsls	r2, r3, #3
 8008e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e44:	4413      	add	r3, r2
 8008e46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	891b      	ldrh	r3, [r3, #8]
 8008e50:	085b      	lsrs	r3, r3, #1
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	005b      	lsls	r3, r3, #1
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	461a      	mov	r2, r3
 8008e6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e6c:	4413      	add	r3, r2
 8008e6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	00da      	lsls	r2, r3, #3
 8008e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e78:	4413      	add	r3, r2
 8008e7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	895b      	ldrh	r3, [r3, #10]
 8008e84:	085b      	lsrs	r3, r3, #1
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e8e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	785b      	ldrb	r3, [r3, #1]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f040 8093 	bne.w	8008fc0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008eaa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01b      	beq.n	8008eee <USB_ActivateEndpoint+0x52a>
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ecc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	441a      	add	r2, r3
 8008ed8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	4413      	add	r3, r2
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008efc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d01b      	beq.n	8008f3e <USB_ActivateEndpoint+0x57a>
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f1c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	441a      	add	r2, r3
 8008f28:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f36:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f3e:	687a      	ldr	r2, [r7, #4]
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	009b      	lsls	r3, r3, #2
 8008f46:	4413      	add	r3, r2
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f54:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008f56:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008f58:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008f5c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008f5e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008f60:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008f64:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	441a      	add	r2, r3
 8008f70:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f9c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	441a      	add	r2, r3
 8008fa8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008faa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	8013      	strh	r3, [r2, #0]
 8008fbe:	e0bc      	b.n	800913a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d01d      	beq.n	8009018 <USB_ActivateEndpoint+0x654>
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ff2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	781b      	ldrb	r3, [r3, #0]
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	441a      	add	r2, r3
 8009000:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800900c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009014:	b29b      	uxth	r3, r3
 8009016:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800902c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d01d      	beq.n	8009070 <USB_ActivateEndpoint+0x6ac>
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	4413      	add	r3, r2
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	b29b      	uxth	r3, r3
 8009042:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009046:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	441a      	add	r2, r3
 8009058:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800905c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009068:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800906c:	b29b      	uxth	r3, r3
 800906e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	78db      	ldrb	r3, [r3, #3]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d024      	beq.n	80090c2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	881b      	ldrh	r3, [r3, #0]
 8009084:	b29b      	uxth	r3, r3
 8009086:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800908a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800908e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009092:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009096:	f083 0320 	eor.w	r3, r3, #32
 800909a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800909e:	687a      	ldr	r2, [r7, #4]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	441a      	add	r2, r3
 80090a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80090ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090bc:	b29b      	uxth	r3, r3
 80090be:	8013      	strh	r3, [r2, #0]
 80090c0:	e01d      	b.n	80090fe <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	881b      	ldrh	r3, [r3, #0]
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090d8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	441a      	add	r2, r3
 80090e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80090ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009114:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	781b      	ldrb	r3, [r3, #0]
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	441a      	add	r2, r3
 8009122:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800912a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800912e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009136:	b29b      	uxth	r3, r3
 8009138:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800913a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800913e:	4618      	mov	r0, r3
 8009140:	3774      	adds	r7, #116	@ 0x74
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop

0800914c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800914c:	b480      	push	{r7}
 800914e:	b08d      	sub	sp, #52	@ 0x34
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	7b1b      	ldrb	r3, [r3, #12]
 800915a:	2b00      	cmp	r3, #0
 800915c:	f040 808e 	bne.w	800927c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d044      	beq.n	80091f2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009168:	687a      	ldr	r2, [r7, #4]
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	781b      	ldrb	r3, [r3, #0]
 800916e:	009b      	lsls	r3, r3, #2
 8009170:	4413      	add	r3, r2
 8009172:	881b      	ldrh	r3, [r3, #0]
 8009174:	81bb      	strh	r3, [r7, #12]
 8009176:	89bb      	ldrh	r3, [r7, #12]
 8009178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917c:	2b00      	cmp	r3, #0
 800917e:	d01b      	beq.n	80091b8 <USB_DeactivateEndpoint+0x6c>
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	881b      	ldrh	r3, [r3, #0]
 800918c:	b29b      	uxth	r3, r3
 800918e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009196:	817b      	strh	r3, [r7, #10]
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	009b      	lsls	r3, r3, #2
 80091a0:	441a      	add	r2, r3
 80091a2:	897b      	ldrh	r3, [r7, #10]
 80091a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4413      	add	r3, r2
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091ce:	813b      	strh	r3, [r7, #8]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	781b      	ldrb	r3, [r3, #0]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	441a      	add	r2, r3
 80091da:	893b      	ldrh	r3, [r7, #8]
 80091dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	8013      	strh	r3, [r2, #0]
 80091f0:	e192      	b.n	8009518 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	881b      	ldrh	r3, [r3, #0]
 80091fe:	827b      	strh	r3, [r7, #18]
 8009200:	8a7b      	ldrh	r3, [r7, #18]
 8009202:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d01b      	beq.n	8009242 <USB_DeactivateEndpoint+0xf6>
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800921c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009220:	823b      	strh	r3, [r7, #16]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	781b      	ldrb	r3, [r3, #0]
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	441a      	add	r2, r3
 800922c:	8a3b      	ldrh	r3, [r7, #16]
 800922e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009232:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009236:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800923a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800923e:	b29b      	uxth	r3, r3
 8009240:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	881b      	ldrh	r3, [r3, #0]
 800924e:	b29b      	uxth	r3, r3
 8009250:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009258:	81fb      	strh	r3, [r7, #14]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	441a      	add	r2, r3
 8009264:	89fb      	ldrh	r3, [r7, #14]
 8009266:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800926a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800926e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009276:	b29b      	uxth	r3, r3
 8009278:	8013      	strh	r3, [r2, #0]
 800927a:	e14d      	b.n	8009518 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	785b      	ldrb	r3, [r3, #1]
 8009280:	2b00      	cmp	r3, #0
 8009282:	f040 80a5 	bne.w	80093d0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4413      	add	r3, r2
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	843b      	strh	r3, [r7, #32]
 8009294:	8c3b      	ldrh	r3, [r7, #32]
 8009296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d01b      	beq.n	80092d6 <USB_DeactivateEndpoint+0x18a>
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	009b      	lsls	r3, r3, #2
 80092a6:	4413      	add	r3, r2
 80092a8:	881b      	ldrh	r3, [r3, #0]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092b4:	83fb      	strh	r3, [r7, #30]
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	441a      	add	r2, r3
 80092c0:	8bfb      	ldrh	r3, [r7, #30]
 80092c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	4413      	add	r3, r2
 80092e0:	881b      	ldrh	r3, [r3, #0]
 80092e2:	83bb      	strh	r3, [r7, #28]
 80092e4:	8bbb      	ldrh	r3, [r7, #28]
 80092e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d01b      	beq.n	8009326 <USB_DeactivateEndpoint+0x1da>
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009300:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009304:	837b      	strh	r3, [r7, #26]
 8009306:	687a      	ldr	r2, [r7, #4]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	441a      	add	r2, r3
 8009310:	8b7b      	ldrh	r3, [r7, #26]
 8009312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800931a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800931e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009322:	b29b      	uxth	r3, r3
 8009324:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	881b      	ldrh	r3, [r3, #0]
 8009332:	b29b      	uxth	r3, r3
 8009334:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009338:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933c:	833b      	strh	r3, [r7, #24]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	441a      	add	r2, r3
 8009348:	8b3b      	ldrh	r3, [r7, #24]
 800934a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800934e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009356:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800935a:	b29b      	uxth	r3, r3
 800935c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	881b      	ldrh	r3, [r3, #0]
 800936a:	b29b      	uxth	r3, r3
 800936c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009374:	82fb      	strh	r3, [r7, #22]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	441a      	add	r2, r3
 8009380:	8afb      	ldrh	r3, [r7, #22]
 8009382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800938a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800938e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009392:	b29b      	uxth	r3, r3
 8009394:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	881b      	ldrh	r3, [r3, #0]
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093ac:	82bb      	strh	r3, [r7, #20]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	781b      	ldrb	r3, [r3, #0]
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	441a      	add	r2, r3
 80093b8:	8abb      	ldrh	r3, [r7, #20]
 80093ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	8013      	strh	r3, [r2, #0]
 80093ce:	e0a3      	b.n	8009518 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	881b      	ldrh	r3, [r3, #0]
 80093dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80093de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80093e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d01b      	beq.n	8009420 <USB_DeactivateEndpoint+0x2d4>
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	881b      	ldrh	r3, [r3, #0]
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093fe:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	441a      	add	r2, r3
 800940a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800940c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009410:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009414:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009418:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800941c:	b29b      	uxth	r3, r3
 800941e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800942e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d01b      	beq.n	8009470 <USB_DeactivateEndpoint+0x324>
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	4413      	add	r3, r2
 8009442:	881b      	ldrh	r3, [r3, #0]
 8009444:	b29b      	uxth	r3, r3
 8009446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800944a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800944e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	441a      	add	r2, r3
 800945a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800945c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009460:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009464:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009468:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800946c:	b29b      	uxth	r3, r3
 800946e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	881b      	ldrh	r3, [r3, #0]
 800947c:	b29b      	uxth	r3, r3
 800947e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009486:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	441a      	add	r2, r3
 8009492:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009494:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009498:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800949c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094a8:	687a      	ldr	r2, [r7, #4]
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	4413      	add	r3, r2
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	441a      	add	r2, r3
 80094ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80094cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094dc:	b29b      	uxth	r3, r3
 80094de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094f6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	441a      	add	r2, r3
 8009502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009504:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009508:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800950c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3734      	adds	r7, #52	@ 0x34
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr

08009526 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b0c2      	sub	sp, #264	@ 0x108
 800952a:	af00      	add	r7, sp, #0
 800952c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009534:	6018      	str	r0, [r3, #0]
 8009536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800953a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800953e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	785b      	ldrb	r3, [r3, #1]
 800954c:	2b01      	cmp	r3, #1
 800954e:	f040 86b7 	bne.w	800a2c0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	429a      	cmp	r2, r3
 800956c:	d908      	bls.n	8009580 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800956e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	691b      	ldr	r3, [r3, #16]
 800957a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800957e:	e007      	b.n	8009590 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	7b1b      	ldrb	r3, [r3, #12]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d13a      	bne.n	8009616 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80095a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	6959      	ldr	r1, [r3, #20]
 80095ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	88da      	ldrh	r2, [r3, #6]
 80095b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095bc:	b29b      	uxth	r3, r3
 80095be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80095c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80095c6:	6800      	ldr	r0, [r0, #0]
 80095c8:	f001 fc99 	bl	800aefe <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80095cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	613b      	str	r3, [r7, #16]
 80095d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	461a      	mov	r2, r3
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	4413      	add	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]
 80095f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	00da      	lsls	r2, r3, #3
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	4413      	add	r3, r2
 8009602:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009606:	60fb      	str	r3, [r7, #12]
 8009608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960c:	b29a      	uxth	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	801a      	strh	r2, [r3, #0]
 8009612:	f000 be1f 	b.w	800a254 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	78db      	ldrb	r3, [r3, #3]
 8009622:	2b02      	cmp	r3, #2
 8009624:	f040 8462 	bne.w	8009eec <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800962c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6a1a      	ldr	r2, [r3, #32]
 8009634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	429a      	cmp	r2, r3
 8009642:	f240 83df 	bls.w	8009e04 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	781b      	ldrb	r3, [r3, #0]
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4413      	add	r3, r2
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	441a      	add	r2, r3
 800968a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800968e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009696:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800969a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800969e:	b29b      	uxth	r3, r3
 80096a0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80096a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6a1a      	ldr	r2, [r3, #32]
 80096ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b2:	1ad2      	subs	r2, r2, r3
 80096b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80096c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	4413      	add	r3, r2
 80096da:	881b      	ldrh	r3, [r3, #0]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 81c7 	beq.w	8009a76 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80096e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	785b      	ldrb	r3, [r3, #1]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d177      	bne.n	80097f4 <USB_EPStartXfer+0x2ce>
 8009704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009708:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009714:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800971e:	b29b      	uxth	r3, r3
 8009720:	461a      	mov	r2, r3
 8009722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009724:	4413      	add	r3, r2
 8009726:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	00da      	lsls	r2, r3, #3
 8009736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009738:	4413      	add	r3, r2
 800973a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800973e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	b29b      	uxth	r3, r3
 8009746:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800974a:	b29a      	uxth	r2, r3
 800974c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974e:	801a      	strh	r2, [r3, #0]
 8009750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10a      	bne.n	800976e <USB_EPStartXfer+0x248>
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	b29b      	uxth	r3, r3
 800975e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009766:	b29a      	uxth	r2, r3
 8009768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	e067      	b.n	800983e <USB_EPStartXfer+0x318>
 800976e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009772:	2b3e      	cmp	r3, #62	@ 0x3e
 8009774:	d81c      	bhi.n	80097b0 <USB_EPStartXfer+0x28a>
 8009776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977a:	085b      	lsrs	r3, r3, #1
 800977c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009784:	f003 0301 	and.w	r3, r3, #1
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <USB_EPStartXfer+0x270>
 800978c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009790:	3301      	adds	r3, #1
 8009792:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009798:	881b      	ldrh	r3, [r3, #0]
 800979a:	b29a      	uxth	r2, r3
 800979c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	029b      	lsls	r3, r3, #10
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	4313      	orrs	r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ac:	801a      	strh	r2, [r3, #0]
 80097ae:	e046      	b.n	800983e <USB_EPStartXfer+0x318>
 80097b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80097ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097be:	f003 031f 	and.w	r3, r3, #31
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d104      	bne.n	80097d0 <USB_EPStartXfer+0x2aa>
 80097c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80097ca:	3b01      	subs	r3, #1
 80097cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80097d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d2:	881b      	ldrh	r3, [r3, #0]
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80097da:	b29b      	uxth	r3, r3
 80097dc:	029b      	lsls	r3, r3, #10
 80097de:	b29b      	uxth	r3, r3
 80097e0:	4313      	orrs	r3, r2
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f0:	801a      	strh	r2, [r3, #0]
 80097f2:	e024      	b.n	800983e <USB_EPStartXfer+0x318>
 80097f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d11c      	bne.n	800983e <USB_EPStartXfer+0x318>
 8009804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009808:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009812:	b29b      	uxth	r3, r3
 8009814:	461a      	mov	r2, r3
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	4413      	add	r3, r2
 800981a:	633b      	str	r3, [r7, #48]	@ 0x30
 800981c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	00da      	lsls	r2, r3, #3
 800982a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800982c:	4413      	add	r3, r2
 800982e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009838:	b29a      	uxth	r2, r3
 800983a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800983c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800983e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	895b      	ldrh	r3, [r3, #10]
 800984a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800984e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6959      	ldr	r1, [r3, #20]
 800985a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985e:	b29b      	uxth	r3, r3
 8009860:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009864:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009868:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800986c:	6800      	ldr	r0, [r0, #0]
 800986e:	f001 fb46 	bl	800aefe <USB_WritePMA>
            ep->xfer_buff += len;
 8009872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695a      	ldr	r2, [r3, #20]
 800987e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009882:	441a      	add	r2, r3
 8009884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	6a1a      	ldr	r2, [r3, #32]
 800989c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	691b      	ldr	r3, [r3, #16]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d90f      	bls.n	80098cc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80098ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	6a1a      	ldr	r2, [r3, #32]
 80098b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098bc:	1ad2      	subs	r2, r2, r3
 80098be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	621a      	str	r2, [r3, #32]
 80098ca:	e00e      	b.n	80098ea <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80098cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	6a1b      	ldr	r3, [r3, #32]
 80098d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80098dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2200      	movs	r2, #0
 80098e8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	785b      	ldrb	r3, [r3, #1]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d177      	bne.n	80099ea <USB_EPStartXfer+0x4c4>
 80098fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	61bb      	str	r3, [r7, #24]
 8009906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009914:	b29b      	uxth	r3, r3
 8009916:	461a      	mov	r2, r3
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	4413      	add	r3, r2
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	00da      	lsls	r2, r3, #3
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	4413      	add	r3, r2
 8009930:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009934:	617b      	str	r3, [r7, #20]
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	881b      	ldrh	r3, [r3, #0]
 800993a:	b29b      	uxth	r3, r3
 800993c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009940:	b29a      	uxth	r2, r3
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	801a      	strh	r2, [r3, #0]
 8009946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <USB_EPStartXfer+0x43e>
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800995c:	b29a      	uxth	r2, r3
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	801a      	strh	r2, [r3, #0]
 8009962:	e06d      	b.n	8009a40 <USB_EPStartXfer+0x51a>
 8009964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009968:	2b3e      	cmp	r3, #62	@ 0x3e
 800996a:	d81c      	bhi.n	80099a6 <USB_EPStartXfer+0x480>
 800996c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009970:	085b      	lsrs	r3, r3, #1
 8009972:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <USB_EPStartXfer+0x466>
 8009982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009986:	3301      	adds	r3, #1
 8009988:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b29a      	uxth	r2, r3
 8009992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009996:	b29b      	uxth	r3, r3
 8009998:	029b      	lsls	r3, r3, #10
 800999a:	b29b      	uxth	r3, r3
 800999c:	4313      	orrs	r3, r2
 800999e:	b29a      	uxth	r2, r3
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	801a      	strh	r2, [r3, #0]
 80099a4:	e04c      	b.n	8009a40 <USB_EPStartXfer+0x51a>
 80099a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80099b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b4:	f003 031f 	and.w	r3, r3, #31
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d104      	bne.n	80099c6 <USB_EPStartXfer+0x4a0>
 80099bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099c0:	3b01      	subs	r3, #1
 80099c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	881b      	ldrh	r3, [r3, #0]
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	029b      	lsls	r3, r3, #10
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	4313      	orrs	r3, r2
 80099d8:	b29b      	uxth	r3, r3
 80099da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099e2:	b29a      	uxth	r2, r3
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	801a      	strh	r2, [r3, #0]
 80099e8:	e02a      	b.n	8009a40 <USB_EPStartXfer+0x51a>
 80099ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d122      	bne.n	8009a40 <USB_EPStartXfer+0x51a>
 80099fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	623b      	str	r3, [r7, #32]
 8009a06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	461a      	mov	r2, r3
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	623b      	str	r3, [r7, #32]
 8009a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	00da      	lsls	r2, r3, #3
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a34:	61fb      	str	r3, [r7, #28]
 8009a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	891b      	ldrh	r3, [r3, #8]
 8009a4c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6959      	ldr	r1, [r3, #20]
 8009a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a66:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a6a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a6e:	6800      	ldr	r0, [r0, #0]
 8009a70:	f001 fa45 	bl	800aefe <USB_WritePMA>
 8009a74:	e3ee      	b.n	800a254 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d177      	bne.n	8009b76 <USB_EPStartXfer+0x650>
 8009a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aa6:	4413      	add	r3, r2
 8009aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	00da      	lsls	r2, r3, #3
 8009ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aba:	4413      	add	r3, r2
 8009abc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ac0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ac2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ad0:	801a      	strh	r2, [r3, #0]
 8009ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d10a      	bne.n	8009af0 <USB_EPStartXfer+0x5ca>
 8009ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009aec:	801a      	strh	r2, [r3, #0]
 8009aee:	e06d      	b.n	8009bcc <USB_EPStartXfer+0x6a6>
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af4:	2b3e      	cmp	r3, #62	@ 0x3e
 8009af6:	d81c      	bhi.n	8009b32 <USB_EPStartXfer+0x60c>
 8009af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009afc:	085b      	lsrs	r3, r3, #1
 8009afe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d004      	beq.n	8009b18 <USB_EPStartXfer+0x5f2>
 8009b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b12:	3301      	adds	r3, #1
 8009b14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	029b      	lsls	r3, r3, #10
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b2e:	801a      	strh	r2, [r3, #0]
 8009b30:	e04c      	b.n	8009bcc <USB_EPStartXfer+0x6a6>
 8009b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b36:	095b      	lsrs	r3, r3, #5
 8009b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b40:	f003 031f 	and.w	r3, r3, #31
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d104      	bne.n	8009b52 <USB_EPStartXfer+0x62c>
 8009b48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b4c:	3b01      	subs	r3, #1
 8009b4e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009b52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b54:	881b      	ldrh	r3, [r3, #0]
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	029b      	lsls	r3, r3, #10
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b6e:	b29a      	uxth	r2, r3
 8009b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b72:	801a      	strh	r2, [r3, #0]
 8009b74:	e02a      	b.n	8009bcc <USB_EPStartXfer+0x6a6>
 8009b76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	785b      	ldrb	r3, [r3, #1]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d122      	bne.n	8009bcc <USB_EPStartXfer+0x6a6>
 8009b86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ba6:	4413      	add	r3, r2
 8009ba8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009baa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	00da      	lsls	r2, r3, #3
 8009bb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bba:	4413      	add	r3, r2
 8009bbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	891b      	ldrh	r3, [r3, #8]
 8009bd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	6959      	ldr	r1, [r3, #20]
 8009be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009bf2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009bf6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009bfa:	6800      	ldr	r0, [r0, #0]
 8009bfc:	f001 f97f 	bl	800aefe <USB_WritePMA>
            ep->xfer_buff += len;
 8009c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	695a      	ldr	r2, [r3, #20]
 8009c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c10:	441a      	add	r2, r3
 8009c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	6a1a      	ldr	r2, [r3, #32]
 8009c2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d90f      	bls.n	8009c5a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	6a1a      	ldr	r2, [r3, #32]
 8009c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c4a:	1ad2      	subs	r2, r2, r3
 8009c4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	621a      	str	r2, [r3, #32]
 8009c58:	e00e      	b.n	8009c78 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009c6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2200      	movs	r2, #0
 8009c76:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	785b      	ldrb	r3, [r3, #1]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d177      	bne.n	8009d84 <USB_EPStartXfer+0x85e>
 8009c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cb4:	4413      	add	r3, r2
 8009cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	00da      	lsls	r2, r3, #3
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc8:	4413      	add	r3, r2
 8009cca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cd2:	881b      	ldrh	r3, [r3, #0]
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cde:	801a      	strh	r2, [r3, #0]
 8009ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <USB_EPStartXfer+0x7d8>
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cf6:	b29a      	uxth	r2, r3
 8009cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cfa:	801a      	strh	r2, [r3, #0]
 8009cfc:	e067      	b.n	8009dce <USB_EPStartXfer+0x8a8>
 8009cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d02:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d04:	d81c      	bhi.n	8009d40 <USB_EPStartXfer+0x81a>
 8009d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d0a:	085b      	lsrs	r3, r3, #1
 8009d0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d004      	beq.n	8009d26 <USB_EPStartXfer+0x800>
 8009d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d20:	3301      	adds	r3, #1
 8009d22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d28:	881b      	ldrh	r3, [r3, #0]
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	029b      	lsls	r3, r3, #10
 8009d34:	b29b      	uxth	r3, r3
 8009d36:	4313      	orrs	r3, r2
 8009d38:	b29a      	uxth	r2, r3
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d3c:	801a      	strh	r2, [r3, #0]
 8009d3e:	e046      	b.n	8009dce <USB_EPStartXfer+0x8a8>
 8009d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d44:	095b      	lsrs	r3, r3, #5
 8009d46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4e:	f003 031f 	and.w	r3, r3, #31
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d104      	bne.n	8009d60 <USB_EPStartXfer+0x83a>
 8009d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d62:	881b      	ldrh	r3, [r3, #0]
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	029b      	lsls	r3, r3, #10
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4313      	orrs	r3, r2
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d80:	801a      	strh	r2, [r3, #0]
 8009d82:	e024      	b.n	8009dce <USB_EPStartXfer+0x8a8>
 8009d84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	785b      	ldrb	r3, [r3, #1]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d11c      	bne.n	8009dce <USB_EPStartXfer+0x8a8>
 8009d94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	461a      	mov	r2, r3
 8009da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009da8:	4413      	add	r3, r2
 8009daa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	00da      	lsls	r2, r3, #3
 8009dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dcc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009dce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	895b      	ldrh	r3, [r3, #10]
 8009dda:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009dde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6959      	ldr	r1, [r3, #20]
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009df4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009df8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009dfc:	6800      	ldr	r0, [r0, #0]
 8009dfe:	f001 f87e 	bl	800aefe <USB_WritePMA>
 8009e02:	e227      	b.n	800a254 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009e04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009e14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009e3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	441a      	add	r2, r3
 8009e58:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009e70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e90:	4413      	add	r3, r2
 8009e92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	00da      	lsls	r2, r3, #3
 8009ea2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ea4:	4413      	add	r3, r2
 8009ea6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eb4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009eb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	891b      	ldrh	r3, [r3, #8]
 8009ec2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	6959      	ldr	r1, [r3, #20]
 8009ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009edc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009ee0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ee4:	6800      	ldr	r0, [r0, #0]
 8009ee6:	f001 f80a 	bl	800aefe <USB_WritePMA>
 8009eea:	e1b3      	b.n	800a254 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	6a1a      	ldr	r2, [r3, #32]
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efc:	1ad2      	subs	r2, r2, r3
 8009efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009f0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f12:	681a      	ldr	r2, [r3, #0]
 8009f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	4413      	add	r3, r2
 8009f24:	881b      	ldrh	r3, [r3, #0]
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	f000 80c6 	beq.w	800a0be <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	785b      	ldrb	r3, [r3, #1]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d177      	bne.n	800a03e <USB_EPStartXfer+0xb18>
 8009f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f68:	b29b      	uxth	r3, r3
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f6e:	4413      	add	r3, r2
 8009f70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	00da      	lsls	r2, r3, #3
 8009f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f82:	4413      	add	r3, r2
 8009f84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f88:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f98:	801a      	strh	r2, [r3, #0]
 8009f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <USB_EPStartXfer+0xa92>
 8009fa2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e067      	b.n	800a088 <USB_EPStartXfer+0xb62>
 8009fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fbc:	2b3e      	cmp	r3, #62	@ 0x3e
 8009fbe:	d81c      	bhi.n	8009ffa <USB_EPStartXfer+0xad4>
 8009fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc4:	085b      	lsrs	r3, r3, #1
 8009fc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fce:	f003 0301 	and.w	r3, r3, #1
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d004      	beq.n	8009fe0 <USB_EPStartXfer+0xaba>
 8009fd6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009fda:	3301      	adds	r3, #1
 8009fdc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009fe2:	881b      	ldrh	r3, [r3, #0]
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	029b      	lsls	r3, r3, #10
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	4313      	orrs	r3, r2
 8009ff2:	b29a      	uxth	r2, r3
 8009ff4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ff6:	801a      	strh	r2, [r3, #0]
 8009ff8:	e046      	b.n	800a088 <USB_EPStartXfer+0xb62>
 8009ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ffe:	095b      	lsrs	r3, r3, #5
 800a000:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a004:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a008:	f003 031f 	and.w	r3, r3, #31
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <USB_EPStartXfer+0xaf4>
 800a010:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a014:	3b01      	subs	r3, #1
 800a016:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a01a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29a      	uxth	r2, r3
 800a020:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800a024:	b29b      	uxth	r3, r3
 800a026:	029b      	lsls	r3, r3, #10
 800a028:	b29b      	uxth	r3, r3
 800a02a:	4313      	orrs	r3, r2
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a036:	b29a      	uxth	r2, r3
 800a038:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	e024      	b.n	800a088 <USB_EPStartXfer+0xb62>
 800a03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	785b      	ldrb	r3, [r3, #1]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d11c      	bne.n	800a088 <USB_EPStartXfer+0xb62>
 800a04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	461a      	mov	r2, r3
 800a060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a062:	4413      	add	r3, r2
 800a064:	673b      	str	r3, [r7, #112]	@ 0x70
 800a066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a06a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	00da      	lsls	r2, r3, #3
 800a074:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a076:	4413      	add	r3, r2
 800a078:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a07c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a082:	b29a      	uxth	r2, r3
 800a084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a086:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	895b      	ldrh	r3, [r3, #10]
 800a094:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a09c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6959      	ldr	r1, [r3, #20]
 800a0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a0ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a0b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a0b6:	6800      	ldr	r0, [r0, #0]
 800a0b8:	f000 ff21 	bl	800aefe <USB_WritePMA>
 800a0bc:	e0ca      	b.n	800a254 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a0be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d177      	bne.n	800a1be <USB_EPStartXfer+0xc98>
 800a0ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a0ee:	4413      	add	r3, r2
 800a0f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	781b      	ldrb	r3, [r3, #0]
 800a0fe:	00da      	lsls	r2, r3, #3
 800a100:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a102:	4413      	add	r3, r2
 800a104:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a108:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a10a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a114:	b29a      	uxth	r2, r3
 800a116:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a118:	801a      	strh	r2, [r3, #0]
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <USB_EPStartXfer+0xc12>
 800a122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	b29b      	uxth	r3, r3
 800a128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a12c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a130:	b29a      	uxth	r2, r3
 800a132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a134:	801a      	strh	r2, [r3, #0]
 800a136:	e073      	b.n	800a220 <USB_EPStartXfer+0xcfa>
 800a138:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a13c:	2b3e      	cmp	r3, #62	@ 0x3e
 800a13e:	d81c      	bhi.n	800a17a <USB_EPStartXfer+0xc54>
 800a140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a144:	085b      	lsrs	r3, r3, #1
 800a146:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a14e:	f003 0301 	and.w	r3, r3, #1
 800a152:	2b00      	cmp	r3, #0
 800a154:	d004      	beq.n	800a160 <USB_EPStartXfer+0xc3a>
 800a156:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a15a:	3301      	adds	r3, #1
 800a15c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a160:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29a      	uxth	r2, r3
 800a166:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	029b      	lsls	r3, r3, #10
 800a16e:	b29b      	uxth	r3, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	b29a      	uxth	r2, r3
 800a174:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a176:	801a      	strh	r2, [r3, #0]
 800a178:	e052      	b.n	800a220 <USB_EPStartXfer+0xcfa>
 800a17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17e:	095b      	lsrs	r3, r3, #5
 800a180:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a188:	f003 031f 	and.w	r3, r3, #31
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d104      	bne.n	800a19a <USB_EPStartXfer+0xc74>
 800a190:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a194:	3b01      	subs	r3, #1
 800a196:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a19a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	029b      	lsls	r3, r3, #10
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1b6:	b29a      	uxth	r2, r3
 800a1b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a1ba:	801a      	strh	r2, [r3, #0]
 800a1bc:	e030      	b.n	800a220 <USB_EPStartXfer+0xcfa>
 800a1be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	785b      	ldrb	r3, [r3, #1]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d128      	bne.n	800a220 <USB_EPStartXfer+0xcfa>
 800a1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	00da      	lsls	r2, r3, #3
 800a206:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a20a:	4413      	add	r3, r2
 800a20c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a218:	b29a      	uxth	r2, r3
 800a21a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a21e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	891b      	ldrh	r3, [r3, #8]
 800a22c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a230:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6959      	ldr	r1, [r3, #20]
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a240:	b29b      	uxth	r3, r3
 800a242:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a246:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a24a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a24e:	6800      	ldr	r0, [r0, #0]
 800a250:	f000 fe55 	bl	800aefe <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	4413      	add	r3, r2
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	b29b      	uxth	r3, r3
 800a272:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a27a:	817b      	strh	r3, [r7, #10]
 800a27c:	897b      	ldrh	r3, [r7, #10]
 800a27e:	f083 0310 	eor.w	r3, r3, #16
 800a282:	817b      	strh	r3, [r7, #10]
 800a284:	897b      	ldrh	r3, [r7, #10]
 800a286:	f083 0320 	eor.w	r3, r3, #32
 800a28a:	817b      	strh	r3, [r7, #10]
 800a28c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a29a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	781b      	ldrb	r3, [r3, #0]
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	441a      	add	r2, r3
 800a2a6:	897b      	ldrh	r3, [r7, #10]
 800a2a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	8013      	strh	r3, [r2, #0]
 800a2bc:	f000 bcdf 	b.w	800ac7e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a2c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	7b1b      	ldrb	r3, [r3, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f040 80bc 	bne.w	800a44a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	699a      	ldr	r2, [r3, #24]
 800a2de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d917      	bls.n	800a31e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	699a      	ldr	r2, [r3, #24]
 800a30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a30e:	1ad2      	subs	r2, r2, r3
 800a310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	619a      	str	r2, [r3, #24]
 800a31c:	e00e      	b.n	800a33c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2200      	movs	r2, #0
 800a33a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a358:	b29b      	uxth	r3, r3
 800a35a:	461a      	mov	r2, r3
 800a35c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a360:	4413      	add	r3, r2
 800a362:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a36a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	00da      	lsls	r2, r3, #3
 800a374:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a378:	4413      	add	r3, r2
 800a37a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a37e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a382:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	b29b      	uxth	r3, r3
 800a38a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a38e:	b29a      	uxth	r2, r3
 800a390:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10d      	bne.n	800a3ba <USB_EPStartXfer+0xe94>
 800a39e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	f000 bc28 	b.w	800ac0a <USB_EPStartXfer+0x16e4>
 800a3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3be:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3c0:	d81f      	bhi.n	800a402 <USB_EPStartXfer+0xedc>
 800a3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <USB_EPStartXfer+0xebc>
 800a3d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a3dc:	3301      	adds	r3, #1
 800a3de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a3e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	029b      	lsls	r3, r3, #10
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3fc:	801a      	strh	r2, [r3, #0]
 800a3fe:	f000 bc04 	b.w	800ac0a <USB_EPStartXfer+0x16e4>
 800a402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a406:	095b      	lsrs	r3, r3, #5
 800a408:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a410:	f003 031f 	and.w	r3, r3, #31
 800a414:	2b00      	cmp	r3, #0
 800a416:	d104      	bne.n	800a422 <USB_EPStartXfer+0xefc>
 800a418:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a41c:	3b01      	subs	r3, #1
 800a41e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a426:	881b      	ldrh	r3, [r3, #0]
 800a428:	b29a      	uxth	r2, r3
 800a42a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a42e:	b29b      	uxth	r3, r3
 800a430:	029b      	lsls	r3, r3, #10
 800a432:	b29b      	uxth	r3, r3
 800a434:	4313      	orrs	r3, r2
 800a436:	b29b      	uxth	r3, r3
 800a438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a43c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a440:	b29a      	uxth	r2, r3
 800a442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a446:	801a      	strh	r2, [r3, #0]
 800a448:	e3df      	b.n	800ac0a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a44e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	78db      	ldrb	r3, [r3, #3]
 800a456:	2b02      	cmp	r3, #2
 800a458:	f040 8218 	bne.w	800a88c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f040 809d 	bne.w	800a5a8 <USB_EPStartXfer+0x1082>
 800a46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a480:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	461a      	mov	r2, r3
 800a48e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a492:	4413      	add	r3, r2
 800a494:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	00da      	lsls	r2, r3, #3
 800a4a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a4b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a4b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4b8:	881b      	ldrh	r3, [r3, #0]
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4c6:	801a      	strh	r2, [r3, #0]
 800a4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	691b      	ldr	r3, [r3, #16]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10c      	bne.n	800a4f2 <USB_EPStartXfer+0xfcc>
 800a4d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a4ee:	801a      	strh	r2, [r3, #0]
 800a4f0:	e08f      	b.n	800a612 <USB_EPStartXfer+0x10ec>
 800a4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800a500:	d826      	bhi.n	800a550 <USB_EPStartXfer+0x102a>
 800a502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	085b      	lsrs	r3, r3, #1
 800a510:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d004      	beq.n	800a532 <USB_EPStartXfer+0x100c>
 800a528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a52c:	3301      	adds	r3, #1
 800a52e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a532:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a536:	881b      	ldrh	r3, [r3, #0]
 800a538:	b29a      	uxth	r2, r3
 800a53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53e:	b29b      	uxth	r3, r3
 800a540:	029b      	lsls	r3, r3, #10
 800a542:	b29b      	uxth	r3, r3
 800a544:	4313      	orrs	r3, r2
 800a546:	b29a      	uxth	r2, r3
 800a548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a54c:	801a      	strh	r2, [r3, #0]
 800a54e:	e060      	b.n	800a612 <USB_EPStartXfer+0x10ec>
 800a550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	095b      	lsrs	r3, r3, #5
 800a55e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f003 031f 	and.w	r3, r3, #31
 800a572:	2b00      	cmp	r3, #0
 800a574:	d104      	bne.n	800a580 <USB_EPStartXfer+0x105a>
 800a576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a57a:	3b01      	subs	r3, #1
 800a57c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a580:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	b29a      	uxth	r2, r3
 800a588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	029b      	lsls	r3, r3, #10
 800a590:	b29b      	uxth	r3, r3
 800a592:	4313      	orrs	r3, r2
 800a594:	b29b      	uxth	r3, r3
 800a596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a59a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	e034      	b.n	800a612 <USB_EPStartXfer+0x10ec>
 800a5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	785b      	ldrb	r3, [r3, #1]
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d12c      	bne.n	800a612 <USB_EPStartXfer+0x10ec>
 800a5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5dc:	4413      	add	r3, r2
 800a5de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	00da      	lsls	r2, r3, #3
 800a5f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a5fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a602:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a610:	801a      	strh	r2, [r3, #0]
 800a612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a624:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	785b      	ldrb	r3, [r3, #1]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f040 809d 	bne.w	800a76c <USB_EPStartXfer+0x1246>
 800a632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a636:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a644:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a64e:	b29b      	uxth	r3, r3
 800a650:	461a      	mov	r2, r3
 800a652:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a656:	4413      	add	r3, r2
 800a658:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	00da      	lsls	r2, r3, #3
 800a66a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a66e:	4413      	add	r3, r2
 800a670:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a678:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a67c:	881b      	ldrh	r3, [r3, #0]
 800a67e:	b29b      	uxth	r3, r3
 800a680:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a684:	b29a      	uxth	r2, r3
 800a686:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a68a:	801a      	strh	r2, [r3, #0]
 800a68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d10c      	bne.n	800a6b6 <USB_EPStartXfer+0x1190>
 800a69c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6a0:	881b      	ldrh	r3, [r3, #0]
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6b2:	801a      	strh	r2, [r3, #0]
 800a6b4:	e088      	b.n	800a7c8 <USB_EPStartXfer+0x12a2>
 800a6b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6c4:	d826      	bhi.n	800a714 <USB_EPStartXfer+0x11ee>
 800a6c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	085b      	lsrs	r3, r3, #1
 800a6d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	691b      	ldr	r3, [r3, #16]
 800a6e4:	f003 0301 	and.w	r3, r3, #1
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <USB_EPStartXfer+0x11d0>
 800a6ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6f0:	3301      	adds	r3, #1
 800a6f2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a6f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6fa:	881b      	ldrh	r3, [r3, #0]
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a702:	b29b      	uxth	r3, r3
 800a704:	029b      	lsls	r3, r3, #10
 800a706:	b29b      	uxth	r3, r3
 800a708:	4313      	orrs	r3, r2
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a710:	801a      	strh	r2, [r3, #0]
 800a712:	e059      	b.n	800a7c8 <USB_EPStartXfer+0x12a2>
 800a714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	095b      	lsrs	r3, r3, #5
 800a722:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f003 031f 	and.w	r3, r3, #31
 800a736:	2b00      	cmp	r3, #0
 800a738:	d104      	bne.n	800a744 <USB_EPStartXfer+0x121e>
 800a73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a73e:	3b01      	subs	r3, #1
 800a740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a748:	881b      	ldrh	r3, [r3, #0]
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a750:	b29b      	uxth	r3, r3
 800a752:	029b      	lsls	r3, r3, #10
 800a754:	b29b      	uxth	r3, r3
 800a756:	4313      	orrs	r3, r2
 800a758:	b29b      	uxth	r3, r3
 800a75a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a75e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a762:	b29a      	uxth	r2, r3
 800a764:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a768:	801a      	strh	r2, [r3, #0]
 800a76a:	e02d      	b.n	800a7c8 <USB_EPStartXfer+0x12a2>
 800a76c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a770:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	785b      	ldrb	r3, [r3, #1]
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d125      	bne.n	800a7c8 <USB_EPStartXfer+0x12a2>
 800a77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	461a      	mov	r2, r3
 800a78e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a792:	4413      	add	r3, r2
 800a794:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a79c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	00da      	lsls	r2, r3, #3
 800a7a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a7b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a7b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a7c6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a7c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8218 	beq.w	800ac0a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a7fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a7fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d005      	beq.n	800a812 <USB_EPStartXfer+0x12ec>
 800a806:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a80a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d10d      	bne.n	800a82e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a812:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	f040 81f5 	bne.w	800ac0a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a820:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a828:	2b00      	cmp	r3, #0
 800a82a:	f040 81ee 	bne.w	800ac0a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a83c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4413      	add	r3, r2
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a850:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a854:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a85c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	441a      	add	r2, r3
 800a872:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a876:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a87a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a87e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a882:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a886:	b29b      	uxth	r3, r3
 800a888:	8013      	strh	r3, [r2, #0]
 800a88a:	e1be      	b.n	800ac0a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a890:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	78db      	ldrb	r3, [r3, #3]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	f040 81b4 	bne.w	800ac06 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a89e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	699a      	ldr	r2, [r3, #24]
 800a8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	691b      	ldr	r3, [r3, #16]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d917      	bls.n	800a8ea <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	691b      	ldr	r3, [r3, #16]
 800a8c6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a8ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	699a      	ldr	r2, [r3, #24]
 800a8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8da:	1ad2      	subs	r2, r2, r3
 800a8dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	619a      	str	r2, [r3, #24]
 800a8e8:	e00e      	b.n	800a908 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a8ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2200      	movs	r2, #0
 800a906:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a90c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	785b      	ldrb	r3, [r3, #1]
 800a914:	2b00      	cmp	r3, #0
 800a916:	f040 8085 	bne.w	800aa24 <USB_EPStartXfer+0x14fe>
 800a91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a936:	b29b      	uxth	r3, r3
 800a938:	461a      	mov	r2, r3
 800a93a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a93e:	4413      	add	r3, r2
 800a940:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a948:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	00da      	lsls	r2, r3, #3
 800a952:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a956:	4413      	add	r3, r2
 800a958:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a95c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a964:	881b      	ldrh	r3, [r3, #0]
 800a966:	b29b      	uxth	r3, r3
 800a968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d10c      	bne.n	800a996 <USB_EPStartXfer+0x1470>
 800a97c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b29b      	uxth	r3, r3
 800a984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a992:	801a      	strh	r2, [r3, #0]
 800a994:	e077      	b.n	800aa86 <USB_EPStartXfer+0x1560>
 800a996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a99a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a99c:	d81e      	bhi.n	800a9dc <USB_EPStartXfer+0x14b6>
 800a99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9a2:	085b      	lsrs	r3, r3, #1
 800a9a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ac:	f003 0301 	and.w	r3, r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d004      	beq.n	800a9be <USB_EPStartXfer+0x1498>
 800a9b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	029b      	lsls	r3, r3, #10
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a9d8:	801a      	strh	r2, [r3, #0]
 800a9da:	e054      	b.n	800aa86 <USB_EPStartXfer+0x1560>
 800a9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9e0:	095b      	lsrs	r3, r3, #5
 800a9e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ea:	f003 031f 	and.w	r3, r3, #31
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d104      	bne.n	800a9fc <USB_EPStartXfer+0x14d6>
 800a9f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a9fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	029b      	lsls	r3, r3, #10
 800aa0c:	b29b      	uxth	r3, r3
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa20:	801a      	strh	r2, [r3, #0]
 800aa22:	e030      	b.n	800aa86 <USB_EPStartXfer+0x1560>
 800aa24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	785b      	ldrb	r3, [r3, #1]
 800aa30:	2b01      	cmp	r3, #1
 800aa32:	d128      	bne.n	800aa86 <USB_EPStartXfer+0x1560>
 800aa34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	461a      	mov	r2, r3
 800aa54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa58:	4413      	add	r3, r2
 800aa5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800aa5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	00da      	lsls	r2, r3, #3
 800aa6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800aa70:	4413      	add	r3, r2
 800aa72:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aa76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800aa7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800aa84:	801a      	strh	r2, [r3, #0]
 800aa86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f040 8085 	bne.w	800abb0 <USB_EPStartXfer+0x168a>
 800aaa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aab4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	461a      	mov	r2, r3
 800aac6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aaca:	4413      	add	r3, r2
 800aacc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800aad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	00da      	lsls	r2, r3, #3
 800aade:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800aae2:	4413      	add	r3, r2
 800aae4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aaec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaf8:	b29a      	uxth	r2, r3
 800aafa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aafe:	801a      	strh	r2, [r3, #0]
 800ab00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10c      	bne.n	800ab22 <USB_EPStartXfer+0x15fc>
 800ab08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab0c:	881b      	ldrh	r3, [r3, #0]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab1e:	801a      	strh	r2, [r3, #0]
 800ab20:	e073      	b.n	800ac0a <USB_EPStartXfer+0x16e4>
 800ab22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab26:	2b3e      	cmp	r3, #62	@ 0x3e
 800ab28:	d81e      	bhi.n	800ab68 <USB_EPStartXfer+0x1642>
 800ab2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab2e:	085b      	lsrs	r3, r3, #1
 800ab30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab38:	f003 0301 	and.w	r3, r3, #1
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d004      	beq.n	800ab4a <USB_EPStartXfer+0x1624>
 800ab40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab44:	3301      	adds	r3, #1
 800ab46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab4e:	881b      	ldrh	r3, [r3, #0]
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	029b      	lsls	r3, r3, #10
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab64:	801a      	strh	r2, [r3, #0]
 800ab66:	e050      	b.n	800ac0a <USB_EPStartXfer+0x16e4>
 800ab68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab6c:	095b      	lsrs	r3, r3, #5
 800ab6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab76:	f003 031f 	and.w	r3, r3, #31
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d104      	bne.n	800ab88 <USB_EPStartXfer+0x1662>
 800ab7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab82:	3b01      	subs	r3, #1
 800ab84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ab88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ab94:	b29b      	uxth	r3, r3
 800ab96:	029b      	lsls	r3, r3, #10
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aba6:	b29a      	uxth	r2, r3
 800aba8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800abac:	801a      	strh	r2, [r3, #0]
 800abae:	e02c      	b.n	800ac0a <USB_EPStartXfer+0x16e4>
 800abb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	785b      	ldrb	r3, [r3, #1]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d124      	bne.n	800ac0a <USB_EPStartXfer+0x16e4>
 800abc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abce:	b29b      	uxth	r3, r3
 800abd0:	461a      	mov	r2, r3
 800abd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abd6:	4413      	add	r3, r2
 800abd8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800abdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	00da      	lsls	r2, r3, #3
 800abea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800abee:	4413      	add	r3, r2
 800abf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800abf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800abf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ac02:	801a      	strh	r2, [r3, #0]
 800ac04:	e001      	b.n	800ac0a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e03a      	b.n	800ac80 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac30:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac34:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac3c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac40:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ac4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	441a      	add	r2, r3
 800ac66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ac6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	785b      	ldrb	r3, [r3, #1]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d020      	beq.n	800acde <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	009b      	lsls	r3, r3, #2
 800aca4:	4413      	add	r3, r2
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acb2:	81bb      	strh	r3, [r7, #12]
 800acb4:	89bb      	ldrh	r3, [r7, #12]
 800acb6:	f083 0310 	eor.w	r3, r3, #16
 800acba:	81bb      	strh	r3, [r7, #12]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	009b      	lsls	r3, r3, #2
 800acc4:	441a      	add	r2, r3
 800acc6:	89bb      	ldrh	r3, [r7, #12]
 800acc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800accc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd8:	b29b      	uxth	r3, r3
 800acda:	8013      	strh	r3, [r2, #0]
 800acdc:	e01f      	b.n	800ad1e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	b29b      	uxth	r3, r3
 800acec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf4:	81fb      	strh	r3, [r7, #14]
 800acf6:	89fb      	ldrh	r3, [r7, #14]
 800acf8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800acfc:	81fb      	strh	r3, [r7, #14]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	441a      	add	r2, r3
 800ad08:	89fb      	ldrh	r3, [r7, #14]
 800ad0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	7b1b      	ldrb	r3, [r3, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f040 809d 	bne.w	800ae7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d04c      	beq.n	800ade2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	823b      	strh	r3, [r7, #16]
 800ad56:	8a3b      	ldrh	r3, [r7, #16]
 800ad58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d01b      	beq.n	800ad98 <USB_EPClearStall+0x6c>
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	781b      	ldrb	r3, [r3, #0]
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	881b      	ldrh	r3, [r3, #0]
 800ad6c:	b29b      	uxth	r3, r3
 800ad6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad76:	81fb      	strh	r3, [r7, #14]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	441a      	add	r2, r3
 800ad82:	89fb      	ldrh	r3, [r7, #14]
 800ad84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	78db      	ldrb	r3, [r3, #3]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d06c      	beq.n	800ae7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	b29b      	uxth	r3, r3
 800adae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adb6:	81bb      	strh	r3, [r7, #12]
 800adb8:	89bb      	ldrh	r3, [r7, #12]
 800adba:	f083 0320 	eor.w	r3, r3, #32
 800adbe:	81bb      	strh	r3, [r7, #12]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	441a      	add	r2, r3
 800adca:	89bb      	ldrh	r3, [r7, #12]
 800adcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800add0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800add4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800add8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800addc:	b29b      	uxth	r3, r3
 800adde:	8013      	strh	r3, [r2, #0]
 800ade0:	e04b      	b.n	800ae7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	82fb      	strh	r3, [r7, #22]
 800adf0:	8afb      	ldrh	r3, [r7, #22]
 800adf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d01b      	beq.n	800ae32 <USB_EPClearStall+0x106>
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae10:	82bb      	strh	r3, [r7, #20]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	441a      	add	r2, r3
 800ae1c:	8abb      	ldrh	r3, [r7, #20]
 800ae1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae48:	827b      	strh	r3, [r7, #18]
 800ae4a:	8a7b      	ldrh	r3, [r7, #18]
 800ae4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae50:	827b      	strh	r3, [r7, #18]
 800ae52:	8a7b      	ldrh	r3, [r7, #18]
 800ae54:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae58:	827b      	strh	r3, [r7, #18]
 800ae5a:	687a      	ldr	r2, [r7, #4]
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	441a      	add	r2, r3
 800ae64:	8a7b      	ldrh	r3, [r7, #18]
 800ae66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	371c      	adds	r7, #28
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	460b      	mov	r3, r1
 800ae92:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ae94:	78fb      	ldrb	r3, [r7, #3]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2280      	movs	r2, #128	@ 0x80
 800ae9e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aec8:	b29a      	uxth	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800aed0:	2300      	movs	r3, #0
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800aede:	b480      	push	{r7}
 800aee0:	b085      	sub	sp, #20
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800aef0:	68fb      	ldr	r3, [r7, #12]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3714      	adds	r7, #20
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr

0800aefe <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aefe:	b480      	push	{r7}
 800af00:	b08b      	sub	sp, #44	@ 0x2c
 800af02:	af00      	add	r7, sp, #0
 800af04:	60f8      	str	r0, [r7, #12]
 800af06:	60b9      	str	r1, [r7, #8]
 800af08:	4611      	mov	r1, r2
 800af0a:	461a      	mov	r2, r3
 800af0c:	460b      	mov	r3, r1
 800af0e:	80fb      	strh	r3, [r7, #6]
 800af10:	4613      	mov	r3, r2
 800af12:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800af14:	88bb      	ldrh	r3, [r7, #4]
 800af16:	3301      	adds	r3, #1
 800af18:	085b      	lsrs	r3, r3, #1
 800af1a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800af24:	88fa      	ldrh	r2, [r7, #6]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	4413      	add	r3, r2
 800af2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800af2e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	627b      	str	r3, [r7, #36]	@ 0x24
 800af34:	e01b      	b.n	800af6e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	3301      	adds	r3, #1
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	021b      	lsls	r3, r3, #8
 800af44:	b21a      	sxth	r2, r3
 800af46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	b21b      	sxth	r3, r3
 800af4e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	8a7a      	ldrh	r2, [r7, #18]
 800af54:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	3302      	adds	r3, #2
 800af5a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	3301      	adds	r3, #1
 800af60:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800af62:	69fb      	ldr	r3, [r7, #28]
 800af64:	3301      	adds	r3, #1
 800af66:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800af68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6a:	3b01      	subs	r3, #1
 800af6c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1e0      	bne.n	800af36 <USB_WritePMA+0x38>
  }
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop
 800af78:	372c      	adds	r7, #44	@ 0x2c
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800af82:	b480      	push	{r7}
 800af84:	b08b      	sub	sp, #44	@ 0x2c
 800af86:	af00      	add	r7, sp, #0
 800af88:	60f8      	str	r0, [r7, #12]
 800af8a:	60b9      	str	r1, [r7, #8]
 800af8c:	4611      	mov	r1, r2
 800af8e:	461a      	mov	r2, r3
 800af90:	460b      	mov	r3, r1
 800af92:	80fb      	strh	r3, [r7, #6]
 800af94:	4613      	mov	r3, r2
 800af96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800af98:	88bb      	ldrh	r3, [r7, #4]
 800af9a:	085b      	lsrs	r3, r3, #1
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800afa8:	88fa      	ldrh	r2, [r7, #6]
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800afb2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800afb8:	e018      	b.n	800afec <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	3302      	adds	r3, #2
 800afc6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	3301      	adds	r3, #1
 800afd4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800afd6:	693b      	ldr	r3, [r7, #16]
 800afd8:	0a1b      	lsrs	r3, r3, #8
 800afda:	b2da      	uxtb	r2, r3
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	3301      	adds	r3, #1
 800afe4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	3b01      	subs	r3, #1
 800afea:	627b      	str	r3, [r7, #36]	@ 0x24
 800afec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e3      	bne.n	800afba <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800aff2:	88bb      	ldrh	r3, [r7, #4]
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	b29b      	uxth	r3, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	d007      	beq.n	800b00e <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	881b      	ldrh	r3, [r3, #0]
 800b002:	b29b      	uxth	r3, r3
 800b004:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	701a      	strb	r2, [r3, #0]
  }
}
 800b00e:	bf00      	nop
 800b010:	372c      	adds	r7, #44	@ 0x2c
 800b012:	46bd      	mov	sp, r7
 800b014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	460b      	mov	r3, r1
 800b024:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b026:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b02a:	f002 f8a3 	bl	800d174 <USBD_static_malloc>
 800b02e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d105      	bne.n	800b042 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800b03e:	2302      	movs	r3, #2
 800b040:	e066      	b.n	800b110 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68fa      	ldr	r2, [r7, #12]
 800b046:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7c1b      	ldrb	r3, [r3, #16]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d119      	bne.n	800b086 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b056:	2202      	movs	r2, #2
 800b058:	2181      	movs	r1, #129	@ 0x81
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f001 ff31 	bl	800cec2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b06a:	2202      	movs	r2, #2
 800b06c:	2101      	movs	r1, #1
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 ff27 	bl	800cec2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2210      	movs	r2, #16
 800b080:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800b084:	e016      	b.n	800b0b4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b086:	2340      	movs	r3, #64	@ 0x40
 800b088:	2202      	movs	r2, #2
 800b08a:	2181      	movs	r1, #129	@ 0x81
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f001 ff18 	bl	800cec2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b098:	2340      	movs	r3, #64	@ 0x40
 800b09a:	2202      	movs	r2, #2
 800b09c:	2101      	movs	r1, #1
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 ff0f 	bl	800cec2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2210      	movs	r2, #16
 800b0b0:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0b4:	2308      	movs	r3, #8
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	2182      	movs	r1, #130	@ 0x82
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f001 ff01 	bl	800cec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	7c1b      	ldrb	r3, [r3, #16]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d109      	bne.n	800b0fe <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b0f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b0f4:	2101      	movs	r1, #1
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f001 ffd2 	bl	800d0a0 <USBD_LL_PrepareReceive>
 800b0fc:	e007      	b.n	800b10e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b104:	2340      	movs	r3, #64	@ 0x40
 800b106:	2101      	movs	r1, #1
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f001 ffc9 	bl	800d0a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	3710      	adds	r7, #16
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b082      	sub	sp, #8
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b124:	2181      	movs	r1, #129	@ 0x81
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f001 fef1 	bl	800cf0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b132:	2101      	movs	r1, #1
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f001 feea 	bl	800cf0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b142:	2182      	movs	r1, #130	@ 0x82
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f001 fee2 	bl	800cf0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00e      	beq.n	800b182 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b174:	4618      	mov	r0, r3
 800b176:	f002 f80b 	bl	800d190 <USBD_static_free>
    pdev->pClassData = NULL;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3708      	adds	r7, #8
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b086      	sub	sp, #24
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b19c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b1b0:	2303      	movs	r3, #3
 800b1b2:	e0af      	b.n	800b314 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d03f      	beq.n	800b240 <USBD_CDC_Setup+0xb4>
 800b1c0:	2b20      	cmp	r3, #32
 800b1c2:	f040 809f 	bne.w	800b304 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	88db      	ldrh	r3, [r3, #6]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d02e      	beq.n	800b22c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	b25b      	sxtb	r3, r3
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	da16      	bge.n	800b206 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	683a      	ldr	r2, [r7, #0]
 800b1e2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b1e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	88d2      	ldrh	r2, [r2, #6]
 800b1ea:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	88db      	ldrh	r3, [r3, #6]
 800b1f0:	2b07      	cmp	r3, #7
 800b1f2:	bf28      	it	cs
 800b1f4:	2307      	movcs	r3, #7
 800b1f6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	89fa      	ldrh	r2, [r7, #14]
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f001 fa9d 	bl	800c73e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b204:	e085      	b.n	800b312 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	785a      	ldrb	r2, [r3, #1]
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	88db      	ldrh	r3, [r3, #6]
 800b214:	b2da      	uxtb	r2, r3
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b21c:	6939      	ldr	r1, [r7, #16]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	88db      	ldrh	r3, [r3, #6]
 800b222:	461a      	mov	r2, r3
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f001 fab6 	bl	800c796 <USBD_CtlPrepareRx>
      break;
 800b22a:	e072      	b.n	800b312 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	7850      	ldrb	r0, [r2, #1]
 800b238:	2200      	movs	r2, #0
 800b23a:	6839      	ldr	r1, [r7, #0]
 800b23c:	4798      	blx	r3
      break;
 800b23e:	e068      	b.n	800b312 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b0b      	cmp	r3, #11
 800b246:	d852      	bhi.n	800b2ee <USBD_CDC_Setup+0x162>
 800b248:	a201      	add	r2, pc, #4	@ (adr r2, 800b250 <USBD_CDC_Setup+0xc4>)
 800b24a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b24e:	bf00      	nop
 800b250:	0800b281 	.word	0x0800b281
 800b254:	0800b2fd 	.word	0x0800b2fd
 800b258:	0800b2ef 	.word	0x0800b2ef
 800b25c:	0800b2ef 	.word	0x0800b2ef
 800b260:	0800b2ef 	.word	0x0800b2ef
 800b264:	0800b2ef 	.word	0x0800b2ef
 800b268:	0800b2ef 	.word	0x0800b2ef
 800b26c:	0800b2ef 	.word	0x0800b2ef
 800b270:	0800b2ef 	.word	0x0800b2ef
 800b274:	0800b2ef 	.word	0x0800b2ef
 800b278:	0800b2ab 	.word	0x0800b2ab
 800b27c:	0800b2d5 	.word	0x0800b2d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d107      	bne.n	800b29c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b28c:	f107 030a 	add.w	r3, r7, #10
 800b290:	2202      	movs	r2, #2
 800b292:	4619      	mov	r1, r3
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f001 fa52 	bl	800c73e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b29a:	e032      	b.n	800b302 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f001 f9dc 	bl	800c65c <USBD_CtlError>
            ret = USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	75fb      	strb	r3, [r7, #23]
          break;
 800b2a8:	e02b      	b.n	800b302 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d107      	bne.n	800b2c6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b2b6:	f107 030d 	add.w	r3, r7, #13
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4619      	mov	r1, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	f001 fa3d 	bl	800c73e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2c4:	e01d      	b.n	800b302 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b2c6:	6839      	ldr	r1, [r7, #0]
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f001 f9c7 	bl	800c65c <USBD_CtlError>
            ret = USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	75fb      	strb	r3, [r7, #23]
          break;
 800b2d2:	e016      	b.n	800b302 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d00f      	beq.n	800b300 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b2e0:	6839      	ldr	r1, [r7, #0]
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 f9ba 	bl	800c65c <USBD_CtlError>
            ret = USBD_FAIL;
 800b2e8:	2303      	movs	r3, #3
 800b2ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b2ec:	e008      	b.n	800b300 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f001 f9b3 	bl	800c65c <USBD_CtlError>
          ret = USBD_FAIL;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	75fb      	strb	r3, [r7, #23]
          break;
 800b2fa:	e002      	b.n	800b302 <USBD_CDC_Setup+0x176>
          break;
 800b2fc:	bf00      	nop
 800b2fe:	e008      	b.n	800b312 <USBD_CDC_Setup+0x186>
          break;
 800b300:	bf00      	nop
      }
      break;
 800b302:	e006      	b.n	800b312 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f001 f9a8 	bl	800c65c <USBD_CtlError>
      ret = USBD_FAIL;
 800b30c:	2303      	movs	r3, #3
 800b30e:	75fb      	strb	r3, [r7, #23]
      break;
 800b310:	bf00      	nop
  }

  return (uint8_t)ret;
 800b312:	7dfb      	ldrb	r3, [r7, #23]
}
 800b314:	4618      	mov	r0, r3
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	460b      	mov	r3, r1
 800b326:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b32e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b336:	2b00      	cmp	r3, #0
 800b338:	d101      	bne.n	800b33e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b33a:	2303      	movs	r3, #3
 800b33c:	e04f      	b.n	800b3de <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b344:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b346:	78fa      	ldrb	r2, [r7, #3]
 800b348:	6879      	ldr	r1, [r7, #4]
 800b34a:	4613      	mov	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4413      	add	r3, r2
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	440b      	add	r3, r1
 800b354:	3318      	adds	r3, #24
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d029      	beq.n	800b3b0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b35c:	78fa      	ldrb	r2, [r7, #3]
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	4613      	mov	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	4413      	add	r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	440b      	add	r3, r1
 800b36a:	3318      	adds	r3, #24
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	78f9      	ldrb	r1, [r7, #3]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	460b      	mov	r3, r1
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	440b      	add	r3, r1
 800b378:	00db      	lsls	r3, r3, #3
 800b37a:	4403      	add	r3, r0
 800b37c:	3320      	adds	r3, #32
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	fbb2 f1f3 	udiv	r1, r2, r3
 800b384:	fb01 f303 	mul.w	r3, r1, r3
 800b388:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d110      	bne.n	800b3b0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b38e:	78fa      	ldrb	r2, [r7, #3]
 800b390:	6879      	ldr	r1, [r7, #4]
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	440b      	add	r3, r1
 800b39c:	3318      	adds	r3, #24
 800b39e:	2200      	movs	r2, #0
 800b3a0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3a2:	78f9      	ldrb	r1, [r7, #3]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f001 fe58 	bl	800d05e <USBD_LL_Transmit>
 800b3ae:	e015      	b.n	800b3dc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	68ba      	ldr	r2, [r7, #8]
 800b3ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b3d8:	78fa      	ldrb	r2, [r7, #3]
 800b3da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b3dc:	2300      	movs	r3, #0
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	3710      	adds	r7, #16
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}

0800b3e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b400:	2b00      	cmp	r3, #0
 800b402:	d101      	bne.n	800b408 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b404:	2303      	movs	r3, #3
 800b406:	e015      	b.n	800b434 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b408:	78fb      	ldrb	r3, [r7, #3]
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f001 fe68 	bl	800d0e2 <USBD_LL_GetRxDataSize>
 800b412:	4602      	mov	r2, r0
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b428:	68fa      	ldr	r2, [r7, #12]
 800b42a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b42e:	4611      	mov	r1, r2
 800b430:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b44a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b452:	2303      	movs	r3, #3
 800b454:	e01a      	b.n	800b48c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d014      	beq.n	800b48a <USBD_CDC_EP0_RxReady+0x4e>
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b466:	2bff      	cmp	r3, #255	@ 0xff
 800b468:	d00f      	beq.n	800b48a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b478:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b47a:	68fa      	ldr	r2, [r7, #12]
 800b47c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b480:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	22ff      	movs	r2, #255	@ 0xff
 800b486:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2243      	movs	r2, #67	@ 0x43
 800b4a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b4a2:	4b03      	ldr	r3, [pc, #12]	@ (800b4b0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	20000094 	.word	0x20000094

0800b4b4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2243      	movs	r2, #67	@ 0x43
 800b4c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b4c2:	4b03      	ldr	r3, [pc, #12]	@ (800b4d0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr
 800b4d0:	20000050 	.word	0x20000050

0800b4d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b083      	sub	sp, #12
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2243      	movs	r2, #67	@ 0x43
 800b4e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b4e2:	4b03      	ldr	r3, [pc, #12]	@ (800b4f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	370c      	adds	r7, #12
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	200000d8 	.word	0x200000d8

0800b4f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	220a      	movs	r2, #10
 800b500:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b502:	4b03      	ldr	r3, [pc, #12]	@ (800b510 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b504:	4618      	mov	r0, r3
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr
 800b510:	2000000c 	.word	0x2000000c

0800b514 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b514:	b480      	push	{r7}
 800b516:	b083      	sub	sp, #12
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d101      	bne.n	800b528 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b524:	2303      	movs	r3, #3
 800b526:	e004      	b.n	800b532 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	370c      	adds	r7, #12
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr

0800b53e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b53e:	b480      	push	{r7}
 800b540:	b087      	sub	sp, #28
 800b542:	af00      	add	r7, sp, #0
 800b544:	60f8      	str	r0, [r7, #12]
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b550:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b558:	2303      	movs	r3, #3
 800b55a:	e008      	b.n	800b56e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	68ba      	ldr	r2, [r7, #8]
 800b560:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b085      	sub	sp, #20
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
 800b582:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b58a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d101      	bne.n	800b596 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b592:	2303      	movs	r3, #3
 800b594:	e004      	b.n	800b5a0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b59e:	2300      	movs	r3, #0
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d101      	bne.n	800b5ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e016      	b.n	800b5f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	7c1b      	ldrb	r3, [r3, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d109      	bne.n	800b5e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5dc:	2101      	movs	r1, #1
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f001 fd5e 	bl	800d0a0 <USBD_LL_PrepareReceive>
 800b5e4:	e007      	b.n	800b5f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b5ec:	2340      	movs	r3, #64	@ 0x40
 800b5ee:	2101      	movs	r1, #1
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f001 fd55 	bl	800d0a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4613      	mov	r3, r2
 800b60c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b614:	2303      	movs	r3, #3
 800b616:	e01f      	b.n	800b658 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d003      	beq.n	800b63e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2201      	movs	r2, #1
 800b642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	79fa      	ldrb	r2, [r7, #7]
 800b64a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b64c:	68f8      	ldr	r0, [r7, #12]
 800b64e:	f001 fbbd 	bl	800cdcc <USBD_LL_Init>
 800b652:	4603      	mov	r3, r0
 800b654:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b656:	7dfb      	ldrb	r3, [r7, #23]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3718      	adds	r7, #24
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b66a:	2300      	movs	r3, #0
 800b66c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b674:	2303      	movs	r3, #3
 800b676:	e016      	b.n	800b6a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d00b      	beq.n	800b6a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b694:	f107 020e 	add.w	r2, r7, #14
 800b698:	4610      	mov	r0, r2
 800b69a:	4798      	blx	r3
 800b69c:	4602      	mov	r2, r0
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f001 fbe8 	bl	800ce8c <USBD_LL_Start>
 800b6bc:	4603      	mov	r3, r0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3708      	adds	r7, #8
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}

0800b6c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b083      	sub	sp, #12
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b6e8:	2303      	movs	r3, #3
 800b6ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d009      	beq.n	800b70a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	78fa      	ldrb	r2, [r7, #3]
 800b700:	4611      	mov	r1, r2
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	4798      	blx	r3
 800b706:	4603      	mov	r3, r0
 800b708:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	460b      	mov	r3, r1
 800b71e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b726:	2b00      	cmp	r3, #0
 800b728:	d007      	beq.n	800b73a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	78fa      	ldrb	r2, [r7, #3]
 800b734:	4611      	mov	r1, r2
 800b736:	6878      	ldr	r0, [r7, #4]
 800b738:	4798      	blx	r3
  }

  return USBD_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b084      	sub	sp, #16
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	4618      	mov	r0, r3
 800b758:	f000 ff46 	bl	800c5e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2201      	movs	r2, #1
 800b760:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b76a:	461a      	mov	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b778:	f003 031f 	and.w	r3, r3, #31
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d01a      	beq.n	800b7b6 <USBD_LL_SetupStage+0x72>
 800b780:	2b02      	cmp	r3, #2
 800b782:	d822      	bhi.n	800b7ca <USBD_LL_SetupStage+0x86>
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <USBD_LL_SetupStage+0x4a>
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d00a      	beq.n	800b7a2 <USBD_LL_SetupStage+0x5e>
 800b78c:	e01d      	b.n	800b7ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f9ee 	bl	800bb78 <USBD_StdDevReq>
 800b79c:	4603      	mov	r3, r0
 800b79e:	73fb      	strb	r3, [r7, #15]
      break;
 800b7a0:	e020      	b.n	800b7e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fa52 	bl	800bc54 <USBD_StdItfReq>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b7b4:	e016      	b.n	800b7e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b7bc:	4619      	mov	r1, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 fa91 	bl	800bce6 <USBD_StdEPReq>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800b7c8:	e00c      	b.n	800b7e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7d0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f001 fbb7 	bl	800cf4c <USBD_LL_StallEP>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b7e2:	bf00      	nop
  }

  return ret;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b086      	sub	sp, #24
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	60f8      	str	r0, [r7, #12]
 800b7f6:	460b      	mov	r3, r1
 800b7f8:	607a      	str	r2, [r7, #4]
 800b7fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b7fc:	7afb      	ldrb	r3, [r7, #11]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d138      	bne.n	800b874 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b808:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b810:	2b03      	cmp	r3, #3
 800b812:	d14a      	bne.n	800b8aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	689a      	ldr	r2, [r3, #8]
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d913      	bls.n	800b848 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	1ad2      	subs	r2, r2, r3
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	68da      	ldr	r2, [r3, #12]
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	4293      	cmp	r3, r2
 800b838:	bf28      	it	cs
 800b83a:	4613      	movcs	r3, r2
 800b83c:	461a      	mov	r2, r3
 800b83e:	6879      	ldr	r1, [r7, #4]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f000 ffc5 	bl	800c7d0 <USBD_CtlContinueRx>
 800b846:	e030      	b.n	800b8aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b03      	cmp	r3, #3
 800b852:	d10b      	bne.n	800b86c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b866:	691b      	ldr	r3, [r3, #16]
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b86c:	68f8      	ldr	r0, [r7, #12]
 800b86e:	f000 ffc0 	bl	800c7f2 <USBD_CtlSendStatus>
 800b872:	e01a      	b.n	800b8aa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b03      	cmp	r3, #3
 800b87e:	d114      	bne.n	800b8aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d00e      	beq.n	800b8aa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	7afa      	ldrb	r2, [r7, #11]
 800b896:	4611      	mov	r1, r2
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	4798      	blx	r3
 800b89c:	4603      	mov	r3, r0
 800b89e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b8a0:	7dfb      	ldrb	r3, [r7, #23]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d001      	beq.n	800b8aa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b8a6:	7dfb      	ldrb	r3, [r7, #23]
 800b8a8:	e000      	b.n	800b8ac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b8aa:	2300      	movs	r3, #0
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3718      	adds	r7, #24
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	60f8      	str	r0, [r7, #12]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	607a      	str	r2, [r7, #4]
 800b8c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b8c2:	7afb      	ldrb	r3, [r7, #11]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d16b      	bne.n	800b9a0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	3314      	adds	r3, #20
 800b8cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8d4:	2b02      	cmp	r3, #2
 800b8d6:	d156      	bne.n	800b986 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	689a      	ldr	r2, [r3, #8]
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d914      	bls.n	800b90e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	689a      	ldr	r2, [r3, #8]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	1ad2      	subs	r2, r2, r3
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	6879      	ldr	r1, [r7, #4]
 800b8fa:	68f8      	ldr	r0, [r7, #12]
 800b8fc:	f000 ff3a 	bl	800c774 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	2100      	movs	r1, #0
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f001 fbca 	bl	800d0a0 <USBD_LL_PrepareReceive>
 800b90c:	e03b      	b.n	800b986 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	68da      	ldr	r2, [r3, #12]
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	689b      	ldr	r3, [r3, #8]
 800b916:	429a      	cmp	r2, r3
 800b918:	d11c      	bne.n	800b954 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	685a      	ldr	r2, [r3, #4]
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b922:	429a      	cmp	r2, r3
 800b924:	d316      	bcc.n	800b954 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	685a      	ldr	r2, [r3, #4]
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b930:	429a      	cmp	r2, r3
 800b932:	d20f      	bcs.n	800b954 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b934:	2200      	movs	r2, #0
 800b936:	2100      	movs	r1, #0
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f000 ff1b 	bl	800c774 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b946:	2300      	movs	r3, #0
 800b948:	2200      	movs	r2, #0
 800b94a:	2100      	movs	r1, #0
 800b94c:	68f8      	ldr	r0, [r7, #12]
 800b94e:	f001 fba7 	bl	800d0a0 <USBD_LL_PrepareReceive>
 800b952:	e018      	b.n	800b986 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d10b      	bne.n	800b978 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b966:	68db      	ldr	r3, [r3, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d005      	beq.n	800b978 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b978:	2180      	movs	r1, #128	@ 0x80
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f001 fae6 	bl	800cf4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f000 ff49 	bl	800c818 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d122      	bne.n	800b9d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff fe98 	bl	800b6c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2200      	movs	r2, #0
 800b99a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b99e:	e01a      	b.n	800b9d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9a6:	b2db      	uxtb	r3, r3
 800b9a8:	2b03      	cmp	r3, #3
 800b9aa:	d114      	bne.n	800b9d6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9b2:	695b      	ldr	r3, [r3, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d00e      	beq.n	800b9d6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	7afa      	ldrb	r2, [r7, #11]
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	4798      	blx	r3
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b9cc:	7dfb      	ldrb	r3, [r7, #23]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b9d2:	7dfb      	ldrb	r3, [r7, #23]
 800b9d4:	e000      	b.n	800b9d8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b082      	sub	sp, #8
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e02f      	b.n	800ba74 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00f      	beq.n	800ba3e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d009      	beq.n	800ba3e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	6852      	ldr	r2, [r2, #4]
 800ba36:	b2d2      	uxtb	r2, r2
 800ba38:	4611      	mov	r1, r2
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba3e:	2340      	movs	r3, #64	@ 0x40
 800ba40:	2200      	movs	r2, #0
 800ba42:	2100      	movs	r1, #0
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f001 fa3c 	bl	800cec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2240      	movs	r2, #64	@ 0x40
 800ba56:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba5a:	2340      	movs	r3, #64	@ 0x40
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2180      	movs	r1, #128	@ 0x80
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f001 fa2e 	bl	800cec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2240      	movs	r2, #64	@ 0x40
 800ba70:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	78fa      	ldrb	r2, [r7, #3]
 800ba8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba8e:	2300      	movs	r3, #0
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2204      	movs	r2, #4
 800bab6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bad6:	b2db      	uxtb	r3, r3
 800bad8:	2b04      	cmp	r3, #4
 800bada:	d106      	bne.n	800baea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d101      	bne.n	800bb0e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800bb0a:	2303      	movs	r3, #3
 800bb0c:	e012      	b.n	800bb34 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	2b03      	cmp	r3, #3
 800bb18:	d10b      	bne.n	800bb32 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb20:	69db      	ldr	r3, [r3, #28]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d005      	beq.n	800bb32 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3708      	adds	r7, #8
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b087      	sub	sp, #28
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bb48:	697b      	ldr	r3, [r7, #20]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	3301      	adds	r3, #1
 800bb52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bb5a:	8a3b      	ldrh	r3, [r7, #16]
 800bb5c:	021b      	lsls	r3, r3, #8
 800bb5e:	b21a      	sxth	r2, r3
 800bb60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	b21b      	sxth	r3, r3
 800bb68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bb6a:	89fb      	ldrh	r3, [r7, #14]
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	371c      	adds	r7, #28
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb82:	2300      	movs	r3, #0
 800bb84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb8e:	2b40      	cmp	r3, #64	@ 0x40
 800bb90:	d005      	beq.n	800bb9e <USBD_StdDevReq+0x26>
 800bb92:	2b40      	cmp	r3, #64	@ 0x40
 800bb94:	d853      	bhi.n	800bc3e <USBD_StdDevReq+0xc6>
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00b      	beq.n	800bbb2 <USBD_StdDevReq+0x3a>
 800bb9a:	2b20      	cmp	r3, #32
 800bb9c:	d14f      	bne.n	800bc3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bba4:	689b      	ldr	r3, [r3, #8]
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	4798      	blx	r3
 800bbac:	4603      	mov	r3, r0
 800bbae:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb0:	e04a      	b.n	800bc48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	785b      	ldrb	r3, [r3, #1]
 800bbb6:	2b09      	cmp	r3, #9
 800bbb8:	d83b      	bhi.n	800bc32 <USBD_StdDevReq+0xba>
 800bbba:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc0 <USBD_StdDevReq+0x48>)
 800bbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc0:	0800bc15 	.word	0x0800bc15
 800bbc4:	0800bc29 	.word	0x0800bc29
 800bbc8:	0800bc33 	.word	0x0800bc33
 800bbcc:	0800bc1f 	.word	0x0800bc1f
 800bbd0:	0800bc33 	.word	0x0800bc33
 800bbd4:	0800bbf3 	.word	0x0800bbf3
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bc33 	.word	0x0800bc33
 800bbe0:	0800bc0b 	.word	0x0800bc0b
 800bbe4:	0800bbfd 	.word	0x0800bbfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 f9de 	bl	800bfac <USBD_GetDescriptor>
          break;
 800bbf0:	e024      	b.n	800bc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bbf2:	6839      	ldr	r1, [r7, #0]
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f000 fb6d 	bl	800c2d4 <USBD_SetAddress>
          break;
 800bbfa:	e01f      	b.n	800bc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f000 fbac 	bl	800c35c <USBD_SetConfig>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]
          break;
 800bc08:	e018      	b.n	800bc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bc0a:	6839      	ldr	r1, [r7, #0]
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fc4b 	bl	800c4a8 <USBD_GetConfig>
          break;
 800bc12:	e013      	b.n	800bc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fc7c 	bl	800c514 <USBD_GetStatus>
          break;
 800bc1c:	e00e      	b.n	800bc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fcab 	bl	800c57c <USBD_SetFeature>
          break;
 800bc26:	e009      	b.n	800bc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 fcba 	bl	800c5a4 <USBD_ClrFeature>
          break;
 800bc30:	e004      	b.n	800bc3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bc32:	6839      	ldr	r1, [r7, #0]
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 fd11 	bl	800c65c <USBD_CtlError>
          break;
 800bc3a:	bf00      	nop
      }
      break;
 800bc3c:	e004      	b.n	800bc48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bc3e:	6839      	ldr	r1, [r7, #0]
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 fd0b 	bl	800c65c <USBD_CtlError>
      break;
 800bc46:	bf00      	nop
  }

  return ret;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop

0800bc54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc6a:	2b40      	cmp	r3, #64	@ 0x40
 800bc6c:	d005      	beq.n	800bc7a <USBD_StdItfReq+0x26>
 800bc6e:	2b40      	cmp	r3, #64	@ 0x40
 800bc70:	d82f      	bhi.n	800bcd2 <USBD_StdItfReq+0x7e>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d001      	beq.n	800bc7a <USBD_StdItfReq+0x26>
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	d12b      	bne.n	800bcd2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	3b01      	subs	r3, #1
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d81d      	bhi.n	800bcc4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	889b      	ldrh	r3, [r3, #4]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d813      	bhi.n	800bcba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	4798      	blx	r3
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	88db      	ldrh	r3, [r3, #6]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d110      	bne.n	800bcce <USBD_StdItfReq+0x7a>
 800bcac:	7bfb      	ldrb	r3, [r7, #15]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10d      	bne.n	800bcce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f000 fd9d 	bl	800c7f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bcb8:	e009      	b.n	800bcce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bcba:	6839      	ldr	r1, [r7, #0]
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fccd 	bl	800c65c <USBD_CtlError>
          break;
 800bcc2:	e004      	b.n	800bcce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fcc8 	bl	800c65c <USBD_CtlError>
          break;
 800bccc:	e000      	b.n	800bcd0 <USBD_StdItfReq+0x7c>
          break;
 800bcce:	bf00      	nop
      }
      break;
 800bcd0:	e004      	b.n	800bcdc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bcd2:	6839      	ldr	r1, [r7, #0]
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fcc1 	bl	800c65c <USBD_CtlError>
      break;
 800bcda:	bf00      	nop
  }

  return ret;
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b084      	sub	sp, #16
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	889b      	ldrh	r3, [r3, #4]
 800bcf8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd02:	2b40      	cmp	r3, #64	@ 0x40
 800bd04:	d007      	beq.n	800bd16 <USBD_StdEPReq+0x30>
 800bd06:	2b40      	cmp	r3, #64	@ 0x40
 800bd08:	f200 8145 	bhi.w	800bf96 <USBD_StdEPReq+0x2b0>
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d00c      	beq.n	800bd2a <USBD_StdEPReq+0x44>
 800bd10:	2b20      	cmp	r3, #32
 800bd12:	f040 8140 	bne.w	800bf96 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	4798      	blx	r3
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]
      break;
 800bd28:	e13a      	b.n	800bfa0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	d007      	beq.n	800bd42 <USBD_StdEPReq+0x5c>
 800bd32:	2b03      	cmp	r3, #3
 800bd34:	f300 8129 	bgt.w	800bf8a <USBD_StdEPReq+0x2a4>
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d07f      	beq.n	800be3c <USBD_StdEPReq+0x156>
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d03c      	beq.n	800bdba <USBD_StdEPReq+0xd4>
 800bd40:	e123      	b.n	800bf8a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd48:	b2db      	uxtb	r3, r3
 800bd4a:	2b02      	cmp	r3, #2
 800bd4c:	d002      	beq.n	800bd54 <USBD_StdEPReq+0x6e>
 800bd4e:	2b03      	cmp	r3, #3
 800bd50:	d016      	beq.n	800bd80 <USBD_StdEPReq+0x9a>
 800bd52:	e02c      	b.n	800bdae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd54:	7bbb      	ldrb	r3, [r7, #14]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00d      	beq.n	800bd76 <USBD_StdEPReq+0x90>
 800bd5a:	7bbb      	ldrb	r3, [r7, #14]
 800bd5c:	2b80      	cmp	r3, #128	@ 0x80
 800bd5e:	d00a      	beq.n	800bd76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd60:	7bbb      	ldrb	r3, [r7, #14]
 800bd62:	4619      	mov	r1, r3
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f001 f8f1 	bl	800cf4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bd6a:	2180      	movs	r1, #128	@ 0x80
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f001 f8ed 	bl	800cf4c <USBD_LL_StallEP>
 800bd72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd74:	e020      	b.n	800bdb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bd76:	6839      	ldr	r1, [r7, #0]
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fc6f 	bl	800c65c <USBD_CtlError>
              break;
 800bd7e:	e01b      	b.n	800bdb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	885b      	ldrh	r3, [r3, #2]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10e      	bne.n	800bda6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd88:	7bbb      	ldrb	r3, [r7, #14]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00b      	beq.n	800bda6 <USBD_StdEPReq+0xc0>
 800bd8e:	7bbb      	ldrb	r3, [r7, #14]
 800bd90:	2b80      	cmp	r3, #128	@ 0x80
 800bd92:	d008      	beq.n	800bda6 <USBD_StdEPReq+0xc0>
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	88db      	ldrh	r3, [r3, #6]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d104      	bne.n	800bda6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bd9c:	7bbb      	ldrb	r3, [r7, #14]
 800bd9e:	4619      	mov	r1, r3
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f001 f8d3 	bl	800cf4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 fd23 	bl	800c7f2 <USBD_CtlSendStatus>

              break;
 800bdac:	e004      	b.n	800bdb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fc53 	bl	800c65c <USBD_CtlError>
              break;
 800bdb6:	bf00      	nop
          }
          break;
 800bdb8:	e0ec      	b.n	800bf94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d002      	beq.n	800bdcc <USBD_StdEPReq+0xe6>
 800bdc6:	2b03      	cmp	r3, #3
 800bdc8:	d016      	beq.n	800bdf8 <USBD_StdEPReq+0x112>
 800bdca:	e030      	b.n	800be2e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdcc:	7bbb      	ldrb	r3, [r7, #14]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00d      	beq.n	800bdee <USBD_StdEPReq+0x108>
 800bdd2:	7bbb      	ldrb	r3, [r7, #14]
 800bdd4:	2b80      	cmp	r3, #128	@ 0x80
 800bdd6:	d00a      	beq.n	800bdee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	4619      	mov	r1, r3
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f001 f8b5 	bl	800cf4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bde2:	2180      	movs	r1, #128	@ 0x80
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f001 f8b1 	bl	800cf4c <USBD_LL_StallEP>
 800bdea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bdec:	e025      	b.n	800be3a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fc33 	bl	800c65c <USBD_CtlError>
              break;
 800bdf6:	e020      	b.n	800be3a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	885b      	ldrh	r3, [r3, #2]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d11b      	bne.n	800be38 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800be00:	7bbb      	ldrb	r3, [r7, #14]
 800be02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be06:	2b00      	cmp	r3, #0
 800be08:	d004      	beq.n	800be14 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f001 f8bb 	bl	800cf8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fcec 	bl	800c7f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	6839      	ldr	r1, [r7, #0]
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	4798      	blx	r3
 800be28:	4603      	mov	r3, r0
 800be2a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800be2c:	e004      	b.n	800be38 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fc13 	bl	800c65c <USBD_CtlError>
              break;
 800be36:	e000      	b.n	800be3a <USBD_StdEPReq+0x154>
              break;
 800be38:	bf00      	nop
          }
          break;
 800be3a:	e0ab      	b.n	800bf94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b02      	cmp	r3, #2
 800be46:	d002      	beq.n	800be4e <USBD_StdEPReq+0x168>
 800be48:	2b03      	cmp	r3, #3
 800be4a:	d032      	beq.n	800beb2 <USBD_StdEPReq+0x1cc>
 800be4c:	e097      	b.n	800bf7e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be4e:	7bbb      	ldrb	r3, [r7, #14]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d007      	beq.n	800be64 <USBD_StdEPReq+0x17e>
 800be54:	7bbb      	ldrb	r3, [r7, #14]
 800be56:	2b80      	cmp	r3, #128	@ 0x80
 800be58:	d004      	beq.n	800be64 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800be5a:	6839      	ldr	r1, [r7, #0]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f000 fbfd 	bl	800c65c <USBD_CtlError>
                break;
 800be62:	e091      	b.n	800bf88 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	da0b      	bge.n	800be84 <USBD_StdEPReq+0x19e>
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
 800be6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	3310      	adds	r3, #16
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	4413      	add	r3, r2
 800be80:	3304      	adds	r3, #4
 800be82:	e00b      	b.n	800be9c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be8a:	4613      	mov	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	4413      	add	r3, r2
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	4413      	add	r3, r2
 800be9a:	3304      	adds	r3, #4
 800be9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2200      	movs	r2, #0
 800bea2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	2202      	movs	r2, #2
 800bea8:	4619      	mov	r1, r3
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fc47 	bl	800c73e <USBD_CtlSendData>
              break;
 800beb0:	e06a      	b.n	800bf88 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800beb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	da11      	bge.n	800bede <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	f003 020f 	and.w	r2, r3, #15
 800bec0:	6879      	ldr	r1, [r7, #4]
 800bec2:	4613      	mov	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	4413      	add	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	440b      	add	r3, r1
 800becc:	3324      	adds	r3, #36	@ 0x24
 800bece:	881b      	ldrh	r3, [r3, #0]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d117      	bne.n	800bf04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fbc0 	bl	800c65c <USBD_CtlError>
                  break;
 800bedc:	e054      	b.n	800bf88 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bede:	7bbb      	ldrb	r3, [r7, #14]
 800bee0:	f003 020f 	and.w	r2, r3, #15
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	440b      	add	r3, r1
 800bef0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d104      	bne.n	800bf04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fbad 	bl	800c65c <USBD_CtlError>
                  break;
 800bf02:	e041      	b.n	800bf88 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	da0b      	bge.n	800bf24 <USBD_StdEPReq+0x23e>
 800bf0c:	7bbb      	ldrb	r3, [r7, #14]
 800bf0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	3310      	adds	r3, #16
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	4413      	add	r3, r2
 800bf20:	3304      	adds	r3, #4
 800bf22:	e00b      	b.n	800bf3c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	4413      	add	r3, r2
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bf3e:	7bbb      	ldrb	r3, [r7, #14]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <USBD_StdEPReq+0x264>
 800bf44:	7bbb      	ldrb	r3, [r7, #14]
 800bf46:	2b80      	cmp	r3, #128	@ 0x80
 800bf48:	d103      	bne.n	800bf52 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	e00e      	b.n	800bf70 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bf52:	7bbb      	ldrb	r3, [r7, #14]
 800bf54:	4619      	mov	r1, r3
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f001 f836 	bl	800cfc8 <USBD_LL_IsStallEP>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d003      	beq.n	800bf6a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	2201      	movs	r2, #1
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	e002      	b.n	800bf70 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	2202      	movs	r2, #2
 800bf74:	4619      	mov	r1, r3
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fbe1 	bl	800c73e <USBD_CtlSendData>
              break;
 800bf7c:	e004      	b.n	800bf88 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fb6b 	bl	800c65c <USBD_CtlError>
              break;
 800bf86:	bf00      	nop
          }
          break;
 800bf88:	e004      	b.n	800bf94 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bf8a:	6839      	ldr	r1, [r7, #0]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f000 fb65 	bl	800c65c <USBD_CtlError>
          break;
 800bf92:	bf00      	nop
      }
      break;
 800bf94:	e004      	b.n	800bfa0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fb5f 	bl	800c65c <USBD_CtlError>
      break;
 800bf9e:	bf00      	nop
  }

  return ret;
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3710      	adds	r7, #16
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
	...

0800bfac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b084      	sub	sp, #16
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	885b      	ldrh	r3, [r3, #2]
 800bfc6:	0a1b      	lsrs	r3, r3, #8
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	2b0e      	cmp	r3, #14
 800bfce:	f200 8152 	bhi.w	800c276 <USBD_GetDescriptor+0x2ca>
 800bfd2:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd8 <USBD_GetDescriptor+0x2c>)
 800bfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd8:	0800c049 	.word	0x0800c049
 800bfdc:	0800c061 	.word	0x0800c061
 800bfe0:	0800c0a1 	.word	0x0800c0a1
 800bfe4:	0800c277 	.word	0x0800c277
 800bfe8:	0800c277 	.word	0x0800c277
 800bfec:	0800c217 	.word	0x0800c217
 800bff0:	0800c243 	.word	0x0800c243
 800bff4:	0800c277 	.word	0x0800c277
 800bff8:	0800c277 	.word	0x0800c277
 800bffc:	0800c277 	.word	0x0800c277
 800c000:	0800c277 	.word	0x0800c277
 800c004:	0800c277 	.word	0x0800c277
 800c008:	0800c277 	.word	0x0800c277
 800c00c:	0800c277 	.word	0x0800c277
 800c010:	0800c015 	.word	0x0800c015
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00b      	beq.n	800c038 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c026:	69db      	ldr	r3, [r3, #28]
 800c028:	687a      	ldr	r2, [r7, #4]
 800c02a:	7c12      	ldrb	r2, [r2, #16]
 800c02c:	f107 0108 	add.w	r1, r7, #8
 800c030:	4610      	mov	r0, r2
 800c032:	4798      	blx	r3
 800c034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c036:	e126      	b.n	800c286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c038:	6839      	ldr	r1, [r7, #0]
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fb0e 	bl	800c65c <USBD_CtlError>
        err++;
 800c040:	7afb      	ldrb	r3, [r7, #11]
 800c042:	3301      	adds	r3, #1
 800c044:	72fb      	strb	r3, [r7, #11]
      break;
 800c046:	e11e      	b.n	800c286 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	7c12      	ldrb	r2, [r2, #16]
 800c054:	f107 0108 	add.w	r1, r7, #8
 800c058:	4610      	mov	r0, r2
 800c05a:	4798      	blx	r3
 800c05c:	60f8      	str	r0, [r7, #12]
      break;
 800c05e:	e112      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	7c1b      	ldrb	r3, [r3, #16]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10d      	bne.n	800c084 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c070:	f107 0208 	add.w	r2, r7, #8
 800c074:	4610      	mov	r0, r2
 800c076:	4798      	blx	r3
 800c078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	3301      	adds	r3, #1
 800c07e:	2202      	movs	r2, #2
 800c080:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c082:	e100      	b.n	800c286 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08c:	f107 0208 	add.w	r2, r7, #8
 800c090:	4610      	mov	r0, r2
 800c092:	4798      	blx	r3
 800c094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3301      	adds	r3, #1
 800c09a:	2202      	movs	r2, #2
 800c09c:	701a      	strb	r2, [r3, #0]
      break;
 800c09e:	e0f2      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	885b      	ldrh	r3, [r3, #2]
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b05      	cmp	r3, #5
 800c0a8:	f200 80ac 	bhi.w	800c204 <USBD_GetDescriptor+0x258>
 800c0ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b4 <USBD_GetDescriptor+0x108>)
 800c0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b2:	bf00      	nop
 800c0b4:	0800c0cd 	.word	0x0800c0cd
 800c0b8:	0800c101 	.word	0x0800c101
 800c0bc:	0800c135 	.word	0x0800c135
 800c0c0:	0800c169 	.word	0x0800c169
 800c0c4:	0800c19d 	.word	0x0800c19d
 800c0c8:	0800c1d1 	.word	0x0800c1d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00b      	beq.n	800c0f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	7c12      	ldrb	r2, [r2, #16]
 800c0e4:	f107 0108 	add.w	r1, r7, #8
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	4798      	blx	r3
 800c0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0ee:	e091      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 fab2 	bl	800c65c <USBD_CtlError>
            err++;
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c0fe:	e089      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00b      	beq.n	800c124 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	7c12      	ldrb	r2, [r2, #16]
 800c118:	f107 0108 	add.w	r1, r7, #8
 800c11c:	4610      	mov	r0, r2
 800c11e:	4798      	blx	r3
 800c120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c122:	e077      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 fa98 	bl	800c65c <USBD_CtlError>
            err++;
 800c12c:	7afb      	ldrb	r3, [r7, #11]
 800c12e:	3301      	adds	r3, #1
 800c130:	72fb      	strb	r3, [r7, #11]
          break;
 800c132:	e06f      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00b      	beq.n	800c158 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c146:	68db      	ldr	r3, [r3, #12]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	7c12      	ldrb	r2, [r2, #16]
 800c14c:	f107 0108 	add.w	r1, r7, #8
 800c150:	4610      	mov	r0, r2
 800c152:	4798      	blx	r3
 800c154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c156:	e05d      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c158:	6839      	ldr	r1, [r7, #0]
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f000 fa7e 	bl	800c65c <USBD_CtlError>
            err++;
 800c160:	7afb      	ldrb	r3, [r7, #11]
 800c162:	3301      	adds	r3, #1
 800c164:	72fb      	strb	r3, [r7, #11]
          break;
 800c166:	e055      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00b      	beq.n	800c18c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	7c12      	ldrb	r2, [r2, #16]
 800c180:	f107 0108 	add.w	r1, r7, #8
 800c184:	4610      	mov	r0, r2
 800c186:	4798      	blx	r3
 800c188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c18a:	e043      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c18c:	6839      	ldr	r1, [r7, #0]
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 fa64 	bl	800c65c <USBD_CtlError>
            err++;
 800c194:	7afb      	ldrb	r3, [r7, #11]
 800c196:	3301      	adds	r3, #1
 800c198:	72fb      	strb	r3, [r7, #11]
          break;
 800c19a:	e03b      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d00b      	beq.n	800c1c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1ae:	695b      	ldr	r3, [r3, #20]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	7c12      	ldrb	r2, [r2, #16]
 800c1b4:	f107 0108 	add.w	r1, r7, #8
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1be:	e029      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 fa4a 	bl	800c65c <USBD_CtlError>
            err++;
 800c1c8:	7afb      	ldrb	r3, [r7, #11]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800c1ce:	e021      	b.n	800c214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1d6:	699b      	ldr	r3, [r3, #24]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00b      	beq.n	800c1f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c1e2:	699b      	ldr	r3, [r3, #24]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	7c12      	ldrb	r2, [r2, #16]
 800c1e8:	f107 0108 	add.w	r1, r7, #8
 800c1ec:	4610      	mov	r0, r2
 800c1ee:	4798      	blx	r3
 800c1f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c1f2:	e00f      	b.n	800c214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	f000 fa30 	bl	800c65c <USBD_CtlError>
            err++;
 800c1fc:	7afb      	ldrb	r3, [r7, #11]
 800c1fe:	3301      	adds	r3, #1
 800c200:	72fb      	strb	r3, [r7, #11]
          break;
 800c202:	e007      	b.n	800c214 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa28 	bl	800c65c <USBD_CtlError>
          err++;
 800c20c:	7afb      	ldrb	r3, [r7, #11]
 800c20e:	3301      	adds	r3, #1
 800c210:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c212:	bf00      	nop
      }
      break;
 800c214:	e037      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	7c1b      	ldrb	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d109      	bne.n	800c232 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c226:	f107 0208 	add.w	r2, r7, #8
 800c22a:	4610      	mov	r0, r2
 800c22c:	4798      	blx	r3
 800c22e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c230:	e029      	b.n	800c286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c232:	6839      	ldr	r1, [r7, #0]
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fa11 	bl	800c65c <USBD_CtlError>
        err++;
 800c23a:	7afb      	ldrb	r3, [r7, #11]
 800c23c:	3301      	adds	r3, #1
 800c23e:	72fb      	strb	r3, [r7, #11]
      break;
 800c240:	e021      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	7c1b      	ldrb	r3, [r3, #16]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10d      	bne.n	800c266 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c252:	f107 0208 	add.w	r2, r7, #8
 800c256:	4610      	mov	r0, r2
 800c258:	4798      	blx	r3
 800c25a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	3301      	adds	r3, #1
 800c260:	2207      	movs	r2, #7
 800c262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c264:	e00f      	b.n	800c286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c266:	6839      	ldr	r1, [r7, #0]
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f000 f9f7 	bl	800c65c <USBD_CtlError>
        err++;
 800c26e:	7afb      	ldrb	r3, [r7, #11]
 800c270:	3301      	adds	r3, #1
 800c272:	72fb      	strb	r3, [r7, #11]
      break;
 800c274:	e007      	b.n	800c286 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f9ef 	bl	800c65c <USBD_CtlError>
      err++;
 800c27e:	7afb      	ldrb	r3, [r7, #11]
 800c280:	3301      	adds	r3, #1
 800c282:	72fb      	strb	r3, [r7, #11]
      break;
 800c284:	bf00      	nop
  }

  if (err != 0U)
 800c286:	7afb      	ldrb	r3, [r7, #11]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d11e      	bne.n	800c2ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	88db      	ldrh	r3, [r3, #6]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d016      	beq.n	800c2c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c294:	893b      	ldrh	r3, [r7, #8]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00e      	beq.n	800c2b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	88da      	ldrh	r2, [r3, #6]
 800c29e:	893b      	ldrh	r3, [r7, #8]
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	bf28      	it	cs
 800c2a4:	4613      	movcs	r3, r2
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c2aa:	893b      	ldrh	r3, [r7, #8]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	68f9      	ldr	r1, [r7, #12]
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f000 fa44 	bl	800c73e <USBD_CtlSendData>
 800c2b6:	e009      	b.n	800c2cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f9ce 	bl	800c65c <USBD_CtlError>
 800c2c0:	e004      	b.n	800c2cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fa95 	bl	800c7f2 <USBD_CtlSendStatus>
 800c2c8:	e000      	b.n	800c2cc <USBD_GetDescriptor+0x320>
    return;
 800c2ca:	bf00      	nop
  }
}
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop

0800c2d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	889b      	ldrh	r3, [r3, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d131      	bne.n	800c34a <USBD_SetAddress+0x76>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	88db      	ldrh	r3, [r3, #6]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d12d      	bne.n	800c34a <USBD_SetAddress+0x76>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	885b      	ldrh	r3, [r3, #2]
 800c2f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c2f4:	d829      	bhi.n	800c34a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	885b      	ldrh	r3, [r3, #2]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b03      	cmp	r3, #3
 800c30c:	d104      	bne.n	800c318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c30e:	6839      	ldr	r1, [r7, #0]
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f000 f9a3 	bl	800c65c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c316:	e01d      	b.n	800c354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7bfa      	ldrb	r2, [r7, #15]
 800c31c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f000 fe7b 	bl	800d020 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fa61 	bl	800c7f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c330:	7bfb      	ldrb	r3, [r7, #15]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d004      	beq.n	800c340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2202      	movs	r2, #2
 800c33a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c33e:	e009      	b.n	800c354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c348:	e004      	b.n	800c354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c34a:	6839      	ldr	r1, [r7, #0]
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f985 	bl	800c65c <USBD_CtlError>
  }
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	3710      	adds	r7, #16
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	885b      	ldrh	r3, [r3, #2]
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	4b4c      	ldr	r3, [pc, #304]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c374:	4b4b      	ldr	r3, [pc, #300]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	2b01      	cmp	r3, #1
 800c37a:	d905      	bls.n	800c388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 f96c 	bl	800c65c <USBD_CtlError>
    return USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e088      	b.n	800c49a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38e:	b2db      	uxtb	r3, r3
 800c390:	2b02      	cmp	r3, #2
 800c392:	d002      	beq.n	800c39a <USBD_SetConfig+0x3e>
 800c394:	2b03      	cmp	r3, #3
 800c396:	d025      	beq.n	800c3e4 <USBD_SetConfig+0x88>
 800c398:	e071      	b.n	800c47e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c39a:	4b42      	ldr	r3, [pc, #264]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d01c      	beq.n	800c3dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c3a2:	4b40      	ldr	r3, [pc, #256]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c3a4:	781b      	ldrb	r3, [r3, #0]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c3ac:	4b3d      	ldr	r3, [pc, #244]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f7ff f992 	bl	800b6dc <USBD_SetClassConfig>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d004      	beq.n	800c3cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c3c2:	6839      	ldr	r1, [r7, #0]
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 f949 	bl	800c65c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c3ca:	e065      	b.n	800c498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fa10 	bl	800c7f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c3da:	e05d      	b.n	800c498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 fa08 	bl	800c7f2 <USBD_CtlSendStatus>
      break;
 800c3e2:	e059      	b.n	800c498 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c3e4:	4b2f      	ldr	r3, [pc, #188]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d112      	bne.n	800c412 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2202      	movs	r2, #2
 800c3f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c3f4:	4b2b      	ldr	r3, [pc, #172]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c3fe:	4b29      	ldr	r3, [pc, #164]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f7ff f985 	bl	800b714 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f9f1 	bl	800c7f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c410:	e042      	b.n	800c498 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c412:	4b24      	ldr	r3, [pc, #144]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d02a      	beq.n	800c476 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	b2db      	uxtb	r3, r3
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff f973 	bl	800b714 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c42e:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	461a      	mov	r2, r3
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c438:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	4619      	mov	r1, r3
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f7ff f94c 	bl	800b6dc <USBD_SetClassConfig>
 800c444:	4603      	mov	r3, r0
 800c446:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d00f      	beq.n	800c46e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c44e:	6839      	ldr	r1, [r7, #0]
 800c450:	6878      	ldr	r0, [r7, #4]
 800c452:	f000 f903 	bl	800c65c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	4619      	mov	r1, r3
 800c45e:	6878      	ldr	r0, [r7, #4]
 800c460:	f7ff f958 	bl	800b714 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2202      	movs	r2, #2
 800c468:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c46c:	e014      	b.n	800c498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f9bf 	bl	800c7f2 <USBD_CtlSendStatus>
      break;
 800c474:	e010      	b.n	800c498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 f9bb 	bl	800c7f2 <USBD_CtlSendStatus>
      break;
 800c47c:	e00c      	b.n	800c498 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f8eb 	bl	800c65c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c486:	4b07      	ldr	r3, [pc, #28]	@ (800c4a4 <USBD_SetConfig+0x148>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff f941 	bl	800b714 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c492:	2303      	movs	r3, #3
 800c494:	73fb      	strb	r3, [r7, #15]
      break;
 800c496:	bf00      	nop
  }

  return ret;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20000408 	.word	0x20000408

0800c4a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b082      	sub	sp, #8
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	88db      	ldrh	r3, [r3, #6]
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d004      	beq.n	800c4c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 f8cd 	bl	800c65c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c4c2:	e023      	b.n	800c50c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	dc02      	bgt.n	800c4d6 <USBD_GetConfig+0x2e>
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	dc03      	bgt.n	800c4dc <USBD_GetConfig+0x34>
 800c4d4:	e015      	b.n	800c502 <USBD_GetConfig+0x5a>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	d00b      	beq.n	800c4f2 <USBD_GetConfig+0x4a>
 800c4da:	e012      	b.n	800c502 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f927 	bl	800c73e <USBD_CtlSendData>
        break;
 800c4f0:	e00c      	b.n	800c50c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	3304      	adds	r3, #4
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	f000 f91f 	bl	800c73e <USBD_CtlSendData>
        break;
 800c500:	e004      	b.n	800c50c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f8a9 	bl	800c65c <USBD_CtlError>
        break;
 800c50a:	bf00      	nop
}
 800c50c:	bf00      	nop
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c524:	b2db      	uxtb	r3, r3
 800c526:	3b01      	subs	r3, #1
 800c528:	2b02      	cmp	r3, #2
 800c52a:	d81e      	bhi.n	800c56a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	88db      	ldrh	r3, [r3, #6]
 800c530:	2b02      	cmp	r3, #2
 800c532:	d004      	beq.n	800c53e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c534:	6839      	ldr	r1, [r7, #0]
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f890 	bl	800c65c <USBD_CtlError>
        break;
 800c53c:	e01a      	b.n	800c574 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d005      	beq.n	800c55a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	f043 0202 	orr.w	r2, r3, #2
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	330c      	adds	r3, #12
 800c55e:	2202      	movs	r2, #2
 800c560:	4619      	mov	r1, r3
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f8eb 	bl	800c73e <USBD_CtlSendData>
      break;
 800c568:	e004      	b.n	800c574 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f875 	bl	800c65c <USBD_CtlError>
      break;
 800c572:	bf00      	nop
  }
}
 800c574:	bf00      	nop
 800c576:	3708      	adds	r7, #8
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b082      	sub	sp, #8
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	885b      	ldrh	r3, [r3, #2]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d106      	bne.n	800c59c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2201      	movs	r2, #1
 800c592:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 f92b 	bl	800c7f2 <USBD_CtlSendStatus>
  }
}
 800c59c:	bf00      	nop
 800c59e:	3708      	adds	r7, #8
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d80b      	bhi.n	800c5d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	885b      	ldrh	r3, [r3, #2]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d10c      	bne.n	800c5de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f910 	bl	800c7f2 <USBD_CtlSendStatus>
      }
      break;
 800c5d2:	e004      	b.n	800c5de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f840 	bl	800c65c <USBD_CtlError>
      break;
 800c5dc:	e000      	b.n	800c5e0 <USBD_ClrFeature+0x3c>
      break;
 800c5de:	bf00      	nop
  }
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	781a      	ldrb	r2, [r3, #0]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	3301      	adds	r3, #1
 800c602:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	781a      	ldrb	r2, [r3, #0]
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	3301      	adds	r3, #1
 800c610:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff fa92 	bl	800bb3c <SWAPBYTE>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3301      	adds	r3, #1
 800c624:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	3301      	adds	r3, #1
 800c62a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c62c:	68f8      	ldr	r0, [r7, #12]
 800c62e:	f7ff fa85 	bl	800bb3c <SWAPBYTE>
 800c632:	4603      	mov	r3, r0
 800c634:	461a      	mov	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	3301      	adds	r3, #1
 800c63e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	3301      	adds	r3, #1
 800c644:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c646:	68f8      	ldr	r0, [r7, #12]
 800c648:	f7ff fa78 	bl	800bb3c <SWAPBYTE>
 800c64c:	4603      	mov	r3, r0
 800c64e:	461a      	mov	r2, r3
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	80da      	strh	r2, [r3, #6]
}
 800c654:	bf00      	nop
 800c656:	3710      	adds	r7, #16
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c666:	2180      	movs	r1, #128	@ 0x80
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fc6f 	bl	800cf4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c66e:	2100      	movs	r1, #0
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 fc6b 	bl	800cf4c <USBD_LL_StallEP>
}
 800c676:	bf00      	nop
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b086      	sub	sp, #24
 800c682:	af00      	add	r7, sp, #0
 800c684:	60f8      	str	r0, [r7, #12]
 800c686:	60b9      	str	r1, [r7, #8]
 800c688:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c68a:	2300      	movs	r3, #0
 800c68c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d036      	beq.n	800c702 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c698:	6938      	ldr	r0, [r7, #16]
 800c69a:	f000 f836 	bl	800c70a <USBD_GetLen>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	3301      	adds	r3, #1
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	005b      	lsls	r3, r3, #1
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	4413      	add	r3, r2
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	7812      	ldrb	r2, [r2, #0]
 800c6b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6b8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	4413      	add	r3, r2
 800c6c4:	2203      	movs	r2, #3
 800c6c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c6ce:	e013      	b.n	800c6f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c6d0:	7dfb      	ldrb	r3, [r7, #23]
 800c6d2:	68ba      	ldr	r2, [r7, #8]
 800c6d4:	4413      	add	r3, r2
 800c6d6:	693a      	ldr	r2, [r7, #16]
 800c6d8:	7812      	ldrb	r2, [r2, #0]
 800c6da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	613b      	str	r3, [r7, #16]
    idx++;
 800c6e2:	7dfb      	ldrb	r3, [r7, #23]
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c6e8:	7dfb      	ldrb	r3, [r7, #23]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c6f2:	7dfb      	ldrb	r3, [r7, #23]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e7      	bne.n	800c6d0 <USBD_GetString+0x52>
 800c700:	e000      	b.n	800c704 <USBD_GetString+0x86>
    return;
 800c702:	bf00      	nop
  }
}
 800c704:	3718      	adds	r7, #24
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}

0800c70a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c70a:	b480      	push	{r7}
 800c70c:	b085      	sub	sp, #20
 800c70e:	af00      	add	r7, sp, #0
 800c710:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c712:	2300      	movs	r3, #0
 800c714:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c71a:	e005      	b.n	800c728 <USBD_GetLen+0x1e>
  {
    len++;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	3301      	adds	r3, #1
 800c720:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	3301      	adds	r3, #1
 800c726:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1f5      	bne.n	800c71c <USBD_GetLen+0x12>
  }

  return len;
 800c730:	7bfb      	ldrb	r3, [r7, #15]
}
 800c732:	4618      	mov	r0, r3
 800c734:	3714      	adds	r7, #20
 800c736:	46bd      	mov	sp, r7
 800c738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73c:	4770      	bx	lr

0800c73e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b084      	sub	sp, #16
 800c742:	af00      	add	r7, sp, #0
 800c744:	60f8      	str	r0, [r7, #12]
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	2202      	movs	r2, #2
 800c74e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	68ba      	ldr	r2, [r7, #8]
 800c762:	2100      	movs	r1, #0
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f000 fc7a 	bl	800d05e <USBD_LL_Transmit>

  return USBD_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	2100      	movs	r1, #0
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f000 fc69 	bl	800d05e <USBD_LL_Transmit>

  return USBD_OK;
 800c78c:	2300      	movs	r3, #0
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3710      	adds	r7, #16
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}

0800c796 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2203      	movs	r2, #3
 800c7a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	2100      	movs	r1, #0
 800c7c0:	68f8      	ldr	r0, [r7, #12]
 800c7c2:	f000 fc6d 	bl	800d0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7c6:	2300      	movs	r3, #0
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3710      	adds	r7, #16
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}

0800c7d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	60f8      	str	r0, [r7, #12]
 800c7d8:	60b9      	str	r1, [r7, #8]
 800c7da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	2100      	movs	r1, #0
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f000 fc5c 	bl	800d0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c7e8:	2300      	movs	r3, #0
}
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}

0800c7f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b082      	sub	sp, #8
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2204      	movs	r2, #4
 800c7fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c802:	2300      	movs	r3, #0
 800c804:	2200      	movs	r2, #0
 800c806:	2100      	movs	r1, #0
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f000 fc28 	bl	800d05e <USBD_LL_Transmit>

  return USBD_OK;
 800c80e:	2300      	movs	r3, #0
}
 800c810:	4618      	mov	r0, r3
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b082      	sub	sp, #8
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2205      	movs	r2, #5
 800c824:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c828:	2300      	movs	r3, #0
 800c82a:	2200      	movs	r2, #0
 800c82c:	2100      	movs	r1, #0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fc36 	bl	800d0a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
	...

0800c840 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c844:	2200      	movs	r2, #0
 800c846:	4912      	ldr	r1, [pc, #72]	@ (800c890 <MX_USB_Device_Init+0x50>)
 800c848:	4812      	ldr	r0, [pc, #72]	@ (800c894 <MX_USB_Device_Init+0x54>)
 800c84a:	f7fe fed9 	bl	800b600 <USBD_Init>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c854:	f7f4 ffad 	bl	80017b2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c858:	490f      	ldr	r1, [pc, #60]	@ (800c898 <MX_USB_Device_Init+0x58>)
 800c85a:	480e      	ldr	r0, [pc, #56]	@ (800c894 <MX_USB_Device_Init+0x54>)
 800c85c:	f7fe ff00 	bl	800b660 <USBD_RegisterClass>
 800c860:	4603      	mov	r3, r0
 800c862:	2b00      	cmp	r3, #0
 800c864:	d001      	beq.n	800c86a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c866:	f7f4 ffa4 	bl	80017b2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c86a:	490c      	ldr	r1, [pc, #48]	@ (800c89c <MX_USB_Device_Init+0x5c>)
 800c86c:	4809      	ldr	r0, [pc, #36]	@ (800c894 <MX_USB_Device_Init+0x54>)
 800c86e:	f7fe fe51 	bl	800b514 <USBD_CDC_RegisterInterface>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d001      	beq.n	800c87c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c878:	f7f4 ff9b 	bl	80017b2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c87c:	4805      	ldr	r0, [pc, #20]	@ (800c894 <MX_USB_Device_Init+0x54>)
 800c87e:	f7fe ff16 	bl	800b6ae <USBD_Start>
 800c882:	4603      	mov	r3, r0
 800c884:	2b00      	cmp	r3, #0
 800c886:	d001      	beq.n	800c88c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c888:	f7f4 ff93 	bl	80017b2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c88c:	bf00      	nop
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	20000130 	.word	0x20000130
 800c894:	2000040c 	.word	0x2000040c
 800c898:	20000018 	.word	0x20000018
 800c89c:	2000011c 	.word	0x2000011c

0800c8a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	4905      	ldr	r1, [pc, #20]	@ (800c8bc <CDC_Init_FS+0x1c>)
 800c8a8:	4805      	ldr	r0, [pc, #20]	@ (800c8c0 <CDC_Init_FS+0x20>)
 800c8aa:	f7fe fe48 	bl	800b53e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c8ae:	4905      	ldr	r1, [pc, #20]	@ (800c8c4 <CDC_Init_FS+0x24>)
 800c8b0:	4803      	ldr	r0, [pc, #12]	@ (800c8c0 <CDC_Init_FS+0x20>)
 800c8b2:	f7fe fe62 	bl	800b57a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c8b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20000adc 	.word	0x20000adc
 800c8c0:	2000040c 	.word	0x2000040c
 800c8c4:	200006dc 	.word	0x200006dc

0800c8c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c8cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr

0800c8d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b083      	sub	sp, #12
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	4603      	mov	r3, r0
 800c8e0:	6039      	str	r1, [r7, #0]
 800c8e2:	71fb      	strb	r3, [r7, #7]
 800c8e4:	4613      	mov	r3, r2
 800c8e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	2b23      	cmp	r3, #35	@ 0x23
 800c8ec:	d84a      	bhi.n	800c984 <CDC_Control_FS+0xac>
 800c8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800c8f4 <CDC_Control_FS+0x1c>)
 800c8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f4:	0800c985 	.word	0x0800c985
 800c8f8:	0800c985 	.word	0x0800c985
 800c8fc:	0800c985 	.word	0x0800c985
 800c900:	0800c985 	.word	0x0800c985
 800c904:	0800c985 	.word	0x0800c985
 800c908:	0800c985 	.word	0x0800c985
 800c90c:	0800c985 	.word	0x0800c985
 800c910:	0800c985 	.word	0x0800c985
 800c914:	0800c985 	.word	0x0800c985
 800c918:	0800c985 	.word	0x0800c985
 800c91c:	0800c985 	.word	0x0800c985
 800c920:	0800c985 	.word	0x0800c985
 800c924:	0800c985 	.word	0x0800c985
 800c928:	0800c985 	.word	0x0800c985
 800c92c:	0800c985 	.word	0x0800c985
 800c930:	0800c985 	.word	0x0800c985
 800c934:	0800c985 	.word	0x0800c985
 800c938:	0800c985 	.word	0x0800c985
 800c93c:	0800c985 	.word	0x0800c985
 800c940:	0800c985 	.word	0x0800c985
 800c944:	0800c985 	.word	0x0800c985
 800c948:	0800c985 	.word	0x0800c985
 800c94c:	0800c985 	.word	0x0800c985
 800c950:	0800c985 	.word	0x0800c985
 800c954:	0800c985 	.word	0x0800c985
 800c958:	0800c985 	.word	0x0800c985
 800c95c:	0800c985 	.word	0x0800c985
 800c960:	0800c985 	.word	0x0800c985
 800c964:	0800c985 	.word	0x0800c985
 800c968:	0800c985 	.word	0x0800c985
 800c96c:	0800c985 	.word	0x0800c985
 800c970:	0800c985 	.word	0x0800c985
 800c974:	0800c985 	.word	0x0800c985
 800c978:	0800c985 	.word	0x0800c985
 800c97c:	0800c985 	.word	0x0800c985
 800c980:	0800c985 	.word	0x0800c985
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c984:	bf00      	nop
  }

  return (USBD_OK);
 800c986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c988:	4618      	mov	r0, r3
 800c98a:	370c      	adds	r7, #12
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr

0800c994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c99e:	6879      	ldr	r1, [r7, #4]
 800c9a0:	4805      	ldr	r0, [pc, #20]	@ (800c9b8 <CDC_Receive_FS+0x24>)
 800c9a2:	f7fe fdea 	bl	800b57a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c9a6:	4804      	ldr	r0, [pc, #16]	@ (800c9b8 <CDC_Receive_FS+0x24>)
 800c9a8:	f7fe fe00 	bl	800b5ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c9ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	2000040c 	.word	0x2000040c

0800c9bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b087      	sub	sp, #28
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	4613      	mov	r3, r2
 800c9c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	371c      	adds	r7, #28
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9dc:	4770      	bx	lr
	...

0800c9e0 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9e0:	b480      	push	{r7}
 800c9e2:	b083      	sub	sp, #12
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	6039      	str	r1, [r7, #0]
 800c9ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	2212      	movs	r2, #18
 800c9f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c9f2:	4b03      	ldr	r3, [pc, #12]	@ (800ca00 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	370c      	adds	r7, #12
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fe:	4770      	bx	lr
 800ca00:	20000150 	.word	0x20000150

0800ca04 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	6039      	str	r1, [r7, #0]
 800ca0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	2204      	movs	r2, #4
 800ca14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ca16:	4b03      	ldr	r3, [pc, #12]	@ (800ca24 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr
 800ca24:	20000164 	.word	0x20000164

0800ca28 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b082      	sub	sp, #8
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	4603      	mov	r3, r0
 800ca30:	6039      	str	r1, [r7, #0]
 800ca32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca34:	79fb      	ldrb	r3, [r7, #7]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d105      	bne.n	800ca46 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ca3a:	683a      	ldr	r2, [r7, #0]
 800ca3c:	4907      	ldr	r1, [pc, #28]	@ (800ca5c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ca3e:	4808      	ldr	r0, [pc, #32]	@ (800ca60 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ca40:	f7ff fe1d 	bl	800c67e <USBD_GetString>
 800ca44:	e004      	b.n	800ca50 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	4904      	ldr	r1, [pc, #16]	@ (800ca5c <USBD_CDC_ProductStrDescriptor+0x34>)
 800ca4a:	4805      	ldr	r0, [pc, #20]	@ (800ca60 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ca4c:	f7ff fe17 	bl	800c67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca50:	4b02      	ldr	r3, [pc, #8]	@ (800ca5c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	20000edc 	.word	0x20000edc
 800ca60:	0800d278 	.word	0x0800d278

0800ca64 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	6039      	str	r1, [r7, #0]
 800ca6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ca70:	683a      	ldr	r2, [r7, #0]
 800ca72:	4904      	ldr	r1, [pc, #16]	@ (800ca84 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ca74:	4804      	ldr	r0, [pc, #16]	@ (800ca88 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ca76:	f7ff fe02 	bl	800c67e <USBD_GetString>
  return USBD_StrDesc;
 800ca7a:	4b02      	ldr	r3, [pc, #8]	@ (800ca84 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3708      	adds	r7, #8
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20000edc 	.word	0x20000edc
 800ca88:	0800d290 	.word	0x0800d290

0800ca8c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b082      	sub	sp, #8
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	4603      	mov	r3, r0
 800ca94:	6039      	str	r1, [r7, #0]
 800ca96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	221a      	movs	r2, #26
 800ca9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ca9e:	f000 f843 	bl	800cb28 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800caa2:	4b02      	ldr	r3, [pc, #8]	@ (800caac <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3708      	adds	r7, #8
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}
 800caac:	20000168 	.word	0x20000168

0800cab0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	4603      	mov	r3, r0
 800cab8:	6039      	str	r1, [r7, #0]
 800caba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d105      	bne.n	800cace <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	4907      	ldr	r1, [pc, #28]	@ (800cae4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cac6:	4808      	ldr	r0, [pc, #32]	@ (800cae8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cac8:	f7ff fdd9 	bl	800c67e <USBD_GetString>
 800cacc:	e004      	b.n	800cad8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cace:	683a      	ldr	r2, [r7, #0]
 800cad0:	4904      	ldr	r1, [pc, #16]	@ (800cae4 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cad2:	4805      	ldr	r0, [pc, #20]	@ (800cae8 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cad4:	f7ff fdd3 	bl	800c67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cad8:	4b02      	ldr	r3, [pc, #8]	@ (800cae4 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3708      	adds	r7, #8
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	20000edc 	.word	0x20000edc
 800cae8:	0800d2a4 	.word	0x0800d2a4

0800caec <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4603      	mov	r3, r0
 800caf4:	6039      	str	r1, [r7, #0]
 800caf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800caf8:	79fb      	ldrb	r3, [r7, #7]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d105      	bne.n	800cb0a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cafe:	683a      	ldr	r2, [r7, #0]
 800cb00:	4907      	ldr	r1, [pc, #28]	@ (800cb20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cb02:	4808      	ldr	r0, [pc, #32]	@ (800cb24 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cb04:	f7ff fdbb 	bl	800c67e <USBD_GetString>
 800cb08:	e004      	b.n	800cb14 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cb0a:	683a      	ldr	r2, [r7, #0]
 800cb0c:	4904      	ldr	r1, [pc, #16]	@ (800cb20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cb0e:	4805      	ldr	r0, [pc, #20]	@ (800cb24 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cb10:	f7ff fdb5 	bl	800c67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800cb14:	4b02      	ldr	r3, [pc, #8]	@ (800cb20 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3708      	adds	r7, #8
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	20000edc 	.word	0x20000edc
 800cb24:	0800d2b0 	.word	0x0800d2b0

0800cb28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b084      	sub	sp, #16
 800cb2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cb2e:	4b0f      	ldr	r3, [pc, #60]	@ (800cb6c <Get_SerialNum+0x44>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cb34:	4b0e      	ldr	r3, [pc, #56]	@ (800cb70 <Get_SerialNum+0x48>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cb3a:	4b0e      	ldr	r3, [pc, #56]	@ (800cb74 <Get_SerialNum+0x4c>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4413      	add	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d009      	beq.n	800cb62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cb4e:	2208      	movs	r2, #8
 800cb50:	4909      	ldr	r1, [pc, #36]	@ (800cb78 <Get_SerialNum+0x50>)
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f000 f814 	bl	800cb80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cb58:	2204      	movs	r2, #4
 800cb5a:	4908      	ldr	r1, [pc, #32]	@ (800cb7c <Get_SerialNum+0x54>)
 800cb5c:	68b8      	ldr	r0, [r7, #8]
 800cb5e:	f000 f80f 	bl	800cb80 <IntToUnicode>
  }
}
 800cb62:	bf00      	nop
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	1fff7590 	.word	0x1fff7590
 800cb70:	1fff7594 	.word	0x1fff7594
 800cb74:	1fff7598 	.word	0x1fff7598
 800cb78:	2000016a 	.word	0x2000016a
 800cb7c:	2000017a 	.word	0x2000017a

0800cb80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b087      	sub	sp, #28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cb92:	2300      	movs	r3, #0
 800cb94:	75fb      	strb	r3, [r7, #23]
 800cb96:	e027      	b.n	800cbe8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	0f1b      	lsrs	r3, r3, #28
 800cb9c:	2b09      	cmp	r3, #9
 800cb9e:	d80b      	bhi.n	800cbb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	0f1b      	lsrs	r3, r3, #28
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	7dfb      	ldrb	r3, [r7, #23]
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	4619      	mov	r1, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	440b      	add	r3, r1
 800cbb0:	3230      	adds	r2, #48	@ 0x30
 800cbb2:	b2d2      	uxtb	r2, r2
 800cbb4:	701a      	strb	r2, [r3, #0]
 800cbb6:	e00a      	b.n	800cbce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	0f1b      	lsrs	r3, r3, #28
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
 800cbc0:	005b      	lsls	r3, r3, #1
 800cbc2:	4619      	mov	r1, r3
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	440b      	add	r3, r1
 800cbc8:	3237      	adds	r2, #55	@ 0x37
 800cbca:	b2d2      	uxtb	r2, r2
 800cbcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	011b      	lsls	r3, r3, #4
 800cbd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cbd4:	7dfb      	ldrb	r3, [r7, #23]
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	3301      	adds	r3, #1
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	4413      	add	r3, r2
 800cbde:	2200      	movs	r2, #0
 800cbe0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cbe2:	7dfb      	ldrb	r3, [r7, #23]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	75fb      	strb	r3, [r7, #23]
 800cbe8:	7dfa      	ldrb	r2, [r7, #23]
 800cbea:	79fb      	ldrb	r3, [r7, #7]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d3d3      	bcc.n	800cb98 <IntToUnicode+0x18>
  }
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
	...

0800cc00 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b094      	sub	sp, #80	@ 0x50
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cc08:	f107 030c 	add.w	r3, r7, #12
 800cc0c:	2244      	movs	r2, #68	@ 0x44
 800cc0e:	2100      	movs	r1, #0
 800cc10:	4618      	mov	r0, r3
 800cc12:	f000 faf9 	bl	800d208 <memset>
  if(pcdHandle->Instance==USB)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	4a15      	ldr	r2, [pc, #84]	@ (800cc70 <HAL_PCD_MspInit+0x70>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d123      	bne.n	800cc68 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cc20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cc24:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cc26:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800cc2a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cc2c:	f107 030c 	add.w	r3, r7, #12
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f9 ff79 	bl	8006b28 <HAL_RCCEx_PeriphCLKConfig>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d001      	beq.n	800cc40 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800cc3c:	f7f4 fdb9 	bl	80017b2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cc40:	4b0c      	ldr	r3, [pc, #48]	@ (800cc74 <HAL_PCD_MspInit+0x74>)
 800cc42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc44:	4a0b      	ldr	r2, [pc, #44]	@ (800cc74 <HAL_PCD_MspInit+0x74>)
 800cc46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800cc4a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cc4c:	4b09      	ldr	r3, [pc, #36]	@ (800cc74 <HAL_PCD_MspInit+0x74>)
 800cc4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cc50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cc54:	60bb      	str	r3, [r7, #8]
 800cc56:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cc58:	2200      	movs	r2, #0
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	2014      	movs	r0, #20
 800cc5e:	f7f6 f9e0 	bl	8003022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cc62:	2014      	movs	r0, #20
 800cc64:	f7f6 f9f7 	bl	8003056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cc68:	bf00      	nop
 800cc6a:	3750      	adds	r7, #80	@ 0x50
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	40005c00 	.word	0x40005c00
 800cc74:	40021000 	.word	0x40021000

0800cc78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4610      	mov	r0, r2
 800cc90:	f7fe fd58 	bl	800b744 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b082      	sub	sp, #8
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ccae:	78fa      	ldrb	r2, [r7, #3]
 800ccb0:	6879      	ldr	r1, [r7, #4]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	440b      	add	r3, r1
 800ccbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	78fb      	ldrb	r3, [r7, #3]
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	f7fe fd92 	bl	800b7ee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ccca:	bf00      	nop
 800cccc:	3708      	adds	r7, #8
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}

0800ccd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccd2:	b580      	push	{r7, lr}
 800ccd4:	b082      	sub	sp, #8
 800ccd6:	af00      	add	r7, sp, #0
 800ccd8:	6078      	str	r0, [r7, #4]
 800ccda:	460b      	mov	r3, r1
 800ccdc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cce4:	78fa      	ldrb	r2, [r7, #3]
 800cce6:	6879      	ldr	r1, [r7, #4]
 800cce8:	4613      	mov	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	00db      	lsls	r3, r3, #3
 800ccf0:	440b      	add	r3, r1
 800ccf2:	3324      	adds	r3, #36	@ 0x24
 800ccf4:	681a      	ldr	r2, [r3, #0]
 800ccf6:	78fb      	ldrb	r3, [r7, #3]
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7fe fddb 	bl	800b8b4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ccfe:	bf00      	nop
 800cd00:	3708      	adds	r7, #8
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b082      	sub	sp, #8
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7fe feef 	bl	800baf8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cd1a:	bf00      	nop
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b084      	sub	sp, #16
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cd2a:	2301      	movs	r3, #1
 800cd2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	795b      	ldrb	r3, [r3, #5]
 800cd32:	2b02      	cmp	r3, #2
 800cd34:	d001      	beq.n	800cd3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cd36:	f7f4 fd3c 	bl	80017b2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd40:	7bfa      	ldrb	r2, [r7, #15]
 800cd42:	4611      	mov	r1, r2
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7fe fe99 	bl	800ba7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7fe fe45 	bl	800b9e0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cd56:	bf00      	nop
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
	...

0800cd60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe fe94 	bl	800ba9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	7a5b      	ldrb	r3, [r3, #9]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d005      	beq.n	800cd88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd7c:	4b04      	ldr	r3, [pc, #16]	@ (800cd90 <HAL_PCD_SuspendCallback+0x30>)
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	4a03      	ldr	r2, [pc, #12]	@ (800cd90 <HAL_PCD_SuspendCallback+0x30>)
 800cd82:	f043 0306 	orr.w	r3, r3, #6
 800cd86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	e000ed00 	.word	0xe000ed00

0800cd94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	7a5b      	ldrb	r3, [r3, #9]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d007      	beq.n	800cdb4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cda4:	4b08      	ldr	r3, [pc, #32]	@ (800cdc8 <HAL_PCD_ResumeCallback+0x34>)
 800cda6:	691b      	ldr	r3, [r3, #16]
 800cda8:	4a07      	ldr	r2, [pc, #28]	@ (800cdc8 <HAL_PCD_ResumeCallback+0x34>)
 800cdaa:	f023 0306 	bic.w	r3, r3, #6
 800cdae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cdb0:	f000 f9f8 	bl	800d1a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fe fe84 	bl	800bac8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	e000ed00 	.word	0xe000ed00

0800cdcc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cdd4:	4a2b      	ldr	r2, [pc, #172]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4a29      	ldr	r2, [pc, #164]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800cde0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cde4:	4b27      	ldr	r3, [pc, #156]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800cde6:	4a28      	ldr	r2, [pc, #160]	@ (800ce88 <USBD_LL_Init+0xbc>)
 800cde8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cdea:	4b26      	ldr	r3, [pc, #152]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800cdec:	2208      	movs	r2, #8
 800cdee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cdf0:	4b24      	ldr	r3, [pc, #144]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800cdf2:	2202      	movs	r2, #2
 800cdf4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cdf6:	4b23      	ldr	r3, [pc, #140]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800cdf8:	2202      	movs	r2, #2
 800cdfa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cdfc:	4b21      	ldr	r3, [pc, #132]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800cdfe:	2200      	movs	r2, #0
 800ce00:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ce02:	4b20      	ldr	r3, [pc, #128]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ce08:	4b1e      	ldr	r3, [pc, #120]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ce0e:	4b1d      	ldr	r3, [pc, #116]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ce14:	481b      	ldr	r0, [pc, #108]	@ (800ce84 <USBD_LL_Init+0xb8>)
 800ce16:	f7f7 fb80 	bl	800451a <HAL_PCD_Init>
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d001      	beq.n	800ce24 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ce20:	f7f4 fcc7 	bl	80017b2 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce2a:	2318      	movs	r3, #24
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	2100      	movs	r1, #0
 800ce30:	f7f9 f83b 	bl	8005eaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce3a:	2358      	movs	r3, #88	@ 0x58
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2180      	movs	r1, #128	@ 0x80
 800ce40:	f7f9 f833 	bl	8005eaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce4a:	23c0      	movs	r3, #192	@ 0xc0
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	2181      	movs	r1, #129	@ 0x81
 800ce50:	f7f9 f82b 	bl	8005eaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce5a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2101      	movs	r1, #1
 800ce62:	f7f9 f822 	bl	8005eaa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ce70:	2200      	movs	r2, #0
 800ce72:	2182      	movs	r1, #130	@ 0x82
 800ce74:	f7f9 f819 	bl	8005eaa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ce78:	2300      	movs	r3, #0
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	200010dc 	.word	0x200010dc
 800ce88:	40005c00 	.word	0x40005c00

0800ce8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7f7 fc07 	bl	80046b6 <HAL_PCD_Start>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 f97e 	bl	800d1b0 <USBD_Get_USB_Status>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3710      	adds	r7, #16
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b084      	sub	sp, #16
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	461a      	mov	r2, r3
 800ced0:	4603      	mov	r3, r0
 800ced2:	70fb      	strb	r3, [r7, #3]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70bb      	strb	r3, [r7, #2]
 800ced8:	4613      	mov	r3, r2
 800ceda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cedc:	2300      	movs	r3, #0
 800cede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ceea:	78bb      	ldrb	r3, [r7, #2]
 800ceec:	883a      	ldrh	r2, [r7, #0]
 800ceee:	78f9      	ldrb	r1, [r7, #3]
 800cef0:	f7f7 fd4e 	bl	8004990 <HAL_PCD_EP_Open>
 800cef4:	4603      	mov	r3, r0
 800cef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 f958 	bl	800d1b0 <USBD_Get_USB_Status>
 800cf00:	4603      	mov	r3, r0
 800cf02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf04:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
 800cf16:	460b      	mov	r3, r1
 800cf18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf28:	78fa      	ldrb	r2, [r7, #3]
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7f7 fd8e 	bl	8004a4e <HAL_PCD_EP_Close>
 800cf32:	4603      	mov	r3, r0
 800cf34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf36:	7bfb      	ldrb	r3, [r7, #15]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 f939 	bl	800d1b0 <USBD_Get_USB_Status>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf42:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf66:	78fa      	ldrb	r2, [r7, #3]
 800cf68:	4611      	mov	r1, r2
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f7f7 fe37 	bl	8004bde <HAL_PCD_EP_SetStall>
 800cf70:	4603      	mov	r3, r0
 800cf72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 f91a 	bl	800d1b0 <USBD_Get_USB_Status>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf80:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	460b      	mov	r3, r1
 800cf94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cfa4:	78fa      	ldrb	r2, [r7, #3]
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7f7 fe6a 	bl	8004c82 <HAL_PCD_EP_ClrStall>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f000 f8fb 	bl	800d1b0 <USBD_Get_USB_Status>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cfbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3710      	adds	r7, #16
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cfda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cfdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	da0b      	bge.n	800cffc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cfe4:	78fb      	ldrb	r3, [r7, #3]
 800cfe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfea:	68f9      	ldr	r1, [r7, #12]
 800cfec:	4613      	mov	r3, r2
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4413      	add	r3, r2
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	440b      	add	r3, r1
 800cff6:	3312      	adds	r3, #18
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	e00b      	b.n	800d014 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cffc:	78fb      	ldrb	r3, [r7, #3]
 800cffe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	4613      	mov	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4413      	add	r3, r2
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	440b      	add	r3, r1
 800d00e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d012:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d014:	4618      	mov	r0, r3
 800d016:	3714      	adds	r7, #20
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b084      	sub	sp, #16
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	460b      	mov	r3, r1
 800d02a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d02c:	2300      	movs	r3, #0
 800d02e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d030:	2300      	movs	r3, #0
 800d032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d03a:	78fa      	ldrb	r2, [r7, #3]
 800d03c:	4611      	mov	r1, r2
 800d03e:	4618      	mov	r0, r3
 800d040:	f7f7 fc82 	bl	8004948 <HAL_PCD_SetAddress>
 800d044:	4603      	mov	r3, r0
 800d046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d048:	7bfb      	ldrb	r3, [r7, #15]
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 f8b0 	bl	800d1b0 <USBD_Get_USB_Status>
 800d050:	4603      	mov	r3, r0
 800d052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d054:	7bbb      	ldrb	r3, [r7, #14]
}
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b086      	sub	sp, #24
 800d062:	af00      	add	r7, sp, #0
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	607a      	str	r2, [r7, #4]
 800d068:	603b      	str	r3, [r7, #0]
 800d06a:	460b      	mov	r3, r1
 800d06c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d072:	2300      	movs	r3, #0
 800d074:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d07c:	7af9      	ldrb	r1, [r7, #11]
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	f7f7 fd75 	bl	8004b70 <HAL_PCD_EP_Transmit>
 800d086:	4603      	mov	r3, r0
 800d088:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d08a:	7dfb      	ldrb	r3, [r7, #23]
 800d08c:	4618      	mov	r0, r3
 800d08e:	f000 f88f 	bl	800d1b0 <USBD_Get_USB_Status>
 800d092:	4603      	mov	r3, r0
 800d094:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d096:	7dbb      	ldrb	r3, [r7, #22]
}
 800d098:	4618      	mov	r0, r3
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	607a      	str	r2, [r7, #4]
 800d0aa:	603b      	str	r3, [r7, #0]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0be:	7af9      	ldrb	r1, [r7, #11]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	f7f7 fd0b 	bl	8004ade <HAL_PCD_EP_Receive>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0cc:	7dfb      	ldrb	r3, [r7, #23]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f000 f86e 	bl	800d1b0 <USBD_Get_USB_Status>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d0d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3718      	adds	r7, #24
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}

0800d0e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0e2:	b580      	push	{r7, lr}
 800d0e4:	b082      	sub	sp, #8
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d0f4:	78fa      	ldrb	r2, [r7, #3]
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f7 fd21 	bl	8004b40 <HAL_PCD_EP_GetRxCount>
 800d0fe:	4603      	mov	r3, r0
}
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}

0800d108 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
 800d110:	460b      	mov	r3, r1
 800d112:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d114:	78fb      	ldrb	r3, [r7, #3]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d002      	beq.n	800d120 <HAL_PCDEx_LPM_Callback+0x18>
 800d11a:	2b01      	cmp	r3, #1
 800d11c:	d013      	beq.n	800d146 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d11e:	e023      	b.n	800d168 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	7a5b      	ldrb	r3, [r3, #9]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d007      	beq.n	800d138 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d128:	f000 f83c 	bl	800d1a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d12c:	4b10      	ldr	r3, [pc, #64]	@ (800d170 <HAL_PCDEx_LPM_Callback+0x68>)
 800d12e:	691b      	ldr	r3, [r3, #16]
 800d130:	4a0f      	ldr	r2, [pc, #60]	@ (800d170 <HAL_PCDEx_LPM_Callback+0x68>)
 800d132:	f023 0306 	bic.w	r3, r3, #6
 800d136:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fe fcc2 	bl	800bac8 <USBD_LL_Resume>
    break;
 800d144:	e010      	b.n	800d168 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d14c:	4618      	mov	r0, r3
 800d14e:	f7fe fca5 	bl	800ba9c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	7a5b      	ldrb	r3, [r3, #9]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d15a:	4b05      	ldr	r3, [pc, #20]	@ (800d170 <HAL_PCDEx_LPM_Callback+0x68>)
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	4a04      	ldr	r2, [pc, #16]	@ (800d170 <HAL_PCDEx_LPM_Callback+0x68>)
 800d160:	f043 0306 	orr.w	r3, r3, #6
 800d164:	6113      	str	r3, [r2, #16]
    break;
 800d166:	bf00      	nop
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	e000ed00 	.word	0xe000ed00

0800d174 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d174:	b480      	push	{r7}
 800d176:	b083      	sub	sp, #12
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d17c:	4b03      	ldr	r3, [pc, #12]	@ (800d18c <USBD_static_malloc+0x18>)
}
 800d17e:	4618      	mov	r0, r3
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	200013b8 	.word	0x200013b8

0800d190 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]

}
 800d198:	bf00      	nop
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr

0800d1a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d1a8:	f7f4 fab4 	bl	8001714 <SystemClock_Config>
}
 800d1ac:	bf00      	nop
 800d1ae:	bd80      	pop	{r7, pc}

0800d1b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d1be:	79fb      	ldrb	r3, [r7, #7]
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	d817      	bhi.n	800d1f4 <USBD_Get_USB_Status+0x44>
 800d1c4:	a201      	add	r2, pc, #4	@ (adr r2, 800d1cc <USBD_Get_USB_Status+0x1c>)
 800d1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1ca:	bf00      	nop
 800d1cc:	0800d1dd 	.word	0x0800d1dd
 800d1d0:	0800d1e3 	.word	0x0800d1e3
 800d1d4:	0800d1e9 	.word	0x0800d1e9
 800d1d8:	0800d1ef 	.word	0x0800d1ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e0:	e00b      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d1e2:	2303      	movs	r3, #3
 800d1e4:	73fb      	strb	r3, [r7, #15]
    break;
 800d1e6:	e008      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d1e8:	2301      	movs	r3, #1
 800d1ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d1ec:	e005      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f2:	e002      	b.n	800d1fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d1f8:	bf00      	nop
  }
  return usb_status;
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d206:	4770      	bx	lr

0800d208 <memset>:
 800d208:	4402      	add	r2, r0
 800d20a:	4603      	mov	r3, r0
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d100      	bne.n	800d212 <memset+0xa>
 800d210:	4770      	bx	lr
 800d212:	f803 1b01 	strb.w	r1, [r3], #1
 800d216:	e7f9      	b.n	800d20c <memset+0x4>

0800d218 <__libc_init_array>:
 800d218:	b570      	push	{r4, r5, r6, lr}
 800d21a:	4d0d      	ldr	r5, [pc, #52]	@ (800d250 <__libc_init_array+0x38>)
 800d21c:	4c0d      	ldr	r4, [pc, #52]	@ (800d254 <__libc_init_array+0x3c>)
 800d21e:	1b64      	subs	r4, r4, r5
 800d220:	10a4      	asrs	r4, r4, #2
 800d222:	2600      	movs	r6, #0
 800d224:	42a6      	cmp	r6, r4
 800d226:	d109      	bne.n	800d23c <__libc_init_array+0x24>
 800d228:	4d0b      	ldr	r5, [pc, #44]	@ (800d258 <__libc_init_array+0x40>)
 800d22a:	4c0c      	ldr	r4, [pc, #48]	@ (800d25c <__libc_init_array+0x44>)
 800d22c:	f000 f818 	bl	800d260 <_init>
 800d230:	1b64      	subs	r4, r4, r5
 800d232:	10a4      	asrs	r4, r4, #2
 800d234:	2600      	movs	r6, #0
 800d236:	42a6      	cmp	r6, r4
 800d238:	d105      	bne.n	800d246 <__libc_init_array+0x2e>
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d240:	4798      	blx	r3
 800d242:	3601      	adds	r6, #1
 800d244:	e7ee      	b.n	800d224 <__libc_init_array+0xc>
 800d246:	f855 3b04 	ldr.w	r3, [r5], #4
 800d24a:	4798      	blx	r3
 800d24c:	3601      	adds	r6, #1
 800d24e:	e7f2      	b.n	800d236 <__libc_init_array+0x1e>
 800d250:	0800d308 	.word	0x0800d308
 800d254:	0800d308 	.word	0x0800d308
 800d258:	0800d308 	.word	0x0800d308
 800d25c:	0800d30c 	.word	0x0800d30c

0800d260 <_init>:
 800d260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d262:	bf00      	nop
 800d264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d266:	bc08      	pop	{r3}
 800d268:	469e      	mov	lr, r3
 800d26a:	4770      	bx	lr

0800d26c <_fini>:
 800d26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d26e:	bf00      	nop
 800d270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d272:	bc08      	pop	{r3}
 800d274:	469e      	mov	lr, r3
 800d276:	4770      	bx	lr
