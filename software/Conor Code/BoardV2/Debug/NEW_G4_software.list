
NEW_G4_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdfc  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800cfd4  0800cfd4  0000dfd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d05c  0800d05c  0000f184  2**0
                  CONTENTS
  4 .ARM          00000008  0800d05c  0800d05c  0000e05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d064  0800d064  0000f184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d064  0800d064  0000e064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d068  0800d068  0000e068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800d06c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000184  0800d1f0  0000f184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800d1f0  0000f5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002532e  00000000  00000000  0000f1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000581a  00000000  00000000  000344e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00039d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000168d  00000000  00000000  0003ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028071  00000000  00000000  0003d11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a2f0  00000000  00000000  0006518e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebf30  00000000  00000000  0008f47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017b3ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c58  00000000  00000000  0017b3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0018304c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cfbc 	.word	0x0800cfbc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800cfbc 	.word	0x0800cfbc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	@ 0x30
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	2220      	movs	r2, #32
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f00c f929 	bl	800cf64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d12:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d14:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d1c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d22:	4b2e      	ldr	r3, [pc, #184]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d34:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d40:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d46:	4b25      	ldr	r3, [pc, #148]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d52:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d60:	4b1e      	ldr	r3, [pc, #120]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d66:	4b1d      	ldr	r3, [pc, #116]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d7c:	4817      	ldr	r0, [pc, #92]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d7e:	f001 f9d1 	bl	8002124 <HAL_ADC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d88:	f000 fcad 	bl	80016e6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	4811      	ldr	r0, [pc, #68]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000d98:	f001 ff5e 	bl	8002c58 <HAL_ADCEx_MultiModeConfigChannel>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000da2:	f000 fca0 	bl	80016e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_ADC1_Init+0xec>)
 8000da8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000daa:	2306      	movs	r3, #6
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000db2:	237f      	movs	r3, #127	@ 0x7f
 8000db4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000db6:	2304      	movs	r3, #4
 8000db8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4806      	ldr	r0, [pc, #24]	@ (8000ddc <MX_ADC1_Init+0xe8>)
 8000dc4:	f001 fb32 	bl	800242c <HAL_ADC_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000dce:	f000 fc8a 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	3730      	adds	r7, #48	@ 0x30
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200001a0 	.word	0x200001a0
 8000de0:	04300002 	.word	0x04300002

08000de4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2220      	movs	r2, #32
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00c f8b7 	bl	800cf64 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000df6:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000df8:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea8 <MX_ADC2_Init+0xc4>)
 8000dfa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000dfe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e02:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e04:	4b27      	ldr	r3, [pc, #156]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e10:	4b24      	ldr	r3, [pc, #144]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e16:	4b23      	ldr	r3, [pc, #140]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e22:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e42:	4b18      	ldr	r3, [pc, #96]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e48:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e50:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e56:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e5e:	4811      	ldr	r0, [pc, #68]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e60:	f001 f960 	bl	8002124 <HAL_ADC_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000e6a:	f000 fc3c 	bl	80016e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <MX_ADC2_Init+0xc8>)
 8000e70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e72:	2306      	movs	r3, #6
 8000e74:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e7a:	237f      	movs	r3, #127	@ 0x7f
 8000e7c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e7e:	2304      	movs	r3, #4
 8000e80:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e86:	463b      	mov	r3, r7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4806      	ldr	r0, [pc, #24]	@ (8000ea4 <MX_ADC2_Init+0xc0>)
 8000e8c:	f001 face 	bl	800242c <HAL_ADC_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000e96:	f000 fc26 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e9a:	bf00      	nop
 8000e9c:	3720      	adds	r7, #32
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000020c 	.word	0x2000020c
 8000ea8:	50000100 	.word	0x50000100
 8000eac:	2e300800 	.word	0x2e300800

08000eb0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b09e      	sub	sp, #120	@ 0x78
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	2244      	movs	r2, #68	@ 0x44
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00c f847 	bl	800cf64 <memset>
  if(adcHandle->Instance==ADC1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ede:	d16f      	bne.n	8000fc0 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ee4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ee6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eec:	f107 0320 	add.w	r3, r7, #32
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f005 fcc7 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000efc:	f000 fbf3 	bl	80016e6 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f00:	4b52      	ldr	r3, [pc, #328]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a51      	ldr	r2, [pc, #324]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000f08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f0a:	4b50      	ldr	r3, [pc, #320]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d10b      	bne.n	8000f2a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f12:	4b4f      	ldr	r3, [pc, #316]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f16:	4a4e      	ldr	r2, [pc, #312]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f18:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f1e:	4b4c      	ldr	r3, [pc, #304]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	4b49      	ldr	r3, [pc, #292]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a48      	ldr	r2, [pc, #288]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f36:	4b46      	ldr	r3, [pc, #280]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	61bb      	str	r3, [r7, #24]
 8000f40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b43      	ldr	r3, [pc, #268]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	4a42      	ldr	r2, [pc, #264]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f4e:	4b40      	ldr	r3, [pc, #256]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	4a3c      	ldr	r2, [pc, #240]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f66:	4b3a      	ldr	r3, [pc, #232]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_7_Pin|ADC_8_Pin|ADC_9_Pin|ADC_10_Pin;
 8000f72:	230f      	movs	r3, #15
 8000f74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f76:	2303      	movs	r3, #3
 8000f78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f82:	4619      	mov	r1, r3
 8000f84:	4833      	ldr	r0, [pc, #204]	@ (8001054 <HAL_ADC_MspInit+0x1a4>)
 8000f86:	f002 f9f5 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|OPAMP_SIG_2_Pin|OPAMP_SIG_4_Pin;
 8000f8a:	230b      	movs	r3, #11
 8000f8c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f96:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f002 f9e8 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPAMP_SIG_1_Pin|ADC_3_Pin|DIGITAL_IO_2_Pin;
 8000fa4:	f245 0301 	movw	r3, #20481	@ 0x5001
 8000fa8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000faa:	2303      	movs	r3, #3
 8000fac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4827      	ldr	r0, [pc, #156]	@ (8001058 <HAL_ADC_MspInit+0x1a8>)
 8000fba:	f002 f9db 	bl	8003374 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000fbe:	e041      	b.n	8001044 <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a25      	ldr	r2, [pc, #148]	@ (800105c <HAL_ADC_MspInit+0x1ac>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d13c      	bne.n	8001044 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000fce:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fd0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000fd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 fc52 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 8000fe6:	f000 fb7e 	bl	80016e6 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	4a16      	ldr	r2, [pc, #88]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000ff2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_ADC_MspInit+0x19c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d10b      	bne.n	8001014 <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8000ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001000:	4a13      	ldr	r2, [pc, #76]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8001002:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001006:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_ADC_MspInit+0x1a0>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPAMP_SIG_3_Pin;
 800102c:	2320      	movs	r3, #32
 800102e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001030:	2303      	movs	r3, #3
 8001032:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	2300      	movs	r3, #0
 8001036:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OPAMP_SIG_3_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800103c:	4619      	mov	r1, r3
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <HAL_ADC_MspInit+0x1a4>)
 8001040:	f002 f998 	bl	8003374 <HAL_GPIO_Init>
}
 8001044:	bf00      	nop
 8001046:	3778      	adds	r7, #120	@ 0x78
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000278 	.word	0x20000278
 8001050:	40021000 	.word	0x40021000
 8001054:	48000800 	.word	0x48000800
 8001058:	48000400 	.word	0x48000400
 800105c:	50000100 	.word	0x50000100

08001060 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08c      	sub	sp, #48	@ 0x30
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2230      	movs	r2, #48	@ 0x30
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00b ff79 	bl	800cf64 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001072:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <MX_DAC1_Init+0x80>)
 8001074:	4a1b      	ldr	r2, [pc, #108]	@ (80010e4 <MX_DAC1_Init+0x84>)
 8001076:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001078:	4819      	ldr	r0, [pc, #100]	@ (80010e0 <MX_DAC1_Init+0x80>)
 800107a:	f001 ffa0 	bl	8002fbe <HAL_DAC_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001084:	f000 fb2f 	bl	80016e6 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001088:	2302      	movs	r3, #2
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80010a4:	2301      	movs	r3, #1
 80010a6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	480b      	ldr	r0, [pc, #44]	@ (80010e0 <MX_DAC1_Init+0x80>)
 80010b4:	f001 ffa6 	bl	8003004 <HAL_DAC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80010be:	f000 fb12 	bl	80016e6 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	2210      	movs	r2, #16
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <MX_DAC1_Init+0x80>)
 80010ca:	f001 ff9b 	bl	8003004 <HAL_DAC_ConfigChannel>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80010d4:	f000 fb07 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	3730      	adds	r7, #48	@ 0x30
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	2000027c 	.word	0x2000027c
 80010e4:	50000800 	.word	0x50000800

080010e8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a15      	ldr	r2, [pc, #84]	@ (800115c <HAL_DAC_MspInit+0x74>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d124      	bne.n	8001154 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a14      	ldr	r2, [pc, #80]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800112e:	4b0c      	ldr	r3, [pc, #48]	@ (8001160 <HAL_DAC_MspInit+0x78>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 800113a:	2330      	movs	r3, #48	@ 0x30
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113e:	2303      	movs	r3, #3
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f002 f910 	bl	8003374 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	50000800 	.word	0x50000800
 8001160:	40021000 	.word	0x40021000

08001164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b5d      	ldr	r3, [pc, #372]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a5c      	ldr	r2, [pc, #368]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b5a      	ldr	r3, [pc, #360]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001192:	4b57      	ldr	r3, [pc, #348]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a56      	ldr	r2, [pc, #344]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 8001198:	f043 0320 	orr.w	r3, r3, #32
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b54      	ldr	r3, [pc, #336]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b51      	ldr	r3, [pc, #324]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a50      	ldr	r2, [pc, #320]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b4e      	ldr	r3, [pc, #312]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b4b      	ldr	r3, [pc, #300]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a4a      	ldr	r2, [pc, #296]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b48      	ldr	r3, [pc, #288]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011da:	4b45      	ldr	r3, [pc, #276]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a44      	ldr	r2, [pc, #272]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b42      	ldr	r3, [pc, #264]	@ (80012f0 <MX_GPIO_Init+0x18c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 80011f2:	2200      	movs	r2, #0
 80011f4:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 80011f8:	483e      	ldr	r0, [pc, #248]	@ (80012f4 <MX_GPIO_Init+0x190>)
 80011fa:	f002 fa3d 	bl	8003678 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8001204:	483c      	ldr	r0, [pc, #240]	@ (80012f8 <MX_GPIO_Init+0x194>)
 8001206:	f002 fa37 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_EN_GPIO_Port, SD_CARD_EN_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f002 fa30 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2104      	movs	r1, #4
 800121c:	4837      	ldr	r0, [pc, #220]	@ (80012fc <MX_GPIO_Init+0x198>)
 800121e:	f002 fa2b 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_IO_1_Pin|COMMS_IO_2_Pin|COMMS_IO_3_Pin;
 8001222:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4830      	ldr	r0, [pc, #192]	@ (80012f8 <MX_GPIO_Init+0x194>)
 8001238:	f002 f89c 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 800123c:	2304      	movs	r3, #4
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001252:	f002 f88f 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 8001256:	f24a 43a2 	movw	r3, #42146	@ 0xa4a2
 800125a:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4821      	ldr	r0, [pc, #132]	@ (80012f4 <MX_GPIO_Init+0x190>)
 8001270:	f002 f880 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_1_Pin|DIGITAL_IO_6_Pin|SD_CARD_DETECT_Pin;
 8001274:	f640 2304 	movw	r3, #2564	@ 0xa04
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	481a      	ldr	r0, [pc, #104]	@ (80012f4 <MX_GPIO_Init+0x190>)
 800128a:	f002 f873 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin;
 800128e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001292:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	4619      	mov	r1, r3
 80012a6:	4814      	ldr	r0, [pc, #80]	@ (80012f8 <MX_GPIO_Init+0x194>)
 80012a8:	f002 f864 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_EN_Pin;
 80012ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CARD_EN_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012c8:	f002 f854 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 80012cc:	2304      	movs	r3, #4
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	@ (80012fc <MX_GPIO_Init+0x198>)
 80012e4:	f002 f846 	bl	8003374 <HAL_GPIO_Init>

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40021000 	.word	0x40021000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000800 	.word	0x48000800
 80012fc:	48000c00 	.word	0x48000c00

08001300 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001306:	4a1c      	ldr	r2, [pc, #112]	@ (8001378 <MX_I2C2_Init+0x78>)
 8001308:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 800130a:	4b1a      	ldr	r3, [pc, #104]	@ (8001374 <MX_I2C2_Init+0x74>)
 800130c:	f240 1203 	movw	r2, #259	@ 0x103
 8001310:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_I2C2_Init+0x74>)
 800131a:	2201      	movs	r2, #1
 800131c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001324:	4b13      	ldr	r3, [pc, #76]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800132a:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_I2C2_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001336:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800133c:	480d      	ldr	r0, [pc, #52]	@ (8001374 <MX_I2C2_Init+0x74>)
 800133e:	f002 f9b3 	bl	80036a8 <HAL_I2C_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001348:	f000 f9cd 	bl	80016e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	4809      	ldr	r0, [pc, #36]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001350:	f002 fefa 	bl	8004148 <HAL_I2CEx_ConfigAnalogFilter>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800135a:	f000 f9c4 	bl	80016e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800135e:	2100      	movs	r1, #0
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_I2C2_Init+0x74>)
 8001362:	f002 ff3c 	bl	80041de <HAL_I2CEx_ConfigDigitalFilter>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800136c:	f000 f9bb 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000290 	.word	0x20000290
 8001378:	40005800 	.word	0x40005800

0800137c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b09c      	sub	sp, #112	@ 0x70
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	2244      	movs	r2, #68	@ 0x44
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00b fde1 	bl	800cf64 <memset>
  if(i2cHandle->Instance==I2C2)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a2d      	ldr	r2, [pc, #180]	@ (800145c <HAL_I2C_MspInit+0xe0>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d153      	bne.n	8001454 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4618      	mov	r0, r3
 80013ba:	f005 fa63 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013c4:	f000 f98f 	bl	80016e6 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4b25      	ldr	r3, [pc, #148]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	4a24      	ldr	r2, [pc, #144]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013ce:	f043 0304 	orr.w	r3, r3, #4
 80013d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d4:	4b22      	ldr	r3, [pc, #136]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	617b      	str	r3, [r7, #20]
 80013de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013f8:	2310      	movs	r3, #16
 80013fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fc:	2312      	movs	r3, #18
 80013fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001408:	2304      	movs	r3, #4
 800140a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800140c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001410:	4619      	mov	r1, r3
 8001412:	4814      	ldr	r0, [pc, #80]	@ (8001464 <HAL_I2C_MspInit+0xe8>)
 8001414:	f001 ffae 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141e:	2312      	movs	r3, #18
 8001420:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800142a:	2304      	movs	r3, #4
 800142c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001438:	f001 ff9c 	bl	8003374 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800143c:	4b08      	ldr	r3, [pc, #32]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	4a07      	ldr	r2, [pc, #28]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 8001442:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001446:	6593      	str	r3, [r2, #88]	@ 0x58
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_I2C_MspInit+0xe4>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001454:	bf00      	nop
 8001456:	3770      	adds	r7, #112	@ 0x70
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40005800 	.word	0x40005800
 8001460:	40021000 	.word	0x40021000
 8001464:	48000800 	.word	0x48000800

08001468 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b088      	sub	sp, #32
 800146c:	af02      	add	r7, sp, #8
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2];
	int32_t tempC = -100;
 8001472:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001476:	617b      	str	r3, [r7, #20]
	uint8_t store = tempRegAddr;
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &store, 1, HAL_MAX_DELAY);
 800147c:	f107 020f 	add.w	r2, r7, #15
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2301      	movs	r3, #1
 8001488:	2118      	movs	r1, #24
 800148a:	4823      	ldr	r0, [pc, #140]	@ (8001518 <readMCP9804Temp+0xb0>)
 800148c:	f002 f9a8 	bl	80037e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY);
 8001490:	f107 0210 	add.w	r2, r7, #16
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2302      	movs	r3, #2
 800149c:	2118      	movs	r1, #24
 800149e:	481e      	ldr	r0, [pc, #120]	@ (8001518 <readMCP9804Temp+0xb0>)
 80014a0:	f002 fab6 	bl	8003a10 <HAL_I2C_Master_Receive>

	uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 80014a4:	7c3b      	ldrb	r3, [r7, #16]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	7c7b      	ldrb	r3, [r7, #17]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21b      	sxth	r3, r3
 80014b2:	827b      	strh	r3, [r7, #18]
	rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 80014b4:	8a7b      	ldrh	r3, [r7, #18]
 80014b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ba:	827b      	strh	r3, [r7, #18]
	tempC = rawTemp & 0x0FFF;
 80014bc:	8a7b      	ldrh	r3, [r7, #18]
 80014be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c2:	617b      	str	r3, [r7, #20]
	tempC /= 16.0;
 80014c4:	6978      	ldr	r0, [r7, #20]
 80014c6:	f7fe fff9 	bl	80004bc <__aeabi_i2d>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <readMCP9804Temp+0xb4>)
 80014d0:	f7ff f988 	bl	80007e4 <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fa6a 	bl	80009b4 <__aeabi_d2iz>
 80014e0:	4603      	mov	r3, r0
 80014e2:	617b      	str	r3, [r7, #20]
	if (rawTemp & 0x1000) {  // Check sign bit
 80014e4:	8a7b      	ldrh	r3, [r7, #18]
 80014e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00f      	beq.n	800150e <readMCP9804Temp+0xa6>
	  tempC -= 256.0;
 80014ee:	6978      	ldr	r0, [r7, #20]
 80014f0:	f7fe ffe4 	bl	80004bc <__aeabi_i2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <readMCP9804Temp+0xb8>)
 80014fa:	f7fe fe91 	bl	8000220 <__aeabi_dsub>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fa55 	bl	80009b4 <__aeabi_d2iz>
 800150a:	4603      	mov	r3, r0
 800150c:	617b      	str	r3, [r7, #20]
	}
    return tempC;
 800150e:	697b      	ldr	r3, [r7, #20]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000290 	.word	0x20000290
 800151c:	40300000 	.word	0x40300000
 8001520:	40700000 	.word	0x40700000

08001524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0c6      	sub	sp, #280	@ 0x118
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800152a:	f000 fb92 	bl	8001c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152e:	f000 f88b 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001532:	f7ff fe17 	bl	8001164 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001536:	f7ff fbdd 	bl	8000cf4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800153a:	f7ff fc53 	bl	8000de4 <MX_ADC2_Init>
  MX_DAC1_Init();
 800153e:	f7ff fd8f 	bl	8001060 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001542:	f000 f94b 	bl	80017dc <MX_SPI1_Init>
  MX_UCPD1_Init();
 8001546:	f000 fa87 	bl	8001a58 <MX_UCPD1_Init>
  MX_I2C2_Init();
 800154a:	f7ff fed9 	bl	8001300 <MX_I2C2_Init>
  MX_RTC_Init();
 800154e:	f000 f8d1 	bl	80016f4 <MX_RTC_Init>
  MX_USB_Device_Init();
 8001552:	f00b f823 	bl	800c59c <MX_USB_Device_Init>
  MX_UART4_Init();
 8001556:	f000 faad 	bl	8001ab4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t status = HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    int num_bytes = 4;
 8001560:	2304      	movs	r3, #4
 8001562:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

    uint8_t dataToSend[4];
    dataToSend[0] = 0xFF;// Example data
 8001566:	23ff      	movs	r3, #255	@ 0xff
 8001568:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
    dataToSend[1] = 0x5;// Example data
 800156c:	2305      	movs	r3, #5
 800156e:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
    dataToSend[2] = 0xF0;// Example data
 8001572:	23f0      	movs	r3, #240	@ 0xf0
 8001574:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
    dataToSend[3] = 0xF;// Example data
 8001578:	230f      	movs	r3, #15
 800157a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

    //HAL_StatusTypeDef sts = HAL_OK;


    HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 800157e:	2201      	movs	r2, #1
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	482c      	ldr	r0, [pc, #176]	@ (8001634 <main+0x110>)
 8001584:	f002 f878 	bl	8003678 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	4829      	ldr	r0, [pc, #164]	@ (8001634 <main+0x110>)
 800158e:	f002 f873 	bl	8003678 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001592:	2201      	movs	r2, #1
 8001594:	2104      	movs	r1, #4
 8001596:	4828      	ldr	r0, [pc, #160]	@ (8001638 <main+0x114>)
 8001598:	f002 f86e 	bl	8003678 <HAL_GPIO_WritePin>


    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800159c:	4827      	ldr	r0, [pc, #156]	@ (800163c <main+0x118>)
 800159e:	f002 f883 	bl	80036a8 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <main+0x8e>
            // Initialization error
  	  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	4822      	ldr	r0, [pc, #136]	@ (8001638 <main+0x114>)
 80015ae:	f002 f863 	bl	8003678 <HAL_GPIO_WritePin>
        }
    uint8_t tempRegAddr = 0x05;
 80015b2:	2305      	movs	r3, #5
 80015b4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
    	HAL_Delay(10);
 80015b8:	200a      	movs	r0, #10
 80015ba:	f000 fbbb 	bl	8001d34 <HAL_Delay>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET); // CS low Digital IO 1 COMM_EN_3
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015c4:	481e      	ldr	r0, [pc, #120]	@ (8001640 <main+0x11c>)
 80015c6:	f002 f857 	bl	8003678 <HAL_GPIO_WritePin>
    	status = HAL_SPI_Transmit(&hspi1, &dataToSend, num_bytes, HAL_MAX_DELAY);
 80015ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	f507 7182 	add.w	r1, r7, #260	@ 0x104
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
 80015d8:	481a      	ldr	r0, [pc, #104]	@ (8001644 <main+0x120>)
 80015da:	f005 fd7f 	bl	80070dc <HAL_SPI_Transmit>
 80015de:	4603      	mov	r3, r0
 80015e0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET); // CS high Digital IO 1 COMM_EN_3
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ea:	4815      	ldr	r0, [pc, #84]	@ (8001640 <main+0x11c>)
 80015ec:	f002 f844 	bl	8003678 <HAL_GPIO_WritePin>
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
    	}	*/


    	HAL_Delay(10);
 80015f0:	200a      	movs	r0, #10
 80015f2:	f000 fb9f 	bl	8001d34 <HAL_Delay>
    	//HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
    	//HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
    	//HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn of success LED
    	int32_t tempC = readMCP9804Temp(MCP9804_ADDR);
 80015f6:	2018      	movs	r0, #24
 80015f8:	f7ff ff36 	bl	8001468 <readMCP9804Temp>
 80015fc:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
    		//temp read error
    		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
    		HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
    		HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
    	} */
    	dataToSend[0] = (tempC >> 24) & 0xFF;
 8001600:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001604:	0e1b      	lsrs	r3, r3, #24
 8001606:	b2db      	uxtb	r3, r3
 8001608:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
    	dataToSend[1] = (tempC >> 16) & 0xFF;
 800160c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001610:	141b      	asrs	r3, r3, #16
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f887 3105 	strb.w	r3, [r7, #261]	@ 0x105
    	dataToSend[2] = (tempC >> 8) & 0xFF;
 8001618:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800161c:	121b      	asrs	r3, r3, #8
 800161e:	b2db      	uxtb	r3, r3
 8001620:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106
    	dataToSend[3] = tempC & 0xFF;
 8001624:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
    {
 800162e:	bf00      	nop
 8001630:	e7c2      	b.n	80015b8 <main+0x94>
 8001632:	bf00      	nop
 8001634:	48000400 	.word	0x48000400
 8001638:	48000c00 	.word	0x48000c00
 800163c:	20000290 	.word	0x20000290
 8001640:	48000800 	.word	0x48000800
 8001644:	2000030c 	.word	0x2000030c

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	@ 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0318 	add.w	r3, r7, #24
 8001652:	2238      	movs	r2, #56	@ 0x38
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f00b fc84 	bl	800cf64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800166a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800166e:	f004 fb37 	bl	8005ce0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001672:	230a      	movs	r3, #10
 8001674:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001676:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800167c:	2340      	movs	r3, #64	@ 0x40
 800167e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001680:	2301      	movs	r3, #1
 8001682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001684:	2302      	movs	r3, #2
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001688:	2302      	movs	r3, #2
 800168a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800168c:	2301      	movs	r3, #1
 800168e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001690:	230c      	movs	r3, #12
 8001692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001694:	2302      	movs	r3, #2
 8001696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001698:	2304      	movs	r3, #4
 800169a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 fbbf 	bl	8005e28 <HAL_RCC_OscConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80016b0:	f000 f819 	bl	80016e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b4:	230f      	movs	r3, #15
 80016b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016b8:	2301      	movs	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80016c0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80016c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f004 febc 	bl	800644c <HAL_RCC_ClockConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016da:	f000 f804 	bl	80016e6 <Error_Handler>
  }
}
 80016de:	bf00      	nop
 80016e0:	3750      	adds	r7, #80	@ 0x50
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ea:	b672      	cpsid	i
}
 80016ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ee:	bf00      	nop
 80016f0:	e7fd      	b.n	80016ee <Error_Handler+0x8>
	...

080016f4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <MX_RTC_Init+0x68>)
 80016fa:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <MX_RTC_Init+0x6c>)
 80016fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_RTC_Init+0x68>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MX_RTC_Init+0x68>)
 8001706:	227f      	movs	r2, #127	@ 0x7f
 8001708:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800170a:	4b14      	ldr	r3, [pc, #80]	@ (800175c <MX_RTC_Init+0x68>)
 800170c:	22ff      	movs	r2, #255	@ 0xff
 800170e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001710:	4b12      	ldr	r3, [pc, #72]	@ (800175c <MX_RTC_Init+0x68>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001716:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MX_RTC_Init+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800171c:	4b0f      	ldr	r3, [pc, #60]	@ (800175c <MX_RTC_Init+0x68>)
 800171e:	2200      	movs	r2, #0
 8001720:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <MX_RTC_Init+0x68>)
 8001724:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001728:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800172a:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <MX_RTC_Init+0x68>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001730:	480a      	ldr	r0, [pc, #40]	@ (800175c <MX_RTC_Init+0x68>)
 8001732:	f005 fa97 	bl	8006c64 <HAL_RTC_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800173c:	f7ff ffd3 	bl	80016e6 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8001740:	2206      	movs	r2, #6
 8001742:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_RTC_Init+0x68>)
 8001748:	f005 fba9 	bl	8006e9e <HAL_RTCEx_SetWakeUpTimer>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001752:	f7ff ffc8 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002e4 	.word	0x200002e4
 8001760:	40002800 	.word	0x40002800

08001764 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	@ 0x50
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	2244      	movs	r2, #68	@ 0x44
 8001772:	2100      	movs	r1, #0
 8001774:	4618      	mov	r0, r3
 8001776:	f00b fbf5 	bl	800cf64 <memset>
  if(rtcHandle->Instance==RTC)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a15      	ldr	r2, [pc, #84]	@ (80017d4 <HAL_RTC_MspInit+0x70>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d123      	bne.n	80017cc <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001784:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001788:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800178a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4618      	mov	r0, r3
 8001796:	f005 f875 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017a0:	f7ff ffa1 	bl	80016e6 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <HAL_RTC_MspInit+0x74>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <HAL_RTC_MspInit+0x74>)
 80017ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017b4:	4b08      	ldr	r3, [pc, #32]	@ (80017d8 <HAL_RTC_MspInit+0x74>)
 80017b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017b8:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_RTC_MspInit+0x74>)
 80017ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017be:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c0:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <HAL_RTC_MspInit+0x74>)
 80017c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017cc:	bf00      	nop
 80017ce:	3750      	adds	r7, #80	@ 0x50
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40002800 	.word	0x40002800
 80017d8:	40021000 	.word	0x40021000

080017dc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001854 <MX_SPI1_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ee:	4b18      	ldr	r3, [pc, #96]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017f4:	4b16      	ldr	r3, [pc, #88]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017f6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_SPI1_Init+0x74>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001808:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_SPI1_Init+0x74>)
 800180a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800180e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_SPI1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001824:	2200      	movs	r2, #0
 8001826:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_SPI1_Init+0x74>)
 800182a:	2207      	movs	r2, #7
 800182c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_SPI1_Init+0x74>)
 8001836:	2208      	movs	r2, #8
 8001838:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_SPI1_Init+0x74>)
 800183c:	f005 fba3 	bl	8006f86 <HAL_SPI_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001846:	f7ff ff4e 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	2000030c 	.word	0x2000030c
 8001854:	40013000 	.word	0x40013000

08001858 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a25      	ldr	r2, [pc, #148]	@ (800190c <HAL_SPI_MspInit+0xb4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d144      	bne.n	8001904 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800187a:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187e:	4a24      	ldr	r2, [pc, #144]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 8001880:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001884:	6613      	str	r3, [r2, #96]	@ 0x60
 8001886:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a1e      	ldr	r2, [pc, #120]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b19      	ldr	r3, [pc, #100]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4a18      	ldr	r2, [pc, #96]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <HAL_SPI_MspInit+0xb8>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018c2:	23c0      	movs	r3, #192	@ 0xc0
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d2:	2305      	movs	r3, #5
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018e0:	f001 fd48 	bl	8003374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018e4:	2308      	movs	r3, #8
 80018e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f4:	2305      	movs	r3, #5
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	4619      	mov	r1, r3
 80018fe:	4805      	ldr	r0, [pc, #20]	@ (8001914 <HAL_SPI_MspInit+0xbc>)
 8001900:	f001 fd38 	bl	8003374 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	@ 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40013000 	.word	0x40013000
 8001910:	40021000 	.word	0x40021000
 8001914:	48000400 	.word	0x48000400

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	4b0f      	ldr	r3, [pc, #60]	@ (800195c <HAL_MspInit+0x44>)
 8001920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001922:	4a0e      	ldr	r2, [pc, #56]	@ (800195c <HAL_MspInit+0x44>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6613      	str	r3, [r2, #96]	@ 0x60
 800192a:	4b0c      	ldr	r3, [pc, #48]	@ (800195c <HAL_MspInit+0x44>)
 800192c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	4b09      	ldr	r3, [pc, #36]	@ (800195c <HAL_MspInit+0x44>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193a:	4a08      	ldr	r2, [pc, #32]	@ (800195c <HAL_MspInit+0x44>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001940:	6593      	str	r3, [r2, #88]	@ 0x58
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_MspInit+0x44>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <NMI_Handler+0x4>

08001968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <HardFault_Handler+0x4>

08001970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <MemManage_Handler+0x4>

08001978 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	bf00      	nop
 8001986:	e7fd      	b.n	8001984 <UsageFault_Handler+0x4>

08001988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b6:	f000 f99f 	bl	8001cf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <USB_LP_IRQHandler+0x10>)
 80019c6:	f002 fd46 	bl	8004456 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200010dc 	.word	0x200010dc

080019d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	@ (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a00:	4b08      	ldr	r3, [pc, #32]	@ (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4013      	ands	r3, r2
 8001a14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a16:	68fb      	ldr	r3, [r7, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40021000 	.word	0x40021000

08001a28 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a34:	4907      	ldr	r1, [pc, #28]	@ (8001a54 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a3c:	4b05      	ldr	r3, [pc, #20]	@ (8001a54 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a3e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4013      	ands	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a46:	68fb      	ldr	r3, [r7, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	40021000 	.word	0x40021000

08001a58 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001a6e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a72:	f7ff ffd9 	bl	8001a28 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a76:	2002      	movs	r0, #2
 8001a78:	f7ff ffbe 	bl	80019f8 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001a7c:	2310      	movs	r3, #16
 8001a7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a80:	2303      	movs	r3, #3
 8001a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a88:	463b      	mov	r3, r7
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4808      	ldr	r0, [pc, #32]	@ (8001ab0 <MX_UCPD1_Init+0x58>)
 8001a8e:	f006 fd88 	bl	80085a2 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a92:	2340      	movs	r3, #64	@ 0x40
 8001a94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a96:	2303      	movs	r3, #3
 8001a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9e:	463b      	mov	r3, r7
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4803      	ldr	r0, [pc, #12]	@ (8001ab0 <MX_UCPD1_Init+0x58>)
 8001aa4:	f006 fd7d 	bl	80085a2 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	48000400 	.word	0x48000400

08001ab4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001aba:	4a23      	ldr	r2, [pc, #140]	@ (8001b48 <MX_UART4_Init+0x94>)
 8001abc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001abe:	4b21      	ldr	r3, [pc, #132]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001ac0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ac4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001ada:	220c      	movs	r2, #12
 8001adc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ade:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aea:	4b16      	ldr	r3, [pc, #88]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001af0:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001af6:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001afc:	4811      	ldr	r0, [pc, #68]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001afe:	f005 fdc7 	bl	8007690 <HAL_UART_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001b08:	f7ff fded 	bl	80016e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001b10:	f006 fb32 	bl	8008178 <HAL_UARTEx_SetTxFifoThreshold>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b1a:	f7ff fde4 	bl	80016e6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4808      	ldr	r0, [pc, #32]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001b22:	f006 fb67 	bl	80081f4 <HAL_UARTEx_SetRxFifoThreshold>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b2c:	f7ff fddb 	bl	80016e6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	@ (8001b44 <MX_UART4_Init+0x90>)
 8001b32:	f006 fae8 	bl	8008106 <HAL_UARTEx_DisableFifoMode>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b3c:	f7ff fdd3 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000370 	.word	0x20000370
 8001b48:	40004c00 	.word	0x40004c00

08001b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b09a      	sub	sp, #104	@ 0x68
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b64:	f107 0310 	add.w	r3, r7, #16
 8001b68:	2244      	movs	r2, #68	@ 0x44
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00b f9f9 	bl	800cf64 <memset>
  if(uartHandle->Instance==UART4)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1f      	ldr	r2, [pc, #124]	@ (8001bf4 <HAL_UART_MspInit+0xa8>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d136      	bne.n	8001bea <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b7c:	2308      	movs	r3, #8
 8001b7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b84:	f107 0310 	add.w	r3, r7, #16
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f004 fe7b 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b94:	f7ff fda7 	bl	80016e6 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b98:	4b17      	ldr	r3, [pc, #92]	@ (8001bf8 <HAL_UART_MspInit+0xac>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	4a16      	ldr	r2, [pc, #88]	@ (8001bf8 <HAL_UART_MspInit+0xac>)
 8001b9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001ba2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba4:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <HAL_UART_MspInit+0xac>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ba8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb0:	4b11      	ldr	r3, [pc, #68]	@ (8001bf8 <HAL_UART_MspInit+0xac>)
 8001bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb4:	4a10      	ldr	r2, [pc, #64]	@ (8001bf8 <HAL_UART_MspInit+0xac>)
 8001bb6:	f043 0304 	orr.w	r3, r3, #4
 8001bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf8 <HAL_UART_MspInit+0xac>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bcc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001bda:	2305      	movs	r3, #5
 8001bdc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <HAL_UART_MspInit+0xb0>)
 8001be6:	f001 fbc5 	bl	8003374 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001bea:	bf00      	nop
 8001bec:	3768      	adds	r7, #104	@ 0x68
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40004c00 	.word	0x40004c00
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	48000800 	.word	0x48000800

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c00:	480d      	ldr	r0, [pc, #52]	@ (8001c38 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c02:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff fee6 	bl	80019d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f00b f9a1 	bl	800cf74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff fc77 	bl	8001524 <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   r0, =_estack
 8001c38:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001c44:	0800d06c 	.word	0x0800d06c
  ldr r2, =_sbss
 8001c48:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001c4c:	200015d8 	.word	0x200015d8

08001c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_2_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f001 f96f 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fe50 	bl	8001918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]

}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c90:	4b16      	ldr	r3, [pc, #88]	@ (8001cec <HAL_InitTick+0x68>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d022      	beq.n	8001cde <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c98:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_InitTick+0x6c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_InitTick+0x68>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ca4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	4618      	mov	r0, r3
 8001cae:	f001 f97a 	bl	8002fa6 <HAL_SYSTICK_Config>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10f      	bne.n	8001cd8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b0f      	cmp	r3, #15
 8001cbc:	d809      	bhi.n	8001cd2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	6879      	ldr	r1, [r7, #4]
 8001cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc6:	f001 f946 	bl	8002f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cca:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf4 <HAL_InitTick+0x70>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	e007      	b.n	8001ce2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
 8001cd6:	e004      	b.n	8001ce2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e001      	b.n	8001ce2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000008 	.word	0x20000008
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <HAL_IncTick+0x1c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4b05      	ldr	r3, [pc, #20]	@ (8001d18 <HAL_IncTick+0x20>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4413      	add	r3, r2
 8001d06:	4a03      	ldr	r2, [pc, #12]	@ (8001d14 <HAL_IncTick+0x1c>)
 8001d08:	6013      	str	r3, [r2, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	20000404 	.word	0x20000404
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	@ (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000404 	.word	0x20000404

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff ffee 	bl	8001d1c <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d004      	beq.n	8001d58 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <HAL_Delay+0x40>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	4413      	add	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d58:	bf00      	nop
 8001d5a:	f7ff ffdf 	bl	8001d1c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d8f7      	bhi.n	8001d5a <HAL_Delay+0x26>
  {
  }
}
 8001d6a:	bf00      	nop
 8001d6c:	bf00      	nop
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000008 	.word	0x20000008

08001d78 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	609a      	str	r2, [r3, #8]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	3360      	adds	r3, #96	@ 0x60
 8001df2:	461a      	mov	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4413      	add	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <LL_ADC_SetOffset+0x44>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e18:	bf00      	nop
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	03fff000 	.word	0x03fff000

08001e28 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3360      	adds	r3, #96	@ 0x60
 8001e36:	461a      	mov	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3360      	adds	r3, #96	@ 0x60
 8001e64:	461a      	mov	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	4413      	add	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e7e:	bf00      	nop
 8001e80:	371c      	adds	r7, #28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b087      	sub	sp, #28
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3360      	adds	r3, #96	@ 0x60
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001eb4:	bf00      	nop
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3360      	adds	r3, #96	@ 0x60
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001eea:	bf00      	nop
 8001eec:	371c      	adds	r7, #28
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	615a      	str	r2, [r3, #20]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3330      	adds	r3, #48	@ 0x30
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	4413      	add	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	211f      	movs	r1, #31
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	f003 011f 	and.w	r1, r3, #31
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f62:	431a      	orrs	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	3314      	adds	r3, #20
 8001f84:	461a      	mov	r2, r3
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	0e5b      	lsrs	r3, r3, #25
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	0d1b      	lsrs	r3, r3, #20
 8001f9c:	f003 031f 	and.w	r3, r3, #31
 8001fa0:	2107      	movs	r1, #7
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	401a      	ands	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	0d1b      	lsrs	r3, r3, #20
 8001fae:	f003 031f 	and.w	r3, r3, #31
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fbe:	bf00      	nop
 8001fc0:	371c      	adds	r7, #28
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	401a      	ands	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f003 0318 	and.w	r3, r3, #24
 8001fee:	4908      	ldr	r1, [pc, #32]	@ (8002010 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ff0:	40d9      	lsrs	r1, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	0007ffff 	.word	0x0007ffff

08002014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6093      	str	r3, [r2, #8]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800204c:	d101      	bne.n	8002052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002074:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800209c:	d101      	bne.n	80020a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <LL_ADC_IsEnabled+0x18>
 80020c4:	2301      	movs	r3, #1
 80020c6:	e000      	b.n	80020ca <LL_ADC_IsEnabled+0x1a>
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0304 	and.w	r3, r3, #4
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	d101      	bne.n	80020ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b08      	cmp	r3, #8
 800210e:	d101      	bne.n	8002114 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002124:	b590      	push	{r4, r7, lr}
 8002126:	b089      	sub	sp, #36	@ 0x24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002130:	2300      	movs	r3, #0
 8002132:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e167      	b.n	800240e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d109      	bne.n	8002160 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7fe feaf 	bl	8000eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff67 	bl	8002038 <LL_ADC_IsDeepPowerDownEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d004      	beq.n	800217a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff4d 	bl	8002014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ff82 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d115      	bne.n	80021b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff66 	bl	8002060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002194:	4ba0      	ldr	r3, [pc, #640]	@ (8002418 <HAL_ADC_Init+0x2f4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	4aa0      	ldr	r2, [pc, #640]	@ (800241c <HAL_ADC_Init+0x2f8>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	3301      	adds	r3, #1
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff ff64 	bl	8002088 <LL_ADC_IsInternalRegulatorEnabled>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10d      	bne.n	80021e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ca:	f043 0210 	orr.w	r2, r3, #16
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff ff75 	bl	80020d6 <LL_ADC_REG_IsConversionOngoing>
 80021ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	f003 0310 	and.w	r3, r3, #16
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 8100 	bne.w	80023fc <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 80fc 	bne.w	80023fc <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002208:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800220c:	f043 0202 	orr.w	r2, r3, #2
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff ff49 	bl	80020b0 <LL_ADC_IsEnabled>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002224:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002228:	f7ff ff42 	bl	80020b0 <LL_ADC_IsEnabled>
 800222c:	4604      	mov	r4, r0
 800222e:	487c      	ldr	r0, [pc, #496]	@ (8002420 <HAL_ADC_Init+0x2fc>)
 8002230:	f7ff ff3e 	bl	80020b0 <LL_ADC_IsEnabled>
 8002234:	4603      	mov	r3, r0
 8002236:	4323      	orrs	r3, r4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4619      	mov	r1, r3
 8002242:	4878      	ldr	r0, [pc, #480]	@ (8002424 <HAL_ADC_Init+0x300>)
 8002244:	f7ff fd98 	bl	8001d78 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7f5b      	ldrb	r3, [r3, #29]
 800224c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002252:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002258:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800225e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002266:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002272:	2b01      	cmp	r3, #1
 8002274:	d106      	bne.n	8002284 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227a:	3b01      	subs	r3, #1
 800227c:	045b      	lsls	r3, r3, #17
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	2b00      	cmp	r3, #0
 800228a:	d009      	beq.n	80022a0 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	4b60      	ldr	r3, [pc, #384]	@ (8002428 <HAL_ADC_Init+0x304>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	430b      	orrs	r3, r1
 80022b2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff ff14 	bl	80020fc <LL_ADC_INJ_IsConversionOngoing>
 80022d4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d16d      	bne.n	80023b8 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d16a      	bne.n	80023b8 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022e6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ee:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022fe:	f023 0302 	bic.w	r3, r3, #2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d017      	beq.n	8002344 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691a      	ldr	r2, [r3, #16]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002322:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800232c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002330:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6911      	ldr	r1, [r2, #16]
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002342:	e013      	b.n	800236c <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002352:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002364:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002368:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002372:	2b01      	cmp	r3, #1
 8002374:	d118      	bne.n	80023a8 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002380:	f023 0304 	bic.w	r3, r3, #4
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002398:	430a      	orrs	r2, r1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f042 0201 	orr.w	r2, r2, #1
 80023a4:	611a      	str	r2, [r3, #16]
 80023a6:	e007      	b.n	80023b8 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d10c      	bne.n	80023da <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f023 010f 	bic.w	r1, r3, #15
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	1e5a      	subs	r2, r3, #1
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80023d8:	e007      	b.n	80023ea <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 020f 	bic.w	r2, r2, #15
 80023e8:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ee:	f023 0303 	bic.w	r3, r3, #3
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023fa:	e007      	b.n	800240c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002400:	f043 0210 	orr.w	r2, r3, #16
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800240c:	7ffb      	ldrb	r3, [r7, #31]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3724      	adds	r7, #36	@ 0x24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}
 8002416:	bf00      	nop
 8002418:	20000000 	.word	0x20000000
 800241c:	053e2d63 	.word	0x053e2d63
 8002420:	50000100 	.word	0x50000100
 8002424:	50000300 	.word	0x50000300
 8002428:	fff04007 	.word	0xfff04007

0800242c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0b6      	sub	sp, #216	@ 0xd8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_ADC_ConfigChannel+0x22>
 800244a:	2302      	movs	r3, #2
 800244c:	e3c8      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x7b4>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fe3b 	bl	80020d6 <LL_ADC_REG_IsConversionOngoing>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 83ad 	bne.w	8002bc2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6859      	ldr	r1, [r3, #4]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	f7ff fd51 	bl	8001f1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fe29 	bl	80020d6 <LL_ADC_REG_IsConversionOngoing>
 8002484:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fe35 	bl	80020fc <LL_ADC_INJ_IsConversionOngoing>
 8002492:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800249a:	2b00      	cmp	r3, #0
 800249c:	f040 81d9 	bne.w	8002852 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 81d4 	bne.w	8002852 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80024b2:	d10f      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2200      	movs	r2, #0
 80024be:	4619      	mov	r1, r3
 80024c0:	f7ff fd58 	bl	8001f74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fd12 	bl	8001ef6 <LL_ADC_SetSamplingTimeCommonConfig>
 80024d2:	e00e      	b.n	80024f2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	461a      	mov	r2, r3
 80024e2:	f7ff fd47 	bl	8001f74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2100      	movs	r1, #0
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff fd02 	bl	8001ef6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d022      	beq.n	800255a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	6919      	ldr	r1, [r3, #16]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002524:	f7ff fc5c 	bl	8001de0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6919      	ldr	r1, [r3, #16]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	461a      	mov	r2, r3
 8002536:	f7ff fca8 	bl	8001e8a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <HAL_ADC_ConfigChannel+0x124>
 800254a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800254e:	e000      	b.n	8002552 <HAL_ADC_ConfigChannel+0x126>
 8002550:	2300      	movs	r3, #0
 8002552:	461a      	mov	r2, r3
 8002554:	f7ff fcb4 	bl	8001ec0 <LL_ADC_SetOffsetSaturation>
 8002558:	e17b      	b.n	8002852 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fc61 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002566:	4603      	mov	r3, r0
 8002568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x15a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fc56 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	0e9b      	lsrs	r3, r3, #26
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	e01e      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x198>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2100      	movs	r1, #0
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fc4b 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e004      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80025b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d105      	bne.n	80025dc <HAL_ADC_ConfigChannel+0x1b0>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	f003 031f 	and.w	r3, r3, #31
 80025da:	e018      	b.n	800260e <HAL_ADC_ConfigChannel+0x1e2>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80025f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80025f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002600:	2320      	movs	r3, #32
 8002602:	e004      	b.n	800260e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002604:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002608:	fab3 f383 	clz	r3, r3
 800260c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800260e:	429a      	cmp	r2, r3
 8002610:	d106      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fc1a 	bl	8001e54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2101      	movs	r1, #1
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fbfe 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <HAL_ADC_ConfigChannel+0x220>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2101      	movs	r1, #1
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fbf3 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002642:	4603      	mov	r3, r0
 8002644:	0e9b      	lsrs	r3, r3, #26
 8002646:	f003 021f 	and.w	r2, r3, #31
 800264a:	e01e      	b.n	800268a <HAL_ADC_ConfigChannel+0x25e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fbe8 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002658:	4603      	mov	r3, r0
 800265a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800266a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800266e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 800267a:	2320      	movs	r3, #32
 800267c:	e004      	b.n	8002688 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800267e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002682:	fab3 f383 	clz	r3, r3
 8002686:	b2db      	uxtb	r3, r3
 8002688:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_ADC_ConfigChannel+0x276>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	0e9b      	lsrs	r3, r3, #26
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	e018      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x2a8>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80026b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80026be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80026c6:	2320      	movs	r3, #32
 80026c8:	e004      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80026ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ce:	fab3 f383 	clz	r3, r3
 80026d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2200      	movs	r2, #0
 80026de:	2101      	movs	r1, #1
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fbb7 	bl	8001e54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fb9b 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x2e6>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2102      	movs	r1, #2
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fb90 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 8002708:	4603      	mov	r3, r0
 800270a:	0e9b      	lsrs	r3, r3, #26
 800270c:	f003 021f 	and.w	r2, r3, #31
 8002710:	e01e      	b.n	8002750 <HAL_ADC_ConfigChannel+0x324>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2102      	movs	r1, #2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fb85 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 800271e:	4603      	mov	r3, r0
 8002720:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002728:	fa93 f3a3 	rbit	r3, r3
 800272c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002730:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002738:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002740:	2320      	movs	r3, #32
 8002742:	e004      	b.n	800274e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002744:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002748:	fab3 f383 	clz	r3, r3
 800274c:	b2db      	uxtb	r3, r3
 800274e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x33c>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	0e9b      	lsrs	r3, r3, #26
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	e016      	b.n	8002796 <HAL_ADC_ConfigChannel+0x36a>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800277a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800277c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e004      	b.n	8002796 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800278c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002790:	fab3 f383 	clz	r3, r3
 8002794:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002796:	429a      	cmp	r2, r3
 8002798:	d106      	bne.n	80027a8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2200      	movs	r2, #0
 80027a0:	2102      	movs	r1, #2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fb56 	bl	8001e54 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2103      	movs	r1, #3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fb3a 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x3a8>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2103      	movs	r1, #3
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fb2f 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	0e9b      	lsrs	r3, r3, #26
 80027ce:	f003 021f 	and.w	r2, r3, #31
 80027d2:	e017      	b.n	8002804 <HAL_ADC_ConfigChannel+0x3d8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2103      	movs	r1, #3
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fb24 	bl	8001e28 <LL_ADC_GetOffsetChannel>
 80027e0:	4603      	mov	r3, r0
 80027e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027e6:	fa93 f3a3 	rbit	r3, r3
 80027ea:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80027ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027ee:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80027f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80027f6:	2320      	movs	r3, #32
 80027f8:	e003      	b.n	8002802 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80027fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_ConfigChannel+0x3f0>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	e011      	b.n	8002840 <HAL_ADC_ConfigChannel+0x414>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002822:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800282a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800282c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800282e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e003      	b.n	8002840 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800283a:	fab3 f383 	clz	r3, r3
 800283e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002840:	429a      	cmp	r2, r3
 8002842:	d106      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	2103      	movs	r1, #3
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fb01 	bl	8001e54 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff fc2a 	bl	80020b0 <LL_ADC_IsEnabled>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	f040 8140 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	461a      	mov	r2, r3
 8002872:	f7ff fbab 	bl	8001fcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	4a8f      	ldr	r2, [pc, #572]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x68c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	f040 8131 	bne.w	8002ae4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x47e>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0e9b      	lsrs	r3, r3, #26
 8002898:	3301      	adds	r3, #1
 800289a:	f003 031f 	and.w	r3, r3, #31
 800289e:	2b09      	cmp	r3, #9
 80028a0:	bf94      	ite	ls
 80028a2:	2301      	movls	r3, #1
 80028a4:	2300      	movhi	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	e019      	b.n	80028de <HAL_ADC_ConfigChannel+0x4b2>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80028b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ba:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80028bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 80028c2:	2320      	movs	r3, #32
 80028c4:	e003      	b.n	80028ce <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80028c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028c8:	fab3 f383 	clz	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	3301      	adds	r3, #1
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	2b09      	cmp	r3, #9
 80028d6:	bf94      	ite	ls
 80028d8:	2301      	movls	r3, #1
 80028da:	2300      	movhi	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d079      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x4d2>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	0e9b      	lsrs	r3, r3, #26
 80028f4:	3301      	adds	r3, #1
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028fc:	e015      	b.n	800292a <HAL_ADC_ConfigChannel+0x4fe>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800290c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800290e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002910:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e003      	b.n	8002922 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800291a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	069b      	lsls	r3, r3, #26
 8002926:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_ADC_ConfigChannel+0x51e>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	3301      	adds	r3, #1
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	2101      	movs	r1, #1
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	e017      	b.n	800297a <HAL_ADC_ConfigChannel+0x54e>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002952:	fa93 f3a3 	rbit	r3, r3
 8002956:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002958:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800295a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800295c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002962:	2320      	movs	r3, #32
 8002964:	e003      	b.n	800296e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002968:	fab3 f383 	clz	r3, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3301      	adds	r3, #1
 8002970:	f003 031f 	and.w	r3, r3, #31
 8002974:	2101      	movs	r1, #1
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	ea42 0103 	orr.w	r1, r2, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10a      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x574>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	0e9b      	lsrs	r3, r3, #26
 8002990:	3301      	adds	r3, #1
 8002992:	f003 021f 	and.w	r2, r3, #31
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	051b      	lsls	r3, r3, #20
 800299e:	e018      	b.n	80029d2 <HAL_ADC_ConfigChannel+0x5a6>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80029b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 80029bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 021f 	and.w	r2, r3, #31
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d2:	430b      	orrs	r3, r1
 80029d4:	e081      	b.n	8002ada <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d107      	bne.n	80029f2 <HAL_ADC_ConfigChannel+0x5c6>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	0e9b      	lsrs	r3, r3, #26
 80029e8:	3301      	adds	r3, #1
 80029ea:	069b      	lsls	r3, r3, #26
 80029ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80029f0:	e015      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x5f2>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002a0a:	2320      	movs	r3, #32
 8002a0c:	e003      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a10:	fab3 f383 	clz	r3, r3
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	3301      	adds	r3, #1
 8002a18:	069b      	lsls	r3, r3, #26
 8002a1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d109      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x612>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	0e9b      	lsrs	r3, r3, #26
 8002a30:	3301      	adds	r3, #1
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	2101      	movs	r1, #1
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	e017      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x642>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	fa93 f3a3 	rbit	r3, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002a56:	2320      	movs	r3, #32
 8002a58:	e003      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5c:	fab3 f383 	clz	r3, r3
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2101      	movs	r1, #1
 8002a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6e:	ea42 0103 	orr.w	r1, r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10d      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x66e>
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	0e9b      	lsrs	r3, r3, #26
 8002a84:	3301      	adds	r3, #1
 8002a86:	f003 021f 	and.w	r2, r3, #31
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b1e      	subs	r3, #30
 8002a92:	051b      	lsls	r3, r3, #20
 8002a94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a98:	e01e      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x6ac>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	fa93 f3a3 	rbit	r3, r3
 8002aa6:	613b      	str	r3, [r7, #16]
  return result;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002ab2:	2320      	movs	r3, #32
 8002ab4:	e006      	b.n	8002ac4 <HAL_ADC_ConfigChannel+0x698>
 8002ab6:	bf00      	nop
 8002ab8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	fab3 f383 	clz	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	f003 021f 	and.w	r2, r3, #31
 8002aca:	4613      	mov	r3, r2
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b1e      	subs	r3, #30
 8002ad2:	051b      	lsls	r3, r3, #20
 8002ad4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7ff fa48 	bl	8001f74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8002be8 <HAL_ADC_ConfigChannel+0x7bc>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d071      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002af0:	483e      	ldr	r0, [pc, #248]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002af2:	f7ff f967 	bl	8001dc4 <LL_ADC_GetCommonPathInternalCh>
 8002af6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a3c      	ldr	r2, [pc, #240]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <HAL_ADC_ConfigChannel+0x6e2>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d127      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d121      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b22:	d157      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	482f      	ldr	r0, [pc, #188]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002b30:	f7ff f935 	bl	8001d9e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b34:	4b30      	ldr	r3, [pc, #192]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	4a30      	ldr	r2, [pc, #192]	@ (8002bfc <HAL_ADC_ConfigChannel+0x7d0>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	1c5a      	adds	r2, r3, #1
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b4e:	e002      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b5c:	e03a      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a27      	ldr	r2, [pc, #156]	@ (8002c00 <HAL_ADC_ConfigChannel+0x7d4>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d113      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10d      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <HAL_ADC_ConfigChannel+0x7d8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02a      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b86:	4619      	mov	r1, r3
 8002b88:	4818      	ldr	r0, [pc, #96]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002b8a:	f7ff f908 	bl	8001d9e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b8e:	e021      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_ADC_ConfigChannel+0x7dc>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d11c      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d116      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_ADC_ConfigChannel+0x7d8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d011      	beq.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480c      	ldr	r0, [pc, #48]	@ (8002bec <HAL_ADC_ConfigChannel+0x7c0>)
 8002bbc:	f7ff f8ef 	bl	8001d9e <LL_ADC_SetCommonPathInternalCh>
 8002bc0:	e008      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002bdc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	37d8      	adds	r7, #216	@ 0xd8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	80080000 	.word	0x80080000
 8002bec:	50000300 	.word	0x50000300
 8002bf0:	c3210000 	.word	0xc3210000
 8002bf4:	90c00010 	.word	0x90c00010
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	053e2d63 	.word	0x053e2d63
 8002c00:	c7520000 	.word	0xc7520000
 8002c04:	50000100 	.word	0x50000100
 8002c08:	cb840000 	.word	0xcb840000

08002c0c <LL_ADC_IsEnabled>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <LL_ADC_IsEnabled+0x18>
 8002c20:	2301      	movs	r3, #1
 8002c22:	e000      	b.n	8002c26 <LL_ADC_IsEnabled+0x1a>
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_REG_IsConversionOngoing>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d101      	bne.n	8002c4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b0a1      	sub	sp, #132	@ 0x84
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e08b      	b.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002c82:	2300      	movs	r3, #0
 8002c84:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c8e:	d102      	bne.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002c90:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	e001      	b.n	8002c9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca4:	f043 0220 	orr.w	r2, r3, #32
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e06a      	b.n	8002d8e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff ffb9 	bl	8002c32 <LL_ADC_REG_IsConversionOngoing>
 8002cc0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff ffb3 	bl	8002c32 <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d14c      	bne.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002cd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d149      	bne.n	8002d6c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002cd8:	4b30      	ldr	r3, [pc, #192]	@ (8002d9c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002cda:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d028      	beq.n	8002d36 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ce4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002cf6:	035b      	lsls	r3, r3, #13
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002cfe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d00:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d04:	f7ff ff82 	bl	8002c0c <LL_ADC_IsEnabled>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	4823      	ldr	r0, [pc, #140]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d0c:	f7ff ff7e 	bl	8002c0c <LL_ADC_IsEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4323      	orrs	r3, r4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d133      	bne.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002d18:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d20:	f023 030f 	bic.w	r3, r3, #15
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	6811      	ldr	r1, [r2, #0]
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d32:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d34:	e024      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002d36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d40:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d42:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d46:	f7ff ff61 	bl	8002c0c <LL_ADC_IsEnabled>
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4812      	ldr	r0, [pc, #72]	@ (8002d98 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002d4e:	f7ff ff5d 	bl	8002c0c <LL_ADC_IsEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4323      	orrs	r3, r4
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d112      	bne.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002d5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002d62:	f023 030f 	bic.w	r3, r3, #15
 8002d66:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002d68:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d6a:	e009      	b.n	8002d80 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002d7e:	e000      	b.n	8002d82 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002d80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3784      	adds	r7, #132	@ 0x84
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd90      	pop	{r4, r7, pc}
 8002d96:	bf00      	nop
 8002d98:	50000100 	.word	0x50000100
 8002d9c:	50000300 	.word	0x50000300

08002da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db0:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd2:	4a04      	ldr	r2, [pc, #16]	@ (8002de4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60d3      	str	r3, [r2, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dec:	4b04      	ldr	r3, [pc, #16]	@ (8002e00 <__NVIC_GetPriorityGrouping+0x18>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	f003 0307 	and.w	r3, r3, #7
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed00 	.word	0xe000ed00

08002e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	db0b      	blt.n	8002e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e16:	79fb      	ldrb	r3, [r7, #7]
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4907      	ldr	r1, [pc, #28]	@ (8002e3c <__NVIC_EnableIRQ+0x38>)
 8002e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2001      	movs	r0, #1
 8002e26:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e2e:	bf00      	nop
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100

08002e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	6039      	str	r1, [r7, #0]
 8002e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	db0a      	blt.n	8002e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	490c      	ldr	r1, [pc, #48]	@ (8002e8c <__NVIC_SetPriority+0x4c>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	0112      	lsls	r2, r2, #4
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	440b      	add	r3, r1
 8002e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e68:	e00a      	b.n	8002e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4908      	ldr	r1, [pc, #32]	@ (8002e90 <__NVIC_SetPriority+0x50>)
 8002e70:	79fb      	ldrb	r3, [r7, #7]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	3b04      	subs	r3, #4
 8002e78:	0112      	lsls	r2, r2, #4
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	761a      	strb	r2, [r3, #24]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	e000e100 	.word	0xe000e100
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b089      	sub	sp, #36	@ 0x24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf28      	it	cs
 8002eb2:	2304      	movcs	r3, #4
 8002eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3304      	adds	r3, #4
 8002eba:	2b06      	cmp	r3, #6
 8002ebc:	d902      	bls.n	8002ec4 <NVIC_EncodePriority+0x30>
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3b03      	subs	r3, #3
 8002ec2:	e000      	b.n	8002ec6 <NVIC_EncodePriority+0x32>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002edc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	43d9      	mvns	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	4313      	orrs	r3, r2
         );
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3724      	adds	r7, #36	@ 0x24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f0c:	d301      	bcc.n	8002f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00f      	b.n	8002f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f12:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <SysTick_Config+0x40>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1a:	210f      	movs	r1, #15
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f20:	f7ff ff8e 	bl	8002e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <SysTick_Config+0x40>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2a:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <SysTick_Config+0x40>)
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	e000e010 	.word	0xe000e010

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff29 	bl	8002da0 <__NVIC_SetPriorityGrouping>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f64:	f7ff ff40 	bl	8002de8 <__NVIC_GetPriorityGrouping>
 8002f68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	6978      	ldr	r0, [r7, #20]
 8002f70:	f7ff ff90 	bl	8002e94 <NVIC_EncodePriority>
 8002f74:	4602      	mov	r2, r0
 8002f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7a:	4611      	mov	r1, r2
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff ff5f 	bl	8002e40 <__NVIC_SetPriority>
}
 8002f82:	bf00      	nop
 8002f84:	3718      	adds	r7, #24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff33 	bl	8002e04 <__NVIC_EnableIRQ>
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f7ff ffa4 	bl	8002efc <SysTick_Config>
 8002fb4:	4603      	mov	r3, r0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e014      	b.n	8002ffa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	791b      	ldrb	r3, [r3, #4]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7fe f881 	bl	80010e8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
	...

08003004 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	@ 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_DAC_ConfigChannel+0x1c>
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e19e      	b.n	8003362 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	795b      	ldrb	r3, [r3, #5]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_DAC_ConfigChannel+0x2c>
 800302c:	2302      	movs	r3, #2
 800302e:	e198      	b.n	8003362 <HAL_DAC_ConfigChannel+0x35e>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2202      	movs	r2, #2
 800303a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d17a      	bne.n	800313a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003044:	f7fe fe6a 	bl	8001d1c <HAL_GetTick>
 8003048:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13d      	bne.n	80030cc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003050:	e018      	b.n	8003084 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003052:	f7fe fe63 	bl	8001d1c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d911      	bls.n	8003084 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f043 0208 	orr.w	r2, r3, #8
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2203      	movs	r2, #3
 800307e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e16e      	b.n	8003362 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800308a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1df      	bne.n	8003052 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40
 800309c:	e020      	b.n	80030e0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800309e:	f7fe fe3d 	bl	8001d1c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d90f      	bls.n	80030cc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	da0a      	bge.n	80030cc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	f043 0208 	orr.w	r2, r3, #8
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2203      	movs	r2, #3
 80030c6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e14a      	b.n	8003362 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	dbe3      	blt.n	800309e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030de:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	ea02 0103 	and.w	r1, r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	21ff      	movs	r1, #255	@ 0xff
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	ea02 0103 	and.w	r1, r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11d      	bne.n	800317e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	221f      	movs	r2, #31
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315a:	4013      	ands	r3, r2
 800315c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2207      	movs	r2, #7
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003196:	4013      	ands	r3, r2
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d102      	bne.n	80031a8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	e00f      	b.n	80031c8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d102      	bne.n	80031b6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80031b0:	2301      	movs	r3, #1
 80031b2:	623b      	str	r3, [r7, #32]
 80031b4:	e008      	b.n	80031c8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80031be:	2301      	movs	r3, #1
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	e001      	b.n	80031c8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80031c4:	2300      	movs	r3, #0
 80031c6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	6a3a      	ldr	r2, [r7, #32]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0310 	and.w	r3, r3, #16
 80031de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ea:	4013      	ands	r3, r2
 80031ec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	791b      	ldrb	r3, [r3, #4]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d102      	bne.n	80031fc <HAL_DAC_ConfigChannel+0x1f8>
 80031f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031fa:	e000      	b.n	80031fe <HAL_DAC_ConfigChannel+0x1fa>
 80031fc:	2300      	movs	r3, #0
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003216:	4013      	ands	r3, r2
 8003218:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	795b      	ldrb	r3, [r3, #5]
 800321e:	2b01      	cmp	r3, #1
 8003220:	d102      	bne.n	8003228 <HAL_DAC_ConfigChannel+0x224>
 8003222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003226:	e000      	b.n	800322a <HAL_DAC_ConfigChannel+0x226>
 8003228:	2300      	movs	r3, #0
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003236:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b02      	cmp	r3, #2
 800323e:	d114      	bne.n	800326a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003240:	f003 faa2 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 8003244:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4a48      	ldr	r2, [pc, #288]	@ (800336c <HAL_DAC_ConfigChannel+0x368>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d904      	bls.n	8003258 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
 8003256:	e00f      	b.n	8003278 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4a45      	ldr	r2, [pc, #276]	@ (8003370 <HAL_DAC_ConfigChannel+0x36c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d90a      	bls.n	8003276 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003262:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
 8003268:	e006      	b.n	8003278 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003270:	4313      	orrs	r3, r2
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
 8003274:	e000      	b.n	8003278 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003276:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003286:	4313      	orrs	r3, r2
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003290:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	400a      	ands	r2, r1
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43db      	mvns	r3, r3
 80032c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ca:	4013      	ands	r3, r2
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f003 0310 	and.w	r3, r3, #16
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032e2:	4313      	orrs	r3, r2
 80032e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	22c0      	movs	r2, #192	@ 0xc0
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43da      	mvns	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	400a      	ands	r2, r1
 8003308:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	089b      	lsrs	r3, r3, #2
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	089b      	lsrs	r3, r3, #2
 800331c:	021b      	lsls	r3, r3, #8
 800331e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	ea02 0103 	and.w	r1, r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	409a      	lsls	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003360:	7ffb      	ldrb	r3, [r7, #31]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3728      	adds	r7, #40	@ 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	09896800 	.word	0x09896800
 8003370:	04c4b400 	.word	0x04c4b400

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003382:	e15a      	b.n	800363a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2101      	movs	r1, #1
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	4013      	ands	r3, r2
 8003392:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 814c 	beq.w	8003634 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d005      	beq.n	80033b4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d130      	bne.n	8003416 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	2203      	movs	r2, #3
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43db      	mvns	r3, r3
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	4013      	ands	r3, r2
 80033ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	4313      	orrs	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033ea:	2201      	movs	r2, #1
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 0201 	and.w	r2, r3, #1
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b03      	cmp	r3, #3
 8003420:	d017      	beq.n	8003452 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2203      	movs	r2, #3
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 0303 	and.w	r3, r3, #3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d123      	bne.n	80034a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	08da      	lsrs	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3208      	adds	r2, #8
 8003466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800346a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	220f      	movs	r2, #15
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43db      	mvns	r3, r3
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4013      	ands	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	6939      	ldr	r1, [r7, #16]
 80034a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	2203      	movs	r2, #3
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 0203 	and.w	r2, r3, #3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80a6 	beq.w	8003634 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e8:	4b5b      	ldr	r3, [pc, #364]	@ (8003658 <HAL_GPIO_Init+0x2e4>)
 80034ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ec:	4a5a      	ldr	r2, [pc, #360]	@ (8003658 <HAL_GPIO_Init+0x2e4>)
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80034f4:	4b58      	ldr	r3, [pc, #352]	@ (8003658 <HAL_GPIO_Init+0x2e4>)
 80034f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003500:	4a56      	ldr	r2, [pc, #344]	@ (800365c <HAL_GPIO_Init+0x2e8>)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	220f      	movs	r2, #15
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4013      	ands	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800352a:	d01f      	beq.n	800356c <HAL_GPIO_Init+0x1f8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a4c      	ldr	r2, [pc, #304]	@ (8003660 <HAL_GPIO_Init+0x2ec>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d019      	beq.n	8003568 <HAL_GPIO_Init+0x1f4>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a4b      	ldr	r2, [pc, #300]	@ (8003664 <HAL_GPIO_Init+0x2f0>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_GPIO_Init+0x1f0>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a4a      	ldr	r2, [pc, #296]	@ (8003668 <HAL_GPIO_Init+0x2f4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00d      	beq.n	8003560 <HAL_GPIO_Init+0x1ec>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a49      	ldr	r2, [pc, #292]	@ (800366c <HAL_GPIO_Init+0x2f8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <HAL_GPIO_Init+0x1e8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a48      	ldr	r2, [pc, #288]	@ (8003670 <HAL_GPIO_Init+0x2fc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d101      	bne.n	8003558 <HAL_GPIO_Init+0x1e4>
 8003554:	2305      	movs	r3, #5
 8003556:	e00a      	b.n	800356e <HAL_GPIO_Init+0x1fa>
 8003558:	2306      	movs	r3, #6
 800355a:	e008      	b.n	800356e <HAL_GPIO_Init+0x1fa>
 800355c:	2304      	movs	r3, #4
 800355e:	e006      	b.n	800356e <HAL_GPIO_Init+0x1fa>
 8003560:	2303      	movs	r3, #3
 8003562:	e004      	b.n	800356e <HAL_GPIO_Init+0x1fa>
 8003564:	2302      	movs	r3, #2
 8003566:	e002      	b.n	800356e <HAL_GPIO_Init+0x1fa>
 8003568:	2301      	movs	r3, #1
 800356a:	e000      	b.n	800356e <HAL_GPIO_Init+0x1fa>
 800356c:	2300      	movs	r3, #0
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	f002 0203 	and.w	r2, r2, #3
 8003574:	0092      	lsls	r2, r2, #2
 8003576:	4093      	lsls	r3, r2
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4313      	orrs	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357e:	4937      	ldr	r1, [pc, #220]	@ (800365c <HAL_GPIO_Init+0x2e8>)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	089b      	lsrs	r3, r3, #2
 8003584:	3302      	adds	r3, #2
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800358c:	4b39      	ldr	r3, [pc, #228]	@ (8003674 <HAL_GPIO_Init+0x300>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43db      	mvns	r3, r3
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	4013      	ands	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035b0:	4a30      	ldr	r2, [pc, #192]	@ (8003674 <HAL_GPIO_Init+0x300>)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003674 <HAL_GPIO_Init+0x300>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	43db      	mvns	r3, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4013      	ands	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035da:	4a26      	ldr	r2, [pc, #152]	@ (8003674 <HAL_GPIO_Init+0x300>)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035e0:	4b24      	ldr	r3, [pc, #144]	@ (8003674 <HAL_GPIO_Init+0x300>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003604:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <HAL_GPIO_Init+0x300>)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800360a:	4b1a      	ldr	r3, [pc, #104]	@ (8003674 <HAL_GPIO_Init+0x300>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	43db      	mvns	r3, r3
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800362e:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_GPIO_Init+0x300>)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	3301      	adds	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa22 f303 	lsr.w	r3, r2, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f ae9d 	bne.w	8003384 <HAL_GPIO_Init+0x10>
  }
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	371c      	adds	r7, #28
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	40021000 	.word	0x40021000
 800365c:	40010000 	.word	0x40010000
 8003660:	48000400 	.word	0x48000400
 8003664:	48000800 	.word	0x48000800
 8003668:	48000c00 	.word	0x48000c00
 800366c:	48001000 	.word	0x48001000
 8003670:	48001400 	.word	0x48001400
 8003674:	40010400 	.word	0x40010400

08003678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
 8003684:	4613      	mov	r3, r2
 8003686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003694:	e002      	b.n	800369c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003696:	887a      	ldrh	r2, [r7, #2]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e08d      	b.n	80037d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd fe54 	bl	800137c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	@ 0x24
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003708:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d107      	bne.n	8003722 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e006      	b.n	8003730 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800372e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b02      	cmp	r3, #2
 8003736:	d108      	bne.n	800374a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	e007      	b.n	800375a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003758:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6812      	ldr	r2, [r2, #0]
 8003764:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003768:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800376c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800377c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af02      	add	r7, sp, #8
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	607a      	str	r2, [r7, #4]
 80037ea:	461a      	mov	r2, r3
 80037ec:	460b      	mov	r3, r1
 80037ee:	817b      	strh	r3, [r7, #10]
 80037f0:	4613      	mov	r3, r2
 80037f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	f040 80fd 	bne.w	80039fc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_I2C_Master_Transmit+0x30>
 800380c:	2302      	movs	r3, #2
 800380e:	e0f6      	b.n	80039fe <HAL_I2C_Master_Transmit+0x21e>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003818:	f7fe fa80 	bl	8001d1c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2319      	movs	r3, #25
 8003824:	2201      	movs	r2, #1
 8003826:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fa0a 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e0e1      	b.n	80039fe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2221      	movs	r2, #33	@ 0x21
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2210      	movs	r2, #16
 8003846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	893a      	ldrh	r2, [r7, #8]
 800385a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2bff      	cmp	r3, #255	@ 0xff
 800386a:	d906      	bls.n	800387a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	22ff      	movs	r2, #255	@ 0xff
 8003870:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003872:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e007      	b.n	800388a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003884:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003888:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d024      	beq.n	80038dc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	8979      	ldrh	r1, [r7, #10]
 80038ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003a08 <HAL_I2C_Master_Transmit+0x228>)
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 fc05 	bl	80040e4 <I2C_TransferConfig>
 80038da:	e066      	b.n	80039aa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	8979      	ldrh	r1, [r7, #10]
 80038e4:	4b48      	ldr	r3, [pc, #288]	@ (8003a08 <HAL_I2C_Master_Transmit+0x228>)
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fbfa 	bl	80040e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80038f0:	e05b      	b.n	80039aa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	6a39      	ldr	r1, [r7, #32]
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 f9fd 	bl	8003cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e07b      	b.n	80039fe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390a:	781a      	ldrb	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d034      	beq.n	80039aa <HAL_I2C_Master_Transmit+0x1ca>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d130      	bne.n	80039aa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	2200      	movs	r2, #0
 8003950:	2180      	movs	r1, #128	@ 0x80
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f000 f976 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e04d      	b.n	80039fe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	2bff      	cmp	r3, #255	@ 0xff
 800396a:	d90e      	bls.n	800398a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	22ff      	movs	r2, #255	@ 0xff
 8003970:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	b2da      	uxtb	r2, r3
 8003978:	8979      	ldrh	r1, [r7, #10]
 800397a:	2300      	movs	r3, #0
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fbae 	bl	80040e4 <I2C_TransferConfig>
 8003988:	e00f      	b.n	80039aa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003998:	b2da      	uxtb	r2, r3
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fb9d 	bl	80040e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d19e      	bne.n	80038f2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	6a39      	ldr	r1, [r7, #32]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f9e3 	bl	8003d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e01a      	b.n	80039fe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2220      	movs	r2, #32
 80039ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b0c      	ldr	r3, [pc, #48]	@ (8003a0c <HAL_I2C_Master_Transmit+0x22c>)
 80039dc:	400b      	ands	r3, r1
 80039de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039f8:	2300      	movs	r3, #0
 80039fa:	e000      	b.n	80039fe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80039fc:	2302      	movs	r3, #2
  }
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	80002000 	.word	0x80002000
 8003a0c:	fe00e800 	.word	0xfe00e800

08003a10 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	607a      	str	r2, [r7, #4]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	817b      	strh	r3, [r7, #10]
 8003a20:	4613      	mov	r3, r2
 8003a22:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	f040 80db 	bne.w	8003be8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_I2C_Master_Receive+0x30>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e0d4      	b.n	8003bea <HAL_I2C_Master_Receive+0x1da>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a48:	f7fe f968 	bl	8001d1c <HAL_GetTick>
 8003a4c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2319      	movs	r3, #25
 8003a54:	2201      	movs	r2, #1
 8003a56:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f8f2 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e0bf      	b.n	8003bea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2222      	movs	r2, #34	@ 0x22
 8003a6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2210      	movs	r2, #16
 8003a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	893a      	ldrh	r2, [r7, #8]
 8003a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	2bff      	cmp	r3, #255	@ 0xff
 8003a9a:	d90e      	bls.n	8003aba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	22ff      	movs	r2, #255	@ 0xff
 8003aa0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	8979      	ldrh	r1, [r7, #10]
 8003aaa:	4b52      	ldr	r3, [pc, #328]	@ (8003bf4 <HAL_I2C_Master_Receive+0x1e4>)
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fb16 	bl	80040e4 <I2C_TransferConfig>
 8003ab8:	e06d      	b.n	8003b96 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac8:	b2da      	uxtb	r2, r3
 8003aca:	8979      	ldrh	r1, [r7, #10]
 8003acc:	4b49      	ldr	r3, [pc, #292]	@ (8003bf4 <HAL_I2C_Master_Receive+0x1e4>)
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fb05 	bl	80040e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ada:	e05c      	b.n	8003b96 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	6a39      	ldr	r1, [r7, #32]
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f993 	bl	8003e0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e07c      	b.n	8003bea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d034      	beq.n	8003b96 <HAL_I2C_Master_Receive+0x186>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d130      	bne.n	8003b96 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2180      	movs	r1, #128	@ 0x80
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f880 	bl	8003c44 <I2C_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e04d      	b.n	8003bea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	2bff      	cmp	r3, #255	@ 0xff
 8003b56:	d90e      	bls.n	8003b76 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	22ff      	movs	r2, #255	@ 0xff
 8003b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	8979      	ldrh	r1, [r7, #10]
 8003b66:	2300      	movs	r3, #0
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fab8 	bl	80040e4 <I2C_TransferConfig>
 8003b74:	e00f      	b.n	8003b96 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 faa7 	bl	80040e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d19d      	bne.n	8003adc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	6a39      	ldr	r1, [r7, #32]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 f8ed 	bl	8003d84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e01a      	b.n	8003bea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <HAL_I2C_Master_Receive+0x1e8>)
 8003bc8:	400b      	ands	r3, r1
 8003bca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	80002400 	.word	0x80002400
 8003bf8:	fe00e800 	.word	0xfe00e800

08003bfc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d103      	bne.n	8003c1a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2200      	movs	r2, #0
 8003c18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d007      	beq.n	8003c38 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	619a      	str	r2, [r3, #24]
  }
}
 8003c38:	bf00      	nop
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c54:	e03b      	b.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	6839      	ldr	r1, [r7, #0]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f962 	bl	8003f24 <I2C_IsErrorOccurred>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e041      	b.n	8003cee <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d02d      	beq.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe f853 	bl	8001d1c <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d122      	bne.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	79fb      	ldrb	r3, [r7, #7]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d113      	bne.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e00f      	b.n	8003cee <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699a      	ldr	r2, [r3, #24]
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	bf0c      	ite	eq
 8003cde:	2301      	moveq	r3, #1
 8003ce0:	2300      	movne	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d0b4      	beq.n	8003c56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b084      	sub	sp, #16
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d02:	e033      	b.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f90b 	bl	8003f24 <I2C_IsErrorOccurred>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e031      	b.n	8003d7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1e:	d025      	beq.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d20:	f7fd fffc 	bl	8001d1c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d302      	bcc.n	8003d36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d11a      	bne.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d013      	beq.n	8003d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e007      	b.n	8003d7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d1c4      	bne.n	8003d04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d90:	e02f      	b.n	8003df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f8c4 	bl	8003f24 <I2C_IsErrorOccurred>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e02d      	b.n	8003e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da6:	f7fd ffb9 	bl	8001d1c <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d302      	bcc.n	8003dbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d11a      	bne.n	8003df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d013      	beq.n	8003df2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dce:	f043 0220 	orr.w	r2, r3, #32
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e007      	b.n	8003e02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	f003 0320 	and.w	r3, r3, #32
 8003dfc:	2b20      	cmp	r3, #32
 8003dfe:	d1c8      	bne.n	8003d92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003e1c:	e071      	b.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f87e 	bl	8003f24 <I2C_IsErrorOccurred>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d13b      	bne.n	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003e40:	7dfb      	ldrb	r3, [r7, #23]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d138      	bne.n	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d105      	bne.n	8003e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b10      	cmp	r3, #16
 8003e6c:	d121      	bne.n	8003eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2210      	movs	r2, #16
 8003e74:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2220      	movs	r2, #32
 8003e82:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6859      	ldr	r1, [r3, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4b24      	ldr	r3, [pc, #144]	@ (8003f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003e90:	400b      	ands	r3, r1
 8003e92:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
 8003eb0:	e002      	b.n	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003eb8:	f7fd ff30 	bl	8001d1c <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d302      	bcc.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d119      	bne.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d116      	bne.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0304 	and.w	r3, r3, #4
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00f      	beq.n	8003f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f043 0220 	orr.w	r2, r3, #32
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d002      	beq.n	8003f16 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d083      	beq.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	fe00e800 	.word	0xfe00e800

08003f24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d068      	beq.n	8004022 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2210      	movs	r2, #16
 8003f56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f58:	e049      	b.n	8003fee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f60:	d045      	beq.n	8003fee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f62:	f7fd fedb 	bl	8001d1c <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	68ba      	ldr	r2, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d302      	bcc.n	8003f78 <I2C_IsErrorOccurred+0x54>
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d13a      	bne.n	8003fee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f9a:	d121      	bne.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa2:	d01d      	beq.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fa4:	7cfb      	ldrb	r3, [r7, #19]
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d01a      	beq.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fba:	f7fd feaf 	bl	8001d1c <HAL_GetTick>
 8003fbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc0:	e00e      	b.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fc2:	f7fd feab 	bl	8001d1c <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b19      	cmp	r3, #25
 8003fce:	d907      	bls.n	8003fe0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003fde:	e006      	b.n	8003fee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b20      	cmp	r3, #32
 8003fec:	d1e9      	bne.n	8003fc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d003      	beq.n	8004004 <I2C_IsErrorOccurred+0xe0>
 8003ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0aa      	beq.n	8003f5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004004:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2220      	movs	r2, #32
 8004012:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	f043 0304 	orr.w	r3, r3, #4
 800401a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00b      	beq.n	800404c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f043 0301 	orr.w	r3, r3, #1
 800403a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004044:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	f043 0308 	orr.w	r3, r3, #8
 800405c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004066:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00b      	beq.n	8004090 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004078:	6a3b      	ldr	r3, [r7, #32]
 800407a:	f043 0302 	orr.w	r3, r3, #2
 800407e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004090:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01c      	beq.n	80040d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f7ff fdaf 	bl	8003bfc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <I2C_IsErrorOccurred+0x1bc>)
 80040aa:	400b      	ands	r3, r1
 80040ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3728      	adds	r7, #40	@ 0x28
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	fe00e800 	.word	0xfe00e800

080040e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607b      	str	r3, [r7, #4]
 80040ee:	460b      	mov	r3, r1
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	4613      	mov	r3, r2
 80040f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040f6:	897b      	ldrh	r3, [r7, #10]
 80040f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040fc:	7a7b      	ldrb	r3, [r7, #9]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004104:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	4313      	orrs	r3, r2
 800410e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004112:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	0d5b      	lsrs	r3, r3, #21
 800411e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004122:	4b08      	ldr	r3, [pc, #32]	@ (8004144 <I2C_TransferConfig+0x60>)
 8004124:	430b      	orrs	r3, r1
 8004126:	43db      	mvns	r3, r3
 8004128:	ea02 0103 	and.w	r1, r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004136:	bf00      	nop
 8004138:	371c      	adds	r7, #28
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	03ff63ff 	.word	0x03ff63ff

08004148 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b20      	cmp	r3, #32
 800415c:	d138      	bne.n	80041d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004168:	2302      	movs	r3, #2
 800416a:	e032      	b.n	80041d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	@ 0x24
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800419a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6819      	ldr	r1, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d139      	bne.n	8004268 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041fe:	2302      	movs	r3, #2
 8004200:	e033      	b.n	800426a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2224      	movs	r2, #36	@ 0x24
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0201 	bic.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004230:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	021b      	lsls	r3, r3, #8
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4313      	orrs	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004264:	2300      	movs	r3, #0
 8004266:	e000      	b.n	800426a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004268:	2302      	movs	r3, #2
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b084      	sub	sp, #16
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d101      	bne.n	8004288 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e0c0      	b.n	800440a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f008 fb5d 	bl	800c95c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2203      	movs	r2, #3
 80042a6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f004 f9fc 	bl	80086ac <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b4:	2300      	movs	r3, #0
 80042b6:	73fb      	strb	r3, [r7, #15]
 80042b8:	e03e      	b.n	8004338 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042ba:	7bfa      	ldrb	r2, [r7, #15]
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	440b      	add	r3, r1
 80042c8:	3311      	adds	r3, #17
 80042ca:	2201      	movs	r2, #1
 80042cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042ce:	7bfa      	ldrb	r2, [r7, #15]
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	440b      	add	r3, r1
 80042dc:	3310      	adds	r3, #16
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042e2:	7bfa      	ldrb	r2, [r7, #15]
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	440b      	add	r3, r1
 80042f0:	3313      	adds	r3, #19
 80042f2:	2200      	movs	r2, #0
 80042f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	440b      	add	r3, r1
 8004304:	3320      	adds	r3, #32
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800430a:	7bfa      	ldrb	r2, [r7, #15]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4413      	add	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	440b      	add	r3, r1
 8004318:	3324      	adds	r3, #36	@ 0x24
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	3301      	adds	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	791b      	ldrb	r3, [r3, #4]
 800433c:	7bfa      	ldrb	r2, [r7, #15]
 800433e:	429a      	cmp	r2, r3
 8004340:	d3bb      	bcc.n	80042ba <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	73fb      	strb	r3, [r7, #15]
 8004346:	e044      	b.n	80043d2 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004348:	7bfa      	ldrb	r2, [r7, #15]
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	440b      	add	r3, r1
 8004356:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800435e:	7bfa      	ldrb	r2, [r7, #15]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	440b      	add	r3, r1
 800436c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004374:	7bfa      	ldrb	r2, [r7, #15]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	440b      	add	r3, r1
 8004398:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800439c:	2200      	movs	r2, #0
 800439e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043a0:	7bfa      	ldrb	r2, [r7, #15]
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	440b      	add	r3, r1
 80043ae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043b6:	7bfa      	ldrb	r2, [r7, #15]
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	440b      	add	r3, r1
 80043c4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	3301      	adds	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	791b      	ldrb	r3, [r3, #4]
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d3b5      	bcc.n	8004348 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80043e8:	f004 f97b 	bl	80086e2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	7a9b      	ldrb	r3, [r3, #10]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d102      	bne.n	8004408 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f001 fc42 	bl	8005c8c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_PCD_Start+0x16>
 8004424:	2302      	movs	r3, #2
 8004426:	e012      	b.n	800444e <HAL_PCD_Start+0x3c>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4618      	mov	r0, r3
 8004436:	f004 f922 	bl	800867e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f006 fbe4 	bl	800ac0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b084      	sub	sp, #16
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f006 fbe9 	bl	800ac3a <USB_ReadInterrupts>
 8004468:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fb06 	bl	8004a86 <PCD_EP_ISR_Handler>

    return;
 800447a:	e110      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004482:	2b00      	cmp	r3, #0
 8004484:	d013      	beq.n	80044ae <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004498:	b292      	uxth	r2, r2
 800449a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f008 faed 	bl	800ca7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80044a4:	2100      	movs	r1, #0
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f8fc 	bl	80046a4 <HAL_PCD_SetAddress>

    return;
 80044ac:	e0f7      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00c      	beq.n	80044d2 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044ca:	b292      	uxth	r2, r2
 80044cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044d0:	e0e5      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ee:	b292      	uxth	r2, r2
 80044f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80044f4:	e0d3      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d034      	beq.n	800456a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004508:	b29a      	uxth	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	b292      	uxth	r2, r2
 8004514:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0208 	bic.w	r2, r2, #8
 800452a:	b292      	uxth	r2, r2
 800452c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004536:	2b01      	cmp	r3, #1
 8004538:	d107      	bne.n	800454a <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004542:	2100      	movs	r1, #0
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f008 fc8d 	bl	800ce64 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f008 fad0 	bl	800caf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004562:	b292      	uxth	r2, r2
 8004564:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004568:	e099      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004570:	2b00      	cmp	r3, #0
 8004572:	d027      	beq.n	80045c4 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800457c:	b29a      	uxth	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0208 	orr.w	r2, r2, #8
 8004586:	b292      	uxth	r2, r2
 8004588:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004594:	b29a      	uxth	r2, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800459e:	b292      	uxth	r2, r2
 80045a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0204 	orr.w	r2, r2, #4
 80045b6:	b292      	uxth	r2, r2
 80045b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f008 fa7d 	bl	800cabc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045c2:	e06c      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d040      	beq.n	8004650 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045e0:	b292      	uxth	r2, r2
 80045e2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d12b      	bne.n	8004648 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0204 	orr.w	r2, r2, #4
 8004602:	b292      	uxth	r2, r2
 8004604:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0208 	orr.w	r2, r2, #8
 800461a:	b292      	uxth	r2, r2
 800461c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004630:	b29b      	uxth	r3, r3
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800463e:	2101      	movs	r1, #1
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f008 fc0f 	bl	800ce64 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004646:	e02a      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f008 fa37 	bl	800cabc <HAL_PCD_SuspendCallback>
    return;
 800464e:	e026      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00f      	beq.n	800467a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800466c:	b292      	uxth	r2, r2
 800466e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f008 f9f5 	bl	800ca62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004678:	e011      	b.n	800469e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00c      	beq.n	800469e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800468c:	b29a      	uxth	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004696:	b292      	uxth	r2, r2
 8004698:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800469c:	bf00      	nop
  }
}
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_PCD_SetAddress+0x1a>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e012      	b.n	80046e4 <HAL_PCD_SetAddress+0x40>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f006 fa85 	bl	800abe4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	4608      	mov	r0, r1
 80046f6:	4611      	mov	r1, r2
 80046f8:	461a      	mov	r2, r3
 80046fa:	4603      	mov	r3, r0
 80046fc:	70fb      	strb	r3, [r7, #3]
 80046fe:	460b      	mov	r3, r1
 8004700:	803b      	strh	r3, [r7, #0]
 8004702:	4613      	mov	r3, r2
 8004704:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800470a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800470e:	2b00      	cmp	r3, #0
 8004710:	da0e      	bge.n	8004730 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	f003 0207 	and.w	r2, r3, #7
 8004718:	4613      	mov	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	3310      	adds	r3, #16
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	4413      	add	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2201      	movs	r2, #1
 800472c:	705a      	strb	r2, [r3, #1]
 800472e:	e00e      	b.n	800474e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	f003 0207 	and.w	r2, r3, #7
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800475a:	883b      	ldrh	r3, [r7, #0]
 800475c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	78ba      	ldrb	r2, [r7, #2]
 8004768:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800476a:	78bb      	ldrb	r3, [r7, #2]
 800476c:	2b02      	cmp	r3, #2
 800476e:	d102      	bne.n	8004776 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_PCD_EP_Open+0x98>
 8004780:	2302      	movs	r3, #2
 8004782:	e00e      	b.n	80047a2 <HAL_PCD_EP_Open+0xb6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	4618      	mov	r0, r3
 8004794:	f003 ffc4 	bl	8008720 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80047a0:	7afb      	ldrb	r3, [r7, #11]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b084      	sub	sp, #16
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da0e      	bge.n	80047dc <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	f003 0207 	and.w	r2, r3, #7
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	3310      	adds	r3, #16
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2201      	movs	r2, #1
 80047d8:	705a      	strb	r2, [r3, #1]
 80047da:	e00e      	b.n	80047fa <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	f003 0207 	and.w	r2, r3, #7
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_PCD_EP_Close+0x6a>
 8004810:	2302      	movs	r3, #2
 8004812:	e00e      	b.n	8004832 <HAL_PCD_EP_Close+0x88>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68f9      	ldr	r1, [r7, #12]
 8004822:	4618      	mov	r0, r3
 8004824:	f004 fb40 	bl	8008ea8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b086      	sub	sp, #24
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	460b      	mov	r3, r1
 8004848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800484a:	7afb      	ldrb	r3, [r7, #11]
 800484c:	f003 0207 	and.w	r2, r3, #7
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2200      	movs	r2, #0
 8004878:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800487a:	7afb      	ldrb	r3, [r7, #11]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	b2da      	uxtb	r2, r3
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6979      	ldr	r1, [r7, #20]
 800488c:	4618      	mov	r0, r3
 800488e:	f004 fcf8 	bl	8009282 <USB_EPStartXfer>

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	f003 0207 	and.w	r2, r3, #7
 80048ae:	6879      	ldr	r1, [r7, #4]
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	460b      	mov	r3, r1
 80048da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	f003 0207 	and.w	r2, r3, #7
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	3310      	adds	r3, #16
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4413      	add	r3, r2
 80048f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2200      	movs	r2, #0
 8004910:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2201      	movs	r2, #1
 8004916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	f003 0307 	and.w	r3, r3, #7
 800491e:	b2da      	uxtb	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6979      	ldr	r1, [r7, #20]
 800492a:	4618      	mov	r0, r3
 800492c:	f004 fca9 	bl	8009282 <USB_EPStartXfer>

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	7912      	ldrb	r2, [r2, #4]
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e03e      	b.n	80049d6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004958:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800495c:	2b00      	cmp	r3, #0
 800495e:	da0e      	bge.n	800497e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	f003 0207 	and.w	r2, r3, #7
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	3310      	adds	r3, #16
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	4413      	add	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2201      	movs	r2, #1
 800497a:	705a      	strb	r2, [r3, #1]
 800497c:	e00c      	b.n	8004998 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800499e:	78fb      	ldrb	r3, [r7, #3]
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_PCD_EP_SetStall+0x7e>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e00e      	b.n	80049d6 <HAL_PCD_EP_SetStall+0x9c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f006 f80d 	bl	800a9e6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	7912      	ldrb	r2, [r2, #4]
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d901      	bls.n	80049fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e040      	b.n	8004a7e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da0e      	bge.n	8004a22 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 0207 	and.w	r2, r3, #7
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	3310      	adds	r3, #16
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	705a      	strb	r2, [r3, #1]
 8004a20:	e00e      	b.n	8004a40 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 0207 	and.w	r2, r3, #7
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_PCD_EP_ClrStall+0x82>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e00e      	b.n	8004a7e <HAL_PCD_EP_ClrStall+0xa0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68f9      	ldr	r1, [r7, #12]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f006 f80a 	bl	800aa88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b096      	sub	sp, #88	@ 0x58
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004a8e:	e3ad      	b.n	80051ec <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a98:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004a9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004aaa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	f040 816f 	bne.w	8004d92 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004ab4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004ab8:	f003 0310 	and.w	r3, r3, #16
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d14c      	bne.n	8004b5a <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	881b      	ldrh	r3, [r3, #0]
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad0:	81fb      	strh	r3, [r7, #14]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3310      	adds	r3, #16
 8004ae8:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	4413      	add	r3, r2
 8004b04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b10:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	441a      	add	r2, r3
 8004b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b1e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004b20:	2100      	movs	r1, #0
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f007 ff83 	bl	800ca2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	7b1b      	ldrb	r3, [r3, #12]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 835c 	beq.w	80051ec <PCD_EP_ISR_Handler+0x766>
 8004b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 8357 	bne.w	80051ec <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7b1b      	ldrb	r3, [r3, #12]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	731a      	strb	r2, [r3, #12]
 8004b58:	e348      	b.n	80051ec <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b60:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	881b      	ldrh	r3, [r3, #0]
 8004b68:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b6c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004b70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d032      	beq.n	8004bde <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	00db      	lsls	r3, r3, #3
 8004b8a:	4413      	add	r3, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	4413      	add	r3, r2
 8004b92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b9e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6818      	ldr	r0, [r3, #0]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bac:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bb0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f006 f893 	bl	800acde <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	823b      	strh	r3, [r7, #16]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	8a3a      	ldrh	r2, [r7, #16]
 8004bce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f007 fefc 	bl	800c9d4 <HAL_PCD_SetupStageCallback>
 8004bdc:	e306      	b.n	80051ec <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004bde:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f280 8302 	bge.w	80051ec <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	83fb      	strh	r3, [r7, #30]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	8bfa      	ldrh	r2, [r7, #30]
 8004bfe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c02:	b292      	uxth	r2, r2
 8004c04:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4413      	add	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c2c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d019      	beq.n	8004c6a <PCD_EP_ISR_Handler+0x1e4>
 8004c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d015      	beq.n	8004c6a <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
 8004c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c44:	6959      	ldr	r1, [r3, #20]
 8004c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c48:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c4c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f006 f845 	bl	800acde <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	441a      	add	r2, r3
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c60:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c62:	2100      	movs	r1, #0
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f007 fec7 	bl	800c9f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	881b      	ldrh	r3, [r3, #0]
 8004c70:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004c74:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f040 82b5 	bne.w	80051ec <PCD_EP_ISR_Handler+0x766>
 8004c82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004c86:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c8e:	f000 82ad 	beq.w	80051ec <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	881b      	ldrh	r3, [r3, #0]
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	801a      	strh	r2, [r3, #0]
 8004cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <PCD_EP_ISR_Handler+0x25a>
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	801a      	strh	r2, [r3, #0]
 8004cde:	e039      	b.n	8004d54 <PCD_EP_ISR_Handler+0x2ce>
 8004ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ce6:	d818      	bhi.n	8004d1a <PCD_EP_ISR_Handler+0x294>
 8004ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	085b      	lsrs	r3, r3, #1
 8004cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d002      	beq.n	8004d02 <PCD_EP_ISR_Handler+0x27c>
 8004cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfe:	3301      	adds	r3, #1
 8004d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	881b      	ldrh	r3, [r3, #0]
 8004d06:	b29a      	uxth	r2, r3
 8004d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	029b      	lsls	r3, r3, #10
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	4313      	orrs	r3, r2
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	801a      	strh	r2, [r3, #0]
 8004d18:	e01c      	b.n	8004d54 <PCD_EP_ISR_Handler+0x2ce>
 8004d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <PCD_EP_ISR_Handler+0x2ae>
 8004d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d30:	3b01      	subs	r3, #1
 8004d32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	881b      	ldrh	r3, [r3, #0]
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	029b      	lsls	r3, r3, #10
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	4313      	orrs	r3, r2
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d64:	827b      	strh	r3, [r7, #18]
 8004d66:	8a7b      	ldrh	r3, [r7, #18]
 8004d68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d6c:	827b      	strh	r3, [r7, #18]
 8004d6e:	8a7b      	ldrh	r3, [r7, #18]
 8004d70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d74:	827b      	strh	r3, [r7, #18]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	8a7b      	ldrh	r3, [r7, #18]
 8004d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	8013      	strh	r3, [r2, #0]
 8004d90:	e22c      	b.n	80051ec <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004da6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f280 80f6 	bge.w	8004f9c <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8004dde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004de2:	b292      	uxth	r2, r2
 8004de4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004de6:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dfe:	7b1b      	ldrb	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d123      	bne.n	8004e4c <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	461a      	mov	r2, r3
 8004e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004e22:	881b      	ldrh	r3, [r3, #0]
 8004e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e28:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8004e2c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 808e 	beq.w	8004f52 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e3c:	6959      	ldr	r1, [r3, #20]
 8004e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e40:	88da      	ldrh	r2, [r3, #6]
 8004e42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004e46:	f005 ff4a 	bl	800acde <USB_ReadPMA>
 8004e4a:	e082      	b.n	8004f52 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e4e:	78db      	ldrb	r3, [r3, #3]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d10a      	bne.n	8004e6a <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004e54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f9d3 	bl	8005208 <HAL_PCD_EP_DB_Receive>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004e68:	e073      	b.n	8004f52 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e84:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	441a      	add	r2, r3
 8004e96:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004e9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ea6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d022      	beq.n	8004f0e <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eec:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004ef0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02c      	beq.n	8004f52 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efe:	6959      	ldr	r1, [r3, #20]
 8004f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f02:	891a      	ldrh	r2, [r3, #8]
 8004f04:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f08:	f005 fee9 	bl	800acde <USB_ReadPMA>
 8004f0c:	e021      	b.n	8004f52 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f2c:	881b      	ldrh	r3, [r3, #0]
 8004f2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f32:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8004f36:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6818      	ldr	r0, [r3, #0]
 8004f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f44:	6959      	ldr	r1, [r3, #20]
 8004f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f48:	895a      	ldrh	r2, [r3, #10]
 8004f4a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f4e:	f005 fec6 	bl	800acde <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f54:	69da      	ldr	r2, [r3, #28]
 8004f56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f5a:	441a      	add	r2, r3
 8004f5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f62:	695a      	ldr	r2, [r3, #20]
 8004f64:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004f68:	441a      	add	r2, r3
 8004f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f6c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f70:	699b      	ldr	r3, [r3, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <PCD_EP_ISR_Handler+0x4fc>
 8004f76:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d206      	bcs.n	8004f90 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	4619      	mov	r1, r3
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f007 fd35 	bl	800c9f8 <HAL_PCD_DataOutStageCallback>
 8004f8e:	e005      	b.n	8004f9c <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f96:	4618      	mov	r0, r3
 8004f98:	f004 f973 	bl	8009282 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004f9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8121 	beq.w	80051ec <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004faa:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8004fae:	4613      	mov	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	3310      	adds	r3, #16
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	4413      	add	r3, r2
 8004fbc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	881b      	ldrh	r3, [r3, #0]
 8004fce:	b29b      	uxth	r3, r3
 8004fd0:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	441a      	add	r2, r3
 8004fea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ffc:	78db      	ldrb	r3, [r3, #3]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	f040 80a2 	bne.w	8005148 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005006:	2200      	movs	r2, #0
 8005008:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800500a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500c:	7b1b      	ldrb	r3, [r3, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8093 	beq.w	800513a <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005014:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d046      	beq.n	80050ae <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005022:	785b      	ldrb	r3, [r3, #1]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d126      	bne.n	8005076 <PCD_EP_ISR_Handler+0x5f0>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	@ 0x24
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	4413      	add	r3, r2
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	00da      	lsls	r2, r3, #3
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	4413      	add	r3, r2
 800504a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800504e:	623b      	str	r3, [r7, #32]
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800505a:	b29a      	uxth	r2, r3
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	881b      	ldrh	r3, [r3, #0]
 8005064:	b29b      	uxth	r3, r3
 8005066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800506a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800506e:	b29a      	uxth	r2, r3
 8005070:	6a3b      	ldr	r3, [r7, #32]
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e061      	b.n	800513a <PCD_EP_ISR_Handler+0x6b4>
 8005076:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d15d      	bne.n	800513a <PCD_EP_ISR_Handler+0x6b4>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005092:	4413      	add	r3, r2
 8005094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	00da      	lsls	r2, r3, #3
 800509c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509e:	4413      	add	r3, r2
 80050a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80050a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a8:	2200      	movs	r2, #0
 80050aa:	801a      	strh	r2, [r3, #0]
 80050ac:	e045      	b.n	800513a <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d126      	bne.n	800510a <PCD_EP_ISR_Handler+0x684>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d0:	4413      	add	r3, r2
 80050d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	00da      	lsls	r2, r3, #3
 80050da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050dc:	4413      	add	r3, r2
 80050de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80050e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	881b      	ldrh	r3, [r3, #0]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	801a      	strh	r2, [r3, #0]
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005102:	b29a      	uxth	r2, r3
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	801a      	strh	r2, [r3, #0]
 8005108:	e017      	b.n	800513a <PCD_EP_ISR_Handler+0x6b4>
 800510a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800510c:	785b      	ldrb	r3, [r3, #1]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d113      	bne.n	800513a <PCD_EP_ISR_Handler+0x6b4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800511a:	b29b      	uxth	r3, r3
 800511c:	461a      	mov	r2, r3
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	4413      	add	r3, r2
 8005122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	00da      	lsls	r2, r3, #3
 800512a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512c:	4413      	add	r3, r2
 800512e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005136:	2200      	movs	r2, #0
 8005138:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800513a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	4619      	mov	r1, r3
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f007 fc74 	bl	800ca2e <HAL_PCD_DataInStageCallback>
 8005146:	e051      	b.n	80051ec <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005148:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800514c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d144      	bne.n	80051de <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800515c:	b29b      	uxth	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	4413      	add	r3, r2
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	4413      	add	r3, r2
 800516e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005178:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800517c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517e:	699a      	ldr	r2, [r3, #24]
 8005180:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005184:	429a      	cmp	r2, r3
 8005186:	d907      	bls.n	8005198 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800518a:	699a      	ldr	r2, [r3, #24]
 800518c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005190:	1ad2      	subs	r2, r2, r3
 8005192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005194:	619a      	str	r2, [r3, #24]
 8005196:	e002      	b.n	800519e <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519a:	2200      	movs	r2, #0
 800519c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800519e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f007 fc3e 	bl	800ca2e <HAL_PCD_DataInStageCallback>
 80051b2:	e01b      	b.n	80051ec <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80051b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051b6:	695a      	ldr	r2, [r3, #20]
 80051b8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80051bc:	441a      	add	r2, r3
 80051be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80051c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80051ca:	441a      	add	r2, r3
 80051cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ce:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051d6:	4618      	mov	r0, r3
 80051d8:	f004 f853 	bl	8009282 <USB_EPStartXfer>
 80051dc:	e006      	b.n	80051ec <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80051de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80051e2:	461a      	mov	r2, r3
 80051e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f917 	bl	800541a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	b21b      	sxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f6ff ac49 	blt.w	8004a90 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3758      	adds	r7, #88	@ 0x58
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d07c      	beq.n	800531a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005228:	b29b      	uxth	r3, r3
 800522a:	461a      	mov	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	4413      	add	r3, r2
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	4413      	add	r3, r2
 800523a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800523e:	881b      	ldrh	r3, [r3, #0]
 8005240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005244:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	699a      	ldr	r2, [r3, #24]
 800524a:	8b7b      	ldrh	r3, [r7, #26]
 800524c:	429a      	cmp	r2, r3
 800524e:	d306      	bcc.n	800525e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	8b7b      	ldrh	r3, [r7, #26]
 8005256:	1ad2      	subs	r2, r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	619a      	str	r2, [r3, #24]
 800525c:	e002      	b.n	8005264 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2200      	movs	r2, #0
 8005262:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d123      	bne.n	80052b4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	461a      	mov	r2, r3
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	4413      	add	r3, r2
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005286:	833b      	strh	r3, [r7, #24]
 8005288:	8b3b      	ldrh	r3, [r7, #24]
 800528a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800528e:	833b      	strh	r3, [r7, #24]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	441a      	add	r2, r3
 800529e:	8b3b      	ldrh	r3, [r7, #24]
 80052a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80052b4:	88fb      	ldrh	r3, [r7, #6]
 80052b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d01f      	beq.n	80052fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	4413      	add	r3, r2
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d8:	82fb      	strh	r3, [r7, #22]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	441a      	add	r2, r3
 80052e8:	8afb      	ldrh	r3, [r7, #22]
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80052fe:	8b7b      	ldrh	r3, [r7, #26]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8085 	beq.w	8005410 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	891a      	ldrh	r2, [r3, #8]
 8005312:	8b7b      	ldrh	r3, [r7, #26]
 8005314:	f005 fce3 	bl	800acde <USB_ReadPMA>
 8005318:	e07a      	b.n	8005410 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	4413      	add	r3, r2
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	4413      	add	r3, r2
 8005334:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005338:	881b      	ldrh	r3, [r3, #0]
 800533a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800533e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	699a      	ldr	r2, [r3, #24]
 8005344:	8b7b      	ldrh	r3, [r7, #26]
 8005346:	429a      	cmp	r2, r3
 8005348:	d306      	bcc.n	8005358 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	8b7b      	ldrh	r3, [r7, #26]
 8005350:	1ad2      	subs	r2, r2, r3
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	619a      	str	r2, [r3, #24]
 8005356:	e002      	b.n	800535e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d123      	bne.n	80053ae <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29b      	uxth	r3, r3
 8005378:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800537c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005380:	83fb      	strh	r3, [r7, #30]
 8005382:	8bfb      	ldrh	r3, [r7, #30]
 8005384:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005388:	83fb      	strh	r3, [r7, #30]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	441a      	add	r2, r3
 8005398:	8bfb      	ldrh	r3, [r7, #30]
 800539a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800539e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d11f      	bne.n	80053f8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053d2:	83bb      	strh	r3, [r7, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	441a      	add	r2, r3
 80053e2:	8bbb      	ldrh	r3, [r7, #28]
 80053e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80053e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80053ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80053f8:	8b7b      	ldrh	r3, [r7, #26]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d008      	beq.n	8005410 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6959      	ldr	r1, [r3, #20]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	895a      	ldrh	r2, [r3, #10]
 800540a:	8b7b      	ldrh	r3, [r7, #26]
 800540c:	f005 fc67 	bl	800acde <USB_ReadPMA>
    }
  }

  return count;
 8005410:	8b7b      	ldrh	r3, [r7, #26]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3720      	adds	r7, #32
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b0a4      	sub	sp, #144	@ 0x90
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	4613      	mov	r3, r2
 8005426:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 81db 	beq.w	80057ea <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800543c:	b29b      	uxth	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	4413      	add	r3, r2
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	4413      	add	r3, r2
 800544e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005458:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005464:	429a      	cmp	r2, r3
 8005466:	d907      	bls.n	8005478 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	619a      	str	r2, [r3, #24]
 8005476:	e002      	b.n	800547e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2200      	movs	r2, #0
 800547c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	f040 80b9 	bne.w	80055fa <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	785b      	ldrb	r3, [r3, #1]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d126      	bne.n	80054de <HAL_PCD_EP_DB_Transmit+0xc4>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800549e:	b29b      	uxth	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	4413      	add	r3, r2
 80054a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	00da      	lsls	r2, r3, #3
 80054ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b0:	4413      	add	r3, r2
 80054b2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80054b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c6:	801a      	strh	r2, [r3, #0]
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	881b      	ldrh	r3, [r3, #0]
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	801a      	strh	r2, [r3, #0]
 80054dc:	e01a      	b.n	8005514 <HAL_PCD_EP_DB_Transmit+0xfa>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d116      	bne.n	8005514 <HAL_PCD_EP_DB_Transmit+0xfa>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	461a      	mov	r2, r3
 80054f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fa:	4413      	add	r3, r2
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	00da      	lsls	r2, r3, #3
 8005504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005506:	4413      	add	r3, r2
 8005508:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800550c:	633b      	str	r3, [r7, #48]	@ 0x30
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	2200      	movs	r2, #0
 8005512:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	785b      	ldrb	r3, [r3, #1]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d126      	bne.n	8005570 <HAL_PCD_EP_DB_Transmit+0x156>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61fb      	str	r3, [r7, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	00da      	lsls	r2, r3, #3
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	881b      	ldrh	r3, [r3, #0]
 800554e:	b29b      	uxth	r3, r3
 8005550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005554:	b29a      	uxth	r2, r3
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	801a      	strh	r2, [r3, #0]
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	b29b      	uxth	r3, r3
 8005560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005568:	b29a      	uxth	r2, r3
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	801a      	strh	r2, [r3, #0]
 800556e:	e017      	b.n	80055a0 <HAL_PCD_EP_DB_Transmit+0x186>
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	785b      	ldrb	r3, [r3, #1]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d113      	bne.n	80055a0 <HAL_PCD_EP_DB_Transmit+0x186>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005580:	b29b      	uxth	r3, r3
 8005582:	461a      	mov	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	4413      	add	r3, r2
 8005588:	627b      	str	r3, [r7, #36]	@ 0x24
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	00da      	lsls	r2, r3, #3
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	4413      	add	r3, r2
 8005594:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005598:	623b      	str	r3, [r7, #32]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	2200      	movs	r2, #0
 800559e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	4619      	mov	r1, r3
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f007 fa41 	bl	800ca2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055ac:	88fb      	ldrh	r3, [r7, #6]
 80055ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 82fa 	beq.w	8005bac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	461a      	mov	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d2:	82fb      	strh	r3, [r7, #22]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	441a      	add	r2, r3
 80055e2:	8afb      	ldrh	r3, [r7, #22]
 80055e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	8013      	strh	r3, [r2, #0]
 80055f8:	e2d8      	b.n	8005bac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055fa:	88fb      	ldrh	r3, [r7, #6]
 80055fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d021      	beq.n	8005648 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800561a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	441a      	add	r2, r3
 8005630:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800563c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005644:	b29b      	uxth	r3, r3
 8005646:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800564e:	2b01      	cmp	r3, #1
 8005650:	f040 82ac 	bne.w	8005bac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	695a      	ldr	r2, [r3, #20]
 8005658:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800565c:	441a      	add	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800566a:	441a      	add	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	6a1a      	ldr	r2, [r3, #32]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	429a      	cmp	r2, r3
 800567a:	d30b      	bcc.n	8005694 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a1a      	ldr	r2, [r3, #32]
 8005688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800568c:	1ad2      	subs	r2, r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	621a      	str	r2, [r3, #32]
 8005692:	e017      	b.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6a1b      	ldr	r3, [r3, #32]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d108      	bne.n	80056ae <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800569c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80056a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80056ac:	e00a      	b.n	80056c4 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	2200      	movs	r2, #0
 80056c2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	785b      	ldrb	r3, [r3, #1]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d165      	bne.n	8005798 <HAL_PCD_EP_DB_Transmit+0x37e>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056da:	b29b      	uxth	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e0:	4413      	add	r3, r2
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	00da      	lsls	r2, r3, #3
 80056ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ec:	4413      	add	r3, r2
 80056ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056fe:	b29a      	uxth	r2, r3
 8005700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <HAL_PCD_EP_DB_Transmit+0x308>
 800570c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570e:	881b      	ldrh	r3, [r3, #0]
 8005710:	b29b      	uxth	r3, r3
 8005712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571a:	b29a      	uxth	r2, r3
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	801a      	strh	r2, [r3, #0]
 8005720:	e057      	b.n	80057d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005726:	2b3e      	cmp	r3, #62	@ 0x3e
 8005728:	d818      	bhi.n	800575c <HAL_PCD_EP_DB_Transmit+0x342>
 800572a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800572e:	085b      	lsrs	r3, r3, #1
 8005730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005732:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_PCD_EP_DB_Transmit+0x32a>
 800573e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005740:	3301      	adds	r3, #1
 8005742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	881b      	ldrh	r3, [r3, #0]
 8005748:	b29a      	uxth	r2, r3
 800574a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800574c:	b29b      	uxth	r3, r3
 800574e:	029b      	lsls	r3, r3, #10
 8005750:	b29b      	uxth	r3, r3
 8005752:	4313      	orrs	r3, r2
 8005754:	b29a      	uxth	r2, r3
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	e03a      	b.n	80057d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800575c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_PCD_EP_DB_Transmit+0x35c>
 8005770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005772:	3b01      	subs	r3, #1
 8005774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	b29a      	uxth	r2, r3
 800577c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800577e:	b29b      	uxth	r3, r3
 8005780:	029b      	lsls	r3, r3, #10
 8005782:	b29b      	uxth	r3, r3
 8005784:	4313      	orrs	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800578c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005790:	b29a      	uxth	r2, r3
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	801a      	strh	r2, [r3, #0]
 8005796:	e01c      	b.n	80057d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d118      	bne.n	80057d2 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b4:	4413      	add	r3, r2
 80057b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	00da      	lsls	r2, r3, #3
 80057be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c0:	4413      	add	r3, r2
 80057c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80057c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	6959      	ldr	r1, [r3, #20]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	891a      	ldrh	r2, [r3, #8]
 80057de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	f005 fa39 	bl	800ac5a <USB_WritePMA>
 80057e8:	e1e0      	b.n	8005bac <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	461a      	mov	r2, r3
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	4413      	add	r3, r2
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	4413      	add	r3, r2
 8005804:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800581a:	429a      	cmp	r2, r3
 800581c:	d307      	bcc.n	800582e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	699a      	ldr	r2, [r3, #24]
 8005822:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	619a      	str	r2, [r3, #24]
 800582c:	e002      	b.n	8005834 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2200      	movs	r2, #0
 8005832:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	f040 80c0 	bne.w	80059be <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d126      	bne.n	8005894 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005854:	b29b      	uxth	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800585a:	4413      	add	r3, r2
 800585c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	00da      	lsls	r2, r3, #3
 8005864:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005866:	4413      	add	r3, r2
 8005868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800586c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800586e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	b29b      	uxth	r3, r3
 8005874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005878:	b29a      	uxth	r2, r3
 800587a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800587c:	801a      	strh	r2, [r3, #0]
 800587e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005880:	881b      	ldrh	r3, [r3, #0]
 8005882:	b29b      	uxth	r3, r3
 8005884:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005888:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800588c:	b29a      	uxth	r2, r3
 800588e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	e01a      	b.n	80058ca <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	785b      	ldrb	r3, [r3, #1]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d116      	bne.n	80058ca <HAL_PCD_EP_DB_Transmit+0x4b0>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	461a      	mov	r2, r3
 80058ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058b0:	4413      	add	r3, r2
 80058b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	00da      	lsls	r2, r3, #3
 80058ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80058bc:	4413      	add	r3, r2
 80058be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058c2:	663b      	str	r3, [r7, #96]	@ 0x60
 80058c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058c6:	2200      	movs	r2, #0
 80058c8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d12b      	bne.n	8005930 <HAL_PCD_EP_DB_Transmit+0x516>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058ec:	4413      	add	r3, r2
 80058ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	00da      	lsls	r2, r3, #3
 80058f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80058f8:	4413      	add	r3, r2
 80058fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80058fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800590e:	b29a      	uxth	r2, r3
 8005910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005914:	801a      	strh	r2, [r3, #0]
 8005916:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005926:	b29a      	uxth	r2, r3
 8005928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800592c:	801a      	strh	r2, [r3, #0]
 800592e:	e017      	b.n	8005960 <HAL_PCD_EP_DB_Transmit+0x546>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	785b      	ldrb	r3, [r3, #1]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d113      	bne.n	8005960 <HAL_PCD_EP_DB_Transmit+0x546>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005940:	b29b      	uxth	r3, r3
 8005942:	461a      	mov	r2, r3
 8005944:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005946:	4413      	add	r3, r2
 8005948:	677b      	str	r3, [r7, #116]	@ 0x74
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	00da      	lsls	r2, r3, #3
 8005950:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005952:	4413      	add	r3, r2
 8005954:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005958:	673b      	str	r3, [r7, #112]	@ 0x70
 800595a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800595c:	2200      	movs	r2, #0
 800595e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	4619      	mov	r1, r3
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f007 f861 	bl	800ca2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005972:	2b00      	cmp	r3, #0
 8005974:	f040 811a 	bne.w	8005bac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	881b      	ldrh	r3, [r3, #0]
 8005988:	b29b      	uxth	r3, r3
 800598a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800598e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005992:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	441a      	add	r2, r3
 80059a4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80059a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	8013      	strh	r3, [r2, #0]
 80059bc:	e0f6      	b.n	8005bac <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059be:	88fb      	ldrh	r3, [r7, #6]
 80059c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d121      	bne.n	8005a0c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	461a      	mov	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	b29b      	uxth	r3, r3
 80059da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	461a      	mov	r2, r3
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	441a      	add	r2, r3
 80059f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80059f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	f040 80ca 	bne.w	8005bac <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a20:	441a      	add	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a2e:	441a      	add	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	6a1a      	ldr	r2, [r3, #32]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d30b      	bcc.n	8005a58 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a50:	1ad2      	subs	r2, r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	621a      	str	r2, [r3, #32]
 8005a56:	e017      	b.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6a1b      	ldr	r3, [r3, #32]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d108      	bne.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005a60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005a70:	e00a      	b.n	8005a88 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d165      	bne.n	8005b62 <HAL_PCD_EP_DB_Transmit+0x748>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aaa:	4413      	add	r3, r2
 8005aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	00da      	lsls	r2, r3, #3
 8005ab4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005abc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005abe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10a      	bne.n	8005aec <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e054      	b.n	8005b96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005af0:	2b3e      	cmp	r3, #62	@ 0x3e
 8005af2:	d818      	bhi.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005b08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	029b      	lsls	r3, r3, #10
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	e037      	b.n	8005b96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b2a:	095b      	lsrs	r3, r3, #5
 8005b2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b32:	f003 031f 	and.w	r3, r3, #31
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d102      	bne.n	8005b40 <HAL_PCD_EP_DB_Transmit+0x726>
 8005b3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b3c:	3b01      	subs	r3, #1
 8005b3e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	029b      	lsls	r3, r3, #10
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b5e:	801a      	strh	r2, [r3, #0]
 8005b60:	e019      	b.n	8005b96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	785b      	ldrb	r3, [r3, #1]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d115      	bne.n	8005b96 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b78:	4413      	add	r3, r2
 8005b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	00da      	lsls	r2, r3, #3
 8005b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b84:	4413      	add	r3, r2
 8005b86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005b8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b94:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6818      	ldr	r0, [r3, #0]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6959      	ldr	r1, [r3, #20]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	895a      	ldrh	r2, [r3, #10]
 8005ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f005 f857 	bl	800ac5a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005bc6:	82bb      	strh	r3, [r7, #20]
 8005bc8:	8abb      	ldrh	r3, [r7, #20]
 8005bca:	f083 0310 	eor.w	r3, r3, #16
 8005bce:	82bb      	strh	r3, [r7, #20]
 8005bd0:	8abb      	ldrh	r3, [r7, #20]
 8005bd2:	f083 0320 	eor.w	r3, r3, #32
 8005bd6:	82bb      	strh	r3, [r7, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	441a      	add	r2, r3
 8005be6:	8abb      	ldrh	r3, [r7, #20]
 8005be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3790      	adds	r7, #144	@ 0x90
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b087      	sub	sp, #28
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	607b      	str	r3, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	817b      	strh	r3, [r7, #10]
 8005c14:	4613      	mov	r3, r2
 8005c16:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c18:	897b      	ldrh	r3, [r7, #10]
 8005c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c24:	897b      	ldrh	r3, [r7, #10]
 8005c26:	f003 0207 	and.w	r2, r3, #7
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	3310      	adds	r3, #16
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	e009      	b.n	8005c50 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c3c:	897a      	ldrh	r2, [r7, #10]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	00db      	lsls	r3, r3, #3
 8005c46:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005c50:	893b      	ldrh	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d107      	bne.n	8005c66 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	80da      	strh	r2, [r3, #6]
 8005c64:	e00b      	b.n	8005c7e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	0c1b      	lsrs	r3, r3, #16
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f043 0301 	orr.w	r3, r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	f043 0302 	orr.w	r3, r3, #2
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d141      	bne.n	8005d72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cee:	4b4b      	ldr	r3, [pc, #300]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cfa:	d131      	bne.n	8005d60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cfc:	4b47      	ldr	r3, [pc, #284]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d02:	4a46      	ldr	r2, [pc, #280]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d0c:	4b43      	ldr	r3, [pc, #268]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005d14:	4a41      	ldr	r2, [pc, #260]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d1c:	4b40      	ldr	r3, [pc, #256]	@ (8005e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2232      	movs	r2, #50	@ 0x32
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	4a3f      	ldr	r2, [pc, #252]	@ (8005e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	0c9b      	lsrs	r3, r3, #18
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d32:	e002      	b.n	8005d3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d3a:	4b38      	ldr	r3, [pc, #224]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d46:	d102      	bne.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f2      	bne.n	8005d34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d4e:	4b33      	ldr	r3, [pc, #204]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5a:	d158      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e057      	b.n	8005e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d60:	4b2e      	ldr	r3, [pc, #184]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d66:	4a2d      	ldr	r2, [pc, #180]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005d70:	e04d      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d78:	d141      	bne.n	8005dfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d7a:	4b28      	ldr	r3, [pc, #160]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d86:	d131      	bne.n	8005dec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d88:	4b24      	ldr	r3, [pc, #144]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d8e:	4a23      	ldr	r2, [pc, #140]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d98:	4b20      	ldr	r3, [pc, #128]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005da0:	4a1e      	ldr	r2, [pc, #120]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005da6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2232      	movs	r2, #50	@ 0x32
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	4a1c      	ldr	r2, [pc, #112]	@ (8005e24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	0c9b      	lsrs	r3, r3, #18
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dbe:	e002      	b.n	8005dc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc6:	4b15      	ldr	r3, [pc, #84]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dd2:	d102      	bne.n	8005dda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f2      	bne.n	8005dc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dda:	4b10      	ldr	r3, [pc, #64]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005de6:	d112      	bne.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e011      	b.n	8005e10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005df2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005dfc:	e007      	b.n	8005e0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dfe:	4b07      	ldr	r3, [pc, #28]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e06:	4a05      	ldr	r2, [pc, #20]	@ (8005e1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005e0c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40007000 	.word	0x40007000
 8005e20:	20000000 	.word	0x20000000
 8005e24:	431bde83 	.word	0x431bde83

08005e28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e2fe      	b.n	8006438 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d075      	beq.n	8005f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e46:	4b97      	ldr	r3, [pc, #604]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e50:	4b94      	ldr	r3, [pc, #592]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	2b0c      	cmp	r3, #12
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCC_OscConfig+0x3e>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b03      	cmp	r3, #3
 8005e64:	d002      	beq.n	8005e6c <HAL_RCC_OscConfig+0x44>
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d10b      	bne.n	8005e84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e6c:	4b8d      	ldr	r3, [pc, #564]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d05b      	beq.n	8005f30 <HAL_RCC_OscConfig+0x108>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d157      	bne.n	8005f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e2d9      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e8c:	d106      	bne.n	8005e9c <HAL_RCC_OscConfig+0x74>
 8005e8e:	4b85      	ldr	r3, [pc, #532]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a84      	ldr	r2, [pc, #528]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e01d      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ea4:	d10c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x98>
 8005ea6:	4b7f      	ldr	r3, [pc, #508]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a7e      	ldr	r2, [pc, #504]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005eac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4b7c      	ldr	r3, [pc, #496]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a7b      	ldr	r2, [pc, #492]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e00b      	b.n	8005ed8 <HAL_RCC_OscConfig+0xb0>
 8005ec0:	4b78      	ldr	r3, [pc, #480]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a77      	ldr	r2, [pc, #476]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4b75      	ldr	r3, [pc, #468]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a74      	ldr	r2, [pc, #464]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005ed2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d013      	beq.n	8005f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee0:	f7fb ff1c 	bl	8001d1c <HAL_GetTick>
 8005ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ee6:	e008      	b.n	8005efa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee8:	f7fb ff18 	bl	8001d1c <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b64      	cmp	r3, #100	@ 0x64
 8005ef4:	d901      	bls.n	8005efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	e29e      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efa:	4b6a      	ldr	r3, [pc, #424]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0f0      	beq.n	8005ee8 <HAL_RCC_OscConfig+0xc0>
 8005f06:	e014      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fb ff08 	bl	8001d1c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f10:	f7fb ff04 	bl	8001d1c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b64      	cmp	r3, #100	@ 0x64
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e28a      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f22:	4b60      	ldr	r3, [pc, #384]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0xe8>
 8005f2e:	e000      	b.n	8005f32 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d075      	beq.n	800602a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3e:	4b59      	ldr	r3, [pc, #356]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f48:	4b56      	ldr	r3, [pc, #344]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f52:	69bb      	ldr	r3, [r7, #24]
 8005f54:	2b0c      	cmp	r3, #12
 8005f56:	d102      	bne.n	8005f5e <HAL_RCC_OscConfig+0x136>
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d002      	beq.n	8005f64 <HAL_RCC_OscConfig+0x13c>
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d11f      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f64:	4b4f      	ldr	r3, [pc, #316]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <HAL_RCC_OscConfig+0x154>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e25d      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f7c:	4b49      	ldr	r3, [pc, #292]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	061b      	lsls	r3, r3, #24
 8005f8a:	4946      	ldr	r1, [pc, #280]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f90:	4b45      	ldr	r3, [pc, #276]	@ (80060a8 <HAL_RCC_OscConfig+0x280>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f7fb fe75 	bl	8001c84 <HAL_InitTick>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d043      	beq.n	8006028 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e249      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d023      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fac:	4b3d      	ldr	r3, [pc, #244]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a3c      	ldr	r2, [pc, #240]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fb feb0 	bl	8001d1c <HAL_GetTick>
 8005fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc0:	f7fb feac 	bl	8001d1c <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e232      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd2:	4b34      	ldr	r3, [pc, #208]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0f0      	beq.n	8005fc0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fde:	4b31      	ldr	r3, [pc, #196]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	061b      	lsls	r3, r3, #24
 8005fec:	492d      	ldr	r1, [pc, #180]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	604b      	str	r3, [r1, #4]
 8005ff2:	e01a      	b.n	800602a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2a      	ldr	r2, [pc, #168]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8005ffa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006000:	f7fb fe8c 	bl	8001d1c <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006008:	f7fb fe88 	bl	8001d1c <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e20e      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800601a:	4b22      	ldr	r3, [pc, #136]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x1e0>
 8006026:	e000      	b.n	800602a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006028:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d041      	beq.n	80060ba <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01c      	beq.n	8006078 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800603e:	4b19      	ldr	r3, [pc, #100]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8006040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006044:	4a17      	ldr	r2, [pc, #92]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8006046:	f043 0301 	orr.w	r3, r3, #1
 800604a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604e:	f7fb fe65 	bl	8001d1c <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006056:	f7fb fe61 	bl	8001d1c <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e1e7      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006068:	4b0e      	ldr	r3, [pc, #56]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 800606a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800606e:	f003 0302 	and.w	r3, r3, #2
 8006072:	2b00      	cmp	r3, #0
 8006074:	d0ef      	beq.n	8006056 <HAL_RCC_OscConfig+0x22e>
 8006076:	e020      	b.n	80060ba <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006078:	4b0a      	ldr	r3, [pc, #40]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 800607a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800607e:	4a09      	ldr	r2, [pc, #36]	@ (80060a4 <HAL_RCC_OscConfig+0x27c>)
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006088:	f7fb fe48 	bl	8001d1c <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800608e:	e00d      	b.n	80060ac <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006090:	f7fb fe44 	bl	8001d1c <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d906      	bls.n	80060ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e1ca      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
 80060a2:	bf00      	nop
 80060a4:	40021000 	.word	0x40021000
 80060a8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060ac:	4b8c      	ldr	r3, [pc, #560]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80060ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1ea      	bne.n	8006090 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 80a6 	beq.w	8006214 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c8:	2300      	movs	r3, #0
 80060ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060cc:	4b84      	ldr	r3, [pc, #528]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80060ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <HAL_RCC_OscConfig+0x2b4>
 80060d8:	2301      	movs	r3, #1
 80060da:	e000      	b.n	80060de <HAL_RCC_OscConfig+0x2b6>
 80060dc:	2300      	movs	r3, #0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00d      	beq.n	80060fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060e2:	4b7f      	ldr	r3, [pc, #508]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060e6:	4a7e      	ldr	r2, [pc, #504]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80060e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80060ee:	4b7c      	ldr	r3, [pc, #496]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060fa:	2301      	movs	r3, #1
 80060fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060fe:	4b79      	ldr	r3, [pc, #484]	@ (80062e4 <HAL_RCC_OscConfig+0x4bc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006106:	2b00      	cmp	r3, #0
 8006108:	d118      	bne.n	800613c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800610a:	4b76      	ldr	r3, [pc, #472]	@ (80062e4 <HAL_RCC_OscConfig+0x4bc>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a75      	ldr	r2, [pc, #468]	@ (80062e4 <HAL_RCC_OscConfig+0x4bc>)
 8006110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006116:	f7fb fe01 	bl	8001d1c <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800611e:	f7fb fdfd 	bl	8001d1c <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e183      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006130:	4b6c      	ldr	r3, [pc, #432]	@ (80062e4 <HAL_RCC_OscConfig+0x4bc>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d108      	bne.n	8006156 <HAL_RCC_OscConfig+0x32e>
 8006144:	4b66      	ldr	r3, [pc, #408]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006146:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800614a:	4a65      	ldr	r2, [pc, #404]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 800614c:	f043 0301 	orr.w	r3, r3, #1
 8006150:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006154:	e024      	b.n	80061a0 <HAL_RCC_OscConfig+0x378>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	2b05      	cmp	r3, #5
 800615c:	d110      	bne.n	8006180 <HAL_RCC_OscConfig+0x358>
 800615e:	4b60      	ldr	r3, [pc, #384]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006164:	4a5e      	ldr	r2, [pc, #376]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006166:	f043 0304 	orr.w	r3, r3, #4
 800616a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800616e:	4b5c      	ldr	r3, [pc, #368]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006174:	4a5a      	ldr	r2, [pc, #360]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800617e:	e00f      	b.n	80061a0 <HAL_RCC_OscConfig+0x378>
 8006180:	4b57      	ldr	r3, [pc, #348]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006186:	4a56      	ldr	r2, [pc, #344]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006190:	4b53      	ldr	r3, [pc, #332]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006196:	4a52      	ldr	r2, [pc, #328]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006198:	f023 0304 	bic.w	r3, r3, #4
 800619c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d016      	beq.n	80061d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a8:	f7fb fdb8 	bl	8001d1c <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ae:	e00a      	b.n	80061c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b0:	f7fb fdb4 	bl	8001d1c <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e138      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061c6:	4b46      	ldr	r3, [pc, #280]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80061c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0ed      	beq.n	80061b0 <HAL_RCC_OscConfig+0x388>
 80061d4:	e015      	b.n	8006202 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061d6:	f7fb fda1 	bl	8001d1c <HAL_GetTick>
 80061da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061dc:	e00a      	b.n	80061f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061de:	f7fb fd9d 	bl	8001d1c <HAL_GetTick>
 80061e2:	4602      	mov	r2, r0
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d901      	bls.n	80061f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e121      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061f4:	4b3a      	ldr	r3, [pc, #232]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80061f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061fa:	f003 0302 	and.w	r3, r3, #2
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1ed      	bne.n	80061de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006202:	7ffb      	ldrb	r3, [r7, #31]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d105      	bne.n	8006214 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006208:	4b35      	ldr	r3, [pc, #212]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 800620a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620c:	4a34      	ldr	r2, [pc, #208]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006212:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0320 	and.w	r3, r3, #32
 800621c:	2b00      	cmp	r3, #0
 800621e:	d03c      	beq.n	800629a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d01c      	beq.n	8006262 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006228:	4b2d      	ldr	r3, [pc, #180]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 800622a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800622e:	4a2c      	ldr	r2, [pc, #176]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006230:	f043 0301 	orr.w	r3, r3, #1
 8006234:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fb fd70 	bl	8001d1c <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006240:	f7fb fd6c 	bl	8001d1c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e0f2      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006252:	4b23      	ldr	r3, [pc, #140]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006258:	f003 0302 	and.w	r3, r3, #2
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0ef      	beq.n	8006240 <HAL_RCC_OscConfig+0x418>
 8006260:	e01b      	b.n	800629a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006262:	4b1f      	ldr	r3, [pc, #124]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 8006264:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006272:	f7fb fd53 	bl	8001d1c <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800627a:	f7fb fd4f 	bl	8001d1c <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e0d5      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800628c:	4b14      	ldr	r3, [pc, #80]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 800628e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d1ef      	bne.n	800627a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80c9 	beq.w	8006436 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a4:	4b0e      	ldr	r3, [pc, #56]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	f003 030c 	and.w	r3, r3, #12
 80062ac:	2b0c      	cmp	r3, #12
 80062ae:	f000 8083 	beq.w	80063b8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d15e      	bne.n	8006378 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ba:	4b09      	ldr	r3, [pc, #36]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a08      	ldr	r2, [pc, #32]	@ (80062e0 <HAL_RCC_OscConfig+0x4b8>)
 80062c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80062c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c6:	f7fb fd29 	bl	8001d1c <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062cc:	e00c      	b.n	80062e8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ce:	f7fb fd25 	bl	8001d1c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d905      	bls.n	80062e8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e0ab      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
 80062e0:	40021000 	.word	0x40021000
 80062e4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062e8:	4b55      	ldr	r3, [pc, #340]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1ec      	bne.n	80062ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062f4:	4b52      	ldr	r3, [pc, #328]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	4b52      	ldr	r3, [pc, #328]	@ (8006444 <HAL_RCC_OscConfig+0x61c>)
 80062fa:	4013      	ands	r3, r2
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6a11      	ldr	r1, [r2, #32]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006304:	3a01      	subs	r2, #1
 8006306:	0112      	lsls	r2, r2, #4
 8006308:	4311      	orrs	r1, r2
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800630e:	0212      	lsls	r2, r2, #8
 8006310:	4311      	orrs	r1, r2
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006316:	0852      	lsrs	r2, r2, #1
 8006318:	3a01      	subs	r2, #1
 800631a:	0552      	lsls	r2, r2, #21
 800631c:	4311      	orrs	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006322:	0852      	lsrs	r2, r2, #1
 8006324:	3a01      	subs	r2, #1
 8006326:	0652      	lsls	r2, r2, #25
 8006328:	4311      	orrs	r1, r2
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800632e:	06d2      	lsls	r2, r2, #27
 8006330:	430a      	orrs	r2, r1
 8006332:	4943      	ldr	r1, [pc, #268]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 8006334:	4313      	orrs	r3, r2
 8006336:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006338:	4b41      	ldr	r3, [pc, #260]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a40      	ldr	r2, [pc, #256]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 800633e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006342:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006344:	4b3e      	ldr	r3, [pc, #248]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	4a3d      	ldr	r2, [pc, #244]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 800634a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800634e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fb fce4 	bl	8001d1c <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006358:	f7fb fce0 	bl	8001d1c <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e066      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636a:	4b35      	ldr	r3, [pc, #212]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x530>
 8006376:	e05e      	b.n	8006436 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006378:	4b31      	ldr	r3, [pc, #196]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a30      	ldr	r2, [pc, #192]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 800637e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006384:	f7fb fcca 	bl	8001d1c <HAL_GetTick>
 8006388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800638a:	e008      	b.n	800639e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800638c:	f7fb fcc6 	bl	8001d1c <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	2b02      	cmp	r3, #2
 8006398:	d901      	bls.n	800639e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e04c      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800639e:	4b28      	ldr	r3, [pc, #160]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d1f0      	bne.n	800638c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063aa:	4b25      	ldr	r3, [pc, #148]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	4924      	ldr	r1, [pc, #144]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 80063b0:	4b25      	ldr	r3, [pc, #148]	@ (8006448 <HAL_RCC_OscConfig+0x620>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	60cb      	str	r3, [r1, #12]
 80063b6:	e03e      	b.n	8006436 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e039      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006440 <HAL_RCC_OscConfig+0x618>)
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f003 0203 	and.w	r2, r3, #3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6a1b      	ldr	r3, [r3, #32]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d12c      	bne.n	8006432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	3b01      	subs	r3, #1
 80063e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d123      	bne.n	8006432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d11b      	bne.n	8006432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006406:	429a      	cmp	r2, r3
 8006408:	d113      	bne.n	8006432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	3b01      	subs	r3, #1
 8006418:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800641a:	429a      	cmp	r2, r3
 800641c:	d109      	bne.n	8006432 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	3b01      	subs	r3, #1
 800642c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800642e:	429a      	cmp	r2, r3
 8006430:	d001      	beq.n	8006436 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3720      	adds	r7, #32
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	40021000 	.word	0x40021000
 8006444:	019f800c 	.word	0x019f800c
 8006448:	feeefffc 	.word	0xfeeefffc

0800644c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e11e      	b.n	80066a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006464:	4b91      	ldr	r3, [pc, #580]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 030f 	and.w	r3, r3, #15
 800646c:	683a      	ldr	r2, [r7, #0]
 800646e:	429a      	cmp	r2, r3
 8006470:	d910      	bls.n	8006494 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006472:	4b8e      	ldr	r3, [pc, #568]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f023 020f 	bic.w	r2, r3, #15
 800647a:	498c      	ldr	r1, [pc, #560]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	4313      	orrs	r3, r2
 8006480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006482:	4b8a      	ldr	r3, [pc, #552]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e106      	b.n	80066a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d073      	beq.n	8006588 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2b03      	cmp	r3, #3
 80064a6:	d129      	bne.n	80064fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064a8:	4b81      	ldr	r3, [pc, #516]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0f4      	b.n	80066a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064b8:	f000 f99e 	bl	80067f8 <RCC_GetSysClockFreqFromPLLSource>
 80064bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4a7c      	ldr	r2, [pc, #496]	@ (80066b4 <HAL_RCC_ClockConfig+0x268>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d93f      	bls.n	8006546 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064c6:	4b7a      	ldr	r3, [pc, #488]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d009      	beq.n	80064e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d033      	beq.n	8006546 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d12f      	bne.n	8006546 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064e6:	4b72      	ldr	r3, [pc, #456]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064ee:	4a70      	ldr	r2, [pc, #448]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80064f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064f6:	2380      	movs	r3, #128	@ 0x80
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e024      	b.n	8006546 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b02      	cmp	r3, #2
 8006502:	d107      	bne.n	8006514 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006504:	4b6a      	ldr	r3, [pc, #424]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	e0c6      	b.n	80066a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006514:	4b66      	ldr	r3, [pc, #408]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e0be      	b.n	80066a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006524:	f000 f8ce 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8006528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	4a61      	ldr	r2, [pc, #388]	@ (80066b4 <HAL_RCC_ClockConfig+0x268>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d909      	bls.n	8006546 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006532:	4b5f      	ldr	r3, [pc, #380]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800653a:	4a5d      	ldr	r2, [pc, #372]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 800653c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006540:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006542:	2380      	movs	r3, #128	@ 0x80
 8006544:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006546:	4b5a      	ldr	r3, [pc, #360]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f023 0203 	bic.w	r2, r3, #3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	4957      	ldr	r1, [pc, #348]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006554:	4313      	orrs	r3, r2
 8006556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006558:	f7fb fbe0 	bl	8001d1c <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655e:	e00a      	b.n	8006576 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006560:	f7fb fbdc 	bl	8001d1c <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e095      	b.n	80066a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006576:	4b4e      	ldr	r3, [pc, #312]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 020c 	and.w	r2, r3, #12
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	429a      	cmp	r2, r3
 8006586:	d1eb      	bne.n	8006560 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	2b00      	cmp	r3, #0
 8006592:	d023      	beq.n	80065dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d005      	beq.n	80065ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065a0:	4b43      	ldr	r3, [pc, #268]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4a42      	ldr	r2, [pc, #264]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0308 	and.w	r3, r3, #8
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065b8:	4b3d      	ldr	r3, [pc, #244]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80065c0:	4a3b      	ldr	r2, [pc, #236]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80065c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065c8:	4b39      	ldr	r3, [pc, #228]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	4936      	ldr	r1, [pc, #216]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	608b      	str	r3, [r1, #8]
 80065da:	e008      	b.n	80065ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	2b80      	cmp	r3, #128	@ 0x80
 80065e0:	d105      	bne.n	80065ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065e2:	4b33      	ldr	r3, [pc, #204]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	4a32      	ldr	r2, [pc, #200]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 80065e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065ee:	4b2f      	ldr	r3, [pc, #188]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 030f 	and.w	r3, r3, #15
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d21d      	bcs.n	8006638 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065fc:	4b2b      	ldr	r3, [pc, #172]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f023 020f 	bic.w	r2, r3, #15
 8006604:	4929      	ldr	r1, [pc, #164]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	4313      	orrs	r3, r2
 800660a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800660c:	f7fb fb86 	bl	8001d1c <HAL_GetTick>
 8006610:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006612:	e00a      	b.n	800662a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006614:	f7fb fb82 	bl	8001d1c <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006622:	4293      	cmp	r3, r2
 8006624:	d901      	bls.n	800662a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e03b      	b.n	80066a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800662a:	4b20      	ldr	r3, [pc, #128]	@ (80066ac <HAL_RCC_ClockConfig+0x260>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 030f 	and.w	r3, r3, #15
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	429a      	cmp	r2, r3
 8006636:	d1ed      	bne.n	8006614 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d008      	beq.n	8006656 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006644:	4b1a      	ldr	r3, [pc, #104]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	4917      	ldr	r1, [pc, #92]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0308 	and.w	r3, r3, #8
 800665e:	2b00      	cmp	r3, #0
 8006660:	d009      	beq.n	8006676 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006662:	4b13      	ldr	r3, [pc, #76]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	490f      	ldr	r1, [pc, #60]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 8006672:	4313      	orrs	r3, r2
 8006674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006676:	f000 f825 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 800667a:	4602      	mov	r2, r0
 800667c:	4b0c      	ldr	r3, [pc, #48]	@ (80066b0 <HAL_RCC_ClockConfig+0x264>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	f003 030f 	and.w	r3, r3, #15
 8006686:	490c      	ldr	r1, [pc, #48]	@ (80066b8 <HAL_RCC_ClockConfig+0x26c>)
 8006688:	5ccb      	ldrb	r3, [r1, r3]
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	fa22 f303 	lsr.w	r3, r2, r3
 8006692:	4a0a      	ldr	r2, [pc, #40]	@ (80066bc <HAL_RCC_ClockConfig+0x270>)
 8006694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006696:	4b0a      	ldr	r3, [pc, #40]	@ (80066c0 <HAL_RCC_ClockConfig+0x274>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fb faf2 	bl	8001c84 <HAL_InitTick>
 80066a0:	4603      	mov	r3, r0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3718      	adds	r7, #24
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	40022000 	.word	0x40022000
 80066b0:	40021000 	.word	0x40021000
 80066b4:	04c4b400 	.word	0x04c4b400
 80066b8:	0800d01c 	.word	0x0800d01c
 80066bc:	20000000 	.word	0x20000000
 80066c0:	20000004 	.word	0x20000004

080066c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066ca:	4b2c      	ldr	r3, [pc, #176]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d102      	bne.n	80066dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066d6:	4b2a      	ldr	r3, [pc, #168]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	e047      	b.n	800676c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066dc:	4b27      	ldr	r3, [pc, #156]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 030c 	and.w	r3, r3, #12
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d102      	bne.n	80066ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066e8:	4b26      	ldr	r3, [pc, #152]	@ (8006784 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	e03e      	b.n	800676c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066ee:	4b23      	ldr	r3, [pc, #140]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f003 030c 	and.w	r3, r3, #12
 80066f6:	2b0c      	cmp	r3, #12
 80066f8:	d136      	bne.n	8006768 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066fa:	4b20      	ldr	r3, [pc, #128]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006704:	4b1d      	ldr	r3, [pc, #116]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	091b      	lsrs	r3, r3, #4
 800670a:	f003 030f 	and.w	r3, r3, #15
 800670e:	3301      	adds	r3, #1
 8006710:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2b03      	cmp	r3, #3
 8006716:	d10c      	bne.n	8006732 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006718:	4a1a      	ldr	r2, [pc, #104]	@ (8006784 <HAL_RCC_GetSysClockFreq+0xc0>)
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006720:	4a16      	ldr	r2, [pc, #88]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006722:	68d2      	ldr	r2, [r2, #12]
 8006724:	0a12      	lsrs	r2, r2, #8
 8006726:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800672a:	fb02 f303 	mul.w	r3, r2, r3
 800672e:	617b      	str	r3, [r7, #20]
      break;
 8006730:	e00c      	b.n	800674c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006732:	4a13      	ldr	r2, [pc, #76]	@ (8006780 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	4a10      	ldr	r2, [pc, #64]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 800673c:	68d2      	ldr	r2, [r2, #12]
 800673e:	0a12      	lsrs	r2, r2, #8
 8006740:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006744:	fb02 f303 	mul.w	r3, r2, r3
 8006748:	617b      	str	r3, [r7, #20]
      break;
 800674a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800674c:	4b0b      	ldr	r3, [pc, #44]	@ (800677c <HAL_RCC_GetSysClockFreq+0xb8>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	0e5b      	lsrs	r3, r3, #25
 8006752:	f003 0303 	and.w	r3, r3, #3
 8006756:	3301      	adds	r3, #1
 8006758:	005b      	lsls	r3, r3, #1
 800675a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	613b      	str	r3, [r7, #16]
 8006766:	e001      	b.n	800676c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800676c:	693b      	ldr	r3, [r7, #16]
}
 800676e:	4618      	mov	r0, r3
 8006770:	371c      	adds	r7, #28
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40021000 	.word	0x40021000
 8006780:	00f42400 	.word	0x00f42400
 8006784:	007a1200 	.word	0x007a1200

08006788 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006788:	b480      	push	{r7}
 800678a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800678c:	4b03      	ldr	r3, [pc, #12]	@ (800679c <HAL_RCC_GetHCLKFreq+0x14>)
 800678e:	681b      	ldr	r3, [r3, #0]
}
 8006790:	4618      	mov	r0, r3
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	20000000 	.word	0x20000000

080067a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067a4:	f7ff fff0 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 80067a8:	4602      	mov	r2, r0
 80067aa:	4b06      	ldr	r3, [pc, #24]	@ (80067c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	0a1b      	lsrs	r3, r3, #8
 80067b0:	f003 0307 	and.w	r3, r3, #7
 80067b4:	4904      	ldr	r1, [pc, #16]	@ (80067c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067b6:	5ccb      	ldrb	r3, [r1, r3]
 80067b8:	f003 031f 	and.w	r3, r3, #31
 80067bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	40021000 	.word	0x40021000
 80067c8:	0800d02c 	.word	0x0800d02c

080067cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067d0:	f7ff ffda 	bl	8006788 <HAL_RCC_GetHCLKFreq>
 80067d4:	4602      	mov	r2, r0
 80067d6:	4b06      	ldr	r3, [pc, #24]	@ (80067f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	0adb      	lsrs	r3, r3, #11
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	4904      	ldr	r1, [pc, #16]	@ (80067f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067e2:	5ccb      	ldrb	r3, [r1, r3]
 80067e4:	f003 031f 	and.w	r3, r3, #31
 80067e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	40021000 	.word	0x40021000
 80067f4:	0800d02c 	.word	0x0800d02c

080067f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b087      	sub	sp, #28
 80067fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067fe:	4b1e      	ldr	r3, [pc, #120]	@ (8006878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006808:	4b1b      	ldr	r3, [pc, #108]	@ (8006878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	3301      	adds	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b03      	cmp	r3, #3
 800681a:	d10c      	bne.n	8006836 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800681c:	4a17      	ldr	r2, [pc, #92]	@ (800687c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	fbb2 f3f3 	udiv	r3, r2, r3
 8006824:	4a14      	ldr	r2, [pc, #80]	@ (8006878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006826:	68d2      	ldr	r2, [r2, #12]
 8006828:	0a12      	lsrs	r2, r2, #8
 800682a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	617b      	str	r3, [r7, #20]
    break;
 8006834:	e00c      	b.n	8006850 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006836:	4a12      	ldr	r2, [pc, #72]	@ (8006880 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	fbb2 f3f3 	udiv	r3, r2, r3
 800683e:	4a0e      	ldr	r2, [pc, #56]	@ (8006878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006840:	68d2      	ldr	r2, [r2, #12]
 8006842:	0a12      	lsrs	r2, r2, #8
 8006844:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	617b      	str	r3, [r7, #20]
    break;
 800684e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006850:	4b09      	ldr	r3, [pc, #36]	@ (8006878 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	0e5b      	lsrs	r3, r3, #25
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	3301      	adds	r3, #1
 800685c:	005b      	lsls	r3, r3, #1
 800685e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	fbb2 f3f3 	udiv	r3, r2, r3
 8006868:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800686a:	687b      	ldr	r3, [r7, #4]
}
 800686c:	4618      	mov	r0, r3
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40021000 	.word	0x40021000
 800687c:	007a1200 	.word	0x007a1200
 8006880:	00f42400 	.word	0x00f42400

08006884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800688c:	2300      	movs	r3, #0
 800688e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006890:	2300      	movs	r3, #0
 8006892:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 8098 	beq.w	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a2:	2300      	movs	r3, #0
 80068a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068a6:	4b43      	ldr	r3, [pc, #268]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10d      	bne.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b2:	4b40      	ldr	r3, [pc, #256]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b6:	4a3f      	ldr	r2, [pc, #252]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80068be:	4b3d      	ldr	r3, [pc, #244]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ca:	2301      	movs	r3, #1
 80068cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068ce:	4b3a      	ldr	r3, [pc, #232]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a39      	ldr	r2, [pc, #228]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068da:	f7fb fa1f 	bl	8001d1c <HAL_GetTick>
 80068de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e0:	e009      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e2:	f7fb fa1b 	bl	8001d1c <HAL_GetTick>
 80068e6:	4602      	mov	r2, r0
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d902      	bls.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068f0:	2303      	movs	r3, #3
 80068f2:	74fb      	strb	r3, [r7, #19]
        break;
 80068f4:	e005      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068f6:	4b30      	ldr	r3, [pc, #192]	@ (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0ef      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006902:	7cfb      	ldrb	r3, [r7, #19]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d159      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006908:	4b2a      	ldr	r3, [pc, #168]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800690a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d01e      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	429a      	cmp	r2, r3
 8006922:	d019      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006924:	4b23      	ldr	r3, [pc, #140]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800692a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800692e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006930:	4b20      	ldr	r3, [pc, #128]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006936:	4a1f      	ldr	r2, [pc, #124]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800693c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006940:	4b1c      	ldr	r3, [pc, #112]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	4a1b      	ldr	r2, [pc, #108]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006948:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800694c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006950:	4a18      	ldr	r2, [pc, #96]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d016      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006962:	f7fb f9db 	bl	8001d1c <HAL_GetTick>
 8006966:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006968:	e00b      	b.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696a:	f7fb f9d7 	bl	8001d1c <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006978:	4293      	cmp	r3, r2
 800697a:	d902      	bls.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800697c:	2303      	movs	r3, #3
 800697e:	74fb      	strb	r3, [r7, #19]
            break;
 8006980:	e006      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006982:	4b0c      	ldr	r3, [pc, #48]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006988:	f003 0302 	and.w	r3, r3, #2
 800698c:	2b00      	cmp	r3, #0
 800698e:	d0ec      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006990:	7cfb      	ldrb	r3, [r7, #19]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10b      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006996:	4b07      	ldr	r3, [pc, #28]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800699c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a4:	4903      	ldr	r1, [pc, #12]	@ (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80069ac:	e008      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069ae:	7cfb      	ldrb	r3, [r7, #19]
 80069b0:	74bb      	strb	r3, [r7, #18]
 80069b2:	e005      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069b4:	40021000 	.word	0x40021000
 80069b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069bc:	7cfb      	ldrb	r3, [r7, #19]
 80069be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069c0:	7c7b      	ldrb	r3, [r7, #17]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d105      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069c6:	4ba6      	ldr	r3, [pc, #664]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069ca:	4aa5      	ldr	r2, [pc, #660]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00a      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069de:	4ba0      	ldr	r3, [pc, #640]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069e4:	f023 0203 	bic.w	r2, r3, #3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	499c      	ldr	r1, [pc, #624]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0302 	and.w	r3, r3, #2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a00:	4b97      	ldr	r3, [pc, #604]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a06:	f023 020c 	bic.w	r2, r3, #12
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	4994      	ldr	r1, [pc, #592]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a22:	4b8f      	ldr	r3, [pc, #572]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a28:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	498b      	ldr	r1, [pc, #556]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00a      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a44:	4b86      	ldr	r3, [pc, #536]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a4a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	4983      	ldr	r1, [pc, #524]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0320 	and.w	r3, r3, #32
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a66:	4b7e      	ldr	r3, [pc, #504]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a6c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	497a      	ldr	r1, [pc, #488]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00a      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a88:	4b75      	ldr	r3, [pc, #468]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	4972      	ldr	r1, [pc, #456]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ab0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	69db      	ldr	r3, [r3, #28]
 8006ab8:	4969      	ldr	r1, [pc, #420]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00a      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006acc:	4b64      	ldr	r3, [pc, #400]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ad2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a1b      	ldr	r3, [r3, #32]
 8006ada:	4961      	ldr	r1, [pc, #388]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006adc:	4313      	orrs	r3, r2
 8006ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aee:	4b5c      	ldr	r3, [pc, #368]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006af4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	4958      	ldr	r1, [pc, #352]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d015      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b10:	4b53      	ldr	r3, [pc, #332]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	4950      	ldr	r1, [pc, #320]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b2e:	d105      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b30:	4b4b      	ldr	r3, [pc, #300]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	4a4a      	ldr	r2, [pc, #296]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b3a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d015      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b48:	4b45      	ldr	r3, [pc, #276]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b4e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b56:	4942      	ldr	r1, [pc, #264]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b66:	d105      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b68:	4b3d      	ldr	r3, [pc, #244]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	4a3c      	ldr	r2, [pc, #240]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b72:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d015      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b80:	4b37      	ldr	r3, [pc, #220]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b86:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b8e:	4934      	ldr	r1, [pc, #208]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b90:	4313      	orrs	r3, r2
 8006b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006b9e:	d105      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ba0:	4b2f      	ldr	r3, [pc, #188]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4a2e      	ldr	r2, [pc, #184]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006baa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d015      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bb8:	4b29      	ldr	r3, [pc, #164]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bbe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bc6:	4926      	ldr	r1, [pc, #152]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bd6:	d105      	bne.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd8:	4b21      	ldr	r3, [pc, #132]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	4a20      	ldr	r2, [pc, #128]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006be2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d015      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfe:	4918      	ldr	r1, [pc, #96]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c0e:	d105      	bne.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c10:	4b13      	ldr	r3, [pc, #76]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	4a12      	ldr	r2, [pc, #72]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d015      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c28:	4b0d      	ldr	r3, [pc, #52]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c36:	490a      	ldr	r1, [pc, #40]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c46:	d105      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c48:	4b05      	ldr	r3, [pc, #20]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	4a04      	ldr	r2, [pc, #16]	@ (8006c60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c54:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	40021000 	.word	0x40021000

08006c64 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d070      	beq.n	8006d58 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d106      	bne.n	8006c90 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f7fa fd6a 	bl	8001764 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d04f      	beq.n	8006d46 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	22ca      	movs	r2, #202	@ 0xca
 8006cac:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2253      	movs	r2, #83	@ 0x53
 8006cb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f878 	bl	8006dac <RTC_EnterInitMode>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006cc0:	7bfb      	ldrb	r3, [r7, #15]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d126      	bne.n	8006d14 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	6812      	ldr	r2, [r2, #0]
 8006cd0:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6999      	ldr	r1, [r3, #24]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68d9      	ldr	r1, [r3, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	041a      	lsls	r2, r3, #16
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	430a      	orrs	r2, r1
 8006d08:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f884 	bl	8006e18 <RTC_ExitInitMode>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d110      	bne.n	8006d3c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6a1a      	ldr	r2, [r3, #32]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	69db      	ldr	r3, [r3, #28]
 8006d2c:	431a      	orrs	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	431a      	orrs	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	22ff      	movs	r2, #255	@ 0xff
 8006d42:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d44:	e001      	b.n	8006d4a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d103      	bne.n	8006d58 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0d      	ldr	r2, [pc, #52]	@ (8006da8 <HAL_RTC_WaitForSynchro+0x44>)
 8006d72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006d74:	f7fa ffd2 	bl	8001d1c <HAL_GetTick>
 8006d78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006d7a:	e009      	b.n	8006d90 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006d7c:	f7fa ffce 	bl	8001d1c <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d8a:	d901      	bls.n	8006d90 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e007      	b.n	8006da0 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f003 0320 	and.w	r3, r3, #32
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0ee      	beq.n	8006d7c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	0001005f 	.word	0x0001005f

08006dac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d123      	bne.n	8006e0e <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006dd4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006dd6:	f7fa ffa1 	bl	8001d1c <HAL_GetTick>
 8006dda:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ddc:	e00d      	b.n	8006dfa <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006dde:	f7fa ff9d 	bl	8001d1c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dec:	d905      	bls.n	8006dfa <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2203      	movs	r2, #3
 8006df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d102      	bne.n	8006e0e <RTC_EnterInitMode+0x62>
 8006e08:	7bfb      	ldrb	r3, [r7, #15]
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d1e7      	bne.n	8006dde <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e32:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10c      	bne.n	8006e5c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff ff8e 	bl	8006d64 <HAL_RTC_WaitForSynchro>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d022      	beq.n	8006e94 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2203      	movs	r2, #3
 8006e52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006e56:	2303      	movs	r3, #3
 8006e58:	73fb      	strb	r3, [r7, #15]
 8006e5a:	e01b      	b.n	8006e94 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0220 	bic.w	r2, r2, #32
 8006e6a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f7ff ff79 	bl	8006d64 <HAL_RTC_WaitForSynchro>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	699a      	ldr	r2, [r3, #24]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0220 	orr.w	r2, r2, #32
 8006e92:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b086      	sub	sp, #24
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	60f8      	str	r0, [r7, #12]
 8006ea6:	60b9      	str	r1, [r7, #8]
 8006ea8:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	e062      	b.n	8006f7e <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	22ca      	movs	r2, #202	@ 0xca
 8006ece:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2253      	movs	r2, #83	@ 0x53
 8006ed6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ee6:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d120      	bne.n	8006f38 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 8006ef6:	f7fa ff11 	bl	8001d1c <HAL_GetTick>
 8006efa:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006efc:	e015      	b.n	8006f2a <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006efe:	f7fa ff0d 	bl	8001d1c <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006f0c:	d90d      	bls.n	8006f2a <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	22ff      	movs	r2, #255	@ 0xff
 8006f14:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2203      	movs	r2, #3
 8006f1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e029      	b.n	8006f7e <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0e2      	beq.n	8006efe <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f023 0107 	bic.w	r1, r3, #7
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	430a      	orrs	r2, r1
 8006f4a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	699a      	ldr	r2, [r3, #24]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006f62:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	22ff      	movs	r2, #255	@ 0xff
 8006f6a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3718      	adds	r7, #24
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e09d      	b.n	80070d4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d108      	bne.n	8006fb2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006fa8:	d009      	beq.n	8006fbe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	61da      	str	r2, [r3, #28]
 8006fb0:	e005      	b.n	8006fbe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d106      	bne.n	8006fde <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7fa fc3d 	bl	8001858 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ff4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006ffe:	d902      	bls.n	8007006 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	e002      	b.n	800700c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007006:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800700a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007014:	d007      	beq.n	8007026 <HAL_SPI_Init+0xa0>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800701e:	d002      	beq.n	8007026 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007036:	431a      	orrs	r2, r3
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	431a      	orrs	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007054:	431a      	orrs	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007068:	ea42 0103 	orr.w	r1, r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	430a      	orrs	r2, r1
 800707a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	0c1b      	lsrs	r3, r3, #16
 8007082:	f003 0204 	and.w	r2, r3, #4
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800708a:	f003 0310 	and.w	r3, r3, #16
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80070a2:	ea42 0103 	orr.w	r1, r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	69da      	ldr	r2, [r3, #28]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b088      	sub	sp, #32
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	4613      	mov	r3, r2
 80070ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80070ec:	2300      	movs	r3, #0
 80070ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d101      	bne.n	80070fe <HAL_SPI_Transmit+0x22>
 80070fa:	2302      	movs	r3, #2
 80070fc:	e15f      	b.n	80073be <HAL_SPI_Transmit+0x2e2>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2201      	movs	r2, #1
 8007102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007106:	f7fa fe09 	bl	8001d1c <HAL_GetTick>
 800710a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800710c:	88fb      	ldrh	r3, [r7, #6]
 800710e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b01      	cmp	r3, #1
 800711a:	d002      	beq.n	8007122 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800711c:	2302      	movs	r3, #2
 800711e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007120:	e148      	b.n	80073b4 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <HAL_SPI_Transmit+0x52>
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d102      	bne.n	8007134 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007132:	e13f      	b.n	80073b4 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2203      	movs	r2, #3
 8007138:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	88fa      	ldrh	r2, [r7, #6]
 8007152:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800717e:	d10f      	bne.n	80071a0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800718e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800719e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071aa:	2b40      	cmp	r3, #64	@ 0x40
 80071ac:	d007      	beq.n	80071be <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80071bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80071c6:	d94f      	bls.n	8007268 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_SPI_Transmit+0xfa>
 80071d0:	8afb      	ldrh	r3, [r7, #22]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d142      	bne.n	800725c <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	881a      	ldrh	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e6:	1c9a      	adds	r2, r3, #2
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071fa:	e02f      	b.n	800725c <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b02      	cmp	r3, #2
 8007208:	d112      	bne.n	8007230 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720e:	881a      	ldrh	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800721a:	1c9a      	adds	r2, r3, #2
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800722e:	e015      	b.n	800725c <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007230:	f7fa fd74 	bl	8001d1c <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d803      	bhi.n	8007248 <HAL_SPI_Transmit+0x16c>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007246:	d102      	bne.n	800724e <HAL_SPI_Transmit+0x172>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d106      	bne.n	800725c <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800725a:	e0ab      	b.n	80073b4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1ca      	bne.n	80071fc <HAL_SPI_Transmit+0x120>
 8007266:	e080      	b.n	800736a <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d002      	beq.n	8007276 <HAL_SPI_Transmit+0x19a>
 8007270:	8afb      	ldrh	r3, [r7, #22]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d174      	bne.n	8007360 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800727a:	b29b      	uxth	r3, r3
 800727c:	2b01      	cmp	r3, #1
 800727e:	d912      	bls.n	80072a6 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007284:	881a      	ldrh	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	1c9a      	adds	r2, r3, #2
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800729a:	b29b      	uxth	r3, r3
 800729c:	3b02      	subs	r3, #2
 800729e:	b29a      	uxth	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072a4:	e05c      	b.n	8007360 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	7812      	ldrb	r2, [r2, #0]
 80072b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80072cc:	e048      	b.n	8007360 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d12b      	bne.n	8007334 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d912      	bls.n	800730c <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ea:	881a      	ldrh	r2, [r3, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f6:	1c9a      	adds	r2, r3, #2
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007300:	b29b      	uxth	r3, r3
 8007302:	3b02      	subs	r3, #2
 8007304:	b29a      	uxth	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800730a:	e029      	b.n	8007360 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330c      	adds	r3, #12
 8007316:	7812      	ldrb	r2, [r2, #0]
 8007318:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731e:	1c5a      	adds	r2, r3, #1
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007332:	e015      	b.n	8007360 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007334:	f7fa fcf2 	bl	8001d1c <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	683a      	ldr	r2, [r7, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d803      	bhi.n	800734c <HAL_SPI_Transmit+0x270>
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734a:	d102      	bne.n	8007352 <HAL_SPI_Transmit+0x276>
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800735e:	e029      	b.n	80073b4 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007364:	b29b      	uxth	r3, r3
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1b1      	bne.n	80072ce <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f948 	bl	8007604 <SPI_EndRxTxTransaction>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d10a      	bne.n	800739e <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007388:	2300      	movs	r3, #0
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	613b      	str	r3, [r7, #16]
 800739c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	77fb      	strb	r3, [r7, #31]
 80073aa:	e003      	b.n	80073b4 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80073bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
	...

080073c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	603b      	str	r3, [r7, #0]
 80073d4:	4613      	mov	r3, r2
 80073d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80073d8:	f7fa fca0 	bl	8001d1c <HAL_GetTick>
 80073dc:	4602      	mov	r2, r0
 80073de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e0:	1a9b      	subs	r3, r3, r2
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4413      	add	r3, r2
 80073e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80073e8:	f7fa fc98 	bl	8001d1c <HAL_GetTick>
 80073ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80073ee:	4b39      	ldr	r3, [pc, #228]	@ (80074d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	015b      	lsls	r3, r3, #5
 80073f4:	0d1b      	lsrs	r3, r3, #20
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	fb02 f303 	mul.w	r3, r2, r3
 80073fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80073fe:	e054      	b.n	80074aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d050      	beq.n	80074aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007408:	f7fa fc88 	bl	8001d1c <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	429a      	cmp	r2, r3
 8007416:	d902      	bls.n	800741e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d13d      	bne.n	800749a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685a      	ldr	r2, [r3, #4]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800742c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007436:	d111      	bne.n	800745c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007440:	d004      	beq.n	800744c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800744a:	d107      	bne.n	800745c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800745a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007464:	d10f      	bne.n	8007486 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007484:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e017      	b.n	80074ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4013      	ands	r3, r2
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	bf0c      	ite	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	2300      	movne	r3, #0
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	461a      	mov	r2, r3
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d19b      	bne.n	8007400 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	20000000 	.word	0x20000000

080074d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	@ 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80074ea:	f7fa fc17 	bl	8001d1c <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	4413      	add	r3, r2
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80074fa:	f7fa fc0f 	bl	8001d1c <HAL_GetTick>
 80074fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	330c      	adds	r3, #12
 8007506:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007508:	4b3d      	ldr	r3, [pc, #244]	@ (8007600 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	00da      	lsls	r2, r3, #3
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	0d1b      	lsrs	r3, r3, #20
 8007518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800751a:	fb02 f303 	mul.w	r3, r2, r3
 800751e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007520:	e060      	b.n	80075e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007528:	d107      	bne.n	800753a <SPI_WaitFifoStateUntilTimeout+0x62>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d104      	bne.n	800753a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	b2db      	uxtb	r3, r3
 8007536:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007538:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007540:	d050      	beq.n	80075e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007542:	f7fa fbeb 	bl	8001d1c <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	6a3b      	ldr	r3, [r7, #32]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800754e:	429a      	cmp	r2, r3
 8007550:	d902      	bls.n	8007558 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	d13d      	bne.n	80075d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007566:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007570:	d111      	bne.n	8007596 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800757a:	d004      	beq.n	8007586 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007584:	d107      	bne.n	8007596 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007594:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800759e:	d10f      	bne.n	80075c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e010      	b.n	80075f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80075da:	2300      	movs	r3, #0
 80075dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	3b01      	subs	r3, #1
 80075e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4013      	ands	r3, r2
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d196      	bne.n	8007522 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3728      	adds	r7, #40	@ 0x28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	20000000 	.word	0x20000000

08007604 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af02      	add	r7, sp, #8
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	2200      	movs	r2, #0
 8007618:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f7ff ff5b 	bl	80074d8 <SPI_WaitFifoStateUntilTimeout>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d007      	beq.n	8007638 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800762c:	f043 0220 	orr.w	r2, r3, #32
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	e027      	b.n	8007688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	9300      	str	r3, [sp, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2200      	movs	r2, #0
 8007640:	2180      	movs	r1, #128	@ 0x80
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fec0 	bl	80073c8 <SPI_WaitFlagStateUntilTimeout>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d007      	beq.n	800765e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e014      	b.n	8007688 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff ff34 	bl	80074d8 <SPI_WaitFifoStateUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800767a:	f043 0220 	orr.w	r2, r3, #32
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e000      	b.n	8007688 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}

08007690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e042      	b.n	8007728 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d106      	bne.n	80076ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f7fa fa49 	bl	8001b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2224      	movs	r2, #36	@ 0x24
 80076be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d002      	beq.n	80076e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 faf4 	bl	8007cc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f825 	bl	8007730 <UART_SetConfig>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e01b      	b.n	8007728 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689a      	ldr	r2, [r3, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800770e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f042 0201 	orr.w	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fb73 	bl	8007e0c <UART_CheckIdleState>
 8007726:	4603      	mov	r3, r0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007734:	b08c      	sub	sp, #48	@ 0x30
 8007736:	af00      	add	r7, sp, #0
 8007738:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800773a:	2300      	movs	r3, #0
 800773c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	431a      	orrs	r2, r3
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	431a      	orrs	r2, r3
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4313      	orrs	r3, r2
 8007756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	4bab      	ldr	r3, [pc, #684]	@ (8007a0c <UART_SetConfig+0x2dc>)
 8007760:	4013      	ands	r3, r2
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	6812      	ldr	r2, [r2, #0]
 8007766:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007768:	430b      	orrs	r3, r1
 800776a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	68da      	ldr	r2, [r3, #12]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4aa0      	ldr	r2, [pc, #640]	@ (8007a10 <UART_SetConfig+0x2e0>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d004      	beq.n	800779c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007798:	4313      	orrs	r3, r2
 800779a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80077a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80077aa:	697a      	ldr	r2, [r7, #20]
 80077ac:	6812      	ldr	r2, [r2, #0]
 80077ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077b0:	430b      	orrs	r3, r1
 80077b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ba:	f023 010f 	bic.w	r1, r3, #15
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a91      	ldr	r2, [pc, #580]	@ (8007a14 <UART_SetConfig+0x2e4>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d125      	bne.n	8007820 <UART_SetConfig+0xf0>
 80077d4:	4b90      	ldr	r3, [pc, #576]	@ (8007a18 <UART_SetConfig+0x2e8>)
 80077d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077da:	f003 0303 	and.w	r3, r3, #3
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d81a      	bhi.n	8007818 <UART_SetConfig+0xe8>
 80077e2:	a201      	add	r2, pc, #4	@ (adr r2, 80077e8 <UART_SetConfig+0xb8>)
 80077e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e8:	080077f9 	.word	0x080077f9
 80077ec:	08007809 	.word	0x08007809
 80077f0:	08007801 	.word	0x08007801
 80077f4:	08007811 	.word	0x08007811
 80077f8:	2301      	movs	r3, #1
 80077fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fe:	e0d6      	b.n	80079ae <UART_SetConfig+0x27e>
 8007800:	2302      	movs	r3, #2
 8007802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007806:	e0d2      	b.n	80079ae <UART_SetConfig+0x27e>
 8007808:	2304      	movs	r3, #4
 800780a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800780e:	e0ce      	b.n	80079ae <UART_SetConfig+0x27e>
 8007810:	2308      	movs	r3, #8
 8007812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007816:	e0ca      	b.n	80079ae <UART_SetConfig+0x27e>
 8007818:	2310      	movs	r3, #16
 800781a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781e:	e0c6      	b.n	80079ae <UART_SetConfig+0x27e>
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a7d      	ldr	r2, [pc, #500]	@ (8007a1c <UART_SetConfig+0x2ec>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d138      	bne.n	800789c <UART_SetConfig+0x16c>
 800782a:	4b7b      	ldr	r3, [pc, #492]	@ (8007a18 <UART_SetConfig+0x2e8>)
 800782c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007830:	f003 030c 	and.w	r3, r3, #12
 8007834:	2b0c      	cmp	r3, #12
 8007836:	d82d      	bhi.n	8007894 <UART_SetConfig+0x164>
 8007838:	a201      	add	r2, pc, #4	@ (adr r2, 8007840 <UART_SetConfig+0x110>)
 800783a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783e:	bf00      	nop
 8007840:	08007875 	.word	0x08007875
 8007844:	08007895 	.word	0x08007895
 8007848:	08007895 	.word	0x08007895
 800784c:	08007895 	.word	0x08007895
 8007850:	08007885 	.word	0x08007885
 8007854:	08007895 	.word	0x08007895
 8007858:	08007895 	.word	0x08007895
 800785c:	08007895 	.word	0x08007895
 8007860:	0800787d 	.word	0x0800787d
 8007864:	08007895 	.word	0x08007895
 8007868:	08007895 	.word	0x08007895
 800786c:	08007895 	.word	0x08007895
 8007870:	0800788d 	.word	0x0800788d
 8007874:	2300      	movs	r3, #0
 8007876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787a:	e098      	b.n	80079ae <UART_SetConfig+0x27e>
 800787c:	2302      	movs	r3, #2
 800787e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007882:	e094      	b.n	80079ae <UART_SetConfig+0x27e>
 8007884:	2304      	movs	r3, #4
 8007886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788a:	e090      	b.n	80079ae <UART_SetConfig+0x27e>
 800788c:	2308      	movs	r3, #8
 800788e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007892:	e08c      	b.n	80079ae <UART_SetConfig+0x27e>
 8007894:	2310      	movs	r3, #16
 8007896:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789a:	e088      	b.n	80079ae <UART_SetConfig+0x27e>
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a5f      	ldr	r2, [pc, #380]	@ (8007a20 <UART_SetConfig+0x2f0>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d125      	bne.n	80078f2 <UART_SetConfig+0x1c2>
 80078a6:	4b5c      	ldr	r3, [pc, #368]	@ (8007a18 <UART_SetConfig+0x2e8>)
 80078a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078b0:	2b30      	cmp	r3, #48	@ 0x30
 80078b2:	d016      	beq.n	80078e2 <UART_SetConfig+0x1b2>
 80078b4:	2b30      	cmp	r3, #48	@ 0x30
 80078b6:	d818      	bhi.n	80078ea <UART_SetConfig+0x1ba>
 80078b8:	2b20      	cmp	r3, #32
 80078ba:	d00a      	beq.n	80078d2 <UART_SetConfig+0x1a2>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d814      	bhi.n	80078ea <UART_SetConfig+0x1ba>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <UART_SetConfig+0x19a>
 80078c4:	2b10      	cmp	r3, #16
 80078c6:	d008      	beq.n	80078da <UART_SetConfig+0x1aa>
 80078c8:	e00f      	b.n	80078ea <UART_SetConfig+0x1ba>
 80078ca:	2300      	movs	r3, #0
 80078cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d0:	e06d      	b.n	80079ae <UART_SetConfig+0x27e>
 80078d2:	2302      	movs	r3, #2
 80078d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d8:	e069      	b.n	80079ae <UART_SetConfig+0x27e>
 80078da:	2304      	movs	r3, #4
 80078dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e0:	e065      	b.n	80079ae <UART_SetConfig+0x27e>
 80078e2:	2308      	movs	r3, #8
 80078e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e8:	e061      	b.n	80079ae <UART_SetConfig+0x27e>
 80078ea:	2310      	movs	r3, #16
 80078ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f0:	e05d      	b.n	80079ae <UART_SetConfig+0x27e>
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a4b      	ldr	r2, [pc, #300]	@ (8007a24 <UART_SetConfig+0x2f4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d125      	bne.n	8007948 <UART_SetConfig+0x218>
 80078fc:	4b46      	ldr	r3, [pc, #280]	@ (8007a18 <UART_SetConfig+0x2e8>)
 80078fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007902:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007906:	2bc0      	cmp	r3, #192	@ 0xc0
 8007908:	d016      	beq.n	8007938 <UART_SetConfig+0x208>
 800790a:	2bc0      	cmp	r3, #192	@ 0xc0
 800790c:	d818      	bhi.n	8007940 <UART_SetConfig+0x210>
 800790e:	2b80      	cmp	r3, #128	@ 0x80
 8007910:	d00a      	beq.n	8007928 <UART_SetConfig+0x1f8>
 8007912:	2b80      	cmp	r3, #128	@ 0x80
 8007914:	d814      	bhi.n	8007940 <UART_SetConfig+0x210>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d002      	beq.n	8007920 <UART_SetConfig+0x1f0>
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d008      	beq.n	8007930 <UART_SetConfig+0x200>
 800791e:	e00f      	b.n	8007940 <UART_SetConfig+0x210>
 8007920:	2300      	movs	r3, #0
 8007922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007926:	e042      	b.n	80079ae <UART_SetConfig+0x27e>
 8007928:	2302      	movs	r3, #2
 800792a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792e:	e03e      	b.n	80079ae <UART_SetConfig+0x27e>
 8007930:	2304      	movs	r3, #4
 8007932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007936:	e03a      	b.n	80079ae <UART_SetConfig+0x27e>
 8007938:	2308      	movs	r3, #8
 800793a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793e:	e036      	b.n	80079ae <UART_SetConfig+0x27e>
 8007940:	2310      	movs	r3, #16
 8007942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007946:	e032      	b.n	80079ae <UART_SetConfig+0x27e>
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a30      	ldr	r2, [pc, #192]	@ (8007a10 <UART_SetConfig+0x2e0>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d12a      	bne.n	80079a8 <UART_SetConfig+0x278>
 8007952:	4b31      	ldr	r3, [pc, #196]	@ (8007a18 <UART_SetConfig+0x2e8>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007958:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800795c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007960:	d01a      	beq.n	8007998 <UART_SetConfig+0x268>
 8007962:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007966:	d81b      	bhi.n	80079a0 <UART_SetConfig+0x270>
 8007968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800796c:	d00c      	beq.n	8007988 <UART_SetConfig+0x258>
 800796e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007972:	d815      	bhi.n	80079a0 <UART_SetConfig+0x270>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <UART_SetConfig+0x250>
 8007978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800797c:	d008      	beq.n	8007990 <UART_SetConfig+0x260>
 800797e:	e00f      	b.n	80079a0 <UART_SetConfig+0x270>
 8007980:	2300      	movs	r3, #0
 8007982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007986:	e012      	b.n	80079ae <UART_SetConfig+0x27e>
 8007988:	2302      	movs	r3, #2
 800798a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798e:	e00e      	b.n	80079ae <UART_SetConfig+0x27e>
 8007990:	2304      	movs	r3, #4
 8007992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007996:	e00a      	b.n	80079ae <UART_SetConfig+0x27e>
 8007998:	2308      	movs	r3, #8
 800799a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799e:	e006      	b.n	80079ae <UART_SetConfig+0x27e>
 80079a0:	2310      	movs	r3, #16
 80079a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a6:	e002      	b.n	80079ae <UART_SetConfig+0x27e>
 80079a8:	2310      	movs	r3, #16
 80079aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a17      	ldr	r2, [pc, #92]	@ (8007a10 <UART_SetConfig+0x2e0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	f040 80a8 	bne.w	8007b0a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079be:	2b08      	cmp	r3, #8
 80079c0:	d834      	bhi.n	8007a2c <UART_SetConfig+0x2fc>
 80079c2:	a201      	add	r2, pc, #4	@ (adr r2, 80079c8 <UART_SetConfig+0x298>)
 80079c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c8:	080079ed 	.word	0x080079ed
 80079cc:	08007a2d 	.word	0x08007a2d
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	080079fb 	.word	0x080079fb
 80079dc:	08007a2d 	.word	0x08007a2d
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a2d 	.word	0x08007a2d
 80079e8:	08007a03 	.word	0x08007a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079ec:	f7fe fed8 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 80079f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079f2:	e021      	b.n	8007a38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079f4:	4b0c      	ldr	r3, [pc, #48]	@ (8007a28 <UART_SetConfig+0x2f8>)
 80079f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079f8:	e01e      	b.n	8007a38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079fa:	f7fe fe63 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 80079fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a00:	e01a      	b.n	8007a38 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a06:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a08:	e016      	b.n	8007a38 <UART_SetConfig+0x308>
 8007a0a:	bf00      	nop
 8007a0c:	cfff69f3 	.word	0xcfff69f3
 8007a10:	40008000 	.word	0x40008000
 8007a14:	40013800 	.word	0x40013800
 8007a18:	40021000 	.word	0x40021000
 8007a1c:	40004400 	.word	0x40004400
 8007a20:	40004800 	.word	0x40004800
 8007a24:	40004c00 	.word	0x40004c00
 8007a28:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a36:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 812a 	beq.w	8007c94 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a44:	4a9e      	ldr	r2, [pc, #632]	@ (8007cc0 <UART_SetConfig+0x590>)
 8007a46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	005b      	lsls	r3, r3, #1
 8007a5c:	4413      	add	r3, r2
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	429a      	cmp	r2, r3
 8007a62:	d305      	bcc.n	8007a70 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d903      	bls.n	8007a78 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a76:	e10d      	b.n	8007c94 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	60bb      	str	r3, [r7, #8]
 8007a7e:	60fa      	str	r2, [r7, #12]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a84:	4a8e      	ldr	r2, [pc, #568]	@ (8007cc0 <UART_SetConfig+0x590>)
 8007a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	603b      	str	r3, [r7, #0]
 8007a90:	607a      	str	r2, [r7, #4]
 8007a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a9a:	f7f8 ffb3 	bl	8000a04 <__aeabi_uldivmod>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4610      	mov	r0, r2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	f04f 0200 	mov.w	r2, #0
 8007aaa:	f04f 0300 	mov.w	r3, #0
 8007aae:	020b      	lsls	r3, r1, #8
 8007ab0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ab4:	0202      	lsls	r2, r0, #8
 8007ab6:	6979      	ldr	r1, [r7, #20]
 8007ab8:	6849      	ldr	r1, [r1, #4]
 8007aba:	0849      	lsrs	r1, r1, #1
 8007abc:	2000      	movs	r0, #0
 8007abe:	460c      	mov	r4, r1
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	eb12 0804 	adds.w	r8, r2, r4
 8007ac6:	eb43 0905 	adc.w	r9, r3, r5
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	469a      	mov	sl, r3
 8007ad2:	4693      	mov	fp, r2
 8007ad4:	4652      	mov	r2, sl
 8007ad6:	465b      	mov	r3, fp
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f8 ff92 	bl	8000a04 <__aeabi_uldivmod>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007aee:	d308      	bcc.n	8007b02 <UART_SetConfig+0x3d2>
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007af6:	d204      	bcs.n	8007b02 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6a3a      	ldr	r2, [r7, #32]
 8007afe:	60da      	str	r2, [r3, #12]
 8007b00:	e0c8      	b.n	8007c94 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b08:	e0c4      	b.n	8007c94 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b12:	d167      	bne.n	8007be4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007b14:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b18:	2b08      	cmp	r3, #8
 8007b1a:	d828      	bhi.n	8007b6e <UART_SetConfig+0x43e>
 8007b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b24 <UART_SetConfig+0x3f4>)
 8007b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b22:	bf00      	nop
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b59 	.word	0x08007b59
 8007b30:	08007b6f 	.word	0x08007b6f
 8007b34:	08007b5f 	.word	0x08007b5f
 8007b38:	08007b6f 	.word	0x08007b6f
 8007b3c:	08007b6f 	.word	0x08007b6f
 8007b40:	08007b6f 	.word	0x08007b6f
 8007b44:	08007b67 	.word	0x08007b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b48:	f7fe fe2a 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 8007b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b4e:	e014      	b.n	8007b7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b50:	f7fe fe3c 	bl	80067cc <HAL_RCC_GetPCLK2Freq>
 8007b54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b56:	e010      	b.n	8007b7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b58:	4b5a      	ldr	r3, [pc, #360]	@ (8007cc4 <UART_SetConfig+0x594>)
 8007b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b5c:	e00d      	b.n	8007b7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b5e:	f7fe fdb1 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8007b62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b64:	e009      	b.n	8007b7a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b6c:	e005      	b.n	8007b7a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f000 8089 	beq.w	8007c94 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b86:	4a4e      	ldr	r2, [pc, #312]	@ (8007cc0 <UART_SetConfig+0x590>)
 8007b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b94:	005a      	lsls	r2, r3, #1
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	085b      	lsrs	r3, r3, #1
 8007b9c:	441a      	add	r2, r3
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ba6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ba8:	6a3b      	ldr	r3, [r7, #32]
 8007baa:	2b0f      	cmp	r3, #15
 8007bac:	d916      	bls.n	8007bdc <UART_SetConfig+0x4ac>
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bb4:	d212      	bcs.n	8007bdc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	f023 030f 	bic.w	r3, r3, #15
 8007bbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bc0:	6a3b      	ldr	r3, [r7, #32]
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	f003 0307 	and.w	r3, r3, #7
 8007bca:	b29a      	uxth	r2, r3
 8007bcc:	8bfb      	ldrh	r3, [r7, #30]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	8bfa      	ldrh	r2, [r7, #30]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	e05b      	b.n	8007c94 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007be2:	e057      	b.n	8007c94 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007be4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d828      	bhi.n	8007c3e <UART_SetConfig+0x50e>
 8007bec:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf4 <UART_SetConfig+0x4c4>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c3f 	.word	0x08007c3f
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c3f 	.word	0x08007c3f
 8007c0c:	08007c3f 	.word	0x08007c3f
 8007c10:	08007c3f 	.word	0x08007c3f
 8007c14:	08007c37 	.word	0x08007c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7fe fdc2 	bl	80067a0 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c1e:	e014      	b.n	8007c4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7fe fdd4 	bl	80067cc <HAL_RCC_GetPCLK2Freq>
 8007c24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c26:	e010      	b.n	8007c4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b26      	ldr	r3, [pc, #152]	@ (8007cc4 <UART_SetConfig+0x594>)
 8007c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c2c:	e00d      	b.n	8007c4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2e:	f7fe fd49 	bl	80066c4 <HAL_RCC_GetSysClockFreq>
 8007c32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c34:	e009      	b.n	8007c4a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c3c:	e005      	b.n	8007c4a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c48:	bf00      	nop
    }

    if (pclk != 0U)
 8007c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d021      	beq.n	8007c94 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c54:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc0 <UART_SetConfig+0x590>)
 8007c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	085b      	lsrs	r3, r3, #1
 8007c68:	441a      	add	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	2b0f      	cmp	r3, #15
 8007c78:	d909      	bls.n	8007c8e <UART_SetConfig+0x55e>
 8007c7a:	6a3b      	ldr	r3, [r7, #32]
 8007c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c80:	d205      	bcs.n	8007c8e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60da      	str	r2, [r3, #12]
 8007c8c:	e002      	b.n	8007c94 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2200      	movs	r2, #0
 8007cae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007cb0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3730      	adds	r7, #48	@ 0x30
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cbe:	bf00      	nop
 8007cc0:	0800d034 	.word	0x0800d034
 8007cc4:	00f42400 	.word	0x00f42400

08007cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cd4:	f003 0308 	and.w	r3, r3, #8
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d18:	f003 0302 	and.w	r3, r3, #2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	f003 0310 	and.w	r3, r3, #16
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	689b      	ldr	r3, [r3, #8]
 8007d6a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d01a      	beq.n	8007dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007dc6:	d10a      	bne.n	8007dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  }
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b098      	sub	sp, #96	@ 0x60
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e1c:	f7f9 ff7e 	bl	8001d1c <HAL_GetTick>
 8007e20:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	d12f      	bne.n	8007e90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e30:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f88e 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d022      	beq.n	8007e90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e68:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e6a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e6      	bne.n	8007e4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e063      	b.n	8007f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 0304 	and.w	r3, r3, #4
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d149      	bne.n	8007f32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e9e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f857 	bl	8007f60 <UART_WaitOnFlagUntilTimeout>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d03c      	beq.n	8007f32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ed8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ede:	e841 2300 	strex	r3, r2, [r1]
 8007ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1e6      	bne.n	8007eb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3308      	adds	r3, #8
 8007ef0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	e853 3f00 	ldrex	r3, [r3]
 8007ef8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f023 0301 	bic.w	r3, r3, #1
 8007f00:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3308      	adds	r3, #8
 8007f08:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f0a:	61fa      	str	r2, [r7, #28]
 8007f0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0e:	69b9      	ldr	r1, [r7, #24]
 8007f10:	69fa      	ldr	r2, [r7, #28]
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	617b      	str	r3, [r7, #20]
   return(result);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e5      	bne.n	8007eea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e012      	b.n	8007f58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2220      	movs	r2, #32
 8007f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3758      	adds	r7, #88	@ 0x58
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f70:	e04f      	b.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f78:	d04b      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7a:	f7f9 fecf 	bl	8001d1c <HAL_GetTick>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	1ad3      	subs	r3, r2, r3
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d302      	bcc.n	8007f90 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e04e      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0304 	and.w	r3, r3, #4
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d037      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b80      	cmp	r3, #128	@ 0x80
 8007fa6:	d034      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b40      	cmp	r3, #64	@ 0x40
 8007fac:	d031      	beq.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	69db      	ldr	r3, [r3, #28]
 8007fb4:	f003 0308 	and.w	r3, r3, #8
 8007fb8:	2b08      	cmp	r3, #8
 8007fba:	d110      	bne.n	8007fde <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f000 f838 	bl	800803a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2208      	movs	r2, #8
 8007fce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e029      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fec:	d111      	bne.n	8008012 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ff6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f000 f81e 	bl	800803a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e00f      	b.n	8008032 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69da      	ldr	r2, [r3, #28]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	4013      	ands	r3, r2
 800801c:	68ba      	ldr	r2, [r7, #8]
 800801e:	429a      	cmp	r2, r3
 8008020:	bf0c      	ite	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	2300      	movne	r3, #0
 8008026:	b2db      	uxtb	r3, r3
 8008028:	461a      	mov	r2, r3
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	429a      	cmp	r2, r3
 800802e:	d0a0      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800803a:	b480      	push	{r7}
 800803c:	b095      	sub	sp, #84	@ 0x54
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008052:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008056:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008060:	643b      	str	r3, [r7, #64]	@ 0x40
 8008062:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800806e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e6      	bne.n	8008042 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3308      	adds	r3, #8
 800807a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	61fb      	str	r3, [r7, #28]
   return(result);
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	3308      	adds	r3, #8
 8008096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008098:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800809a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800809c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800809e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080a0:	e841 2300 	strex	r3, r2, [r1]
 80080a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d1e3      	bne.n	8008074 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d118      	bne.n	80080e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	e853 3f00 	ldrex	r3, [r3]
 80080c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f023 0310 	bic.w	r3, r3, #16
 80080c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d6:	6979      	ldr	r1, [r7, #20]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	e841 2300 	strex	r3, r2, [r1]
 80080de:	613b      	str	r3, [r7, #16]
   return(result);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1e6      	bne.n	80080b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2220      	movs	r2, #32
 80080ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80080fa:	bf00      	nop
 80080fc:	3754      	adds	r7, #84	@ 0x54
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008106:	b480      	push	{r7}
 8008108:	b085      	sub	sp, #20
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008114:	2b01      	cmp	r3, #1
 8008116:	d101      	bne.n	800811c <HAL_UARTEx_DisableFifoMode+0x16>
 8008118:	2302      	movs	r3, #2
 800811a:	e027      	b.n	800816c <HAL_UARTEx_DisableFifoMode+0x66>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2224      	movs	r2, #36	@ 0x24
 8008128:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0201 	bic.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800814a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2220      	movs	r2, #32
 800815e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008188:	2b01      	cmp	r3, #1
 800818a:	d101      	bne.n	8008190 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800818c:	2302      	movs	r3, #2
 800818e:	e02d      	b.n	80081ec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2224      	movs	r2, #36	@ 0x24
 800819c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0201 	bic.w	r2, r2, #1
 80081b6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f84f 	bl	8008270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008204:	2b01      	cmp	r3, #1
 8008206:	d101      	bne.n	800820c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008208:	2302      	movs	r3, #2
 800820a:	e02d      	b.n	8008268 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2224      	movs	r2, #36	@ 0x24
 8008218:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f022 0201 	bic.w	r2, r2, #1
 8008232:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	683a      	ldr	r2, [r7, #0]
 8008244:	430a      	orrs	r2, r1
 8008246:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f811 	bl	8008270 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800827c:	2b00      	cmp	r3, #0
 800827e:	d108      	bne.n	8008292 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008290:	e031      	b.n	80082f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008292:	2308      	movs	r3, #8
 8008294:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008296:	2308      	movs	r3, #8
 8008298:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	0e5b      	lsrs	r3, r3, #25
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	f003 0307 	and.w	r3, r3, #7
 80082a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	0f5b      	lsrs	r3, r3, #29
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 0307 	and.w	r3, r3, #7
 80082b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	7b3a      	ldrb	r2, [r7, #12]
 80082be:	4911      	ldr	r1, [pc, #68]	@ (8008304 <UARTEx_SetNbDataToProcess+0x94>)
 80082c0:	5c8a      	ldrb	r2, [r1, r2]
 80082c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082c6:	7b3a      	ldrb	r2, [r7, #12]
 80082c8:	490f      	ldr	r1, [pc, #60]	@ (8008308 <UARTEx_SetNbDataToProcess+0x98>)
 80082ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	7b7a      	ldrb	r2, [r7, #13]
 80082dc:	4909      	ldr	r1, [pc, #36]	@ (8008304 <UARTEx_SetNbDataToProcess+0x94>)
 80082de:	5c8a      	ldrb	r2, [r1, r2]
 80082e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082e4:	7b7a      	ldrb	r2, [r7, #13]
 80082e6:	4908      	ldr	r1, [pc, #32]	@ (8008308 <UARTEx_SetNbDataToProcess+0x98>)
 80082e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80082f6:	bf00      	nop
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	0800d04c 	.word	0x0800d04c
 8008308:	0800d054 	.word	0x0800d054

0800830c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800830c:	b480      	push	{r7}
 800830e:	b08b      	sub	sp, #44	@ 0x2c
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	fa93 f3a3 	rbit	r3, r3
 8008326:	613b      	str	r3, [r7, #16]
  return result;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008332:	2320      	movs	r3, #32
 8008334:	e003      	b.n	800833e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	fab3 f383 	clz	r3, r3
 800833c:	b2db      	uxtb	r3, r3
 800833e:	005b      	lsls	r3, r3, #1
 8008340:	2103      	movs	r1, #3
 8008342:	fa01 f303 	lsl.w	r3, r1, r3
 8008346:	43db      	mvns	r3, r3
 8008348:	401a      	ands	r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	fa93 f3a3 	rbit	r3, r3
 8008354:	61fb      	str	r3, [r7, #28]
  return result;
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d101      	bne.n	8008364 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008360:	2320      	movs	r3, #32
 8008362:	e003      	b.n	800836c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008366:	fab3 f383 	clz	r3, r3
 800836a:	b2db      	uxtb	r3, r3
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	6879      	ldr	r1, [r7, #4]
 8008370:	fa01 f303 	lsl.w	r3, r1, r3
 8008374:	431a      	orrs	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	601a      	str	r2, [r3, #0]
}
 800837a:	bf00      	nop
 800837c:	372c      	adds	r7, #44	@ 0x2c
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008386:	b480      	push	{r7}
 8008388:	b085      	sub	sp, #20
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	43db      	mvns	r3, r3
 800839a:	401a      	ands	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	fb01 f303 	mul.w	r3, r1, r3
 80083a4:	431a      	orrs	r2, r3
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	605a      	str	r2, [r3, #4]
}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b08b      	sub	sp, #44	@ 0x2c
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689a      	ldr	r2, [r3, #8]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	fa93 f3a3 	rbit	r3, r3
 80083d0:	613b      	str	r3, [r7, #16]
  return result;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80083dc:	2320      	movs	r3, #32
 80083de:	e003      	b.n	80083e8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	fab3 f383 	clz	r3, r3
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	2103      	movs	r1, #3
 80083ec:	fa01 f303 	lsl.w	r3, r1, r3
 80083f0:	43db      	mvns	r3, r3
 80083f2:	401a      	ands	r2, r3
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	fa93 f3a3 	rbit	r3, r3
 80083fe:	61fb      	str	r3, [r7, #28]
  return result;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	2b00      	cmp	r3, #0
 8008408:	d101      	bne.n	800840e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800840a:	2320      	movs	r3, #32
 800840c:	e003      	b.n	8008416 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	fab3 f383 	clz	r3, r3
 8008414:	b2db      	uxtb	r3, r3
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	6879      	ldr	r1, [r7, #4]
 800841a:	fa01 f303 	lsl.w	r3, r1, r3
 800841e:	431a      	orrs	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008424:	bf00      	nop
 8008426:	372c      	adds	r7, #44	@ 0x2c
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008430:	b480      	push	{r7}
 8008432:	b08b      	sub	sp, #44	@ 0x2c
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	fa93 f3a3 	rbit	r3, r3
 800844a:	613b      	str	r3, [r7, #16]
  return result;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d101      	bne.n	800845a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008456:	2320      	movs	r3, #32
 8008458:	e003      	b.n	8008462 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	fab3 f383 	clz	r3, r3
 8008460:	b2db      	uxtb	r3, r3
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	2103      	movs	r1, #3
 8008466:	fa01 f303 	lsl.w	r3, r1, r3
 800846a:	43db      	mvns	r3, r3
 800846c:	401a      	ands	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	fa93 f3a3 	rbit	r3, r3
 8008478:	61fb      	str	r3, [r7, #28]
  return result;
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	2b00      	cmp	r3, #0
 8008482:	d101      	bne.n	8008488 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008484:	2320      	movs	r3, #32
 8008486:	e003      	b.n	8008490 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	fab3 f383 	clz	r3, r3
 800848e:	b2db      	uxtb	r3, r3
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	6879      	ldr	r1, [r7, #4]
 8008494:	fa01 f303 	lsl.w	r3, r1, r3
 8008498:	431a      	orrs	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	60da      	str	r2, [r3, #12]
}
 800849e:	bf00      	nop
 80084a0:	372c      	adds	r7, #44	@ 0x2c
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b08b      	sub	sp, #44	@ 0x2c
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	60b9      	str	r1, [r7, #8]
 80084b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6a1a      	ldr	r2, [r3, #32]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	fa93 f3a3 	rbit	r3, r3
 80084c4:	613b      	str	r3, [r7, #16]
  return result;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80084d0:	2320      	movs	r3, #32
 80084d2:	e003      	b.n	80084dc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80084d4:	69bb      	ldr	r3, [r7, #24]
 80084d6:	fab3 f383 	clz	r3, r3
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	210f      	movs	r1, #15
 80084e0:	fa01 f303 	lsl.w	r3, r1, r3
 80084e4:	43db      	mvns	r3, r3
 80084e6:	401a      	ands	r2, r3
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084ec:	6a3b      	ldr	r3, [r7, #32]
 80084ee:	fa93 f3a3 	rbit	r3, r3
 80084f2:	61fb      	str	r3, [r7, #28]
  return result;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80084fe:	2320      	movs	r3, #32
 8008500:	e003      	b.n	800850a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008504:	fab3 f383 	clz	r3, r3
 8008508:	b2db      	uxtb	r3, r3
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	fa01 f303 	lsl.w	r3, r1, r3
 8008512:	431a      	orrs	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008518:	bf00      	nop
 800851a:	372c      	adds	r7, #44	@ 0x2c
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008524:	b480      	push	{r7}
 8008526:	b08b      	sub	sp, #44	@ 0x2c
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	fa93 f3a3 	rbit	r3, r3
 8008540:	613b      	str	r3, [r7, #16]
  return result;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800854c:	2320      	movs	r3, #32
 800854e:	e003      	b.n	8008558 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	fab3 f383 	clz	r3, r3
 8008556:	b2db      	uxtb	r3, r3
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	210f      	movs	r1, #15
 800855c:	fa01 f303 	lsl.w	r3, r1, r3
 8008560:	43db      	mvns	r3, r3
 8008562:	401a      	ands	r2, r3
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	0a1b      	lsrs	r3, r3, #8
 8008568:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800856a:	6a3b      	ldr	r3, [r7, #32]
 800856c:	fa93 f3a3 	rbit	r3, r3
 8008570:	61fb      	str	r3, [r7, #28]
  return result;
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800857c:	2320      	movs	r3, #32
 800857e:	e003      	b.n	8008588 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008582:	fab3 f383 	clz	r3, r3
 8008586:	b2db      	uxtb	r3, r3
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	6879      	ldr	r1, [r7, #4]
 800858c:	fa01 f303 	lsl.w	r3, r1, r3
 8008590:	431a      	orrs	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008596:	bf00      	nop
 8008598:	372c      	adds	r7, #44	@ 0x2c
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr

080085a2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b088      	sub	sp, #32
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
 80085aa:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	fa93 f3a3 	rbit	r3, r3
 80085b8:	60fb      	str	r3, [r7, #12]
  return result;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d101      	bne.n	80085c8 <LL_GPIO_Init+0x26>
    return 32U;
 80085c4:	2320      	movs	r3, #32
 80085c6:	e003      	b.n	80085d0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	fab3 f383 	clz	r3, r3
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80085d2:	e048      	b.n	8008666 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	2101      	movs	r1, #1
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	fa01 f303 	lsl.w	r3, r1, r3
 80085e0:	4013      	ands	r3, r2
 80085e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d03a      	beq.n	8008660 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d003      	beq.n	80085fa <LL_GPIO_Init+0x58>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d10e      	bne.n	8008618 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	461a      	mov	r2, r3
 8008600:	69b9      	ldr	r1, [r7, #24]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff fed7 	bl	80083b6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	461a      	mov	r2, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff feb7 	bl	8008386 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	461a      	mov	r2, r3
 800861e:	69b9      	ldr	r1, [r7, #24]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff ff05 	bl	8008430 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d111      	bne.n	8008652 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800862e:	69bb      	ldr	r3, [r7, #24]
 8008630:	2bff      	cmp	r3, #255	@ 0xff
 8008632:	d807      	bhi.n	8008644 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	461a      	mov	r2, r3
 800863a:	69b9      	ldr	r1, [r7, #24]
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f7ff ff34 	bl	80084aa <LL_GPIO_SetAFPin_0_7>
 8008642:	e006      	b.n	8008652 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	695b      	ldr	r3, [r3, #20]
 8008648:	461a      	mov	r2, r3
 800864a:	69b9      	ldr	r1, [r7, #24]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff ff69 	bl	8008524 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	461a      	mov	r2, r3
 8008658:	69b9      	ldr	r1, [r7, #24]
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f7ff fe56 	bl	800830c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008660:	69fb      	ldr	r3, [r7, #28]
 8008662:	3301      	adds	r3, #1
 8008664:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1af      	bne.n	80085d4 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800867e:	b480      	push	{r7}
 8008680:	b085      	sub	sp, #20
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2200      	movs	r2, #0
 800868a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800868e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008692:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	b29a      	uxth	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80086b4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80086b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	43db      	mvns	r3, r3
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	4013      	ands	r3, r2
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr

080086e2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80086e2:	b480      	push	{r7}
 80086e4:	b085      	sub	sp, #20
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	60f8      	str	r0, [r7, #12]
 80086ea:	1d3b      	adds	r3, r7, #4
 80086ec:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
	...

08008720 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008720:	b480      	push	{r7}
 8008722:	b09d      	sub	sp, #116	@ 0x74
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800872a:	2300      	movs	r3, #0
 800872c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	4413      	add	r3, r2
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	b29b      	uxth	r3, r3
 800873e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8008742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008746:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	78db      	ldrb	r3, [r3, #3]
 800874e:	2b03      	cmp	r3, #3
 8008750:	d81f      	bhi.n	8008792 <USB_ActivateEndpoint+0x72>
 8008752:	a201      	add	r2, pc, #4	@ (adr r2, 8008758 <USB_ActivateEndpoint+0x38>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	08008769 	.word	0x08008769
 800875c:	08008785 	.word	0x08008785
 8008760:	0800879b 	.word	0x0800879b
 8008764:	08008777 	.word	0x08008777
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008768:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800876c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008770:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008774:	e012      	b.n	800879c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008776:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800877a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800877e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008782:	e00b      	b.n	800879c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008784:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008788:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800878c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008790:	e004      	b.n	800879c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008798:	e000      	b.n	800879c <USB_ActivateEndpoint+0x7c>
      break;
 800879a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	441a      	add	r2, r3
 80087a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80087aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	b21b      	sxth	r3, r3
 80087ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d6:	b21a      	sxth	r2, r3
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	b21b      	sxth	r3, r3
 80087de:	4313      	orrs	r3, r2
 80087e0:	b21b      	sxth	r3, r3
 80087e2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	441a      	add	r2, r3
 80087f0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80087f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008800:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008804:	b29b      	uxth	r3, r3
 8008806:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	7b1b      	ldrb	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	f040 8178 	bne.w	8008b02 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	785b      	ldrb	r3, [r3, #1]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f000 8084 	beq.w	8008924 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	61bb      	str	r3, [r7, #24]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008826:	b29b      	uxth	r3, r3
 8008828:	461a      	mov	r2, r3
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	4413      	add	r3, r2
 800882e:	61bb      	str	r3, [r7, #24]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	00da      	lsls	r2, r3, #3
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	4413      	add	r3, r2
 800883a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	88db      	ldrh	r3, [r3, #6]
 8008844:	085b      	lsrs	r3, r3, #1
 8008846:	b29b      	uxth	r3, r3
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	b29a      	uxth	r2, r3
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	827b      	strh	r3, [r7, #18]
 800885e:	8a7b      	ldrh	r3, [r7, #18]
 8008860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01b      	beq.n	80088a0 <USB_ActivateEndpoint+0x180>
 8008868:	687a      	ldr	r2, [r7, #4]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	b29b      	uxth	r3, r3
 8008876:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800887a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800887e:	823b      	strh	r3, [r7, #16]
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	441a      	add	r2, r3
 800888a:	8a3b      	ldrh	r3, [r7, #16]
 800888c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008898:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800889c:	b29b      	uxth	r3, r3
 800889e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	78db      	ldrb	r3, [r3, #3]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d020      	beq.n	80088ea <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088be:	81bb      	strh	r3, [r7, #12]
 80088c0:	89bb      	ldrh	r3, [r7, #12]
 80088c2:	f083 0320 	eor.w	r3, r3, #32
 80088c6:	81bb      	strh	r3, [r7, #12]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	441a      	add	r2, r3
 80088d2:	89bb      	ldrh	r3, [r7, #12]
 80088d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	8013      	strh	r3, [r2, #0]
 80088e8:	e2d5      	b.n	8008e96 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	881b      	ldrh	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008900:	81fb      	strh	r3, [r7, #14]
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	441a      	add	r2, r3
 800890c:	89fb      	ldrh	r3, [r7, #14]
 800890e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800891a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800891e:	b29b      	uxth	r3, r3
 8008920:	8013      	strh	r3, [r2, #0]
 8008922:	e2b8      	b.n	8008e96 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	633b      	str	r3, [r7, #48]	@ 0x30
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800892e:	b29b      	uxth	r3, r3
 8008930:	461a      	mov	r2, r3
 8008932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008934:	4413      	add	r3, r2
 8008936:	633b      	str	r3, [r7, #48]	@ 0x30
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	00da      	lsls	r2, r3, #3
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	4413      	add	r3, r2
 8008942:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008946:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	88db      	ldrh	r3, [r3, #6]
 800894c:	085b      	lsrs	r3, r3, #1
 800894e:	b29b      	uxth	r3, r3
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	b29a      	uxth	r2, r3
 8008954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008956:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008968:	4413      	add	r3, r2
 800896a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	00da      	lsls	r2, r3, #3
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	4413      	add	r3, r2
 8008976:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800897a:	627b      	str	r3, [r7, #36]	@ 0x24
 800897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	b29b      	uxth	r3, r3
 8008982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008986:	b29a      	uxth	r2, r3
 8008988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898a:	801a      	strh	r2, [r3, #0]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <USB_ActivateEndpoint+0x28a>
 8008994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800899e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a6:	801a      	strh	r2, [r3, #0]
 80089a8:	e039      	b.n	8008a1e <USB_ActivateEndpoint+0x2fe>
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80089b0:	d818      	bhi.n	80089e4 <USB_ActivateEndpoint+0x2c4>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	085b      	lsrs	r3, r3, #1
 80089b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	691b      	ldr	r3, [r3, #16]
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <USB_ActivateEndpoint+0x2ac>
 80089c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089c8:	3301      	adds	r3, #1
 80089ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29a      	uxth	r2, r3
 80089d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	029b      	lsls	r3, r3, #10
 80089d8:	b29b      	uxth	r3, r3
 80089da:	4313      	orrs	r3, r2
 80089dc:	b29a      	uxth	r2, r3
 80089de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e0:	801a      	strh	r2, [r3, #0]
 80089e2:	e01c      	b.n	8008a1e <USB_ActivateEndpoint+0x2fe>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	095b      	lsrs	r3, r3, #5
 80089ea:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	f003 031f 	and.w	r3, r3, #31
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d102      	bne.n	80089fe <USB_ActivateEndpoint+0x2de>
 80089f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089fa:	3b01      	subs	r3, #1
 80089fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	881b      	ldrh	r3, [r3, #0]
 8008a02:	b29a      	uxth	r2, r3
 8008a04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	029b      	lsls	r3, r3, #10
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a18:	b29a      	uxth	r2, r3
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008a2c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d01b      	beq.n	8008a6e <USB_ActivateEndpoint+0x34e>
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4c:	843b      	strh	r3, [r7, #32]
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	441a      	add	r2, r3
 8008a58:	8c3b      	ldrh	r3, [r7, #32]
 8008a5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d124      	bne.n	8008ac0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	881b      	ldrh	r3, [r3, #0]
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a8c:	83bb      	strh	r3, [r7, #28]
 8008a8e:	8bbb      	ldrh	r3, [r7, #28]
 8008a90:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a94:	83bb      	strh	r3, [r7, #28]
 8008a96:	8bbb      	ldrh	r3, [r7, #28]
 8008a98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a9c:	83bb      	strh	r3, [r7, #28]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	8bbb      	ldrh	r3, [r7, #28]
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]
 8008abe:	e1ea      	b.n	8008e96 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	881b      	ldrh	r3, [r3, #0]
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad6:	83fb      	strh	r3, [r7, #30]
 8008ad8:	8bfb      	ldrh	r3, [r7, #30]
 8008ada:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008ade:	83fb      	strh	r3, [r7, #30]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	441a      	add	r2, r3
 8008aea:	8bfb      	ldrh	r3, [r7, #30]
 8008aec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008af0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	8013      	strh	r3, [r2, #0]
 8008b00:	e1c9      	b.n	8008e96 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	78db      	ldrb	r3, [r3, #3]
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d11e      	bne.n	8008b48 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b20:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	009b      	lsls	r3, r3, #2
 8008b2c:	441a      	add	r2, r3
 8008b2e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b3a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	8013      	strh	r3, [r2, #0]
 8008b46:	e01d      	b.n	8008b84 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	881b      	ldrh	r3, [r3, #0]
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b5e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	461a      	mov	r2, r3
 8008b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b94:	4413      	add	r3, r2
 8008b96:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	00da      	lsls	r2, r3, #3
 8008b9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ba6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	891b      	ldrh	r3, [r3, #8]
 8008bac:	085b      	lsrs	r3, r3, #1
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	005b      	lsls	r3, r3, #1
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bc8:	4413      	add	r3, r2
 8008bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	00da      	lsls	r2, r3, #3
 8008bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bd4:	4413      	add	r3, r2
 8008bd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008bda:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	895b      	ldrh	r3, [r3, #10]
 8008be0:	085b      	lsrs	r3, r3, #1
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	005b      	lsls	r3, r3, #1
 8008be6:	b29a      	uxth	r2, r3
 8008be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	785b      	ldrb	r3, [r3, #1]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 8093 	bne.w	8008d1c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008c06:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d01b      	beq.n	8008c4a <USB_ActivateEndpoint+0x52a>
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	4413      	add	r3, r2
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c28:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	441a      	add	r2, r3
 8008c34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008c36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	781b      	ldrb	r3, [r3, #0]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	4413      	add	r3, r2
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008c58:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d01b      	beq.n	8008c9a <USB_ActivateEndpoint+0x57a>
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	781b      	ldrb	r3, [r3, #0]
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	4413      	add	r3, r2
 8008c6c:	881b      	ldrh	r3, [r3, #0]
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c78:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	441a      	add	r2, r3
 8008c84:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c92:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4413      	add	r3, r2
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cb0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008cb2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008cb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008cb8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008cba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008cbc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008cc0:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	441a      	add	r2, r3
 8008ccc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	4413      	add	r3, r2
 8008cec:	881b      	ldrh	r3, [r3, #0]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	441a      	add	r2, r3
 8008d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	8013      	strh	r3, [r2, #0]
 8008d1a:	e0bc      	b.n	8008e96 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008d2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008d30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01d      	beq.n	8008d74 <USB_ActivateEndpoint+0x654>
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d4e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	441a      	add	r2, r3
 8008d5c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008d60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	4413      	add	r3, r2
 8008d7e:	881b      	ldrh	r3, [r3, #0]
 8008d80:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008d84:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d01d      	beq.n	8008dcc <USB_ActivateEndpoint+0x6ac>
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	781b      	ldrb	r3, [r3, #0]
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	881b      	ldrh	r3, [r3, #0]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008da2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008da6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	441a      	add	r2, r3
 8008db4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008db8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dc4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	78db      	ldrb	r3, [r3, #3]
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d024      	beq.n	8008e1e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	781b      	ldrb	r3, [r3, #0]
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	881b      	ldrh	r3, [r3, #0]
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dea:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008dee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008df2:	f083 0320 	eor.w	r3, r3, #32
 8008df6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	441a      	add	r2, r3
 8008e04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008e08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	8013      	strh	r3, [r2, #0]
 8008e1c:	e01d      	b.n	8008e5a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e34:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008e46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	b29b      	uxth	r3, r3
 8008e68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e70:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	441a      	add	r2, r3
 8008e7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008e82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008e96:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3774      	adds	r7, #116	@ 0x74
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop

08008ea8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b08d      	sub	sp, #52	@ 0x34
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	7b1b      	ldrb	r3, [r3, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f040 808e 	bne.w	8008fd8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d044      	beq.n	8008f4e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	4413      	add	r3, r2
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	81bb      	strh	r3, [r7, #12]
 8008ed2:	89bb      	ldrh	r3, [r7, #12]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01b      	beq.n	8008f14 <USB_DeactivateEndpoint+0x6c>
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	4413      	add	r3, r2
 8008ee6:	881b      	ldrh	r3, [r3, #0]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ef2:	817b      	strh	r3, [r7, #10]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	441a      	add	r2, r3
 8008efe:	897b      	ldrh	r3, [r7, #10]
 8008f00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f14:	687a      	ldr	r2, [r7, #4]
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4413      	add	r3, r2
 8008f1e:	881b      	ldrh	r3, [r3, #0]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f2a:	813b      	strh	r3, [r7, #8]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	441a      	add	r2, r3
 8008f36:	893b      	ldrh	r3, [r7, #8]
 8008f38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]
 8008f4c:	e192      	b.n	8009274 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	4413      	add	r3, r2
 8008f58:	881b      	ldrh	r3, [r3, #0]
 8008f5a:	827b      	strh	r3, [r7, #18]
 8008f5c:	8a7b      	ldrh	r3, [r7, #18]
 8008f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01b      	beq.n	8008f9e <USB_DeactivateEndpoint+0xf6>
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	4413      	add	r3, r2
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f7c:	823b      	strh	r3, [r7, #16]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	009b      	lsls	r3, r3, #2
 8008f86:	441a      	add	r2, r3
 8008f88:	8a3b      	ldrh	r3, [r7, #16]
 8008f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f9e:	687a      	ldr	r2, [r7, #4]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	881b      	ldrh	r3, [r3, #0]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fb4:	81fb      	strh	r3, [r7, #14]
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	441a      	add	r2, r3
 8008fc0:	89fb      	ldrh	r3, [r7, #14]
 8008fc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	8013      	strh	r3, [r2, #0]
 8008fd6:	e14d      	b.n	8009274 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f040 80a5 	bne.w	800912c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	881b      	ldrh	r3, [r3, #0]
 8008fee:	843b      	strh	r3, [r7, #32]
 8008ff0:	8c3b      	ldrh	r3, [r7, #32]
 8008ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d01b      	beq.n	8009032 <USB_DeactivateEndpoint+0x18a>
 8008ffa:	687a      	ldr	r2, [r7, #4]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	b29b      	uxth	r3, r3
 8009008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800900c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009010:	83fb      	strh	r3, [r7, #30]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	441a      	add	r2, r3
 800901c:	8bfb      	ldrh	r3, [r7, #30]
 800901e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009026:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800902a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800902e:	b29b      	uxth	r3, r3
 8009030:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	83bb      	strh	r3, [r7, #28]
 8009040:	8bbb      	ldrh	r3, [r7, #28]
 8009042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01b      	beq.n	8009082 <USB_DeactivateEndpoint+0x1da>
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800905c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009060:	837b      	strh	r3, [r7, #26]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	441a      	add	r2, r3
 800906c:	8b7b      	ldrh	r3, [r7, #26]
 800906e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800907a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800907e:	b29b      	uxth	r3, r3
 8009080:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009098:	833b      	strh	r3, [r7, #24]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	441a      	add	r2, r3
 80090a4:	8b3b      	ldrh	r3, [r7, #24]
 80090a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d0:	82fb      	strh	r3, [r7, #22]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	8afb      	ldrh	r3, [r7, #22]
 80090de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009108:	82bb      	strh	r3, [r7, #20]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	441a      	add	r2, r3
 8009114:	8abb      	ldrh	r3, [r7, #20]
 8009116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800911e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009126:	b29b      	uxth	r3, r3
 8009128:	8013      	strh	r3, [r2, #0]
 800912a:	e0a3      	b.n	8009274 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800913a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800913c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01b      	beq.n	800917c <USB_DeactivateEndpoint+0x2d4>
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	4413      	add	r3, r2
 800914e:	881b      	ldrh	r3, [r3, #0]
 8009150:	b29b      	uxth	r3, r3
 8009152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800915a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800915c:	687a      	ldr	r2, [r7, #4]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	009b      	lsls	r3, r3, #2
 8009164:	441a      	add	r2, r3
 8009166:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800916c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009178:	b29b      	uxth	r3, r3
 800917a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	881b      	ldrh	r3, [r3, #0]
 8009188:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800918a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800918c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009190:	2b00      	cmp	r3, #0
 8009192:	d01b      	beq.n	80091cc <USB_DeactivateEndpoint+0x324>
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	009b      	lsls	r3, r3, #2
 800919c:	4413      	add	r3, r2
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091aa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	441a      	add	r2, r3
 80091b6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80091b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	441a      	add	r2, r3
 80091ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80091f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009200:	b29b      	uxth	r3, r3
 8009202:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	881b      	ldrh	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800921a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	441a      	add	r2, r3
 8009226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800922c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009238:	b29b      	uxth	r3, r3
 800923a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	b29b      	uxth	r3, r3
 800924a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800924e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009252:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	781b      	ldrb	r3, [r3, #0]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	441a      	add	r2, r3
 800925e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800926c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009270:	b29b      	uxth	r3, r3
 8009272:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3734      	adds	r7, #52	@ 0x34
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b0c2      	sub	sp, #264	@ 0x108
 8009286:	af00      	add	r7, sp, #0
 8009288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800928c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009290:	6018      	str	r0, [r3, #0]
 8009292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800929a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800929c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	785b      	ldrb	r3, [r3, #1]
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	f040 86b7 	bne.w	800a01c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80092ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	699a      	ldr	r2, [r3, #24]
 80092ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d908      	bls.n	80092dc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80092ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80092da:	e007      	b.n	80092ec <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80092dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80092ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	7b1b      	ldrb	r3, [r3, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d13a      	bne.n	8009372 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80092fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6959      	ldr	r1, [r3, #20]
 8009308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800930c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	88da      	ldrh	r2, [r3, #6]
 8009314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009318:	b29b      	uxth	r3, r3
 800931a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800931e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009322:	6800      	ldr	r0, [r0, #0]
 8009324:	f001 fc99 	bl	800ac5a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800932c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	613b      	str	r3, [r7, #16]
 8009334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009342:	b29b      	uxth	r3, r3
 8009344:	461a      	mov	r2, r3
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	4413      	add	r3, r2
 800934a:	613b      	str	r3, [r7, #16]
 800934c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	00da      	lsls	r2, r3, #3
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	4413      	add	r3, r2
 800935e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009368:	b29a      	uxth	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	801a      	strh	r2, [r3, #0]
 800936e:	f000 be1f 	b.w	8009fb0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	78db      	ldrb	r3, [r3, #3]
 800937e:	2b02      	cmp	r3, #2
 8009380:	f040 8462 	bne.w	8009c48 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	6a1a      	ldr	r2, [r3, #32]
 8009390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	429a      	cmp	r2, r3
 800939e:	f240 83df 	bls.w	8009b60 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80093a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	881b      	ldrh	r3, [r3, #0]
 80093be:	b29b      	uxth	r3, r3
 80093c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093c8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80093cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	441a      	add	r2, r3
 80093e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80093ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093f2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80093f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80093fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6a1a      	ldr	r2, [r3, #32]
 800940a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800940e:	1ad2      	subs	r2, r2, r3
 8009410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800941c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	b29b      	uxth	r3, r3
 800943a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 81c7 	beq.w	80097d2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	785b      	ldrb	r3, [r3, #1]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d177      	bne.n	8009550 <USB_EPStartXfer+0x2ce>
 8009460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800946c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800947a:	b29b      	uxth	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009480:	4413      	add	r3, r2
 8009482:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	00da      	lsls	r2, r3, #3
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	4413      	add	r3, r2
 8009496:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800949a:	627b      	str	r3, [r7, #36]	@ 0x24
 800949c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	b29b      	uxth	r3, r3
 80094a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094a6:	b29a      	uxth	r2, r3
 80094a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094aa:	801a      	strh	r2, [r3, #0]
 80094ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10a      	bne.n	80094ca <USB_EPStartXfer+0x248>
 80094b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b6:	881b      	ldrh	r3, [r3, #0]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	801a      	strh	r2, [r3, #0]
 80094c8:	e067      	b.n	800959a <USB_EPStartXfer+0x318>
 80094ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80094d0:	d81c      	bhi.n	800950c <USB_EPStartXfer+0x28a>
 80094d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d6:	085b      	lsrs	r3, r3, #1
 80094d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094e0:	f003 0301 	and.w	r3, r3, #1
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <USB_EPStartXfer+0x270>
 80094e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094ec:	3301      	adds	r3, #1
 80094ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80094f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f4:	881b      	ldrh	r3, [r3, #0]
 80094f6:	b29a      	uxth	r2, r3
 80094f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	029b      	lsls	r3, r3, #10
 8009500:	b29b      	uxth	r3, r3
 8009502:	4313      	orrs	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	801a      	strh	r2, [r3, #0]
 800950a:	e046      	b.n	800959a <USB_EPStartXfer+0x318>
 800950c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009510:	095b      	lsrs	r3, r3, #5
 8009512:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800951a:	f003 031f 	and.w	r3, r3, #31
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <USB_EPStartXfer+0x2aa>
 8009522:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009526:	3b01      	subs	r3, #1
 8009528:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	b29a      	uxth	r2, r3
 8009532:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009536:	b29b      	uxth	r3, r3
 8009538:	029b      	lsls	r3, r3, #10
 800953a:	b29b      	uxth	r3, r3
 800953c:	4313      	orrs	r3, r2
 800953e:	b29b      	uxth	r3, r3
 8009540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009548:	b29a      	uxth	r2, r3
 800954a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954c:	801a      	strh	r2, [r3, #0]
 800954e:	e024      	b.n	800959a <USB_EPStartXfer+0x318>
 8009550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	785b      	ldrb	r3, [r3, #1]
 800955c:	2b01      	cmp	r3, #1
 800955e:	d11c      	bne.n	800959a <USB_EPStartXfer+0x318>
 8009560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800956e:	b29b      	uxth	r3, r3
 8009570:	461a      	mov	r2, r3
 8009572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009574:	4413      	add	r3, r2
 8009576:	633b      	str	r3, [r7, #48]	@ 0x30
 8009578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800957c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	781b      	ldrb	r3, [r3, #0]
 8009584:	00da      	lsls	r2, r3, #3
 8009586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009588:	4413      	add	r3, r2
 800958a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800958e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009594:	b29a      	uxth	r2, r3
 8009596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009598:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800959a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800959e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	895b      	ldrh	r3, [r3, #10]
 80095a6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80095aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6959      	ldr	r1, [r3, #20]
 80095b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80095c0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80095c4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80095c8:	6800      	ldr	r0, [r0, #0]
 80095ca:	f001 fb46 	bl	800ac5a <USB_WritePMA>
            ep->xfer_buff += len;
 80095ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	695a      	ldr	r2, [r3, #20]
 80095da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095de:	441a      	add	r2, r3
 80095e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80095ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a1a      	ldr	r2, [r3, #32]
 80095f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	429a      	cmp	r2, r3
 8009606:	d90f      	bls.n	8009628 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800960c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6a1a      	ldr	r2, [r3, #32]
 8009614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009618:	1ad2      	subs	r2, r2, r3
 800961a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800961e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	621a      	str	r2, [r3, #32]
 8009626:	e00e      	b.n	8009646 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800962c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800963c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	2200      	movs	r2, #0
 8009644:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800964a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	785b      	ldrb	r3, [r3, #1]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d177      	bne.n	8009746 <USB_EPStartXfer+0x4c4>
 8009656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800965a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	61bb      	str	r3, [r7, #24]
 8009662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009670:	b29b      	uxth	r3, r3
 8009672:	461a      	mov	r2, r3
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	4413      	add	r3, r2
 8009678:	61bb      	str	r3, [r7, #24]
 800967a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800967e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	00da      	lsls	r2, r3, #3
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	4413      	add	r3, r2
 800968c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	881b      	ldrh	r3, [r3, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800969c:	b29a      	uxth	r2, r3
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <USB_EPStartXfer+0x43e>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	801a      	strh	r2, [r3, #0]
 80096be:	e06d      	b.n	800979c <USB_EPStartXfer+0x51a>
 80096c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c4:	2b3e      	cmp	r3, #62	@ 0x3e
 80096c6:	d81c      	bhi.n	8009702 <USB_EPStartXfer+0x480>
 80096c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096cc:	085b      	lsrs	r3, r3, #1
 80096ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d6:	f003 0301 	and.w	r3, r3, #1
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d004      	beq.n	80096e8 <USB_EPStartXfer+0x466>
 80096de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096e2:	3301      	adds	r3, #1
 80096e4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	029b      	lsls	r3, r3, #10
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	801a      	strh	r2, [r3, #0]
 8009700:	e04c      	b.n	800979c <USB_EPStartXfer+0x51a>
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009706:	095b      	lsrs	r3, r3, #5
 8009708:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800970c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009710:	f003 031f 	and.w	r3, r3, #31
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <USB_EPStartXfer+0x4a0>
 8009718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800971c:	3b01      	subs	r3, #1
 800971e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29a      	uxth	r2, r3
 8009728:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972c:	b29b      	uxth	r3, r3
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	b29b      	uxth	r3, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	b29b      	uxth	r3, r3
 8009736:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800973a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973e:	b29a      	uxth	r2, r3
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	801a      	strh	r2, [r3, #0]
 8009744:	e02a      	b.n	800979c <USB_EPStartXfer+0x51a>
 8009746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800974a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	785b      	ldrb	r3, [r3, #1]
 8009752:	2b01      	cmp	r3, #1
 8009754:	d122      	bne.n	800979c <USB_EPStartXfer+0x51a>
 8009756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800975a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	623b      	str	r3, [r7, #32]
 8009762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009770:	b29b      	uxth	r3, r3
 8009772:	461a      	mov	r2, r3
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	4413      	add	r3, r2
 8009778:	623b      	str	r3, [r7, #32]
 800977a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	00da      	lsls	r2, r3, #3
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	4413      	add	r3, r2
 800978c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009790:	61fb      	str	r3, [r7, #28]
 8009792:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009796:	b29a      	uxth	r2, r3
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800979c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	891b      	ldrh	r3, [r3, #8]
 80097a8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80097ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6959      	ldr	r1, [r3, #20]
 80097b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097bc:	b29b      	uxth	r3, r3
 80097be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80097c2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80097c6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80097ca:	6800      	ldr	r0, [r0, #0]
 80097cc:	f001 fa45 	bl	800ac5a <USB_WritePMA>
 80097d0:	e3ee      	b.n	8009fb0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80097d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	785b      	ldrb	r3, [r3, #1]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d177      	bne.n	80098d2 <USB_EPStartXfer+0x650>
 80097e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	461a      	mov	r2, r3
 8009800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009802:	4413      	add	r3, r2
 8009804:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800980a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	00da      	lsls	r2, r3, #3
 8009814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009816:	4413      	add	r3, r2
 8009818:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800981c:	647b      	str	r3, [r7, #68]	@ 0x44
 800981e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009820:	881b      	ldrh	r3, [r3, #0]
 8009822:	b29b      	uxth	r3, r3
 8009824:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009828:	b29a      	uxth	r2, r3
 800982a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800982c:	801a      	strh	r2, [r3, #0]
 800982e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10a      	bne.n	800984c <USB_EPStartXfer+0x5ca>
 8009836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009838:	881b      	ldrh	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009840:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009844:	b29a      	uxth	r2, r3
 8009846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009848:	801a      	strh	r2, [r3, #0]
 800984a:	e06d      	b.n	8009928 <USB_EPStartXfer+0x6a6>
 800984c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009850:	2b3e      	cmp	r3, #62	@ 0x3e
 8009852:	d81c      	bhi.n	800988e <USB_EPStartXfer+0x60c>
 8009854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800985e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d004      	beq.n	8009874 <USB_EPStartXfer+0x5f2>
 800986a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800986e:	3301      	adds	r3, #1
 8009870:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	b29a      	uxth	r2, r3
 800987a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800987e:	b29b      	uxth	r3, r3
 8009880:	029b      	lsls	r3, r3, #10
 8009882:	b29b      	uxth	r3, r3
 8009884:	4313      	orrs	r3, r2
 8009886:	b29a      	uxth	r2, r3
 8009888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800988a:	801a      	strh	r2, [r3, #0]
 800988c:	e04c      	b.n	8009928 <USB_EPStartXfer+0x6a6>
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009892:	095b      	lsrs	r3, r3, #5
 8009894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800989c:	f003 031f 	and.w	r3, r3, #31
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d104      	bne.n	80098ae <USB_EPStartXfer+0x62c>
 80098a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098a8:	3b01      	subs	r3, #1
 80098aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29a      	uxth	r2, r3
 80098b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	029b      	lsls	r3, r3, #10
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4313      	orrs	r3, r2
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098ce:	801a      	strh	r2, [r3, #0]
 80098d0:	e02a      	b.n	8009928 <USB_EPStartXfer+0x6a6>
 80098d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	785b      	ldrb	r3, [r3, #1]
 80098de:	2b01      	cmp	r3, #1
 80098e0:	d122      	bne.n	8009928 <USB_EPStartXfer+0x6a6>
 80098e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80098ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009902:	4413      	add	r3, r2
 8009904:	653b      	str	r3, [r7, #80]	@ 0x50
 8009906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800990a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	00da      	lsls	r2, r3, #3
 8009914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009916:	4413      	add	r3, r2
 8009918:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800991c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800991e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009922:	b29a      	uxth	r2, r3
 8009924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009926:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	891b      	ldrh	r3, [r3, #8]
 8009934:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6959      	ldr	r1, [r3, #20]
 8009944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009948:	b29b      	uxth	r3, r3
 800994a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800994e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009952:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009956:	6800      	ldr	r0, [r0, #0]
 8009958:	f001 f97f 	bl	800ac5a <USB_WritePMA>
            ep->xfer_buff += len;
 800995c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	695a      	ldr	r2, [r3, #20]
 8009968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996c:	441a      	add	r2, r3
 800996e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800997a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800997e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a1a      	ldr	r2, [r3, #32]
 8009986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	429a      	cmp	r2, r3
 8009994:	d90f      	bls.n	80099b6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800999a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6a1a      	ldr	r2, [r3, #32]
 80099a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a6:	1ad2      	subs	r2, r2, r3
 80099a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	621a      	str	r2, [r3, #32]
 80099b4:	e00e      	b.n	80099d4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80099b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80099c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2200      	movs	r2, #0
 80099d2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80099d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	643b      	str	r3, [r7, #64]	@ 0x40
 80099e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	785b      	ldrb	r3, [r3, #1]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d177      	bne.n	8009ae0 <USB_EPStartXfer+0x85e>
 80099f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80099fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a10:	4413      	add	r3, r2
 8009a12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	00da      	lsls	r2, r3, #3
 8009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a24:	4413      	add	r3, r2
 8009a26:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a2e:	881b      	ldrh	r3, [r3, #0]
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a36:	b29a      	uxth	r2, r3
 8009a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a3a:	801a      	strh	r2, [r3, #0]
 8009a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <USB_EPStartXfer+0x7d8>
 8009a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a46:	881b      	ldrh	r3, [r3, #0]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a56:	801a      	strh	r2, [r3, #0]
 8009a58:	e067      	b.n	8009b2a <USB_EPStartXfer+0x8a8>
 8009a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a60:	d81c      	bhi.n	8009a9c <USB_EPStartXfer+0x81a>
 8009a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a66:	085b      	lsrs	r3, r3, #1
 8009a68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a70:	f003 0301 	and.w	r3, r3, #1
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d004      	beq.n	8009a82 <USB_EPStartXfer+0x800>
 8009a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a84:	881b      	ldrh	r3, [r3, #0]
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	029b      	lsls	r3, r3, #10
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	4313      	orrs	r3, r2
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a98:	801a      	strh	r2, [r3, #0]
 8009a9a:	e046      	b.n	8009b2a <USB_EPStartXfer+0x8a8>
 8009a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa0:	095b      	lsrs	r3, r3, #5
 8009aa2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aaa:	f003 031f 	and.w	r3, r3, #31
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d104      	bne.n	8009abc <USB_EPStartXfer+0x83a>
 8009ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009abe:	881b      	ldrh	r3, [r3, #0]
 8009ac0:	b29a      	uxth	r2, r3
 8009ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	029b      	lsls	r3, r3, #10
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	4313      	orrs	r3, r2
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009adc:	801a      	strh	r2, [r3, #0]
 8009ade:	e024      	b.n	8009b2a <USB_EPStartXfer+0x8a8>
 8009ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	785b      	ldrb	r3, [r3, #1]
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d11c      	bne.n	8009b2a <USB_EPStartXfer+0x8a8>
 8009af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	461a      	mov	r2, r3
 8009b02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b04:	4413      	add	r3, r2
 8009b06:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	00da      	lsls	r2, r3, #3
 8009b16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b18:	4413      	add	r3, r2
 8009b1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b28:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	895b      	ldrh	r3, [r3, #10]
 8009b36:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6959      	ldr	r1, [r3, #20]
 8009b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b50:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009b54:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009b58:	6800      	ldr	r0, [r0, #0]
 8009b5a:	f001 f87e 	bl	800ac5a <USB_WritePMA>
 8009b5e:	e227      	b.n	8009fb0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	881b      	ldrh	r3, [r3, #0]
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b96:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009b9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b9e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	441a      	add	r2, r3
 8009bb4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009bb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009bcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009be6:	b29b      	uxth	r3, r3
 8009be8:	461a      	mov	r2, r3
 8009bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bec:	4413      	add	r3, r2
 8009bee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	00da      	lsls	r2, r3, #3
 8009bfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c00:	4413      	add	r3, r2
 8009c02:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	891b      	ldrh	r3, [r3, #8]
 8009c1e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6959      	ldr	r1, [r3, #20]
 8009c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c38:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c3c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c40:	6800      	ldr	r0, [r0, #0]
 8009c42:	f001 f80a 	bl	800ac5a <USB_WritePMA>
 8009c46:	e1b3      	b.n	8009fb0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009c48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6a1a      	ldr	r2, [r3, #32]
 8009c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c58:	1ad2      	subs	r2, r2, r3
 8009c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 80c6 	beq.w	8009e1a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	785b      	ldrb	r3, [r3, #1]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d177      	bne.n	8009d9a <USB_EPStartXfer+0xb18>
 8009caa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cca:	4413      	add	r3, r2
 8009ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	00da      	lsls	r2, r3, #3
 8009cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009cde:	4413      	add	r3, r2
 8009ce0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ce4:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ce6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009ce8:	881b      	ldrh	r3, [r3, #0]
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cf4:	801a      	strh	r2, [r3, #0]
 8009cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10a      	bne.n	8009d14 <USB_EPStartXfer+0xa92>
 8009cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	e067      	b.n	8009de4 <USB_EPStartXfer+0xb62>
 8009d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d18:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d1a:	d81c      	bhi.n	8009d56 <USB_EPStartXfer+0xad4>
 8009d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d20:	085b      	lsrs	r3, r3, #1
 8009d22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2a:	f003 0301 	and.w	r3, r3, #1
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d004      	beq.n	8009d3c <USB_EPStartXfer+0xaba>
 8009d32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d36:	3301      	adds	r3, #1
 8009d38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d3e:	881b      	ldrh	r3, [r3, #0]
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	029b      	lsls	r3, r3, #10
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	b29a      	uxth	r2, r3
 8009d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d52:	801a      	strh	r2, [r3, #0]
 8009d54:	e046      	b.n	8009de4 <USB_EPStartXfer+0xb62>
 8009d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d5a:	095b      	lsrs	r3, r3, #5
 8009d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d64:	f003 031f 	and.w	r3, r3, #31
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d104      	bne.n	8009d76 <USB_EPStartXfer+0xaf4>
 8009d6c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d70:	3b01      	subs	r3, #1
 8009d72:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d78:	881b      	ldrh	r3, [r3, #0]
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	029b      	lsls	r3, r3, #10
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4313      	orrs	r3, r2
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d96:	801a      	strh	r2, [r3, #0]
 8009d98:	e024      	b.n	8009de4 <USB_EPStartXfer+0xb62>
 8009d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	785b      	ldrb	r3, [r3, #1]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d11c      	bne.n	8009de4 <USB_EPStartXfer+0xb62>
 8009daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	461a      	mov	r2, r3
 8009dbc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dbe:	4413      	add	r3, r2
 8009dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009dc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	00da      	lsls	r2, r3, #3
 8009dd0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009dd8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009de2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009de8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	895b      	ldrh	r3, [r3, #10]
 8009df0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009df8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6959      	ldr	r1, [r3, #20]
 8009e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e12:	6800      	ldr	r0, [r0, #0]
 8009e14:	f000 ff21 	bl	800ac5a <USB_WritePMA>
 8009e18:	e0ca      	b.n	8009fb0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	785b      	ldrb	r3, [r3, #1]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d177      	bne.n	8009f1a <USB_EPStartXfer+0xc98>
 8009e2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	461a      	mov	r2, r3
 8009e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e4a:	4413      	add	r3, r2
 8009e4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	00da      	lsls	r2, r3, #3
 8009e5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e5e:	4413      	add	r3, r2
 8009e60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e68:	881b      	ldrh	r3, [r3, #0]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e74:	801a      	strh	r2, [r3, #0]
 8009e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <USB_EPStartXfer+0xc12>
 8009e7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e80:	881b      	ldrh	r3, [r3, #0]
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e90:	801a      	strh	r2, [r3, #0]
 8009e92:	e073      	b.n	8009f7c <USB_EPStartXfer+0xcfa>
 8009e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e98:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e9a:	d81c      	bhi.n	8009ed6 <USB_EPStartXfer+0xc54>
 8009e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ea0:	085b      	lsrs	r3, r3, #1
 8009ea2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eaa:	f003 0301 	and.w	r3, r3, #1
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d004      	beq.n	8009ebc <USB_EPStartXfer+0xc3a>
 8009eb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ebc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	029b      	lsls	r3, r3, #10
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ed2:	801a      	strh	r2, [r3, #0]
 8009ed4:	e052      	b.n	8009f7c <USB_EPStartXfer+0xcfa>
 8009ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eda:	095b      	lsrs	r3, r3, #5
 8009edc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee4:	f003 031f 	and.w	r3, r3, #31
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d104      	bne.n	8009ef6 <USB_EPStartXfer+0xc74>
 8009eec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	029b      	lsls	r3, r3, #10
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	b29b      	uxth	r3, r3
 8009f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f16:	801a      	strh	r2, [r3, #0]
 8009f18:	e030      	b.n	8009f7c <USB_EPStartXfer+0xcfa>
 8009f1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	785b      	ldrb	r3, [r3, #1]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d128      	bne.n	8009f7c <USB_EPStartXfer+0xcfa>
 8009f2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	461a      	mov	r2, r3
 8009f4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f4e:	4413      	add	r3, r2
 8009f50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009f54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	00da      	lsls	r2, r3, #3
 8009f62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009f66:	4413      	add	r3, r2
 8009f68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009f7a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	891b      	ldrh	r3, [r3, #8]
 8009f88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	6959      	ldr	r1, [r3, #20]
 8009f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009fa2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009fa6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009faa:	6800      	ldr	r0, [r0, #0]
 8009fac:	f000 fe55 	bl	800ac5a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	881b      	ldrh	r3, [r3, #0]
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fd6:	817b      	strh	r3, [r7, #10]
 8009fd8:	897b      	ldrh	r3, [r7, #10]
 8009fda:	f083 0310 	eor.w	r3, r3, #16
 8009fde:	817b      	strh	r3, [r7, #10]
 8009fe0:	897b      	ldrh	r3, [r7, #10]
 8009fe2:	f083 0320 	eor.w	r3, r3, #32
 8009fe6:	817b      	strh	r3, [r7, #10]
 8009fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	441a      	add	r2, r3
 800a002:	897b      	ldrh	r3, [r7, #10]
 800a004:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a008:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a00c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a014:	b29b      	uxth	r3, r3
 800a016:	8013      	strh	r3, [r2, #0]
 800a018:	f000 bcdf 	b.w	800a9da <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a01c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	7b1b      	ldrb	r3, [r3, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f040 80bc 	bne.w	800a1a6 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	699a      	ldr	r2, [r3, #24]
 800a03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	429a      	cmp	r2, r3
 800a048:	d917      	bls.n	800a07a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	691b      	ldr	r3, [r3, #16]
 800a056:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699a      	ldr	r2, [r3, #24]
 800a066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a06a:	1ad2      	subs	r2, r2, r3
 800a06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	619a      	str	r2, [r3, #24]
 800a078:	e00e      	b.n	800a098 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a07a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a07e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a08a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a08e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2200      	movs	r2, #0
 800a096:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a09c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0bc:	4413      	add	r3, r2
 800a0be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a0c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	00da      	lsls	r2, r3, #3
 800a0d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a0d4:	4413      	add	r3, r2
 800a0d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a0da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a0de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0e2:	881b      	ldrh	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0f0:	801a      	strh	r2, [r3, #0]
 800a0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10d      	bne.n	800a116 <USB_EPStartXfer+0xe94>
 800a0fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	b29b      	uxth	r3, r3
 800a102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a110:	801a      	strh	r2, [r3, #0]
 800a112:	f000 bc28 	b.w	800a966 <USB_EPStartXfer+0x16e4>
 800a116:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a11a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a11c:	d81f      	bhi.n	800a15e <USB_EPStartXfer+0xedc>
 800a11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a122:	085b      	lsrs	r3, r3, #1
 800a124:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	d004      	beq.n	800a13e <USB_EPStartXfer+0xebc>
 800a134:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a138:	3301      	adds	r3, #1
 800a13a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a13e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	b29a      	uxth	r2, r3
 800a146:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	029b      	lsls	r3, r3, #10
 800a14e:	b29b      	uxth	r3, r3
 800a150:	4313      	orrs	r3, r2
 800a152:	b29a      	uxth	r2, r3
 800a154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a158:	801a      	strh	r2, [r3, #0]
 800a15a:	f000 bc04 	b.w	800a966 <USB_EPStartXfer+0x16e4>
 800a15e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a162:	095b      	lsrs	r3, r3, #5
 800a164:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a16c:	f003 031f 	and.w	r3, r3, #31
 800a170:	2b00      	cmp	r3, #0
 800a172:	d104      	bne.n	800a17e <USB_EPStartXfer+0xefc>
 800a174:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a178:	3b01      	subs	r3, #1
 800a17a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a17e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	b29a      	uxth	r2, r3
 800a186:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	029b      	lsls	r3, r3, #10
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4313      	orrs	r3, r2
 800a192:	b29b      	uxth	r3, r3
 800a194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1a2:	801a      	strh	r2, [r3, #0]
 800a1a4:	e3df      	b.n	800a966 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	78db      	ldrb	r3, [r3, #3]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	f040 8218 	bne.w	800a5e8 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a1b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	785b      	ldrb	r3, [r3, #1]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f040 809d 	bne.w	800a304 <USB_EPStartXfer+0x1082>
 800a1ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	00da      	lsls	r2, r3, #3
 800a202:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a206:	4413      	add	r3, r2
 800a208:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a20c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a214:	881b      	ldrh	r3, [r3, #0]
 800a216:	b29b      	uxth	r3, r3
 800a218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a222:	801a      	strh	r2, [r3, #0]
 800a224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	2b00      	cmp	r3, #0
 800a232:	d10c      	bne.n	800a24e <USB_EPStartXfer+0xfcc>
 800a234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a238:	881b      	ldrh	r3, [r3, #0]
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a244:	b29a      	uxth	r2, r3
 800a246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a24a:	801a      	strh	r2, [r3, #0]
 800a24c:	e08f      	b.n	800a36e <USB_EPStartXfer+0x10ec>
 800a24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a252:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a25c:	d826      	bhi.n	800a2ac <USB_EPStartXfer+0x102a>
 800a25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a262:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	085b      	lsrs	r3, r3, #1
 800a26c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	f003 0301 	and.w	r3, r3, #1
 800a280:	2b00      	cmp	r3, #0
 800a282:	d004      	beq.n	800a28e <USB_EPStartXfer+0x100c>
 800a284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a288:	3301      	adds	r3, #1
 800a28a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a28e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a292:	881b      	ldrh	r3, [r3, #0]
 800a294:	b29a      	uxth	r2, r3
 800a296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	029b      	lsls	r3, r3, #10
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2a8:	801a      	strh	r2, [r3, #0]
 800a2aa:	e060      	b.n	800a36e <USB_EPStartXfer+0x10ec>
 800a2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	095b      	lsrs	r3, r3, #5
 800a2ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	f003 031f 	and.w	r3, r3, #31
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d104      	bne.n	800a2dc <USB_EPStartXfer+0x105a>
 800a2d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2e0:	881b      	ldrh	r3, [r3, #0]
 800a2e2:	b29a      	uxth	r2, r3
 800a2e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	029b      	lsls	r3, r3, #10
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2fa:	b29a      	uxth	r2, r3
 800a2fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a300:	801a      	strh	r2, [r3, #0]
 800a302:	e034      	b.n	800a36e <USB_EPStartXfer+0x10ec>
 800a304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	785b      	ldrb	r3, [r3, #1]
 800a310:	2b01      	cmp	r3, #1
 800a312:	d12c      	bne.n	800a36e <USB_EPStartXfer+0x10ec>
 800a314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a330:	b29b      	uxth	r3, r3
 800a332:	461a      	mov	r2, r3
 800a334:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a338:	4413      	add	r3, r2
 800a33a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	00da      	lsls	r2, r3, #3
 800a34c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a350:	4413      	add	r3, r2
 800a352:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a35e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	b29a      	uxth	r2, r3
 800a368:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a36c:	801a      	strh	r2, [r3, #0]
 800a36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a37c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	785b      	ldrb	r3, [r3, #1]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f040 809d 	bne.w	800a4c8 <USB_EPStartXfer+0x1246>
 800a38e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a39c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	00da      	lsls	r2, r3, #3
 800a3c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a3ca:	4413      	add	r3, r2
 800a3cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a3d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a3d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3d8:	881b      	ldrh	r3, [r3, #0]
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3e6:	801a      	strh	r2, [r3, #0]
 800a3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	691b      	ldr	r3, [r3, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d10c      	bne.n	800a412 <USB_EPStartXfer+0x1190>
 800a3f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3fc:	881b      	ldrh	r3, [r3, #0]
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a408:	b29a      	uxth	r2, r3
 800a40a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a40e:	801a      	strh	r2, [r3, #0]
 800a410:	e088      	b.n	800a524 <USB_EPStartXfer+0x12a2>
 800a412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a420:	d826      	bhi.n	800a470 <USB_EPStartXfer+0x11ee>
 800a422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	085b      	lsrs	r3, r3, #1
 800a430:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	691b      	ldr	r3, [r3, #16]
 800a440:	f003 0301 	and.w	r3, r3, #1
 800a444:	2b00      	cmp	r3, #0
 800a446:	d004      	beq.n	800a452 <USB_EPStartXfer+0x11d0>
 800a448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a44c:	3301      	adds	r3, #1
 800a44e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a452:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a456:	881b      	ldrh	r3, [r3, #0]
 800a458:	b29a      	uxth	r2, r3
 800a45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a45e:	b29b      	uxth	r3, r3
 800a460:	029b      	lsls	r3, r3, #10
 800a462:	b29b      	uxth	r3, r3
 800a464:	4313      	orrs	r3, r2
 800a466:	b29a      	uxth	r2, r3
 800a468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a46c:	801a      	strh	r2, [r3, #0]
 800a46e:	e059      	b.n	800a524 <USB_EPStartXfer+0x12a2>
 800a470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	691b      	ldr	r3, [r3, #16]
 800a47c:	095b      	lsrs	r3, r3, #5
 800a47e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	f003 031f 	and.w	r3, r3, #31
 800a492:	2b00      	cmp	r3, #0
 800a494:	d104      	bne.n	800a4a0 <USB_EPStartXfer+0x121e>
 800a496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a49a:	3b01      	subs	r3, #1
 800a49c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4a4:	881b      	ldrh	r3, [r3, #0]
 800a4a6:	b29a      	uxth	r2, r3
 800a4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	029b      	lsls	r3, r3, #10
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4c4:	801a      	strh	r2, [r3, #0]
 800a4c6:	e02d      	b.n	800a524 <USB_EPStartXfer+0x12a2>
 800a4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	785b      	ldrb	r3, [r3, #1]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d125      	bne.n	800a524 <USB_EPStartXfer+0x12a2>
 800a4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	00da      	lsls	r2, r3, #3
 800a502:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a506:	4413      	add	r3, r2
 800a508:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a50c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a522:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a528:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	f000 8218 	beq.w	800a966 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a53a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	4413      	add	r3, r2
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a556:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a55a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d005      	beq.n	800a56e <USB_EPStartXfer+0x12ec>
 800a562:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10d      	bne.n	800a58a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a56e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a576:	2b00      	cmp	r3, #0
 800a578:	f040 81f5 	bne.w	800a966 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a57c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a584:	2b00      	cmp	r3, #0
 800a586:	f040 81ee 	bne.w	800a966 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a58a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a58e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	881b      	ldrh	r3, [r3, #0]
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5b0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a5b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	441a      	add	r2, r3
 800a5ce:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a5d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5de:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	8013      	strh	r3, [r2, #0]
 800a5e6:	e1be      	b.n	800a966 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	78db      	ldrb	r3, [r3, #3]
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	f040 81b4 	bne.w	800a962 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	699a      	ldr	r2, [r3, #24]
 800a606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a60a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	429a      	cmp	r2, r3
 800a614:	d917      	bls.n	800a646 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a62a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	699a      	ldr	r2, [r3, #24]
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a636:	1ad2      	subs	r2, r2, r3
 800a638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	619a      	str	r2, [r3, #24]
 800a644:	e00e      	b.n	800a664 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a64a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2200      	movs	r2, #0
 800a662:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	785b      	ldrb	r3, [r3, #1]
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 8085 	bne.w	800a780 <USB_EPStartXfer+0x14fe>
 800a676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a67a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a692:	b29b      	uxth	r3, r3
 800a694:	461a      	mov	r2, r3
 800a696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a69a:	4413      	add	r3, r2
 800a69c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	00da      	lsls	r2, r3, #3
 800a6ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a6bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6ce:	801a      	strh	r2, [r3, #0]
 800a6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10c      	bne.n	800a6f2 <USB_EPStartXfer+0x1470>
 800a6d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6ee:	801a      	strh	r2, [r3, #0]
 800a6f0:	e077      	b.n	800a7e2 <USB_EPStartXfer+0x1560>
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6f8:	d81e      	bhi.n	800a738 <USB_EPStartXfer+0x14b6>
 800a6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6fe:	085b      	lsrs	r3, r3, #1
 800a700:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a708:	f003 0301 	and.w	r3, r3, #1
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d004      	beq.n	800a71a <USB_EPStartXfer+0x1498>
 800a710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a714:	3301      	adds	r3, #1
 800a716:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a71a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a71e:	881b      	ldrh	r3, [r3, #0]
 800a720:	b29a      	uxth	r2, r3
 800a722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a726:	b29b      	uxth	r3, r3
 800a728:	029b      	lsls	r3, r3, #10
 800a72a:	b29b      	uxth	r3, r3
 800a72c:	4313      	orrs	r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a734:	801a      	strh	r2, [r3, #0]
 800a736:	e054      	b.n	800a7e2 <USB_EPStartXfer+0x1560>
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a73c:	095b      	lsrs	r3, r3, #5
 800a73e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a746:	f003 031f 	and.w	r3, r3, #31
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d104      	bne.n	800a758 <USB_EPStartXfer+0x14d6>
 800a74e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a752:	3b01      	subs	r3, #1
 800a754:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a758:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a75c:	881b      	ldrh	r3, [r3, #0]
 800a75e:	b29a      	uxth	r2, r3
 800a760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a764:	b29b      	uxth	r3, r3
 800a766:	029b      	lsls	r3, r3, #10
 800a768:	b29b      	uxth	r3, r3
 800a76a:	4313      	orrs	r3, r2
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a776:	b29a      	uxth	r2, r3
 800a778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a77c:	801a      	strh	r2, [r3, #0]
 800a77e:	e030      	b.n	800a7e2 <USB_EPStartXfer+0x1560>
 800a780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	785b      	ldrb	r3, [r3, #1]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d128      	bne.n	800a7e2 <USB_EPStartXfer+0x1560>
 800a790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a794:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a79e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	00da      	lsls	r2, r3, #3
 800a7c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a7e0:	801a      	strh	r2, [r3, #0]
 800a7e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a7f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	785b      	ldrb	r3, [r3, #1]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	f040 8085 	bne.w	800a90c <USB_EPStartXfer+0x168a>
 800a802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a814:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a81e:	b29b      	uxth	r3, r3
 800a820:	461a      	mov	r2, r3
 800a822:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a826:	4413      	add	r3, r2
 800a828:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a82c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	00da      	lsls	r2, r3, #3
 800a83a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a83e:	4413      	add	r3, r2
 800a840:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a844:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a848:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	b29b      	uxth	r3, r3
 800a850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a854:	b29a      	uxth	r2, r3
 800a856:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a860:	2b00      	cmp	r3, #0
 800a862:	d10c      	bne.n	800a87e <USB_EPStartXfer+0x15fc>
 800a864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a874:	b29a      	uxth	r2, r3
 800a876:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a87a:	801a      	strh	r2, [r3, #0]
 800a87c:	e073      	b.n	800a966 <USB_EPStartXfer+0x16e4>
 800a87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a882:	2b3e      	cmp	r3, #62	@ 0x3e
 800a884:	d81e      	bhi.n	800a8c4 <USB_EPStartXfer+0x1642>
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a88a:	085b      	lsrs	r3, r3, #1
 800a88c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d004      	beq.n	800a8a6 <USB_EPStartXfer+0x1624>
 800a89c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	029b      	lsls	r3, r3, #10
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8c0:	801a      	strh	r2, [r3, #0]
 800a8c2:	e050      	b.n	800a966 <USB_EPStartXfer+0x16e4>
 800a8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c8:	095b      	lsrs	r3, r3, #5
 800a8ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d2:	f003 031f 	and.w	r3, r3, #31
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d104      	bne.n	800a8e4 <USB_EPStartXfer+0x1662>
 800a8da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a8e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	029b      	lsls	r3, r3, #10
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a902:	b29a      	uxth	r2, r3
 800a904:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a908:	801a      	strh	r2, [r3, #0]
 800a90a:	e02c      	b.n	800a966 <USB_EPStartXfer+0x16e4>
 800a90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	785b      	ldrb	r3, [r3, #1]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d124      	bne.n	800a966 <USB_EPStartXfer+0x16e4>
 800a91c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	461a      	mov	r2, r3
 800a92e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a932:	4413      	add	r3, r2
 800a934:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a93c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	00da      	lsls	r2, r3, #3
 800a946:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a94a:	4413      	add	r3, r2
 800a94c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a958:	b29a      	uxth	r2, r3
 800a95a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a95e:	801a      	strh	r2, [r3, #0]
 800a960:	e001      	b.n	800a966 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a962:	2301      	movs	r3, #1
 800a964:	e03a      	b.n	800a9dc <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	b29b      	uxth	r3, r3
 800a984:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a98c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a990:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a994:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a998:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a99c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a9a4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a9a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	441a      	add	r2, r3
 800a9c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a9c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9e6:	b480      	push	{r7}
 800a9e8:	b085      	sub	sp, #20
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	6078      	str	r0, [r7, #4]
 800a9ee:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d020      	beq.n	800aa3a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa0e:	81bb      	strh	r3, [r7, #12]
 800aa10:	89bb      	ldrh	r3, [r7, #12]
 800aa12:	f083 0310 	eor.w	r3, r3, #16
 800aa16:	81bb      	strh	r3, [r7, #12]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	781b      	ldrb	r3, [r3, #0]
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	441a      	add	r2, r3
 800aa22:	89bb      	ldrh	r3, [r7, #12]
 800aa24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	8013      	strh	r3, [r2, #0]
 800aa38:	e01f      	b.n	800aa7a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa50:	81fb      	strh	r3, [r7, #14]
 800aa52:	89fb      	ldrh	r3, [r7, #14]
 800aa54:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa58:	81fb      	strh	r3, [r7, #14]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	441a      	add	r2, r3
 800aa64:	89fb      	ldrh	r3, [r7, #14]
 800aa66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa76:	b29b      	uxth	r3, r3
 800aa78:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa7a:	2300      	movs	r3, #0
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3714      	adds	r7, #20
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
 800aa90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	7b1b      	ldrb	r3, [r3, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	f040 809d 	bne.w	800abd6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	785b      	ldrb	r3, [r3, #1]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d04c      	beq.n	800ab3e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaa4:	687a      	ldr	r2, [r7, #4]
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	4413      	add	r3, r2
 800aaae:	881b      	ldrh	r3, [r3, #0]
 800aab0:	823b      	strh	r3, [r7, #16]
 800aab2:	8a3b      	ldrh	r3, [r7, #16]
 800aab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d01b      	beq.n	800aaf4 <USB_EPClearStall+0x6c>
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	009b      	lsls	r3, r3, #2
 800aac4:	4413      	add	r3, r2
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aad2:	81fb      	strh	r3, [r7, #14]
 800aad4:	687a      	ldr	r2, [r7, #4]
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	441a      	add	r2, r3
 800aade:	89fb      	ldrh	r3, [r7, #14]
 800aae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	78db      	ldrb	r3, [r3, #3]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d06c      	beq.n	800abd6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab12:	81bb      	strh	r3, [r7, #12]
 800ab14:	89bb      	ldrh	r3, [r7, #12]
 800ab16:	f083 0320 	eor.w	r3, r3, #32
 800ab1a:	81bb      	strh	r3, [r7, #12]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	441a      	add	r2, r3
 800ab26:	89bb      	ldrh	r3, [r7, #12]
 800ab28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	8013      	strh	r3, [r2, #0]
 800ab3c:	e04b      	b.n	800abd6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	881b      	ldrh	r3, [r3, #0]
 800ab4a:	82fb      	strh	r3, [r7, #22]
 800ab4c:	8afb      	ldrh	r3, [r7, #22]
 800ab4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01b      	beq.n	800ab8e <USB_EPClearStall+0x106>
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab6c:	82bb      	strh	r3, [r7, #20]
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	441a      	add	r2, r3
 800ab78:	8abb      	ldrh	r3, [r7, #20]
 800ab7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aba4:	827b      	strh	r3, [r7, #18]
 800aba6:	8a7b      	ldrh	r3, [r7, #18]
 800aba8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800abac:	827b      	strh	r3, [r7, #18]
 800abae:	8a7b      	ldrh	r3, [r7, #18]
 800abb0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800abb4:	827b      	strh	r3, [r7, #18]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	441a      	add	r2, r3
 800abc0:	8a7b      	ldrh	r3, [r7, #18]
 800abc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	371c      	adds	r7, #28
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800abf0:	78fb      	ldrb	r3, [r7, #3]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d103      	bne.n	800abfe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2280      	movs	r2, #128	@ 0x80
 800abfa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac24:	b29a      	uxth	r2, r3
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b08b      	sub	sp, #44	@ 0x2c
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	60f8      	str	r0, [r7, #12]
 800ac62:	60b9      	str	r1, [r7, #8]
 800ac64:	4611      	mov	r1, r2
 800ac66:	461a      	mov	r2, r3
 800ac68:	460b      	mov	r3, r1
 800ac6a:	80fb      	strh	r3, [r7, #6]
 800ac6c:	4613      	mov	r3, r2
 800ac6e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac70:	88bb      	ldrh	r3, [r7, #4]
 800ac72:	3301      	adds	r3, #1
 800ac74:	085b      	lsrs	r3, r3, #1
 800ac76:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac80:	88fa      	ldrh	r2, [r7, #6]
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac8a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac90:	e01b      	b.n	800acca <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	781b      	ldrb	r3, [r3, #0]
 800ac96:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	021b      	lsls	r3, r3, #8
 800aca0:	b21a      	sxth	r2, r3
 800aca2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aca6:	4313      	orrs	r3, r2
 800aca8:	b21b      	sxth	r3, r3
 800acaa:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800acac:	6a3b      	ldr	r3, [r7, #32]
 800acae:	8a7a      	ldrh	r2, [r7, #18]
 800acb0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	3302      	adds	r3, #2
 800acb6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	3301      	adds	r3, #1
 800acbc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	3301      	adds	r3, #1
 800acc2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800acc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc6:	3b01      	subs	r3, #1
 800acc8:	627b      	str	r3, [r7, #36]	@ 0x24
 800acca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800accc:	2b00      	cmp	r3, #0
 800acce:	d1e0      	bne.n	800ac92 <USB_WritePMA+0x38>
  }
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	372c      	adds	r7, #44	@ 0x2c
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800acde:	b480      	push	{r7}
 800ace0:	b08b      	sub	sp, #44	@ 0x2c
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	4611      	mov	r1, r2
 800acea:	461a      	mov	r2, r3
 800acec:	460b      	mov	r3, r1
 800acee:	80fb      	strh	r3, [r7, #6]
 800acf0:	4613      	mov	r3, r2
 800acf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800acf4:	88bb      	ldrh	r3, [r7, #4]
 800acf6:	085b      	lsrs	r3, r3, #1
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad04:	88fa      	ldrh	r2, [r7, #6]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad14:	e018      	b.n	800ad48 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ad16:	6a3b      	ldr	r3, [r7, #32]
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	3302      	adds	r3, #2
 800ad22:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	0a1b      	lsrs	r3, r3, #8
 800ad36:	b2da      	uxtb	r2, r3
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	3b01      	subs	r3, #1
 800ad46:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e3      	bne.n	800ad16 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ad4e:	88bb      	ldrh	r3, [r7, #4]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d007      	beq.n	800ad6a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ad5a:	6a3b      	ldr	r3, [r7, #32]
 800ad5c:	881b      	ldrh	r3, [r3, #0]
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	b2da      	uxtb	r2, r3
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	701a      	strb	r2, [r3, #0]
  }
}
 800ad6a:	bf00      	nop
 800ad6c:	372c      	adds	r7, #44	@ 0x2c
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad74:	4770      	bx	lr

0800ad76 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b084      	sub	sp, #16
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad82:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ad86:	f002 f8a3 	bl	800ced0 <USBD_static_malloc>
 800ad8a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d105      	bne.n	800ad9e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	e066      	b.n	800ae6c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	7c1b      	ldrb	r3, [r3, #16]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d119      	bne.n	800ade2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adb2:	2202      	movs	r2, #2
 800adb4:	2181      	movs	r1, #129	@ 0x81
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 ff31 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800adc6:	2202      	movs	r2, #2
 800adc8:	2101      	movs	r1, #1
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 ff27 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2201      	movs	r2, #1
 800add4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2210      	movs	r2, #16
 800addc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ade0:	e016      	b.n	800ae10 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ade2:	2340      	movs	r3, #64	@ 0x40
 800ade4:	2202      	movs	r2, #2
 800ade6:	2181      	movs	r1, #129	@ 0x81
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 ff18 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2201      	movs	r2, #1
 800adf2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adf4:	2340      	movs	r3, #64	@ 0x40
 800adf6:	2202      	movs	r2, #2
 800adf8:	2101      	movs	r1, #1
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 ff0f 	bl	800cc1e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2201      	movs	r2, #1
 800ae04:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2210      	movs	r2, #16
 800ae0c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae10:	2308      	movs	r3, #8
 800ae12:	2203      	movs	r2, #3
 800ae14:	2182      	movs	r1, #130	@ 0x82
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f001 ff01 	bl	800cc1e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	7c1b      	ldrb	r3, [r3, #16]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d109      	bne.n	800ae5a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae50:	2101      	movs	r1, #1
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f001 ffd2 	bl	800cdfc <USBD_LL_PrepareReceive>
 800ae58:	e007      	b.n	800ae6a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ae60:	2340      	movs	r3, #64	@ 0x40
 800ae62:	2101      	movs	r1, #1
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f001 ffc9 	bl	800cdfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ae80:	2181      	movs	r1, #129	@ 0x81
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f001 fef1 	bl	800cc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae8e:	2101      	movs	r1, #1
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f001 feea 	bl	800cc6a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae9e:	2182      	movs	r1, #130	@ 0x82
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f001 fee2 	bl	800cc6a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d00e      	beq.n	800aede <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aed0:	4618      	mov	r0, r3
 800aed2:	f002 f80b 	bl	800ceec <USBD_static_free>
    pdev->pClassData = NULL;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aef8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aefa:	2300      	movs	r3, #0
 800aefc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aefe:	2300      	movs	r3, #0
 800af00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e0af      	b.n	800b070 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d03f      	beq.n	800af9c <USBD_CDC_Setup+0xb4>
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	f040 809f 	bne.w	800b060 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	88db      	ldrh	r3, [r3, #6]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d02e      	beq.n	800af88 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	b25b      	sxtb	r3, r3
 800af30:	2b00      	cmp	r3, #0
 800af32:	da16      	bge.n	800af62 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	683a      	ldr	r2, [r7, #0]
 800af3e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800af40:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af42:	683a      	ldr	r2, [r7, #0]
 800af44:	88d2      	ldrh	r2, [r2, #6]
 800af46:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	88db      	ldrh	r3, [r3, #6]
 800af4c:	2b07      	cmp	r3, #7
 800af4e:	bf28      	it	cs
 800af50:	2307      	movcs	r3, #7
 800af52:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	89fa      	ldrh	r2, [r7, #14]
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f001 fa9d 	bl	800c49a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800af60:	e085      	b.n	800b06e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	785a      	ldrb	r2, [r3, #1]
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	88db      	ldrh	r3, [r3, #6]
 800af70:	b2da      	uxtb	r2, r3
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800af78:	6939      	ldr	r1, [r7, #16]
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	88db      	ldrh	r3, [r3, #6]
 800af7e:	461a      	mov	r2, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 fab6 	bl	800c4f2 <USBD_CtlPrepareRx>
      break;
 800af86:	e072      	b.n	800b06e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af8e:	689b      	ldr	r3, [r3, #8]
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	7850      	ldrb	r0, [r2, #1]
 800af94:	2200      	movs	r2, #0
 800af96:	6839      	ldr	r1, [r7, #0]
 800af98:	4798      	blx	r3
      break;
 800af9a:	e068      	b.n	800b06e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	785b      	ldrb	r3, [r3, #1]
 800afa0:	2b0b      	cmp	r3, #11
 800afa2:	d852      	bhi.n	800b04a <USBD_CDC_Setup+0x162>
 800afa4:	a201      	add	r2, pc, #4	@ (adr r2, 800afac <USBD_CDC_Setup+0xc4>)
 800afa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afaa:	bf00      	nop
 800afac:	0800afdd 	.word	0x0800afdd
 800afb0:	0800b059 	.word	0x0800b059
 800afb4:	0800b04b 	.word	0x0800b04b
 800afb8:	0800b04b 	.word	0x0800b04b
 800afbc:	0800b04b 	.word	0x0800b04b
 800afc0:	0800b04b 	.word	0x0800b04b
 800afc4:	0800b04b 	.word	0x0800b04b
 800afc8:	0800b04b 	.word	0x0800b04b
 800afcc:	0800b04b 	.word	0x0800b04b
 800afd0:	0800b04b 	.word	0x0800b04b
 800afd4:	0800b007 	.word	0x0800b007
 800afd8:	0800b031 	.word	0x0800b031
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d107      	bne.n	800aff8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afe8:	f107 030a 	add.w	r3, r7, #10
 800afec:	2202      	movs	r2, #2
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f001 fa52 	bl	800c49a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aff6:	e032      	b.n	800b05e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f001 f9dc 	bl	800c3b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b000:	2303      	movs	r3, #3
 800b002:	75fb      	strb	r3, [r7, #23]
          break;
 800b004:	e02b      	b.n	800b05e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d107      	bne.n	800b022 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b012:	f107 030d 	add.w	r3, r7, #13
 800b016:	2201      	movs	r2, #1
 800b018:	4619      	mov	r1, r3
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f001 fa3d 	bl	800c49a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b020:	e01d      	b.n	800b05e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b022:	6839      	ldr	r1, [r7, #0]
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f001 f9c7 	bl	800c3b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b02a:	2303      	movs	r3, #3
 800b02c:	75fb      	strb	r3, [r7, #23]
          break;
 800b02e:	e016      	b.n	800b05e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b03      	cmp	r3, #3
 800b03a:	d00f      	beq.n	800b05c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f001 f9ba 	bl	800c3b8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b048:	e008      	b.n	800b05c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 f9b3 	bl	800c3b8 <USBD_CtlError>
          ret = USBD_FAIL;
 800b052:	2303      	movs	r3, #3
 800b054:	75fb      	strb	r3, [r7, #23]
          break;
 800b056:	e002      	b.n	800b05e <USBD_CDC_Setup+0x176>
          break;
 800b058:	bf00      	nop
 800b05a:	e008      	b.n	800b06e <USBD_CDC_Setup+0x186>
          break;
 800b05c:	bf00      	nop
      }
      break;
 800b05e:	e006      	b.n	800b06e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f001 f9a8 	bl	800c3b8 <USBD_CtlError>
      ret = USBD_FAIL;
 800b068:	2303      	movs	r3, #3
 800b06a:	75fb      	strb	r3, [r7, #23]
      break;
 800b06c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3718      	adds	r7, #24
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	460b      	mov	r3, r1
 800b082:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b08a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b096:	2303      	movs	r3, #3
 800b098:	e04f      	b.n	800b13a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b0a2:	78fa      	ldrb	r2, [r7, #3]
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3318      	adds	r3, #24
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d029      	beq.n	800b10c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b0b8:	78fa      	ldrb	r2, [r7, #3]
 800b0ba:	6879      	ldr	r1, [r7, #4]
 800b0bc:	4613      	mov	r3, r2
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	4413      	add	r3, r2
 800b0c2:	009b      	lsls	r3, r3, #2
 800b0c4:	440b      	add	r3, r1
 800b0c6:	3318      	adds	r3, #24
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	78f9      	ldrb	r1, [r7, #3]
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	440b      	add	r3, r1
 800b0d4:	00db      	lsls	r3, r3, #3
 800b0d6:	4403      	add	r3, r0
 800b0d8:	3320      	adds	r3, #32
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0e0:	fb01 f303 	mul.w	r3, r1, r3
 800b0e4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d110      	bne.n	800b10c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b0ea:	78fa      	ldrb	r2, [r7, #3]
 800b0ec:	6879      	ldr	r1, [r7, #4]
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	4413      	add	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	440b      	add	r3, r1
 800b0f8:	3318      	adds	r3, #24
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0fe:	78f9      	ldrb	r1, [r7, #3]
 800b100:	2300      	movs	r3, #0
 800b102:	2200      	movs	r2, #0
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f001 fe58 	bl	800cdba <USBD_LL_Transmit>
 800b10a:	e015      	b.n	800b138 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2200      	movs	r2, #0
 800b110:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b126:	691b      	ldr	r3, [r3, #16]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b12e:	68ba      	ldr	r2, [r7, #8]
 800b130:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b134:	78fa      	ldrb	r2, [r7, #3]
 800b136:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}

0800b142 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b142:	b580      	push	{r7, lr}
 800b144:	b084      	sub	sp, #16
 800b146:	af00      	add	r7, sp, #0
 800b148:	6078      	str	r0, [r7, #4]
 800b14a:	460b      	mov	r3, r1
 800b14c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b154:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d101      	bne.n	800b164 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b160:	2303      	movs	r3, #3
 800b162:	e015      	b.n	800b190 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b164:	78fb      	ldrb	r3, [r7, #3]
 800b166:	4619      	mov	r1, r3
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f001 fe68 	bl	800ce3e <USBD_LL_GetRxDataSize>
 800b16e:	4602      	mov	r2, r0
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b17c:	68db      	ldr	r3, [r3, #12]
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b18a:	4611      	mov	r1, r2
 800b18c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1a6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d101      	bne.n	800b1b2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b1ae:	2303      	movs	r3, #3
 800b1b0:	e01a      	b.n	800b1e8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d014      	beq.n	800b1e6 <USBD_CDC_EP0_RxReady+0x4e>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b1c2:	2bff      	cmp	r3, #255	@ 0xff
 800b1c4:	d00f      	beq.n	800b1e6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	68fa      	ldr	r2, [r7, #12]
 800b1d0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b1d4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b1d6:	68fa      	ldr	r2, [r7, #12]
 800b1d8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1dc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	22ff      	movs	r2, #255	@ 0xff
 800b1e2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b1e6:	2300      	movs	r3, #0
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2243      	movs	r2, #67	@ 0x43
 800b1fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b1fe:	4b03      	ldr	r3, [pc, #12]	@ (800b20c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	20000094 	.word	0x20000094

0800b210 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2243      	movs	r2, #67	@ 0x43
 800b21c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b21e:	4b03      	ldr	r3, [pc, #12]	@ (800b22c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b220:	4618      	mov	r0, r3
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr
 800b22c:	20000050 	.word	0x20000050

0800b230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b230:	b480      	push	{r7}
 800b232:	b083      	sub	sp, #12
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2243      	movs	r2, #67	@ 0x43
 800b23c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b23e:	4b03      	ldr	r3, [pc, #12]	@ (800b24c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b240:	4618      	mov	r0, r3
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr
 800b24c:	200000d8 	.word	0x200000d8

0800b250 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	220a      	movs	r2, #10
 800b25c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b25e:	4b03      	ldr	r3, [pc, #12]	@ (800b26c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b260:	4618      	mov	r0, r3
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	2000000c 	.word	0x2000000c

0800b270 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b270:	b480      	push	{r7}
 800b272:	b083      	sub	sp, #12
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b280:	2303      	movs	r3, #3
 800b282:	e004      	b.n	800b28e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b087      	sub	sp, #28
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	60f8      	str	r0, [r7, #12]
 800b2a2:	60b9      	str	r1, [r7, #8]
 800b2a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e008      	b.n	800b2ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	687a      	ldr	r2, [r7, #4]
 800b2c4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b2c8:	2300      	movs	r3, #0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	371c      	adds	r7, #28
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr

0800b2d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b085      	sub	sp, #20
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	e004      	b.n	800b2fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d101      	bne.n	800b326 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b322:	2303      	movs	r3, #3
 800b324:	e016      	b.n	800b354 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	7c1b      	ldrb	r3, [r3, #16]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d109      	bne.n	800b342 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b338:	2101      	movs	r1, #1
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f001 fd5e 	bl	800cdfc <USBD_LL_PrepareReceive>
 800b340:	e007      	b.n	800b352 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b348:	2340      	movs	r3, #64	@ 0x40
 800b34a:	2101      	movs	r1, #1
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f001 fd55 	bl	800cdfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	4613      	mov	r3, r2
 800b368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d101      	bne.n	800b374 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b370:	2303      	movs	r3, #3
 800b372:	e01f      	b.n	800b3b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2200      	movs	r2, #0
 800b388:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d003      	beq.n	800b39a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	79fa      	ldrb	r2, [r7, #7]
 800b3a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b3a8:	68f8      	ldr	r0, [r7, #12]
 800b3aa:	f001 fbbd 	bl	800cb28 <USBD_LL_Init>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d101      	bne.n	800b3d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e016      	b.n	800b402 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	683a      	ldr	r2, [r7, #0]
 800b3d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d00b      	beq.n	800b400 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3f0:	f107 020e 	add.w	r2, r7, #14
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4798      	blx	r3
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	4618      	mov	r0, r3
 800b404:	3710      	adds	r7, #16
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}

0800b40a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fbe8 	bl	800cbe8 <USBD_LL_Start>
 800b418:	4603      	mov	r3, r0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}

0800b422 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b422:	b480      	push	{r7}
 800b424:	b083      	sub	sp, #12
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b42a:	2300      	movs	r3, #0
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	370c      	adds	r7, #12
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	460b      	mov	r3, r1
 800b442:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b444:	2303      	movs	r3, #3
 800b446:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d009      	beq.n	800b466 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	78fa      	ldrb	r2, [r7, #3]
 800b45c:	4611      	mov	r1, r2
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	4798      	blx	r3
 800b462:	4603      	mov	r3, r0
 800b464:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b466:	7bfb      	ldrb	r3, [r7, #15]
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b482:	2b00      	cmp	r3, #0
 800b484:	d007      	beq.n	800b496 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	78fa      	ldrb	r2, [r7, #3]
 800b490:	4611      	mov	r1, r2
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	4798      	blx	r3
  }

  return USBD_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3708      	adds	r7, #8
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f000 ff46 	bl	800c344 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4d4:	f003 031f 	and.w	r3, r3, #31
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d01a      	beq.n	800b512 <USBD_LL_SetupStage+0x72>
 800b4dc:	2b02      	cmp	r3, #2
 800b4de:	d822      	bhi.n	800b526 <USBD_LL_SetupStage+0x86>
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <USBD_LL_SetupStage+0x4a>
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d00a      	beq.n	800b4fe <USBD_LL_SetupStage+0x5e>
 800b4e8:	e01d      	b.n	800b526 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 f9ee 	bl	800b8d4 <USBD_StdDevReq>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fc:	e020      	b.n	800b540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b504:	4619      	mov	r1, r3
 800b506:	6878      	ldr	r0, [r7, #4]
 800b508:	f000 fa52 	bl	800b9b0 <USBD_StdItfReq>
 800b50c:	4603      	mov	r3, r0
 800b50e:	73fb      	strb	r3, [r7, #15]
      break;
 800b510:	e016      	b.n	800b540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fa91 	bl	800ba42 <USBD_StdEPReq>
 800b520:	4603      	mov	r3, r0
 800b522:	73fb      	strb	r3, [r7, #15]
      break;
 800b524:	e00c      	b.n	800b540 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b52c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b530:	b2db      	uxtb	r3, r3
 800b532:	4619      	mov	r1, r3
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 fbb7 	bl	800cca8 <USBD_LL_StallEP>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73fb      	strb	r3, [r7, #15]
      break;
 800b53e:	bf00      	nop
  }

  return ret;
 800b540:	7bfb      	ldrb	r3, [r7, #15]
}
 800b542:	4618      	mov	r0, r3
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b086      	sub	sp, #24
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	460b      	mov	r3, r1
 800b554:	607a      	str	r2, [r7, #4]
 800b556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b558:	7afb      	ldrb	r3, [r7, #11]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d138      	bne.n	800b5d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b56c:	2b03      	cmp	r3, #3
 800b56e:	d14a      	bne.n	800b606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	689a      	ldr	r2, [r3, #8]
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	68db      	ldr	r3, [r3, #12]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d913      	bls.n	800b5a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b57c:	693b      	ldr	r3, [r7, #16]
 800b57e:	689a      	ldr	r2, [r3, #8]
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	1ad2      	subs	r2, r2, r3
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	4293      	cmp	r3, r2
 800b594:	bf28      	it	cs
 800b596:	4613      	movcs	r3, r2
 800b598:	461a      	mov	r2, r3
 800b59a:	6879      	ldr	r1, [r7, #4]
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	f000 ffc5 	bl	800c52c <USBD_CtlContinueRx>
 800b5a2:	e030      	b.n	800b606 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d10b      	bne.n	800b5c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d005      	beq.n	800b5c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 ffc0 	bl	800c54e <USBD_CtlSendStatus>
 800b5ce:	e01a      	b.n	800b606 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b03      	cmp	r3, #3
 800b5da:	d114      	bne.n	800b606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e2:	699b      	ldr	r3, [r3, #24]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d00e      	beq.n	800b606 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ee:	699b      	ldr	r3, [r3, #24]
 800b5f0:	7afa      	ldrb	r2, [r7, #11]
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	4798      	blx	r3
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b5fc:	7dfb      	ldrb	r3, [r7, #23]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b602:	7dfb      	ldrb	r3, [r7, #23]
 800b604:	e000      	b.n	800b608 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3718      	adds	r7, #24
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	460b      	mov	r3, r1
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b61e:	7afb      	ldrb	r3, [r7, #11]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d16b      	bne.n	800b6fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3314      	adds	r3, #20
 800b628:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b630:	2b02      	cmp	r3, #2
 800b632:	d156      	bne.n	800b6e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	689a      	ldr	r2, [r3, #8]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d914      	bls.n	800b66a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	689a      	ldr	r2, [r3, #8]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	68db      	ldr	r3, [r3, #12]
 800b648:	1ad2      	subs	r2, r2, r3
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	461a      	mov	r2, r3
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	68f8      	ldr	r0, [r7, #12]
 800b658:	f000 ff3a 	bl	800c4d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b65c:	2300      	movs	r3, #0
 800b65e:	2200      	movs	r2, #0
 800b660:	2100      	movs	r1, #0
 800b662:	68f8      	ldr	r0, [r7, #12]
 800b664:	f001 fbca 	bl	800cdfc <USBD_LL_PrepareReceive>
 800b668:	e03b      	b.n	800b6e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	68da      	ldr	r2, [r3, #12]
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	429a      	cmp	r2, r3
 800b674:	d11c      	bne.n	800b6b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	685a      	ldr	r2, [r3, #4]
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b67e:	429a      	cmp	r2, r3
 800b680:	d316      	bcc.n	800b6b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	685a      	ldr	r2, [r3, #4]
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d20f      	bcs.n	800b6b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b690:	2200      	movs	r2, #0
 800b692:	2100      	movs	r1, #0
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 ff1b 	bl	800c4d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	2100      	movs	r1, #0
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f001 fba7 	bl	800cdfc <USBD_LL_PrepareReceive>
 800b6ae:	e018      	b.n	800b6e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d10b      	bne.n	800b6d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c2:	68db      	ldr	r3, [r3, #12]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d005      	beq.n	800b6d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6d4:	2180      	movs	r1, #128	@ 0x80
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f001 fae6 	bl	800cca8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f000 ff49 	bl	800c574 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d122      	bne.n	800b732 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b6ec:	68f8      	ldr	r0, [r7, #12]
 800b6ee:	f7ff fe98 	bl	800b422 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b6fa:	e01a      	b.n	800b732 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b03      	cmp	r3, #3
 800b706:	d114      	bne.n	800b732 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00e      	beq.n	800b732 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b71a:	695b      	ldr	r3, [r3, #20]
 800b71c:	7afa      	ldrb	r2, [r7, #11]
 800b71e:	4611      	mov	r1, r2
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	4798      	blx	r3
 800b724:	4603      	mov	r3, r0
 800b726:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b728:	7dfb      	ldrb	r3, [r7, #23]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d001      	beq.n	800b732 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b72e:	7dfb      	ldrb	r3, [r7, #23]
 800b730:	e000      	b.n	800b734 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3718      	adds	r7, #24
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2200      	movs	r2, #0
 800b758:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e02f      	b.n	800b7d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00f      	beq.n	800b79a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d009      	beq.n	800b79a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	6852      	ldr	r2, [r2, #4]
 800b792:	b2d2      	uxtb	r2, r2
 800b794:	4611      	mov	r1, r2
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b79a:	2340      	movs	r3, #64	@ 0x40
 800b79c:	2200      	movs	r2, #0
 800b79e:	2100      	movs	r1, #0
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 fa3c 	bl	800cc1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2240      	movs	r2, #64	@ 0x40
 800b7b2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7b6:	2340      	movs	r3, #64	@ 0x40
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	2180      	movs	r1, #128	@ 0x80
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f001 fa2e 	bl	800cc1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2240      	movs	r2, #64	@ 0x40
 800b7cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	78fa      	ldrb	r2, [r7, #3]
 800b7e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b806:	b2da      	uxtb	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2204      	movs	r2, #4
 800b812:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	370c      	adds	r7, #12
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr

0800b824 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b824:	b480      	push	{r7}
 800b826:	b083      	sub	sp, #12
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b04      	cmp	r3, #4
 800b836:	d106      	bne.n	800b846 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b862:	2b00      	cmp	r3, #0
 800b864:	d101      	bne.n	800b86a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b866:	2303      	movs	r3, #3
 800b868:	e012      	b.n	800b890 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b870:	b2db      	uxtb	r3, r3
 800b872:	2b03      	cmp	r3, #3
 800b874:	d10b      	bne.n	800b88e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b87c:	69db      	ldr	r3, [r3, #28]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d005      	beq.n	800b88e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3708      	adds	r7, #8
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b898:	b480      	push	{r7}
 800b89a:	b087      	sub	sp, #28
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8b6:	8a3b      	ldrh	r3, [r7, #16]
 800b8b8:	021b      	lsls	r3, r3, #8
 800b8ba:	b21a      	sxth	r2, r3
 800b8bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	b21b      	sxth	r3, r3
 800b8c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b8c6:	89fb      	ldrh	r3, [r7, #14]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	371c      	adds	r7, #28
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b8ea:	2b40      	cmp	r3, #64	@ 0x40
 800b8ec:	d005      	beq.n	800b8fa <USBD_StdDevReq+0x26>
 800b8ee:	2b40      	cmp	r3, #64	@ 0x40
 800b8f0:	d853      	bhi.n	800b99a <USBD_StdDevReq+0xc6>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00b      	beq.n	800b90e <USBD_StdDevReq+0x3a>
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	d14f      	bne.n	800b99a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b900:	689b      	ldr	r3, [r3, #8]
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	4798      	blx	r3
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]
      break;
 800b90c:	e04a      	b.n	800b9a4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	785b      	ldrb	r3, [r3, #1]
 800b912:	2b09      	cmp	r3, #9
 800b914:	d83b      	bhi.n	800b98e <USBD_StdDevReq+0xba>
 800b916:	a201      	add	r2, pc, #4	@ (adr r2, 800b91c <USBD_StdDevReq+0x48>)
 800b918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b91c:	0800b971 	.word	0x0800b971
 800b920:	0800b985 	.word	0x0800b985
 800b924:	0800b98f 	.word	0x0800b98f
 800b928:	0800b97b 	.word	0x0800b97b
 800b92c:	0800b98f 	.word	0x0800b98f
 800b930:	0800b94f 	.word	0x0800b94f
 800b934:	0800b945 	.word	0x0800b945
 800b938:	0800b98f 	.word	0x0800b98f
 800b93c:	0800b967 	.word	0x0800b967
 800b940:	0800b959 	.word	0x0800b959
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f9de 	bl	800bd08 <USBD_GetDescriptor>
          break;
 800b94c:	e024      	b.n	800b998 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fb6d 	bl	800c030 <USBD_SetAddress>
          break;
 800b956:	e01f      	b.n	800b998 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fbac 	bl	800c0b8 <USBD_SetConfig>
 800b960:	4603      	mov	r3, r0
 800b962:	73fb      	strb	r3, [r7, #15]
          break;
 800b964:	e018      	b.n	800b998 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 fc4b 	bl	800c204 <USBD_GetConfig>
          break;
 800b96e:	e013      	b.n	800b998 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fc7c 	bl	800c270 <USBD_GetStatus>
          break;
 800b978:	e00e      	b.n	800b998 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b97a:	6839      	ldr	r1, [r7, #0]
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 fcab 	bl	800c2d8 <USBD_SetFeature>
          break;
 800b982:	e009      	b.n	800b998 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b984:	6839      	ldr	r1, [r7, #0]
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fcba 	bl	800c300 <USBD_ClrFeature>
          break;
 800b98c:	e004      	b.n	800b998 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fd11 	bl	800c3b8 <USBD_CtlError>
          break;
 800b996:	bf00      	nop
      }
      break;
 800b998:	e004      	b.n	800b9a4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b99a:	6839      	ldr	r1, [r7, #0]
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 fd0b 	bl	800c3b8 <USBD_CtlError>
      break;
 800b9a2:	bf00      	nop
  }

  return ret;
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop

0800b9b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9c6:	2b40      	cmp	r3, #64	@ 0x40
 800b9c8:	d005      	beq.n	800b9d6 <USBD_StdItfReq+0x26>
 800b9ca:	2b40      	cmp	r3, #64	@ 0x40
 800b9cc:	d82f      	bhi.n	800ba2e <USBD_StdItfReq+0x7e>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d001      	beq.n	800b9d6 <USBD_StdItfReq+0x26>
 800b9d2:	2b20      	cmp	r3, #32
 800b9d4:	d12b      	bne.n	800ba2e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d81d      	bhi.n	800ba20 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	889b      	ldrh	r3, [r3, #4]
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d813      	bhi.n	800ba16 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9f4:	689b      	ldr	r3, [r3, #8]
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	4798      	blx	r3
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	88db      	ldrh	r3, [r3, #6]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d110      	bne.n	800ba2a <USBD_StdItfReq+0x7a>
 800ba08:	7bfb      	ldrb	r3, [r7, #15]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d10d      	bne.n	800ba2a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fd9d 	bl	800c54e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba14:	e009      	b.n	800ba2a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ba16:	6839      	ldr	r1, [r7, #0]
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fccd 	bl	800c3b8 <USBD_CtlError>
          break;
 800ba1e:	e004      	b.n	800ba2a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ba20:	6839      	ldr	r1, [r7, #0]
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fcc8 	bl	800c3b8 <USBD_CtlError>
          break;
 800ba28:	e000      	b.n	800ba2c <USBD_StdItfReq+0x7c>
          break;
 800ba2a:	bf00      	nop
      }
      break;
 800ba2c:	e004      	b.n	800ba38 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ba2e:	6839      	ldr	r1, [r7, #0]
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 fcc1 	bl	800c3b8 <USBD_CtlError>
      break;
 800ba36:	bf00      	nop
  }

  return ret;
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	889b      	ldrh	r3, [r3, #4]
 800ba54:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba5e:	2b40      	cmp	r3, #64	@ 0x40
 800ba60:	d007      	beq.n	800ba72 <USBD_StdEPReq+0x30>
 800ba62:	2b40      	cmp	r3, #64	@ 0x40
 800ba64:	f200 8145 	bhi.w	800bcf2 <USBD_StdEPReq+0x2b0>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00c      	beq.n	800ba86 <USBD_StdEPReq+0x44>
 800ba6c:	2b20      	cmp	r3, #32
 800ba6e:	f040 8140 	bne.w	800bcf2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	4798      	blx	r3
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]
      break;
 800ba84:	e13a      	b.n	800bcfc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	785b      	ldrb	r3, [r3, #1]
 800ba8a:	2b03      	cmp	r3, #3
 800ba8c:	d007      	beq.n	800ba9e <USBD_StdEPReq+0x5c>
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	f300 8129 	bgt.w	800bce6 <USBD_StdEPReq+0x2a4>
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d07f      	beq.n	800bb98 <USBD_StdEPReq+0x156>
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d03c      	beq.n	800bb16 <USBD_StdEPReq+0xd4>
 800ba9c:	e123      	b.n	800bce6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b02      	cmp	r3, #2
 800baa8:	d002      	beq.n	800bab0 <USBD_StdEPReq+0x6e>
 800baaa:	2b03      	cmp	r3, #3
 800baac:	d016      	beq.n	800badc <USBD_StdEPReq+0x9a>
 800baae:	e02c      	b.n	800bb0a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00d      	beq.n	800bad2 <USBD_StdEPReq+0x90>
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
 800bab8:	2b80      	cmp	r3, #128	@ 0x80
 800baba:	d00a      	beq.n	800bad2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	4619      	mov	r1, r3
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f001 f8f1 	bl	800cca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bac6:	2180      	movs	r1, #128	@ 0x80
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f001 f8ed 	bl	800cca8 <USBD_LL_StallEP>
 800bace:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bad0:	e020      	b.n	800bb14 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fc6f 	bl	800c3b8 <USBD_CtlError>
              break;
 800bada:	e01b      	b.n	800bb14 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	885b      	ldrh	r3, [r3, #2]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10e      	bne.n	800bb02 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00b      	beq.n	800bb02 <USBD_StdEPReq+0xc0>
 800baea:	7bbb      	ldrb	r3, [r7, #14]
 800baec:	2b80      	cmp	r3, #128	@ 0x80
 800baee:	d008      	beq.n	800bb02 <USBD_StdEPReq+0xc0>
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	88db      	ldrh	r3, [r3, #6]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d104      	bne.n	800bb02 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baf8:	7bbb      	ldrb	r3, [r7, #14]
 800bafa:	4619      	mov	r1, r3
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f001 f8d3 	bl	800cca8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fd23 	bl	800c54e <USBD_CtlSendStatus>

              break;
 800bb08:	e004      	b.n	800bb14 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fc53 	bl	800c3b8 <USBD_CtlError>
              break;
 800bb12:	bf00      	nop
          }
          break;
 800bb14:	e0ec      	b.n	800bcf0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d002      	beq.n	800bb28 <USBD_StdEPReq+0xe6>
 800bb22:	2b03      	cmp	r3, #3
 800bb24:	d016      	beq.n	800bb54 <USBD_StdEPReq+0x112>
 800bb26:	e030      	b.n	800bb8a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb28:	7bbb      	ldrb	r3, [r7, #14]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00d      	beq.n	800bb4a <USBD_StdEPReq+0x108>
 800bb2e:	7bbb      	ldrb	r3, [r7, #14]
 800bb30:	2b80      	cmp	r3, #128	@ 0x80
 800bb32:	d00a      	beq.n	800bb4a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
 800bb36:	4619      	mov	r1, r3
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f001 f8b5 	bl	800cca8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb3e:	2180      	movs	r1, #128	@ 0x80
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f001 f8b1 	bl	800cca8 <USBD_LL_StallEP>
 800bb46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb48:	e025      	b.n	800bb96 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bb4a:	6839      	ldr	r1, [r7, #0]
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 fc33 	bl	800c3b8 <USBD_CtlError>
              break;
 800bb52:	e020      	b.n	800bb96 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	885b      	ldrh	r3, [r3, #2]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d11b      	bne.n	800bb94 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d004      	beq.n	800bb70 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb66:	7bbb      	ldrb	r3, [r7, #14]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f001 f8bb 	bl	800cce6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fcec 	bl	800c54e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	6839      	ldr	r1, [r7, #0]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	4798      	blx	r3
 800bb84:	4603      	mov	r3, r0
 800bb86:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bb88:	e004      	b.n	800bb94 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fc13 	bl	800c3b8 <USBD_CtlError>
              break;
 800bb92:	e000      	b.n	800bb96 <USBD_StdEPReq+0x154>
              break;
 800bb94:	bf00      	nop
          }
          break;
 800bb96:	e0ab      	b.n	800bcf0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb9e:	b2db      	uxtb	r3, r3
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d002      	beq.n	800bbaa <USBD_StdEPReq+0x168>
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d032      	beq.n	800bc0e <USBD_StdEPReq+0x1cc>
 800bba8:	e097      	b.n	800bcda <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbaa:	7bbb      	ldrb	r3, [r7, #14]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d007      	beq.n	800bbc0 <USBD_StdEPReq+0x17e>
 800bbb0:	7bbb      	ldrb	r3, [r7, #14]
 800bbb2:	2b80      	cmp	r3, #128	@ 0x80
 800bbb4:	d004      	beq.n	800bbc0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fbfd 	bl	800c3b8 <USBD_CtlError>
                break;
 800bbbe:	e091      	b.n	800bce4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	da0b      	bge.n	800bbe0 <USBD_StdEPReq+0x19e>
 800bbc8:	7bbb      	ldrb	r3, [r7, #14]
 800bbca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbce:	4613      	mov	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	3310      	adds	r3, #16
 800bbd8:	687a      	ldr	r2, [r7, #4]
 800bbda:	4413      	add	r3, r2
 800bbdc:	3304      	adds	r3, #4
 800bbde:	e00b      	b.n	800bbf8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbe0:	7bbb      	ldrb	r3, [r7, #14]
 800bbe2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbf2:	687a      	ldr	r2, [r7, #4]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2202      	movs	r2, #2
 800bc04:	4619      	mov	r1, r3
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fc47 	bl	800c49a <USBD_CtlSendData>
              break;
 800bc0c:	e06a      	b.n	800bce4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	da11      	bge.n	800bc3a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc16:	7bbb      	ldrb	r3, [r7, #14]
 800bc18:	f003 020f 	and.w	r2, r3, #15
 800bc1c:	6879      	ldr	r1, [r7, #4]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	009b      	lsls	r3, r3, #2
 800bc26:	440b      	add	r3, r1
 800bc28:	3324      	adds	r3, #36	@ 0x24
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d117      	bne.n	800bc60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	6878      	ldr	r0, [r7, #4]
 800bc34:	f000 fbc0 	bl	800c3b8 <USBD_CtlError>
                  break;
 800bc38:	e054      	b.n	800bce4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc3a:	7bbb      	ldrb	r3, [r7, #14]
 800bc3c:	f003 020f 	and.w	r2, r3, #15
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	4613      	mov	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	440b      	add	r3, r1
 800bc4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc50:	881b      	ldrh	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d104      	bne.n	800bc60 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fbad 	bl	800c3b8 <USBD_CtlError>
                  break;
 800bc5e:	e041      	b.n	800bce4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	da0b      	bge.n	800bc80 <USBD_StdEPReq+0x23e>
 800bc68:	7bbb      	ldrb	r3, [r7, #14]
 800bc6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc6e:	4613      	mov	r3, r2
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	3310      	adds	r3, #16
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3304      	adds	r3, #4
 800bc7e:	e00b      	b.n	800bc98 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc86:	4613      	mov	r3, r2
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	4413      	add	r3, r2
 800bc96:	3304      	adds	r3, #4
 800bc98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc9a:	7bbb      	ldrb	r3, [r7, #14]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <USBD_StdEPReq+0x264>
 800bca0:	7bbb      	ldrb	r3, [r7, #14]
 800bca2:	2b80      	cmp	r3, #128	@ 0x80
 800bca4:	d103      	bne.n	800bcae <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	2200      	movs	r2, #0
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	e00e      	b.n	800bccc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcae:	7bbb      	ldrb	r3, [r7, #14]
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f001 f836 	bl	800cd24 <USBD_LL_IsStallEP>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d003      	beq.n	800bcc6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	e002      	b.n	800bccc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	4619      	mov	r1, r3
 800bcd2:	6878      	ldr	r0, [r7, #4]
 800bcd4:	f000 fbe1 	bl	800c49a <USBD_CtlSendData>
              break;
 800bcd8:	e004      	b.n	800bce4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f000 fb6b 	bl	800c3b8 <USBD_CtlError>
              break;
 800bce2:	bf00      	nop
          }
          break;
 800bce4:	e004      	b.n	800bcf0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fb65 	bl	800c3b8 <USBD_CtlError>
          break;
 800bcee:	bf00      	nop
      }
      break;
 800bcf0:	e004      	b.n	800bcfc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fb5f 	bl	800c3b8 <USBD_CtlError>
      break;
 800bcfa:	bf00      	nop
  }

  return ret;
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
	...

0800bd08 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd12:	2300      	movs	r3, #0
 800bd14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd16:	2300      	movs	r3, #0
 800bd18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	885b      	ldrh	r3, [r3, #2]
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	3b01      	subs	r3, #1
 800bd28:	2b0e      	cmp	r3, #14
 800bd2a:	f200 8152 	bhi.w	800bfd2 <USBD_GetDescriptor+0x2ca>
 800bd2e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd34 <USBD_GetDescriptor+0x2c>)
 800bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd34:	0800bda5 	.word	0x0800bda5
 800bd38:	0800bdbd 	.word	0x0800bdbd
 800bd3c:	0800bdfd 	.word	0x0800bdfd
 800bd40:	0800bfd3 	.word	0x0800bfd3
 800bd44:	0800bfd3 	.word	0x0800bfd3
 800bd48:	0800bf73 	.word	0x0800bf73
 800bd4c:	0800bf9f 	.word	0x0800bf9f
 800bd50:	0800bfd3 	.word	0x0800bfd3
 800bd54:	0800bfd3 	.word	0x0800bfd3
 800bd58:	0800bfd3 	.word	0x0800bfd3
 800bd5c:	0800bfd3 	.word	0x0800bfd3
 800bd60:	0800bfd3 	.word	0x0800bfd3
 800bd64:	0800bfd3 	.word	0x0800bfd3
 800bd68:	0800bfd3 	.word	0x0800bfd3
 800bd6c:	0800bd71 	.word	0x0800bd71
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd76:	69db      	ldr	r3, [r3, #28]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00b      	beq.n	800bd94 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd82:	69db      	ldr	r3, [r3, #28]
 800bd84:	687a      	ldr	r2, [r7, #4]
 800bd86:	7c12      	ldrb	r2, [r2, #16]
 800bd88:	f107 0108 	add.w	r1, r7, #8
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	4798      	blx	r3
 800bd90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd92:	e126      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 fb0e 	bl	800c3b8 <USBD_CtlError>
        err++;
 800bd9c:	7afb      	ldrb	r3, [r7, #11]
 800bd9e:	3301      	adds	r3, #1
 800bda0:	72fb      	strb	r3, [r7, #11]
      break;
 800bda2:	e11e      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	7c12      	ldrb	r2, [r2, #16]
 800bdb0:	f107 0108 	add.w	r1, r7, #8
 800bdb4:	4610      	mov	r0, r2
 800bdb6:	4798      	blx	r3
 800bdb8:	60f8      	str	r0, [r7, #12]
      break;
 800bdba:	e112      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	7c1b      	ldrb	r3, [r3, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d10d      	bne.n	800bde0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdcc:	f107 0208 	add.w	r2, r7, #8
 800bdd0:	4610      	mov	r0, r2
 800bdd2:	4798      	blx	r3
 800bdd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	2202      	movs	r2, #2
 800bddc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdde:	e100      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bde8:	f107 0208 	add.w	r2, r7, #8
 800bdec:	4610      	mov	r0, r2
 800bdee:	4798      	blx	r3
 800bdf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	701a      	strb	r2, [r3, #0]
      break;
 800bdfa:	e0f2      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	885b      	ldrh	r3, [r3, #2]
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b05      	cmp	r3, #5
 800be04:	f200 80ac 	bhi.w	800bf60 <USBD_GetDescriptor+0x258>
 800be08:	a201      	add	r2, pc, #4	@ (adr r2, 800be10 <USBD_GetDescriptor+0x108>)
 800be0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0e:	bf00      	nop
 800be10:	0800be29 	.word	0x0800be29
 800be14:	0800be5d 	.word	0x0800be5d
 800be18:	0800be91 	.word	0x0800be91
 800be1c:	0800bec5 	.word	0x0800bec5
 800be20:	0800bef9 	.word	0x0800bef9
 800be24:	0800bf2d 	.word	0x0800bf2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	7c12      	ldrb	r2, [r2, #16]
 800be40:	f107 0108 	add.w	r1, r7, #8
 800be44:	4610      	mov	r0, r2
 800be46:	4798      	blx	r3
 800be48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be4a:	e091      	b.n	800bf70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f000 fab2 	bl	800c3b8 <USBD_CtlError>
            err++;
 800be54:	7afb      	ldrb	r3, [r7, #11]
 800be56:	3301      	adds	r3, #1
 800be58:	72fb      	strb	r3, [r7, #11]
          break;
 800be5a:	e089      	b.n	800bf70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00b      	beq.n	800be80 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be6e:	689b      	ldr	r3, [r3, #8]
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	7c12      	ldrb	r2, [r2, #16]
 800be74:	f107 0108 	add.w	r1, r7, #8
 800be78:	4610      	mov	r0, r2
 800be7a:	4798      	blx	r3
 800be7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be7e:	e077      	b.n	800bf70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be80:	6839      	ldr	r1, [r7, #0]
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa98 	bl	800c3b8 <USBD_CtlError>
            err++;
 800be88:	7afb      	ldrb	r3, [r7, #11]
 800be8a:	3301      	adds	r3, #1
 800be8c:	72fb      	strb	r3, [r7, #11]
          break;
 800be8e:	e06f      	b.n	800bf70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	7c12      	ldrb	r2, [r2, #16]
 800bea8:	f107 0108 	add.w	r1, r7, #8
 800beac:	4610      	mov	r0, r2
 800beae:	4798      	blx	r3
 800beb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beb2:	e05d      	b.n	800bf70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800beb4:	6839      	ldr	r1, [r7, #0]
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fa7e 	bl	800c3b8 <USBD_CtlError>
            err++;
 800bebc:	7afb      	ldrb	r3, [r7, #11]
 800bebe:	3301      	adds	r3, #1
 800bec0:	72fb      	strb	r3, [r7, #11]
          break;
 800bec2:	e055      	b.n	800bf70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00b      	beq.n	800bee8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	687a      	ldr	r2, [r7, #4]
 800beda:	7c12      	ldrb	r2, [r2, #16]
 800bedc:	f107 0108 	add.w	r1, r7, #8
 800bee0:	4610      	mov	r0, r2
 800bee2:	4798      	blx	r3
 800bee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bee6:	e043      	b.n	800bf70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 fa64 	bl	800c3b8 <USBD_CtlError>
            err++;
 800bef0:	7afb      	ldrb	r3, [r7, #11]
 800bef2:	3301      	adds	r3, #1
 800bef4:	72fb      	strb	r3, [r7, #11]
          break;
 800bef6:	e03b      	b.n	800bf70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d00b      	beq.n	800bf1c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf0a:	695b      	ldr	r3, [r3, #20]
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	7c12      	ldrb	r2, [r2, #16]
 800bf10:	f107 0108 	add.w	r1, r7, #8
 800bf14:	4610      	mov	r0, r2
 800bf16:	4798      	blx	r3
 800bf18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf1a:	e029      	b.n	800bf70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf1c:	6839      	ldr	r1, [r7, #0]
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f000 fa4a 	bl	800c3b8 <USBD_CtlError>
            err++;
 800bf24:	7afb      	ldrb	r3, [r7, #11]
 800bf26:	3301      	adds	r3, #1
 800bf28:	72fb      	strb	r3, [r7, #11]
          break;
 800bf2a:	e021      	b.n	800bf70 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf32:	699b      	ldr	r3, [r3, #24]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00b      	beq.n	800bf50 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	7c12      	ldrb	r2, [r2, #16]
 800bf44:	f107 0108 	add.w	r1, r7, #8
 800bf48:	4610      	mov	r0, r2
 800bf4a:	4798      	blx	r3
 800bf4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf4e:	e00f      	b.n	800bf70 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fa30 	bl	800c3b8 <USBD_CtlError>
            err++;
 800bf58:	7afb      	ldrb	r3, [r7, #11]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf5e:	e007      	b.n	800bf70 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fa28 	bl	800c3b8 <USBD_CtlError>
          err++;
 800bf68:	7afb      	ldrb	r3, [r7, #11]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bf6e:	bf00      	nop
      }
      break;
 800bf70:	e037      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	7c1b      	ldrb	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d109      	bne.n	800bf8e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf82:	f107 0208 	add.w	r2, r7, #8
 800bf86:	4610      	mov	r0, r2
 800bf88:	4798      	blx	r3
 800bf8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf8c:	e029      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fa11 	bl	800c3b8 <USBD_CtlError>
        err++;
 800bf96:	7afb      	ldrb	r3, [r7, #11]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf9c:	e021      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	7c1b      	ldrb	r3, [r3, #16]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10d      	bne.n	800bfc2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bfac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfae:	f107 0208 	add.w	r2, r7, #8
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	4798      	blx	r3
 800bfb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	3301      	adds	r3, #1
 800bfbc:	2207      	movs	r2, #7
 800bfbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfc0:	e00f      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 f9f7 	bl	800c3b8 <USBD_CtlError>
        err++;
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	72fb      	strb	r3, [r7, #11]
      break;
 800bfd0:	e007      	b.n	800bfe2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bfd2:	6839      	ldr	r1, [r7, #0]
 800bfd4:	6878      	ldr	r0, [r7, #4]
 800bfd6:	f000 f9ef 	bl	800c3b8 <USBD_CtlError>
      err++;
 800bfda:	7afb      	ldrb	r3, [r7, #11]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	72fb      	strb	r3, [r7, #11]
      break;
 800bfe0:	bf00      	nop
  }

  if (err != 0U)
 800bfe2:	7afb      	ldrb	r3, [r7, #11]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d11e      	bne.n	800c026 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	88db      	ldrh	r3, [r3, #6]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d016      	beq.n	800c01e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bff0:	893b      	ldrh	r3, [r7, #8]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d00e      	beq.n	800c014 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	88da      	ldrh	r2, [r3, #6]
 800bffa:	893b      	ldrh	r3, [r7, #8]
 800bffc:	4293      	cmp	r3, r2
 800bffe:	bf28      	it	cs
 800c000:	4613      	movcs	r3, r2
 800c002:	b29b      	uxth	r3, r3
 800c004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c006:	893b      	ldrh	r3, [r7, #8]
 800c008:	461a      	mov	r2, r3
 800c00a:	68f9      	ldr	r1, [r7, #12]
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fa44 	bl	800c49a <USBD_CtlSendData>
 800c012:	e009      	b.n	800c028 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c014:	6839      	ldr	r1, [r7, #0]
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f000 f9ce 	bl	800c3b8 <USBD_CtlError>
 800c01c:	e004      	b.n	800c028 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 fa95 	bl	800c54e <USBD_CtlSendStatus>
 800c024:	e000      	b.n	800c028 <USBD_GetDescriptor+0x320>
    return;
 800c026:	bf00      	nop
  }
}
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
 800c02e:	bf00      	nop

0800c030 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b084      	sub	sp, #16
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	889b      	ldrh	r3, [r3, #4]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d131      	bne.n	800c0a6 <USBD_SetAddress+0x76>
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	88db      	ldrh	r3, [r3, #6]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d12d      	bne.n	800c0a6 <USBD_SetAddress+0x76>
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	885b      	ldrh	r3, [r3, #2]
 800c04e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c050:	d829      	bhi.n	800c0a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	885b      	ldrh	r3, [r3, #2]
 800c056:	b2db      	uxtb	r3, r3
 800c058:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c05c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c064:	b2db      	uxtb	r3, r3
 800c066:	2b03      	cmp	r3, #3
 800c068:	d104      	bne.n	800c074 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 f9a3 	bl	800c3b8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c072:	e01d      	b.n	800c0b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	7bfa      	ldrb	r2, [r7, #15]
 800c078:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	4619      	mov	r1, r3
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f000 fe7b 	bl	800cd7c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fa61 	bl	800c54e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c08c:	7bfb      	ldrb	r3, [r7, #15]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d004      	beq.n	800c09c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2202      	movs	r2, #2
 800c096:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c09a:	e009      	b.n	800c0b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2201      	movs	r2, #1
 800c0a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0a4:	e004      	b.n	800c0b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f985 	bl	800c3b8 <USBD_CtlError>
  }
}
 800c0ae:	bf00      	nop
 800c0b0:	bf00      	nop
 800c0b2:	3710      	adds	r7, #16
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	bd80      	pop	{r7, pc}

0800c0b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	885b      	ldrh	r3, [r3, #2]
 800c0ca:	b2da      	uxtb	r2, r3
 800c0cc:	4b4c      	ldr	r3, [pc, #304]	@ (800c200 <USBD_SetConfig+0x148>)
 800c0ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0d0:	4b4b      	ldr	r3, [pc, #300]	@ (800c200 <USBD_SetConfig+0x148>)
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d905      	bls.n	800c0e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f96c 	bl	800c3b8 <USBD_CtlError>
    return USBD_FAIL;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e088      	b.n	800c1f6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b02      	cmp	r3, #2
 800c0ee:	d002      	beq.n	800c0f6 <USBD_SetConfig+0x3e>
 800c0f0:	2b03      	cmp	r3, #3
 800c0f2:	d025      	beq.n	800c140 <USBD_SetConfig+0x88>
 800c0f4:	e071      	b.n	800c1da <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c0f6:	4b42      	ldr	r3, [pc, #264]	@ (800c200 <USBD_SetConfig+0x148>)
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d01c      	beq.n	800c138 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c0fe:	4b40      	ldr	r3, [pc, #256]	@ (800c200 <USBD_SetConfig+0x148>)
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	461a      	mov	r2, r3
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c108:	4b3d      	ldr	r3, [pc, #244]	@ (800c200 <USBD_SetConfig+0x148>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f7ff f992 	bl	800b438 <USBD_SetClassConfig>
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d004      	beq.n	800c128 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f949 	bl	800c3b8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c126:	e065      	b.n	800c1f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fa10 	bl	800c54e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2203      	movs	r2, #3
 800c132:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c136:	e05d      	b.n	800c1f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fa08 	bl	800c54e <USBD_CtlSendStatus>
      break;
 800c13e:	e059      	b.n	800c1f4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c140:	4b2f      	ldr	r3, [pc, #188]	@ (800c200 <USBD_SetConfig+0x148>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d112      	bne.n	800c16e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2202      	movs	r2, #2
 800c14c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c150:	4b2b      	ldr	r3, [pc, #172]	@ (800c200 <USBD_SetConfig+0x148>)
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	461a      	mov	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c15a:	4b29      	ldr	r3, [pc, #164]	@ (800c200 <USBD_SetConfig+0x148>)
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7ff f985 	bl	800b470 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f9f1 	bl	800c54e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c16c:	e042      	b.n	800c1f4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c16e:	4b24      	ldr	r3, [pc, #144]	@ (800c200 <USBD_SetConfig+0x148>)
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	461a      	mov	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d02a      	beq.n	800c1d2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	b2db      	uxtb	r3, r3
 800c182:	4619      	mov	r1, r3
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f7ff f973 	bl	800b470 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c18a:	4b1d      	ldr	r3, [pc, #116]	@ (800c200 <USBD_SetConfig+0x148>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c194:	4b1a      	ldr	r3, [pc, #104]	@ (800c200 <USBD_SetConfig+0x148>)
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f7ff f94c 	bl	800b438 <USBD_SetClassConfig>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c1a4:	7bfb      	ldrb	r3, [r7, #15]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00f      	beq.n	800c1ca <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 f903 	bl	800c3b8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	685b      	ldr	r3, [r3, #4]
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f7ff f958 	bl	800b470 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c1c8:	e014      	b.n	800c1f4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9bf 	bl	800c54e <USBD_CtlSendStatus>
      break;
 800c1d0:	e010      	b.n	800c1f4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f9bb 	bl	800c54e <USBD_CtlSendStatus>
      break;
 800c1d8:	e00c      	b.n	800c1f4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c1da:	6839      	ldr	r1, [r7, #0]
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f000 f8eb 	bl	800c3b8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1e2:	4b07      	ldr	r3, [pc, #28]	@ (800c200 <USBD_SetConfig+0x148>)
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7ff f941 	bl	800b470 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c1ee:	2303      	movs	r3, #3
 800c1f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c1f2:	bf00      	nop
  }

  return ret;
 800c1f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3710      	adds	r7, #16
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	20000408 	.word	0x20000408

0800c204 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b082      	sub	sp, #8
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	88db      	ldrh	r3, [r3, #6]
 800c212:	2b01      	cmp	r3, #1
 800c214:	d004      	beq.n	800c220 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 f8cd 	bl	800c3b8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c21e:	e023      	b.n	800c268 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b02      	cmp	r3, #2
 800c22a:	dc02      	bgt.n	800c232 <USBD_GetConfig+0x2e>
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	dc03      	bgt.n	800c238 <USBD_GetConfig+0x34>
 800c230:	e015      	b.n	800c25e <USBD_GetConfig+0x5a>
 800c232:	2b03      	cmp	r3, #3
 800c234:	d00b      	beq.n	800c24e <USBD_GetConfig+0x4a>
 800c236:	e012      	b.n	800c25e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2200      	movs	r2, #0
 800c23c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3308      	adds	r3, #8
 800c242:	2201      	movs	r2, #1
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f927 	bl	800c49a <USBD_CtlSendData>
        break;
 800c24c:	e00c      	b.n	800c268 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3304      	adds	r3, #4
 800c252:	2201      	movs	r2, #1
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 f91f 	bl	800c49a <USBD_CtlSendData>
        break;
 800c25c:	e004      	b.n	800c268 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c25e:	6839      	ldr	r1, [r7, #0]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f8a9 	bl	800c3b8 <USBD_CtlError>
        break;
 800c266:	bf00      	nop
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c280:	b2db      	uxtb	r3, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	2b02      	cmp	r3, #2
 800c286:	d81e      	bhi.n	800c2c6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	88db      	ldrh	r3, [r3, #6]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d004      	beq.n	800c29a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c290:	6839      	ldr	r1, [r7, #0]
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f890 	bl	800c3b8 <USBD_CtlError>
        break;
 800c298:	e01a      	b.n	800c2d0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2201      	movs	r2, #1
 800c29e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d005      	beq.n	800c2b6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	68db      	ldr	r3, [r3, #12]
 800c2ae:	f043 0202 	orr.w	r2, r3, #2
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	330c      	adds	r3, #12
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	4619      	mov	r1, r3
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f8eb 	bl	800c49a <USBD_CtlSendData>
      break;
 800c2c4:	e004      	b.n	800c2d0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2c6:	6839      	ldr	r1, [r7, #0]
 800c2c8:	6878      	ldr	r0, [r7, #4]
 800c2ca:	f000 f875 	bl	800c3b8 <USBD_CtlError>
      break;
 800c2ce:	bf00      	nop
  }
}
 800c2d0:	bf00      	nop
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	885b      	ldrh	r3, [r3, #2]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d106      	bne.n	800c2f8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f92b 	bl	800c54e <USBD_CtlSendStatus>
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c310:	b2db      	uxtb	r3, r3
 800c312:	3b01      	subs	r3, #1
 800c314:	2b02      	cmp	r3, #2
 800c316:	d80b      	bhi.n	800c330 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	885b      	ldrh	r3, [r3, #2]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d10c      	bne.n	800c33a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f000 f910 	bl	800c54e <USBD_CtlSendStatus>
      }
      break;
 800c32e:	e004      	b.n	800c33a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c330:	6839      	ldr	r1, [r7, #0]
 800c332:	6878      	ldr	r0, [r7, #4]
 800c334:	f000 f840 	bl	800c3b8 <USBD_CtlError>
      break;
 800c338:	e000      	b.n	800c33c <USBD_ClrFeature+0x3c>
      break;
 800c33a:	bf00      	nop
  }
}
 800c33c:	bf00      	nop
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
 800c34c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	781a      	ldrb	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3301      	adds	r3, #1
 800c35e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	781a      	ldrb	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	3301      	adds	r3, #1
 800c36c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c36e:	68f8      	ldr	r0, [r7, #12]
 800c370:	f7ff fa92 	bl	800b898 <SWAPBYTE>
 800c374:	4603      	mov	r3, r0
 800c376:	461a      	mov	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3301      	adds	r3, #1
 800c380:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3301      	adds	r3, #1
 800c386:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff fa85 	bl	800b898 <SWAPBYTE>
 800c38e:	4603      	mov	r3, r0
 800c390:	461a      	mov	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3301      	adds	r3, #1
 800c39a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f7ff fa78 	bl	800b898 <SWAPBYTE>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	80da      	strh	r2, [r3, #6]
}
 800c3b0:	bf00      	nop
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3c2:	2180      	movs	r1, #128	@ 0x80
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	f000 fc6f 	bl	800cca8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 fc6b 	bl	800cca8 <USBD_LL_StallEP>
}
 800c3d2:	bf00      	nop
 800c3d4:	3708      	adds	r7, #8
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b086      	sub	sp, #24
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	60f8      	str	r0, [r7, #12]
 800c3e2:	60b9      	str	r1, [r7, #8]
 800c3e4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d036      	beq.n	800c45e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c3f4:	6938      	ldr	r0, [r7, #16]
 800c3f6:	f000 f836 	bl	800c466 <USBD_GetLen>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	b29a      	uxth	r2, r3
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c408:	7dfb      	ldrb	r3, [r7, #23]
 800c40a:	68ba      	ldr	r2, [r7, #8]
 800c40c:	4413      	add	r3, r2
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	7812      	ldrb	r2, [r2, #0]
 800c412:	701a      	strb	r2, [r3, #0]
  idx++;
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	3301      	adds	r3, #1
 800c418:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c41a:	7dfb      	ldrb	r3, [r7, #23]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	4413      	add	r3, r2
 800c420:	2203      	movs	r2, #3
 800c422:	701a      	strb	r2, [r3, #0]
  idx++;
 800c424:	7dfb      	ldrb	r3, [r7, #23]
 800c426:	3301      	adds	r3, #1
 800c428:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c42a:	e013      	b.n	800c454 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c42c:	7dfb      	ldrb	r3, [r7, #23]
 800c42e:	68ba      	ldr	r2, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	693a      	ldr	r2, [r7, #16]
 800c434:	7812      	ldrb	r2, [r2, #0]
 800c436:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	3301      	adds	r3, #1
 800c43c:	613b      	str	r3, [r7, #16]
    idx++;
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	3301      	adds	r3, #1
 800c442:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c444:	7dfb      	ldrb	r3, [r7, #23]
 800c446:	68ba      	ldr	r2, [r7, #8]
 800c448:	4413      	add	r3, r2
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]
    idx++;
 800c44e:	7dfb      	ldrb	r3, [r7, #23]
 800c450:	3301      	adds	r3, #1
 800c452:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d1e7      	bne.n	800c42c <USBD_GetString+0x52>
 800c45c:	e000      	b.n	800c460 <USBD_GetString+0x86>
    return;
 800c45e:	bf00      	nop
  }
}
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c466:	b480      	push	{r7}
 800c468:	b085      	sub	sp, #20
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c476:	e005      	b.n	800c484 <USBD_GetLen+0x1e>
  {
    len++;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
 800c47a:	3301      	adds	r3, #1
 800c47c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	3301      	adds	r3, #1
 800c482:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1f5      	bne.n	800c478 <USBD_GetLen+0x12>
  }

  return len;
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3714      	adds	r7, #20
 800c492:	46bd      	mov	sp, r7
 800c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c498:	4770      	bx	lr

0800c49a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	60f8      	str	r0, [r7, #12]
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2202      	movs	r2, #2
 800c4aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	68ba      	ldr	r2, [r7, #8]
 800c4be:	2100      	movs	r1, #0
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f000 fc7a 	bl	800cdba <USBD_LL_Transmit>

  return USBD_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b084      	sub	sp, #16
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68ba      	ldr	r2, [r7, #8]
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f000 fc69 	bl	800cdba <USBD_LL_Transmit>

  return USBD_OK;
 800c4e8:	2300      	movs	r3, #0
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b084      	sub	sp, #16
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	60f8      	str	r0, [r7, #12]
 800c4fa:	60b9      	str	r1, [r7, #8]
 800c4fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2203      	movs	r2, #3
 800c502:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	687a      	ldr	r2, [r7, #4]
 800c512:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	2100      	movs	r1, #0
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f000 fc6d 	bl	800cdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	68ba      	ldr	r2, [r7, #8]
 800c53c:	2100      	movs	r1, #0
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f000 fc5c 	bl	800cdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c544:	2300      	movs	r3, #0
}
 800c546:	4618      	mov	r0, r3
 800c548:	3710      	adds	r7, #16
 800c54a:	46bd      	mov	sp, r7
 800c54c:	bd80      	pop	{r7, pc}

0800c54e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c54e:	b580      	push	{r7, lr}
 800c550:	b082      	sub	sp, #8
 800c552:	af00      	add	r7, sp, #0
 800c554:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2204      	movs	r2, #4
 800c55a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c55e:	2300      	movs	r3, #0
 800c560:	2200      	movs	r2, #0
 800c562:	2100      	movs	r1, #0
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fc28 	bl	800cdba <USBD_LL_Transmit>

  return USBD_OK;
 800c56a:	2300      	movs	r3, #0
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3708      	adds	r7, #8
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b082      	sub	sp, #8
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2205      	movs	r2, #5
 800c580:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c584:	2300      	movs	r3, #0
 800c586:	2200      	movs	r2, #0
 800c588:	2100      	movs	r1, #0
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 fc36 	bl	800cdfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	4912      	ldr	r1, [pc, #72]	@ (800c5ec <MX_USB_Device_Init+0x50>)
 800c5a4:	4812      	ldr	r0, [pc, #72]	@ (800c5f0 <MX_USB_Device_Init+0x54>)
 800c5a6:	f7fe fed9 	bl	800b35c <USBD_Init>
 800c5aa:	4603      	mov	r3, r0
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c5b0:	f7f5 f899 	bl	80016e6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c5b4:	490f      	ldr	r1, [pc, #60]	@ (800c5f4 <MX_USB_Device_Init+0x58>)
 800c5b6:	480e      	ldr	r0, [pc, #56]	@ (800c5f0 <MX_USB_Device_Init+0x54>)
 800c5b8:	f7fe ff00 	bl	800b3bc <USBD_RegisterClass>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c5c2:	f7f5 f890 	bl	80016e6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c5c6:	490c      	ldr	r1, [pc, #48]	@ (800c5f8 <MX_USB_Device_Init+0x5c>)
 800c5c8:	4809      	ldr	r0, [pc, #36]	@ (800c5f0 <MX_USB_Device_Init+0x54>)
 800c5ca:	f7fe fe51 	bl	800b270 <USBD_CDC_RegisterInterface>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c5d4:	f7f5 f887 	bl	80016e6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c5d8:	4805      	ldr	r0, [pc, #20]	@ (800c5f0 <MX_USB_Device_Init+0x54>)
 800c5da:	f7fe ff16 	bl	800b40a <USBD_Start>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d001      	beq.n	800c5e8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c5e4:	f7f5 f87f 	bl	80016e6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c5e8:	bf00      	nop
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20000130 	.word	0x20000130
 800c5f0:	2000040c 	.word	0x2000040c
 800c5f4:	20000018 	.word	0x20000018
 800c5f8:	2000011c 	.word	0x2000011c

0800c5fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c600:	2200      	movs	r2, #0
 800c602:	4905      	ldr	r1, [pc, #20]	@ (800c618 <CDC_Init_FS+0x1c>)
 800c604:	4805      	ldr	r0, [pc, #20]	@ (800c61c <CDC_Init_FS+0x20>)
 800c606:	f7fe fe48 	bl	800b29a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c60a:	4905      	ldr	r1, [pc, #20]	@ (800c620 <CDC_Init_FS+0x24>)
 800c60c:	4803      	ldr	r0, [pc, #12]	@ (800c61c <CDC_Init_FS+0x20>)
 800c60e:	f7fe fe62 	bl	800b2d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c612:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c614:	4618      	mov	r0, r3
 800c616:	bd80      	pop	{r7, pc}
 800c618:	20000adc 	.word	0x20000adc
 800c61c:	2000040c 	.word	0x2000040c
 800c620:	200006dc 	.word	0x200006dc

0800c624 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c624:	b480      	push	{r7}
 800c626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c628:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	4603      	mov	r3, r0
 800c63c:	6039      	str	r1, [r7, #0]
 800c63e:	71fb      	strb	r3, [r7, #7]
 800c640:	4613      	mov	r3, r2
 800c642:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c644:	79fb      	ldrb	r3, [r7, #7]
 800c646:	2b23      	cmp	r3, #35	@ 0x23
 800c648:	d84a      	bhi.n	800c6e0 <CDC_Control_FS+0xac>
 800c64a:	a201      	add	r2, pc, #4	@ (adr r2, 800c650 <CDC_Control_FS+0x1c>)
 800c64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c650:	0800c6e1 	.word	0x0800c6e1
 800c654:	0800c6e1 	.word	0x0800c6e1
 800c658:	0800c6e1 	.word	0x0800c6e1
 800c65c:	0800c6e1 	.word	0x0800c6e1
 800c660:	0800c6e1 	.word	0x0800c6e1
 800c664:	0800c6e1 	.word	0x0800c6e1
 800c668:	0800c6e1 	.word	0x0800c6e1
 800c66c:	0800c6e1 	.word	0x0800c6e1
 800c670:	0800c6e1 	.word	0x0800c6e1
 800c674:	0800c6e1 	.word	0x0800c6e1
 800c678:	0800c6e1 	.word	0x0800c6e1
 800c67c:	0800c6e1 	.word	0x0800c6e1
 800c680:	0800c6e1 	.word	0x0800c6e1
 800c684:	0800c6e1 	.word	0x0800c6e1
 800c688:	0800c6e1 	.word	0x0800c6e1
 800c68c:	0800c6e1 	.word	0x0800c6e1
 800c690:	0800c6e1 	.word	0x0800c6e1
 800c694:	0800c6e1 	.word	0x0800c6e1
 800c698:	0800c6e1 	.word	0x0800c6e1
 800c69c:	0800c6e1 	.word	0x0800c6e1
 800c6a0:	0800c6e1 	.word	0x0800c6e1
 800c6a4:	0800c6e1 	.word	0x0800c6e1
 800c6a8:	0800c6e1 	.word	0x0800c6e1
 800c6ac:	0800c6e1 	.word	0x0800c6e1
 800c6b0:	0800c6e1 	.word	0x0800c6e1
 800c6b4:	0800c6e1 	.word	0x0800c6e1
 800c6b8:	0800c6e1 	.word	0x0800c6e1
 800c6bc:	0800c6e1 	.word	0x0800c6e1
 800c6c0:	0800c6e1 	.word	0x0800c6e1
 800c6c4:	0800c6e1 	.word	0x0800c6e1
 800c6c8:	0800c6e1 	.word	0x0800c6e1
 800c6cc:	0800c6e1 	.word	0x0800c6e1
 800c6d0:	0800c6e1 	.word	0x0800c6e1
 800c6d4:	0800c6e1 	.word	0x0800c6e1
 800c6d8:	0800c6e1 	.word	0x0800c6e1
 800c6dc:	0800c6e1 	.word	0x0800c6e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6e0:	bf00      	nop
  }

  return (USBD_OK);
 800c6e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	370c      	adds	r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ee:	4770      	bx	lr

0800c6f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6fa:	6879      	ldr	r1, [r7, #4]
 800c6fc:	4805      	ldr	r0, [pc, #20]	@ (800c714 <CDC_Receive_FS+0x24>)
 800c6fe:	f7fe fdea 	bl	800b2d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c702:	4804      	ldr	r0, [pc, #16]	@ (800c714 <CDC_Receive_FS+0x24>)
 800c704:	f7fe fe00 	bl	800b308 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c708:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	2000040c 	.word	0x2000040c

0800c718 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c718:	b480      	push	{r7}
 800c71a:	b087      	sub	sp, #28
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	60f8      	str	r0, [r7, #12]
 800c720:	60b9      	str	r1, [r7, #8]
 800c722:	4613      	mov	r3, r2
 800c724:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c72a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c72e:	4618      	mov	r0, r3
 800c730:	371c      	adds	r7, #28
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
	...

0800c73c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b083      	sub	sp, #12
 800c740:	af00      	add	r7, sp, #0
 800c742:	4603      	mov	r3, r0
 800c744:	6039      	str	r1, [r7, #0]
 800c746:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	2212      	movs	r2, #18
 800c74c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c74e:	4b03      	ldr	r3, [pc, #12]	@ (800c75c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c750:	4618      	mov	r0, r3
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	20000150 	.word	0x20000150

0800c760 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	4603      	mov	r3, r0
 800c768:	6039      	str	r1, [r7, #0]
 800c76a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	2204      	movs	r2, #4
 800c770:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c772:	4b03      	ldr	r3, [pc, #12]	@ (800c780 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	20000164 	.word	0x20000164

0800c784 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b082      	sub	sp, #8
 800c788:	af00      	add	r7, sp, #0
 800c78a:	4603      	mov	r3, r0
 800c78c:	6039      	str	r1, [r7, #0]
 800c78e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c790:	79fb      	ldrb	r3, [r7, #7]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d105      	bne.n	800c7a2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	4907      	ldr	r1, [pc, #28]	@ (800c7b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c79a:	4808      	ldr	r0, [pc, #32]	@ (800c7bc <USBD_CDC_ProductStrDescriptor+0x38>)
 800c79c:	f7ff fe1d 	bl	800c3da <USBD_GetString>
 800c7a0:	e004      	b.n	800c7ac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	4904      	ldr	r1, [pc, #16]	@ (800c7b8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c7a6:	4805      	ldr	r0, [pc, #20]	@ (800c7bc <USBD_CDC_ProductStrDescriptor+0x38>)
 800c7a8:	f7ff fe17 	bl	800c3da <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7ac:	4b02      	ldr	r3, [pc, #8]	@ (800c7b8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20000edc 	.word	0x20000edc
 800c7bc:	0800cfd4 	.word	0x0800cfd4

0800c7c0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	6039      	str	r1, [r7, #0]
 800c7ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7cc:	683a      	ldr	r2, [r7, #0]
 800c7ce:	4904      	ldr	r1, [pc, #16]	@ (800c7e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c7d0:	4804      	ldr	r0, [pc, #16]	@ (800c7e4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c7d2:	f7ff fe02 	bl	800c3da <USBD_GetString>
  return USBD_StrDesc;
 800c7d6:	4b02      	ldr	r3, [pc, #8]	@ (800c7e0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	20000edc 	.word	0x20000edc
 800c7e4:	0800cfec 	.word	0x0800cfec

0800c7e8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	6039      	str	r1, [r7, #0]
 800c7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	221a      	movs	r2, #26
 800c7f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7fa:	f000 f843 	bl	800c884 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c7fe:	4b02      	ldr	r3, [pc, #8]	@ (800c808 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c800:	4618      	mov	r0, r3
 800c802:	3708      	adds	r7, #8
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	20000168 	.word	0x20000168

0800c80c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	4603      	mov	r3, r0
 800c814:	6039      	str	r1, [r7, #0]
 800c816:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c818:	79fb      	ldrb	r3, [r7, #7]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d105      	bne.n	800c82a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	4907      	ldr	r1, [pc, #28]	@ (800c840 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c822:	4808      	ldr	r0, [pc, #32]	@ (800c844 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c824:	f7ff fdd9 	bl	800c3da <USBD_GetString>
 800c828:	e004      	b.n	800c834 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c82a:	683a      	ldr	r2, [r7, #0]
 800c82c:	4904      	ldr	r1, [pc, #16]	@ (800c840 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c82e:	4805      	ldr	r0, [pc, #20]	@ (800c844 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c830:	f7ff fdd3 	bl	800c3da <USBD_GetString>
  }
  return USBD_StrDesc;
 800c834:	4b02      	ldr	r3, [pc, #8]	@ (800c840 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	20000edc 	.word	0x20000edc
 800c844:	0800d000 	.word	0x0800d000

0800c848 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	4603      	mov	r3, r0
 800c850:	6039      	str	r1, [r7, #0]
 800c852:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c854:	79fb      	ldrb	r3, [r7, #7]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d105      	bne.n	800c866 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	4907      	ldr	r1, [pc, #28]	@ (800c87c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c85e:	4808      	ldr	r0, [pc, #32]	@ (800c880 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c860:	f7ff fdbb 	bl	800c3da <USBD_GetString>
 800c864:	e004      	b.n	800c870 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	4904      	ldr	r1, [pc, #16]	@ (800c87c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c86a:	4805      	ldr	r0, [pc, #20]	@ (800c880 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c86c:	f7ff fdb5 	bl	800c3da <USBD_GetString>
  }
  return USBD_StrDesc;
 800c870:	4b02      	ldr	r3, [pc, #8]	@ (800c87c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c872:	4618      	mov	r0, r3
 800c874:	3708      	adds	r7, #8
 800c876:	46bd      	mov	sp, r7
 800c878:	bd80      	pop	{r7, pc}
 800c87a:	bf00      	nop
 800c87c:	20000edc 	.word	0x20000edc
 800c880:	0800d00c 	.word	0x0800d00c

0800c884 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c88a:	4b0f      	ldr	r3, [pc, #60]	@ (800c8c8 <Get_SerialNum+0x44>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c890:	4b0e      	ldr	r3, [pc, #56]	@ (800c8cc <Get_SerialNum+0x48>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c896:	4b0e      	ldr	r3, [pc, #56]	@ (800c8d0 <Get_SerialNum+0x4c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c8aa:	2208      	movs	r2, #8
 800c8ac:	4909      	ldr	r1, [pc, #36]	@ (800c8d4 <Get_SerialNum+0x50>)
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	f000 f814 	bl	800c8dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8b4:	2204      	movs	r2, #4
 800c8b6:	4908      	ldr	r1, [pc, #32]	@ (800c8d8 <Get_SerialNum+0x54>)
 800c8b8:	68b8      	ldr	r0, [r7, #8]
 800c8ba:	f000 f80f 	bl	800c8dc <IntToUnicode>
  }
}
 800c8be:	bf00      	nop
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	1fff7590 	.word	0x1fff7590
 800c8cc:	1fff7594 	.word	0x1fff7594
 800c8d0:	1fff7598 	.word	0x1fff7598
 800c8d4:	2000016a 	.word	0x2000016a
 800c8d8:	2000017a 	.word	0x2000017a

0800c8dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b087      	sub	sp, #28
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	4613      	mov	r3, r2
 800c8e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	75fb      	strb	r3, [r7, #23]
 800c8f2:	e027      	b.n	800c944 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	0f1b      	lsrs	r3, r3, #28
 800c8f8:	2b09      	cmp	r3, #9
 800c8fa:	d80b      	bhi.n	800c914 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	0f1b      	lsrs	r3, r3, #28
 800c900:	b2da      	uxtb	r2, r3
 800c902:	7dfb      	ldrb	r3, [r7, #23]
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	4619      	mov	r1, r3
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	440b      	add	r3, r1
 800c90c:	3230      	adds	r2, #48	@ 0x30
 800c90e:	b2d2      	uxtb	r2, r2
 800c910:	701a      	strb	r2, [r3, #0]
 800c912:	e00a      	b.n	800c92a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	0f1b      	lsrs	r3, r3, #28
 800c918:	b2da      	uxtb	r2, r3
 800c91a:	7dfb      	ldrb	r3, [r7, #23]
 800c91c:	005b      	lsls	r3, r3, #1
 800c91e:	4619      	mov	r1, r3
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	440b      	add	r3, r1
 800c924:	3237      	adds	r2, #55	@ 0x37
 800c926:	b2d2      	uxtb	r2, r2
 800c928:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	011b      	lsls	r3, r3, #4
 800c92e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	005b      	lsls	r3, r3, #1
 800c934:	3301      	adds	r3, #1
 800c936:	68ba      	ldr	r2, [r7, #8]
 800c938:	4413      	add	r3, r2
 800c93a:	2200      	movs	r2, #0
 800c93c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
 800c940:	3301      	adds	r3, #1
 800c942:	75fb      	strb	r3, [r7, #23]
 800c944:	7dfa      	ldrb	r2, [r7, #23]
 800c946:	79fb      	ldrb	r3, [r7, #7]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d3d3      	bcc.n	800c8f4 <IntToUnicode+0x18>
  }
}
 800c94c:	bf00      	nop
 800c94e:	bf00      	nop
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
	...

0800c95c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b094      	sub	sp, #80	@ 0x50
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c964:	f107 030c 	add.w	r3, r7, #12
 800c968:	2244      	movs	r2, #68	@ 0x44
 800c96a:	2100      	movs	r1, #0
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 faf9 	bl	800cf64 <memset>
  if(pcdHandle->Instance==USB)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a15      	ldr	r2, [pc, #84]	@ (800c9cc <HAL_PCD_MspInit+0x70>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d123      	bne.n	800c9c4 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c97c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c980:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c982:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c986:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c988:	f107 030c 	add.w	r3, r7, #12
 800c98c:	4618      	mov	r0, r3
 800c98e:	f7f9 ff79 	bl	8006884 <HAL_RCCEx_PeriphCLKConfig>
 800c992:	4603      	mov	r3, r0
 800c994:	2b00      	cmp	r3, #0
 800c996:	d001      	beq.n	800c99c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800c998:	f7f4 fea5 	bl	80016e6 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c99c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d0 <HAL_PCD_MspInit+0x74>)
 800c99e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9a0:	4a0b      	ldr	r2, [pc, #44]	@ (800c9d0 <HAL_PCD_MspInit+0x74>)
 800c9a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c9a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c9a8:	4b09      	ldr	r3, [pc, #36]	@ (800c9d0 <HAL_PCD_MspInit+0x74>)
 800c9aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9b0:	60bb      	str	r3, [r7, #8]
 800c9b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	2014      	movs	r0, #20
 800c9ba:	f7f6 facc 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c9be:	2014      	movs	r0, #20
 800c9c0:	f7f6 fae3 	bl	8002f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c9c4:	bf00      	nop
 800c9c6:	3750      	adds	r7, #80	@ 0x50
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	40005c00 	.word	0x40005c00
 800c9d0:	40021000 	.word	0x40021000

0800c9d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	f7fe fd58 	bl	800b4a0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c9f0:	bf00      	nop
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b082      	sub	sp, #8
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ca0a:	78fa      	ldrb	r2, [r7, #3]
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	00db      	lsls	r3, r3, #3
 800ca16:	440b      	add	r3, r1
 800ca18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	78fb      	ldrb	r3, [r7, #3]
 800ca20:	4619      	mov	r1, r3
 800ca22:	f7fe fd92 	bl	800b54a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b082      	sub	sp, #8
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	460b      	mov	r3, r1
 800ca38:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ca40:	78fa      	ldrb	r2, [r7, #3]
 800ca42:	6879      	ldr	r1, [r7, #4]
 800ca44:	4613      	mov	r3, r2
 800ca46:	009b      	lsls	r3, r3, #2
 800ca48:	4413      	add	r3, r2
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	440b      	add	r3, r1
 800ca4e:	3324      	adds	r3, #36	@ 0x24
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	78fb      	ldrb	r3, [r7, #3]
 800ca54:	4619      	mov	r1, r3
 800ca56:	f7fe fddb 	bl	800b610 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ca5a:	bf00      	nop
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b082      	sub	sp, #8
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe feef 	bl	800b854 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ca76:	bf00      	nop
 800ca78:	3708      	adds	r7, #8
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca86:	2301      	movs	r3, #1
 800ca88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	795b      	ldrb	r3, [r3, #5]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d001      	beq.n	800ca96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca92:	f7f4 fe28 	bl	80016e6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca9c:	7bfa      	ldrb	r2, [r7, #15]
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe fe99 	bl	800b7d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe fe45 	bl	800b73c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cab2:	bf00      	nop
 800cab4:	3710      	adds	r7, #16
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b082      	sub	sp, #8
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800caca:	4618      	mov	r0, r3
 800cacc:	f7fe fe94 	bl	800b7f8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	7a5b      	ldrb	r3, [r3, #9]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d005      	beq.n	800cae4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cad8:	4b04      	ldr	r3, [pc, #16]	@ (800caec <HAL_PCD_SuspendCallback+0x30>)
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	4a03      	ldr	r2, [pc, #12]	@ (800caec <HAL_PCD_SuspendCallback+0x30>)
 800cade:	f043 0306 	orr.w	r3, r3, #6
 800cae2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cae4:	bf00      	nop
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	e000ed00 	.word	0xe000ed00

0800caf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b082      	sub	sp, #8
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	7a5b      	ldrb	r3, [r3, #9]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d007      	beq.n	800cb10 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cb00:	4b08      	ldr	r3, [pc, #32]	@ (800cb24 <HAL_PCD_ResumeCallback+0x34>)
 800cb02:	691b      	ldr	r3, [r3, #16]
 800cb04:	4a07      	ldr	r2, [pc, #28]	@ (800cb24 <HAL_PCD_ResumeCallback+0x34>)
 800cb06:	f023 0306 	bic.w	r3, r3, #6
 800cb0a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cb0c:	f000 f9f8 	bl	800cf00 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7fe fe84 	bl	800b824 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cb1c:	bf00      	nop
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	e000ed00 	.word	0xe000ed00

0800cb28 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b082      	sub	sp, #8
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cb30:	4a2b      	ldr	r2, [pc, #172]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	4a29      	ldr	r2, [pc, #164]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb3c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cb40:	4b27      	ldr	r3, [pc, #156]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb42:	4a28      	ldr	r2, [pc, #160]	@ (800cbe4 <USBD_LL_Init+0xbc>)
 800cb44:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb46:	4b26      	ldr	r3, [pc, #152]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb48:	2208      	movs	r2, #8
 800cb4a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb4c:	4b24      	ldr	r3, [pc, #144]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb4e:	2202      	movs	r2, #2
 800cb50:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb52:	4b23      	ldr	r3, [pc, #140]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb54:	2202      	movs	r2, #2
 800cb56:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cb58:	4b21      	ldr	r3, [pc, #132]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb5e:	4b20      	ldr	r3, [pc, #128]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb64:	4b1e      	ldr	r3, [pc, #120]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb66:	2200      	movs	r2, #0
 800cb68:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb70:	481b      	ldr	r0, [pc, #108]	@ (800cbe0 <USBD_LL_Init+0xb8>)
 800cb72:	f7f7 fb80 	bl	8004276 <HAL_PCD_Init>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cb7c:	f7f4 fdb3 	bl	80016e6 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb86:	2318      	movs	r3, #24
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	f7f9 f83b 	bl	8005c06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb96:	2358      	movs	r3, #88	@ 0x58
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2180      	movs	r1, #128	@ 0x80
 800cb9c:	f7f9 f833 	bl	8005c06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cba6:	23c0      	movs	r3, #192	@ 0xc0
 800cba8:	2200      	movs	r2, #0
 800cbaa:	2181      	movs	r1, #129	@ 0x81
 800cbac:	f7f9 f82b 	bl	8005c06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cbb6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	f7f9 f822 	bl	8005c06 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cbc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2182      	movs	r1, #130	@ 0x82
 800cbd0:	f7f9 f819 	bl	8005c06 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3708      	adds	r7, #8
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	200010dc 	.word	0x200010dc
 800cbe4:	40005c00 	.word	0x40005c00

0800cbe8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b084      	sub	sp, #16
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7f7 fc07 	bl	8004412 <HAL_PCD_Start>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc08:	7bfb      	ldrb	r3, [r7, #15]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f000 f97e 	bl	800cf0c <USBD_Get_USB_Status>
 800cc10:	4603      	mov	r3, r0
 800cc12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc14:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3710      	adds	r7, #16
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b084      	sub	sp, #16
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
 800cc26:	4608      	mov	r0, r1
 800cc28:	4611      	mov	r1, r2
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	70fb      	strb	r3, [r7, #3]
 800cc30:	460b      	mov	r3, r1
 800cc32:	70bb      	strb	r3, [r7, #2]
 800cc34:	4613      	mov	r3, r2
 800cc36:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc46:	78bb      	ldrb	r3, [r7, #2]
 800cc48:	883a      	ldrh	r2, [r7, #0]
 800cc4a:	78f9      	ldrb	r1, [r7, #3]
 800cc4c:	f7f7 fd4e 	bl	80046ec <HAL_PCD_EP_Open>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 f958 	bl	800cf0c <USBD_Get_USB_Status>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc60:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	460b      	mov	r3, r1
 800cc74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc76:	2300      	movs	r3, #0
 800cc78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc84:	78fa      	ldrb	r2, [r7, #3]
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7f7 fd8e 	bl	80047aa <HAL_PCD_EP_Close>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f000 f939 	bl	800cf0c <USBD_Get_USB_Status>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc9e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3710      	adds	r7, #16
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ccc2:	78fa      	ldrb	r2, [r7, #3]
 800ccc4:	4611      	mov	r1, r2
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7f7 fe37 	bl	800493a <HAL_PCD_EP_SetStall>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f000 f91a 	bl	800cf0c <USBD_Get_USB_Status>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	460b      	mov	r3, r1
 800ccf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd00:	78fa      	ldrb	r2, [r7, #3]
 800cd02:	4611      	mov	r1, r2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7f7 fe6a 	bl	80049de <HAL_PCD_EP_ClrStall>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd0e:	7bfb      	ldrb	r3, [r7, #15]
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 f8fb 	bl	800cf0c <USBD_Get_USB_Status>
 800cd16:	4603      	mov	r3, r0
 800cd18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b085      	sub	sp, #20
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd36:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	da0b      	bge.n	800cd58 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd46:	68f9      	ldr	r1, [r7, #12]
 800cd48:	4613      	mov	r3, r2
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	440b      	add	r3, r1
 800cd52:	3312      	adds	r3, #18
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	e00b      	b.n	800cd70 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd58:	78fb      	ldrb	r3, [r7, #3]
 800cd5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd5e:	68f9      	ldr	r1, [r7, #12]
 800cd60:	4613      	mov	r3, r2
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	440b      	add	r3, r1
 800cd6a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cd6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3714      	adds	r7, #20
 800cd74:	46bd      	mov	sp, r7
 800cd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd7a:	4770      	bx	lr

0800cd7c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
 800cd84:	460b      	mov	r3, r1
 800cd86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd96:	78fa      	ldrb	r2, [r7, #3]
 800cd98:	4611      	mov	r1, r2
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7f7 fc82 	bl	80046a4 <HAL_PCD_SetAddress>
 800cda0:	4603      	mov	r3, r0
 800cda2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	4618      	mov	r0, r3
 800cda8:	f000 f8b0 	bl	800cf0c <USBD_Get_USB_Status>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3710      	adds	r7, #16
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}

0800cdba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdba:	b580      	push	{r7, lr}
 800cdbc:	b086      	sub	sp, #24
 800cdbe:	af00      	add	r7, sp, #0
 800cdc0:	60f8      	str	r0, [r7, #12]
 800cdc2:	607a      	str	r2, [r7, #4]
 800cdc4:	603b      	str	r3, [r7, #0]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdd8:	7af9      	ldrb	r1, [r7, #11]
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	f7f7 fd75 	bl	80048cc <HAL_PCD_EP_Transmit>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cde6:	7dfb      	ldrb	r3, [r7, #23]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 f88f 	bl	800cf0c <USBD_Get_USB_Status>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cdf2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3718      	adds	r7, #24
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	607a      	str	r2, [r7, #4]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce1a:	7af9      	ldrb	r1, [r7, #11]
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	f7f7 fd0b 	bl	800483a <HAL_PCD_EP_Receive>
 800ce24:	4603      	mov	r3, r0
 800ce26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce28:	7dfb      	ldrb	r3, [r7, #23]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 f86e 	bl	800cf0c <USBD_Get_USB_Status>
 800ce30:	4603      	mov	r3, r0
 800ce32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce34:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce50:	78fa      	ldrb	r2, [r7, #3]
 800ce52:	4611      	mov	r1, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f7 fd21 	bl	800489c <HAL_PCD_EP_GetRxCount>
 800ce5a:	4603      	mov	r3, r0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ce70:	78fb      	ldrb	r3, [r7, #3]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d002      	beq.n	800ce7c <HAL_PCDEx_LPM_Callback+0x18>
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d013      	beq.n	800cea2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ce7a:	e023      	b.n	800cec4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	7a5b      	ldrb	r3, [r3, #9]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d007      	beq.n	800ce94 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce84:	f000 f83c 	bl	800cf00 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce88:	4b10      	ldr	r3, [pc, #64]	@ (800cecc <HAL_PCDEx_LPM_Callback+0x68>)
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	4a0f      	ldr	r2, [pc, #60]	@ (800cecc <HAL_PCDEx_LPM_Callback+0x68>)
 800ce8e:	f023 0306 	bic.w	r3, r3, #6
 800ce92:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7fe fcc2 	bl	800b824 <USBD_LL_Resume>
    break;
 800cea0:	e010      	b.n	800cec4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7fe fca5 	bl	800b7f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	7a5b      	ldrb	r3, [r3, #9]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d005      	beq.n	800cec2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceb6:	4b05      	ldr	r3, [pc, #20]	@ (800cecc <HAL_PCDEx_LPM_Callback+0x68>)
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	4a04      	ldr	r2, [pc, #16]	@ (800cecc <HAL_PCDEx_LPM_Callback+0x68>)
 800cebc:	f043 0306 	orr.w	r3, r3, #6
 800cec0:	6113      	str	r3, [r2, #16]
    break;
 800cec2:	bf00      	nop
}
 800cec4:	bf00      	nop
 800cec6:	3708      	adds	r7, #8
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	e000ed00 	.word	0xe000ed00

0800ced0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ced8:	4b03      	ldr	r3, [pc, #12]	@ (800cee8 <USBD_static_malloc+0x18>)
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	370c      	adds	r7, #12
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr
 800cee6:	bf00      	nop
 800cee8:	200013b8 	.word	0x200013b8

0800ceec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]

}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cf04:	f7f4 fba0 	bl	8001648 <SystemClock_Config>
}
 800cf08:	bf00      	nop
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	4603      	mov	r3, r0
 800cf14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf1a:	79fb      	ldrb	r3, [r7, #7]
 800cf1c:	2b03      	cmp	r3, #3
 800cf1e:	d817      	bhi.n	800cf50 <USBD_Get_USB_Status+0x44>
 800cf20:	a201      	add	r2, pc, #4	@ (adr r2, 800cf28 <USBD_Get_USB_Status+0x1c>)
 800cf22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf26:	bf00      	nop
 800cf28:	0800cf39 	.word	0x0800cf39
 800cf2c:	0800cf3f 	.word	0x0800cf3f
 800cf30:	0800cf45 	.word	0x0800cf45
 800cf34:	0800cf4b 	.word	0x0800cf4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf3c:	e00b      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	73fb      	strb	r3, [r7, #15]
    break;
 800cf42:	e008      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf44:	2301      	movs	r3, #1
 800cf46:	73fb      	strb	r3, [r7, #15]
    break;
 800cf48:	e005      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf4a:	2303      	movs	r3, #3
 800cf4c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf4e:	e002      	b.n	800cf56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf50:	2303      	movs	r3, #3
 800cf52:	73fb      	strb	r3, [r7, #15]
    break;
 800cf54:	bf00      	nop
  }
  return usb_status;
 800cf56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <memset>:
 800cf64:	4402      	add	r2, r0
 800cf66:	4603      	mov	r3, r0
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d100      	bne.n	800cf6e <memset+0xa>
 800cf6c:	4770      	bx	lr
 800cf6e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf72:	e7f9      	b.n	800cf68 <memset+0x4>

0800cf74 <__libc_init_array>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	4d0d      	ldr	r5, [pc, #52]	@ (800cfac <__libc_init_array+0x38>)
 800cf78:	4c0d      	ldr	r4, [pc, #52]	@ (800cfb0 <__libc_init_array+0x3c>)
 800cf7a:	1b64      	subs	r4, r4, r5
 800cf7c:	10a4      	asrs	r4, r4, #2
 800cf7e:	2600      	movs	r6, #0
 800cf80:	42a6      	cmp	r6, r4
 800cf82:	d109      	bne.n	800cf98 <__libc_init_array+0x24>
 800cf84:	4d0b      	ldr	r5, [pc, #44]	@ (800cfb4 <__libc_init_array+0x40>)
 800cf86:	4c0c      	ldr	r4, [pc, #48]	@ (800cfb8 <__libc_init_array+0x44>)
 800cf88:	f000 f818 	bl	800cfbc <_init>
 800cf8c:	1b64      	subs	r4, r4, r5
 800cf8e:	10a4      	asrs	r4, r4, #2
 800cf90:	2600      	movs	r6, #0
 800cf92:	42a6      	cmp	r6, r4
 800cf94:	d105      	bne.n	800cfa2 <__libc_init_array+0x2e>
 800cf96:	bd70      	pop	{r4, r5, r6, pc}
 800cf98:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf9c:	4798      	blx	r3
 800cf9e:	3601      	adds	r6, #1
 800cfa0:	e7ee      	b.n	800cf80 <__libc_init_array+0xc>
 800cfa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cfa6:	4798      	blx	r3
 800cfa8:	3601      	adds	r6, #1
 800cfaa:	e7f2      	b.n	800cf92 <__libc_init_array+0x1e>
 800cfac:	0800d064 	.word	0x0800d064
 800cfb0:	0800d064 	.word	0x0800d064
 800cfb4:	0800d064 	.word	0x0800d064
 800cfb8:	0800d068 	.word	0x0800d068

0800cfbc <_init>:
 800cfbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfbe:	bf00      	nop
 800cfc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfc2:	bc08      	pop	{r3}
 800cfc4:	469e      	mov	lr, r3
 800cfc6:	4770      	bx	lr

0800cfc8 <_fini>:
 800cfc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfca:	bf00      	nop
 800cfcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfce:	bc08      	pop	{r3}
 800cfd0:	469e      	mov	lr, r3
 800cfd2:	4770      	bx	lr
