
NEW_G4_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf54  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800d12c  0800d12c  0001d12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b4  0800d1b4  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1b4  0800d1b4  0001d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1bc  0800d1bc  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1bc  0800d1bc  0001d1bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1c0  0800d1c0  0001d1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  0800d1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001454  20000184  0800d348  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200015d8  0800d348  000215d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002607f  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000059e3  00000000  00000000  00046276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e18  00000000  00000000  0004bc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016f7  00000000  00000000  0004da78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028300  00000000  00000000  0004f16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002af43  00000000  00000000  0007746f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec181  00000000  00000000  000a23b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e78  00000000  00000000  0018e534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001963ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d114 	.word	0x0800d114

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800d114 	.word	0x0800d114

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b970 	b.w	8000cfc <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9e08      	ldr	r6, [sp, #32]
 8000a3a:	460d      	mov	r5, r1
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	460f      	mov	r7, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d14a      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4694      	mov	ip, r2
 8000a48:	d965      	bls.n	8000b16 <__udivmoddi4+0xe2>
 8000a4a:	fab2 f382 	clz	r3, r2
 8000a4e:	b143      	cbz	r3, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a54:	f1c3 0220 	rsb	r2, r3, #32
 8000a58:	409f      	lsls	r7, r3
 8000a5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a5e:	4317      	orrs	r7, r2
 8000a60:	409c      	lsls	r4, r3
 8000a62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a66:	fa1f f58c 	uxth.w	r5, ip
 8000a6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a6e:	0c22      	lsrs	r2, r4, #16
 8000a70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a78:	fb01 f005 	mul.w	r0, r1, r5
 8000a7c:	4290      	cmp	r0, r2
 8000a7e:	d90a      	bls.n	8000a96 <__udivmoddi4+0x62>
 8000a80:	eb1c 0202 	adds.w	r2, ip, r2
 8000a84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a88:	f080 811c 	bcs.w	8000cc4 <__udivmoddi4+0x290>
 8000a8c:	4290      	cmp	r0, r2
 8000a8e:	f240 8119 	bls.w	8000cc4 <__udivmoddi4+0x290>
 8000a92:	3902      	subs	r1, #2
 8000a94:	4462      	add	r2, ip
 8000a96:	1a12      	subs	r2, r2, r0
 8000a98:	b2a4      	uxth	r4, r4
 8000a9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aa2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aa6:	fb00 f505 	mul.w	r5, r0, r5
 8000aaa:	42a5      	cmp	r5, r4
 8000aac:	d90a      	bls.n	8000ac4 <__udivmoddi4+0x90>
 8000aae:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ab6:	f080 8107 	bcs.w	8000cc8 <__udivmoddi4+0x294>
 8000aba:	42a5      	cmp	r5, r4
 8000abc:	f240 8104 	bls.w	8000cc8 <__udivmoddi4+0x294>
 8000ac0:	4464      	add	r4, ip
 8000ac2:	3802      	subs	r0, #2
 8000ac4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ac8:	1b64      	subs	r4, r4, r5
 8000aca:	2100      	movs	r1, #0
 8000acc:	b11e      	cbz	r6, 8000ad6 <__udivmoddi4+0xa2>
 8000ace:	40dc      	lsrs	r4, r3
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0xbc>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ed 	beq.w	8000cbe <__udivmoddi4+0x28a>
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	e9c6 0500 	strd	r0, r5, [r6]
 8000aea:	4608      	mov	r0, r1
 8000aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af0:	fab3 f183 	clz	r1, r3
 8000af4:	2900      	cmp	r1, #0
 8000af6:	d149      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000af8:	42ab      	cmp	r3, r5
 8000afa:	d302      	bcc.n	8000b02 <__udivmoddi4+0xce>
 8000afc:	4282      	cmp	r2, r0
 8000afe:	f200 80f8 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b02:	1a84      	subs	r4, r0, r2
 8000b04:	eb65 0203 	sbc.w	r2, r5, r3
 8000b08:	2001      	movs	r0, #1
 8000b0a:	4617      	mov	r7, r2
 8000b0c:	2e00      	cmp	r6, #0
 8000b0e:	d0e2      	beq.n	8000ad6 <__udivmoddi4+0xa2>
 8000b10:	e9c6 4700 	strd	r4, r7, [r6]
 8000b14:	e7df      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000b16:	b902      	cbnz	r2, 8000b1a <__udivmoddi4+0xe6>
 8000b18:	deff      	udf	#255	; 0xff
 8000b1a:	fab2 f382 	clz	r3, r2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8090 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b24:	1a8a      	subs	r2, r1, r2
 8000b26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2a:	fa1f fe8c 	uxth.w	lr, ip
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b34:	fb07 2015 	mls	r0, r7, r5, r2
 8000b38:	0c22      	lsrs	r2, r4, #16
 8000b3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b3e:	fb0e f005 	mul.w	r0, lr, r5
 8000b42:	4290      	cmp	r0, r2
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x124>
 8000b46:	eb1c 0202 	adds.w	r2, ip, r2
 8000b4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x122>
 8000b50:	4290      	cmp	r0, r2
 8000b52:	f200 80cb 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b56:	4645      	mov	r5, r8
 8000b58:	1a12      	subs	r2, r2, r0
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b60:	fb07 2210 	mls	r2, r7, r0, r2
 8000b64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b68:	fb0e fe00 	mul.w	lr, lr, r0
 8000b6c:	45a6      	cmp	lr, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a6      	cmp	lr, r4
 8000b7c:	f200 80bb 	bhi.w	8000cf6 <__udivmoddi4+0x2c2>
 8000b80:	4610      	mov	r0, r2
 8000b82:	eba4 040e 	sub.w	r4, r4, lr
 8000b86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b8a:	e79f      	b.n	8000acc <__udivmoddi4+0x98>
 8000b8c:	f1c1 0720 	rsb	r7, r1, #32
 8000b90:	408b      	lsls	r3, r1
 8000b92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ba2:	40fd      	lsrs	r5, r7
 8000ba4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ba8:	4323      	orrs	r3, r4
 8000baa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bae:	fa1f fe8c 	uxth.w	lr, ip
 8000bb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000bb6:	0c1c      	lsrs	r4, r3, #16
 8000bb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc0:	42a5      	cmp	r5, r4
 8000bc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	42a5      	cmp	r5, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a8 0802 	sub.w	r8, r8, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	b29d      	uxth	r5, r3
 8000be8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bec:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bf8:	45a6      	cmp	lr, r4
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x1da>
 8000bfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000c00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c04:	d26c      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c06:	45a6      	cmp	lr, r4
 8000c08:	d96a      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0a:	3b02      	subs	r3, #2
 8000c0c:	4464      	add	r4, ip
 8000c0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c12:	fba3 9502 	umull	r9, r5, r3, r2
 8000c16:	eba4 040e 	sub.w	r4, r4, lr
 8000c1a:	42ac      	cmp	r4, r5
 8000c1c:	46c8      	mov	r8, r9
 8000c1e:	46ae      	mov	lr, r5
 8000c20:	d356      	bcc.n	8000cd0 <__udivmoddi4+0x29c>
 8000c22:	d053      	beq.n	8000ccc <__udivmoddi4+0x298>
 8000c24:	b156      	cbz	r6, 8000c3c <__udivmoddi4+0x208>
 8000c26:	ebb0 0208 	subs.w	r2, r0, r8
 8000c2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c32:	40ca      	lsrs	r2, r1
 8000c34:	40cc      	lsrs	r4, r1
 8000c36:	4317      	orrs	r7, r2
 8000c38:	e9c6 7400 	strd	r7, r4, [r6]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c44:	f1c3 0120 	rsb	r1, r3, #32
 8000c48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000c50:	fa25 f101 	lsr.w	r1, r5, r1
 8000c54:	409d      	lsls	r5, r3
 8000c56:	432a      	orrs	r2, r5
 8000c58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5c:	fa1f fe8c 	uxth.w	lr, ip
 8000c60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c64:	fb07 1510 	mls	r5, r7, r0, r1
 8000c68:	0c11      	lsrs	r1, r2, #16
 8000c6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c72:	428d      	cmp	r5, r1
 8000c74:	fa04 f403 	lsl.w	r4, r4, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x258>
 8000c7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c82:	d22f      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	428d      	cmp	r5, r1
 8000c86:	d92d      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	4461      	add	r1, ip
 8000c8c:	1b49      	subs	r1, r1, r5
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c94:	fb07 1115 	mls	r1, r7, r5, r1
 8000c98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca0:	4291      	cmp	r1, r2
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x282>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cac:	d216      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	4291      	cmp	r1, r2
 8000cb0:	d914      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cb2:	3d02      	subs	r5, #2
 8000cb4:	4462      	add	r2, ip
 8000cb6:	1a52      	subs	r2, r2, r1
 8000cb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cbc:	e738      	b.n	8000b30 <__udivmoddi4+0xfc>
 8000cbe:	4631      	mov	r1, r6
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e708      	b.n	8000ad6 <__udivmoddi4+0xa2>
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e6e6      	b.n	8000a96 <__udivmoddi4+0x62>
 8000cc8:	4610      	mov	r0, r2
 8000cca:	e6fb      	b.n	8000ac4 <__udivmoddi4+0x90>
 8000ccc:	4548      	cmp	r0, r9
 8000cce:	d2a9      	bcs.n	8000c24 <__udivmoddi4+0x1f0>
 8000cd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	e7a3      	b.n	8000c24 <__udivmoddi4+0x1f0>
 8000cdc:	4645      	mov	r5, r8
 8000cde:	e7ea      	b.n	8000cb6 <__udivmoddi4+0x282>
 8000ce0:	462b      	mov	r3, r5
 8000ce2:	e794      	b.n	8000c0e <__udivmoddi4+0x1da>
 8000ce4:	4640      	mov	r0, r8
 8000ce6:	e7d1      	b.n	8000c8c <__udivmoddi4+0x258>
 8000ce8:	46d0      	mov	r8, sl
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3d02      	subs	r5, #2
 8000cee:	4462      	add	r2, ip
 8000cf0:	e732      	b.n	8000b58 <__udivmoddi4+0x124>
 8000cf2:	4608      	mov	r0, r1
 8000cf4:	e70a      	b.n	8000b0c <__udivmoddi4+0xd8>
 8000cf6:	4464      	add	r4, ip
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	e742      	b.n	8000b82 <__udivmoddi4+0x14e>

08000cfc <__aeabi_idiv0>:
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop

08000d00 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2220      	movs	r2, #32
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00c f9cf 	bl	800d0bc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d1e:	4b32      	ldr	r3, [pc, #200]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d20:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000d24:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d26:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d2c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d40:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d46:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d48:	2204      	movs	r2, #4
 8000d4a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d4c:	4b26      	ldr	r3, [pc, #152]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d52:	4b25      	ldr	r3, [pc, #148]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000d58:	4b23      	ldr	r3, [pc, #140]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5e:	4b22      	ldr	r3, [pc, #136]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d66:	4b20      	ldr	r3, [pc, #128]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d72:	4b1d      	ldr	r3, [pc, #116]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d88:	4817      	ldr	r0, [pc, #92]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000d8a:	f001 fa19 	bl	80021c0 <HAL_ADC_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000d94:	f000 fcb5 	bl	8001702 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4811      	ldr	r0, [pc, #68]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000da4:	f002 f992 	bl	80030cc <HAL_ADCEx_MultiModeConfigChannel>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000dae:	f000 fca8 	bl	8001702 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_ADC1_Init+0xec>)
 8000db4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db6:	2306      	movs	r3, #6
 8000db8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLE_5;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dbe:	237f      	movs	r3, #127	; 0x7f
 8000dc0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_ADC1_Init+0xe8>)
 8000dd0:	f001 fc4c 	bl	800266c <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000dda:	f000 fc92 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3730      	adds	r7, #48	; 0x30
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200001a0 	.word	0x200001a0
 8000dec:	c3210000 	.word	0xc3210000

08000df0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2220      	movs	r2, #32
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f00c f95d 	bl	800d0bc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e04:	4a2b      	ldr	r2, [pc, #172]	; (8000eb4 <MX_ADC2_Init+0xc4>)
 8000e06:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e0e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e28:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e40:	4b1b      	ldr	r3, [pc, #108]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e6a:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e6c:	f001 f9a8 	bl	80021c0 <HAL_ADC_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000e76:	f000 fc44 	bl	8001702 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_ADC2_Init+0xc8>)
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e7e:	2306      	movs	r3, #6
 8000e80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e86:	237f      	movs	r3, #127	; 0x7f
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	4619      	mov	r1, r3
 8000e96:	4806      	ldr	r0, [pc, #24]	; (8000eb0 <MX_ADC2_Init+0xc0>)
 8000e98:	f001 fbe8 	bl	800266c <HAL_ADC_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ea2:	f000 fc2e 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	3720      	adds	r7, #32
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	2000020c 	.word	0x2000020c
 8000eb4:	50000100 	.word	0x50000100
 8000eb8:	2e300800 	.word	0x2e300800

08000ebc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b09e      	sub	sp, #120	; 0x78
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	2244      	movs	r2, #68	; 0x44
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f00c f8ed 	bl	800d0bc <memset>
  if(adcHandle->Instance==ADC1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eea:	d16f      	bne.n	8000fcc <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ef2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	f107 0320 	add.w	r3, r7, #32
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 ffb7 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f08:	f000 fbfb 	bl	8001702 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000f0c:	4b52      	ldr	r3, [pc, #328]	; (8001058 <HAL_ADC_MspInit+0x19c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a51      	ldr	r2, [pc, #324]	; (8001058 <HAL_ADC_MspInit+0x19c>)
 8000f14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000f16:	4b50      	ldr	r3, [pc, #320]	; (8001058 <HAL_ADC_MspInit+0x19c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d10b      	bne.n	8000f36 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000f1e:	4b4f      	ldr	r3, [pc, #316]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4b4c      	ldr	r3, [pc, #304]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b49      	ldr	r3, [pc, #292]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4a48      	ldr	r2, [pc, #288]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a42      	ldr	r2, [pc, #264]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b40      	ldr	r3, [pc, #256]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b3d      	ldr	r3, [pc, #244]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a3c      	ldr	r2, [pc, #240]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b3a      	ldr	r3, [pc, #232]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_7_Pin|ADC_8_Pin|ADC_9_Pin|ADC_10_Pin;
 8000f7e:	230f      	movs	r3, #15
 8000f80:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f82:	2303      	movs	r3, #3
 8000f84:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4833      	ldr	r0, [pc, #204]	; (8001060 <HAL_ADC_MspInit+0x1a4>)
 8000f92:	f002 fce3 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|OPAMP_SIG_2_Pin|OPAMP_SIG_4_Pin;
 8000f96:	230b      	movs	r3, #11
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f002 fcd6 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPAMP_SIG_1_Pin|ADC_3_Pin|DIGITAL_IO_2_Pin;
 8000fb0:	f245 0301 	movw	r3, #20481	; 0x5001
 8000fb4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4827      	ldr	r0, [pc, #156]	; (8001064 <HAL_ADC_MspInit+0x1a8>)
 8000fc6:	f002 fcc9 	bl	800395c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000fca:	e041      	b.n	8001050 <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_ADC_MspInit+0x1ac>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d13c      	bne.n	8001050 <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000fdc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f005 ff42 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 8000ff2:	f000 fb86 	bl	8001702 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <HAL_ADC_MspInit+0x19c>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	4a16      	ldr	r2, [pc, #88]	; (8001058 <HAL_ADC_MspInit+0x19c>)
 8000ffe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <HAL_ADC_MspInit+0x19c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d10b      	bne.n	8001020 <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 800100e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_ADC_MspInit+0x1a0>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPAMP_SIG_3_Pin;
 8001038:	2320      	movs	r3, #32
 800103a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800103c:	2303      	movs	r3, #3
 800103e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(OPAMP_SIG_3_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001048:	4619      	mov	r1, r3
 800104a:	4805      	ldr	r0, [pc, #20]	; (8001060 <HAL_ADC_MspInit+0x1a4>)
 800104c:	f002 fc86 	bl	800395c <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3778      	adds	r7, #120	; 0x78
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000278 	.word	0x20000278
 800105c:	40021000 	.word	0x40021000
 8001060:	48000800 	.word	0x48000800
 8001064:	48000400 	.word	0x48000400
 8001068:	50000100 	.word	0x50000100

0800106c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	2230      	movs	r2, #48	; 0x30
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00c f81f 	bl	800d0bc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800107e:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_DAC1_Init+0x80>)
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <MX_DAC1_Init+0x84>)
 8001082:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001084:	4819      	ldr	r0, [pc, #100]	; (80010ec <MX_DAC1_Init+0x80>)
 8001086:	f002 f9d4 	bl	8003432 <HAL_DAC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001090:	f000 fb37 	bl	8001702 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001094:	2302      	movs	r3, #2
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	2200      	movs	r2, #0
 80010bc:	4619      	mov	r1, r3
 80010be:	480b      	ldr	r0, [pc, #44]	; (80010ec <MX_DAC1_Init+0x80>)
 80010c0:	f002 f9da 	bl	8003478 <HAL_DAC_ConfigChannel>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80010ca:	f000 fb1a 	bl	8001702 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010ce:	463b      	mov	r3, r7
 80010d0:	2210      	movs	r2, #16
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_DAC1_Init+0x80>)
 80010d6:	f002 f9cf 	bl	8003478 <HAL_DAC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80010e0:	f000 fb0f 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80010e4:	bf00      	nop
 80010e6:	3730      	adds	r7, #48	; 0x30
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000027c 	.word	0x2000027c
 80010f0:	50000800 	.word	0x50000800

080010f4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a15      	ldr	r2, [pc, #84]	; (8001168 <HAL_DAC_MspInit+0x74>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d124      	bne.n	8001160 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_DAC_MspInit+0x78>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a14      	ldr	r2, [pc, #80]	; (800116c <HAL_DAC_MspInit+0x78>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_DAC_MspInit+0x78>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_DAC_MspInit+0x78>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_DAC_MspInit+0x78>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_DAC_MspInit+0x78>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 8001146:	2330      	movs	r3, #48	; 0x30
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f002 fbfe 	bl	800395c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	50000800 	.word	0x50000800
 800116c:	40021000 	.word	0x40021000

08001170 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
 8001184:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001186:	4b5d      	ldr	r3, [pc, #372]	; (80012fc <MX_GPIO_Init+0x18c>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a5c      	ldr	r2, [pc, #368]	; (80012fc <MX_GPIO_Init+0x18c>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b5a      	ldr	r3, [pc, #360]	; (80012fc <MX_GPIO_Init+0x18c>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800119e:	4b57      	ldr	r3, [pc, #348]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a56      	ldr	r2, [pc, #344]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b54      	ldr	r3, [pc, #336]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b51      	ldr	r3, [pc, #324]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a50      	ldr	r2, [pc, #320]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a4a      	ldr	r2, [pc, #296]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011d4:	f043 0302 	orr.w	r3, r3, #2
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b48      	ldr	r3, [pc, #288]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e6:	4b45      	ldr	r3, [pc, #276]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a44      	ldr	r2, [pc, #272]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011ec:	f043 0308 	orr.w	r3, r3, #8
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b42      	ldr	r3, [pc, #264]	; (80012fc <MX_GPIO_Init+0x18c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 80011fe:	2200      	movs	r2, #0
 8001200:	f24a 41a2 	movw	r1, #42146	; 0xa4a2
 8001204:	483e      	ldr	r0, [pc, #248]	; (8001300 <MX_GPIO_Init+0x190>)
 8001206:	f002 fd2b 	bl	8003c60 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001210:	483c      	ldr	r0, [pc, #240]	; (8001304 <MX_GPIO_Init+0x194>)
 8001212:	f002 fd25 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_EN_GPIO_Port, SD_CARD_EN_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f002 fd1e 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2104      	movs	r1, #4
 8001228:	4837      	ldr	r0, [pc, #220]	; (8001308 <MX_GPIO_Init+0x198>)
 800122a:	f002 fd19 	bl	8003c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_IO_1_Pin|COMMS_IO_2_Pin|COMMS_IO_3_Pin;
 800122e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4619      	mov	r1, r3
 8001242:	4830      	ldr	r0, [pc, #192]	; (8001304 <MX_GPIO_Init+0x194>)
 8001244:	f002 fb8a 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 8001248:	2304      	movs	r3, #4
 800124a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800125e:	f002 fb7d 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 8001262:	f24a 43a2 	movw	r3, #42146	; 0xa4a2
 8001266:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	4619      	mov	r1, r3
 800127a:	4821      	ldr	r0, [pc, #132]	; (8001300 <MX_GPIO_Init+0x190>)
 800127c:	f002 fb6e 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_1_Pin|DIGITAL_IO_6_Pin|SD_CARD_DETECT_Pin;
 8001280:	f640 2304 	movw	r3, #2564	; 0xa04
 8001284:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001286:	2300      	movs	r3, #0
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	481a      	ldr	r0, [pc, #104]	; (8001300 <MX_GPIO_Init+0x190>)
 8001296:	f002 fb61 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin;
 800129a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800129e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4814      	ldr	r0, [pc, #80]	; (8001304 <MX_GPIO_Init+0x194>)
 80012b4:	f002 fb52 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_EN_Pin;
 80012b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	2301      	movs	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CARD_EN_GPIO_Port, &GPIO_InitStruct);
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	4619      	mov	r1, r3
 80012d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d4:	f002 fb42 	bl	800395c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 80012d8:	2304      	movs	r3, #4
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <MX_GPIO_Init+0x198>)
 80012f0:	f002 fb34 	bl	800395c <HAL_GPIO_Init>

}
 80012f4:	bf00      	nop
 80012f6:	3728      	adds	r7, #40	; 0x28
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	48000400 	.word	0x48000400
 8001304:	48000800 	.word	0x48000800
 8001308:	48000c00 	.word	0x48000c00

0800130c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <MX_I2C2_Init+0x74>)
 8001312:	4a1c      	ldr	r2, [pc, #112]	; (8001384 <MX_I2C2_Init+0x78>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 8001316:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <MX_I2C2_Init+0x74>)
 8001318:	f240 1203 	movw	r2, #259	; 0x103
 800131c:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <MX_I2C2_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b16      	ldr	r3, [pc, #88]	; (8001380 <MX_I2C2_Init+0x74>)
 8001326:	2201      	movs	r2, #1
 8001328:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <MX_I2C2_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_I2C2_Init+0x74>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <MX_I2C2_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <MX_I2C2_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_I2C2_Init+0x74>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_I2C2_Init+0x74>)
 800134a:	f002 fca1 	bl	8003c90 <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 f9d5 	bl	8001702 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	4809      	ldr	r0, [pc, #36]	; (8001380 <MX_I2C2_Init+0x74>)
 800135c:	f003 f9e8 	bl	8004730 <HAL_I2CEx_ConfigAnalogFilter>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001366:	f000 f9cc 	bl	8001702 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4804      	ldr	r0, [pc, #16]	; (8001380 <MX_I2C2_Init+0x74>)
 800136e:	f003 fa2a 	bl	80047c6 <HAL_I2CEx_ConfigDigitalFilter>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001378:	f000 f9c3 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	20000290 	.word	0x20000290
 8001384:	40005800 	.word	0x40005800

08001388 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b09c      	sub	sp, #112	; 0x70
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	2244      	movs	r2, #68	; 0x44
 80013a6:	2100      	movs	r1, #0
 80013a8:	4618      	mov	r0, r3
 80013aa:	f00b fe87 	bl	800d0bc <memset>
  if(i2cHandle->Instance==I2C2)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a2d      	ldr	r2, [pc, #180]	; (8001468 <HAL_I2C_MspInit+0xe0>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d153      	bne.n	8001460 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	4618      	mov	r0, r3
 80013c6:	f005 fd53 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013d0:	f000 f997 	bl	8001702 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	4b25      	ldr	r3, [pc, #148]	; (800146c <HAL_I2C_MspInit+0xe4>)
 80013d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d8:	4a24      	ldr	r2, [pc, #144]	; (800146c <HAL_I2C_MspInit+0xe4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e0:	4b22      	ldr	r3, [pc, #136]	; (800146c <HAL_I2C_MspInit+0xe4>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_I2C_MspInit+0xe4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_I2C_MspInit+0xe4>)
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f8:	4b1c      	ldr	r3, [pc, #112]	; (800146c <HAL_I2C_MspInit+0xe4>)
 80013fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001404:	2310      	movs	r3, #16
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001408:	2312      	movs	r3, #18
 800140a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001414:	2304      	movs	r3, #4
 8001416:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001418:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800141c:	4619      	mov	r1, r3
 800141e:	4814      	ldr	r0, [pc, #80]	; (8001470 <HAL_I2C_MspInit+0xe8>)
 8001420:	f002 fa9c 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001424:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001428:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800142a:	2312      	movs	r3, #18
 800142c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001432:	2300      	movs	r3, #0
 8001434:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001436:	2304      	movs	r3, #4
 8001438:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001444:	f002 fa8a 	bl	800395c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_I2C_MspInit+0xe4>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <HAL_I2C_MspInit+0xe4>)
 800144e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001452:	6593      	str	r3, [r2, #88]	; 0x58
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <HAL_I2C_MspInit+0xe4>)
 8001456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001460:	bf00      	nop
 8001462:	3770      	adds	r7, #112	; 0x70
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40005800 	.word	0x40005800
 800146c:	40021000 	.word	0x40021000
 8001470:	48000800 	.word	0x48000800

08001474 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b088      	sub	sp, #32
 8001478:	af02      	add	r7, sp, #8
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2];
	int32_t tempC = -100;
 800147e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001482:	617b      	str	r3, [r7, #20]
	uint8_t store = 0b00000101;
 8001484:	2305      	movs	r3, #5
 8001486:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &store, 1, HAL_MAX_DELAY);
 8001488:	f107 020f 	add.w	r2, r7, #15
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	2301      	movs	r3, #1
 8001494:	2130      	movs	r1, #48	; 0x30
 8001496:	4823      	ldr	r0, [pc, #140]	; (8001524 <readMCP9804Temp+0xb0>)
 8001498:	f002 fc96 	bl	8003dc8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY);
 800149c:	f107 0210 	add.w	r2, r7, #16
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	2302      	movs	r3, #2
 80014a8:	2130      	movs	r1, #48	; 0x30
 80014aa:	481e      	ldr	r0, [pc, #120]	; (8001524 <readMCP9804Temp+0xb0>)
 80014ac:	f002 fda4 	bl	8003ff8 <HAL_I2C_Master_Receive>

	uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 80014b0:	7c3b      	ldrb	r3, [r7, #16]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	7c7b      	ldrb	r3, [r7, #17]
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21b      	sxth	r3, r3
 80014be:	827b      	strh	r3, [r7, #18]
	rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 80014c0:	8a7b      	ldrh	r3, [r7, #18]
 80014c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c6:	827b      	strh	r3, [r7, #18]
	tempC = rawTemp & 0x0FFF;
 80014c8:	8a7b      	ldrh	r3, [r7, #18]
 80014ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ce:	617b      	str	r3, [r7, #20]
	tempC /= 16.0;
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f7fe fff3 	bl	80004bc <__aeabi_i2d>
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <readMCP9804Temp+0xb4>)
 80014dc:	f7ff f982 	bl	80007e4 <__aeabi_ddiv>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff fa64 	bl	80009b4 <__aeabi_d2iz>
 80014ec:	4603      	mov	r3, r0
 80014ee:	617b      	str	r3, [r7, #20]
	if (rawTemp & 0x1000) {  // Check sign bit
 80014f0:	8a7b      	ldrh	r3, [r7, #18]
 80014f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00f      	beq.n	800151a <readMCP9804Temp+0xa6>
	  tempC -= 256.0;
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7fe ffde 	bl	80004bc <__aeabi_i2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <readMCP9804Temp+0xb8>)
 8001506:	f7fe fe8b 	bl	8000220 <__aeabi_dsub>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fa4f 	bl	80009b4 <__aeabi_d2iz>
 8001516:	4603      	mov	r3, r0
 8001518:	617b      	str	r3, [r7, #20]
	}
    return tempC;
 800151a:	697b      	ldr	r3, [r7, #20]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000290 	.word	0x20000290
 8001528:	40300000 	.word	0x40300000
 800152c:	40700000 	.word	0x40700000

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f000 fb92 	bl	8001c5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 f893 	bl	8001664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f7ff fe17 	bl	8001170 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001542:	f7ff fbdd 	bl	8000d00 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001546:	f7ff fc53 	bl	8000df0 <MX_ADC2_Init>
  MX_DAC1_Init();
 800154a:	f7ff fd8f 	bl	800106c <MX_DAC1_Init>
  MX_SPI1_Init();
 800154e:	f000 f951 	bl	80017f4 <MX_SPI1_Init>
  MX_UCPD1_Init();
 8001552:	f000 fa87 	bl	8001a64 <MX_UCPD1_Init>
  MX_I2C2_Init();
 8001556:	f7ff fed9 	bl	800130c <MX_I2C2_Init>
  MX_RTC_Init();
 800155a:	f000 f8d7 	bl	800170c <MX_RTC_Init>
  MX_USB_Device_Init();
 800155e:	f00b f8c9 	bl	800c6f4 <MX_USB_Device_Init>
  MX_UART4_Init();
 8001562:	f000 faad 	bl	8001ac0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  uint32_t status = HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	61fb      	str	r3, [r7, #28]

    int num_bytes = 4;
 800156a:	2304      	movs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]

    uint8_t dataToSend[4];
    dataToSend[0] = 0xFF;// Example data
 800156e:	23ff      	movs	r3, #255	; 0xff
 8001570:	733b      	strb	r3, [r7, #12]
    dataToSend[1] = 0x0;// Example data
 8001572:	2300      	movs	r3, #0
 8001574:	737b      	strb	r3, [r7, #13]
    dataToSend[2] = 0xF;// Example data
 8001576:	230f      	movs	r3, #15
 8001578:	73bb      	strb	r3, [r7, #14]
    dataToSend[3] = 0xF0;// Example data
 800157a:	23f0      	movs	r3, #240	; 0xf0
 800157c:	73fb      	strb	r3, [r7, #15]

    //HAL_StatusTypeDef sts = HAL_OK;

    HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 800157e:	2201      	movs	r2, #1
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	4833      	ldr	r0, [pc, #204]	; (8001650 <main+0x120>)
 8001584:	f002 fb6c 	bl	8003c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001588:	2201      	movs	r2, #1
 800158a:	2120      	movs	r1, #32
 800158c:	4830      	ldr	r0, [pc, #192]	; (8001650 <main+0x120>)
 800158e:	f002 fb67 	bl	8003c60 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001592:	2201      	movs	r2, #1
 8001594:	2104      	movs	r1, #4
 8001596:	482f      	ldr	r0, [pc, #188]	; (8001654 <main+0x124>)
 8001598:	f002 fb62 	bl	8003c60 <HAL_GPIO_WritePin>


    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800159c:	482e      	ldr	r0, [pc, #184]	; (8001658 <main+0x128>)
 800159e:	f002 fb77 	bl	8003c90 <HAL_I2C_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d004      	beq.n	80015b2 <main+0x82>
            // Initialization error
  	  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 80015a8:	2200      	movs	r2, #0
 80015aa:	2104      	movs	r1, #4
 80015ac:	4829      	ldr	r0, [pc, #164]	; (8001654 <main+0x124>)
 80015ae:	f002 fb57 	bl	8003c60 <HAL_GPIO_WritePin>
        }
    uint8_t tempRegAddr = 0x05;
 80015b2:	2305      	movs	r3, #5
 80015b4:	75fb      	strb	r3, [r7, #23]

    uint16_t AD_RES[2];
    int32_t Temperature, V_Sense, V_Ref;
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)AD_RES, 2);   // Start ADC Conversion
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2202      	movs	r2, #2
 80015bc:	4619      	mov	r1, r3
 80015be:	4827      	ldr	r0, [pc, #156]	; (800165c <main+0x12c>)
 80015c0:	f000 ff82 	bl	80024c8 <HAL_ADC_Start_DMA>

    uint8_t initials = 0b00000010;
 80015c4:	2302      	movs	r3, #2
 80015c6:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &initials, 1, HAL_MAX_DELAY);
 80015c8:	1dfa      	adds	r2, r7, #7
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	2130      	movs	r1, #48	; 0x30
 80015d4:	4820      	ldr	r0, [pc, #128]	; (8001658 <main+0x128>)
 80015d6:	f002 fbf7 	bl	8003dc8 <HAL_I2C_Master_Transmit>
    	  {
    		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
    	  }*/


    	HAL_Delay(10);
 80015da:	200a      	movs	r0, #10
 80015dc:	f000 fbb0 	bl	8001d40 <HAL_Delay>
    	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2104      	movs	r1, #4
 80015e4:	481b      	ldr	r0, [pc, #108]	; (8001654 <main+0x124>)
 80015e6:	f002 fb3b 	bl	8003c60 <HAL_GPIO_WritePin>
    	HAL_UART_Transmit(&huart4,(uint8_t*)dataToSend, 4, HAL_MAX_DELAY);
 80015ea:	f107 010c 	add.w	r1, r7, #12
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	2204      	movs	r2, #4
 80015f4:	481a      	ldr	r0, [pc, #104]	; (8001660 <main+0x130>)
 80015f6:	f006 f8b7 	bl	8007768 <HAL_UART_Transmit>
    	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2104      	movs	r1, #4
 80015fe:	4815      	ldr	r0, [pc, #84]	; (8001654 <main+0x124>)
 8001600:	f002 fb2e 	bl	8003c60 <HAL_GPIO_WritePin>

    	HAL_Delay(10);
 8001604:	200a      	movs	r0, #10
 8001606:	f000 fb9b 	bl	8001d40 <HAL_Delay>
    	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	2104      	movs	r1, #4
 800160e:	4811      	ldr	r0, [pc, #68]	; (8001654 <main+0x124>)
 8001610:	f002 fb26 	bl	8003c60 <HAL_GPIO_WritePin>
    	int32_t tempC = readMCP9804Temp(tempRegAddr);
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff2c 	bl	8001474 <readMCP9804Temp>
 800161c:	6138      	str	r0, [r7, #16]
    	dataToSend[0] = (tempC >> 24) & 0xFF;
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	0e1b      	lsrs	r3, r3, #24
 8001622:	b2db      	uxtb	r3, r3
 8001624:	733b      	strb	r3, [r7, #12]
		dataToSend[1] = (tempC >> 16) & 0xFF;
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	141b      	asrs	r3, r3, #16
 800162a:	b2db      	uxtb	r3, r3
 800162c:	737b      	strb	r3, [r7, #13]
		dataToSend[2] = (tempC >> 8) & 0xFF;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	121b      	asrs	r3, r3, #8
 8001632:	b2db      	uxtb	r3, r3
 8001634:	73bb      	strb	r3, [r7, #14]
		dataToSend[3] = tempC & 0xFF;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	73fb      	strb	r3, [r7, #15]
    	HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2104      	movs	r1, #4
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <main+0x124>)
 8001642:	f002 fb0d 	bl	8003c60 <HAL_GPIO_WritePin>

    	HAL_Delay(10);
 8001646:	200a      	movs	r0, #10
 8001648:	f000 fb7a 	bl	8001d40 <HAL_Delay>
    {// mototola or TIS versions who knows which is on or compatable with arduino due to (Frame Formats) for spi
 800164c:	e7c5      	b.n	80015da <main+0xaa>
 800164e:	bf00      	nop
 8001650:	48000400 	.word	0x48000400
 8001654:	48000c00 	.word	0x48000c00
 8001658:	20000290 	.word	0x20000290
 800165c:	200001a0 	.word	0x200001a0
 8001660:	20000370 	.word	0x20000370

08001664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b094      	sub	sp, #80	; 0x50
 8001668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	2238      	movs	r2, #56	; 0x38
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f00b fd22 	bl	800d0bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
 8001684:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001686:	f44f 7000 	mov.w	r0, #512	; 0x200
 800168a:	f004 fe1f 	bl	80062cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800168e:	230a      	movs	r3, #10
 8001690:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001692:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001698:	2340      	movs	r3, #64	; 0x40
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800169c:	2301      	movs	r3, #1
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a0:	2302      	movs	r3, #2
 80016a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016a4:	2302      	movs	r3, #2
 80016a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80016ac:	230c      	movs	r3, #12
 80016ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016b0:	2302      	movs	r3, #2
 80016b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80016b4:	2304      	movs	r3, #4
 80016b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f004 fea7 	bl	8006414 <HAL_RCC_OscConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80016cc:	f000 f819 	bl	8001702 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016d0:	230f      	movs	r3, #15
 80016d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016d4:	2301      	movs	r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80016dc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80016e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f005 f9a4 	bl	8006a38 <HAL_RCC_ClockConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016f6:	f000 f804 	bl	8001702 <Error_Handler>
  }
}
 80016fa:	bf00      	nop
 80016fc:	3750      	adds	r7, #80	; 0x50
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001706:	b672      	cpsid	i
}
 8001708:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170a:	e7fe      	b.n	800170a <Error_Handler+0x8>

0800170c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_RTC_Init+0x68>)
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <MX_RTC_Init+0x6c>)
 8001714:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_RTC_Init+0x68>)
 8001718:	2200      	movs	r2, #0
 800171a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <MX_RTC_Init+0x68>)
 800171e:	227f      	movs	r2, #127	; 0x7f
 8001720:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_RTC_Init+0x68>)
 8001724:	22ff      	movs	r2, #255	; 0xff
 8001726:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_RTC_Init+0x68>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_RTC_Init+0x68>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_RTC_Init+0x68>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_RTC_Init+0x68>)
 800173c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001740:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_RTC_Init+0x68>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <MX_RTC_Init+0x68>)
 800174a:	f005 fd81 	bl	8007250 <HAL_RTC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001754:	f7ff ffd5 	bl	8001702 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8001758:	2206      	movs	r2, #6
 800175a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_RTC_Init+0x68>)
 8001760:	f005 fe93 	bl	800748a <HAL_RTCEx_SetWakeUpTimer>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800176a:	f7ff ffca 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200002e4 	.word	0x200002e4
 8001778:	40002800 	.word	0x40002800

0800177c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b094      	sub	sp, #80	; 0x50
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2244      	movs	r2, #68	; 0x44
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f00b fc95 	bl	800d0bc <memset>
  if(rtcHandle->Instance==RTC)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a15      	ldr	r2, [pc, #84]	; (80017ec <HAL_RTC_MspInit+0x70>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d123      	bne.n	80017e4 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800179c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017a0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017a6:	64fb      	str	r3, [r7, #76]	; 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4618      	mov	r0, r3
 80017ae:	f005 fb5f 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017b8:	f7ff ffa3 	bl	8001702 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_RTC_MspInit+0x74>)
 80017be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_RTC_MspInit+0x74>)
 80017c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_RTC_MspInit+0x74>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_RTC_MspInit+0x74>)
 80017d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d6:	6593      	str	r3, [r2, #88]	; 0x58
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RTC_MspInit+0x74>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017e4:	bf00      	nop
 80017e6:	3750      	adds	r7, #80	; 0x50
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40002800 	.word	0x40002800
 80017f0:	40021000 	.word	0x40021000

080017f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017f8:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MX_SPI1_Init+0x74>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <MX_SPI1_Init+0x78>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b1a      	ldr	r3, [pc, #104]	; (8001868 <MX_SPI1_Init+0x74>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <MX_SPI1_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800180c:	4b16      	ldr	r3, [pc, #88]	; (8001868 <MX_SPI1_Init+0x74>)
 800180e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001812:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_SPI1_Init+0x74>)
 8001816:	2200      	movs	r2, #0
 8001818:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_SPI1_Init+0x74>)
 800181c:	2200      	movs	r2, #0
 800181e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_SPI1_Init+0x74>)
 8001822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001826:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_SPI1_Init+0x74>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_SPI1_Init+0x74>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_SPI1_Init+0x74>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_SPI1_Init+0x74>)
 800183c:	2200      	movs	r2, #0
 800183e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_SPI1_Init+0x74>)
 8001842:	2207      	movs	r2, #7
 8001844:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_SPI1_Init+0x74>)
 8001848:	2200      	movs	r2, #0
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_SPI1_Init+0x74>)
 800184e:	2208      	movs	r2, #8
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_SPI1_Init+0x74>)
 8001854:	f005 fe8d 	bl	8007572 <HAL_SPI_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800185e:	f7ff ff50 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	2000030c 	.word	0x2000030c
 800186c:	40013000 	.word	0x40013000

08001870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a25      	ldr	r2, [pc, #148]	; (8001924 <HAL_SPI_MspInit+0xb4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d144      	bne.n	800191c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 8001898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800189c:	6613      	str	r3, [r2, #96]	; 0x60
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 80018a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a1e      	ldr	r2, [pc, #120]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4b1c      	ldr	r3, [pc, #112]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c2:	4b19      	ldr	r3, [pc, #100]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4a18      	ldr	r2, [pc, #96]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ce:	4b16      	ldr	r3, [pc, #88]	; (8001928 <HAL_SPI_MspInit+0xb8>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018da:	23c0      	movs	r3, #192	; 0xc0
 80018dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ea:	2305      	movs	r3, #5
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f8:	f002 f830 	bl	800395c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018fc:	2308      	movs	r3, #8
 80018fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800190c:	2305      	movs	r3, #5
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <HAL_SPI_MspInit+0xbc>)
 8001918:	f002 f820 	bl	800395c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40013000 	.word	0x40013000
 8001928:	40021000 	.word	0x40021000
 800192c:	48000400 	.word	0x48000400

08001930 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <HAL_MspInit+0x44>)
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HAL_MspInit+0x44>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6613      	str	r3, [r2, #96]	; 0x60
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_MspInit+0x44>)
 8001944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_MspInit+0x44>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	4a08      	ldr	r2, [pc, #32]	; (8001974 <HAL_MspInit+0x44>)
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	6593      	str	r3, [r2, #88]	; 0x58
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_MspInit+0x44>)
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800197c:	e7fe      	b.n	800197c <NMI_Handler+0x4>

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019c4:	f000 f99e 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <USB_LP_IRQHandler+0x10>)
 80019d2:	f003 f834 	bl	8004a3e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200010dc 	.word	0x200010dc

080019e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <SystemInit+0x20>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ea:	4a05      	ldr	r2, [pc, #20]	; (8001a00 <SystemInit+0x20>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a10:	4907      	ldr	r1, [pc, #28]	; (8001a30 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a22:	68fb      	ldr	r3, [r7, #12]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	40021000 	.word	0x40021000

08001a34 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a48:	4b05      	ldr	r3, [pc, #20]	; (8001a60 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001a4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000

08001a64 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001a7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a7e:	f7ff ffd9 	bl	8001a34 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff ffbe 	bl	8001a04 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001a88:	2310      	movs	r3, #16
 8001a8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	463b      	mov	r3, r7
 8001a96:	4619      	mov	r1, r3
 8001a98:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_UCPD1_Init+0x58>)
 8001a9a:	f006 fe2c 	bl	80086f6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001a9e:	2340      	movs	r3, #64	; 0x40
 8001aa0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aaa:	463b      	mov	r3, r7
 8001aac:	4619      	mov	r1, r3
 8001aae:	4803      	ldr	r0, [pc, #12]	; (8001abc <MX_UCPD1_Init+0x58>)
 8001ab0:	f006 fe21 	bl	80086f6 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	48000400 	.word	0x48000400

08001ac0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <MX_UART4_Init+0x90>)
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <MX_UART4_Init+0x94>)
 8001ac8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <MX_UART4_Init+0x90>)
 8001acc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ad0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	4b1f      	ldr	r3, [pc, #124]	; (8001b50 <MX_UART4_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <MX_UART4_Init+0x90>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ade:	4b1c      	ldr	r3, [pc, #112]	; (8001b50 <MX_UART4_Init+0x90>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <MX_UART4_Init+0x90>)
 8001ae6:	220c      	movs	r2, #12
 8001ae8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aea:	4b19      	ldr	r3, [pc, #100]	; (8001b50 <MX_UART4_Init+0x90>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af0:	4b17      	ldr	r3, [pc, #92]	; (8001b50 <MX_UART4_Init+0x90>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <MX_UART4_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001afc:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <MX_UART4_Init+0x90>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <MX_UART4_Init+0x90>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b08:	4811      	ldr	r0, [pc, #68]	; (8001b50 <MX_UART4_Init+0x90>)
 8001b0a:	f005 fddd 	bl	80076c8 <HAL_UART_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001b14:	f7ff fdf5 	bl	8001702 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	480d      	ldr	r0, [pc, #52]	; (8001b50 <MX_UART4_Init+0x90>)
 8001b1c:	f006 fbd6 	bl	80082cc <HAL_UARTEx_SetTxFifoThreshold>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b26:	f7ff fdec 	bl	8001702 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4808      	ldr	r0, [pc, #32]	; (8001b50 <MX_UART4_Init+0x90>)
 8001b2e:	f006 fc0b 	bl	8008348 <HAL_UARTEx_SetRxFifoThreshold>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b38:	f7ff fde3 	bl	8001702 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b3c:	4804      	ldr	r0, [pc, #16]	; (8001b50 <MX_UART4_Init+0x90>)
 8001b3e:	f006 fb8c 	bl	800825a <HAL_UARTEx_DisableFifoMode>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b48:	f7ff fddb 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000370 	.word	0x20000370
 8001b54:	40004c00 	.word	0x40004c00

08001b58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b09a      	sub	sp, #104	; 0x68
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b70:	f107 0310 	add.w	r3, r7, #16
 8001b74:	2244      	movs	r2, #68	; 0x44
 8001b76:	2100      	movs	r1, #0
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f00b fa9f 	bl	800d0bc <memset>
  if(uartHandle->Instance==UART4)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1f      	ldr	r2, [pc, #124]	; (8001c00 <HAL_UART_MspInit+0xa8>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d136      	bne.n	8001bf6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 f96b 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ba0:	f7ff fdaf 	bl	8001702 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ba4:	4b17      	ldr	r3, [pc, #92]	; (8001c04 <HAL_UART_MspInit+0xac>)
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	4a16      	ldr	r2, [pc, #88]	; (8001c04 <HAL_UART_MspInit+0xac>)
 8001baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bae:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <HAL_UART_MspInit+0xac>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <HAL_UART_MspInit+0xac>)
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_UART_MspInit+0xac>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <HAL_UART_MspInit+0xac>)
 8001bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001bd4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bd8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be2:	2300      	movs	r3, #0
 8001be4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001be6:	2305      	movs	r3, #5
 8001be8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <HAL_UART_MspInit+0xb0>)
 8001bf2:	f001 feb3 	bl	800395c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001bf6:	bf00      	nop
 8001bf8:	3768      	adds	r7, #104	; 0x68
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40004c00 	.word	0x40004c00
 8001c04:	40021000 	.word	0x40021000
 8001c08:	48000800 	.word	0x48000800

08001c0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c10:	f7ff fee6 	bl	80019e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c16:	490d      	ldr	r1, [pc, #52]	; (8001c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c18:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <LoopForever+0xe>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	; (8001c58 <LoopForever+0x16>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f00b fa47 	bl	800d0cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c3e:	f7ff fc77 	bl	8001530 <main>

08001c42 <LoopForever>:

LoopForever:
    b LoopForever
 8001c42:	e7fe      	b.n	8001c42 <LoopForever>
  ldr   r0, =_estack
 8001c44:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001c50:	0800d1c4 	.word	0x0800d1c4
  ldr r2, =_sbss
 8001c54:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001c58:	200015d8 	.word	0x200015d8

08001c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC1_2_IRQHandler>

08001c5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c68:	2003      	movs	r0, #3
 8001c6a:	f001 fba3 	bl	80033b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c6e:	200f      	movs	r0, #15
 8001c70:	f000 f80e 	bl	8001c90 <HAL_InitTick>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	71fb      	strb	r3, [r7, #7]
 8001c7e:	e001      	b.n	8001c84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c80:	f7ff fe56 	bl	8001930 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c84:	79fb      	ldrb	r3, [r7, #7]

}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c9c:	4b16      	ldr	r3, [pc, #88]	; (8001cf8 <HAL_InitTick+0x68>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d022      	beq.n	8001cea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001ca4:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_InitTick+0x6c>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b13      	ldr	r3, [pc, #76]	; (8001cf8 <HAL_InitTick+0x68>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f001 fbae 	bl	800341a <HAL_SYSTICK_Config>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	d809      	bhi.n	8001cde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd2:	f001 fb7a 	bl	80033ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_InitTick+0x70>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e007      	b.n	8001cee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	e004      	b.n	8001cee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
 8001ce8:	e001      	b.n	8001cee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_IncTick+0x1c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_IncTick+0x20>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_IncTick+0x1c>)
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	20000404 	.word	0x20000404
 8001d24:	20000008 	.word	0x20000008

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	; (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000404 	.word	0x20000404

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d004      	beq.n	8001d64 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <HAL_Delay+0x40>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4413      	add	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d64:	bf00      	nop
 8001d66:	f7ff ffdf 	bl	8001d28 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d8f7      	bhi.n	8001d66 <HAL_Delay+0x26>
  {
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000008 	.word	0x20000008

08001d84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3360      	adds	r3, #96	; 0x60
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <LL_ADC_SetOffset+0x44>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	03fff000 	.word	0x03fff000

08001e34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3360      	adds	r3, #96	; 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3360      	adds	r3, #96	; 0x60
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b087      	sub	sp, #28
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3360      	adds	r3, #96	; 0x60
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3360      	adds	r3, #96	; 0x60
 8001edc:	461a      	mov	r2, r3
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b083      	sub	sp, #12
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	615a      	str	r2, [r3, #20]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b087      	sub	sp, #28
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3330      	adds	r3, #48	; 0x30
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	4413      	add	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	211f      	movs	r1, #31
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	401a      	ands	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	f003 011f 	and.w	r1, r3, #31
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	f003 031f 	and.w	r3, r3, #31
 8001f90:	fa01 f303 	lsl.w	r3, r1, r3
 8001f94:	431a      	orrs	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b087      	sub	sp, #28
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	60f8      	str	r0, [r7, #12]
 8001fae:	60b9      	str	r1, [r7, #8]
 8001fb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3314      	adds	r3, #20
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	0e5b      	lsrs	r3, r3, #25
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	f003 0304 	and.w	r3, r3, #4
 8001fc2:	4413      	add	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	0d1b      	lsrs	r3, r3, #20
 8001fce:	f003 031f 	and.w	r3, r3, #31
 8001fd2:	2107      	movs	r1, #7
 8001fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	401a      	ands	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	0d1b      	lsrs	r3, r3, #20
 8001fe0:	f003 031f 	and.w	r3, r3, #31
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	431a      	orrs	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ff0:	bf00      	nop
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002014:	43db      	mvns	r3, r3
 8002016:	401a      	ands	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0318 	and.w	r3, r3, #24
 800201e:	4908      	ldr	r1, [pc, #32]	; (8002040 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002020:	40d9      	lsrs	r1, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	400b      	ands	r3, r1
 8002026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202a:	431a      	orrs	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002032:	bf00      	nop
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	0007ffff 	.word	0x0007ffff

08002044 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 031f 	and.w	r3, r3, #31
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002070:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6093      	str	r3, [r2, #8]
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002094:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002098:	d101      	bne.n	800209e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80020bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020e8:	d101      	bne.n	80020ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800210c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002110:	f043 0201 	orr.w	r2, r3, #1
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <LL_ADC_IsEnabled+0x18>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <LL_ADC_IsEnabled+0x1a>
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800215a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800215e:	f043 0204 	orr.w	r2, r3, #4
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0304 	and.w	r3, r3, #4
 8002182:	2b04      	cmp	r3, #4
 8002184:	d101      	bne.n	800218a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0308 	and.w	r3, r3, #8
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d101      	bne.n	80021b0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b089      	sub	sp, #36	; 0x24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e167      	b.n	80024aa <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d109      	bne.n	80021fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fe fe67 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff3f 	bl	8002084 <LL_ADC_IsDeepPowerDownEnabled>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff ff25 	bl	8002060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff5a 	bl	80020d4 <LL_ADC_IsInternalRegulatorEnabled>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d115      	bne.n	8002252 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff3e 	bl	80020ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002230:	4ba0      	ldr	r3, [pc, #640]	; (80024b4 <HAL_ADC_Init+0x2f4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	099b      	lsrs	r3, r3, #6
 8002236:	4aa0      	ldr	r2, [pc, #640]	; (80024b8 <HAL_ADC_Init+0x2f8>)
 8002238:	fba2 2303 	umull	r2, r3, r2, r3
 800223c:	099b      	lsrs	r3, r3, #6
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002244:	e002      	b.n	800224c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3b01      	subs	r3, #1
 800224a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff3c 	bl	80020d4 <LL_ADC_IsInternalRegulatorEnabled>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10d      	bne.n	800227e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff75 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 8002288:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	2b00      	cmp	r3, #0
 8002294:	f040 8100 	bne.w	8002498 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	2b00      	cmp	r3, #0
 800229c:	f040 80fc 	bne.w	8002498 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80022a8:	f043 0202 	orr.w	r2, r3, #2
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff35 	bl	8002124 <LL_ADC_IsEnabled>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d111      	bne.n	80022e4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80022c4:	f7ff ff2e 	bl	8002124 <LL_ADC_IsEnabled>
 80022c8:	4604      	mov	r4, r0
 80022ca:	487c      	ldr	r0, [pc, #496]	; (80024bc <HAL_ADC_Init+0x2fc>)
 80022cc:	f7ff ff2a 	bl	8002124 <LL_ADC_IsEnabled>
 80022d0:	4603      	mov	r3, r0
 80022d2:	4323      	orrs	r3, r4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4619      	mov	r1, r3
 80022de:	4878      	ldr	r0, [pc, #480]	; (80024c0 <HAL_ADC_Init+0x300>)
 80022e0:	f7ff fd50 	bl	8001d84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	7f5b      	ldrb	r3, [r3, #29]
 80022e8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022ee:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022f4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022fa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002302:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800230e:	2b01      	cmp	r3, #1
 8002310:	d106      	bne.n	8002320 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002316:	3b01      	subs	r3, #1
 8002318:	045b      	lsls	r3, r3, #17
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4313      	orrs	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	4b60      	ldr	r3, [pc, #384]	; (80024c4 <HAL_ADC_Init+0x304>)
 8002344:	4013      	ands	r3, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	430b      	orrs	r3, r1
 800234e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff14 	bl	8002198 <LL_ADC_INJ_IsConversionOngoing>
 8002370:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d16d      	bne.n	8002454 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d16a      	bne.n	8002454 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002382:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800238a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800239a:	f023 0302 	bic.w	r3, r3, #2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	69b9      	ldr	r1, [r7, #24]
 80023a4:	430b      	orrs	r3, r1
 80023a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d017      	beq.n	80023e0 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6911      	ldr	r1, [r2, #16]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	430b      	orrs	r3, r1
 80023da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80023de:	e013      	b.n	8002408 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002400:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002404:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800240e:	2b01      	cmp	r3, #1
 8002410:	d118      	bne.n	8002444 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002434:	430a      	orrs	r2, r1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	e007      	b.n	8002454 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	691a      	ldr	r2, [r3, #16]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d10c      	bne.n	8002476 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002462:	f023 010f 	bic.w	r1, r3, #15
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
 8002474:	e007      	b.n	8002486 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 020f 	bic.w	r2, r2, #15
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	f023 0303 	bic.w	r3, r3, #3
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	65da      	str	r2, [r3, #92]	; 0x5c
 8002496:	e007      	b.n	80024a8 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	f043 0210 	orr.w	r2, r3, #16
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd90      	pop	{r4, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000000 	.word	0x20000000
 80024b8:	053e2d63 	.word	0x053e2d63
 80024bc:	50000100 	.word	0x50000100
 80024c0:	50000300 	.word	0x50000300
 80024c4:	fff04007 	.word	0xfff04007

080024c8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024d4:	4851      	ldr	r0, [pc, #324]	; (800261c <HAL_ADC_Start_DMA+0x154>)
 80024d6:	f7ff fdb5 	bl	8002044 <LL_ADC_GetMultimode>
 80024da:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff fe46 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f040 808f 	bne.w	800260c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d101      	bne.n	80024fc <HAL_ADC_Start_DMA+0x34>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e08a      	b.n	8002612 <HAL_ADC_Start_DMA+0x14a>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d005      	beq.n	8002516 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	2b05      	cmp	r3, #5
 800250e:	d002      	beq.n	8002516 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	2b09      	cmp	r3, #9
 8002514:	d173      	bne.n	80025fe <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fc98 	bl	8002e4c <ADC_Enable>
 800251c:	4603      	mov	r3, r0
 800251e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d166      	bne.n	80025f4 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800252a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800252e:	f023 0301 	bic.w	r3, r3, #1
 8002532:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a38      	ldr	r2, [pc, #224]	; (8002620 <HAL_ADC_Start_DMA+0x158>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d002      	beq.n	800254a <HAL_ADC_Start_DMA+0x82>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	e001      	b.n	800254e <HAL_ADC_Start_DMA+0x86>
 800254a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	4293      	cmp	r3, r2
 8002554:	d002      	beq.n	800255c <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002560:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002578:	f023 0206 	bic.w	r2, r3, #6
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	661a      	str	r2, [r3, #96]	; 0x60
 8002580:	e002      	b.n	8002588 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_ADC_Start_DMA+0x15c>)
 800258e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002594:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_ADC_Start_DMA+0x160>)
 8002596:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_ADC_Start_DMA+0x164>)
 800259e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	221c      	movs	r2, #28
 80025a6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0210 	orr.w	r2, r2, #16
 80025be:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0201 	orr.w	r2, r2, #1
 80025ce:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3340      	adds	r3, #64	; 0x40
 80025da:	4619      	mov	r1, r3
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f001 f902 	bl	80037e8 <HAL_DMA_Start_IT>
 80025e4:	4603      	mov	r3, r0
 80025e6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fdac 	bl	800214a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025f2:	e00d      	b.n	8002610 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80025fc:	e008      	b.n	8002610 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800260a:	e001      	b.n	8002610 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800260c:	2302      	movs	r3, #2
 800260e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002610:	7dfb      	ldrb	r3, [r7, #23]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	50000300 	.word	0x50000300
 8002620:	50000100 	.word	0x50000100
 8002624:	08002f59 	.word	0x08002f59
 8002628:	08003031 	.word	0x08003031
 800262c:	0800304d 	.word	0x0800304d

08002630 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0b6      	sub	sp, #216	; 0xd8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800267c:	2300      	movs	r3, #0
 800267e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x22>
 800268a:	2302      	movs	r3, #2
 800268c:	e3c8      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x7b4>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fd69 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 83ad 	bne.w	8002e02 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	461a      	mov	r2, r3
 80026b6:	f7ff fc4a 	bl	8001f4e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fd57 	bl	8002172 <LL_ADC_REG_IsConversionOngoing>
 80026c4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fd63 	bl	8002198 <LL_ADC_INJ_IsConversionOngoing>
 80026d2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 81d9 	bne.w	8002a92 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f040 81d4 	bne.w	8002a92 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026f2:	d10f      	bne.n	8002714 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2200      	movs	r2, #0
 80026fe:	4619      	mov	r1, r3
 8002700:	f7ff fc51 	bl	8001fa6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff fbf8 	bl	8001f02 <LL_ADC_SetSamplingTimeCommonConfig>
 8002712:	e00e      	b.n	8002732 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6819      	ldr	r1, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	461a      	mov	r2, r3
 8002722:	f7ff fc40 	bl	8001fa6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff fbe8 	bl	8001f02 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	08db      	lsrs	r3, r3, #3
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b04      	cmp	r3, #4
 8002752:	d022      	beq.n	800279a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6919      	ldr	r1, [r3, #16]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002764:	f7ff fb42 	bl	8001dec <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	461a      	mov	r2, r3
 8002776:	f7ff fb8e 	bl	8001e96 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6818      	ldr	r0, [r3, #0]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002786:	2b01      	cmp	r3, #1
 8002788:	d102      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x124>
 800278a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278e:	e000      	b.n	8002792 <HAL_ADC_ConfigChannel+0x126>
 8002790:	2300      	movs	r3, #0
 8002792:	461a      	mov	r2, r3
 8002794:	f7ff fb9a 	bl	8001ecc <LL_ADC_SetOffsetSaturation>
 8002798:	e17b      	b.n	8002a92 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fb47 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 80027a6:	4603      	mov	r3, r0
 80027a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x15a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2100      	movs	r1, #0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fb3c 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 80027bc:	4603      	mov	r3, r0
 80027be:	0e9b      	lsrs	r3, r3, #26
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	e01e      	b.n	8002804 <HAL_ADC_ConfigChannel+0x198>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fb31 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 80027d2:	4603      	mov	r3, r0
 80027d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80027dc:	fa93 f3a3 	rbit	r3, r3
 80027e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80027e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80027f4:	2320      	movs	r3, #32
 80027f6:	e004      	b.n	8002802 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80027f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800280c:	2b00      	cmp	r3, #0
 800280e:	d105      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1b0>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	0e9b      	lsrs	r3, r3, #26
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	e018      	b.n	800284e <HAL_ADC_ConfigChannel+0x1e2>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002824:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002828:	fa93 f3a3 	rbit	r3, r3
 800282c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002838:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002840:	2320      	movs	r3, #32
 8002842:	e004      	b.n	800284e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002844:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800284e:	429a      	cmp	r2, r3
 8002850:	d106      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fb00 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2101      	movs	r1, #1
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff fae4 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10a      	bne.n	800288c <HAL_ADC_ConfigChannel+0x220>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fad9 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	0e9b      	lsrs	r3, r3, #26
 8002886:	f003 021f 	and.w	r2, r3, #31
 800288a:	e01e      	b.n	80028ca <HAL_ADC_ConfigChannel+0x25e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff face 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80028aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80028ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80028b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80028ba:	2320      	movs	r3, #32
 80028bc:	e004      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80028be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d105      	bne.n	80028e2 <HAL_ADC_ConfigChannel+0x276>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	e018      	b.n	8002914 <HAL_ADC_ConfigChannel+0x2a8>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ee:	fa93 f3a3 	rbit	r3, r3
 80028f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80028f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80028fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80028fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002906:	2320      	movs	r3, #32
 8002908:	e004      	b.n	8002914 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800290a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002914:	429a      	cmp	r2, r3
 8002916:	d106      	bne.n	8002926 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2200      	movs	r2, #0
 800291e:	2101      	movs	r1, #1
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fa9d 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2102      	movs	r1, #2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fa81 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002932:	4603      	mov	r3, r0
 8002934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <HAL_ADC_ConfigChannel+0x2e6>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2102      	movs	r1, #2
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fa76 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	0e9b      	lsrs	r3, r3, #26
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	e01e      	b.n	8002990 <HAL_ADC_ConfigChannel+0x324>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2102      	movs	r1, #2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fa6b 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002964:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002974:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002978:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002980:	2320      	movs	r3, #32
 8002982:	e004      	b.n	800298e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002984:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002998:	2b00      	cmp	r3, #0
 800299a:	d105      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x33c>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0e9b      	lsrs	r3, r3, #26
 80029a2:	f003 031f 	and.w	r3, r3, #31
 80029a6:	e016      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x36a>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80029ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80029c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80029c8:	2320      	movs	r3, #32
 80029ca:	e004      	b.n	80029d6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029d0:	fab3 f383 	clz	r3, r3
 80029d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d106      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fa3c 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2103      	movs	r1, #3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fa20 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10a      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x3a8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2103      	movs	r1, #3
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fa15 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	0e9b      	lsrs	r3, r3, #26
 8002a0e:	f003 021f 	and.w	r2, r3, #31
 8002a12:	e017      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x3d8>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2103      	movs	r1, #3
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fa0a 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a26:	fa93 f3a3 	rbit	r3, r3
 8002a2a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a2e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a36:	2320      	movs	r3, #32
 8002a38:	e003      	b.n	8002a42 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_ConfigChannel+0x3f0>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	0e9b      	lsrs	r3, r3, #26
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	e011      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x414>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d101      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002a74:	2320      	movs	r3, #32
 8002a76:	e003      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2103      	movs	r1, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f9e7 	bl	8001e60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fb44 	bl	8002124 <LL_ADC_IsEnabled>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 8140 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6819      	ldr	r1, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f7ff faa3 	bl	8001ffc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4a8f      	ldr	r2, [pc, #572]	; (8002cf8 <HAL_ADC_ConfigChannel+0x68c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	f040 8131 	bne.w	8002d24 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x47e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	0e9b      	lsrs	r3, r3, #26
 8002ad8:	3301      	adds	r3, #1
 8002ada:	f003 031f 	and.w	r3, r3, #31
 8002ade:	2b09      	cmp	r3, #9
 8002ae0:	bf94      	ite	ls
 8002ae2:	2301      	movls	r3, #1
 8002ae4:	2300      	movhi	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e019      	b.n	8002b1e <HAL_ADC_ConfigChannel+0x4b2>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002afa:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e003      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	3301      	adds	r3, #1
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	bf94      	ite	ls
 8002b18:	2301      	movls	r3, #1
 8002b1a:	2300      	movhi	r3, #0
 8002b1c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d079      	beq.n	8002c16 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d107      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x4d2>
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0e9b      	lsrs	r3, r3, #26
 8002b34:	3301      	adds	r3, #1
 8002b36:	069b      	lsls	r3, r3, #26
 8002b38:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b3c:	e015      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x4fe>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b46:	fa93 f3a3 	rbit	r3, r3
 8002b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e003      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3301      	adds	r3, #1
 8002b64:	069b      	lsls	r3, r3, #26
 8002b66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d109      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x51e>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	0e9b      	lsrs	r3, r3, #26
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	f003 031f 	and.w	r3, r3, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	e017      	b.n	8002bba <HAL_ADC_ConfigChannel+0x54e>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002b9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	e003      	b.n	8002bae <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ba8:	fab3 f383 	clz	r3, r3
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	3301      	adds	r3, #1
 8002bb0:	f003 031f 	and.w	r3, r3, #31
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bba:	ea42 0103 	orr.w	r1, r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x574>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0e9b      	lsrs	r3, r3, #26
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f003 021f 	and.w	r2, r3, #31
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	051b      	lsls	r3, r3, #20
 8002bde:	e018      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x5a6>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be8:	fa93 f3a3 	rbit	r3, r3
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	e003      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	3301      	adds	r3, #1
 8002c06:	f003 021f 	and.w	r2, r3, #31
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	4413      	add	r3, r2
 8002c10:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c12:	430b      	orrs	r3, r1
 8002c14:	e081      	b.n	8002d1a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d107      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x5c6>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	0e9b      	lsrs	r3, r3, #26
 8002c28:	3301      	adds	r3, #1
 8002c2a:	069b      	lsls	r3, r3, #26
 8002c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c30:	e015      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x5f2>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	069b      	lsls	r3, r3, #26
 8002c5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d109      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x612>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	3301      	adds	r3, #1
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2101      	movs	r1, #1
 8002c78:	fa01 f303 	lsl.w	r3, r1, r3
 8002c7c:	e017      	b.n	8002cae <HAL_ADC_ConfigChannel+0x642>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	fa93 f3a3 	rbit	r3, r3
 8002c8a:	61fb      	str	r3, [r7, #28]
  return result;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e003      	b.n	8002ca2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	f003 031f 	and.w	r3, r3, #31
 8002ca8:	2101      	movs	r1, #1
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	ea42 0103 	orr.w	r1, r2, r3
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10d      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x66e>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	0e9b      	lsrs	r3, r3, #26
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	f003 021f 	and.w	r2, r3, #31
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	3b1e      	subs	r3, #30
 8002cd2:	051b      	lsls	r3, r3, #20
 8002cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cd8:	e01e      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x6ac>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	613b      	str	r3, [r7, #16]
  return result;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e006      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x698>
 8002cf6:	bf00      	nop
 8002cf8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	3301      	adds	r3, #1
 8002d06:	f003 021f 	and.w	r2, r3, #31
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	3b1e      	subs	r3, #30
 8002d12:	051b      	lsls	r3, r3, #20
 8002d14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7ff f941 	bl	8001fa6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d071      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d30:	483e      	ldr	r0, [pc, #248]	; (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d32:	f7ff f84d 	bl	8001dd0 <LL_ADC_GetCommonPathInternalCh>
 8002d36:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	; (8002e30 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_ADC_ConfigChannel+0x6e2>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3a      	ldr	r2, [pc, #232]	; (8002e34 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d127      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d121      	bne.n	8002d9e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d62:	d157      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	482f      	ldr	r0, [pc, #188]	; (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d70:	f7ff f81b 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d74:	4b30      	ldr	r3, [pc, #192]	; (8002e38 <HAL_ADC_ConfigChannel+0x7cc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	099b      	lsrs	r3, r3, #6
 8002d7a:	4a30      	ldr	r2, [pc, #192]	; (8002e3c <HAL_ADC_ConfigChannel+0x7d0>)
 8002d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4613      	mov	r3, r2
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d8e:	e002      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f9      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d9c:	e03a      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a27      	ldr	r2, [pc, #156]	; (8002e40 <HAL_ADC_ConfigChannel+0x7d4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d113      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a22      	ldr	r2, [pc, #136]	; (8002e44 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02a      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4818      	ldr	r0, [pc, #96]	; (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002dca:	f7fe ffee 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dce:	e021      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1c      	ldr	r2, [pc, #112]	; (8002e48 <HAL_ADC_ConfigChannel+0x7dc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d11c      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a16      	ldr	r2, [pc, #88]	; (8002e44 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d011      	beq.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002df4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480c      	ldr	r0, [pc, #48]	; (8002e2c <HAL_ADC_ConfigChannel+0x7c0>)
 8002dfc:	f7fe ffd5 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
 8002e00:	e008      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e1c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	37d8      	adds	r7, #216	; 0xd8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	80080000 	.word	0x80080000
 8002e2c:	50000300 	.word	0x50000300
 8002e30:	c3210000 	.word	0xc3210000
 8002e34:	90c00010 	.word	0x90c00010
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	053e2d63 	.word	0x053e2d63
 8002e40:	c7520000 	.word	0xc7520000
 8002e44:	50000100 	.word	0x50000100
 8002e48:	cb840000 	.word	0xcb840000

08002e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff f961 	bl	8002124 <LL_ADC_IsEnabled>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d169      	bne.n	8002f3c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <ADC_Enable+0xfc>)
 8002e70:	4013      	ands	r3, r2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00d      	beq.n	8002e92 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	f043 0210 	orr.w	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e055      	b.n	8002f3e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7ff f930 	bl	80020fc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e9c:	482b      	ldr	r0, [pc, #172]	; (8002f4c <ADC_Enable+0x100>)
 8002e9e:	f7fe ff97 	bl	8001dd0 <LL_ADC_GetCommonPathInternalCh>
 8002ea2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002ea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d013      	beq.n	8002ed4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002eac:	4b28      	ldr	r3, [pc, #160]	; (8002f50 <ADC_Enable+0x104>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	099b      	lsrs	r3, r3, #6
 8002eb2:	4a28      	ldr	r2, [pc, #160]	; (8002f54 <ADC_Enable+0x108>)
 8002eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb8:	099b      	lsrs	r3, r3, #6
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ec6:	e002      	b.n	8002ece <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1f9      	bne.n	8002ec8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002ed4:	f7fe ff28 	bl	8001d28 <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eda:	e028      	b.n	8002f2e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff f91f 	bl	8002124 <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d104      	bne.n	8002ef6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f903 	bl	80020fc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ef6:	f7fe ff17 	bl	8001d28 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d914      	bls.n	8002f2e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d00d      	beq.n	8002f2e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	f043 0210 	orr.w	r2, r3, #16
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e007      	b.n	8002f3e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d1cf      	bne.n	8002edc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	8000003f 	.word	0x8000003f
 8002f4c:	50000300 	.word	0x50000300
 8002f50:	20000000 	.word	0x20000000
 8002f54:	053e2d63 	.word	0x053e2d63

08002f58 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d14b      	bne.n	800300a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d021      	beq.n	8002fd0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fe ffc9 	bl	8001f28 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d032      	beq.n	8003002 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d12b      	bne.n	8003002 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d11f      	bne.n	8003002 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	f043 0201 	orr.w	r2, r3, #1
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fce:	e018      	b.n	8003002 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d111      	bne.n	8003002 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d105      	bne.n	8003002 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	f043 0201 	orr.w	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f7ff fb14 	bl	8002630 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003008:	e00e      	b.n	8003028 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f7ff fb1e 	bl	8002658 <HAL_ADC_ErrorCallback>
}
 800301c:	e004      	b.n	8003028 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7ff fb00 	bl	8002644 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003044:	bf00      	nop
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	f043 0204 	orr.w	r2, r3, #4
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7ff faf0 	bl	8002658 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <LL_ADC_IsEnabled>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <LL_ADC_IsEnabled+0x18>
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <LL_ADC_IsEnabled+0x1a>
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d101      	bne.n	80030be <LL_ADC_REG_IsConversionOngoing+0x18>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b0a1      	sub	sp, #132	; 0x84
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e08b      	b.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80030f2:	2300      	movs	r3, #0
 80030f4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80030f6:	2300      	movs	r3, #0
 80030f8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003102:	d102      	bne.n	800310a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003104:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	e001      	b.n	800310e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	f043 0220 	orr.w	r2, r3, #32
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e06a      	b.n	8003202 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff ffb9 	bl	80030a6 <LL_ADC_REG_IsConversionOngoing>
 8003134:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffb3 	bl	80030a6 <LL_ADC_REG_IsConversionOngoing>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d14c      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003146:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003148:	2b00      	cmp	r3, #0
 800314a:	d149      	bne.n	80031e0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800314c:	4b30      	ldr	r3, [pc, #192]	; (8003210 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800314e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d028      	beq.n	80031aa <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	6859      	ldr	r1, [r3, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800316a:	035b      	lsls	r3, r3, #13
 800316c:	430b      	orrs	r3, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003172:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003174:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003178:	f7ff ff82 	bl	8003080 <LL_ADC_IsEnabled>
 800317c:	4604      	mov	r4, r0
 800317e:	4823      	ldr	r0, [pc, #140]	; (800320c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003180:	f7ff ff7e 	bl	8003080 <LL_ADC_IsEnabled>
 8003184:	4603      	mov	r3, r0
 8003186:	4323      	orrs	r3, r4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d133      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800318c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003194:	f023 030f 	bic.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	6811      	ldr	r1, [r2, #0]
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	6892      	ldr	r2, [r2, #8]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031a8:	e024      	b.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80031aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80031b6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80031ba:	f7ff ff61 	bl	8003080 <LL_ADC_IsEnabled>
 80031be:	4604      	mov	r4, r0
 80031c0:	4812      	ldr	r0, [pc, #72]	; (800320c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80031c2:	f7ff ff5d 	bl	8003080 <LL_ADC_IsEnabled>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4323      	orrs	r3, r4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d112      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80031ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80031d6:	f023 030f 	bic.w	r3, r3, #15
 80031da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80031dc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031de:	e009      	b.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	f043 0220 	orr.w	r2, r3, #32
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80031f2:	e000      	b.n	80031f6 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80031f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003202:	4618      	mov	r0, r3
 8003204:	3784      	adds	r7, #132	; 0x84
 8003206:	46bd      	mov	sp, r7
 8003208:	bd90      	pop	{r4, r7, pc}
 800320a:	bf00      	nop
 800320c:	50000100 	.word	0x50000100
 8003210:	50000300 	.word	0x50000300

08003214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003230:	4013      	ands	r3, r2
 8003232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800323c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <__NVIC_SetPriorityGrouping+0x44>)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	60d3      	str	r3, [r2, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <__NVIC_GetPriorityGrouping+0x18>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	0a1b      	lsrs	r3, r3, #8
 8003266:	f003 0307 	and.w	r3, r3, #7
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000ed00 	.word	0xe000ed00

08003278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	db0b      	blt.n	80032a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	f003 021f 	and.w	r2, r3, #31
 8003290:	4907      	ldr	r1, [pc, #28]	; (80032b0 <__NVIC_EnableIRQ+0x38>)
 8003292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003296:	095b      	lsrs	r3, r3, #5
 8003298:	2001      	movs	r0, #1
 800329a:	fa00 f202 	lsl.w	r2, r0, r2
 800329e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	e000e100 	.word	0xe000e100

080032b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	6039      	str	r1, [r7, #0]
 80032be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	db0a      	blt.n	80032de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	490c      	ldr	r1, [pc, #48]	; (8003300 <__NVIC_SetPriority+0x4c>)
 80032ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d2:	0112      	lsls	r2, r2, #4
 80032d4:	b2d2      	uxtb	r2, r2
 80032d6:	440b      	add	r3, r1
 80032d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032dc:	e00a      	b.n	80032f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	b2da      	uxtb	r2, r3
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <__NVIC_SetPriority+0x50>)
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	3b04      	subs	r3, #4
 80032ec:	0112      	lsls	r2, r2, #4
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	440b      	add	r3, r1
 80032f2:	761a      	strb	r2, [r3, #24]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100
 8003304:	e000ed00 	.word	0xe000ed00

08003308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003308:	b480      	push	{r7}
 800330a:	b089      	sub	sp, #36	; 0x24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f1c3 0307 	rsb	r3, r3, #7
 8003322:	2b04      	cmp	r3, #4
 8003324:	bf28      	it	cs
 8003326:	2304      	movcs	r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	3304      	adds	r3, #4
 800332e:	2b06      	cmp	r3, #6
 8003330:	d902      	bls.n	8003338 <NVIC_EncodePriority+0x30>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	3b03      	subs	r3, #3
 8003336:	e000      	b.n	800333a <NVIC_EncodePriority+0x32>
 8003338:	2300      	movs	r3, #0
 800333a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800333c:	f04f 32ff 	mov.w	r2, #4294967295
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	401a      	ands	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003350:	f04f 31ff 	mov.w	r1, #4294967295
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	fa01 f303 	lsl.w	r3, r1, r3
 800335a:	43d9      	mvns	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003360:	4313      	orrs	r3, r2
         );
}
 8003362:	4618      	mov	r0, r3
 8003364:	3724      	adds	r7, #36	; 0x24
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003380:	d301      	bcc.n	8003386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003382:	2301      	movs	r3, #1
 8003384:	e00f      	b.n	80033a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003386:	4a0a      	ldr	r2, [pc, #40]	; (80033b0 <SysTick_Config+0x40>)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	3b01      	subs	r3, #1
 800338c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800338e:	210f      	movs	r1, #15
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	f7ff ff8e 	bl	80032b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003398:	4b05      	ldr	r3, [pc, #20]	; (80033b0 <SysTick_Config+0x40>)
 800339a:	2200      	movs	r2, #0
 800339c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800339e:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <SysTick_Config+0x40>)
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff ff29 	bl	8003214 <__NVIC_SetPriorityGrouping>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b086      	sub	sp, #24
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
 80033d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d8:	f7ff ff40 	bl	800325c <__NVIC_GetPriorityGrouping>
 80033dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	6978      	ldr	r0, [r7, #20]
 80033e4:	f7ff ff90 	bl	8003308 <NVIC_EncodePriority>
 80033e8:	4602      	mov	r2, r0
 80033ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff5f 	bl	80032b4 <__NVIC_SetPriority>
}
 80033f6:	bf00      	nop
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	4603      	mov	r3, r0
 8003406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff33 	bl	8003278 <__NVIC_EnableIRQ>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff ffa4 	bl	8003370 <SysTick_Config>
 8003428:	4603      	mov	r3, r0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3708      	adds	r7, #8
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e014      	b.n	800346e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	791b      	ldrb	r3, [r3, #4]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fd fe4d 	bl	80010f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b08a      	sub	sp, #40	; 0x28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003484:	2300      	movs	r3, #0
 8003486:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_DAC_ConfigChannel+0x1c>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e19e      	b.n	80037d6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	795b      	ldrb	r3, [r3, #5]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_DAC_ConfigChannel+0x2c>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e198      	b.n	80037d6 <HAL_DAC_ConfigChannel+0x35e>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2202      	movs	r2, #2
 80034ae:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d17a      	bne.n	80035ae <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80034b8:	f7fe fc36 	bl	8001d28 <HAL_GetTick>
 80034bc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d13d      	bne.n	8003540 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034c4:	e018      	b.n	80034f8 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80034c6:	f7fe fc2f 	bl	8001d28 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d911      	bls.n	80034f8 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f043 0208 	orr.w	r2, r3, #8
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2203      	movs	r2, #3
 80034f2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e16e      	b.n	80037d6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1df      	bne.n	80034c6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800350e:	641a      	str	r2, [r3, #64]	; 0x40
 8003510:	e020      	b.n	8003554 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003512:	f7fe fc09 	bl	8001d28 <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d90f      	bls.n	8003540 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	2b00      	cmp	r3, #0
 8003528:	da0a      	bge.n	8003540 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f043 0208 	orr.w	r2, r3, #8
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2203      	movs	r2, #3
 800353a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e14a      	b.n	80037d6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003546:	2b00      	cmp	r3, #0
 8003548:	dbe3      	blt.n	8003512 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003552:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003564:	fa01 f303 	lsl.w	r3, r1, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	ea02 0103 	and.w	r1, r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f003 0310 	and.w	r3, r3, #16
 8003578:	409a      	lsls	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	21ff      	movs	r1, #255	; 0xff
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	ea02 0103 	and.w	r1, r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	409a      	lsls	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d11d      	bne.n	80035f2 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	221f      	movs	r2, #31
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43db      	mvns	r3, r3
 80035cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ce:	4013      	ands	r3, r2
 80035d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e6:	4313      	orrs	r3, r2
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2207      	movs	r2, #7
 8003602:	fa02 f303 	lsl.w	r3, r2, r3
 8003606:	43db      	mvns	r3, r3
 8003608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800360a:	4013      	ands	r3, r2
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d102      	bne.n	800361c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003616:	2300      	movs	r3, #0
 8003618:	623b      	str	r3, [r7, #32]
 800361a:	e00f      	b.n	800363c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d102      	bne.n	800362a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003624:	2301      	movs	r3, #1
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	e008      	b.n	800363c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d102      	bne.n	8003638 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003632:	2301      	movs	r3, #1
 8003634:	623b      	str	r3, [r7, #32]
 8003636:	e001      	b.n	800363c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	6a3a      	ldr	r2, [r7, #32]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365e:	4013      	ands	r3, r2
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	791b      	ldrb	r3, [r3, #4]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HAL_DAC_ConfigChannel+0x1f8>
 800366a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800366e:	e000      	b.n	8003672 <HAL_DAC_ConfigChannel+0x1fa>
 8003670:	2300      	movs	r3, #0
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368a:	4013      	ands	r3, r2
 800368c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	795b      	ldrb	r3, [r3, #5]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_DAC_ConfigChannel+0x224>
 8003696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800369a:	e000      	b.n	800369e <HAL_DAC_ConfigChannel+0x226>
 800369c:	2300      	movs	r3, #0
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d114      	bne.n	80036de <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80036b4:	f003 fb5e 	bl	8006d74 <HAL_RCC_GetHCLKFreq>
 80036b8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4a48      	ldr	r2, [pc, #288]	; (80037e0 <HAL_DAC_ConfigChannel+0x368>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d904      	bls.n	80036cc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
 80036ca:	e00f      	b.n	80036ec <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	4a45      	ldr	r2, [pc, #276]	; (80037e4 <HAL_DAC_ConfigChannel+0x36c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d90a      	bls.n	80036ea <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
 80036dc:	e006      	b.n	80036ec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e4:	4313      	orrs	r3, r2
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
 80036e8:	e000      	b.n	80036ec <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80036ea:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fa:	4313      	orrs	r3, r2
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003704:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	43da      	mvns	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	400a      	ands	r2, r1
 8003722:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373e:	4013      	ands	r3, r2
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003756:	4313      	orrs	r3, r2
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6819      	ldr	r1, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	22c0      	movs	r2, #192	; 0xc0
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	43da      	mvns	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	400a      	ands	r2, r1
 800377c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	ea02 0103 	and.w	r1, r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	409a      	lsls	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80037d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	09896800 	.word	0x09896800
 80037e4:	04c4b400 	.word	0x04c4b400

080037e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_DMA_Start_IT+0x20>
 8003804:	2302      	movs	r3, #2
 8003806:	e066      	b.n	80038d6 <HAL_DMA_Start_IT+0xee>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d155      	bne.n	80038c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f84c 	bl	80038de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	2b00      	cmp	r3, #0
 800384c:	d008      	beq.n	8003860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f042 020e 	orr.w	r2, r2, #14
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e00f      	b.n	8003880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0204 	bic.w	r2, r2, #4
 800386e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 020a 	orr.w	r2, r2, #10
 800387e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d007      	beq.n	800389e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003898:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800389c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d007      	beq.n	80038b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0201 	orr.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e005      	b.n	80038d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038d0:	2302      	movs	r3, #2
 80038d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038f4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003906:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	2101      	movs	r1, #1
 8003916:	fa01 f202 	lsl.w	r2, r1, r2
 800391a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b10      	cmp	r3, #16
 800392a:	d108      	bne.n	800393e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800393c:	e007      	b.n	800394e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
	...

0800395c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800396a:	e15a      	b.n	8003c22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	2101      	movs	r1, #1
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa01 f303 	lsl.w	r3, r1, r3
 8003978:	4013      	ands	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 814c 	beq.w	8003c1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 0303 	and.w	r3, r3, #3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d005      	beq.n	800399c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003998:	2b02      	cmp	r3, #2
 800399a:	d130      	bne.n	80039fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	2203      	movs	r2, #3
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80039d2:	2201      	movs	r2, #1
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	f003 0201 	and.w	r2, r3, #1
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d017      	beq.n	8003a3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	2203      	movs	r2, #3
 8003a16:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d123      	bne.n	8003a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	08da      	lsrs	r2, r3, #3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3208      	adds	r2, #8
 8003a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	220f      	movs	r2, #15
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4013      	ands	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	691a      	ldr	r2, [r3, #16]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	08da      	lsrs	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3208      	adds	r2, #8
 8003a88:	6939      	ldr	r1, [r7, #16]
 8003a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	2203      	movs	r2, #3
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 0203 	and.w	r2, r3, #3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 80a6 	beq.w	8003c1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ad0:	4b5b      	ldr	r3, [pc, #364]	; (8003c40 <HAL_GPIO_Init+0x2e4>)
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad4:	4a5a      	ldr	r2, [pc, #360]	; (8003c40 <HAL_GPIO_Init+0x2e4>)
 8003ad6:	f043 0301 	orr.w	r3, r3, #1
 8003ada:	6613      	str	r3, [r2, #96]	; 0x60
 8003adc:	4b58      	ldr	r3, [pc, #352]	; (8003c40 <HAL_GPIO_Init+0x2e4>)
 8003ade:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ae8:	4a56      	ldr	r2, [pc, #344]	; (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	3302      	adds	r3, #2
 8003af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	220f      	movs	r2, #15
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b12:	d01f      	beq.n	8003b54 <HAL_GPIO_Init+0x1f8>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a4c      	ldr	r2, [pc, #304]	; (8003c48 <HAL_GPIO_Init+0x2ec>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d019      	beq.n	8003b50 <HAL_GPIO_Init+0x1f4>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a4b      	ldr	r2, [pc, #300]	; (8003c4c <HAL_GPIO_Init+0x2f0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d013      	beq.n	8003b4c <HAL_GPIO_Init+0x1f0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a4a      	ldr	r2, [pc, #296]	; (8003c50 <HAL_GPIO_Init+0x2f4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d00d      	beq.n	8003b48 <HAL_GPIO_Init+0x1ec>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a49      	ldr	r2, [pc, #292]	; (8003c54 <HAL_GPIO_Init+0x2f8>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d007      	beq.n	8003b44 <HAL_GPIO_Init+0x1e8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a48      	ldr	r2, [pc, #288]	; (8003c58 <HAL_GPIO_Init+0x2fc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <HAL_GPIO_Init+0x1e4>
 8003b3c:	2305      	movs	r3, #5
 8003b3e:	e00a      	b.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b40:	2306      	movs	r3, #6
 8003b42:	e008      	b.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b44:	2304      	movs	r3, #4
 8003b46:	e006      	b.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e004      	b.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e002      	b.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b50:	2301      	movs	r3, #1
 8003b52:	e000      	b.n	8003b56 <HAL_GPIO_Init+0x1fa>
 8003b54:	2300      	movs	r3, #0
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	f002 0203 	and.w	r2, r2, #3
 8003b5c:	0092      	lsls	r2, r2, #2
 8003b5e:	4093      	lsls	r3, r2
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b66:	4937      	ldr	r1, [pc, #220]	; (8003c44 <HAL_GPIO_Init+0x2e8>)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b74:	4b39      	ldr	r3, [pc, #228]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b98:	4a30      	ldr	r2, [pc, #192]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b9e:	4b2f      	ldr	r3, [pc, #188]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4013      	ands	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bc2:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bec:	4a1b      	ldr	r2, [pc, #108]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003bf2:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <HAL_GPIO_Init+0x300>)
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f47f ae9d 	bne.w	800396c <HAL_GPIO_Init+0x10>
  }
}
 8003c32:	bf00      	nop
 8003c34:	bf00      	nop
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40010000 	.word	0x40010000
 8003c48:	48000400 	.word	0x48000400
 8003c4c:	48000800 	.word	0x48000800
 8003c50:	48000c00 	.word	0x48000c00
 8003c54:	48001000 	.word	0x48001000
 8003c58:	48001400 	.word	0x48001400
 8003c5c:	40010400 	.word	0x40010400

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c7c:	e002      	b.n	8003c84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e08d      	b.n	8003dbe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd fb66 	bl	8001388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2224      	movs	r2, #36	; 0x24
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ce0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cf0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d107      	bne.n	8003d0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	689a      	ldr	r2, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d06:	609a      	str	r2, [r3, #8]
 8003d08:	e006      	b.n	8003d18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d108      	bne.n	8003d32 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685a      	ldr	r2, [r3, #4]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	e007      	b.n	8003d42 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d54:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d64:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	430a      	orrs	r2, r1
 8003d7e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69d9      	ldr	r1, [r3, #28]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1a      	ldr	r2, [r3, #32]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0201 	orr.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
	...

08003dc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	817b      	strh	r3, [r7, #10]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b20      	cmp	r3, #32
 8003de6:	f040 80fd 	bne.w	8003fe4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_I2C_Master_Transmit+0x30>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e0f6      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x21e>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e00:	f7fd ff92 	bl	8001d28 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2319      	movs	r3, #25
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fa0a 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0e1      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2221      	movs	r2, #33	; 0x21
 8003e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2210      	movs	r2, #16
 8003e2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	893a      	ldrh	r2, [r7, #8]
 8003e42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2bff      	cmp	r3, #255	; 0xff
 8003e52:	d906      	bls.n	8003e62 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	22ff      	movs	r2, #255	; 0xff
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	e007      	b.n	8003e72 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003e6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e70:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d024      	beq.n	8003ec4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	781a      	ldrb	r2, [r3, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	8979      	ldrh	r1, [r7, #10]
 8003eb6:	4b4e      	ldr	r3, [pc, #312]	; (8003ff0 <HAL_I2C_Master_Transmit+0x228>)
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fc05 	bl	80046cc <I2C_TransferConfig>
 8003ec2:	e066      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	8979      	ldrh	r1, [r7, #10]
 8003ecc:	4b48      	ldr	r3, [pc, #288]	; (8003ff0 <HAL_I2C_Master_Transmit+0x228>)
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fbfa 	bl	80046cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ed8:	e05b      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	6a39      	ldr	r1, [r7, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f9fd 	bl	80042de <I2C_WaitOnTXISFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e07b      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	781a      	ldrb	r2, [r3, #0]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d034      	beq.n	8003f92 <HAL_I2C_Master_Transmit+0x1ca>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d130      	bne.n	8003f92 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f976 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e04d      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2bff      	cmp	r3, #255	; 0xff
 8003f52:	d90e      	bls.n	8003f72 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	22ff      	movs	r2, #255	; 0xff
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	8979      	ldrh	r1, [r7, #10]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fbae 	bl	80046cc <I2C_TransferConfig>
 8003f70:	e00f      	b.n	8003f92 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	8979      	ldrh	r1, [r7, #10]
 8003f84:	2300      	movs	r3, #0
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fb9d 	bl	80046cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d19e      	bne.n	8003eda <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	6a39      	ldr	r1, [r7, #32]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f9e3 	bl	800436c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e01a      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <HAL_I2C_Master_Transmit+0x22c>)
 8003fc4:	400b      	ands	r3, r1
 8003fc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	80002000 	.word	0x80002000
 8003ff4:	fe00e800 	.word	0xfe00e800

08003ff8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	461a      	mov	r2, r3
 8004004:	460b      	mov	r3, r1
 8004006:	817b      	strh	r3, [r7, #10]
 8004008:	4613      	mov	r3, r2
 800400a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b20      	cmp	r3, #32
 8004016:	f040 80db 	bne.w	80041d0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_I2C_Master_Receive+0x30>
 8004024:	2302      	movs	r3, #2
 8004026:	e0d4      	b.n	80041d2 <HAL_I2C_Master_Receive+0x1da>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004030:	f7fd fe7a 	bl	8001d28 <HAL_GetTick>
 8004034:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2319      	movs	r3, #25
 800403c:	2201      	movs	r2, #1
 800403e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 f8f2 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0bf      	b.n	80041d2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2222      	movs	r2, #34	; 0x22
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2210      	movs	r2, #16
 800405e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	893a      	ldrh	r2, [r7, #8]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2bff      	cmp	r3, #255	; 0xff
 8004082:	d90e      	bls.n	80040a2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	22ff      	movs	r2, #255	; 0xff
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	b2da      	uxtb	r2, r3
 8004090:	8979      	ldrh	r1, [r7, #10]
 8004092:	4b52      	ldr	r3, [pc, #328]	; (80041dc <HAL_I2C_Master_Receive+0x1e4>)
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800409a:	68f8      	ldr	r0, [r7, #12]
 800409c:	f000 fb16 	bl	80046cc <I2C_TransferConfig>
 80040a0:	e06d      	b.n	800417e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	8979      	ldrh	r1, [r7, #10]
 80040b4:	4b49      	ldr	r3, [pc, #292]	; (80041dc <HAL_I2C_Master_Receive+0x1e4>)
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f000 fb05 	bl	80046cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80040c2:	e05c      	b.n	800417e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c4:	697a      	ldr	r2, [r7, #20]
 80040c6:	6a39      	ldr	r1, [r7, #32]
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f993 	bl	80043f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e07c      	b.n	80041d2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d034      	beq.n	800417e <HAL_I2C_Master_Receive+0x186>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d130      	bne.n	800417e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	2200      	movs	r2, #0
 8004124:	2180      	movs	r1, #128	; 0x80
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f880 	bl	800422c <I2C_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e04d      	b.n	80041d2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800413a:	b29b      	uxth	r3, r3
 800413c:	2bff      	cmp	r3, #255	; 0xff
 800413e:	d90e      	bls.n	800415e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	22ff      	movs	r2, #255	; 0xff
 8004144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414a:	b2da      	uxtb	r2, r3
 800414c:	8979      	ldrh	r1, [r7, #10]
 800414e:	2300      	movs	r3, #0
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f000 fab8 	bl	80046cc <I2C_TransferConfig>
 800415c:	e00f      	b.n	800417e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29a      	uxth	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	b2da      	uxtb	r2, r3
 800416e:	8979      	ldrh	r1, [r7, #10]
 8004170:	2300      	movs	r3, #0
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 faa7 	bl	80046cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d19d      	bne.n	80040c4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	6a39      	ldr	r1, [r7, #32]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f8ed 	bl	800436c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e01a      	b.n	80041d2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2220      	movs	r2, #32
 80041a2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6859      	ldr	r1, [r3, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <HAL_I2C_Master_Receive+0x1e8>)
 80041b0:	400b      	ands	r3, r1
 80041b2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e000      	b.n	80041d2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80041d0:	2302      	movs	r3, #2
  }
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	80002400 	.word	0x80002400
 80041e0:	fe00e800 	.word	0xfe00e800

080041e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d103      	bne.n	8004202 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2200      	movs	r2, #0
 8004200:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d007      	beq.n	8004220 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	619a      	str	r2, [r3, #24]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	603b      	str	r3, [r7, #0]
 8004238:	4613      	mov	r3, r2
 800423a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800423c:	e03b      	b.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f962 	bl	800450c <I2C_IsErrorOccurred>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e041      	b.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d02d      	beq.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fd fd65 	bl	8001d28 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnFlagUntilTimeout+0x44>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d122      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	699a      	ldr	r2, [r3, #24]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	4013      	ands	r3, r2
 800427a:	68ba      	ldr	r2, [r7, #8]
 800427c:	429a      	cmp	r2, r3
 800427e:	bf0c      	ite	eq
 8004280:	2301      	moveq	r3, #1
 8004282:	2300      	movne	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	461a      	mov	r2, r3
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	429a      	cmp	r2, r3
 800428c:	d113      	bne.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f043 0220 	orr.w	r2, r3, #32
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e00f      	b.n	80042d6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	699a      	ldr	r2, [r3, #24]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4013      	ands	r3, r2
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	461a      	mov	r2, r3
 80042ce:	79fb      	ldrb	r3, [r7, #7]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d0b4      	beq.n	800423e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b084      	sub	sp, #16
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	60b9      	str	r1, [r7, #8]
 80042e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042ea:	e033      	b.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f90b 	bl	800450c <I2C_IsErrorOccurred>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e031      	b.n	8004364 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d025      	beq.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fd fd0e 	bl	8001d28 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d11a      	bne.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b02      	cmp	r3, #2
 800432a:	d013      	beq.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e007      	b.n	8004364 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d1c4      	bne.n	80042ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004378:	e02f      	b.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f8c4 	bl	800450c <I2C_IsErrorOccurred>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e02d      	b.n	80043ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fd fccb 	bl	8001d28 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d11a      	bne.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0320 	and.w	r3, r3, #32
 80043ae:	2b20      	cmp	r3, #32
 80043b0:	d013      	beq.n	80043da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	f043 0220 	orr.w	r2, r3, #32
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e007      	b.n	80043ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	f003 0320 	and.w	r3, r3, #32
 80043e4:	2b20      	cmp	r3, #32
 80043e6:	d1c8      	bne.n	800437a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	2300      	movs	r3, #0
 8004402:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004404:	e071      	b.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f87e 	bl	800450c <I2C_IsErrorOccurred>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	f003 0320 	and.w	r3, r3, #32
 8004424:	2b20      	cmp	r3, #32
 8004426:	d13b      	bne.n	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d138      	bne.n	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b04      	cmp	r3, #4
 800443a:	d105      	bne.n	8004448 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004444:	2300      	movs	r3, #0
 8004446:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b10      	cmp	r3, #16
 8004454:	d121      	bne.n	800449a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2210      	movs	r2, #16
 800445c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2204      	movs	r2, #4
 8004462:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2220      	movs	r2, #32
 800446a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6859      	ldr	r1, [r3, #4]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	4b24      	ldr	r3, [pc, #144]	; (8004508 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004478:	400b      	ands	r3, r1
 800447a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	75fb      	strb	r3, [r7, #23]
 8004498:	e002      	b.n	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80044a0:	f7fd fc42 	bl	8001d28 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d119      	bne.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80044b6:	7dfb      	ldrb	r3, [r7, #23]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d116      	bne.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d00f      	beq.n	80044ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	f043 0220 	orr.w	r2, r3, #32
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b04      	cmp	r3, #4
 80044f6:	d002      	beq.n	80044fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d083      	beq.n	8004406 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80044fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	fe00e800 	.word	0xfe00e800

0800450c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004526:	2300      	movs	r3, #0
 8004528:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	d068      	beq.n	800460a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2210      	movs	r2, #16
 800453e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004540:	e049      	b.n	80045d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004548:	d045      	beq.n	80045d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800454a:	f7fd fbed 	bl	8001d28 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	429a      	cmp	r2, r3
 8004558:	d302      	bcc.n	8004560 <I2C_IsErrorOccurred+0x54>
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d13a      	bne.n	80045d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800456a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004572:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800457e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004582:	d121      	bne.n	80045c8 <I2C_IsErrorOccurred+0xbc>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458a:	d01d      	beq.n	80045c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800458c:	7cfb      	ldrb	r3, [r7, #19]
 800458e:	2b20      	cmp	r3, #32
 8004590:	d01a      	beq.n	80045c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045a2:	f7fd fbc1 	bl	8001d28 <HAL_GetTick>
 80045a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045a8:	e00e      	b.n	80045c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045aa:	f7fd fbbd 	bl	8001d28 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b19      	cmp	r3, #25
 80045b6:	d907      	bls.n	80045c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045b8:	6a3b      	ldr	r3, [r7, #32]
 80045ba:	f043 0320 	orr.w	r3, r3, #32
 80045be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80045c6:	e006      	b.n	80045d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	d1e9      	bne.n	80045aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d003      	beq.n	80045ec <I2C_IsErrorOccurred+0xe0>
 80045e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0aa      	beq.n	8004542 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d103      	bne.n	80045fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2220      	movs	r2, #32
 80045fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	f043 0304 	orr.w	r3, r3, #4
 8004602:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800461c:	6a3b      	ldr	r3, [r7, #32]
 800461e:	f043 0301 	orr.w	r3, r3, #1
 8004622:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f44f 7280 	mov.w	r2, #256	; 0x100
 800462c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f043 0308 	orr.w	r3, r3, #8
 8004644:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800464e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f043 0302 	orr.w	r3, r3, #2
 8004666:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004670:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01c      	beq.n	80046ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f7ff fdaf 	bl	80041e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <I2C_IsErrorOccurred+0x1bc>)
 8004692:	400b      	ands	r3, r1
 8004694:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800469a:	6a3b      	ldr	r3, [r7, #32]
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2220      	movs	r2, #32
 80046a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80046ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3728      	adds	r7, #40	; 0x28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	fe00e800 	.word	0xfe00e800

080046cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	607b      	str	r3, [r7, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	4613      	mov	r3, r2
 80046dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046de:	897b      	ldrh	r3, [r7, #10]
 80046e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046e4:	7a7b      	ldrb	r3, [r7, #9]
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	0d5b      	lsrs	r3, r3, #21
 8004706:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800470a:	4b08      	ldr	r3, [pc, #32]	; (800472c <I2C_TransferConfig+0x60>)
 800470c:	430b      	orrs	r3, r1
 800470e:	43db      	mvns	r3, r3
 8004710:	ea02 0103 	and.w	r1, r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	430a      	orrs	r2, r1
 800471c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	03ff63ff 	.word	0x03ff63ff

08004730 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b20      	cmp	r3, #32
 8004744:	d138      	bne.n	80047b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004750:	2302      	movs	r3, #2
 8004752:	e032      	b.n	80047ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	; 0x24
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004782:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	e000      	b.n	80047ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047b8:	2302      	movs	r3, #2
  }
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr

080047c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d139      	bne.n	8004850 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e033      	b.n	8004852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2224      	movs	r2, #36	; 0x24
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004818:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	e000      	b.n	8004852 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004850:	2302      	movs	r3, #2
  }
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0c0      	b.n	80049f2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d106      	bne.n	800488a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f008 f915 	bl	800cab4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2203      	movs	r2, #3
 800488e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f003 ffb2 	bl	8008800 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800489c:	2300      	movs	r3, #0
 800489e:	73fb      	strb	r3, [r7, #15]
 80048a0:	e03e      	b.n	8004920 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	4413      	add	r3, r2
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	440b      	add	r3, r1
 80048b0:	3311      	adds	r3, #17
 80048b2:	2201      	movs	r2, #1
 80048b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048b6:	7bfa      	ldrb	r2, [r7, #15]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	440b      	add	r3, r1
 80048c4:	3310      	adds	r3, #16
 80048c6:	7bfa      	ldrb	r2, [r7, #15]
 80048c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048ca:	7bfa      	ldrb	r2, [r7, #15]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	440b      	add	r3, r1
 80048d8:	3313      	adds	r3, #19
 80048da:	2200      	movs	r2, #0
 80048dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048de:	7bfa      	ldrb	r2, [r7, #15]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	00db      	lsls	r3, r3, #3
 80048ea:	440b      	add	r3, r1
 80048ec:	3320      	adds	r3, #32
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048f2:	7bfa      	ldrb	r2, [r7, #15]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	00db      	lsls	r3, r3, #3
 80048fe:	440b      	add	r3, r1
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	440b      	add	r3, r1
 8004916:	2200      	movs	r2, #0
 8004918:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	3301      	adds	r3, #1
 800491e:	73fb      	strb	r3, [r7, #15]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	791b      	ldrb	r3, [r3, #4]
 8004924:	7bfa      	ldrb	r2, [r7, #15]
 8004926:	429a      	cmp	r2, r3
 8004928:	d3bb      	bcc.n	80048a2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800492a:	2300      	movs	r3, #0
 800492c:	73fb      	strb	r3, [r7, #15]
 800492e:	e044      	b.n	80049ba <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004930:	7bfa      	ldrb	r2, [r7, #15]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	440b      	add	r3, r1
 800493e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	440b      	add	r3, r1
 8004954:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	440b      	add	r3, r1
 800496a:	f203 1353 	addw	r3, r3, #339	; 0x153
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	6879      	ldr	r1, [r7, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004988:	7bfa      	ldrb	r2, [r7, #15]
 800498a:	6879      	ldr	r1, [r7, #4]
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	440b      	add	r3, r1
 8004996:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	440b      	add	r3, r1
 80049ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049b4:	7bfb      	ldrb	r3, [r7, #15]
 80049b6:	3301      	adds	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	791b      	ldrb	r3, [r3, #4]
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d3b5      	bcc.n	8004930 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	e893 0006 	ldmia.w	r3, {r1, r2}
 80049d0:	f003 ff31 	bl	8008836 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	7a9b      	ldrb	r3, [r3, #10]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d102      	bne.n	80049f0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f001 fc43 	bl	8006276 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_PCD_Start+0x16>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e012      	b.n	8004a36 <HAL_PCD_Start+0x3c>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f003 fed8 	bl	80087d2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f006 f99a 	bl	800ad60 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f006 f99f 	bl	800ad8e <USB_ReadInterrupts>
 8004a50:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fb06 	bl	800506e <PCD_EP_ISR_Handler>

    return;
 8004a62:	e110      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d013      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a80:	b292      	uxth	r2, r2
 8004a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f008 f8a5 	bl	800cbd6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8fc 	bl	8004c8c <HAL_PCD_SetAddress>

    return;
 8004a94:	e0f7      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00c      	beq.n	8004aba <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ab2:	b292      	uxth	r2, r2
 8004ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ab8:	e0e5      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad6:	b292      	uxth	r2, r2
 8004ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004adc:	e0d3      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d034      	beq.n	8004b52 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0204 	bic.w	r2, r2, #4
 8004afa:	b292      	uxth	r2, r2
 8004afc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0208 	bic.w	r2, r2, #8
 8004b12:	b292      	uxth	r2, r2
 8004b14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d107      	bne.n	8004b32 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f008 fa45 	bl	800cfbc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f008 f888 	bl	800cc48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b4a:	b292      	uxth	r2, r2
 8004b4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b50:	e099      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d027      	beq.n	8004bac <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0208 	orr.w	r2, r2, #8
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b86:	b292      	uxth	r2, r2
 8004b88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 0204 	orr.w	r2, r2, #4
 8004b9e:	b292      	uxth	r2, r2
 8004ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f008 f835 	bl	800cc14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004baa:	e06c      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d040      	beq.n	8004c38 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bc8:	b292      	uxth	r2, r2
 8004bca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d12b      	bne.n	8004c30 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0204 	orr.w	r2, r2, #4
 8004bea:	b292      	uxth	r2, r2
 8004bec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	b292      	uxth	r2, r2
 8004c04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	089b      	lsrs	r3, r3, #2
 8004c1c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004c26:	2101      	movs	r1, #1
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f008 f9c7 	bl	800cfbc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004c2e:	e02a      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f007 ffef 	bl	800cc14 <HAL_PCD_SuspendCallback>
    return;
 8004c36:	e026      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00f      	beq.n	8004c62 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c54:	b292      	uxth	r2, r2
 8004c56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f007 ffad 	bl	800cbba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c60:	e011      	b.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00c      	beq.n	8004c86 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c7e:	b292      	uxth	r2, r2
 8004c80:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004c84:	bf00      	nop
  }
}
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_PCD_SetAddress+0x1a>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e012      	b.n	8004ccc <HAL_PCD_SetAddress+0x40>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f006 f83b 	bl	800ad38 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	4608      	mov	r0, r1
 8004cde:	4611      	mov	r1, r2
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	70fb      	strb	r3, [r7, #3]
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	803b      	strh	r3, [r7, #0]
 8004cea:	4613      	mov	r3, r2
 8004cec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da0e      	bge.n	8004d18 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	f003 0207 	and.w	r2, r3, #7
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	3310      	adds	r3, #16
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2201      	movs	r2, #1
 8004d14:	705a      	strb	r2, [r3, #1]
 8004d16:	e00e      	b.n	8004d36 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	f003 0207 	and.w	r2, r3, #7
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d36:	78fb      	ldrb	r3, [r7, #3]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004d42:	883b      	ldrh	r3, [r7, #0]
 8004d44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	78ba      	ldrb	r2, [r7, #2]
 8004d50:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d52:	78bb      	ldrb	r3, [r7, #2]
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d102      	bne.n	8004d5e <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_PCD_EP_Open+0x98>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e00e      	b.n	8004d8a <HAL_PCD_EP_Open+0xb6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f003 fd7a 	bl	8008874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004d88:	7afb      	ldrb	r3, [r7, #11]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da0e      	bge.n	8004dc4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004da6:	78fb      	ldrb	r3, [r7, #3]
 8004da8:	f003 0207 	and.w	r2, r3, #7
 8004dac:	4613      	mov	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	3310      	adds	r3, #16
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4413      	add	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	705a      	strb	r2, [r3, #1]
 8004dc2:	e00e      	b.n	8004de2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dc4:	78fb      	ldrb	r3, [r7, #3]
 8004dc6:	f003 0207 	and.w	r2, r3, #7
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2200      	movs	r2, #0
 8004de0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d101      	bne.n	8004dfc <HAL_PCD_EP_Close+0x6a>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	e00e      	b.n	8004e1a <HAL_PCD_EP_Close+0x88>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68f9      	ldr	r1, [r7, #12]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f004 f8f6 	bl	8008ffc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e32:	7afb      	ldrb	r3, [r7, #11]
 8004e34:	f003 0207 	and.w	r2, r3, #7
 8004e38:	4613      	mov	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	00db      	lsls	r3, r3, #3
 8004e40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e62:	7afb      	ldrb	r3, [r7, #11]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	b2da      	uxtb	r2, r3
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f004 faae 	bl	80093d6 <USB_EPStartXfer>

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	f003 0207 	and.w	r2, r3, #7
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec4:	7afb      	ldrb	r3, [r7, #11]
 8004ec6:	f003 0207 	and.w	r2, r3, #7
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	3310      	adds	r3, #16
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2201      	movs	r2, #1
 8004efe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f00:	7afb      	ldrb	r3, [r7, #11]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f004 fa5f 	bl	80093d6 <USB_EPStartXfer>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f22:	b580      	push	{r7, lr}
 8004f24:	b084      	sub	sp, #16
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 0307 	and.w	r3, r3, #7
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	7912      	ldrb	r2, [r2, #4]
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d901      	bls.n	8004f40 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e03e      	b.n	8004fbe <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	da0e      	bge.n	8004f66 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f48:	78fb      	ldrb	r3, [r7, #3]
 8004f4a:	f003 0207 	and.w	r2, r3, #7
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	3310      	adds	r3, #16
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	705a      	strb	r2, [r3, #1]
 8004f64:	e00c      	b.n	8004f80 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f66:	78fa      	ldrb	r2, [r7, #3]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2201      	movs	r2, #1
 8004f84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f86:	78fb      	ldrb	r3, [r7, #3]
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_PCD_EP_SetStall+0x7e>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e00e      	b.n	8004fbe <HAL_PCD_EP_SetStall+0x9c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f005 fdc3 	bl	800ab3a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	460b      	mov	r3, r1
 8004fd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004fd2:	78fb      	ldrb	r3, [r7, #3]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	7912      	ldrb	r2, [r2, #4]
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d901      	bls.n	8004fe4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e040      	b.n	8005066 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	da0e      	bge.n	800500a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	f003 0207 	and.w	r2, r3, #7
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	3310      	adds	r3, #16
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	705a      	strb	r2, [r3, #1]
 8005008:	e00e      	b.n	8005028 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	f003 0207 	and.w	r2, r3, #7
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	b2da      	uxtb	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_PCD_EP_ClrStall+0x82>
 8005044:	2302      	movs	r3, #2
 8005046:	e00e      	b.n	8005066 <HAL_PCD_EP_ClrStall+0xa0>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	4618      	mov	r0, r3
 8005058:	f005 fdc0 	bl	800abdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3710      	adds	r7, #16
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}

0800506e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800506e:	b580      	push	{r7, lr}
 8005070:	b096      	sub	sp, #88	; 0x58
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005076:	e3ae      	b.n	80057d6 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005080:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005084:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f003 030f 	and.w	r3, r3, #15
 800508e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

    if (epindex == 0U)
 8005092:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 8170 	bne.w	800537c <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800509c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d14d      	bne.n	8005144 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	81fb      	strh	r3, [r7, #14]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	89fb      	ldrh	r3, [r7, #14]
 80050c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3310      	adds	r3, #16
 80050d0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050da:	b29b      	uxth	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	4413      	add	r3, r2
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	6812      	ldr	r2, [r2, #0]
 80050ea:	4413      	add	r3, r2
 80050ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80050fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050fc:	695a      	ldr	r2, [r3, #20]
 80050fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	441a      	add	r2, r3
 8005104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005106:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005108:	2100      	movs	r1, #0
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f007 fd3b 	bl	800cb86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	7b1b      	ldrb	r3, [r3, #12]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 835d 	beq.w	80057d6 <PCD_EP_ISR_Handler+0x768>
 800511c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 8358 	bne.w	80057d6 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	7b1b      	ldrb	r3, [r3, #12]
 800512a:	b2db      	uxtb	r3, r3
 800512c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005130:	b2da      	uxtb	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	b292      	uxth	r2, r2
 8005138:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	731a      	strb	r2, [r3, #12]
 8005142:	e348      	b.n	80057d6 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800514a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005156:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800515a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800515e:	2b00      	cmp	r3, #0
 8005160:	d032      	beq.n	80051c8 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800516a:	b29b      	uxth	r3, r3
 800516c:	461a      	mov	r2, r3
 800516e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4413      	add	r3, r2
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	4413      	add	r3, r2
 800517c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005180:	881b      	ldrh	r3, [r3, #0]
 8005182:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005188:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005196:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800519a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800519c:	b29b      	uxth	r3, r3
 800519e:	f005 fe48 	bl	800ae32 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	881b      	ldrh	r3, [r3, #0]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80051ae:	4013      	ands	r3, r2
 80051b0:	823b      	strh	r3, [r7, #16]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	8a3a      	ldrh	r2, [r7, #16]
 80051b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051bc:	b292      	uxth	r2, r2
 80051be:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f007 fcb3 	bl	800cb2c <HAL_PCD_SetupStageCallback>
 80051c6:	e306      	b.n	80057d6 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80051c8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f280 8302 	bge.w	80057d6 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	b29a      	uxth	r2, r3
 80051da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80051de:	4013      	ands	r3, r2
 80051e0:	83fb      	strh	r3, [r7, #30]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	8bfa      	ldrh	r2, [r7, #30]
 80051e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051ec:	b292      	uxth	r2, r2
 80051ee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	4413      	add	r3, r2
 800520a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005216:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d019      	beq.n	8005254 <PCD_EP_ISR_Handler+0x1e6>
 8005220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d015      	beq.n	8005254 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6818      	ldr	r0, [r3, #0]
 800522c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522e:	6959      	ldr	r1, [r3, #20]
 8005230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005232:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005236:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005238:	b29b      	uxth	r3, r3
 800523a:	f005 fdfa 	bl	800ae32 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800523e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005240:	695a      	ldr	r2, [r3, #20]
 8005242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	441a      	add	r2, r3
 8005248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800524c:	2100      	movs	r1, #0
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f007 fc7e 	bl	800cb50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800525e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 82b5 	bne.w	80057d6 <PCD_EP_ISR_Handler+0x768>
 800526c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005270:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005274:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005278:	f000 82ad 	beq.w	80057d6 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	61bb      	str	r3, [r7, #24]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	4413      	add	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	801a      	strh	r2, [r3, #0]
 80052ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <PCD_EP_ISR_Handler+0x25c>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	801a      	strh	r2, [r3, #0]
 80052c8:	e039      	b.n	800533e <PCD_EP_ISR_Handler+0x2d0>
 80052ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	2b3e      	cmp	r3, #62	; 0x3e
 80052d0:	d818      	bhi.n	8005304 <PCD_EP_ISR_Handler+0x296>
 80052d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d4:	691b      	ldr	r3, [r3, #16]
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
 80052da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <PCD_EP_ISR_Handler+0x27e>
 80052e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e8:	3301      	adds	r3, #1
 80052ea:	647b      	str	r3, [r7, #68]	; 0x44
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	881b      	ldrh	r3, [r3, #0]
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	029b      	lsls	r3, r3, #10
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	4313      	orrs	r3, r2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e01c      	b.n	800533e <PCD_EP_ISR_Handler+0x2d0>
 8005304:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	647b      	str	r3, [r7, #68]	; 0x44
 800530c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <PCD_EP_ISR_Handler+0x2b0>
 8005318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800531a:	3b01      	subs	r3, #1
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29a      	uxth	r2, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	b29b      	uxth	r3, r3
 8005328:	029b      	lsls	r3, r3, #10
 800532a:	b29b      	uxth	r3, r3
 800532c:	4313      	orrs	r3, r2
 800532e:	b29b      	uxth	r3, r3
 8005330:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005334:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005338:	b29a      	uxth	r2, r3
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	881b      	ldrh	r3, [r3, #0]
 8005344:	b29b      	uxth	r3, r3
 8005346:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800534a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800534e:	827b      	strh	r3, [r7, #18]
 8005350:	8a7b      	ldrh	r3, [r7, #18]
 8005352:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005356:	827b      	strh	r3, [r7, #18]
 8005358:	8a7b      	ldrh	r3, [r7, #18]
 800535a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800535e:	827b      	strh	r3, [r7, #18]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	8a7b      	ldrh	r3, [r7, #18]
 8005366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800536a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005376:	b29b      	uxth	r3, r3
 8005378:	8013      	strh	r3, [r2, #0]
 800537a:	e22c      	b.n	80057d6 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	461a      	mov	r2, r3
 8005382:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005390:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8005394:	2b00      	cmp	r3, #0
 8005396:	f280 80f6 	bge.w	8005586 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80053b0:	4013      	ands	r3, r2
 80053b2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80053c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053cc:	b292      	uxth	r2, r2
 80053ce:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80053d0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4413      	add	r3, r2
 80053e4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80053e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053e8:	7b1b      	ldrb	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d123      	bne.n	8005436 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	461a      	mov	r2, r3
 80053fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	4413      	add	r3, r2
 8005408:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005412:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005416:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 808e 	beq.w	800553c <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005426:	6959      	ldr	r1, [r3, #20]
 8005428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542a:	88da      	ldrh	r2, [r3, #6]
 800542c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005430:	f005 fcff 	bl	800ae32 <USB_ReadPMA>
 8005434:	e082      	b.n	800553c <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005438:	78db      	ldrb	r3, [r3, #3]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d10a      	bne.n	8005454 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800543e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005442:	461a      	mov	r2, r3
 8005444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 f9d3 	bl	80057f2 <HAL_PCD_EP_DB_Receive>
 800544c:	4603      	mov	r3, r0
 800544e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005452:	e073      	b.n	800553c <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	461a      	mov	r2, r3
 800545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	b29b      	uxth	r3, r3
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800546e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	441a      	add	r2, r3
 8005480:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	461a      	mov	r2, r3
 800549e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d022      	beq.n	80054f8 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80054da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d02c      	beq.n	800553c <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6818      	ldr	r0, [r3, #0]
 80054e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e8:	6959      	ldr	r1, [r3, #20]
 80054ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ec:	891a      	ldrh	r2, [r3, #8]
 80054ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054f2:	f005 fc9e 	bl	800ae32 <USB_ReadPMA>
 80054f6:	e021      	b.n	800553c <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005500:	b29b      	uxth	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	4413      	add	r3, r2
 8005512:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800551c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005520:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005524:	2b00      	cmp	r3, #0
 8005526:	d009      	beq.n	800553c <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552e:	6959      	ldr	r1, [r3, #20]
 8005530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005532:	895a      	ldrh	r2, [r3, #10]
 8005534:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005538:	f005 fc7b 	bl	800ae32 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800553c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005544:	441a      	add	r2, r3
 8005546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005548:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800554a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800554c:	695a      	ldr	r2, [r3, #20]
 800554e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005552:	441a      	add	r2, r3
 8005554:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005556:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555a:	699b      	ldr	r3, [r3, #24]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <PCD_EP_ISR_Handler+0x4fe>
 8005560:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	429a      	cmp	r2, r3
 800556a:	d206      	bcs.n	800557a <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800556c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f007 faec 	bl	800cb50 <HAL_PCD_DataOutStageCallback>
 8005578:	e005      	b.n	8005586 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005580:	4618      	mov	r0, r3
 8005582:	f003 ff28 	bl	80093d6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005586:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 8121 	beq.w	80057d6 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8005594:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	3310      	adds	r3, #16
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4413      	add	r3, r2
 80055a6:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4413      	add	r3, r2
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	441a      	add	r2, r3
 80055d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80055d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80055e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055e6:	78db      	ldrb	r3, [r3, #3]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	f040 80a2 	bne.w	8005732 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80055ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f0:	2200      	movs	r2, #0
 80055f2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80055f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f6:	7b1b      	ldrb	r3, [r3, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 8093 	beq.w	8005724 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d046      	beq.n	8005698 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800560a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560c:	785b      	ldrb	r3, [r3, #1]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d126      	bne.n	8005660 <PCD_EP_ISR_Handler+0x5f2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005620:	b29b      	uxth	r3, r3
 8005622:	461a      	mov	r2, r3
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	4413      	add	r3, r2
 8005628:	627b      	str	r3, [r7, #36]	; 0x24
 800562a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	00da      	lsls	r2, r3, #3
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	4413      	add	r3, r2
 8005634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	b29b      	uxth	r3, r3
 8005640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005644:	b29a      	uxth	r2, r3
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005658:	b29a      	uxth	r2, r3
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	801a      	strh	r2, [r3, #0]
 800565e:	e061      	b.n	8005724 <PCD_EP_ISR_Handler+0x6b6>
 8005660:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d15d      	bne.n	8005724 <PCD_EP_ISR_Handler+0x6b6>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005676:	b29b      	uxth	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800567c:	4413      	add	r3, r2
 800567e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	00da      	lsls	r2, r3, #3
 8005686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005688:	4413      	add	r3, r2
 800568a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	2200      	movs	r2, #0
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	e045      	b.n	8005724 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800569e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a0:	785b      	ldrb	r3, [r3, #1]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d126      	bne.n	80056f4 <PCD_EP_ISR_Handler+0x686>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	637b      	str	r3, [r7, #52]	; 0x34
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	4413      	add	r3, r2
 80056bc:	637b      	str	r3, [r7, #52]	; 0x34
 80056be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	00da      	lsls	r2, r3, #3
 80056c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c6:	4413      	add	r3, r2
 80056c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80056cc:	633b      	str	r3, [r7, #48]	; 0x30
 80056ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d0:	881b      	ldrh	r3, [r3, #0]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056d8:	b29a      	uxth	r2, r3
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	801a      	strh	r2, [r3, #0]
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ec:	b29a      	uxth	r2, r3
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	801a      	strh	r2, [r3, #0]
 80056f2:	e017      	b.n	8005724 <PCD_EP_ISR_Handler+0x6b6>
 80056f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d113      	bne.n	8005724 <PCD_EP_ISR_Handler+0x6b6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570a:	4413      	add	r3, r2
 800570c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800570e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	00da      	lsls	r2, r3, #3
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	4413      	add	r3, r2
 8005718:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800571c:	63bb      	str	r3, [r7, #56]	; 0x38
 800571e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005720:	2200      	movs	r2, #0
 8005722:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f007 fa2b 	bl	800cb86 <HAL_PCD_DataInStageCallback>
 8005730:	e051      	b.n	80057d6 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005732:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d144      	bne.n	80057c8 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	4413      	add	r3, r2
 8005758:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005762:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800576e:	429a      	cmp	r2, r3
 8005770:	d907      	bls.n	8005782 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8005772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800577e:	619a      	str	r2, [r3, #24]
 8005780:	e002      	b.n	8005788 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005784:	2200      	movs	r2, #0
 8005786:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f007 f9f5 	bl	800cb86 <HAL_PCD_DataInStageCallback>
 800579c:	e01b      	b.n	80057d6 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800579e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057a6:	441a      	add	r2, r3
 80057a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057aa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80057ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80057b4:	441a      	add	r2, r3
 80057b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057b8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057c0:	4618      	mov	r0, r3
 80057c2:	f003 fe08 	bl	80093d6 <USB_EPStartXfer>
 80057c6:	e006      	b.n	80057d6 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80057c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80057cc:	461a      	mov	r2, r3
 80057ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 f917 	bl	8005a04 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057de:	b29b      	uxth	r3, r3
 80057e0:	b21b      	sxth	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f6ff ac48 	blt.w	8005078 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3758      	adds	r7, #88	; 0x58
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b088      	sub	sp, #32
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	4613      	mov	r3, r2
 80057fe:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d07c      	beq.n	8005904 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005812:	b29b      	uxth	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	4413      	add	r3, r2
 8005824:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800582e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	699a      	ldr	r2, [r3, #24]
 8005834:	8b7b      	ldrh	r3, [r7, #26]
 8005836:	429a      	cmp	r2, r3
 8005838:	d306      	bcc.n	8005848 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	8b7b      	ldrh	r3, [r7, #26]
 8005840:	1ad2      	subs	r2, r2, r3
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	619a      	str	r2, [r3, #24]
 8005846:	e002      	b.n	800584e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d123      	bne.n	800589e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	833b      	strh	r3, [r7, #24]
 8005872:	8b3b      	ldrh	r3, [r7, #24]
 8005874:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005878:	833b      	strh	r3, [r7, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	441a      	add	r2, r3
 8005888:	8b3b      	ldrh	r3, [r7, #24]
 800588a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800588e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589a:	b29b      	uxth	r3, r3
 800589c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800589e:	88fb      	ldrh	r3, [r7, #6]
 80058a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01f      	beq.n	80058e8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	82fb      	strh	r3, [r7, #22]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	461a      	mov	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	8afb      	ldrh	r3, [r7, #22]
 80058d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80058e8:	8b7b      	ldrh	r3, [r7, #26]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8085 	beq.w	80059fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6959      	ldr	r1, [r3, #20]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	891a      	ldrh	r2, [r3, #8]
 80058fc:	8b7b      	ldrh	r3, [r7, #26]
 80058fe:	f005 fa98 	bl	800ae32 <USB_ReadPMA>
 8005902:	e07a      	b.n	80059fa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800590c:	b29b      	uxth	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4413      	add	r3, r2
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	4413      	add	r3, r2
 800591e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005922:	881b      	ldrh	r3, [r3, #0]
 8005924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005928:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	8b7b      	ldrh	r3, [r7, #26]
 8005930:	429a      	cmp	r2, r3
 8005932:	d306      	bcc.n	8005942 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	8b7b      	ldrh	r3, [r7, #26]
 800593a:	1ad2      	subs	r2, r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	619a      	str	r2, [r3, #24]
 8005940:	e002      	b.n	8005948 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	2200      	movs	r2, #0
 8005946:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d123      	bne.n	8005998 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	461a      	mov	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4413      	add	r3, r2
 800595e:	881b      	ldrh	r3, [r3, #0]
 8005960:	b29b      	uxth	r3, r3
 8005962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	83fb      	strh	r3, [r7, #30]
 800596c:	8bfb      	ldrh	r3, [r7, #30]
 800596e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005972:	83fb      	strh	r3, [r7, #30]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	441a      	add	r2, r3
 8005982:	8bfb      	ldrh	r3, [r7, #30]
 8005984:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005988:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800598c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005994:	b29b      	uxth	r3, r3
 8005996:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005998:	88fb      	ldrh	r3, [r7, #6]
 800599a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11f      	bne.n	80059e2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059bc:	83bb      	strh	r3, [r7, #28]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	441a      	add	r2, r3
 80059cc:	8bbb      	ldrh	r3, [r7, #28]
 80059ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80059d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059de:	b29b      	uxth	r3, r3
 80059e0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059e2:	8b7b      	ldrh	r3, [r7, #26]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6959      	ldr	r1, [r3, #20]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	895a      	ldrh	r2, [r3, #10]
 80059f4:	8b7b      	ldrh	r3, [r7, #26]
 80059f6:	f005 fa1c 	bl	800ae32 <USB_ReadPMA>
    }
  }

  return count;
 80059fa:	8b7b      	ldrh	r3, [r7, #26]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3720      	adds	r7, #32
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b0a4      	sub	sp, #144	; 0x90
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a12:	88fb      	ldrh	r3, [r7, #6]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 81db 	beq.w	8005dd4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	4413      	add	r3, r2
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	6812      	ldr	r2, [r2, #0]
 8005a36:	4413      	add	r3, r2
 8005a38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005a3c:	881b      	ldrh	r3, [r3, #0]
 8005a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a42:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len > TxPctSize)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d907      	bls.n	8005a62 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005a5a:	1ad2      	subs	r2, r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	619a      	str	r2, [r3, #24]
 8005a60:	e002      	b.n	8005a68 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2200      	movs	r2, #0
 8005a66:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f040 80b9 	bne.w	8005be4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	785b      	ldrb	r3, [r3, #1]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d126      	bne.n	8005ac8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a8e:	4413      	add	r3, r2
 8005a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	00da      	lsls	r2, r3, #3
 8005a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a9a:	4413      	add	r3, r2
 8005a9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac0:	b29a      	uxth	r2, r3
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	e01a      	b.n	8005afe <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d116      	bne.n	8005afe <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	4413      	add	r3, r2
 8005ae6:	637b      	str	r3, [r7, #52]	; 0x34
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	00da      	lsls	r2, r3, #3
 8005aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af0:	4413      	add	r3, r2
 8005af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005af6:	633b      	str	r3, [r7, #48]	; 0x30
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	2200      	movs	r2, #0
 8005afc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	785b      	ldrb	r3, [r3, #1]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d126      	bne.n	8005b5a <HAL_PCD_EP_DB_Transmit+0x156>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	4413      	add	r3, r2
 8005b22:	61fb      	str	r3, [r7, #28]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	00da      	lsls	r2, r3, #3
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	881b      	ldrh	r3, [r3, #0]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e017      	b.n	8005b8a <HAL_PCD_EP_DB_Transmit+0x186>
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	785b      	ldrb	r3, [r3, #1]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d113      	bne.n	8005b8a <HAL_PCD_EP_DB_Transmit+0x186>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b70:	4413      	add	r3, r2
 8005b72:	627b      	str	r3, [r7, #36]	; 0x24
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	00da      	lsls	r2, r3, #3
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	2200      	movs	r2, #0
 8005b88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f006 fff8 	bl	800cb86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 82fa 	beq.w	8006196 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbc:	82fb      	strh	r3, [r7, #22]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	441a      	add	r2, r3
 8005bcc:	8afb      	ldrh	r3, [r7, #22]
 8005bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	8013      	strh	r3, [r2, #0]
 8005be2:	e2d8      	b.n	8006196 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d021      	beq.n	8005c32 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	461a      	mov	r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	441a      	add	r2, r3
 8005c1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	f040 82ac 	bne.w	8006196 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	695a      	ldr	r2, [r3, #20]
 8005c42:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005c46:	441a      	add	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005c54:	441a      	add	r2, r3
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d30b      	bcc.n	8005c7e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	621a      	str	r2, [r3, #32]
 8005c7c:	e017      	b.n	8005cae <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d108      	bne.n	8005c98 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005c86:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005c8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c96:	e00a      	b.n	8005cae <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2200      	movs	r2, #0
 8005cac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d165      	bne.n	8005d82 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cca:	4413      	add	r3, r2
 8005ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	00da      	lsls	r2, r3, #3
 8005cd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cdc:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <HAL_PCD_EP_DB_Transmit+0x308>
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	e057      	b.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d10:	2b3e      	cmp	r3, #62	; 0x3e
 8005d12:	d818      	bhi.n	8005d46 <HAL_PCD_EP_DB_Transmit+0x342>
 8005d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d18:	085b      	lsrs	r3, r3, #1
 8005d1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d002      	beq.n	8005d2e <HAL_PCD_EP_DB_Transmit+0x32a>
 8005d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	029b      	lsls	r3, r3, #10
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d42:	801a      	strh	r2, [r3, #0]
 8005d44:	e03a      	b.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d4a:	095b      	lsrs	r3, r3, #5
 8005d4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d102      	bne.n	8005d60 <HAL_PCD_EP_DB_Transmit+0x35c>
 8005d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	029b      	lsls	r3, r3, #10
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	801a      	strh	r2, [r3, #0]
 8005d80:	e01c      	b.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	785b      	ldrb	r3, [r3, #1]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d118      	bne.n	8005dbc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d9e:	4413      	add	r3, r2
 8005da0:	647b      	str	r3, [r7, #68]	; 0x44
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	00da      	lsls	r2, r3, #3
 8005da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005daa:	4413      	add	r3, r2
 8005dac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005db0:	643b      	str	r3, [r7, #64]	; 0x40
 8005db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6818      	ldr	r0, [r3, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6959      	ldr	r1, [r3, #20]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	891a      	ldrh	r2, [r3, #8]
 8005dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	f004 ffee 	bl	800adae <USB_WritePMA>
 8005dd2:	e1e0      	b.n	8006196 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	4413      	add	r3, r2
 8005de8:	68fa      	ldr	r2, [r7, #12]
 8005dea:	6812      	ldr	r2, [r2, #0]
 8005dec:	4413      	add	r3, r2
 8005dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005df2:	881b      	ldrh	r3, [r3, #0]
 8005df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

    if (ep->xfer_len >= TxPctSize)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	699a      	ldr	r2, [r3, #24]
 8005e00:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d307      	bcc.n	8005e18 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	699a      	ldr	r2, [r3, #24]
 8005e0c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005e10:	1ad2      	subs	r2, r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	619a      	str	r2, [r3, #24]
 8005e16:	e002      	b.n	8005e1e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 80c0 	bne.w	8005fa8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d126      	bne.n	8005e7e <HAL_PCD_EP_DB_Transmit+0x47a>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e44:	4413      	add	r3, r2
 8005e46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	00da      	lsls	r2, r3, #3
 8005e4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e50:	4413      	add	r3, r2
 8005e52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e56:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6a:	881b      	ldrh	r3, [r3, #0]
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e7a:	801a      	strh	r2, [r3, #0]
 8005e7c:	e01a      	b.n	8005eb4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d116      	bne.n	8005eb4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	667b      	str	r3, [r7, #100]	; 0x64
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9a:	4413      	add	r3, r2
 8005e9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	00da      	lsls	r2, r3, #3
 8005ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005eac:	663b      	str	r3, [r7, #96]	; 0x60
 8005eae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	677b      	str	r3, [r7, #116]	; 0x74
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	785b      	ldrb	r3, [r3, #1]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d12b      	bne.n	8005f1a <HAL_PCD_EP_DB_Transmit+0x516>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed6:	4413      	add	r3, r2
 8005ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	00da      	lsls	r2, r3, #3
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005efe:	801a      	strh	r2, [r3, #0]
 8005f00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e017      	b.n	8005f4a <HAL_PCD_EP_DB_Transmit+0x546>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d113      	bne.n	8005f4a <HAL_PCD_EP_DB_Transmit+0x546>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f30:	4413      	add	r3, r2
 8005f32:	677b      	str	r3, [r7, #116]	; 0x74
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	00da      	lsls	r2, r3, #3
 8005f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3c:	4413      	add	r3, r2
 8005f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005f42:	673b      	str	r3, [r7, #112]	; 0x70
 8005f44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f46:	2200      	movs	r2, #0
 8005f48:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	4619      	mov	r1, r3
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f006 fe18 	bl	800cb86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f040 811a 	bne.w	8006196 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8005f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	8013      	strh	r3, [r2, #0]
 8005fa6:	e0f6      	b.n	8006196 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005fa8:	88fb      	ldrh	r3, [r7, #6]
 8005faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d121      	bne.n	8005ff6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	4413      	add	r3, r2
 8005fc0:	881b      	ldrh	r3, [r3, #0]
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fcc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	441a      	add	r2, r3
 8005fde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 80ca 	bne.w	8006196 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800600a:	441a      	add	r2, r3
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006018:	441a      	add	r2, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	429a      	cmp	r2, r3
 8006028:	d30b      	bcc.n	8006042 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6a1a      	ldr	r2, [r3, #32]
 8006036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800603a:	1ad2      	subs	r2, r2, r3
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	621a      	str	r2, [r3, #32]
 8006040:	e017      	b.n	8006072 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d108      	bne.n	800605c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800604a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800604e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800605a:	e00a      	b.n	8006072 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2200      	movs	r2, #0
 8006068:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	657b      	str	r3, [r7, #84]	; 0x54
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	785b      	ldrb	r3, [r3, #1]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d165      	bne.n	800614c <HAL_PCD_EP_DB_Transmit+0x748>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800608e:	b29b      	uxth	r3, r3
 8006090:	461a      	mov	r2, r3
 8006092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006094:	4413      	add	r3, r2
 8006096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	00da      	lsls	r2, r3, #3
 800609e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060a0:	4413      	add	r3, r2
 80060a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10a      	bne.n	80060d6 <HAL_PCD_EP_DB_Transmit+0x6d2>
 80060c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c2:	881b      	ldrh	r3, [r3, #0]
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	e054      	b.n	8006180 <HAL_PCD_EP_DB_Transmit+0x77c>
 80060d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060da:	2b3e      	cmp	r3, #62	; 0x3e
 80060dc:	d818      	bhi.n	8006110 <HAL_PCD_EP_DB_Transmit+0x70c>
 80060de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e2:	085b      	lsrs	r3, r3, #1
 80060e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80060e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x6f4>
 80060f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060f4:	3301      	adds	r3, #1
 80060f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006100:	b29b      	uxth	r3, r3
 8006102:	029b      	lsls	r3, r3, #10
 8006104:	b29b      	uxth	r3, r3
 8006106:	4313      	orrs	r3, r2
 8006108:	b29a      	uxth	r2, r3
 800610a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800610c:	801a      	strh	r2, [r3, #0]
 800610e:	e037      	b.n	8006180 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	66bb      	str	r3, [r7, #104]	; 0x68
 8006118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <HAL_PCD_EP_DB_Transmit+0x726>
 8006124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006126:	3b01      	subs	r3, #1
 8006128:	66bb      	str	r3, [r7, #104]	; 0x68
 800612a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800612c:	881b      	ldrh	r3, [r3, #0]
 800612e:	b29a      	uxth	r2, r3
 8006130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006132:	b29b      	uxth	r3, r3
 8006134:	029b      	lsls	r3, r3, #10
 8006136:	b29b      	uxth	r3, r3
 8006138:	4313      	orrs	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006140:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006144:	b29a      	uxth	r2, r3
 8006146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	e019      	b.n	8006180 <HAL_PCD_EP_DB_Transmit+0x77c>
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	785b      	ldrb	r3, [r3, #1]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d115      	bne.n	8006180 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006162:	4413      	add	r3, r2
 8006164:	657b      	str	r3, [r7, #84]	; 0x54
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	00da      	lsls	r2, r3, #3
 800616c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800616e:	4413      	add	r3, r2
 8006170:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006174:	653b      	str	r3, [r7, #80]	; 0x50
 8006176:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800617a:	b29a      	uxth	r2, r3
 800617c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	6959      	ldr	r1, [r3, #20]
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	895a      	ldrh	r2, [r3, #10]
 800618c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006190:	b29b      	uxth	r3, r3
 8006192:	f004 fe0c 	bl	800adae <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	461a      	mov	r2, r3
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b0:	82bb      	strh	r3, [r7, #20]
 80061b2:	8abb      	ldrh	r3, [r7, #20]
 80061b4:	f083 0310 	eor.w	r3, r3, #16
 80061b8:	82bb      	strh	r3, [r7, #20]
 80061ba:	8abb      	ldrh	r3, [r7, #20]
 80061bc:	f083 0320 	eor.w	r3, r3, #32
 80061c0:	82bb      	strh	r3, [r7, #20]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	441a      	add	r2, r3
 80061d0:	8abb      	ldrh	r3, [r7, #20]
 80061d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3790      	adds	r7, #144	; 0x90
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	607b      	str	r3, [r7, #4]
 80061fa:	460b      	mov	r3, r1
 80061fc:	817b      	strh	r3, [r7, #10]
 80061fe:	4613      	mov	r3, r2
 8006200:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006202:	897b      	ldrh	r3, [r7, #10]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00b      	beq.n	8006226 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800620e:	897b      	ldrh	r3, [r7, #10]
 8006210:	f003 0207 	and.w	r2, r3, #7
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	3310      	adds	r3, #16
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	617b      	str	r3, [r7, #20]
 8006224:	e009      	b.n	800623a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006226:	897a      	ldrh	r2, [r7, #10]
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800623a:	893b      	ldrh	r3, [r7, #8]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d107      	bne.n	8006250 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	b29a      	uxth	r2, r3
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	80da      	strh	r2, [r3, #6]
 800624e:	e00b      	b.n	8006268 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	2201      	movs	r2, #1
 8006254:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	b29a      	uxth	r2, r3
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	0c1b      	lsrs	r3, r3, #16
 8006262:	b29a      	uxth	r2, r3
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006276:	b480      	push	{r7}
 8006278:	b085      	sub	sp, #20
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800629a:	b29b      	uxth	r3, r3
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	f043 0302 	orr.w	r3, r3, #2
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
	...

080062cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d141      	bne.n	800635e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80062da:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e6:	d131      	bne.n	800634c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80062e8:	4b47      	ldr	r3, [pc, #284]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ee:	4a46      	ldr	r2, [pc, #280]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062f8:	4b43      	ldr	r3, [pc, #268]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006300:	4a41      	ldr	r2, [pc, #260]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006306:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006308:	4b40      	ldr	r3, [pc, #256]	; (800640c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2232      	movs	r2, #50	; 0x32
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	4a3f      	ldr	r2, [pc, #252]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006314:	fba2 2303 	umull	r2, r3, r2, r3
 8006318:	0c9b      	lsrs	r3, r3, #18
 800631a:	3301      	adds	r3, #1
 800631c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800631e:	e002      	b.n	8006326 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	3b01      	subs	r3, #1
 8006324:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006326:	4b38      	ldr	r3, [pc, #224]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800632e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006332:	d102      	bne.n	800633a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f2      	bne.n	8006320 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800633a:	4b33      	ldr	r3, [pc, #204]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006346:	d158      	bne.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e057      	b.n	80063fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800634c:	4b2e      	ldr	r3, [pc, #184]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800634e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006352:	4a2d      	ldr	r2, [pc, #180]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006358:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800635c:	e04d      	b.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006364:	d141      	bne.n	80063ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006366:	4b28      	ldr	r3, [pc, #160]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800636e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006372:	d131      	bne.n	80063d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006374:	4b24      	ldr	r3, [pc, #144]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637a:	4a23      	ldr	r2, [pc, #140]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800637c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006384:	4b20      	ldr	r3, [pc, #128]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800638c:	4a1e      	ldr	r2, [pc, #120]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006392:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006394:	4b1d      	ldr	r3, [pc, #116]	; (800640c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2232      	movs	r2, #50	; 0x32
 800639a:	fb02 f303 	mul.w	r3, r2, r3
 800639e:	4a1c      	ldr	r2, [pc, #112]	; (8006410 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	0c9b      	lsrs	r3, r3, #18
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063aa:	e002      	b.n	80063b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063b2:	4b15      	ldr	r3, [pc, #84]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063be:	d102      	bne.n	80063c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f2      	bne.n	80063ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063c6:	4b10      	ldr	r3, [pc, #64]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d2:	d112      	bne.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e011      	b.n	80063fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063d8:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063de:	4a0a      	ldr	r2, [pc, #40]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80063e8:	e007      	b.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063f2:	4a05      	ldr	r2, [pc, #20]	; (8006408 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80063fa:	2300      	movs	r3, #0
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3714      	adds	r7, #20
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	40007000 	.word	0x40007000
 800640c:	20000000 	.word	0x20000000
 8006410:	431bde83 	.word	0x431bde83

08006414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e2fe      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d075      	beq.n	800651e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006432:	4b97      	ldr	r3, [pc, #604]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f003 030c 	and.w	r3, r3, #12
 800643a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800643c:	4b94      	ldr	r3, [pc, #592]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0303 	and.w	r3, r3, #3
 8006444:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b0c      	cmp	r3, #12
 800644a:	d102      	bne.n	8006452 <HAL_RCC_OscConfig+0x3e>
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b03      	cmp	r3, #3
 8006450:	d002      	beq.n	8006458 <HAL_RCC_OscConfig+0x44>
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	2b08      	cmp	r3, #8
 8006456:	d10b      	bne.n	8006470 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006458:	4b8d      	ldr	r3, [pc, #564]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d05b      	beq.n	800651c <HAL_RCC_OscConfig+0x108>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d157      	bne.n	800651c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e2d9      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006478:	d106      	bne.n	8006488 <HAL_RCC_OscConfig+0x74>
 800647a:	4b85      	ldr	r3, [pc, #532]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a84      	ldr	r2, [pc, #528]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	e01d      	b.n	80064c4 <HAL_RCC_OscConfig+0xb0>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006490:	d10c      	bne.n	80064ac <HAL_RCC_OscConfig+0x98>
 8006492:	4b7f      	ldr	r3, [pc, #508]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a7e      	ldr	r2, [pc, #504]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	4b7c      	ldr	r3, [pc, #496]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a7b      	ldr	r2, [pc, #492]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80064a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064a8:	6013      	str	r3, [r2, #0]
 80064aa:	e00b      	b.n	80064c4 <HAL_RCC_OscConfig+0xb0>
 80064ac:	4b78      	ldr	r3, [pc, #480]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a77      	ldr	r2, [pc, #476]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80064b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4b75      	ldr	r3, [pc, #468]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a74      	ldr	r2, [pc, #464]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80064be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d013      	beq.n	80064f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064cc:	f7fb fc2c 	bl	8001d28 <HAL_GetTick>
 80064d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064d2:	e008      	b.n	80064e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064d4:	f7fb fc28 	bl	8001d28 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b64      	cmp	r3, #100	; 0x64
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e29e      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064e6:	4b6a      	ldr	r3, [pc, #424]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0f0      	beq.n	80064d4 <HAL_RCC_OscConfig+0xc0>
 80064f2:	e014      	b.n	800651e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fb fc18 	bl	8001d28 <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064fc:	f7fb fc14 	bl	8001d28 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b64      	cmp	r3, #100	; 0x64
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e28a      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800650e:	4b60      	ldr	r3, [pc, #384]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1f0      	bne.n	80064fc <HAL_RCC_OscConfig+0xe8>
 800651a:	e000      	b.n	800651e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800651c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d075      	beq.n	8006616 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800652a:	4b59      	ldr	r3, [pc, #356]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f003 030c 	and.w	r3, r3, #12
 8006532:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006534:	4b56      	ldr	r3, [pc, #344]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	2b0c      	cmp	r3, #12
 8006542:	d102      	bne.n	800654a <HAL_RCC_OscConfig+0x136>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b02      	cmp	r3, #2
 8006548:	d002      	beq.n	8006550 <HAL_RCC_OscConfig+0x13c>
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b04      	cmp	r3, #4
 800654e:	d11f      	bne.n	8006590 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006550:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006558:	2b00      	cmp	r3, #0
 800655a:	d005      	beq.n	8006568 <HAL_RCC_OscConfig+0x154>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e25d      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006568:	4b49      	ldr	r3, [pc, #292]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	061b      	lsls	r3, r3, #24
 8006576:	4946      	ldr	r1, [pc, #280]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006578:	4313      	orrs	r3, r2
 800657a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800657c:	4b45      	ldr	r3, [pc, #276]	; (8006694 <HAL_RCC_OscConfig+0x280>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4618      	mov	r0, r3
 8006582:	f7fb fb85 	bl	8001c90 <HAL_InitTick>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d043      	beq.n	8006614 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e249      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d023      	beq.n	80065e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006598:	4b3d      	ldr	r3, [pc, #244]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a3c      	ldr	r2, [pc, #240]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800659e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065a4:	f7fb fbc0 	bl	8001d28 <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065ac:	f7fb fbbc 	bl	8001d28 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e232      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065be:	4b34      	ldr	r3, [pc, #208]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0f0      	beq.n	80065ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ca:	4b31      	ldr	r3, [pc, #196]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	061b      	lsls	r3, r3, #24
 80065d8:	492d      	ldr	r1, [pc, #180]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	604b      	str	r3, [r1, #4]
 80065de:	e01a      	b.n	8006616 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065e0:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2a      	ldr	r2, [pc, #168]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 80065e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fb fb9c 	bl	8001d28 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065f4:	f7fb fb98 	bl	8001d28 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b02      	cmp	r3, #2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e20e      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006606:	4b22      	ldr	r3, [pc, #136]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1f0      	bne.n	80065f4 <HAL_RCC_OscConfig+0x1e0>
 8006612:	e000      	b.n	8006616 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006614:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d041      	beq.n	80066a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01c      	beq.n	8006664 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800662a:	4b19      	ldr	r3, [pc, #100]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800662c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006630:	4a17      	ldr	r2, [pc, #92]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006632:	f043 0301 	orr.w	r3, r3, #1
 8006636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663a:	f7fb fb75 	bl	8001d28 <HAL_GetTick>
 800663e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006642:	f7fb fb71 	bl	8001d28 <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e1e7      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0ef      	beq.n	8006642 <HAL_RCC_OscConfig+0x22e>
 8006662:	e020      	b.n	80066a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 8006666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800666a:	4a09      	ldr	r2, [pc, #36]	; (8006690 <HAL_RCC_OscConfig+0x27c>)
 800666c:	f023 0301 	bic.w	r3, r3, #1
 8006670:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006674:	f7fb fb58 	bl	8001d28 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800667a:	e00d      	b.n	8006698 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800667c:	f7fb fb54 	bl	8001d28 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d906      	bls.n	8006698 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e1ca      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000
 8006694:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006698:	4b8c      	ldr	r3, [pc, #560]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 800669a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1ea      	bne.n	800667c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 80a6 	beq.w	8006800 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066b4:	2300      	movs	r3, #0
 80066b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066b8:	4b84      	ldr	r3, [pc, #528]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_RCC_OscConfig+0x2b4>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_RCC_OscConfig+0x2b6>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ce:	4b7f      	ldr	r3, [pc, #508]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80066d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d2:	4a7e      	ldr	r2, [pc, #504]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80066d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066d8:	6593      	str	r3, [r2, #88]	; 0x58
 80066da:	4b7c      	ldr	r3, [pc, #496]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80066e6:	2301      	movs	r3, #1
 80066e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066ea:	4b79      	ldr	r3, [pc, #484]	; (80068d0 <HAL_RCC_OscConfig+0x4bc>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d118      	bne.n	8006728 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066f6:	4b76      	ldr	r3, [pc, #472]	; (80068d0 <HAL_RCC_OscConfig+0x4bc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a75      	ldr	r2, [pc, #468]	; (80068d0 <HAL_RCC_OscConfig+0x4bc>)
 80066fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006702:	f7fb fb11 	bl	8001d28 <HAL_GetTick>
 8006706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006708:	e008      	b.n	800671c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670a:	f7fb fb0d 	bl	8001d28 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	2b02      	cmp	r3, #2
 8006716:	d901      	bls.n	800671c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e183      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800671c:	4b6c      	ldr	r3, [pc, #432]	; (80068d0 <HAL_RCC_OscConfig+0x4bc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006724:	2b00      	cmp	r3, #0
 8006726:	d0f0      	beq.n	800670a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d108      	bne.n	8006742 <HAL_RCC_OscConfig+0x32e>
 8006730:	4b66      	ldr	r3, [pc, #408]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	4a65      	ldr	r2, [pc, #404]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006740:	e024      	b.n	800678c <HAL_RCC_OscConfig+0x378>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	2b05      	cmp	r3, #5
 8006748:	d110      	bne.n	800676c <HAL_RCC_OscConfig+0x358>
 800674a:	4b60      	ldr	r3, [pc, #384]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 800674c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006750:	4a5e      	ldr	r2, [pc, #376]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006752:	f043 0304 	orr.w	r3, r3, #4
 8006756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800675a:	4b5c      	ldr	r3, [pc, #368]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 800675c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006760:	4a5a      	ldr	r2, [pc, #360]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006762:	f043 0301 	orr.w	r3, r3, #1
 8006766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800676a:	e00f      	b.n	800678c <HAL_RCC_OscConfig+0x378>
 800676c:	4b57      	ldr	r3, [pc, #348]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006772:	4a56      	ldr	r2, [pc, #344]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006774:	f023 0301 	bic.w	r3, r3, #1
 8006778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800677c:	4b53      	ldr	r3, [pc, #332]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	4a52      	ldr	r2, [pc, #328]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006784:	f023 0304 	bic.w	r3, r3, #4
 8006788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d016      	beq.n	80067c2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006794:	f7fb fac8 	bl	8001d28 <HAL_GetTick>
 8006798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800679a:	e00a      	b.n	80067b2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679c:	f7fb fac4 	bl	8001d28 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e138      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b2:	4b46      	ldr	r3, [pc, #280]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0ed      	beq.n	800679c <HAL_RCC_OscConfig+0x388>
 80067c0:	e015      	b.n	80067ee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c2:	f7fb fab1 	bl	8001d28 <HAL_GetTick>
 80067c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067c8:	e00a      	b.n	80067e0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067ca:	f7fb faad 	bl	8001d28 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d8:	4293      	cmp	r3, r2
 80067da:	d901      	bls.n	80067e0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e121      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80067e0:	4b3a      	ldr	r3, [pc, #232]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ed      	bne.n	80067ca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80067ee:	7ffb      	ldrb	r3, [r7, #31]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d105      	bne.n	8006800 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067f4:	4b35      	ldr	r3, [pc, #212]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80067f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f8:	4a34      	ldr	r2, [pc, #208]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80067fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b00      	cmp	r3, #0
 800680a:	d03c      	beq.n	8006886 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01c      	beq.n	800684e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006814:	4b2d      	ldr	r3, [pc, #180]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800681a:	4a2c      	ldr	r2, [pc, #176]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 800681c:	f043 0301 	orr.w	r3, r3, #1
 8006820:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006824:	f7fb fa80 	bl	8001d28 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800682c:	f7fb fa7c 	bl	8001d28 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e0f2      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800683e:	4b23      	ldr	r3, [pc, #140]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006840:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006844:	f003 0302 	and.w	r3, r3, #2
 8006848:	2b00      	cmp	r3, #0
 800684a:	d0ef      	beq.n	800682c <HAL_RCC_OscConfig+0x418>
 800684c:	e01b      	b.n	8006886 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800684e:	4b1f      	ldr	r3, [pc, #124]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006850:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006854:	4a1d      	ldr	r2, [pc, #116]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800685e:	f7fb fa63 	bl	8001d28 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006864:	e008      	b.n	8006878 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006866:	f7fb fa5f 	bl	8001d28 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e0d5      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006878:	4b14      	ldr	r3, [pc, #80]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 800687a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1ef      	bne.n	8006866 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 80c9 	beq.w	8006a22 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006890:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	f003 030c 	and.w	r3, r3, #12
 8006898:	2b0c      	cmp	r3, #12
 800689a:	f000 8083 	beq.w	80069a4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	69db      	ldr	r3, [r3, #28]
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d15e      	bne.n	8006964 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a08      	ldr	r2, [pc, #32]	; (80068cc <HAL_RCC_OscConfig+0x4b8>)
 80068ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068b2:	f7fb fa39 	bl	8001d28 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068b8:	e00c      	b.n	80068d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068ba:	f7fb fa35 	bl	8001d28 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d905      	bls.n	80068d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e0ab      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
 80068cc:	40021000 	.word	0x40021000
 80068d0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80068d4:	4b55      	ldr	r3, [pc, #340]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1ec      	bne.n	80068ba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068e0:	4b52      	ldr	r3, [pc, #328]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	4b52      	ldr	r3, [pc, #328]	; (8006a30 <HAL_RCC_OscConfig+0x61c>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6a11      	ldr	r1, [r2, #32]
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068f0:	3a01      	subs	r2, #1
 80068f2:	0112      	lsls	r2, r2, #4
 80068f4:	4311      	orrs	r1, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80068fa:	0212      	lsls	r2, r2, #8
 80068fc:	4311      	orrs	r1, r2
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006902:	0852      	lsrs	r2, r2, #1
 8006904:	3a01      	subs	r2, #1
 8006906:	0552      	lsls	r2, r2, #21
 8006908:	4311      	orrs	r1, r2
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800690e:	0852      	lsrs	r2, r2, #1
 8006910:	3a01      	subs	r2, #1
 8006912:	0652      	lsls	r2, r2, #25
 8006914:	4311      	orrs	r1, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800691a:	06d2      	lsls	r2, r2, #27
 800691c:	430a      	orrs	r2, r1
 800691e:	4943      	ldr	r1, [pc, #268]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 8006920:	4313      	orrs	r3, r2
 8006922:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006924:	4b41      	ldr	r3, [pc, #260]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a40      	ldr	r2, [pc, #256]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 800692a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800692e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006930:	4b3e      	ldr	r3, [pc, #248]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	4a3d      	ldr	r2, [pc, #244]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 8006936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800693a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fb f9f4 	bl	8001d28 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006944:	f7fb f9f0 	bl	8001d28 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e066      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006956:	4b35      	ldr	r3, [pc, #212]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0f0      	beq.n	8006944 <HAL_RCC_OscConfig+0x530>
 8006962:	e05e      	b.n	8006a22 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006964:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a30      	ldr	r2, [pc, #192]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 800696a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800696e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006970:	f7fb f9da 	bl	8001d28 <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006976:	e008      	b.n	800698a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006978:	f7fb f9d6 	bl	8001d28 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e04c      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800698a:	4b28      	ldr	r3, [pc, #160]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1f0      	bne.n	8006978 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006996:	4b25      	ldr	r3, [pc, #148]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	4924      	ldr	r1, [pc, #144]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 800699c:	4b25      	ldr	r3, [pc, #148]	; (8006a34 <HAL_RCC_OscConfig+0x620>)
 800699e:	4013      	ands	r3, r2
 80069a0:	60cb      	str	r3, [r1, #12]
 80069a2:	e03e      	b.n	8006a22 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e039      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80069b0:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <HAL_RCC_OscConfig+0x618>)
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f003 0203 	and.w	r2, r3, #3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d12c      	bne.n	8006a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	3b01      	subs	r3, #1
 80069d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d123      	bne.n	8006a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d11b      	bne.n	8006a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d113      	bne.n	8006a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	3b01      	subs	r3, #1
 8006a04:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d109      	bne.n	8006a1e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a14:	085b      	lsrs	r3, r3, #1
 8006a16:	3b01      	subs	r3, #1
 8006a18:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d001      	beq.n	8006a22 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40021000 	.word	0x40021000
 8006a30:	019f800c 	.word	0x019f800c
 8006a34:	feeefffc 	.word	0xfeeefffc

08006a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e11e      	b.n	8006c8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a50:	4b91      	ldr	r3, [pc, #580]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d910      	bls.n	8006a80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5e:	4b8e      	ldr	r3, [pc, #568]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 020f 	bic.w	r2, r3, #15
 8006a66:	498c      	ldr	r1, [pc, #560]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6e:	4b8a      	ldr	r3, [pc, #552]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d001      	beq.n	8006a80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e106      	b.n	8006c8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0301 	and.w	r3, r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d073      	beq.n	8006b74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d129      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a94:	4b81      	ldr	r3, [pc, #516]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e0f4      	b.n	8006c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006aa4:	f000 f99e 	bl	8006de4 <RCC_GetSysClockFreqFromPLLSource>
 8006aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	4a7c      	ldr	r2, [pc, #496]	; (8006ca0 <HAL_RCC_ClockConfig+0x268>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d93f      	bls.n	8006b32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ab2:	4b7a      	ldr	r3, [pc, #488]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d033      	beq.n	8006b32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d12f      	bne.n	8006b32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006ad2:	4b72      	ldr	r3, [pc, #456]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ada:	4a70      	ldr	r2, [pc, #448]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	e024      	b.n	8006b32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d107      	bne.n	8006b00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006af0:	4b6a      	ldr	r3, [pc, #424]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d109      	bne.n	8006b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0c6      	b.n	8006c8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b00:	4b66      	ldr	r3, [pc, #408]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d101      	bne.n	8006b10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0be      	b.n	8006c8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006b10:	f000 f8ce 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006b14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4a61      	ldr	r2, [pc, #388]	; (8006ca0 <HAL_RCC_ClockConfig+0x268>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d909      	bls.n	8006b32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b1e:	4b5f      	ldr	r3, [pc, #380]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b26:	4a5d      	ldr	r2, [pc, #372]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006b2e:	2380      	movs	r3, #128	; 0x80
 8006b30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006b32:	4b5a      	ldr	r3, [pc, #360]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f023 0203 	bic.w	r2, r3, #3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	4957      	ldr	r1, [pc, #348]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b44:	f7fb f8f0 	bl	8001d28 <HAL_GetTick>
 8006b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4a:	e00a      	b.n	8006b62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b4c:	f7fb f8ec 	bl	8001d28 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d901      	bls.n	8006b62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e095      	b.n	8006c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b62:	4b4e      	ldr	r3, [pc, #312]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 020c 	and.w	r2, r3, #12
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d1eb      	bne.n	8006b4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d023      	beq.n	8006bc8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b8c:	4b43      	ldr	r3, [pc, #268]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	4a42      	ldr	r2, [pc, #264]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006b92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0308 	and.w	r3, r3, #8
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d007      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ba4:	4b3d      	ldr	r3, [pc, #244]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006bac:	4a3b      	ldr	r2, [pc, #236]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006bb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bb4:	4b39      	ldr	r3, [pc, #228]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4936      	ldr	r1, [pc, #216]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	608b      	str	r3, [r1, #8]
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2b80      	cmp	r3, #128	; 0x80
 8006bcc:	d105      	bne.n	8006bda <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006bce:	4b33      	ldr	r3, [pc, #204]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	4a32      	ldr	r2, [pc, #200]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bda:	4b2f      	ldr	r3, [pc, #188]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	683a      	ldr	r2, [r7, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d21d      	bcs.n	8006c24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006be8:	4b2b      	ldr	r3, [pc, #172]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f023 020f 	bic.w	r2, r3, #15
 8006bf0:	4929      	ldr	r1, [pc, #164]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006bf8:	f7fb f896 	bl	8001d28 <HAL_GetTick>
 8006bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	e00a      	b.n	8006c16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c00:	f7fb f892 	bl	8001d28 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e03b      	b.n	8006c8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c16:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <HAL_RCC_ClockConfig+0x260>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 030f 	and.w	r3, r3, #15
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d1ed      	bne.n	8006c00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c30:	4b1a      	ldr	r3, [pc, #104]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	4917      	ldr	r1, [pc, #92]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0308 	and.w	r3, r3, #8
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d009      	beq.n	8006c62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c4e:	4b13      	ldr	r3, [pc, #76]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	490f      	ldr	r1, [pc, #60]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c62:	f000 f825 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8006c66:	4602      	mov	r2, r0
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	091b      	lsrs	r3, r3, #4
 8006c6e:	f003 030f 	and.w	r3, r3, #15
 8006c72:	490c      	ldr	r1, [pc, #48]	; (8006ca4 <HAL_RCC_ClockConfig+0x26c>)
 8006c74:	5ccb      	ldrb	r3, [r1, r3]
 8006c76:	f003 031f 	and.w	r3, r3, #31
 8006c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ca8 <HAL_RCC_ClockConfig+0x270>)
 8006c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006c82:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x274>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fb f802 	bl	8001c90 <HAL_InitTick>
 8006c8c:	4603      	mov	r3, r0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	40022000 	.word	0x40022000
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	04c4b400 	.word	0x04c4b400
 8006ca4:	0800d174 	.word	0x0800d174
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	20000004 	.word	0x20000004

08006cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b087      	sub	sp, #28
 8006cb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006cb6:	4b2c      	ldr	r3, [pc, #176]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b04      	cmp	r3, #4
 8006cc0:	d102      	bne.n	8006cc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006cc2:	4b2a      	ldr	r3, [pc, #168]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	e047      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006cc8:	4b27      	ldr	r3, [pc, #156]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 030c 	and.w	r3, r3, #12
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d102      	bne.n	8006cda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006cd4:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006cd6:	613b      	str	r3, [r7, #16]
 8006cd8:	e03e      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 030c 	and.w	r3, r3, #12
 8006ce2:	2b0c      	cmp	r3, #12
 8006ce4:	d136      	bne.n	8006d54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ce6:	4b20      	ldr	r3, [pc, #128]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f003 0303 	and.w	r3, r3, #3
 8006cee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006cf0:	4b1d      	ldr	r3, [pc, #116]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	091b      	lsrs	r3, r3, #4
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d10c      	bne.n	8006d1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d04:	4a1a      	ldr	r2, [pc, #104]	; (8006d70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d0c:	4a16      	ldr	r2, [pc, #88]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d0e:	68d2      	ldr	r2, [r2, #12]
 8006d10:	0a12      	lsrs	r2, r2, #8
 8006d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d16:	fb02 f303 	mul.w	r3, r2, r3
 8006d1a:	617b      	str	r3, [r7, #20]
      break;
 8006d1c:	e00c      	b.n	8006d38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d28:	68d2      	ldr	r2, [r2, #12]
 8006d2a:	0a12      	lsrs	r2, r2, #8
 8006d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d30:	fb02 f303 	mul.w	r3, r2, r3
 8006d34:	617b      	str	r3, [r7, #20]
      break;
 8006d36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	0e5b      	lsrs	r3, r3, #25
 8006d3e:	f003 0303 	and.w	r3, r3, #3
 8006d42:	3301      	adds	r3, #1
 8006d44:	005b      	lsls	r3, r3, #1
 8006d46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d50:	613b      	str	r3, [r7, #16]
 8006d52:	e001      	b.n	8006d58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006d58:	693b      	ldr	r3, [r7, #16]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	00f42400 	.word	0x00f42400
 8006d70:	007a1200 	.word	0x007a1200

08006d74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d78:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000000 	.word	0x20000000

08006d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006d90:	f7ff fff0 	bl	8006d74 <HAL_RCC_GetHCLKFreq>
 8006d94:	4602      	mov	r2, r0
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	0a1b      	lsrs	r3, r3, #8
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	4904      	ldr	r1, [pc, #16]	; (8006db4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006da2:	5ccb      	ldrb	r3, [r1, r3]
 8006da4:	f003 031f 	and.w	r3, r3, #31
 8006da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40021000 	.word	0x40021000
 8006db4:	0800d184 	.word	0x0800d184

08006db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006dbc:	f7ff ffda 	bl	8006d74 <HAL_RCC_GetHCLKFreq>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
 8006dc6:	0adb      	lsrs	r3, r3, #11
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	4904      	ldr	r1, [pc, #16]	; (8006de0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006dce:	5ccb      	ldrb	r3, [r1, r3]
 8006dd0:	f003 031f 	and.w	r3, r3, #31
 8006dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	0800d184 	.word	0x0800d184

08006de4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dea:	4b1e      	ldr	r3, [pc, #120]	; (8006e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	091b      	lsrs	r3, r3, #4
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d10c      	bne.n	8006e22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e08:	4a17      	ldr	r2, [pc, #92]	; (8006e68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	4a14      	ldr	r2, [pc, #80]	; (8006e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e12:	68d2      	ldr	r2, [r2, #12]
 8006e14:	0a12      	lsrs	r2, r2, #8
 8006e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	617b      	str	r3, [r7, #20]
    break;
 8006e20:	e00c      	b.n	8006e3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e22:	4a12      	ldr	r2, [pc, #72]	; (8006e6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2a:	4a0e      	ldr	r2, [pc, #56]	; (8006e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e2c:	68d2      	ldr	r2, [r2, #12]
 8006e2e:	0a12      	lsrs	r2, r2, #8
 8006e30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e34:	fb02 f303 	mul.w	r3, r2, r3
 8006e38:	617b      	str	r3, [r7, #20]
    break;
 8006e3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	0e5b      	lsrs	r3, r3, #25
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	3301      	adds	r3, #1
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006e56:	687b      	ldr	r3, [r7, #4]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	371c      	adds	r7, #28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40021000 	.word	0x40021000
 8006e68:	007a1200 	.word	0x007a1200
 8006e6c:	00f42400 	.word	0x00f42400

08006e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e78:	2300      	movs	r3, #0
 8006e7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8098 	beq.w	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e92:	4b43      	ldr	r3, [pc, #268]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d10d      	bne.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e9e:	4b40      	ldr	r3, [pc, #256]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea2:	4a3f      	ldr	r2, [pc, #252]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8006eaa:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006eb2:	60bb      	str	r3, [r7, #8]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eba:	4b3a      	ldr	r3, [pc, #232]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a39      	ldr	r2, [pc, #228]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec6:	f7fa ff2f 	bl	8001d28 <HAL_GetTick>
 8006eca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ecc:	e009      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ece:	f7fa ff2b 	bl	8001d28 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d902      	bls.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	74fb      	strb	r3, [r7, #19]
        break;
 8006ee0:	e005      	b.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee2:	4b30      	ldr	r3, [pc, #192]	; (8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0ef      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006eee:	7cfb      	ldrb	r3, [r7, #19]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d159      	bne.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ef4:	4b2a      	ldr	r3, [pc, #168]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006efe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01e      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d019      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006f10:	4b23      	ldr	r3, [pc, #140]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f1c:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f22:	4a1f      	ldr	r2, [pc, #124]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f2c:	4b1c      	ldr	r3, [pc, #112]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	4a1b      	ldr	r2, [pc, #108]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006f3c:	4a18      	ldr	r2, [pc, #96]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d016      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4e:	f7fa feeb 	bl	8001d28 <HAL_GetTick>
 8006f52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f54:	e00b      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f56:	f7fa fee7 	bl	8001d28 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d902      	bls.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	74fb      	strb	r3, [r7, #19]
            break;
 8006f6c:	e006      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f6e:	4b0c      	ldr	r3, [pc, #48]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f74:	f003 0302 	and.w	r3, r3, #2
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0ec      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006f7c:	7cfb      	ldrb	r3, [r7, #19]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	4903      	ldr	r1, [pc, #12]	; (8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f98:	e008      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f9a:	7cfb      	ldrb	r3, [r7, #19]
 8006f9c:	74bb      	strb	r3, [r7, #18]
 8006f9e:	e005      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006fa0:	40021000 	.word	0x40021000
 8006fa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fa8:	7cfb      	ldrb	r3, [r7, #19]
 8006faa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006fac:	7c7b      	ldrb	r3, [r7, #17]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d105      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fb2:	4ba6      	ldr	r3, [pc, #664]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	4aa5      	ldr	r2, [pc, #660]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006fca:	4ba0      	ldr	r3, [pc, #640]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd0:	f023 0203 	bic.w	r2, r3, #3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	499c      	ldr	r1, [pc, #624]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00a      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006fec:	4b97      	ldr	r3, [pc, #604]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff2:	f023 020c 	bic.w	r2, r3, #12
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	4994      	ldr	r1, [pc, #592]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0304 	and.w	r3, r3, #4
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00a      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800700e:	4b8f      	ldr	r3, [pc, #572]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007014:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	498b      	ldr	r1, [pc, #556]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 0308 	and.w	r3, r3, #8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00a      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007030:	4b86      	ldr	r3, [pc, #536]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007036:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	4983      	ldr	r1, [pc, #524]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007040:	4313      	orrs	r3, r2
 8007042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0320 	and.w	r3, r3, #32
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00a      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007052:	4b7e      	ldr	r3, [pc, #504]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007058:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	497a      	ldr	r1, [pc, #488]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00a      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007074:	4b75      	ldr	r3, [pc, #468]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	699b      	ldr	r3, [r3, #24]
 8007082:	4972      	ldr	r1, [pc, #456]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007084:	4313      	orrs	r3, r2
 8007086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00a      	beq.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007096:	4b6d      	ldr	r3, [pc, #436]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4969      	ldr	r1, [pc, #420]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80070b8:	4b64      	ldr	r3, [pc, #400]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	4961      	ldr	r1, [pc, #388]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070da:	4b5c      	ldr	r3, [pc, #368]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	4958      	ldr	r1, [pc, #352]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d015      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070fc:	4b53      	ldr	r3, [pc, #332]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710a:	4950      	ldr	r1, [pc, #320]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800711a:	d105      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800711c:	4b4b      	ldr	r3, [pc, #300]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4a4a      	ldr	r2, [pc, #296]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007126:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007130:	2b00      	cmp	r3, #0
 8007132:	d015      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007134:	4b45      	ldr	r3, [pc, #276]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007142:	4942      	ldr	r1, [pc, #264]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007152:	d105      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007154:	4b3d      	ldr	r3, [pc, #244]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	4a3c      	ldr	r2, [pc, #240]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800715a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800715e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d015      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800716c:	4b37      	ldr	r3, [pc, #220]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007172:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717a:	4934      	ldr	r1, [pc, #208]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800718a:	d105      	bne.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800718c:	4b2f      	ldr	r3, [pc, #188]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a2e      	ldr	r2, [pc, #184]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007196:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d015      	beq.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071a4:	4b29      	ldr	r3, [pc, #164]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	4926      	ldr	r1, [pc, #152]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071c2:	d105      	bne.n	80071d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071c4:	4b21      	ldr	r3, [pc, #132]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	4a20      	ldr	r2, [pc, #128]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d015      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80071dc:	4b1b      	ldr	r3, [pc, #108]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ea:	4918      	ldr	r1, [pc, #96]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071fa:	d105      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071fc:	4b13      	ldr	r3, [pc, #76]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	4a12      	ldr	r2, [pc, #72]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007202:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007206:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d015      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007214:	4b0d      	ldr	r3, [pc, #52]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007222:	490a      	ldr	r1, [pc, #40]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007224:	4313      	orrs	r3, r2
 8007226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800722e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007232:	d105      	bne.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	4a04      	ldr	r2, [pc, #16]	; (800724c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800723a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800723e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007240:	7cbb      	ldrb	r3, [r7, #18]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3718      	adds	r7, #24
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	40021000 	.word	0x40021000

08007250 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d070      	beq.n	8007344 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7fa fa80 	bl	800177c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0310 	and.w	r3, r3, #16
 800728e:	2b10      	cmp	r3, #16
 8007290:	d04f      	beq.n	8007332 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	22ca      	movs	r2, #202	; 0xca
 8007298:	625a      	str	r2, [r3, #36]	; 0x24
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2253      	movs	r2, #83	; 0x53
 80072a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f878 	bl	8007398 <RTC_EnterInitMode>
 80072a8:	4603      	mov	r3, r0
 80072aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d126      	bne.n	8007300 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80072c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072c4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	6999      	ldr	r1, [r3, #24]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	431a      	orrs	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	431a      	orrs	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	430a      	orrs	r2, r1
 80072e2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68d9      	ldr	r1, [r3, #12]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	041a      	lsls	r2, r3, #16
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f884 	bl	8007404 <RTC_ExitInitMode>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d110      	bne.n	8007328 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a1a      	ldr	r2, [r3, #32]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	431a      	orrs	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	22ff      	movs	r2, #255	; 0xff
 800732e:	625a      	str	r2, [r3, #36]	; 0x24
 8007330:	e001      	b.n	8007336 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d103      	bne.n	8007344 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007344:	7bfb      	ldrb	r3, [r7, #15]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a0d      	ldr	r2, [pc, #52]	; (8007394 <HAL_RTC_WaitForSynchro+0x44>)
 800735e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007360:	f7fa fce2 	bl	8001d28 <HAL_GetTick>
 8007364:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8007366:	e009      	b.n	800737c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007368:	f7fa fcde 	bl	8001d28 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007376:	d901      	bls.n	800737c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e007      	b.n	800738c <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f003 0320 	and.w	r3, r3, #32
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0ee      	beq.n	8007368 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	0001005f 	.word	0x0001005f

08007398 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d123      	bne.n	80073fa <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68da      	ldr	r2, [r3, #12]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80073c2:	f7fa fcb1 	bl	8001d28 <HAL_GetTick>
 80073c6:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073c8:	e00d      	b.n	80073e6 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80073ca:	f7fa fcad 	bl	8001d28 <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073d8:	d905      	bls.n	80073e6 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2203      	movs	r2, #3
 80073e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d102      	bne.n	80073fa <RTC_EnterInitMode+0x62>
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d1e7      	bne.n	80073ca <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68da      	ldr	r2, [r3, #12]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800741e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	f003 0320 	and.w	r3, r3, #32
 800742a:	2b00      	cmp	r3, #0
 800742c:	d10c      	bne.n	8007448 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7ff ff8e 	bl	8007350 <HAL_RTC_WaitForSynchro>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d022      	beq.n	8007480 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2203      	movs	r2, #3
 800743e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	73fb      	strb	r3, [r7, #15]
 8007446:	e01b      	b.n	8007480 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	699a      	ldr	r2, [r3, #24]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0220 	bic.w	r2, r2, #32
 8007456:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7ff ff79 	bl	8007350 <HAL_RTC_WaitForSynchro>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2203      	movs	r2, #3
 8007468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699a      	ldr	r2, [r3, #24]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f042 0220 	orr.w	r2, r2, #32
 800747e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b086      	sub	sp, #24
 800748e:	af00      	add	r7, sp, #0
 8007490:	60f8      	str	r0, [r7, #12]
 8007492:	60b9      	str	r1, [r7, #8]
 8007494:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800749c:	2b01      	cmp	r3, #1
 800749e:	d101      	bne.n	80074a4 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 80074a0:	2302      	movs	r3, #2
 80074a2:	e062      	b.n	800756a <HAL_RTCEx_SetWakeUpTimer+0xe0>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	22ca      	movs	r2, #202	; 0xca
 80074ba:	625a      	str	r2, [r3, #36]	; 0x24
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2253      	movs	r2, #83	; 0x53
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d120      	bne.n	8007524 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 80074e2:	f7fa fc21 	bl	8001d28 <HAL_GetTick>
 80074e6:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80074e8:	e015      	b.n	8007516 <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074ea:	f7fa fc1d 	bl	8001d28 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074f8:	d90d      	bls.n	8007516 <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	22ff      	movs	r2, #255	; 0xff
 8007500:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2203      	movs	r2, #3
 8007506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e029      	b.n	800756a <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f003 0304 	and.w	r3, r3, #4
 8007520:	2b00      	cmp	r3, #0
 8007522:	d0e2      	beq.n	80074ea <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	f023 0107 	bic.w	r1, r3, #7
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	430a      	orrs	r2, r1
 8007536:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	699a      	ldr	r2, [r3, #24]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800754e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	22ff      	movs	r2, #255	; 0xff
 8007556:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b084      	sub	sp, #16
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e09d      	b.n	80076c0 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	2b00      	cmp	r3, #0
 800758a:	d108      	bne.n	800759e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007594:	d009      	beq.n	80075aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	61da      	str	r2, [r3, #28]
 800759c:	e005      	b.n	80075aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d106      	bne.n	80075ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7fa f953 	bl	8001870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80075ea:	d902      	bls.n	80075f2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	e002      	b.n	80075f8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80075f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007600:	d007      	beq.n	8007612 <HAL_SPI_Init+0xa0>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800760a:	d002      	beq.n	8007612 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007622:	431a      	orrs	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f003 0301 	and.w	r3, r3, #1
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007640:	431a      	orrs	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800764a:	431a      	orrs	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007654:	ea42 0103 	orr.w	r1, r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	430a      	orrs	r2, r1
 8007666:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	0c1b      	lsrs	r3, r3, #16
 800766e:	f003 0204 	and.w	r2, r3, #4
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	431a      	orrs	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007680:	f003 0308 	and.w	r3, r3, #8
 8007684:	431a      	orrs	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800768e:	ea42 0103 	orr.w	r1, r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	69da      	ldr	r2, [r3, #28]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e042      	b.n	8007760 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fa fa33 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2224      	movs	r2, #36	; 0x24
 80076f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0201 	bic.w	r2, r2, #1
 8007708:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 fb82 	bl	8007e1c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f8b3 	bl	8007884 <UART_SetConfig>
 800771e:	4603      	mov	r3, r0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e01b      	b.n	8007760 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f042 0201 	orr.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc01 	bl	8007f60 <UART_CheckIdleState>
 800775e:	4603      	mov	r3, r0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b08a      	sub	sp, #40	; 0x28
 800776c:	af02      	add	r7, sp, #8
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	603b      	str	r3, [r7, #0]
 8007774:	4613      	mov	r3, r2
 8007776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777e:	2b20      	cmp	r3, #32
 8007780:	d17b      	bne.n	800787a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <HAL_UART_Transmit+0x26>
 8007788:	88fb      	ldrh	r3, [r7, #6]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d101      	bne.n	8007792 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e074      	b.n	800787c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2221      	movs	r2, #33	; 0x21
 800779e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077a2:	f7fa fac1 	bl	8001d28 <HAL_GetTick>
 80077a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	88fa      	ldrh	r2, [r7, #6]
 80077ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	88fa      	ldrh	r2, [r7, #6]
 80077b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c0:	d108      	bne.n	80077d4 <HAL_UART_Transmit+0x6c>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d104      	bne.n	80077d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	e003      	b.n	80077dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077dc:	e030      	b.n	8007840 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	2200      	movs	r2, #0
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fc63 	bl	80080b4 <UART_WaitOnFlagUntilTimeout>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80077fc:	2303      	movs	r3, #3
 80077fe:	e03d      	b.n	800787c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d10b      	bne.n	800781e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007814:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	3302      	adds	r3, #2
 800781a:	61bb      	str	r3, [r7, #24]
 800781c:	e007      	b.n	800782e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	781a      	ldrb	r2, [r3, #0]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	3301      	adds	r3, #1
 800782c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007834:	b29b      	uxth	r3, r3
 8007836:	3b01      	subs	r3, #1
 8007838:	b29a      	uxth	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1c8      	bne.n	80077de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	2200      	movs	r2, #0
 8007854:	2140      	movs	r1, #64	; 0x40
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fc2c 	bl	80080b4 <UART_WaitOnFlagUntilTimeout>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2220      	movs	r2, #32
 8007866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e006      	b.n	800787c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2220      	movs	r2, #32
 8007872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e000      	b.n	800787c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3720      	adds	r7, #32
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007888:	b08c      	sub	sp, #48	; 0x30
 800788a:	af00      	add	r7, sp, #0
 800788c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	431a      	orrs	r2, r3
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	695b      	ldr	r3, [r3, #20]
 80078a2:	431a      	orrs	r2, r3
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4bab      	ldr	r3, [pc, #684]	; (8007b60 <UART_SetConfig+0x2dc>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078bc:	430b      	orrs	r3, r1
 80078be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4aa0      	ldr	r2, [pc, #640]	; (8007b64 <UART_SetConfig+0x2e0>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078ec:	4313      	orrs	r3, r2
 80078ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80078fa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	6812      	ldr	r2, [r2, #0]
 8007902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007904:	430b      	orrs	r3, r1
 8007906:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800790e:	f023 010f 	bic.w	r1, r3, #15
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a91      	ldr	r2, [pc, #580]	; (8007b68 <UART_SetConfig+0x2e4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d125      	bne.n	8007974 <UART_SetConfig+0xf0>
 8007928:	4b90      	ldr	r3, [pc, #576]	; (8007b6c <UART_SetConfig+0x2e8>)
 800792a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	2b03      	cmp	r3, #3
 8007934:	d81a      	bhi.n	800796c <UART_SetConfig+0xe8>
 8007936:	a201      	add	r2, pc, #4	; (adr r2, 800793c <UART_SetConfig+0xb8>)
 8007938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793c:	0800794d 	.word	0x0800794d
 8007940:	0800795d 	.word	0x0800795d
 8007944:	08007955 	.word	0x08007955
 8007948:	08007965 	.word	0x08007965
 800794c:	2301      	movs	r3, #1
 800794e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007952:	e0d6      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007954:	2302      	movs	r3, #2
 8007956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800795a:	e0d2      	b.n	8007b02 <UART_SetConfig+0x27e>
 800795c:	2304      	movs	r3, #4
 800795e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007962:	e0ce      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007964:	2308      	movs	r3, #8
 8007966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800796a:	e0ca      	b.n	8007b02 <UART_SetConfig+0x27e>
 800796c:	2310      	movs	r3, #16
 800796e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007972:	e0c6      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a7d      	ldr	r2, [pc, #500]	; (8007b70 <UART_SetConfig+0x2ec>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d138      	bne.n	80079f0 <UART_SetConfig+0x16c>
 800797e:	4b7b      	ldr	r3, [pc, #492]	; (8007b6c <UART_SetConfig+0x2e8>)
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007984:	f003 030c 	and.w	r3, r3, #12
 8007988:	2b0c      	cmp	r3, #12
 800798a:	d82d      	bhi.n	80079e8 <UART_SetConfig+0x164>
 800798c:	a201      	add	r2, pc, #4	; (adr r2, 8007994 <UART_SetConfig+0x110>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079c9 	.word	0x080079c9
 8007998:	080079e9 	.word	0x080079e9
 800799c:	080079e9 	.word	0x080079e9
 80079a0:	080079e9 	.word	0x080079e9
 80079a4:	080079d9 	.word	0x080079d9
 80079a8:	080079e9 	.word	0x080079e9
 80079ac:	080079e9 	.word	0x080079e9
 80079b0:	080079e9 	.word	0x080079e9
 80079b4:	080079d1 	.word	0x080079d1
 80079b8:	080079e9 	.word	0x080079e9
 80079bc:	080079e9 	.word	0x080079e9
 80079c0:	080079e9 	.word	0x080079e9
 80079c4:	080079e1 	.word	0x080079e1
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ce:	e098      	b.n	8007b02 <UART_SetConfig+0x27e>
 80079d0:	2302      	movs	r3, #2
 80079d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079d6:	e094      	b.n	8007b02 <UART_SetConfig+0x27e>
 80079d8:	2304      	movs	r3, #4
 80079da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079de:	e090      	b.n	8007b02 <UART_SetConfig+0x27e>
 80079e0:	2308      	movs	r3, #8
 80079e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079e6:	e08c      	b.n	8007b02 <UART_SetConfig+0x27e>
 80079e8:	2310      	movs	r3, #16
 80079ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80079ee:	e088      	b.n	8007b02 <UART_SetConfig+0x27e>
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a5f      	ldr	r2, [pc, #380]	; (8007b74 <UART_SetConfig+0x2f0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d125      	bne.n	8007a46 <UART_SetConfig+0x1c2>
 80079fa:	4b5c      	ldr	r3, [pc, #368]	; (8007b6c <UART_SetConfig+0x2e8>)
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a04:	2b30      	cmp	r3, #48	; 0x30
 8007a06:	d016      	beq.n	8007a36 <UART_SetConfig+0x1b2>
 8007a08:	2b30      	cmp	r3, #48	; 0x30
 8007a0a:	d818      	bhi.n	8007a3e <UART_SetConfig+0x1ba>
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d00a      	beq.n	8007a26 <UART_SetConfig+0x1a2>
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d814      	bhi.n	8007a3e <UART_SetConfig+0x1ba>
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <UART_SetConfig+0x19a>
 8007a18:	2b10      	cmp	r3, #16
 8007a1a:	d008      	beq.n	8007a2e <UART_SetConfig+0x1aa>
 8007a1c:	e00f      	b.n	8007a3e <UART_SetConfig+0x1ba>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a24:	e06d      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a26:	2302      	movs	r3, #2
 8007a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a2c:	e069      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a2e:	2304      	movs	r3, #4
 8007a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a34:	e065      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a36:	2308      	movs	r3, #8
 8007a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a3c:	e061      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a3e:	2310      	movs	r3, #16
 8007a40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a44:	e05d      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a4b      	ldr	r2, [pc, #300]	; (8007b78 <UART_SetConfig+0x2f4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d125      	bne.n	8007a9c <UART_SetConfig+0x218>
 8007a50:	4b46      	ldr	r3, [pc, #280]	; (8007b6c <UART_SetConfig+0x2e8>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a5a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a5c:	d016      	beq.n	8007a8c <UART_SetConfig+0x208>
 8007a5e:	2bc0      	cmp	r3, #192	; 0xc0
 8007a60:	d818      	bhi.n	8007a94 <UART_SetConfig+0x210>
 8007a62:	2b80      	cmp	r3, #128	; 0x80
 8007a64:	d00a      	beq.n	8007a7c <UART_SetConfig+0x1f8>
 8007a66:	2b80      	cmp	r3, #128	; 0x80
 8007a68:	d814      	bhi.n	8007a94 <UART_SetConfig+0x210>
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d002      	beq.n	8007a74 <UART_SetConfig+0x1f0>
 8007a6e:	2b40      	cmp	r3, #64	; 0x40
 8007a70:	d008      	beq.n	8007a84 <UART_SetConfig+0x200>
 8007a72:	e00f      	b.n	8007a94 <UART_SetConfig+0x210>
 8007a74:	2300      	movs	r3, #0
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a7a:	e042      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a82:	e03e      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a84:	2304      	movs	r3, #4
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a8a:	e03a      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a8c:	2308      	movs	r3, #8
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a92:	e036      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a94:	2310      	movs	r3, #16
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9a:	e032      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a30      	ldr	r2, [pc, #192]	; (8007b64 <UART_SetConfig+0x2e0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d12a      	bne.n	8007afc <UART_SetConfig+0x278>
 8007aa6:	4b31      	ldr	r3, [pc, #196]	; (8007b6c <UART_SetConfig+0x2e8>)
 8007aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ab0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ab4:	d01a      	beq.n	8007aec <UART_SetConfig+0x268>
 8007ab6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007aba:	d81b      	bhi.n	8007af4 <UART_SetConfig+0x270>
 8007abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac0:	d00c      	beq.n	8007adc <UART_SetConfig+0x258>
 8007ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac6:	d815      	bhi.n	8007af4 <UART_SetConfig+0x270>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <UART_SetConfig+0x250>
 8007acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad0:	d008      	beq.n	8007ae4 <UART_SetConfig+0x260>
 8007ad2:	e00f      	b.n	8007af4 <UART_SetConfig+0x270>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ada:	e012      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007adc:	2302      	movs	r3, #2
 8007ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ae2:	e00e      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aea:	e00a      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007aec:	2308      	movs	r3, #8
 8007aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af2:	e006      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007af4:	2310      	movs	r3, #16
 8007af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afa:	e002      	b.n	8007b02 <UART_SetConfig+0x27e>
 8007afc:	2310      	movs	r3, #16
 8007afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a17      	ldr	r2, [pc, #92]	; (8007b64 <UART_SetConfig+0x2e0>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	f040 80a8 	bne.w	8007c5e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007b12:	2b08      	cmp	r3, #8
 8007b14:	d834      	bhi.n	8007b80 <UART_SetConfig+0x2fc>
 8007b16:	a201      	add	r2, pc, #4	; (adr r2, 8007b1c <UART_SetConfig+0x298>)
 8007b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b1c:	08007b41 	.word	0x08007b41
 8007b20:	08007b81 	.word	0x08007b81
 8007b24:	08007b49 	.word	0x08007b49
 8007b28:	08007b81 	.word	0x08007b81
 8007b2c:	08007b4f 	.word	0x08007b4f
 8007b30:	08007b81 	.word	0x08007b81
 8007b34:	08007b81 	.word	0x08007b81
 8007b38:	08007b81 	.word	0x08007b81
 8007b3c:	08007b57 	.word	0x08007b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b40:	f7ff f924 	bl	8006d8c <HAL_RCC_GetPCLK1Freq>
 8007b44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b46:	e021      	b.n	8007b8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <UART_SetConfig+0x2f8>)
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b4c:	e01e      	b.n	8007b8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b4e:	f7ff f8af 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8007b52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007b54:	e01a      	b.n	8007b8c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007b5c:	e016      	b.n	8007b8c <UART_SetConfig+0x308>
 8007b5e:	bf00      	nop
 8007b60:	cfff69f3 	.word	0xcfff69f3
 8007b64:	40008000 	.word	0x40008000
 8007b68:	40013800 	.word	0x40013800
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	40004400 	.word	0x40004400
 8007b74:	40004800 	.word	0x40004800
 8007b78:	40004c00 	.word	0x40004c00
 8007b7c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007b8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 812a 	beq.w	8007de8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	4a9e      	ldr	r2, [pc, #632]	; (8007e14 <UART_SetConfig+0x590>)
 8007b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ba6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	4413      	add	r3, r2
 8007bb2:	69ba      	ldr	r2, [r7, #24]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d305      	bcc.n	8007bc4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d903      	bls.n	8007bcc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007bca:	e10d      	b.n	8007de8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	2200      	movs	r2, #0
 8007bd0:	60bb      	str	r3, [r7, #8]
 8007bd2:	60fa      	str	r2, [r7, #12]
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	4a8e      	ldr	r2, [pc, #568]	; (8007e14 <UART_SetConfig+0x590>)
 8007bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	2200      	movs	r2, #0
 8007be2:	603b      	str	r3, [r7, #0]
 8007be4:	607a      	str	r2, [r7, #4]
 8007be6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007bee:	f7f8 ff09 	bl	8000a04 <__aeabi_uldivmod>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	020b      	lsls	r3, r1, #8
 8007c04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007c08:	0202      	lsls	r2, r0, #8
 8007c0a:	6979      	ldr	r1, [r7, #20]
 8007c0c:	6849      	ldr	r1, [r1, #4]
 8007c0e:	0849      	lsrs	r1, r1, #1
 8007c10:	2000      	movs	r0, #0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4605      	mov	r5, r0
 8007c16:	eb12 0804 	adds.w	r8, r2, r4
 8007c1a:	eb43 0905 	adc.w	r9, r3, r5
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	469a      	mov	sl, r3
 8007c26:	4693      	mov	fp, r2
 8007c28:	4652      	mov	r2, sl
 8007c2a:	465b      	mov	r3, fp
 8007c2c:	4640      	mov	r0, r8
 8007c2e:	4649      	mov	r1, r9
 8007c30:	f7f8 fee8 	bl	8000a04 <__aeabi_uldivmod>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4613      	mov	r3, r2
 8007c3a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c42:	d308      	bcc.n	8007c56 <UART_SetConfig+0x3d2>
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c4a:	d204      	bcs.n	8007c56 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6a3a      	ldr	r2, [r7, #32]
 8007c52:	60da      	str	r2, [r3, #12]
 8007c54:	e0c8      	b.n	8007de8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007c5c:	e0c4      	b.n	8007de8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c66:	d167      	bne.n	8007d38 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007c68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d828      	bhi.n	8007cc2 <UART_SetConfig+0x43e>
 8007c70:	a201      	add	r2, pc, #4	; (adr r2, 8007c78 <UART_SetConfig+0x3f4>)
 8007c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c76:	bf00      	nop
 8007c78:	08007c9d 	.word	0x08007c9d
 8007c7c:	08007ca5 	.word	0x08007ca5
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cc3 	.word	0x08007cc3
 8007c88:	08007cb3 	.word	0x08007cb3
 8007c8c:	08007cc3 	.word	0x08007cc3
 8007c90:	08007cc3 	.word	0x08007cc3
 8007c94:	08007cc3 	.word	0x08007cc3
 8007c98:	08007cbb 	.word	0x08007cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c9c:	f7ff f876 	bl	8006d8c <HAL_RCC_GetPCLK1Freq>
 8007ca0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ca2:	e014      	b.n	8007cce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ca4:	f7ff f888 	bl	8006db8 <HAL_RCC_GetPCLK2Freq>
 8007ca8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007caa:	e010      	b.n	8007cce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cac:	4b5a      	ldr	r3, [pc, #360]	; (8007e18 <UART_SetConfig+0x594>)
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cb0:	e00d      	b.n	8007cce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cb2:	f7fe fffd 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cb8:	e009      	b.n	8007cce <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cc0:	e005      	b.n	8007cce <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ccc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8089 	beq.w	8007de8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	4a4e      	ldr	r2, [pc, #312]	; (8007e14 <UART_SetConfig+0x590>)
 8007cdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ce8:	005a      	lsls	r2, r3, #1
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	441a      	add	r2, r3
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	2b0f      	cmp	r3, #15
 8007d00:	d916      	bls.n	8007d30 <UART_SetConfig+0x4ac>
 8007d02:	6a3b      	ldr	r3, [r7, #32]
 8007d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d08:	d212      	bcs.n	8007d30 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f023 030f 	bic.w	r3, r3, #15
 8007d12:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	085b      	lsrs	r3, r3, #1
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	8bfb      	ldrh	r3, [r7, #30]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	8bfa      	ldrh	r2, [r7, #30]
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	e05b      	b.n	8007de8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d36:	e057      	b.n	8007de8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d38:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d828      	bhi.n	8007d92 <UART_SetConfig+0x50e>
 8007d40:	a201      	add	r2, pc, #4	; (adr r2, 8007d48 <UART_SetConfig+0x4c4>)
 8007d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d46:	bf00      	nop
 8007d48:	08007d6d 	.word	0x08007d6d
 8007d4c:	08007d75 	.word	0x08007d75
 8007d50:	08007d7d 	.word	0x08007d7d
 8007d54:	08007d93 	.word	0x08007d93
 8007d58:	08007d83 	.word	0x08007d83
 8007d5c:	08007d93 	.word	0x08007d93
 8007d60:	08007d93 	.word	0x08007d93
 8007d64:	08007d93 	.word	0x08007d93
 8007d68:	08007d8b 	.word	0x08007d8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d6c:	f7ff f80e 	bl	8006d8c <HAL_RCC_GetPCLK1Freq>
 8007d70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d72:	e014      	b.n	8007d9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d74:	f7ff f820 	bl	8006db8 <HAL_RCC_GetPCLK2Freq>
 8007d78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d7a:	e010      	b.n	8007d9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d7c:	4b26      	ldr	r3, [pc, #152]	; (8007e18 <UART_SetConfig+0x594>)
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d80:	e00d      	b.n	8007d9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d82:	f7fe ff95 	bl	8006cb0 <HAL_RCC_GetSysClockFreq>
 8007d86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d88:	e009      	b.n	8007d9e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d90:	e005      	b.n	8007d9e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d9c:	bf00      	nop
    }

    if (pclk != 0U)
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d021      	beq.n	8007de8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da8:	4a1a      	ldr	r2, [pc, #104]	; (8007e14 <UART_SetConfig+0x590>)
 8007daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db2:	fbb3 f2f2 	udiv	r2, r3, r2
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	085b      	lsrs	r3, r3, #1
 8007dbc:	441a      	add	r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	2b0f      	cmp	r3, #15
 8007dcc:	d909      	bls.n	8007de2 <UART_SetConfig+0x55e>
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dd4:	d205      	bcs.n	8007de2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	60da      	str	r2, [r3, #12]
 8007de0:	e002      	b.n	8007de8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2200      	movs	r2, #0
 8007e02:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007e04:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3730      	adds	r7, #48	; 0x30
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e12:	bf00      	nop
 8007e14:	0800d18c 	.word	0x0800d18c
 8007e18:	00f42400 	.word	0x00f42400

08007e1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e28:	f003 0308 	and.w	r3, r3, #8
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	f003 0304 	and.w	r3, r3, #4
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	f003 0310 	and.w	r3, r3, #16
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00a      	beq.n	8007ece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	f003 0320 	and.w	r3, r3, #32
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d01a      	beq.n	8007f32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	430a      	orrs	r2, r1
 8007f10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f1a:	d10a      	bne.n	8007f32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	430a      	orrs	r2, r1
 8007f52:	605a      	str	r2, [r3, #4]
  }
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b098      	sub	sp, #96	; 0x60
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f70:	f7f9 feda 	bl	8001d28 <HAL_GetTick>
 8007f74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0308 	and.w	r3, r3, #8
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d12f      	bne.n	8007fe4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f88e 	bl	80080b4 <UART_WaitOnFlagUntilTimeout>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d022      	beq.n	8007fe4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb2:	653b      	str	r3, [r7, #80]	; 0x50
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007fbe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fe0:	2303      	movs	r3, #3
 8007fe2:	e063      	b.n	80080ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f003 0304 	and.w	r3, r3, #4
 8007fee:	2b04      	cmp	r3, #4
 8007ff0:	d149      	bne.n	8008086 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ff2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ff6:	9300      	str	r3, [sp, #0]
 8007ff8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f857 	bl	80080b4 <UART_WaitOnFlagUntilTimeout>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d03c      	beq.n	8008086 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	623b      	str	r3, [r7, #32]
   return(result);
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008020:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800802a:	633b      	str	r3, [r7, #48]	; 0x30
 800802c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	3308      	adds	r3, #8
 8008044:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	e853 3f00 	ldrex	r3, [r3]
 800804c:	60fb      	str	r3, [r7, #12]
   return(result);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f023 0301 	bic.w	r3, r3, #1
 8008054:	64bb      	str	r3, [r7, #72]	; 0x48
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3308      	adds	r3, #8
 800805c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800805e:	61fa      	str	r2, [r7, #28]
 8008060:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008062:	69b9      	ldr	r1, [r7, #24]
 8008064:	69fa      	ldr	r2, [r7, #28]
 8008066:	e841 2300 	strex	r3, r2, [r1]
 800806a:	617b      	str	r3, [r7, #20]
   return(result);
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1e5      	bne.n	800803e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2220      	movs	r2, #32
 8008076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e012      	b.n	80080ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2220      	movs	r2, #32
 800808a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2220      	movs	r2, #32
 8008092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2200      	movs	r2, #0
 800809a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3758      	adds	r7, #88	; 0x58
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	603b      	str	r3, [r7, #0]
 80080c0:	4613      	mov	r3, r2
 80080c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c4:	e04f      	b.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080cc:	d04b      	beq.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080ce:	f7f9 fe2b 	bl	8001d28 <HAL_GetTick>
 80080d2:	4602      	mov	r2, r0
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	1ad3      	subs	r3, r2, r3
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d302      	bcc.n	80080e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080e4:	2303      	movs	r3, #3
 80080e6:	e04e      	b.n	8008186 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d037      	beq.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	2b80      	cmp	r3, #128	; 0x80
 80080fa:	d034      	beq.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb2>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	d031      	beq.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	f003 0308 	and.w	r3, r3, #8
 800810c:	2b08      	cmp	r3, #8
 800810e:	d110      	bne.n	8008132 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2208      	movs	r2, #8
 8008116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 f838 	bl	800818e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2208      	movs	r2, #8
 8008122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e029      	b.n	8008186 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800813c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008140:	d111      	bne.n	8008166 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800814a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 f81e 	bl	800818e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e00f      	b.n	8008186 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4013      	ands	r3, r2
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	429a      	cmp	r2, r3
 8008174:	bf0c      	ite	eq
 8008176:	2301      	moveq	r3, #1
 8008178:	2300      	movne	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	461a      	mov	r2, r3
 800817e:	79fb      	ldrb	r3, [r7, #7]
 8008180:	429a      	cmp	r2, r3
 8008182:	d0a0      	beq.n	80080c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800818e:	b480      	push	{r7}
 8008190:	b095      	sub	sp, #84	; 0x54
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800819e:	e853 3f00 	ldrex	r3, [r3]
 80081a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	461a      	mov	r2, r3
 80081b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081b4:	643b      	str	r3, [r7, #64]	; 0x40
 80081b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80081ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081bc:	e841 2300 	strex	r3, r2, [r1]
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1e6      	bne.n	8008196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	3308      	adds	r3, #8
 80081ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081de:	f023 0301 	bic.w	r3, r3, #1
 80081e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3308      	adds	r3, #8
 80081ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081f4:	e841 2300 	strex	r3, r2, [r1]
 80081f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1e3      	bne.n	80081c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008204:	2b01      	cmp	r3, #1
 8008206:	d118      	bne.n	800823a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	60bb      	str	r3, [r7, #8]
   return(result);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f023 0310 	bic.w	r3, r3, #16
 800821c:	647b      	str	r3, [r7, #68]	; 0x44
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	461a      	mov	r2, r3
 8008224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008226:	61bb      	str	r3, [r7, #24]
 8008228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	6979      	ldr	r1, [r7, #20]
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	613b      	str	r3, [r7, #16]
   return(result);
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e6      	bne.n	8008208 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800824e:	bf00      	nop
 8008250:	3754      	adds	r7, #84	; 0x54
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_UARTEx_DisableFifoMode+0x16>
 800826c:	2302      	movs	r3, #2
 800826e:	e027      	b.n	80082c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2224      	movs	r2, #36	; 0x24
 800827c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800829e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d101      	bne.n	80082e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082e0:	2302      	movs	r3, #2
 80082e2:	e02d      	b.n	8008340 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2224      	movs	r2, #36	; 0x24
 80082f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0201 	bic.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f84f 	bl	80083c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2220      	movs	r2, #32
 8008332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008358:	2b01      	cmp	r3, #1
 800835a:	d101      	bne.n	8008360 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800835c:	2302      	movs	r3, #2
 800835e:	e02d      	b.n	80083bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2224      	movs	r2, #36	; 0x24
 800836c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0201 	bic.w	r2, r2, #1
 8008386:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f811 	bl	80083c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2220      	movs	r2, #32
 80083ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d108      	bne.n	80083e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083e4:	e031      	b.n	800844a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083e6:	2308      	movs	r3, #8
 80083e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083ea:	2308      	movs	r3, #8
 80083ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	0e5b      	lsrs	r3, r3, #25
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	0f5b      	lsrs	r3, r3, #29
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	7b3a      	ldrb	r2, [r7, #12]
 8008412:	4911      	ldr	r1, [pc, #68]	; (8008458 <UARTEx_SetNbDataToProcess+0x94>)
 8008414:	5c8a      	ldrb	r2, [r1, r2]
 8008416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800841a:	7b3a      	ldrb	r2, [r7, #12]
 800841c:	490f      	ldr	r1, [pc, #60]	; (800845c <UARTEx_SetNbDataToProcess+0x98>)
 800841e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008420:	fb93 f3f2 	sdiv	r3, r3, r2
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	7b7a      	ldrb	r2, [r7, #13]
 8008430:	4909      	ldr	r1, [pc, #36]	; (8008458 <UARTEx_SetNbDataToProcess+0x94>)
 8008432:	5c8a      	ldrb	r2, [r1, r2]
 8008434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008438:	7b7a      	ldrb	r2, [r7, #13]
 800843a:	4908      	ldr	r1, [pc, #32]	; (800845c <UARTEx_SetNbDataToProcess+0x98>)
 800843c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800843e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008442:	b29a      	uxth	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	0800d1a4 	.word	0x0800d1a4
 800845c:	0800d1ac 	.word	0x0800d1ac

08008460 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008460:	b480      	push	{r7}
 8008462:	b08b      	sub	sp, #44	; 0x2c
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	fa93 f3a3 	rbit	r3, r3
 800847a:	613b      	str	r3, [r7, #16]
  return result;
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008486:	2320      	movs	r3, #32
 8008488:	e003      	b.n	8008492 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	fab3 f383 	clz	r3, r3
 8008490:	b2db      	uxtb	r3, r3
 8008492:	005b      	lsls	r3, r3, #1
 8008494:	2103      	movs	r1, #3
 8008496:	fa01 f303 	lsl.w	r3, r1, r3
 800849a:	43db      	mvns	r3, r3
 800849c:	401a      	ands	r2, r3
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	fa93 f3a3 	rbit	r3, r3
 80084a8:	61fb      	str	r3, [r7, #28]
  return result;
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80084b4:	2320      	movs	r3, #32
 80084b6:	e003      	b.n	80084c0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	fab3 f383 	clz	r3, r3
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	005b      	lsls	r3, r3, #1
 80084c2:	6879      	ldr	r1, [r7, #4]
 80084c4:	fa01 f303 	lsl.w	r3, r1, r3
 80084c8:	431a      	orrs	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	601a      	str	r2, [r3, #0]
}
 80084ce:	bf00      	nop
 80084d0:	372c      	adds	r7, #44	; 0x2c
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	43db      	mvns	r3, r3
 80084ee:	401a      	ands	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	431a      	orrs	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	605a      	str	r2, [r3, #4]
}
 80084fe:	bf00      	nop
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800850a:	b480      	push	{r7}
 800850c:	b08b      	sub	sp, #44	; 0x2c
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689a      	ldr	r2, [r3, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	fa93 f3a3 	rbit	r3, r3
 8008524:	613b      	str	r3, [r7, #16]
  return result;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008530:	2320      	movs	r3, #32
 8008532:	e003      	b.n	800853c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	fab3 f383 	clz	r3, r3
 800853a:	b2db      	uxtb	r3, r3
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	2103      	movs	r1, #3
 8008540:	fa01 f303 	lsl.w	r3, r1, r3
 8008544:	43db      	mvns	r3, r3
 8008546:	401a      	ands	r2, r3
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	fa93 f3a3 	rbit	r3, r3
 8008552:	61fb      	str	r3, [r7, #28]
  return result;
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800855e:	2320      	movs	r3, #32
 8008560:	e003      	b.n	800856a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008564:	fab3 f383 	clz	r3, r3
 8008568:	b2db      	uxtb	r3, r3
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	6879      	ldr	r1, [r7, #4]
 800856e:	fa01 f303 	lsl.w	r3, r1, r3
 8008572:	431a      	orrs	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008578:	bf00      	nop
 800857a:	372c      	adds	r7, #44	; 0x2c
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008584:	b480      	push	{r7}
 8008586:	b08b      	sub	sp, #44	; 0x2c
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	fa93 f3a3 	rbit	r3, r3
 800859e:	613b      	str	r3, [r7, #16]
  return result;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80085aa:	2320      	movs	r3, #32
 80085ac:	e003      	b.n	80085b6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	fab3 f383 	clz	r3, r3
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	005b      	lsls	r3, r3, #1
 80085b8:	2103      	movs	r1, #3
 80085ba:	fa01 f303 	lsl.w	r3, r1, r3
 80085be:	43db      	mvns	r3, r3
 80085c0:	401a      	ands	r2, r3
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	fa93 f3a3 	rbit	r3, r3
 80085cc:	61fb      	str	r3, [r7, #28]
  return result;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80085d8:	2320      	movs	r3, #32
 80085da:	e003      	b.n	80085e4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	fab3 f383 	clz	r3, r3
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	005b      	lsls	r3, r3, #1
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	fa01 f303 	lsl.w	r3, r1, r3
 80085ec:	431a      	orrs	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	60da      	str	r2, [r3, #12]
}
 80085f2:	bf00      	nop
 80085f4:	372c      	adds	r7, #44	; 0x2c
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80085fe:	b480      	push	{r7}
 8008600:	b08b      	sub	sp, #44	; 0x2c
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a1a      	ldr	r2, [r3, #32]
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	fa93 f3a3 	rbit	r3, r3
 8008618:	613b      	str	r3, [r7, #16]
  return result;
 800861a:	693b      	ldr	r3, [r7, #16]
 800861c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800861e:	69bb      	ldr	r3, [r7, #24]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008624:	2320      	movs	r3, #32
 8008626:	e003      	b.n	8008630 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	fab3 f383 	clz	r3, r3
 800862e:	b2db      	uxtb	r3, r3
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	210f      	movs	r1, #15
 8008634:	fa01 f303 	lsl.w	r3, r1, r3
 8008638:	43db      	mvns	r3, r3
 800863a:	401a      	ands	r2, r3
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	fa93 f3a3 	rbit	r3, r3
 8008646:	61fb      	str	r3, [r7, #28]
  return result;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	2b00      	cmp	r3, #0
 8008650:	d101      	bne.n	8008656 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008652:	2320      	movs	r3, #32
 8008654:	e003      	b.n	800865e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	fab3 f383 	clz	r3, r3
 800865c:	b2db      	uxtb	r3, r3
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	6879      	ldr	r1, [r7, #4]
 8008662:	fa01 f303 	lsl.w	r3, r1, r3
 8008666:	431a      	orrs	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800866c:	bf00      	nop
 800866e:	372c      	adds	r7, #44	; 0x2c
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008678:	b480      	push	{r7}
 800867a:	b08b      	sub	sp, #44	; 0x2c
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	0a1b      	lsrs	r3, r3, #8
 800868c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	fa93 f3a3 	rbit	r3, r3
 8008694:	613b      	str	r3, [r7, #16]
  return result;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d101      	bne.n	80086a4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80086a0:	2320      	movs	r3, #32
 80086a2:	e003      	b.n	80086ac <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80086a4:	69bb      	ldr	r3, [r7, #24]
 80086a6:	fab3 f383 	clz	r3, r3
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	210f      	movs	r1, #15
 80086b0:	fa01 f303 	lsl.w	r3, r1, r3
 80086b4:	43db      	mvns	r3, r3
 80086b6:	401a      	ands	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	0a1b      	lsrs	r3, r3, #8
 80086bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	fa93 f3a3 	rbit	r3, r3
 80086c4:	61fb      	str	r3, [r7, #28]
  return result;
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80086ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80086d0:	2320      	movs	r3, #32
 80086d2:	e003      	b.n	80086dc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	fab3 f383 	clz	r3, r3
 80086da:	b2db      	uxtb	r3, r3
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	6879      	ldr	r1, [r7, #4]
 80086e0:	fa01 f303 	lsl.w	r3, r1, r3
 80086e4:	431a      	orrs	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80086ea:	bf00      	nop
 80086ec:	372c      	adds	r7, #44	; 0x2c
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80086f6:	b580      	push	{r7, lr}
 80086f8:	b088      	sub	sp, #32
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
 80086fe:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	fa93 f3a3 	rbit	r3, r3
 800870c:	60fb      	str	r3, [r7, #12]
  return result;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <LL_GPIO_Init+0x26>
    return 32U;
 8008718:	2320      	movs	r3, #32
 800871a:	e003      	b.n	8008724 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	fab3 f383 	clz	r3, r3
 8008722:	b2db      	uxtb	r3, r3
 8008724:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008726:	e048      	b.n	80087ba <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	2101      	movs	r1, #1
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	fa01 f303 	lsl.w	r3, r1, r3
 8008734:	4013      	ands	r3, r2
 8008736:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d03a      	beq.n	80087b4 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	2b01      	cmp	r3, #1
 8008744:	d003      	beq.n	800874e <LL_GPIO_Init+0x58>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	2b02      	cmp	r3, #2
 800874c:	d10e      	bne.n	800876c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	461a      	mov	r2, r3
 8008754:	69b9      	ldr	r1, [r7, #24]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7ff fed7 	bl	800850a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	461a      	mov	r2, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff feb7 	bl	80084da <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	461a      	mov	r2, r3
 8008772:	69b9      	ldr	r1, [r7, #24]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff ff05 	bl	8008584 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d111      	bne.n	80087a6 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008782:	69bb      	ldr	r3, [r7, #24]
 8008784:	2bff      	cmp	r3, #255	; 0xff
 8008786:	d807      	bhi.n	8008798 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	461a      	mov	r2, r3
 800878e:	69b9      	ldr	r1, [r7, #24]
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f7ff ff34 	bl	80085fe <LL_GPIO_SetAFPin_0_7>
 8008796:	e006      	b.n	80087a6 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	695b      	ldr	r3, [r3, #20]
 800879c:	461a      	mov	r2, r3
 800879e:	69b9      	ldr	r1, [r7, #24]
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f7ff ff69 	bl	8008678 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	461a      	mov	r2, r3
 80087ac:	69b9      	ldr	r1, [r7, #24]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff fe56 	bl	8008460 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	fa22 f303 	lsr.w	r3, r2, r3
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1af      	bne.n	8008728 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3720      	adds	r7, #32
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087e2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80087e6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	b29a      	uxth	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008808:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800880c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008814:	b29a      	uxth	r2, r3
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	b29b      	uxth	r3, r3
 800881a:	43db      	mvns	r3, r3
 800881c:	b29b      	uxth	r3, r3
 800881e:	4013      	ands	r3, r2
 8008820:	b29a      	uxth	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	60f8      	str	r0, [r7, #12]
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2201      	movs	r2, #1
 8008848:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2200      	movs	r2, #0
 8008850:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2200      	movs	r2, #0
 8008860:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
	...

08008874 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008874:	b480      	push	{r7}
 8008876:	b09d      	sub	sp, #116	; 0x74
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	781b      	ldrb	r3, [r3, #0]
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	881b      	ldrh	r3, [r3, #0]
 8008890:	b29b      	uxth	r3, r3
 8008892:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800889a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	78db      	ldrb	r3, [r3, #3]
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d81f      	bhi.n	80088e6 <USB_ActivateEndpoint+0x72>
 80088a6:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <USB_ActivateEndpoint+0x38>)
 80088a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ac:	080088bd 	.word	0x080088bd
 80088b0:	080088d9 	.word	0x080088d9
 80088b4:	080088ef 	.word	0x080088ef
 80088b8:	080088cb 	.word	0x080088cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80088bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80088c8:	e012      	b.n	80088f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80088ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80088d2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80088d6:	e00b      	b.n	80088f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80088d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80088e4:	e004      	b.n	80088f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80088ec:	e000      	b.n	80088f0 <USB_ActivateEndpoint+0x7c>
      break;
 80088ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	009b      	lsls	r3, r3, #2
 80088f8:	441a      	add	r2, r3
 80088fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008902:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800890a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800890e:	b29b      	uxth	r3, r3
 8008910:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	4413      	add	r3, r2
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	b21b      	sxth	r3, r3
 8008922:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	b21a      	sxth	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b21b      	sxth	r3, r3
 8008932:	4313      	orrs	r3, r2
 8008934:	b21b      	sxth	r3, r3
 8008936:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800893a:	687a      	ldr	r2, [r7, #4]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	009b      	lsls	r3, r3, #2
 8008942:	441a      	add	r2, r3
 8008944:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800894c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008958:	b29b      	uxth	r3, r3
 800895a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	7b1b      	ldrb	r3, [r3, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	f040 8178 	bne.w	8008c56 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	785b      	ldrb	r3, [r3, #1]
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 8084 	beq.w	8008a78 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	61bb      	str	r3, [r7, #24]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800897a:	b29b      	uxth	r3, r3
 800897c:	461a      	mov	r2, r3
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	4413      	add	r3, r2
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	00da      	lsls	r2, r3, #3
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	4413      	add	r3, r2
 800898e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	88db      	ldrh	r3, [r3, #6]
 8008998:	085b      	lsrs	r3, r3, #1
 800899a:	b29b      	uxth	r3, r3
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	b29a      	uxth	r2, r3
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	827b      	strh	r3, [r7, #18]
 80089b2:	8a7b      	ldrh	r3, [r7, #18]
 80089b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01b      	beq.n	80089f4 <USB_ActivateEndpoint+0x180>
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089d2:	823b      	strh	r3, [r7, #16]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	441a      	add	r2, r3
 80089de:	8a3b      	ldrh	r3, [r7, #16]
 80089e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	78db      	ldrb	r3, [r3, #3]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d020      	beq.n	8008a3e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	881b      	ldrh	r3, [r3, #0]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a12:	81bb      	strh	r3, [r7, #12]
 8008a14:	89bb      	ldrh	r3, [r7, #12]
 8008a16:	f083 0320 	eor.w	r3, r3, #32
 8008a1a:	81bb      	strh	r3, [r7, #12]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	441a      	add	r2, r3
 8008a26:	89bb      	ldrh	r3, [r7, #12]
 8008a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	8013      	strh	r3, [r2, #0]
 8008a3c:	e2d5      	b.n	8008fea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a54:	81fb      	strh	r3, [r7, #14]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	441a      	add	r2, r3
 8008a60:	89fb      	ldrh	r3, [r7, #14]
 8008a62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	8013      	strh	r3, [r2, #0]
 8008a76:	e2b8      	b.n	8008fea <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a88:	4413      	add	r3, r2
 8008a8a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	00da      	lsls	r2, r3, #3
 8008a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a94:	4413      	add	r3, r2
 8008a96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	88db      	ldrh	r3, [r3, #6]
 8008aa0:	085b      	lsrs	r3, r3, #1
 8008aa2:	b29b      	uxth	r3, r3
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	461a      	mov	r2, r3
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	4413      	add	r3, r2
 8008abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	00da      	lsls	r2, r3, #3
 8008ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac8:	4413      	add	r3, r2
 8008aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008ada:	b29a      	uxth	r2, r3
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	801a      	strh	r2, [r3, #0]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <USB_ActivateEndpoint+0x28a>
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008af2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af6:	b29a      	uxth	r2, r3
 8008af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afa:	801a      	strh	r2, [r3, #0]
 8008afc:	e039      	b.n	8008b72 <USB_ActivateEndpoint+0x2fe>
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b3e      	cmp	r3, #62	; 0x3e
 8008b04:	d818      	bhi.n	8008b38 <USB_ActivateEndpoint+0x2c4>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	085b      	lsrs	r3, r3, #1
 8008b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f003 0301 	and.w	r3, r3, #1
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d002      	beq.n	8008b20 <USB_ActivateEndpoint+0x2ac>
 8008b1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	881b      	ldrh	r3, [r3, #0]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	029b      	lsls	r3, r3, #10
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	801a      	strh	r2, [r3, #0]
 8008b36:	e01c      	b.n	8008b72 <USB_ActivateEndpoint+0x2fe>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	095b      	lsrs	r3, r3, #5
 8008b3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	f003 031f 	and.w	r3, r3, #31
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d102      	bne.n	8008b52 <USB_ActivateEndpoint+0x2de>
 8008b4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	029b      	lsls	r3, r3, #10
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	4313      	orrs	r3, r2
 8008b62:	b29b      	uxth	r3, r3
 8008b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6c:	b29a      	uxth	r2, r3
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008b80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01b      	beq.n	8008bc2 <USB_ActivateEndpoint+0x34e>
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba0:	843b      	strh	r3, [r7, #32]
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	441a      	add	r2, r3
 8008bac:	8c3b      	ldrh	r3, [r7, #32]
 8008bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d124      	bne.n	8008c14 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	b29b      	uxth	r3, r3
 8008bd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be0:	83bb      	strh	r3, [r7, #28]
 8008be2:	8bbb      	ldrh	r3, [r7, #28]
 8008be4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008be8:	83bb      	strh	r3, [r7, #28]
 8008bea:	8bbb      	ldrh	r3, [r7, #28]
 8008bec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bf0:	83bb      	strh	r3, [r7, #28]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	441a      	add	r2, r3
 8008bfc:	8bbb      	ldrh	r3, [r7, #28]
 8008bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8013      	strh	r3, [r2, #0]
 8008c12:	e1ea      	b.n	8008fea <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c2a:	83fb      	strh	r3, [r7, #30]
 8008c2c:	8bfb      	ldrh	r3, [r7, #30]
 8008c2e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c32:	83fb      	strh	r3, [r7, #30]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	441a      	add	r2, r3
 8008c3e:	8bfb      	ldrh	r3, [r7, #30]
 8008c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	8013      	strh	r3, [r2, #0]
 8008c54:	e1c9      	b.n	8008fea <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	78db      	ldrb	r3, [r3, #3]
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d11e      	bne.n	8008c9c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	881b      	ldrh	r3, [r3, #0]
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c74:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	781b      	ldrb	r3, [r3, #0]
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	441a      	add	r2, r3
 8008c82:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c8e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	8013      	strh	r3, [r2, #0]
 8008c9a:	e01d      	b.n	8008cd8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	881b      	ldrh	r3, [r3, #0]
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	441a      	add	r2, r3
 8008cc0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd4:	b29b      	uxth	r3, r3
 8008cd6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ce8:	4413      	add	r3, r2
 8008cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	00da      	lsls	r2, r3, #3
 8008cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008cfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	891b      	ldrh	r3, [r3, #8]
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	005b      	lsls	r3, r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d0a:	801a      	strh	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d1c:	4413      	add	r3, r2
 8008d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	00da      	lsls	r2, r3, #3
 8008d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d28:	4413      	add	r3, r2
 8008d2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d2e:	653b      	str	r3, [r7, #80]	; 0x50
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	895b      	ldrh	r3, [r3, #10]
 8008d34:	085b      	lsrs	r3, r3, #1
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	005b      	lsls	r3, r3, #1
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d3e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	785b      	ldrb	r3, [r3, #1]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 8093 	bne.w	8008e70 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781b      	ldrb	r3, [r3, #0]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008d5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d01b      	beq.n	8008d9e <USB_ActivateEndpoint+0x52a>
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	441a      	add	r2, r3
 8008d88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	781b      	ldrb	r3, [r3, #0]
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4413      	add	r3, r2
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008dac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d01b      	beq.n	8008dee <USB_ActivateEndpoint+0x57a>
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dcc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	441a      	add	r2, r3
 8008dd8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e04:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e0c:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008e14:	873b      	strh	r3, [r7, #56]	; 0x38
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	441a      	add	r2, r3
 8008e20:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4413      	add	r3, r2
 8008e40:	881b      	ldrh	r3, [r3, #0]
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e4c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	441a      	add	r2, r3
 8008e58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008e5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e6a:	b29b      	uxth	r3, r3
 8008e6c:	8013      	strh	r3, [r2, #0]
 8008e6e:	e0bc      	b.n	8008fea <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008e80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008e84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01d      	beq.n	8008ec8 <USB_ActivateEndpoint+0x654>
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ea2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	441a      	add	r2, r3
 8008eb0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	881b      	ldrh	r3, [r3, #0]
 8008ed4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ed8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d01d      	beq.n	8008f20 <USB_ActivateEndpoint+0x6ac>
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	881b      	ldrh	r3, [r3, #0]
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	441a      	add	r2, r3
 8008f08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008f0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f18:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	78db      	ldrb	r3, [r3, #3]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d024      	beq.n	8008f72 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	881b      	ldrh	r3, [r3, #0]
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f3e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008f42:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008f46:	f083 0320 	eor.w	r3, r3, #32
 8008f4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	441a      	add	r2, r3
 8008f58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	8013      	strh	r3, [r2, #0]
 8008f70:	e01d      	b.n	8008fae <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	441a      	add	r2, r3
 8008f96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008f9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fa2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	881b      	ldrh	r3, [r3, #0]
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	441a      	add	r2, r3
 8008fd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008fea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3774      	adds	r7, #116	; 0x74
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop

08008ffc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b08d      	sub	sp, #52	; 0x34
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	7b1b      	ldrb	r3, [r3, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	f040 808e 	bne.w	800912c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	785b      	ldrb	r3, [r3, #1]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d044      	beq.n	80090a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	009b      	lsls	r3, r3, #2
 8009020:	4413      	add	r3, r2
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	81bb      	strh	r3, [r7, #12]
 8009026:	89bb      	ldrh	r3, [r7, #12]
 8009028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800902c:	2b00      	cmp	r3, #0
 800902e:	d01b      	beq.n	8009068 <USB_DeactivateEndpoint+0x6c>
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	4413      	add	r3, r2
 800903a:	881b      	ldrh	r3, [r3, #0]
 800903c:	b29b      	uxth	r3, r3
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009046:	817b      	strh	r3, [r7, #10]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	441a      	add	r2, r3
 8009052:	897b      	ldrh	r3, [r7, #10]
 8009054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800905c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009064:	b29b      	uxth	r3, r3
 8009066:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800907e:	813b      	strh	r3, [r7, #8]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	009b      	lsls	r3, r3, #2
 8009088:	441a      	add	r2, r3
 800908a:	893b      	ldrh	r3, [r7, #8]
 800908c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800909c:	b29b      	uxth	r3, r3
 800909e:	8013      	strh	r3, [r2, #0]
 80090a0:	e192      	b.n	80093c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	881b      	ldrh	r3, [r3, #0]
 80090ae:	827b      	strh	r3, [r7, #18]
 80090b0:	8a7b      	ldrh	r3, [r7, #18]
 80090b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d01b      	beq.n	80090f2 <USB_DeactivateEndpoint+0xf6>
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4413      	add	r3, r2
 80090c4:	881b      	ldrh	r3, [r3, #0]
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090d0:	823b      	strh	r3, [r7, #16]
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	441a      	add	r2, r3
 80090dc:	8a3b      	ldrh	r3, [r7, #16]
 80090de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009108:	81fb      	strh	r3, [r7, #14]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	441a      	add	r2, r3
 8009114:	89fb      	ldrh	r3, [r7, #14]
 8009116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800911a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800911e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009126:	b29b      	uxth	r3, r3
 8009128:	8013      	strh	r3, [r2, #0]
 800912a:	e14d      	b.n	80093c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	2b00      	cmp	r3, #0
 8009132:	f040 80a5 	bne.w	8009280 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	881b      	ldrh	r3, [r3, #0]
 8009142:	843b      	strh	r3, [r7, #32]
 8009144:	8c3b      	ldrh	r3, [r7, #32]
 8009146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d01b      	beq.n	8009186 <USB_DeactivateEndpoint+0x18a>
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	b29b      	uxth	r3, r3
 800915c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009164:	83fb      	strh	r3, [r7, #30]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	441a      	add	r2, r3
 8009170:	8bfb      	ldrh	r3, [r7, #30]
 8009172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800917a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800917e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009182:	b29b      	uxth	r3, r3
 8009184:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	4413      	add	r3, r2
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	83bb      	strh	r3, [r7, #28]
 8009194:	8bbb      	ldrh	r3, [r7, #28]
 8009196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	d01b      	beq.n	80091d6 <USB_DeactivateEndpoint+0x1da>
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b4:	837b      	strh	r3, [r7, #26]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	8b7b      	ldrh	r3, [r7, #26]
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ec:	833b      	strh	r3, [r7, #24]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	8b3b      	ldrh	r3, [r7, #24]
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	4413      	add	r3, r2
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	b29b      	uxth	r3, r3
 800921c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009224:	82fb      	strh	r3, [r7, #22]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	441a      	add	r2, r3
 8009230:	8afb      	ldrh	r3, [r7, #22]
 8009232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800923a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800923e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009242:	b29b      	uxth	r3, r3
 8009244:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	881b      	ldrh	r3, [r3, #0]
 8009252:	b29b      	uxth	r3, r3
 8009254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800925c:	82bb      	strh	r3, [r7, #20]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	441a      	add	r2, r3
 8009268:	8abb      	ldrh	r3, [r7, #20]
 800926a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800926e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800927a:	b29b      	uxth	r3, r3
 800927c:	8013      	strh	r3, [r2, #0]
 800927e:	e0a3      	b.n	80093c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	4413      	add	r3, r2
 800928a:	881b      	ldrh	r3, [r3, #0]
 800928c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800928e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009294:	2b00      	cmp	r3, #0
 8009296:	d01b      	beq.n	80092d0 <USB_DeactivateEndpoint+0x2d4>
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	441a      	add	r2, r3
 80092ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80092bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80092de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80092e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01b      	beq.n	8009320 <USB_DeactivateEndpoint+0x324>
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	441a      	add	r2, r3
 800930a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800930c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800931c:	b29b      	uxth	r3, r3
 800931e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009336:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009354:	b29b      	uxth	r3, r3
 8009356:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	b29b      	uxth	r3, r3
 8009366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800936a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800936e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	441a      	add	r2, r3
 800937a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800937c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938c:	b29b      	uxth	r3, r3
 800938e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	441a      	add	r2, r3
 80093b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3734      	adds	r7, #52	; 0x34
 80093ce:	46bd      	mov	sp, r7
 80093d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d4:	4770      	bx	lr

080093d6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b0c2      	sub	sp, #264	; 0x108
 80093da:	af00      	add	r7, sp, #0
 80093dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e4:	6018      	str	r0, [r3, #0]
 80093e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ee:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	f040 86b7 	bne.w	800a170 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009406:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	699a      	ldr	r2, [r3, #24]
 800940e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	429a      	cmp	r2, r3
 800941c:	d908      	bls.n	8009430 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800941e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800942e:	e007      	b.n	8009440 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	7b1b      	ldrb	r3, [r3, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d13a      	bne.n	80094c6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6959      	ldr	r1, [r3, #20]
 800945c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009460:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	88da      	ldrh	r2, [r3, #6]
 8009468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800946c:	b29b      	uxth	r3, r3
 800946e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009472:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009476:	6800      	ldr	r0, [r0, #0]
 8009478:	f001 fc99 	bl	800adae <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800947c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009496:	b29b      	uxth	r3, r3
 8009498:	461a      	mov	r2, r3
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	4413      	add	r3, r2
 800949e:	613b      	str	r3, [r7, #16]
 80094a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	00da      	lsls	r2, r3, #3
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	4413      	add	r3, r2
 80094b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094bc:	b29a      	uxth	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	801a      	strh	r2, [r3, #0]
 80094c2:	f000 be1f 	b.w	800a104 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	78db      	ldrb	r3, [r3, #3]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	f040 8462 	bne.w	8009d9c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80094d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6a1a      	ldr	r2, [r3, #32]
 80094e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	f240 83df 	bls.w	8009cb4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4413      	add	r3, r2
 8009510:	881b      	ldrh	r3, [r3, #0]
 8009512:	b29b      	uxth	r3, r3
 8009514:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800951c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800952e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	441a      	add	r2, r3
 800953a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800953e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009546:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800954a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954e:	b29b      	uxth	r3, r3
 8009550:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6a1a      	ldr	r2, [r3, #32]
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	1ad2      	subs	r2, r2, r3
 8009564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009574:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29b      	uxth	r3, r3
 800958e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 81c7 	beq.w	8009926 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	633b      	str	r3, [r7, #48]	; 0x30
 80095a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	785b      	ldrb	r3, [r3, #1]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d177      	bne.n	80096a4 <USB_EPStartXfer+0x2ce>
 80095b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28
 80095c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	461a      	mov	r2, r3
 80095d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d4:	4413      	add	r3, r2
 80095d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80095d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	00da      	lsls	r2, r3, #3
 80095e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e8:	4413      	add	r3, r2
 80095ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	801a      	strh	r2, [r3, #0]
 8009600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <USB_EPStartXfer+0x248>
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	881b      	ldrh	r3, [r3, #0]
 800960c:	b29b      	uxth	r3, r3
 800960e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009616:	b29a      	uxth	r2, r3
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	801a      	strh	r2, [r3, #0]
 800961c:	e067      	b.n	80096ee <USB_EPStartXfer+0x318>
 800961e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009622:	2b3e      	cmp	r3, #62	; 0x3e
 8009624:	d81c      	bhi.n	8009660 <USB_EPStartXfer+0x28a>
 8009626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800962a:	085b      	lsrs	r3, r3, #1
 800962c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009634:	f003 0301 	and.w	r3, r3, #1
 8009638:	2b00      	cmp	r3, #0
 800963a:	d004      	beq.n	8009646 <USB_EPStartXfer+0x270>
 800963c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009640:	3301      	adds	r3, #1
 8009642:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009648:	881b      	ldrh	r3, [r3, #0]
 800964a:	b29a      	uxth	r2, r3
 800964c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009650:	b29b      	uxth	r3, r3
 8009652:	029b      	lsls	r3, r3, #10
 8009654:	b29b      	uxth	r3, r3
 8009656:	4313      	orrs	r3, r2
 8009658:	b29a      	uxth	r2, r3
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	801a      	strh	r2, [r3, #0]
 800965e:	e046      	b.n	80096ee <USB_EPStartXfer+0x318>
 8009660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009664:	095b      	lsrs	r3, r3, #5
 8009666:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800966a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	2b00      	cmp	r3, #0
 8009674:	d104      	bne.n	8009680 <USB_EPStartXfer+0x2aa>
 8009676:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800967a:	3b01      	subs	r3, #1
 800967c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009682:	881b      	ldrh	r3, [r3, #0]
 8009684:	b29a      	uxth	r2, r3
 8009686:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800968a:	b29b      	uxth	r3, r3
 800968c:	029b      	lsls	r3, r3, #10
 800968e:	b29b      	uxth	r3, r3
 8009690:	4313      	orrs	r3, r2
 8009692:	b29b      	uxth	r3, r3
 8009694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800969c:	b29a      	uxth	r2, r3
 800969e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	e024      	b.n	80096ee <USB_EPStartXfer+0x318>
 80096a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d11c      	bne.n	80096ee <USB_EPStartXfer+0x318>
 80096b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096c2:	b29b      	uxth	r3, r3
 80096c4:	461a      	mov	r2, r3
 80096c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c8:	4413      	add	r3, r2
 80096ca:	633b      	str	r3, [r7, #48]	; 0x30
 80096cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	00da      	lsls	r2, r3, #3
 80096da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096dc:	4413      	add	r3, r2
 80096de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80096e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	895b      	ldrh	r3, [r3, #10]
 80096fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6959      	ldr	r1, [r3, #20]
 800970a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970e:	b29b      	uxth	r3, r3
 8009710:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009714:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009718:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800971c:	6800      	ldr	r0, [r0, #0]
 800971e:	f001 fb46 	bl	800adae <USB_WritePMA>
            ep->xfer_buff += len;
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695a      	ldr	r2, [r3, #20]
 800972e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009732:	441a      	add	r2, r3
 8009734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6a1a      	ldr	r2, [r3, #32]
 800974c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	429a      	cmp	r2, r3
 800975a:	d90f      	bls.n	800977c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800975c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6a1a      	ldr	r2, [r3, #32]
 8009768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976c:	1ad2      	subs	r2, r2, r3
 800976e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	621a      	str	r2, [r3, #32]
 800977a:	e00e      	b.n	800979a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800977c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	6a1b      	ldr	r3, [r3, #32]
 8009788:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800978c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2200      	movs	r2, #0
 8009798:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800979a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d177      	bne.n	800989a <USB_EPStartXfer+0x4c4>
 80097aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	61bb      	str	r3, [r7, #24]
 80097b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	461a      	mov	r2, r3
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	4413      	add	r3, r2
 80097cc:	61bb      	str	r3, [r7, #24]
 80097ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	00da      	lsls	r2, r3, #3
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	4413      	add	r3, r2
 80097e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	881b      	ldrh	r3, [r3, #0]
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	801a      	strh	r2, [r3, #0]
 80097f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d10a      	bne.n	8009814 <USB_EPStartXfer+0x43e>
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	b29b      	uxth	r3, r3
 8009804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800980c:	b29a      	uxth	r2, r3
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	801a      	strh	r2, [r3, #0]
 8009812:	e06d      	b.n	80098f0 <USB_EPStartXfer+0x51a>
 8009814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009818:	2b3e      	cmp	r3, #62	; 0x3e
 800981a:	d81c      	bhi.n	8009856 <USB_EPStartXfer+0x480>
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009820:	085b      	lsrs	r3, r3, #1
 8009822:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <USB_EPStartXfer+0x466>
 8009832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009836:	3301      	adds	r3, #1
 8009838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	881b      	ldrh	r3, [r3, #0]
 8009840:	b29a      	uxth	r2, r3
 8009842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009846:	b29b      	uxth	r3, r3
 8009848:	029b      	lsls	r3, r3, #10
 800984a:	b29b      	uxth	r3, r3
 800984c:	4313      	orrs	r3, r2
 800984e:	b29a      	uxth	r2, r3
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	801a      	strh	r2, [r3, #0]
 8009854:	e04c      	b.n	80098f0 <USB_EPStartXfer+0x51a>
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985a:	095b      	lsrs	r3, r3, #5
 800985c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009864:	f003 031f 	and.w	r3, r3, #31
 8009868:	2b00      	cmp	r3, #0
 800986a:	d104      	bne.n	8009876 <USB_EPStartXfer+0x4a0>
 800986c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009870:	3b01      	subs	r3, #1
 8009872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	b29a      	uxth	r2, r3
 800987c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009880:	b29b      	uxth	r3, r3
 8009882:	029b      	lsls	r3, r3, #10
 8009884:	b29b      	uxth	r3, r3
 8009886:	4313      	orrs	r3, r2
 8009888:	b29b      	uxth	r3, r3
 800988a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800988e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009892:	b29a      	uxth	r2, r3
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	801a      	strh	r2, [r3, #0]
 8009898:	e02a      	b.n	80098f0 <USB_EPStartXfer+0x51a>
 800989a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	785b      	ldrb	r3, [r3, #1]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d122      	bne.n	80098f0 <USB_EPStartXfer+0x51a>
 80098aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	623b      	str	r3, [r7, #32]
 80098b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	461a      	mov	r2, r3
 80098c8:	6a3b      	ldr	r3, [r7, #32]
 80098ca:	4413      	add	r3, r2
 80098cc:	623b      	str	r3, [r7, #32]
 80098ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	00da      	lsls	r2, r3, #3
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	4413      	add	r3, r2
 80098e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098e4:	61fb      	str	r3, [r7, #28]
 80098e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	891b      	ldrh	r3, [r3, #8]
 80098fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	6959      	ldr	r1, [r3, #20]
 800990c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009910:	b29b      	uxth	r3, r3
 8009912:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009916:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800991a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800991e:	6800      	ldr	r0, [r0, #0]
 8009920:	f001 fa45 	bl	800adae <USB_WritePMA>
 8009924:	e3ee      	b.n	800a104 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d177      	bne.n	8009a26 <USB_EPStartXfer+0x650>
 8009936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	64bb      	str	r3, [r7, #72]	; 0x48
 8009942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009946:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009950:	b29b      	uxth	r3, r3
 8009952:	461a      	mov	r2, r3
 8009954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009956:	4413      	add	r3, r2
 8009958:	64bb      	str	r3, [r7, #72]	; 0x48
 800995a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800995e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	00da      	lsls	r2, r3, #3
 8009968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996a:	4413      	add	r3, r2
 800996c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009970:	647b      	str	r3, [r7, #68]	; 0x44
 8009972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009974:	881b      	ldrh	r3, [r3, #0]
 8009976:	b29b      	uxth	r3, r3
 8009978:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800997c:	b29a      	uxth	r2, r3
 800997e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009980:	801a      	strh	r2, [r3, #0]
 8009982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10a      	bne.n	80099a0 <USB_EPStartXfer+0x5ca>
 800998a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800998c:	881b      	ldrh	r3, [r3, #0]
 800998e:	b29b      	uxth	r3, r3
 8009990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009998:	b29a      	uxth	r2, r3
 800999a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800999c:	801a      	strh	r2, [r3, #0]
 800999e:	e06d      	b.n	8009a7c <USB_EPStartXfer+0x6a6>
 80099a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a4:	2b3e      	cmp	r3, #62	; 0x3e
 80099a6:	d81c      	bhi.n	80099e2 <USB_EPStartXfer+0x60c>
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ac:	085b      	lsrs	r3, r3, #1
 80099ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b6:	f003 0301 	and.w	r3, r3, #1
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <USB_EPStartXfer+0x5f2>
 80099be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099c2:	3301      	adds	r3, #1
 80099c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ca:	881b      	ldrh	r3, [r3, #0]
 80099cc:	b29a      	uxth	r2, r3
 80099ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	029b      	lsls	r3, r3, #10
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	4313      	orrs	r3, r2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099de:	801a      	strh	r2, [r3, #0]
 80099e0:	e04c      	b.n	8009a7c <USB_EPStartXfer+0x6a6>
 80099e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e6:	095b      	lsrs	r3, r3, #5
 80099e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f0:	f003 031f 	and.w	r3, r3, #31
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d104      	bne.n	8009a02 <USB_EPStartXfer+0x62c>
 80099f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099fc:	3b01      	subs	r3, #1
 80099fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a04:	881b      	ldrh	r3, [r3, #0]
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	029b      	lsls	r3, r3, #10
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	4313      	orrs	r3, r2
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a22:	801a      	strh	r2, [r3, #0]
 8009a24:	e02a      	b.n	8009a7c <USB_EPStartXfer+0x6a6>
 8009a26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	785b      	ldrb	r3, [r3, #1]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d122      	bne.n	8009a7c <USB_EPStartXfer+0x6a6>
 8009a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	653b      	str	r3, [r7, #80]	; 0x50
 8009a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a56:	4413      	add	r3, r2
 8009a58:	653b      	str	r3, [r7, #80]	; 0x50
 8009a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	00da      	lsls	r2, r3, #3
 8009a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a6a:	4413      	add	r3, r2
 8009a6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	891b      	ldrh	r3, [r3, #8]
 8009a88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6959      	ldr	r1, [r3, #20]
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009aa2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009aa6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009aaa:	6800      	ldr	r0, [r0, #0]
 8009aac:	f001 f97f 	bl	800adae <USB_WritePMA>
            ep->xfer_buff += len;
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695a      	ldr	r2, [r3, #20]
 8009abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac0:	441a      	add	r2, r3
 8009ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6a1a      	ldr	r2, [r3, #32]
 8009ada:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ade:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d90f      	bls.n	8009b0a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009aea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	6a1a      	ldr	r2, [r3, #32]
 8009af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	621a      	str	r2, [r3, #32]
 8009b08:	e00e      	b.n	8009b28 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	6a1b      	ldr	r3, [r3, #32]
 8009b16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2200      	movs	r2, #0
 8009b26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	643b      	str	r3, [r7, #64]	; 0x40
 8009b34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	785b      	ldrb	r3, [r3, #1]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d177      	bne.n	8009c34 <USB_EPStartXfer+0x85e>
 8009b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	461a      	mov	r2, r3
 8009b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b64:	4413      	add	r3, r2
 8009b66:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	00da      	lsls	r2, r3, #3
 8009b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b78:	4413      	add	r3, r2
 8009b7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b82:	881b      	ldrh	r3, [r3, #0]
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8e:	801a      	strh	r2, [r3, #0]
 8009b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d10a      	bne.n	8009bae <USB_EPStartXfer+0x7d8>
 8009b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ba2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009baa:	801a      	strh	r2, [r3, #0]
 8009bac:	e067      	b.n	8009c7e <USB_EPStartXfer+0x8a8>
 8009bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb2:	2b3e      	cmp	r3, #62	; 0x3e
 8009bb4:	d81c      	bhi.n	8009bf0 <USB_EPStartXfer+0x81a>
 8009bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bba:	085b      	lsrs	r3, r3, #1
 8009bbc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc4:	f003 0301 	and.w	r3, r3, #1
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d004      	beq.n	8009bd6 <USB_EPStartXfer+0x800>
 8009bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bd8:	881b      	ldrh	r3, [r3, #0]
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	029b      	lsls	r3, r3, #10
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4313      	orrs	r3, r2
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bec:	801a      	strh	r2, [r3, #0]
 8009bee:	e046      	b.n	8009c7e <USB_EPStartXfer+0x8a8>
 8009bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bf4:	095b      	lsrs	r3, r3, #5
 8009bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bfe:	f003 031f 	and.w	r3, r3, #31
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d104      	bne.n	8009c10 <USB_EPStartXfer+0x83a>
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c0a:	3b01      	subs	r3, #1
 8009c0c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	029b      	lsls	r3, r3, #10
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c30:	801a      	strh	r2, [r3, #0]
 8009c32:	e024      	b.n	8009c7e <USB_EPStartXfer+0x8a8>
 8009c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	785b      	ldrb	r3, [r3, #1]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d11c      	bne.n	8009c7e <USB_EPStartXfer+0x8a8>
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c58:	4413      	add	r3, r2
 8009c5a:	643b      	str	r3, [r7, #64]	; 0x40
 8009c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	00da      	lsls	r2, r3, #3
 8009c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c78:	b29a      	uxth	r2, r3
 8009c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	895b      	ldrh	r3, [r3, #10]
 8009c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6959      	ldr	r1, [r3, #20]
 8009c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009cac:	6800      	ldr	r0, [r0, #0]
 8009cae:	f001 f87e 	bl	800adae <USB_WritePMA>
 8009cb2:	e227      	b.n	800a104 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4413      	add	r3, r2
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cea:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	009b      	lsls	r3, r3, #2
 8009d06:	441a      	add	r2, r3
 8009d08:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d40:	4413      	add	r3, r2
 8009d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	00da      	lsls	r2, r3, #3
 8009d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d54:	4413      	add	r3, r2
 8009d56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	891b      	ldrh	r3, [r3, #8]
 8009d72:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6959      	ldr	r1, [r3, #20]
 8009d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d94:	6800      	ldr	r0, [r0, #0]
 8009d96:	f001 f80a 	bl	800adae <USB_WritePMA>
 8009d9a:	e1b3      	b.n	800a104 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6a1a      	ldr	r2, [r3, #32]
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dac:	1ad2      	subs	r2, r2, r3
 8009dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009dba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4413      	add	r3, r2
 8009dd4:	881b      	ldrh	r3, [r3, #0]
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 80c6 	beq.w	8009f6e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	673b      	str	r3, [r7, #112]	; 0x70
 8009dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	785b      	ldrb	r3, [r3, #1]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d177      	bne.n	8009eee <USB_EPStartXfer+0xb18>
 8009dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e1e:	4413      	add	r3, r2
 8009e20:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	00da      	lsls	r2, r3, #3
 8009e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e32:	4413      	add	r3, r2
 8009e34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e38:	667b      	str	r3, [r7, #100]	; 0x64
 8009e3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e48:	801a      	strh	r2, [r3, #0]
 8009e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d10a      	bne.n	8009e68 <USB_EPStartXfer+0xa92>
 8009e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e64:	801a      	strh	r2, [r3, #0]
 8009e66:	e067      	b.n	8009f38 <USB_EPStartXfer+0xb62>
 8009e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6c:	2b3e      	cmp	r3, #62	; 0x3e
 8009e6e:	d81c      	bhi.n	8009eaa <USB_EPStartXfer+0xad4>
 8009e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e74:	085b      	lsrs	r3, r3, #1
 8009e76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7e:	f003 0301 	and.w	r3, r3, #1
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d004      	beq.n	8009e90 <USB_EPStartXfer+0xaba>
 8009e86:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	029b      	lsls	r3, r3, #10
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ea6:	801a      	strh	r2, [r3, #0]
 8009ea8:	e046      	b.n	8009f38 <USB_EPStartXfer+0xb62>
 8009eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eae:	095b      	lsrs	r3, r3, #5
 8009eb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb8:	f003 031f 	and.w	r3, r3, #31
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d104      	bne.n	8009eca <USB_EPStartXfer+0xaf4>
 8009ec0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009eca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ecc:	881b      	ldrh	r3, [r3, #0]
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	029b      	lsls	r3, r3, #10
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	4313      	orrs	r3, r2
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ee6:	b29a      	uxth	r2, r3
 8009ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eea:	801a      	strh	r2, [r3, #0]
 8009eec:	e024      	b.n	8009f38 <USB_EPStartXfer+0xb62>
 8009eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d11c      	bne.n	8009f38 <USB_EPStartXfer+0xb62>
 8009efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	461a      	mov	r2, r3
 8009f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f12:	4413      	add	r3, r2
 8009f14:	673b      	str	r3, [r7, #112]	; 0x70
 8009f16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	00da      	lsls	r2, r3, #3
 8009f24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f26:	4413      	add	r3, r2
 8009f28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f36:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	895b      	ldrh	r3, [r3, #10]
 8009f44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	6959      	ldr	r1, [r3, #20]
 8009f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f5e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f62:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f66:	6800      	ldr	r0, [r0, #0]
 8009f68:	f000 ff21 	bl	800adae <USB_WritePMA>
 8009f6c:	e0ca      	b.n	800a104 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	785b      	ldrb	r3, [r3, #1]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d177      	bne.n	800a06e <USB_EPStartXfer+0xc98>
 8009f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f9e:	4413      	add	r3, r2
 8009fa0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009fa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	00da      	lsls	r2, r3, #3
 8009fb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fb8:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d10a      	bne.n	8009fe8 <USB_EPStartXfer+0xc12>
 8009fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fe4:	801a      	strh	r2, [r3, #0]
 8009fe6:	e073      	b.n	800a0d0 <USB_EPStartXfer+0xcfa>
 8009fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fec:	2b3e      	cmp	r3, #62	; 0x3e
 8009fee:	d81c      	bhi.n	800a02a <USB_EPStartXfer+0xc54>
 8009ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff4:	085b      	lsrs	r3, r3, #1
 8009ff6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ffe:	f003 0301 	and.w	r3, r3, #1
 800a002:	2b00      	cmp	r3, #0
 800a004:	d004      	beq.n	800a010 <USB_EPStartXfer+0xc3a>
 800a006:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a00a:	3301      	adds	r3, #1
 800a00c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a010:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b29a      	uxth	r2, r3
 800a016:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	029b      	lsls	r3, r3, #10
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4313      	orrs	r3, r2
 800a022:	b29a      	uxth	r2, r3
 800a024:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a026:	801a      	strh	r2, [r3, #0]
 800a028:	e052      	b.n	800a0d0 <USB_EPStartXfer+0xcfa>
 800a02a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02e:	095b      	lsrs	r3, r3, #5
 800a030:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a038:	f003 031f 	and.w	r3, r3, #31
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d104      	bne.n	800a04a <USB_EPStartXfer+0xc74>
 800a040:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a044:	3b01      	subs	r3, #1
 800a046:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a04a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a04c:	881b      	ldrh	r3, [r3, #0]
 800a04e:	b29a      	uxth	r2, r3
 800a050:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a054:	b29b      	uxth	r3, r3
 800a056:	029b      	lsls	r3, r3, #10
 800a058:	b29b      	uxth	r3, r3
 800a05a:	4313      	orrs	r3, r2
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a062:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a066:	b29a      	uxth	r2, r3
 800a068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a06a:	801a      	strh	r2, [r3, #0]
 800a06c:	e030      	b.n	800a0d0 <USB_EPStartXfer+0xcfa>
 800a06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	785b      	ldrb	r3, [r3, #1]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d128      	bne.n	800a0d0 <USB_EPStartXfer+0xcfa>
 800a07e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a090:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	461a      	mov	r2, r3
 800a09e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0a2:	4413      	add	r3, r2
 800a0a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a0a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	00da      	lsls	r2, r3, #3
 800a0b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0ba:	4413      	add	r3, r2
 800a0bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a0c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a0ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	891b      	ldrh	r3, [r3, #8]
 800a0dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6959      	ldr	r1, [r3, #20]
 800a0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a0f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a0fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a0fe:	6800      	ldr	r0, [r0, #0]
 800a100:	f000 fe55 	bl	800adae <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a112:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	881b      	ldrh	r3, [r3, #0]
 800a120:	b29b      	uxth	r3, r3
 800a122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a126:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a12a:	817b      	strh	r3, [r7, #10]
 800a12c:	897b      	ldrh	r3, [r7, #10]
 800a12e:	f083 0310 	eor.w	r3, r3, #16
 800a132:	817b      	strh	r3, [r7, #10]
 800a134:	897b      	ldrh	r3, [r7, #10]
 800a136:	f083 0320 	eor.w	r3, r3, #32
 800a13a:	817b      	strh	r3, [r7, #10]
 800a13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a140:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a14a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	441a      	add	r2, r3
 800a156:	897b      	ldrh	r3, [r7, #10]
 800a158:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a15c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a168:	b29b      	uxth	r3, r3
 800a16a:	8013      	strh	r3, [r2, #0]
 800a16c:	f000 bcdf 	b.w	800ab2e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	7b1b      	ldrb	r3, [r3, #12]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	f040 80bc 	bne.w	800a2fa <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	699a      	ldr	r2, [r3, #24]
 800a18e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	691b      	ldr	r3, [r3, #16]
 800a19a:	429a      	cmp	r2, r3
 800a19c:	d917      	bls.n	800a1ce <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	691b      	ldr	r3, [r3, #16]
 800a1aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	699a      	ldr	r2, [r3, #24]
 800a1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1be:	1ad2      	subs	r2, r2, r3
 800a1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	619a      	str	r2, [r3, #24]
 800a1cc:	e00e      	b.n	800a1ec <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a1ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	699b      	ldr	r3, [r3, #24]
 800a1da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a208:	b29b      	uxth	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a210:	4413      	add	r3, r2
 800a212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	00da      	lsls	r2, r3, #3
 800a224:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a228:	4413      	add	r3, r2
 800a22a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a22e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a236:	881b      	ldrh	r3, [r3, #0]
 800a238:	b29b      	uxth	r3, r3
 800a23a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a23e:	b29a      	uxth	r2, r3
 800a240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a244:	801a      	strh	r2, [r3, #0]
 800a246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10d      	bne.n	800a26a <USB_EPStartXfer+0xe94>
 800a24e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	b29b      	uxth	r3, r3
 800a256:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a25a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a25e:	b29a      	uxth	r2, r3
 800a260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a264:	801a      	strh	r2, [r3, #0]
 800a266:	f000 bc28 	b.w	800aaba <USB_EPStartXfer+0x16e4>
 800a26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a26e:	2b3e      	cmp	r3, #62	; 0x3e
 800a270:	d81f      	bhi.n	800a2b2 <USB_EPStartXfer+0xedc>
 800a272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a276:	085b      	lsrs	r3, r3, #1
 800a278:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <USB_EPStartXfer+0xebc>
 800a288:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a28c:	3301      	adds	r3, #1
 800a28e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29a      	uxth	r2, r3
 800a29a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	029b      	lsls	r3, r3, #10
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	b29a      	uxth	r2, r3
 800a2a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2ac:	801a      	strh	r2, [r3, #0]
 800a2ae:	f000 bc04 	b.w	800aaba <USB_EPStartXfer+0x16e4>
 800a2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2b6:	095b      	lsrs	r3, r3, #5
 800a2b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c0:	f003 031f 	and.w	r3, r3, #31
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d104      	bne.n	800a2d2 <USB_EPStartXfer+0xefc>
 800a2c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	029b      	lsls	r3, r3, #10
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2f6:	801a      	strh	r2, [r3, #0]
 800a2f8:	e3df      	b.n	800aaba <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	78db      	ldrb	r3, [r3, #3]
 800a306:	2b02      	cmp	r3, #2
 800a308:	f040 8218 	bne.w	800a73c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	785b      	ldrb	r3, [r3, #1]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f040 809d 	bne.w	800a458 <USB_EPStartXfer+0x1082>
 800a31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a322:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a32c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a330:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	461a      	mov	r2, r3
 800a33e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a342:	4413      	add	r3, r2
 800a344:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a34c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	00da      	lsls	r2, r3, #3
 800a356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a35a:	4413      	add	r3, r2
 800a35c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a368:	881b      	ldrh	r3, [r3, #0]
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a370:	b29a      	uxth	r2, r3
 800a372:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a376:	801a      	strh	r2, [r3, #0]
 800a378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10c      	bne.n	800a3a2 <USB_EPStartXfer+0xfcc>
 800a388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a38c:	881b      	ldrh	r3, [r3, #0]
 800a38e:	b29b      	uxth	r3, r3
 800a390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a398:	b29a      	uxth	r2, r3
 800a39a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a39e:	801a      	strh	r2, [r3, #0]
 800a3a0:	e08f      	b.n	800a4c2 <USB_EPStartXfer+0x10ec>
 800a3a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	2b3e      	cmp	r3, #62	; 0x3e
 800a3b0:	d826      	bhi.n	800a400 <USB_EPStartXfer+0x102a>
 800a3b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	085b      	lsrs	r3, r3, #1
 800a3c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <USB_EPStartXfer+0x100c>
 800a3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3dc:	3301      	adds	r3, #1
 800a3de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3e6:	881b      	ldrh	r3, [r3, #0]
 800a3e8:	b29a      	uxth	r2, r3
 800a3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	029b      	lsls	r3, r3, #10
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	b29a      	uxth	r2, r3
 800a3f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3fc:	801a      	strh	r2, [r3, #0]
 800a3fe:	e060      	b.n	800a4c2 <USB_EPStartXfer+0x10ec>
 800a400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	095b      	lsrs	r3, r3, #5
 800a40e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a416:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	691b      	ldr	r3, [r3, #16]
 800a41e:	f003 031f 	and.w	r3, r3, #31
 800a422:	2b00      	cmp	r3, #0
 800a424:	d104      	bne.n	800a430 <USB_EPStartXfer+0x105a>
 800a426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a42a:	3b01      	subs	r3, #1
 800a42c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	b29a      	uxth	r2, r3
 800a438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	029b      	lsls	r3, r3, #10
 800a440:	b29b      	uxth	r3, r3
 800a442:	4313      	orrs	r3, r2
 800a444:	b29b      	uxth	r3, r3
 800a446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a44a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a44e:	b29a      	uxth	r2, r3
 800a450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a454:	801a      	strh	r2, [r3, #0]
 800a456:	e034      	b.n	800a4c2 <USB_EPStartXfer+0x10ec>
 800a458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	785b      	ldrb	r3, [r3, #1]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d12c      	bne.n	800a4c2 <USB_EPStartXfer+0x10ec>
 800a468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a484:	b29b      	uxth	r3, r3
 800a486:	461a      	mov	r2, r3
 800a488:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a48c:	4413      	add	r3, r2
 800a48e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	00da      	lsls	r2, r3, #3
 800a4a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a4c0:	801a      	strh	r2, [r3, #0]
 800a4c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	785b      	ldrb	r3, [r3, #1]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 809d 	bne.w	800a61c <USB_EPStartXfer+0x1246>
 800a4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	461a      	mov	r2, r3
 800a502:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a506:	4413      	add	r3, r2
 800a508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	00da      	lsls	r2, r3, #3
 800a51a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a51e:	4413      	add	r3, r2
 800a520:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a524:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a528:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	b29b      	uxth	r3, r3
 800a530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a534:	b29a      	uxth	r2, r3
 800a536:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a53a:	801a      	strh	r2, [r3, #0]
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d10c      	bne.n	800a566 <USB_EPStartXfer+0x1190>
 800a54c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a550:	881b      	ldrh	r3, [r3, #0]
 800a552:	b29b      	uxth	r3, r3
 800a554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a562:	801a      	strh	r2, [r3, #0]
 800a564:	e088      	b.n	800a678 <USB_EPStartXfer+0x12a2>
 800a566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	2b3e      	cmp	r3, #62	; 0x3e
 800a574:	d826      	bhi.n	800a5c4 <USB_EPStartXfer+0x11ee>
 800a576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a57a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	691b      	ldr	r3, [r3, #16]
 800a582:	085b      	lsrs	r3, r3, #1
 800a584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	f003 0301 	and.w	r3, r3, #1
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d004      	beq.n	800a5a6 <USB_EPStartXfer+0x11d0>
 800a59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5aa:	881b      	ldrh	r3, [r3, #0]
 800a5ac:	b29a      	uxth	r2, r3
 800a5ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	029b      	lsls	r3, r3, #10
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	b29a      	uxth	r2, r3
 800a5bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5c0:	801a      	strh	r2, [r3, #0]
 800a5c2:	e059      	b.n	800a678 <USB_EPStartXfer+0x12a2>
 800a5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	691b      	ldr	r3, [r3, #16]
 800a5d0:	095b      	lsrs	r3, r3, #5
 800a5d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	f003 031f 	and.w	r3, r3, #31
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d104      	bne.n	800a5f4 <USB_EPStartXfer+0x121e>
 800a5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5ee:	3b01      	subs	r3, #1
 800a5f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5f8:	881b      	ldrh	r3, [r3, #0]
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a600:	b29b      	uxth	r3, r3
 800a602:	029b      	lsls	r3, r3, #10
 800a604:	b29b      	uxth	r3, r3
 800a606:	4313      	orrs	r3, r2
 800a608:	b29b      	uxth	r3, r3
 800a60a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a612:	b29a      	uxth	r2, r3
 800a614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a618:	801a      	strh	r2, [r3, #0]
 800a61a:	e02d      	b.n	800a678 <USB_EPStartXfer+0x12a2>
 800a61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	785b      	ldrb	r3, [r3, #1]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d125      	bne.n	800a678 <USB_EPStartXfer+0x12a2>
 800a62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a630:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a642:	4413      	add	r3, r2
 800a644:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	781b      	ldrb	r3, [r3, #0]
 800a654:	00da      	lsls	r2, r3, #3
 800a656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a65a:	4413      	add	r3, r2
 800a65c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a660:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	b29a      	uxth	r2, r3
 800a672:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a676:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	69db      	ldr	r3, [r3, #28]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 8218 	beq.w	800aaba <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a68a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a68e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a698:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	781b      	ldrb	r3, [r3, #0]
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a6ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d005      	beq.n	800a6c2 <USB_EPStartXfer+0x12ec>
 800a6b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d10d      	bne.n	800a6de <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a6c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	f040 81f5 	bne.w	800aaba <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a6d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	f040 81ee 	bne.w	800aaba <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	4413      	add	r3, r2
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a704:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	441a      	add	r2, r3
 800a722:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a726:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a72a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a72e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a732:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a736:	b29b      	uxth	r3, r3
 800a738:	8013      	strh	r3, [r2, #0]
 800a73a:	e1be      	b.n	800aaba <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	78db      	ldrb	r3, [r3, #3]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	f040 81b4 	bne.w	800aab6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	429a      	cmp	r2, r3
 800a768:	d917      	bls.n	800a79a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699a      	ldr	r2, [r3, #24]
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78a:	1ad2      	subs	r2, r2, r3
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	619a      	str	r2, [r3, #24]
 800a798:	e00e      	b.n	800a7b8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	785b      	ldrb	r3, [r3, #1]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f040 8085 	bne.w	800a8d4 <USB_EPStartXfer+0x14fe>
 800a7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a7f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	781b      	ldrb	r3, [r3, #0]
 800a800:	00da      	lsls	r2, r3, #3
 800a802:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a806:	4413      	add	r3, r2
 800a808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a80c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a814:	881b      	ldrh	r3, [r3, #0]
 800a816:	b29b      	uxth	r3, r3
 800a818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a81c:	b29a      	uxth	r2, r3
 800a81e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a822:	801a      	strh	r2, [r3, #0]
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10c      	bne.n	800a846 <USB_EPStartXfer+0x1470>
 800a82c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29b      	uxth	r3, r3
 800a834:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a838:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a842:	801a      	strh	r2, [r3, #0]
 800a844:	e077      	b.n	800a936 <USB_EPStartXfer+0x1560>
 800a846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a84a:	2b3e      	cmp	r3, #62	; 0x3e
 800a84c:	d81e      	bhi.n	800a88c <USB_EPStartXfer+0x14b6>
 800a84e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a852:	085b      	lsrs	r3, r3, #1
 800a854:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a858:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85c:	f003 0301 	and.w	r3, r3, #1
 800a860:	2b00      	cmp	r3, #0
 800a862:	d004      	beq.n	800a86e <USB_EPStartXfer+0x1498>
 800a864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a868:	3301      	adds	r3, #1
 800a86a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a86e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	b29a      	uxth	r2, r3
 800a876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a87a:	b29b      	uxth	r3, r3
 800a87c:	029b      	lsls	r3, r3, #10
 800a87e:	b29b      	uxth	r3, r3
 800a880:	4313      	orrs	r3, r2
 800a882:	b29a      	uxth	r2, r3
 800a884:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a888:	801a      	strh	r2, [r3, #0]
 800a88a:	e054      	b.n	800a936 <USB_EPStartXfer+0x1560>
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a890:	095b      	lsrs	r3, r3, #5
 800a892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a89a:	f003 031f 	and.w	r3, r3, #31
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d104      	bne.n	800a8ac <USB_EPStartXfer+0x14d6>
 800a8a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a8ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	b29a      	uxth	r2, r3
 800a8b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	029b      	lsls	r3, r3, #10
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	b29b      	uxth	r3, r3
 800a8c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e030      	b.n	800a936 <USB_EPStartXfer+0x1560>
 800a8d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	785b      	ldrb	r3, [r3, #1]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d128      	bne.n	800a936 <USB_EPStartXfer+0x1560>
 800a8e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a8f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a900:	b29b      	uxth	r3, r3
 800a902:	461a      	mov	r2, r3
 800a904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a908:	4413      	add	r3, r2
 800a90a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	00da      	lsls	r2, r3, #3
 800a91c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a920:	4413      	add	r3, r2
 800a922:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a926:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92e:	b29a      	uxth	r2, r3
 800a930:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a934:	801a      	strh	r2, [r3, #0]
 800a936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	785b      	ldrb	r3, [r3, #1]
 800a950:	2b00      	cmp	r3, #0
 800a952:	f040 8085 	bne.w	800aa60 <USB_EPStartXfer+0x168a>
 800a956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a972:	b29b      	uxth	r3, r3
 800a974:	461a      	mov	r2, r3
 800a976:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a97a:	4413      	add	r3, r2
 800a97c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	00da      	lsls	r2, r3, #3
 800a98e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a992:	4413      	add	r3, r2
 800a994:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a998:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a99c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9a0:	881b      	ldrh	r3, [r3, #0]
 800a9a2:	b29b      	uxth	r3, r3
 800a9a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9a8:	b29a      	uxth	r2, r3
 800a9aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9ae:	801a      	strh	r2, [r3, #0]
 800a9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d10c      	bne.n	800a9d2 <USB_EPStartXfer+0x15fc>
 800a9b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9bc:	881b      	ldrh	r3, [r3, #0]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9ce:	801a      	strh	r2, [r3, #0]
 800a9d0:	e073      	b.n	800aaba <USB_EPStartXfer+0x16e4>
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d6:	2b3e      	cmp	r3, #62	; 0x3e
 800a9d8:	d81e      	bhi.n	800aa18 <USB_EPStartXfer+0x1642>
 800a9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d004      	beq.n	800a9fa <USB_EPStartXfer+0x1624>
 800a9f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9fe:	881b      	ldrh	r3, [r3, #0]
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	029b      	lsls	r3, r3, #10
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa14:	801a      	strh	r2, [r3, #0]
 800aa16:	e050      	b.n	800aaba <USB_EPStartXfer+0x16e4>
 800aa18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa1c:	095b      	lsrs	r3, r3, #5
 800aa1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa26:	f003 031f 	and.w	r3, r3, #31
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d104      	bne.n	800aa38 <USB_EPStartXfer+0x1662>
 800aa2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa32:	3b01      	subs	r3, #1
 800aa34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	b29a      	uxth	r2, r3
 800aa40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	029b      	lsls	r3, r3, #10
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	e02c      	b.n	800aaba <USB_EPStartXfer+0x16e4>
 800aa60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	785b      	ldrb	r3, [r3, #1]
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d124      	bne.n	800aaba <USB_EPStartXfer+0x16e4>
 800aa70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	461a      	mov	r2, r3
 800aa82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa86:	4413      	add	r3, r2
 800aa88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	00da      	lsls	r2, r3, #3
 800aa9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aaa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaac:	b29a      	uxth	r2, r3
 800aaae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aab2:	801a      	strh	r2, [r3, #0]
 800aab4:	e001      	b.n	800aaba <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e03a      	b.n	800ab30 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aaba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aadc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aae0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aae4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aae8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aaec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aaf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aaf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aaf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aafc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab04:	681a      	ldr	r2, [r3, #0]
 800ab06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	441a      	add	r2, r3
 800ab16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ab1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}

0800ab3a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b085      	sub	sp, #20
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
 800ab42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	785b      	ldrb	r3, [r3, #1]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d020      	beq.n	800ab8e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab62:	81bb      	strh	r3, [r7, #12]
 800ab64:	89bb      	ldrh	r3, [r7, #12]
 800ab66:	f083 0310 	eor.w	r3, r3, #16
 800ab6a:	81bb      	strh	r3, [r7, #12]
 800ab6c:	687a      	ldr	r2, [r7, #4]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	009b      	lsls	r3, r3, #2
 800ab74:	441a      	add	r2, r3
 800ab76:	89bb      	ldrh	r3, [r7, #12]
 800ab78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	8013      	strh	r3, [r2, #0]
 800ab8c:	e01f      	b.n	800abce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab8e:	687a      	ldr	r2, [r7, #4]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aba4:	81fb      	strh	r3, [r7, #14]
 800aba6:	89fb      	ldrh	r3, [r7, #14]
 800aba8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800abac:	81fb      	strh	r3, [r7, #14]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	441a      	add	r2, r3
 800abb8:	89fb      	ldrh	r3, [r7, #14]
 800abba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abca:	b29b      	uxth	r3, r3
 800abcc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800abce:	2300      	movs	r3, #0
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3714      	adds	r7, #20
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800abdc:	b480      	push	{r7}
 800abde:	b087      	sub	sp, #28
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	7b1b      	ldrb	r3, [r3, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	f040 809d 	bne.w	800ad2a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	785b      	ldrb	r3, [r3, #1]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d04c      	beq.n	800ac92 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abf8:	687a      	ldr	r2, [r7, #4]
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	881b      	ldrh	r3, [r3, #0]
 800ac04:	823b      	strh	r3, [r7, #16]
 800ac06:	8a3b      	ldrh	r3, [r7, #16]
 800ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01b      	beq.n	800ac48 <USB_EPClearStall+0x6c>
 800ac10:	687a      	ldr	r2, [r7, #4]
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	4413      	add	r3, r2
 800ac1a:	881b      	ldrh	r3, [r3, #0]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac26:	81fb      	strh	r3, [r7, #14]
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	009b      	lsls	r3, r3, #2
 800ac30:	441a      	add	r2, r3
 800ac32:	89fb      	ldrh	r3, [r7, #14]
 800ac34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	78db      	ldrb	r3, [r3, #3]
 800ac4c:	2b01      	cmp	r3, #1
 800ac4e:	d06c      	beq.n	800ad2a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac66:	81bb      	strh	r3, [r7, #12]
 800ac68:	89bb      	ldrh	r3, [r7, #12]
 800ac6a:	f083 0320 	eor.w	r3, r3, #32
 800ac6e:	81bb      	strh	r3, [r7, #12]
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	441a      	add	r2, r3
 800ac7a:	89bb      	ldrh	r3, [r7, #12]
 800ac7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	8013      	strh	r3, [r2, #0]
 800ac90:	e04b      	b.n	800ad2a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4413      	add	r3, r2
 800ac9c:	881b      	ldrh	r3, [r3, #0]
 800ac9e:	82fb      	strh	r3, [r7, #22]
 800aca0:	8afb      	ldrh	r3, [r7, #22]
 800aca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d01b      	beq.n	800ace2 <USB_EPClearStall+0x106>
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	881b      	ldrh	r3, [r3, #0]
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acc0:	82bb      	strh	r3, [r7, #20]
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	441a      	add	r2, r3
 800accc:	8abb      	ldrh	r3, [r7, #20]
 800acce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800acda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acde:	b29b      	uxth	r3, r3
 800ace0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	881b      	ldrh	r3, [r3, #0]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acf8:	827b      	strh	r3, [r7, #18]
 800acfa:	8a7b      	ldrh	r3, [r7, #18]
 800acfc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ad00:	827b      	strh	r3, [r7, #18]
 800ad02:	8a7b      	ldrh	r3, [r7, #18]
 800ad04:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad08:	827b      	strh	r3, [r7, #18]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	441a      	add	r2, r3
 800ad14:	8a7b      	ldrh	r3, [r7, #18]
 800ad16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	371c      	adds	r7, #28
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr

0800ad38 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d103      	bne.n	800ad52 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2280      	movs	r2, #128	; 0x80
 800ad4e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ad8e:	b480      	push	{r7}
 800ad90:	b085      	sub	sp, #20
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ada0:	68fb      	ldr	r3, [r7, #12]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800adae:	b480      	push	{r7}
 800adb0:	b08b      	sub	sp, #44	; 0x2c
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	60f8      	str	r0, [r7, #12]
 800adb6:	60b9      	str	r1, [r7, #8]
 800adb8:	4611      	mov	r1, r2
 800adba:	461a      	mov	r2, r3
 800adbc:	460b      	mov	r3, r1
 800adbe:	80fb      	strh	r3, [r7, #6]
 800adc0:	4613      	mov	r3, r2
 800adc2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800adc4:	88bb      	ldrh	r3, [r7, #4]
 800adc6:	3301      	adds	r3, #1
 800adc8:	085b      	lsrs	r3, r3, #1
 800adca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800add4:	88fa      	ldrh	r2, [r7, #6]
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	4413      	add	r3, r2
 800adda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800adde:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ade0:	69bb      	ldr	r3, [r7, #24]
 800ade2:	627b      	str	r3, [r7, #36]	; 0x24
 800ade4:	e01b      	b.n	800ae1e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	3301      	adds	r3, #1
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	021b      	lsls	r3, r3, #8
 800adf4:	b21a      	sxth	r2, r3
 800adf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800adfa:	4313      	orrs	r3, r2
 800adfc:	b21b      	sxth	r3, r3
 800adfe:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	8a7a      	ldrh	r2, [r7, #18]
 800ae04:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ae06:	6a3b      	ldr	r3, [r7, #32]
 800ae08:	3302      	adds	r3, #2
 800ae0a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ae0c:	69fb      	ldr	r3, [r7, #28]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	3301      	adds	r3, #1
 800ae16:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1e0      	bne.n	800ade6 <USB_WritePMA+0x38>
  }
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	372c      	adds	r7, #44	; 0x2c
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b08b      	sub	sp, #44	; 0x2c
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	60b9      	str	r1, [r7, #8]
 800ae3c:	4611      	mov	r1, r2
 800ae3e:	461a      	mov	r2, r3
 800ae40:	460b      	mov	r3, r1
 800ae42:	80fb      	strh	r3, [r7, #6]
 800ae44:	4613      	mov	r3, r2
 800ae46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ae48:	88bb      	ldrh	r3, [r7, #4]
 800ae4a:	085b      	lsrs	r3, r3, #1
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae58:	88fa      	ldrh	r2, [r7, #6]
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae62:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24
 800ae68:	e018      	b.n	800ae9c <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	881b      	ldrh	r3, [r3, #0]
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae72:	6a3b      	ldr	r3, [r7, #32]
 800ae74:	3302      	adds	r3, #2
 800ae76:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	b2da      	uxtb	r2, r3
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	3301      	adds	r3, #1
 800ae84:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	0a1b      	lsrs	r3, r3, #8
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	69fb      	ldr	r3, [r7, #28]
 800ae8e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	3301      	adds	r3, #1
 800ae94:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae98:	3b01      	subs	r3, #1
 800ae9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d1e3      	bne.n	800ae6a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800aea2:	88bb      	ldrh	r3, [r7, #4]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800aeae:	6a3b      	ldr	r3, [r7, #32]
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	701a      	strb	r2, [r3, #0]
  }
}
 800aebe:	bf00      	nop
 800aec0:	372c      	adds	r7, #44	; 0x2c
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr

0800aeca <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aeca:	b580      	push	{r7, lr}
 800aecc:	b084      	sub	sp, #16
 800aece:	af00      	add	r7, sp, #0
 800aed0:	6078      	str	r0, [r7, #4]
 800aed2:	460b      	mov	r3, r1
 800aed4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aed6:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aeda:	f002 f8a5 	bl	800d028 <USBD_static_malloc>
 800aede:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d105      	bne.n	800aef2 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800aeee:	2302      	movs	r3, #2
 800aef0:	e066      	b.n	800afc0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	7c1b      	ldrb	r3, [r3, #16]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d119      	bne.n	800af36 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af06:	2202      	movs	r2, #2
 800af08:	2181      	movs	r1, #129	; 0x81
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f001 ff33 	bl	800cd76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af16:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af1a:	2202      	movs	r2, #2
 800af1c:	2101      	movs	r1, #1
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f001 ff29 	bl	800cd76 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2201      	movs	r2, #1
 800af28:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2210      	movs	r2, #16
 800af30:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800af34:	e016      	b.n	800af64 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800af36:	2340      	movs	r3, #64	; 0x40
 800af38:	2202      	movs	r2, #2
 800af3a:	2181      	movs	r1, #129	; 0x81
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f001 ff1a 	bl	800cd76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800af48:	2340      	movs	r3, #64	; 0x40
 800af4a:	2202      	movs	r2, #2
 800af4c:	2101      	movs	r1, #1
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f001 ff11 	bl	800cd76 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2210      	movs	r2, #16
 800af60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af64:	2308      	movs	r3, #8
 800af66:	2203      	movs	r2, #3
 800af68:	2182      	movs	r1, #130	; 0x82
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f001 ff03 	bl	800cd76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	7c1b      	ldrb	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d109      	bne.n	800afae <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afa4:	2101      	movs	r1, #1
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f001 ffd4 	bl	800cf54 <USBD_LL_PrepareReceive>
 800afac:	e007      	b.n	800afbe <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afb4:	2340      	movs	r3, #64	; 0x40
 800afb6:	2101      	movs	r1, #1
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 ffcb 	bl	800cf54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	460b      	mov	r3, r1
 800afd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800afd4:	2181      	movs	r1, #129	; 0x81
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f001 fef3 	bl	800cdc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800afe2:	2101      	movs	r1, #1
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 feec 	bl	800cdc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800aff2:	2182      	movs	r1, #130	; 0x82
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 fee4 	bl	800cdc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2200      	movs	r2, #0
 800b006:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b010:	2b00      	cmp	r3, #0
 800b012:	d00e      	beq.n	800b032 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b024:	4618      	mov	r0, r3
 800b026:	f002 f80d 	bl	800d044 <USBD_static_free>
    pdev->pClassData = NULL;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2200      	movs	r2, #0
 800b02e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b04c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b04e:	2300      	movs	r3, #0
 800b050:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b052:	2300      	movs	r3, #0
 800b054:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b060:	2303      	movs	r3, #3
 800b062:	e0af      	b.n	800b1c4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d03f      	beq.n	800b0f0 <USBD_CDC_Setup+0xb4>
 800b070:	2b20      	cmp	r3, #32
 800b072:	f040 809f 	bne.w	800b1b4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d02e      	beq.n	800b0dc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	781b      	ldrb	r3, [r3, #0]
 800b082:	b25b      	sxtb	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	da16      	bge.n	800b0b6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	683a      	ldr	r2, [r7, #0]
 800b092:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b094:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	88d2      	ldrh	r2, [r2, #6]
 800b09a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	88db      	ldrh	r3, [r3, #6]
 800b0a0:	2b07      	cmp	r3, #7
 800b0a2:	bf28      	it	cs
 800b0a4:	2307      	movcs	r3, #7
 800b0a6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	89fa      	ldrh	r2, [r7, #14]
 800b0ac:	4619      	mov	r1, r3
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f001 fa9f 	bl	800c5f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b0b4:	e085      	b.n	800b1c2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	785a      	ldrb	r2, [r3, #1]
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	88db      	ldrh	r3, [r3, #6]
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b0cc:	6939      	ldr	r1, [r7, #16]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	88db      	ldrh	r3, [r3, #6]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 fab8 	bl	800c64a <USBD_CtlPrepareRx>
      break;
 800b0da:	e072      	b.n	800b1c2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0e2:	689b      	ldr	r3, [r3, #8]
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	7850      	ldrb	r0, [r2, #1]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	4798      	blx	r3
      break;
 800b0ee:	e068      	b.n	800b1c2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	785b      	ldrb	r3, [r3, #1]
 800b0f4:	2b0b      	cmp	r3, #11
 800b0f6:	d852      	bhi.n	800b19e <USBD_CDC_Setup+0x162>
 800b0f8:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <USBD_CDC_Setup+0xc4>)
 800b0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b131 	.word	0x0800b131
 800b104:	0800b1ad 	.word	0x0800b1ad
 800b108:	0800b19f 	.word	0x0800b19f
 800b10c:	0800b19f 	.word	0x0800b19f
 800b110:	0800b19f 	.word	0x0800b19f
 800b114:	0800b19f 	.word	0x0800b19f
 800b118:	0800b19f 	.word	0x0800b19f
 800b11c:	0800b19f 	.word	0x0800b19f
 800b120:	0800b19f 	.word	0x0800b19f
 800b124:	0800b19f 	.word	0x0800b19f
 800b128:	0800b15b 	.word	0x0800b15b
 800b12c:	0800b185 	.word	0x0800b185
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d107      	bne.n	800b14c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b13c:	f107 030a 	add.w	r3, r7, #10
 800b140:	2202      	movs	r2, #2
 800b142:	4619      	mov	r1, r3
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f001 fa54 	bl	800c5f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b14a:	e032      	b.n	800b1b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f001 f9de 	bl	800c510 <USBD_CtlError>
            ret = USBD_FAIL;
 800b154:	2303      	movs	r3, #3
 800b156:	75fb      	strb	r3, [r7, #23]
          break;
 800b158:	e02b      	b.n	800b1b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b03      	cmp	r3, #3
 800b164:	d107      	bne.n	800b176 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b166:	f107 030d 	add.w	r3, r7, #13
 800b16a:	2201      	movs	r2, #1
 800b16c:	4619      	mov	r1, r3
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f001 fa3f 	bl	800c5f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b174:	e01d      	b.n	800b1b2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b176:	6839      	ldr	r1, [r7, #0]
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f001 f9c9 	bl	800c510 <USBD_CtlError>
            ret = USBD_FAIL;
 800b17e:	2303      	movs	r3, #3
 800b180:	75fb      	strb	r3, [r7, #23]
          break;
 800b182:	e016      	b.n	800b1b2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b03      	cmp	r3, #3
 800b18e:	d00f      	beq.n	800b1b0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f001 f9bc 	bl	800c510 <USBD_CtlError>
            ret = USBD_FAIL;
 800b198:	2303      	movs	r3, #3
 800b19a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b19c:	e008      	b.n	800b1b0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f001 f9b5 	bl	800c510 <USBD_CtlError>
          ret = USBD_FAIL;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	75fb      	strb	r3, [r7, #23]
          break;
 800b1aa:	e002      	b.n	800b1b2 <USBD_CDC_Setup+0x176>
          break;
 800b1ac:	bf00      	nop
 800b1ae:	e008      	b.n	800b1c2 <USBD_CDC_Setup+0x186>
          break;
 800b1b0:	bf00      	nop
      }
      break;
 800b1b2:	e006      	b.n	800b1c2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f001 f9aa 	bl	800c510 <USBD_CtlError>
      ret = USBD_FAIL;
 800b1bc:	2303      	movs	r3, #3
 800b1be:	75fb      	strb	r3, [r7, #23]
      break;
 800b1c0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b1c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3718      	adds	r7, #24
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b1de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e04f      	b.n	800b28e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1f4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b1f6:	78fa      	ldrb	r2, [r7, #3]
 800b1f8:	6879      	ldr	r1, [r7, #4]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	440b      	add	r3, r1
 800b204:	3318      	adds	r3, #24
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d029      	beq.n	800b260 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b20c:	78fa      	ldrb	r2, [r7, #3]
 800b20e:	6879      	ldr	r1, [r7, #4]
 800b210:	4613      	mov	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4413      	add	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	440b      	add	r3, r1
 800b21a:	3318      	adds	r3, #24
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	78f9      	ldrb	r1, [r7, #3]
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	460b      	mov	r3, r1
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	440b      	add	r3, r1
 800b228:	00db      	lsls	r3, r3, #3
 800b22a:	4403      	add	r3, r0
 800b22c:	3320      	adds	r3, #32
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	fbb2 f1f3 	udiv	r1, r2, r3
 800b234:	fb01 f303 	mul.w	r3, r1, r3
 800b238:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d110      	bne.n	800b260 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b23e:	78fa      	ldrb	r2, [r7, #3]
 800b240:	6879      	ldr	r1, [r7, #4]
 800b242:	4613      	mov	r3, r2
 800b244:	009b      	lsls	r3, r3, #2
 800b246:	4413      	add	r3, r2
 800b248:	009b      	lsls	r3, r3, #2
 800b24a:	440b      	add	r3, r1
 800b24c:	3318      	adds	r3, #24
 800b24e:	2200      	movs	r2, #0
 800b250:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b252:	78f9      	ldrb	r1, [r7, #3]
 800b254:	2300      	movs	r3, #0
 800b256:	2200      	movs	r2, #0
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f001 fe5a 	bl	800cf12 <USBD_LL_Transmit>
 800b25e:	e015      	b.n	800b28c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	2200      	movs	r2, #0
 800b264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00b      	beq.n	800b28c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	68ba      	ldr	r2, [r7, #8]
 800b27e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b282:	68ba      	ldr	r2, [r7, #8]
 800b284:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b288:	78fa      	ldrb	r2, [r7, #3]
 800b28a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b296:	b580      	push	{r7, lr}
 800b298:	b084      	sub	sp, #16
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	460b      	mov	r3, r1
 800b2a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b2b4:	2303      	movs	r3, #3
 800b2b6:	e015      	b.n	800b2e4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 fe6a 	bl	800cf96 <USBD_LL_GetRxDataSize>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2d0:	68db      	ldr	r3, [r3, #12]
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b2d8:	68fa      	ldr	r2, [r7, #12]
 800b2da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b2de:	4611      	mov	r1, r2
 800b2e0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b084      	sub	sp, #16
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2fa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b302:	2303      	movs	r3, #3
 800b304:	e01b      	b.n	800b33e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d015      	beq.n	800b33c <USBD_CDC_EP0_RxReady+0x50>
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b316:	2bff      	cmp	r3, #255	; 0xff
 800b318:	d010      	beq.n	800b33c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b320:	689b      	ldr	r3, [r3, #8]
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b328:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b330:	b292      	uxth	r2, r2
 800b332:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	22ff      	movs	r2, #255	; 0xff
 800b338:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2243      	movs	r2, #67	; 0x43
 800b354:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b356:	4b03      	ldr	r3, [pc, #12]	; (800b364 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b358:	4618      	mov	r0, r3
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	20000094 	.word	0x20000094

0800b368 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2243      	movs	r2, #67	; 0x43
 800b374:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b376:	4b03      	ldr	r3, [pc, #12]	; (800b384 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b378:	4618      	mov	r0, r3
 800b37a:	370c      	adds	r7, #12
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr
 800b384:	20000050 	.word	0x20000050

0800b388 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2243      	movs	r2, #67	; 0x43
 800b394:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b396:	4b03      	ldr	r3, [pc, #12]	; (800b3a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr
 800b3a4:	200000d8 	.word	0x200000d8

0800b3a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	220a      	movs	r2, #10
 800b3b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b3b6:	4b03      	ldr	r3, [pc, #12]	; (800b3c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	2000000c 	.word	0x2000000c

0800b3c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e004      	b.n	800b3e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b087      	sub	sp, #28
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b404:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b40c:	2303      	movs	r3, #3
 800b40e:	e008      	b.n	800b422 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	68ba      	ldr	r2, [r7, #8]
 800b414:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b42e:	b480      	push	{r7}
 800b430:	b085      	sub	sp, #20
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b43e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d101      	bne.n	800b44a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b446:	2303      	movs	r3, #3
 800b448:	e004      	b.n	800b454 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b46e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e016      	b.n	800b4ac <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	7c1b      	ldrb	r3, [r3, #16]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d109      	bne.n	800b49a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b48c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b490:	2101      	movs	r1, #1
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f001 fd5e 	bl	800cf54 <USBD_LL_PrepareReceive>
 800b498:	e007      	b.n	800b4aa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b4a0:	2340      	movs	r3, #64	; 0x40
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f001 fd55 	bl	800cf54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	4613      	mov	r3, r2
 800b4c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d101      	bne.n	800b4cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	e01f      	b.n	800b50c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d003      	beq.n	800b4f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	79fa      	ldrb	r2, [r7, #7]
 800b4fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b500:	68f8      	ldr	r0, [r7, #12]
 800b502:	f001 fbbd 	bl	800cc80 <USBD_LL_Init>
 800b506:	4603      	mov	r3, r0
 800b508:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b50a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}

0800b514 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b084      	sub	sp, #16
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
 800b51c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b51e:	2300      	movs	r3, #0
 800b520:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b528:	2303      	movs	r3, #3
 800b52a:	e016      	b.n	800b55a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b548:	f107 020e 	add.w	r2, r7, #14
 800b54c:	4610      	mov	r0, r2
 800b54e:	4798      	blx	r3
 800b550:	4602      	mov	r2, r0
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b558:	2300      	movs	r3, #0
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b082      	sub	sp, #8
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f001 fbe8 	bl	800cd40 <USBD_LL_Start>
 800b570:	4603      	mov	r3, r0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b57a:	b480      	push	{r7}
 800b57c:	b083      	sub	sp, #12
 800b57e:	af00      	add	r7, sp, #0
 800b580:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b59c:	2303      	movs	r3, #3
 800b59e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	78fa      	ldrb	r2, [r7, #3]
 800b5b4:	4611      	mov	r1, r2
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	4798      	blx	r3
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d007      	beq.n	800b5ee <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	78fa      	ldrb	r2, [r7, #3]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	4798      	blx	r3
  }

  return USBD_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b084      	sub	sp, #16
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b608:	6839      	ldr	r1, [r7, #0]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 ff46 	bl	800c49c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b62c:	f003 031f 	and.w	r3, r3, #31
 800b630:	2b02      	cmp	r3, #2
 800b632:	d01a      	beq.n	800b66a <USBD_LL_SetupStage+0x72>
 800b634:	2b02      	cmp	r3, #2
 800b636:	d822      	bhi.n	800b67e <USBD_LL_SetupStage+0x86>
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <USBD_LL_SetupStage+0x4a>
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d00a      	beq.n	800b656 <USBD_LL_SetupStage+0x5e>
 800b640:	e01d      	b.n	800b67e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f9ee 	bl	800ba2c <USBD_StdDevReq>
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]
      break;
 800b654:	e020      	b.n	800b698 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b65c:	4619      	mov	r1, r3
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fa52 	bl	800bb08 <USBD_StdItfReq>
 800b664:	4603      	mov	r3, r0
 800b666:	73fb      	strb	r3, [r7, #15]
      break;
 800b668:	e016      	b.n	800b698 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b670:	4619      	mov	r1, r3
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fa91 	bl	800bb9a <USBD_StdEPReq>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]
      break;
 800b67c:	e00c      	b.n	800b698 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b684:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f001 fbb7 	bl	800ce00 <USBD_LL_StallEP>
 800b692:	4603      	mov	r3, r0
 800b694:	73fb      	strb	r3, [r7, #15]
      break;
 800b696:	bf00      	nop
  }

  return ret;
 800b698:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3710      	adds	r7, #16
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	bd80      	pop	{r7, pc}

0800b6a2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6a2:	b580      	push	{r7, lr}
 800b6a4:	b086      	sub	sp, #24
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	607a      	str	r2, [r7, #4]
 800b6ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b6b0:	7afb      	ldrb	r3, [r7, #11]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d138      	bne.n	800b728 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b6bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d14a      	bne.n	800b75e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	689a      	ldr	r2, [r3, #8]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d913      	bls.n	800b6fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	689a      	ldr	r2, [r3, #8]
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	1ad2      	subs	r2, r2, r3
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	689b      	ldr	r3, [r3, #8]
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	bf28      	it	cs
 800b6ee:	4613      	movcs	r3, r2
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	68f8      	ldr	r0, [r7, #12]
 800b6f6:	f000 ffc5 	bl	800c684 <USBD_CtlContinueRx>
 800b6fa:	e030      	b.n	800b75e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b03      	cmp	r3, #3
 800b706:	d10b      	bne.n	800b720 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70e:	691b      	ldr	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b71a:	691b      	ldr	r3, [r3, #16]
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f000 ffc0 	bl	800c6a6 <USBD_CtlSendStatus>
 800b726:	e01a      	b.n	800b75e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b72e:	b2db      	uxtb	r3, r3
 800b730:	2b03      	cmp	r3, #3
 800b732:	d114      	bne.n	800b75e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00e      	beq.n	800b75e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	7afa      	ldrb	r2, [r7, #11]
 800b74a:	4611      	mov	r1, r2
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	4798      	blx	r3
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b754:	7dfb      	ldrb	r3, [r7, #23]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b75a:	7dfb      	ldrb	r3, [r7, #23]
 800b75c:	e000      	b.n	800b760 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b75e:	2300      	movs	r3, #0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b086      	sub	sp, #24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	460b      	mov	r3, r1
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b776:	7afb      	ldrb	r3, [r7, #11]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d16b      	bne.n	800b854 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	3314      	adds	r3, #20
 800b780:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d156      	bne.n	800b83a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	689a      	ldr	r2, [r3, #8]
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	68db      	ldr	r3, [r3, #12]
 800b794:	429a      	cmp	r2, r3
 800b796:	d914      	bls.n	800b7c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	689a      	ldr	r2, [r3, #8]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	68db      	ldr	r3, [r3, #12]
 800b7a0:	1ad2      	subs	r2, r2, r3
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	461a      	mov	r2, r3
 800b7ac:	6879      	ldr	r1, [r7, #4]
 800b7ae:	68f8      	ldr	r0, [r7, #12]
 800b7b0:	f000 ff3a 	bl	800c628 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f001 fbca 	bl	800cf54 <USBD_LL_PrepareReceive>
 800b7c0:	e03b      	b.n	800b83a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	68da      	ldr	r2, [r3, #12]
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d11c      	bne.n	800b808 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d316      	bcc.n	800b808 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	685a      	ldr	r2, [r3, #4]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d20f      	bcs.n	800b808 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	68f8      	ldr	r0, [r7, #12]
 800b7ee:	f000 ff1b 	bl	800c628 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	2100      	movs	r1, #0
 800b800:	68f8      	ldr	r0, [r7, #12]
 800b802:	f001 fba7 	bl	800cf54 <USBD_LL_PrepareReceive>
 800b806:	e018      	b.n	800b83a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80e:	b2db      	uxtb	r3, r3
 800b810:	2b03      	cmp	r3, #3
 800b812:	d10b      	bne.n	800b82c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d005      	beq.n	800b82c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	68f8      	ldr	r0, [r7, #12]
 800b82a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b82c:	2180      	movs	r1, #128	; 0x80
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f001 fae6 	bl	800ce00 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b834:	68f8      	ldr	r0, [r7, #12]
 800b836:	f000 ff49 	bl	800c6cc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b840:	2b01      	cmp	r3, #1
 800b842:	d122      	bne.n	800b88a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f7ff fe98 	bl	800b57a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b852:	e01a      	b.n	800b88a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b85a:	b2db      	uxtb	r3, r3
 800b85c:	2b03      	cmp	r3, #3
 800b85e:	d114      	bne.n	800b88a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b866:	695b      	ldr	r3, [r3, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00e      	beq.n	800b88a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	7afa      	ldrb	r2, [r7, #11]
 800b876:	4611      	mov	r1, r2
 800b878:	68f8      	ldr	r0, [r7, #12]
 800b87a:	4798      	blx	r3
 800b87c:	4603      	mov	r3, r0
 800b87e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	e000      	b.n	800b88c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3718      	adds	r7, #24
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b8c4:	2303      	movs	r3, #3
 800b8c6:	e02f      	b.n	800b928 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00f      	beq.n	800b8f2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d009      	beq.n	800b8f2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	6852      	ldr	r2, [r2, #4]
 800b8ea:	b2d2      	uxtb	r2, r2
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8f2:	2340      	movs	r3, #64	; 0x40
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f001 fa3c 	bl	800cd76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2240      	movs	r2, #64	; 0x40
 800b90a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b90e:	2340      	movs	r3, #64	; 0x40
 800b910:	2200      	movs	r2, #0
 800b912:	2180      	movs	r1, #128	; 0x80
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fa2e 	bl	800cd76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2240      	movs	r2, #64	; 0x40
 800b924:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b926:	2300      	movs	r3, #0
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}

0800b930 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	460b      	mov	r3, r1
 800b93a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	78fa      	ldrb	r2, [r7, #3]
 800b940:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b95e:	b2da      	uxtb	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2204      	movs	r2, #4
 800b96a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b98a:	b2db      	uxtb	r3, r3
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d106      	bne.n	800b99e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b996:	b2da      	uxtb	r2, r3
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	370c      	adds	r7, #12
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d101      	bne.n	800b9c2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	e012      	b.n	800b9e8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	d10b      	bne.n	800b9e6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9d4:	69db      	ldr	r3, [r3, #28]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d005      	beq.n	800b9e6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9e6:	2300      	movs	r3, #0
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3708      	adds	r7, #8
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b087      	sub	sp, #28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	3301      	adds	r3, #1
 800ba06:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba0e:	8a3b      	ldrh	r3, [r7, #16]
 800ba10:	021b      	lsls	r3, r3, #8
 800ba12:	b21a      	sxth	r2, r3
 800ba14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	b21b      	sxth	r3, r3
 800ba1c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba1e:	89fb      	ldrh	r3, [r7, #14]
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	371c      	adds	r7, #28
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba42:	2b40      	cmp	r3, #64	; 0x40
 800ba44:	d005      	beq.n	800ba52 <USBD_StdDevReq+0x26>
 800ba46:	2b40      	cmp	r3, #64	; 0x40
 800ba48:	d853      	bhi.n	800baf2 <USBD_StdDevReq+0xc6>
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <USBD_StdDevReq+0x3a>
 800ba4e:	2b20      	cmp	r3, #32
 800ba50:	d14f      	bne.n	800baf2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba58:	689b      	ldr	r3, [r3, #8]
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	4798      	blx	r3
 800ba60:	4603      	mov	r3, r0
 800ba62:	73fb      	strb	r3, [r7, #15]
      break;
 800ba64:	e04a      	b.n	800bafc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	785b      	ldrb	r3, [r3, #1]
 800ba6a:	2b09      	cmp	r3, #9
 800ba6c:	d83b      	bhi.n	800bae6 <USBD_StdDevReq+0xba>
 800ba6e:	a201      	add	r2, pc, #4	; (adr r2, 800ba74 <USBD_StdDevReq+0x48>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800bac9 	.word	0x0800bac9
 800ba78:	0800badd 	.word	0x0800badd
 800ba7c:	0800bae7 	.word	0x0800bae7
 800ba80:	0800bad3 	.word	0x0800bad3
 800ba84:	0800bae7 	.word	0x0800bae7
 800ba88:	0800baa7 	.word	0x0800baa7
 800ba8c:	0800ba9d 	.word	0x0800ba9d
 800ba90:	0800bae7 	.word	0x0800bae7
 800ba94:	0800babf 	.word	0x0800babf
 800ba98:	0800bab1 	.word	0x0800bab1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f9de 	bl	800be60 <USBD_GetDescriptor>
          break;
 800baa4:	e024      	b.n	800baf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f000 fb6d 	bl	800c188 <USBD_SetAddress>
          break;
 800baae:	e01f      	b.n	800baf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bab0:	6839      	ldr	r1, [r7, #0]
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fbac 	bl	800c210 <USBD_SetConfig>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]
          break;
 800babc:	e018      	b.n	800baf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800babe:	6839      	ldr	r1, [r7, #0]
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 fc4b 	bl	800c35c <USBD_GetConfig>
          break;
 800bac6:	e013      	b.n	800baf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bac8:	6839      	ldr	r1, [r7, #0]
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fc7c 	bl	800c3c8 <USBD_GetStatus>
          break;
 800bad0:	e00e      	b.n	800baf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bad2:	6839      	ldr	r1, [r7, #0]
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f000 fcab 	bl	800c430 <USBD_SetFeature>
          break;
 800bada:	e009      	b.n	800baf0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800badc:	6839      	ldr	r1, [r7, #0]
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fcba 	bl	800c458 <USBD_ClrFeature>
          break;
 800bae4:	e004      	b.n	800baf0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bae6:	6839      	ldr	r1, [r7, #0]
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fd11 	bl	800c510 <USBD_CtlError>
          break;
 800baee:	bf00      	nop
      }
      break;
 800baf0:	e004      	b.n	800bafc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fd0b 	bl	800c510 <USBD_CtlError>
      break;
 800bafa:	bf00      	nop
  }

  return ret;
 800bafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop

0800bb08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b084      	sub	sp, #16
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb12:	2300      	movs	r3, #0
 800bb14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bb1e:	2b40      	cmp	r3, #64	; 0x40
 800bb20:	d005      	beq.n	800bb2e <USBD_StdItfReq+0x26>
 800bb22:	2b40      	cmp	r3, #64	; 0x40
 800bb24:	d82f      	bhi.n	800bb86 <USBD_StdItfReq+0x7e>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d001      	beq.n	800bb2e <USBD_StdItfReq+0x26>
 800bb2a:	2b20      	cmp	r3, #32
 800bb2c:	d12b      	bne.n	800bb86 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	3b01      	subs	r3, #1
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d81d      	bhi.n	800bb78 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	889b      	ldrh	r3, [r3, #4]
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d813      	bhi.n	800bb6e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	4798      	blx	r3
 800bb54:	4603      	mov	r3, r0
 800bb56:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	88db      	ldrh	r3, [r3, #6]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d110      	bne.n	800bb82 <USBD_StdItfReq+0x7a>
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10d      	bne.n	800bb82 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fd9d 	bl	800c6a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb6c:	e009      	b.n	800bb82 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fccd 	bl	800c510 <USBD_CtlError>
          break;
 800bb76:	e004      	b.n	800bb82 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f000 fcc8 	bl	800c510 <USBD_CtlError>
          break;
 800bb80:	e000      	b.n	800bb84 <USBD_StdItfReq+0x7c>
          break;
 800bb82:	bf00      	nop
      }
      break;
 800bb84:	e004      	b.n	800bb90 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bb86:	6839      	ldr	r1, [r7, #0]
 800bb88:	6878      	ldr	r0, [r7, #4]
 800bb8a:	f000 fcc1 	bl	800c510 <USBD_CtlError>
      break;
 800bb8e:	bf00      	nop
  }

  return ret;
 800bb90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	889b      	ldrh	r3, [r3, #4]
 800bbac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbb6:	2b40      	cmp	r3, #64	; 0x40
 800bbb8:	d007      	beq.n	800bbca <USBD_StdEPReq+0x30>
 800bbba:	2b40      	cmp	r3, #64	; 0x40
 800bbbc:	f200 8145 	bhi.w	800be4a <USBD_StdEPReq+0x2b0>
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00c      	beq.n	800bbde <USBD_StdEPReq+0x44>
 800bbc4:	2b20      	cmp	r3, #32
 800bbc6:	f040 8140 	bne.w	800be4a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbd0:	689b      	ldr	r3, [r3, #8]
 800bbd2:	6839      	ldr	r1, [r7, #0]
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	4798      	blx	r3
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73fb      	strb	r3, [r7, #15]
      break;
 800bbdc:	e13a      	b.n	800be54 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	785b      	ldrb	r3, [r3, #1]
 800bbe2:	2b03      	cmp	r3, #3
 800bbe4:	d007      	beq.n	800bbf6 <USBD_StdEPReq+0x5c>
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	f300 8129 	bgt.w	800be3e <USBD_StdEPReq+0x2a4>
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d07f      	beq.n	800bcf0 <USBD_StdEPReq+0x156>
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d03c      	beq.n	800bc6e <USBD_StdEPReq+0xd4>
 800bbf4:	e123      	b.n	800be3e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d002      	beq.n	800bc08 <USBD_StdEPReq+0x6e>
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d016      	beq.n	800bc34 <USBD_StdEPReq+0x9a>
 800bc06:	e02c      	b.n	800bc62 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc08:	7bbb      	ldrb	r3, [r7, #14]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d00d      	beq.n	800bc2a <USBD_StdEPReq+0x90>
 800bc0e:	7bbb      	ldrb	r3, [r7, #14]
 800bc10:	2b80      	cmp	r3, #128	; 0x80
 800bc12:	d00a      	beq.n	800bc2a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	4619      	mov	r1, r3
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f001 f8f1 	bl	800ce00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc1e:	2180      	movs	r1, #128	; 0x80
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f001 f8ed 	bl	800ce00 <USBD_LL_StallEP>
 800bc26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc28:	e020      	b.n	800bc6c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bc2a:	6839      	ldr	r1, [r7, #0]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fc6f 	bl	800c510 <USBD_CtlError>
              break;
 800bc32:	e01b      	b.n	800bc6c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	885b      	ldrh	r3, [r3, #2]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10e      	bne.n	800bc5a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00b      	beq.n	800bc5a <USBD_StdEPReq+0xc0>
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	2b80      	cmp	r3, #128	; 0x80
 800bc46:	d008      	beq.n	800bc5a <USBD_StdEPReq+0xc0>
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	88db      	ldrh	r3, [r3, #6]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d104      	bne.n	800bc5a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc50:	7bbb      	ldrb	r3, [r7, #14]
 800bc52:	4619      	mov	r1, r3
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f001 f8d3 	bl	800ce00 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f000 fd23 	bl	800c6a6 <USBD_CtlSendStatus>

              break;
 800bc60:	e004      	b.n	800bc6c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fc53 	bl	800c510 <USBD_CtlError>
              break;
 800bc6a:	bf00      	nop
          }
          break;
 800bc6c:	e0ec      	b.n	800be48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b02      	cmp	r3, #2
 800bc78:	d002      	beq.n	800bc80 <USBD_StdEPReq+0xe6>
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d016      	beq.n	800bcac <USBD_StdEPReq+0x112>
 800bc7e:	e030      	b.n	800bce2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc80:	7bbb      	ldrb	r3, [r7, #14]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d00d      	beq.n	800bca2 <USBD_StdEPReq+0x108>
 800bc86:	7bbb      	ldrb	r3, [r7, #14]
 800bc88:	2b80      	cmp	r3, #128	; 0x80
 800bc8a:	d00a      	beq.n	800bca2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc8c:	7bbb      	ldrb	r3, [r7, #14]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f001 f8b5 	bl	800ce00 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc96:	2180      	movs	r1, #128	; 0x80
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f001 f8b1 	bl	800ce00 <USBD_LL_StallEP>
 800bc9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bca0:	e025      	b.n	800bcee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bca2:	6839      	ldr	r1, [r7, #0]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 fc33 	bl	800c510 <USBD_CtlError>
              break;
 800bcaa:	e020      	b.n	800bcee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	885b      	ldrh	r3, [r3, #2]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d11b      	bne.n	800bcec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bcb4:	7bbb      	ldrb	r3, [r7, #14]
 800bcb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d004      	beq.n	800bcc8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcbe:	7bbb      	ldrb	r3, [r7, #14]
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f001 f8bb 	bl	800ce3e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f000 fcec 	bl	800c6a6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	4798      	blx	r3
 800bcdc:	4603      	mov	r3, r0
 800bcde:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bce0:	e004      	b.n	800bcec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fc13 	bl	800c510 <USBD_CtlError>
              break;
 800bcea:	e000      	b.n	800bcee <USBD_StdEPReq+0x154>
              break;
 800bcec:	bf00      	nop
          }
          break;
 800bcee:	e0ab      	b.n	800be48 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d002      	beq.n	800bd02 <USBD_StdEPReq+0x168>
 800bcfc:	2b03      	cmp	r3, #3
 800bcfe:	d032      	beq.n	800bd66 <USBD_StdEPReq+0x1cc>
 800bd00:	e097      	b.n	800be32 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd02:	7bbb      	ldrb	r3, [r7, #14]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d007      	beq.n	800bd18 <USBD_StdEPReq+0x17e>
 800bd08:	7bbb      	ldrb	r3, [r7, #14]
 800bd0a:	2b80      	cmp	r3, #128	; 0x80
 800bd0c:	d004      	beq.n	800bd18 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fbfd 	bl	800c510 <USBD_CtlError>
                break;
 800bd16:	e091      	b.n	800be3c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da0b      	bge.n	800bd38 <USBD_StdEPReq+0x19e>
 800bd20:	7bbb      	ldrb	r3, [r7, #14]
 800bd22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd26:	4613      	mov	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	3310      	adds	r3, #16
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	4413      	add	r3, r2
 800bd34:	3304      	adds	r3, #4
 800bd36:	e00b      	b.n	800bd50 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd38:	7bbb      	ldrb	r3, [r7, #14]
 800bd3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd3e:	4613      	mov	r3, r2
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bd4a:	687a      	ldr	r2, [r7, #4]
 800bd4c:	4413      	add	r3, r2
 800bd4e:	3304      	adds	r3, #4
 800bd50:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2200      	movs	r2, #0
 800bd56:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fc47 	bl	800c5f2 <USBD_CtlSendData>
              break;
 800bd64:	e06a      	b.n	800be3c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da11      	bge.n	800bd92 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd6e:	7bbb      	ldrb	r3, [r7, #14]
 800bd70:	f003 020f 	and.w	r2, r3, #15
 800bd74:	6879      	ldr	r1, [r7, #4]
 800bd76:	4613      	mov	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	4413      	add	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	440b      	add	r3, r1
 800bd80:	3324      	adds	r3, #36	; 0x24
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d117      	bne.n	800bdb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd88:	6839      	ldr	r1, [r7, #0]
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f000 fbc0 	bl	800c510 <USBD_CtlError>
                  break;
 800bd90:	e054      	b.n	800be3c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	f003 020f 	and.w	r2, r3, #15
 800bd98:	6879      	ldr	r1, [r7, #4]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4413      	add	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	440b      	add	r3, r1
 800bda4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d104      	bne.n	800bdb8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fbad 	bl	800c510 <USBD_CtlError>
                  break;
 800bdb6:	e041      	b.n	800be3c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da0b      	bge.n	800bdd8 <USBD_StdEPReq+0x23e>
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
 800bdc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	3310      	adds	r3, #16
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	4413      	add	r3, r2
 800bdd4:	3304      	adds	r3, #4
 800bdd6:	e00b      	b.n	800bdf0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bdd8:	7bbb      	ldrb	r3, [r7, #14]
 800bdda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdde:	4613      	mov	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	4413      	add	r3, r2
 800bdee:	3304      	adds	r3, #4
 800bdf0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdf2:	7bbb      	ldrb	r3, [r7, #14]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <USBD_StdEPReq+0x264>
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
 800bdfa:	2b80      	cmp	r3, #128	; 0x80
 800bdfc:	d103      	bne.n	800be06 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	2200      	movs	r2, #0
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	e00e      	b.n	800be24 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be06:	7bbb      	ldrb	r3, [r7, #14]
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 f836 	bl	800ce7c <USBD_LL_IsStallEP>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d003      	beq.n	800be1e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2201      	movs	r2, #1
 800be1a:	601a      	str	r2, [r3, #0]
 800be1c:	e002      	b.n	800be24 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2200      	movs	r2, #0
 800be22:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2202      	movs	r2, #2
 800be28:	4619      	mov	r1, r3
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fbe1 	bl	800c5f2 <USBD_CtlSendData>
              break;
 800be30:	e004      	b.n	800be3c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fb6b 	bl	800c510 <USBD_CtlError>
              break;
 800be3a:	bf00      	nop
          }
          break;
 800be3c:	e004      	b.n	800be48 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800be3e:	6839      	ldr	r1, [r7, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fb65 	bl	800c510 <USBD_CtlError>
          break;
 800be46:	bf00      	nop
      }
      break;
 800be48:	e004      	b.n	800be54 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800be4a:	6839      	ldr	r1, [r7, #0]
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 fb5f 	bl	800c510 <USBD_CtlError>
      break;
 800be52:	bf00      	nop
  }

  return ret;
 800be54:	7bfb      	ldrb	r3, [r7, #15]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3710      	adds	r7, #16
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
	...

0800be60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be6e:	2300      	movs	r3, #0
 800be70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be72:	2300      	movs	r3, #0
 800be74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	885b      	ldrh	r3, [r3, #2]
 800be7a:	0a1b      	lsrs	r3, r3, #8
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	3b01      	subs	r3, #1
 800be80:	2b0e      	cmp	r3, #14
 800be82:	f200 8152 	bhi.w	800c12a <USBD_GetDescriptor+0x2ca>
 800be86:	a201      	add	r2, pc, #4	; (adr r2, 800be8c <USBD_GetDescriptor+0x2c>)
 800be88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be8c:	0800befd 	.word	0x0800befd
 800be90:	0800bf15 	.word	0x0800bf15
 800be94:	0800bf55 	.word	0x0800bf55
 800be98:	0800c12b 	.word	0x0800c12b
 800be9c:	0800c12b 	.word	0x0800c12b
 800bea0:	0800c0cb 	.word	0x0800c0cb
 800bea4:	0800c0f7 	.word	0x0800c0f7
 800bea8:	0800c12b 	.word	0x0800c12b
 800beac:	0800c12b 	.word	0x0800c12b
 800beb0:	0800c12b 	.word	0x0800c12b
 800beb4:	0800c12b 	.word	0x0800c12b
 800beb8:	0800c12b 	.word	0x0800c12b
 800bebc:	0800c12b 	.word	0x0800c12b
 800bec0:	0800c12b 	.word	0x0800c12b
 800bec4:	0800bec9 	.word	0x0800bec9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bece:	69db      	ldr	r3, [r3, #28]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00b      	beq.n	800beec <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beda:	69db      	ldr	r3, [r3, #28]
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	7c12      	ldrb	r2, [r2, #16]
 800bee0:	f107 0108 	add.w	r1, r7, #8
 800bee4:	4610      	mov	r0, r2
 800bee6:	4798      	blx	r3
 800bee8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beea:	e126      	b.n	800c13a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f000 fb0e 	bl	800c510 <USBD_CtlError>
        err++;
 800bef4:	7afb      	ldrb	r3, [r7, #11]
 800bef6:	3301      	adds	r3, #1
 800bef8:	72fb      	strb	r3, [r7, #11]
      break;
 800befa:	e11e      	b.n	800c13a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	7c12      	ldrb	r2, [r2, #16]
 800bf08:	f107 0108 	add.w	r1, r7, #8
 800bf0c:	4610      	mov	r0, r2
 800bf0e:	4798      	blx	r3
 800bf10:	60f8      	str	r0, [r7, #12]
      break;
 800bf12:	e112      	b.n	800c13a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	7c1b      	ldrb	r3, [r3, #16]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10d      	bne.n	800bf38 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf24:	f107 0208 	add.w	r2, r7, #8
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4798      	blx	r3
 800bf2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	3301      	adds	r3, #1
 800bf32:	2202      	movs	r2, #2
 800bf34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf36:	e100      	b.n	800c13a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	f107 0208 	add.w	r2, r7, #8
 800bf44:	4610      	mov	r0, r2
 800bf46:	4798      	blx	r3
 800bf48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	2202      	movs	r2, #2
 800bf50:	701a      	strb	r2, [r3, #0]
      break;
 800bf52:	e0f2      	b.n	800c13a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	885b      	ldrh	r3, [r3, #2]
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b05      	cmp	r3, #5
 800bf5c:	f200 80ac 	bhi.w	800c0b8 <USBD_GetDescriptor+0x258>
 800bf60:	a201      	add	r2, pc, #4	; (adr r2, 800bf68 <USBD_GetDescriptor+0x108>)
 800bf62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf66:	bf00      	nop
 800bf68:	0800bf81 	.word	0x0800bf81
 800bf6c:	0800bfb5 	.word	0x0800bfb5
 800bf70:	0800bfe9 	.word	0x0800bfe9
 800bf74:	0800c01d 	.word	0x0800c01d
 800bf78:	0800c051 	.word	0x0800c051
 800bf7c:	0800c085 	.word	0x0800c085
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf86:	685b      	ldr	r3, [r3, #4]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00b      	beq.n	800bfa4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	7c12      	ldrb	r2, [r2, #16]
 800bf98:	f107 0108 	add.w	r1, r7, #8
 800bf9c:	4610      	mov	r0, r2
 800bf9e:	4798      	blx	r3
 800bfa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfa2:	e091      	b.n	800c0c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfa4:	6839      	ldr	r1, [r7, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fab2 	bl	800c510 <USBD_CtlError>
            err++;
 800bfac:	7afb      	ldrb	r3, [r7, #11]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	72fb      	strb	r3, [r7, #11]
          break;
 800bfb2:	e089      	b.n	800c0c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00b      	beq.n	800bfd8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc6:	689b      	ldr	r3, [r3, #8]
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	7c12      	ldrb	r2, [r2, #16]
 800bfcc:	f107 0108 	add.w	r1, r7, #8
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	4798      	blx	r3
 800bfd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfd6:	e077      	b.n	800c0c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fa98 	bl	800c510 <USBD_CtlError>
            err++;
 800bfe0:	7afb      	ldrb	r3, [r7, #11]
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfe6:	e06f      	b.n	800c0c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d00b      	beq.n	800c00c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	7c12      	ldrb	r2, [r2, #16]
 800c000:	f107 0108 	add.w	r1, r7, #8
 800c004:	4610      	mov	r0, r2
 800c006:	4798      	blx	r3
 800c008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c00a:	e05d      	b.n	800c0c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fa7e 	bl	800c510 <USBD_CtlError>
            err++;
 800c014:	7afb      	ldrb	r3, [r7, #11]
 800c016:	3301      	adds	r3, #1
 800c018:	72fb      	strb	r3, [r7, #11]
          break;
 800c01a:	e055      	b.n	800c0c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c022:	691b      	ldr	r3, [r3, #16]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d00b      	beq.n	800c040 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c02e:	691b      	ldr	r3, [r3, #16]
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	7c12      	ldrb	r2, [r2, #16]
 800c034:	f107 0108 	add.w	r1, r7, #8
 800c038:	4610      	mov	r0, r2
 800c03a:	4798      	blx	r3
 800c03c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c03e:	e043      	b.n	800c0c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c040:	6839      	ldr	r1, [r7, #0]
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fa64 	bl	800c510 <USBD_CtlError>
            err++;
 800c048:	7afb      	ldrb	r3, [r7, #11]
 800c04a:	3301      	adds	r3, #1
 800c04c:	72fb      	strb	r3, [r7, #11]
          break;
 800c04e:	e03b      	b.n	800c0c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00b      	beq.n	800c074 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	7c12      	ldrb	r2, [r2, #16]
 800c068:	f107 0108 	add.w	r1, r7, #8
 800c06c:	4610      	mov	r0, r2
 800c06e:	4798      	blx	r3
 800c070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c072:	e029      	b.n	800c0c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c074:	6839      	ldr	r1, [r7, #0]
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa4a 	bl	800c510 <USBD_CtlError>
            err++;
 800c07c:	7afb      	ldrb	r3, [r7, #11]
 800c07e:	3301      	adds	r3, #1
 800c080:	72fb      	strb	r3, [r7, #11]
          break;
 800c082:	e021      	b.n	800c0c8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c08a:	699b      	ldr	r3, [r3, #24]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00b      	beq.n	800c0a8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	7c12      	ldrb	r2, [r2, #16]
 800c09c:	f107 0108 	add.w	r1, r7, #8
 800c0a0:	4610      	mov	r0, r2
 800c0a2:	4798      	blx	r3
 800c0a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0a6:	e00f      	b.n	800c0c8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0a8:	6839      	ldr	r1, [r7, #0]
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fa30 	bl	800c510 <USBD_CtlError>
            err++;
 800c0b0:	7afb      	ldrb	r3, [r7, #11]
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0b6:	e007      	b.n	800c0c8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c0b8:	6839      	ldr	r1, [r7, #0]
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f000 fa28 	bl	800c510 <USBD_CtlError>
          err++;
 800c0c0:	7afb      	ldrb	r3, [r7, #11]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c0c6:	bf00      	nop
      }
      break;
 800c0c8:	e037      	b.n	800c13a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	7c1b      	ldrb	r3, [r3, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d109      	bne.n	800c0e6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0da:	f107 0208 	add.w	r2, r7, #8
 800c0de:	4610      	mov	r0, r2
 800c0e0:	4798      	blx	r3
 800c0e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0e4:	e029      	b.n	800c13a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fa11 	bl	800c510 <USBD_CtlError>
        err++;
 800c0ee:	7afb      	ldrb	r3, [r7, #11]
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0f4:	e021      	b.n	800c13a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	7c1b      	ldrb	r3, [r3, #16]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10d      	bne.n	800c11a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c106:	f107 0208 	add.w	r2, r7, #8
 800c10a:	4610      	mov	r0, r2
 800c10c:	4798      	blx	r3
 800c10e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	3301      	adds	r3, #1
 800c114:	2207      	movs	r2, #7
 800c116:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c118:	e00f      	b.n	800c13a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f9f7 	bl	800c510 <USBD_CtlError>
        err++;
 800c122:	7afb      	ldrb	r3, [r7, #11]
 800c124:	3301      	adds	r3, #1
 800c126:	72fb      	strb	r3, [r7, #11]
      break;
 800c128:	e007      	b.n	800c13a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c12a:	6839      	ldr	r1, [r7, #0]
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 f9ef 	bl	800c510 <USBD_CtlError>
      err++;
 800c132:	7afb      	ldrb	r3, [r7, #11]
 800c134:	3301      	adds	r3, #1
 800c136:	72fb      	strb	r3, [r7, #11]
      break;
 800c138:	bf00      	nop
  }

  if (err != 0U)
 800c13a:	7afb      	ldrb	r3, [r7, #11]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d11e      	bne.n	800c17e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	88db      	ldrh	r3, [r3, #6]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d016      	beq.n	800c176 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c148:	893b      	ldrh	r3, [r7, #8]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d00e      	beq.n	800c16c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	88da      	ldrh	r2, [r3, #6]
 800c152:	893b      	ldrh	r3, [r7, #8]
 800c154:	4293      	cmp	r3, r2
 800c156:	bf28      	it	cs
 800c158:	4613      	movcs	r3, r2
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c15e:	893b      	ldrh	r3, [r7, #8]
 800c160:	461a      	mov	r2, r3
 800c162:	68f9      	ldr	r1, [r7, #12]
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 fa44 	bl	800c5f2 <USBD_CtlSendData>
 800c16a:	e009      	b.n	800c180 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f9ce 	bl	800c510 <USBD_CtlError>
 800c174:	e004      	b.n	800c180 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fa95 	bl	800c6a6 <USBD_CtlSendStatus>
 800c17c:	e000      	b.n	800c180 <USBD_GetDescriptor+0x320>
    return;
 800c17e:	bf00      	nop
  }
}
 800c180:	3710      	adds	r7, #16
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop

0800c188 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b084      	sub	sp, #16
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
 800c190:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	889b      	ldrh	r3, [r3, #4]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d131      	bne.n	800c1fe <USBD_SetAddress+0x76>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	88db      	ldrh	r3, [r3, #6]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d12d      	bne.n	800c1fe <USBD_SetAddress+0x76>
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	885b      	ldrh	r3, [r3, #2]
 800c1a6:	2b7f      	cmp	r3, #127	; 0x7f
 800c1a8:	d829      	bhi.n	800c1fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	885b      	ldrh	r3, [r3, #2]
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d104      	bne.n	800c1cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f9a3 	bl	800c510 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ca:	e01d      	b.n	800c208 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	7bfa      	ldrb	r2, [r7, #15]
 800c1d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 fe7b 	bl	800ced4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fa61 	bl	800c6a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2202      	movs	r2, #2
 800c1ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f2:	e009      	b.n	800c208 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1fc:	e004      	b.n	800c208 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 f985 	bl	800c510 <USBD_CtlError>
  }
}
 800c206:	bf00      	nop
 800c208:	bf00      	nop
 800c20a:	3710      	adds	r7, #16
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b084      	sub	sp, #16
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	885b      	ldrh	r3, [r3, #2]
 800c222:	b2da      	uxtb	r2, r3
 800c224:	4b4c      	ldr	r3, [pc, #304]	; (800c358 <USBD_SetConfig+0x148>)
 800c226:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c228:	4b4b      	ldr	r3, [pc, #300]	; (800c358 <USBD_SetConfig+0x148>)
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d905      	bls.n	800c23c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c230:	6839      	ldr	r1, [r7, #0]
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f96c 	bl	800c510 <USBD_CtlError>
    return USBD_FAIL;
 800c238:	2303      	movs	r3, #3
 800c23a:	e088      	b.n	800c34e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c242:	b2db      	uxtb	r3, r3
 800c244:	2b02      	cmp	r3, #2
 800c246:	d002      	beq.n	800c24e <USBD_SetConfig+0x3e>
 800c248:	2b03      	cmp	r3, #3
 800c24a:	d025      	beq.n	800c298 <USBD_SetConfig+0x88>
 800c24c:	e071      	b.n	800c332 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c24e:	4b42      	ldr	r3, [pc, #264]	; (800c358 <USBD_SetConfig+0x148>)
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d01c      	beq.n	800c290 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c256:	4b40      	ldr	r3, [pc, #256]	; (800c358 <USBD_SetConfig+0x148>)
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c260:	4b3d      	ldr	r3, [pc, #244]	; (800c358 <USBD_SetConfig+0x148>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7ff f992 	bl	800b590 <USBD_SetClassConfig>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c276:	6839      	ldr	r1, [r7, #0]
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f949 	bl	800c510 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c27e:	e065      	b.n	800c34c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f000 fa10 	bl	800c6a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2203      	movs	r2, #3
 800c28a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c28e:	e05d      	b.n	800c34c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 fa08 	bl	800c6a6 <USBD_CtlSendStatus>
      break;
 800c296:	e059      	b.n	800c34c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c298:	4b2f      	ldr	r3, [pc, #188]	; (800c358 <USBD_SetConfig+0x148>)
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d112      	bne.n	800c2c6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2202      	movs	r2, #2
 800c2a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c2a8:	4b2b      	ldr	r3, [pc, #172]	; (800c358 <USBD_SetConfig+0x148>)
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2b2:	4b29      	ldr	r3, [pc, #164]	; (800c358 <USBD_SetConfig+0x148>)
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff f985 	bl	800b5c8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f9f1 	bl	800c6a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2c4:	e042      	b.n	800c34c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c2c6:	4b24      	ldr	r3, [pc, #144]	; (800c358 <USBD_SetConfig+0x148>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	685b      	ldr	r3, [r3, #4]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d02a      	beq.n	800c32a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	4619      	mov	r1, r3
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff f973 	bl	800b5c8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c2e2:	4b1d      	ldr	r3, [pc, #116]	; (800c358 <USBD_SetConfig+0x148>)
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2ec:	4b1a      	ldr	r3, [pc, #104]	; (800c358 <USBD_SetConfig+0x148>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7ff f94c 	bl	800b590 <USBD_SetClassConfig>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c2fc:	7bfb      	ldrb	r3, [r7, #15]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00f      	beq.n	800c322 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c302:	6839      	ldr	r1, [r7, #0]
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f903 	bl	800c510 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	4619      	mov	r1, r3
 800c312:	6878      	ldr	r0, [r7, #4]
 800c314:	f7ff f958 	bl	800b5c8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2202      	movs	r2, #2
 800c31c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c320:	e014      	b.n	800c34c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f9bf 	bl	800c6a6 <USBD_CtlSendStatus>
      break;
 800c328:	e010      	b.n	800c34c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f9bb 	bl	800c6a6 <USBD_CtlSendStatus>
      break;
 800c330:	e00c      	b.n	800c34c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c332:	6839      	ldr	r1, [r7, #0]
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f8eb 	bl	800c510 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c33a:	4b07      	ldr	r3, [pc, #28]	; (800c358 <USBD_SetConfig+0x148>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff f941 	bl	800b5c8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c346:	2303      	movs	r3, #3
 800c348:	73fb      	strb	r3, [r7, #15]
      break;
 800c34a:	bf00      	nop
  }

  return ret;
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	20000408 	.word	0x20000408

0800c35c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	88db      	ldrh	r3, [r3, #6]
 800c36a:	2b01      	cmp	r3, #1
 800c36c:	d004      	beq.n	800c378 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 f8cd 	bl	800c510 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c376:	e023      	b.n	800c3c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	2b02      	cmp	r3, #2
 800c382:	dc02      	bgt.n	800c38a <USBD_GetConfig+0x2e>
 800c384:	2b00      	cmp	r3, #0
 800c386:	dc03      	bgt.n	800c390 <USBD_GetConfig+0x34>
 800c388:	e015      	b.n	800c3b6 <USBD_GetConfig+0x5a>
 800c38a:	2b03      	cmp	r3, #3
 800c38c:	d00b      	beq.n	800c3a6 <USBD_GetConfig+0x4a>
 800c38e:	e012      	b.n	800c3b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	3308      	adds	r3, #8
 800c39a:	2201      	movs	r2, #1
 800c39c:	4619      	mov	r1, r3
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f927 	bl	800c5f2 <USBD_CtlSendData>
        break;
 800c3a4:	e00c      	b.n	800c3c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	3304      	adds	r3, #4
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f91f 	bl	800c5f2 <USBD_CtlSendData>
        break;
 800c3b4:	e004      	b.n	800c3c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c3b6:	6839      	ldr	r1, [r7, #0]
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 f8a9 	bl	800c510 <USBD_CtlError>
        break;
 800c3be:	bf00      	nop
}
 800c3c0:	bf00      	nop
 800c3c2:	3708      	adds	r7, #8
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
 800c3d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d8:	b2db      	uxtb	r3, r3
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	2b02      	cmp	r3, #2
 800c3de:	d81e      	bhi.n	800c41e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	88db      	ldrh	r3, [r3, #6]
 800c3e4:	2b02      	cmp	r3, #2
 800c3e6:	d004      	beq.n	800c3f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f890 	bl	800c510 <USBD_CtlError>
        break;
 800c3f0:	e01a      	b.n	800c428 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2201      	movs	r2, #1
 800c3f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d005      	beq.n	800c40e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	f043 0202 	orr.w	r2, r3, #2
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	330c      	adds	r3, #12
 800c412:	2202      	movs	r2, #2
 800c414:	4619      	mov	r1, r3
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f8eb 	bl	800c5f2 <USBD_CtlSendData>
      break;
 800c41c:	e004      	b.n	800c428 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c41e:	6839      	ldr	r1, [r7, #0]
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f000 f875 	bl	800c510 <USBD_CtlError>
      break;
 800c426:	bf00      	nop
  }
}
 800c428:	bf00      	nop
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	885b      	ldrh	r3, [r3, #2]
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d106      	bne.n	800c450 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f92b 	bl	800c6a6 <USBD_CtlSendStatus>
  }
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b082      	sub	sp, #8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c468:	b2db      	uxtb	r3, r3
 800c46a:	3b01      	subs	r3, #1
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d80b      	bhi.n	800c488 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	885b      	ldrh	r3, [r3, #2]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d10c      	bne.n	800c492 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f910 	bl	800c6a6 <USBD_CtlSendStatus>
      }
      break;
 800c486:	e004      	b.n	800c492 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c488:	6839      	ldr	r1, [r7, #0]
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f000 f840 	bl	800c510 <USBD_CtlError>
      break;
 800c490:	e000      	b.n	800c494 <USBD_ClrFeature+0x3c>
      break;
 800c492:	bf00      	nop
  }
}
 800c494:	bf00      	nop
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	781a      	ldrb	r2, [r3, #0]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	781a      	ldrb	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7ff fa92 	bl	800b9f0 <SWAPBYTE>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3301      	adds	r3, #1
 800c4de:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7ff fa85 	bl	800b9f0 <SWAPBYTE>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f7ff fa78 	bl	800b9f0 <SWAPBYTE>
 800c500:	4603      	mov	r3, r0
 800c502:	461a      	mov	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	80da      	strh	r2, [r3, #6]
}
 800c508:	bf00      	nop
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c51a:	2180      	movs	r1, #128	; 0x80
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fc6f 	bl	800ce00 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c522:	2100      	movs	r1, #0
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 fc6b 	bl	800ce00 <USBD_LL_StallEP>
}
 800c52a:	bf00      	nop
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b086      	sub	sp, #24
 800c536:	af00      	add	r7, sp, #0
 800c538:	60f8      	str	r0, [r7, #12]
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c53e:	2300      	movs	r3, #0
 800c540:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d036      	beq.n	800c5b6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c54c:	6938      	ldr	r0, [r7, #16]
 800c54e:	f000 f836 	bl	800c5be <USBD_GetLen>
 800c552:	4603      	mov	r3, r0
 800c554:	3301      	adds	r3, #1
 800c556:	b29b      	uxth	r3, r3
 800c558:	005b      	lsls	r3, r3, #1
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c560:	7dfb      	ldrb	r3, [r7, #23]
 800c562:	68ba      	ldr	r2, [r7, #8]
 800c564:	4413      	add	r3, r2
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	7812      	ldrb	r2, [r2, #0]
 800c56a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c56c:	7dfb      	ldrb	r3, [r7, #23]
 800c56e:	3301      	adds	r3, #1
 800c570:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c572:	7dfb      	ldrb	r3, [r7, #23]
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	4413      	add	r3, r2
 800c578:	2203      	movs	r2, #3
 800c57a:	701a      	strb	r2, [r3, #0]
  idx++;
 800c57c:	7dfb      	ldrb	r3, [r7, #23]
 800c57e:	3301      	adds	r3, #1
 800c580:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c582:	e013      	b.n	800c5ac <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c584:	7dfb      	ldrb	r3, [r7, #23]
 800c586:	68ba      	ldr	r2, [r7, #8]
 800c588:	4413      	add	r3, r2
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	7812      	ldrb	r2, [r2, #0]
 800c58e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	3301      	adds	r3, #1
 800c594:	613b      	str	r3, [r7, #16]
    idx++;
 800c596:	7dfb      	ldrb	r3, [r7, #23]
 800c598:	3301      	adds	r3, #1
 800c59a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5a6:	7dfb      	ldrb	r3, [r7, #23]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	781b      	ldrb	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d1e7      	bne.n	800c584 <USBD_GetString+0x52>
 800c5b4:	e000      	b.n	800c5b8 <USBD_GetString+0x86>
    return;
 800c5b6:	bf00      	nop
  }
}
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}

0800c5be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5be:	b480      	push	{r7}
 800c5c0:	b085      	sub	sp, #20
 800c5c2:	af00      	add	r7, sp, #0
 800c5c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c5ce:	e005      	b.n	800c5dc <USBD_GetLen+0x1e>
  {
    len++;
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
 800c5d2:	3301      	adds	r3, #1
 800c5d4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	781b      	ldrb	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d1f5      	bne.n	800c5d0 <USBD_GetLen+0x12>
  }

  return len;
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3714      	adds	r7, #20
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c5f2:	b580      	push	{r7, lr}
 800c5f4:	b084      	sub	sp, #16
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	60f8      	str	r0, [r7, #12]
 800c5fa:	60b9      	str	r1, [r7, #8]
 800c5fc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	2202      	movs	r2, #2
 800c602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	687a      	ldr	r2, [r7, #4]
 800c60a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	2100      	movs	r1, #0
 800c618:	68f8      	ldr	r0, [r7, #12]
 800c61a:	f000 fc7a 	bl	800cf12 <USBD_LL_Transmit>

  return USBD_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68ba      	ldr	r2, [r7, #8]
 800c638:	2100      	movs	r1, #0
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f000 fc69 	bl	800cf12 <USBD_LL_Transmit>

  return USBD_OK;
 800c640:	2300      	movs	r3, #0
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}

0800c64a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c64a:	b580      	push	{r7, lr}
 800c64c:	b084      	sub	sp, #16
 800c64e:	af00      	add	r7, sp, #0
 800c650:	60f8      	str	r0, [r7, #12]
 800c652:	60b9      	str	r1, [r7, #8]
 800c654:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2203      	movs	r2, #3
 800c65a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	687a      	ldr	r2, [r7, #4]
 800c662:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	2100      	movs	r1, #0
 800c674:	68f8      	ldr	r0, [r7, #12]
 800c676:	f000 fc6d 	bl	800cf54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	60f8      	str	r0, [r7, #12]
 800c68c:	60b9      	str	r1, [r7, #8]
 800c68e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	68ba      	ldr	r2, [r7, #8]
 800c694:	2100      	movs	r1, #0
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f000 fc5c 	bl	800cf54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3710      	adds	r7, #16
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}

0800c6a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6a6:	b580      	push	{r7, lr}
 800c6a8:	b082      	sub	sp, #8
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2204      	movs	r2, #4
 800c6b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	2100      	movs	r1, #0
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 fc28 	bl	800cf12 <USBD_LL_Transmit>

  return USBD_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2205      	movs	r2, #5
 800c6d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6dc:	2300      	movs	r3, #0
 800c6de:	2200      	movs	r2, #0
 800c6e0:	2100      	movs	r1, #0
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fc36 	bl	800cf54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6e8:	2300      	movs	r3, #0
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
	...

0800c6f4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	4912      	ldr	r1, [pc, #72]	; (800c744 <MX_USB_Device_Init+0x50>)
 800c6fc:	4812      	ldr	r0, [pc, #72]	; (800c748 <MX_USB_Device_Init+0x54>)
 800c6fe:	f7fe fed9 	bl	800b4b4 <USBD_Init>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c708:	f7f4 fffb 	bl	8001702 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c70c:	490f      	ldr	r1, [pc, #60]	; (800c74c <MX_USB_Device_Init+0x58>)
 800c70e:	480e      	ldr	r0, [pc, #56]	; (800c748 <MX_USB_Device_Init+0x54>)
 800c710:	f7fe ff00 	bl	800b514 <USBD_RegisterClass>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c71a:	f7f4 fff2 	bl	8001702 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c71e:	490c      	ldr	r1, [pc, #48]	; (800c750 <MX_USB_Device_Init+0x5c>)
 800c720:	4809      	ldr	r0, [pc, #36]	; (800c748 <MX_USB_Device_Init+0x54>)
 800c722:	f7fe fe51 	bl	800b3c8 <USBD_CDC_RegisterInterface>
 800c726:	4603      	mov	r3, r0
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d001      	beq.n	800c730 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c72c:	f7f4 ffe9 	bl	8001702 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c730:	4805      	ldr	r0, [pc, #20]	; (800c748 <MX_USB_Device_Init+0x54>)
 800c732:	f7fe ff16 	bl	800b562 <USBD_Start>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c73c:	f7f4 ffe1 	bl	8001702 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c740:	bf00      	nop
 800c742:	bd80      	pop	{r7, pc}
 800c744:	20000130 	.word	0x20000130
 800c748:	2000040c 	.word	0x2000040c
 800c74c:	20000018 	.word	0x20000018
 800c750:	2000011c 	.word	0x2000011c

0800c754 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c758:	2200      	movs	r2, #0
 800c75a:	4905      	ldr	r1, [pc, #20]	; (800c770 <CDC_Init_FS+0x1c>)
 800c75c:	4805      	ldr	r0, [pc, #20]	; (800c774 <CDC_Init_FS+0x20>)
 800c75e:	f7fe fe48 	bl	800b3f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c762:	4905      	ldr	r1, [pc, #20]	; (800c778 <CDC_Init_FS+0x24>)
 800c764:	4803      	ldr	r0, [pc, #12]	; (800c774 <CDC_Init_FS+0x20>)
 800c766:	f7fe fe62 	bl	800b42e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c76a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	20000adc 	.word	0x20000adc
 800c774:	2000040c 	.word	0x2000040c
 800c778:	200006dc 	.word	0x200006dc

0800c77c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c77c:	b480      	push	{r7}
 800c77e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c780:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c782:	4618      	mov	r0, r3
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	4603      	mov	r3, r0
 800c794:	6039      	str	r1, [r7, #0]
 800c796:	71fb      	strb	r3, [r7, #7]
 800c798:	4613      	mov	r3, r2
 800c79a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	2b23      	cmp	r3, #35	; 0x23
 800c7a0:	d84a      	bhi.n	800c838 <CDC_Control_FS+0xac>
 800c7a2:	a201      	add	r2, pc, #4	; (adr r2, 800c7a8 <CDC_Control_FS+0x1c>)
 800c7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a8:	0800c839 	.word	0x0800c839
 800c7ac:	0800c839 	.word	0x0800c839
 800c7b0:	0800c839 	.word	0x0800c839
 800c7b4:	0800c839 	.word	0x0800c839
 800c7b8:	0800c839 	.word	0x0800c839
 800c7bc:	0800c839 	.word	0x0800c839
 800c7c0:	0800c839 	.word	0x0800c839
 800c7c4:	0800c839 	.word	0x0800c839
 800c7c8:	0800c839 	.word	0x0800c839
 800c7cc:	0800c839 	.word	0x0800c839
 800c7d0:	0800c839 	.word	0x0800c839
 800c7d4:	0800c839 	.word	0x0800c839
 800c7d8:	0800c839 	.word	0x0800c839
 800c7dc:	0800c839 	.word	0x0800c839
 800c7e0:	0800c839 	.word	0x0800c839
 800c7e4:	0800c839 	.word	0x0800c839
 800c7e8:	0800c839 	.word	0x0800c839
 800c7ec:	0800c839 	.word	0x0800c839
 800c7f0:	0800c839 	.word	0x0800c839
 800c7f4:	0800c839 	.word	0x0800c839
 800c7f8:	0800c839 	.word	0x0800c839
 800c7fc:	0800c839 	.word	0x0800c839
 800c800:	0800c839 	.word	0x0800c839
 800c804:	0800c839 	.word	0x0800c839
 800c808:	0800c839 	.word	0x0800c839
 800c80c:	0800c839 	.word	0x0800c839
 800c810:	0800c839 	.word	0x0800c839
 800c814:	0800c839 	.word	0x0800c839
 800c818:	0800c839 	.word	0x0800c839
 800c81c:	0800c839 	.word	0x0800c839
 800c820:	0800c839 	.word	0x0800c839
 800c824:	0800c839 	.word	0x0800c839
 800c828:	0800c839 	.word	0x0800c839
 800c82c:	0800c839 	.word	0x0800c839
 800c830:	0800c839 	.word	0x0800c839
 800c834:	0800c839 	.word	0x0800c839
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c838:	bf00      	nop
  }

  return (USBD_OK);
 800c83a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c852:	6879      	ldr	r1, [r7, #4]
 800c854:	4805      	ldr	r0, [pc, #20]	; (800c86c <CDC_Receive_FS+0x24>)
 800c856:	f7fe fdea 	bl	800b42e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c85a:	4804      	ldr	r0, [pc, #16]	; (800c86c <CDC_Receive_FS+0x24>)
 800c85c:	f7fe fe00 	bl	800b460 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c860:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	2000040c 	.word	0x2000040c

0800c870 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c870:	b480      	push	{r7}
 800c872:	b087      	sub	sp, #28
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	4613      	mov	r3, r2
 800c87c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c886:	4618      	mov	r0, r3
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr
	...

0800c894 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c894:	b480      	push	{r7}
 800c896:	b083      	sub	sp, #12
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	6039      	str	r1, [r7, #0]
 800c89e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2212      	movs	r2, #18
 800c8a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c8a6:	4b03      	ldr	r3, [pc, #12]	; (800c8b4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	370c      	adds	r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr
 800c8b4:	20000150 	.word	0x20000150

0800c8b8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b083      	sub	sp, #12
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	4603      	mov	r3, r0
 800c8c0:	6039      	str	r1, [r7, #0]
 800c8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2204      	movs	r2, #4
 800c8c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8ca:	4b03      	ldr	r3, [pc, #12]	; (800c8d8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	370c      	adds	r7, #12
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d6:	4770      	bx	lr
 800c8d8:	20000164 	.word	0x20000164

0800c8dc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	6039      	str	r1, [r7, #0]
 800c8e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d105      	bne.n	800c8fa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c8ee:	683a      	ldr	r2, [r7, #0]
 800c8f0:	4907      	ldr	r1, [pc, #28]	; (800c910 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c8f2:	4808      	ldr	r0, [pc, #32]	; (800c914 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c8f4:	f7ff fe1d 	bl	800c532 <USBD_GetString>
 800c8f8:	e004      	b.n	800c904 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c8fa:	683a      	ldr	r2, [r7, #0]
 800c8fc:	4904      	ldr	r1, [pc, #16]	; (800c910 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c8fe:	4805      	ldr	r0, [pc, #20]	; (800c914 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c900:	f7ff fe17 	bl	800c532 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c904:	4b02      	ldr	r3, [pc, #8]	; (800c910 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20000edc 	.word	0x20000edc
 800c914:	0800d12c 	.word	0x0800d12c

0800c918 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b082      	sub	sp, #8
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	4603      	mov	r3, r0
 800c920:	6039      	str	r1, [r7, #0]
 800c922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c924:	683a      	ldr	r2, [r7, #0]
 800c926:	4904      	ldr	r1, [pc, #16]	; (800c938 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c928:	4804      	ldr	r0, [pc, #16]	; (800c93c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c92a:	f7ff fe02 	bl	800c532 <USBD_GetString>
  return USBD_StrDesc;
 800c92e:	4b02      	ldr	r3, [pc, #8]	; (800c938 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}
 800c938:	20000edc 	.word	0x20000edc
 800c93c:	0800d144 	.word	0x0800d144

0800c940 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	4603      	mov	r3, r0
 800c948:	6039      	str	r1, [r7, #0]
 800c94a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	221a      	movs	r2, #26
 800c950:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c952:	f000 f843 	bl	800c9dc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c956:	4b02      	ldr	r3, [pc, #8]	; (800c960 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3708      	adds	r7, #8
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	20000168 	.word	0x20000168

0800c964 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c964:	b580      	push	{r7, lr}
 800c966:	b082      	sub	sp, #8
 800c968:	af00      	add	r7, sp, #0
 800c96a:	4603      	mov	r3, r0
 800c96c:	6039      	str	r1, [r7, #0]
 800c96e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d105      	bne.n	800c982 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c976:	683a      	ldr	r2, [r7, #0]
 800c978:	4907      	ldr	r1, [pc, #28]	; (800c998 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c97a:	4808      	ldr	r0, [pc, #32]	; (800c99c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c97c:	f7ff fdd9 	bl	800c532 <USBD_GetString>
 800c980:	e004      	b.n	800c98c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	4904      	ldr	r1, [pc, #16]	; (800c998 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c986:	4805      	ldr	r0, [pc, #20]	; (800c99c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c988:	f7ff fdd3 	bl	800c532 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c98c:	4b02      	ldr	r3, [pc, #8]	; (800c998 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	20000edc 	.word	0x20000edc
 800c99c:	0800d158 	.word	0x0800d158

0800c9a0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	6039      	str	r1, [r7, #0]
 800c9aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c9ac:	79fb      	ldrb	r3, [r7, #7]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d105      	bne.n	800c9be <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c9b2:	683a      	ldr	r2, [r7, #0]
 800c9b4:	4907      	ldr	r1, [pc, #28]	; (800c9d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c9b6:	4808      	ldr	r0, [pc, #32]	; (800c9d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c9b8:	f7ff fdbb 	bl	800c532 <USBD_GetString>
 800c9bc:	e004      	b.n	800c9c8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c9be:	683a      	ldr	r2, [r7, #0]
 800c9c0:	4904      	ldr	r1, [pc, #16]	; (800c9d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c9c2:	4805      	ldr	r0, [pc, #20]	; (800c9d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c9c4:	f7ff fdb5 	bl	800c532 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9c8:	4b02      	ldr	r3, [pc, #8]	; (800c9d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	20000edc 	.word	0x20000edc
 800c9d8:	0800d164 	.word	0x0800d164

0800c9dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ca20 <Get_SerialNum+0x44>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9e8:	4b0e      	ldr	r3, [pc, #56]	; (800ca24 <Get_SerialNum+0x48>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ca28 <Get_SerialNum+0x4c>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d009      	beq.n	800ca16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ca02:	2208      	movs	r2, #8
 800ca04:	4909      	ldr	r1, [pc, #36]	; (800ca2c <Get_SerialNum+0x50>)
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f000 f814 	bl	800ca34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ca0c:	2204      	movs	r2, #4
 800ca0e:	4908      	ldr	r1, [pc, #32]	; (800ca30 <Get_SerialNum+0x54>)
 800ca10:	68b8      	ldr	r0, [r7, #8]
 800ca12:	f000 f80f 	bl	800ca34 <IntToUnicode>
  }
}
 800ca16:	bf00      	nop
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
 800ca1e:	bf00      	nop
 800ca20:	1fff7590 	.word	0x1fff7590
 800ca24:	1fff7594 	.word	0x1fff7594
 800ca28:	1fff7598 	.word	0x1fff7598
 800ca2c:	2000016a 	.word	0x2000016a
 800ca30:	2000017a 	.word	0x2000017a

0800ca34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b087      	sub	sp, #28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca46:	2300      	movs	r3, #0
 800ca48:	75fb      	strb	r3, [r7, #23]
 800ca4a:	e027      	b.n	800ca9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	0f1b      	lsrs	r3, r3, #28
 800ca50:	2b09      	cmp	r3, #9
 800ca52:	d80b      	bhi.n	800ca6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	0f1b      	lsrs	r3, r3, #28
 800ca58:	b2da      	uxtb	r2, r3
 800ca5a:	7dfb      	ldrb	r3, [r7, #23]
 800ca5c:	005b      	lsls	r3, r3, #1
 800ca5e:	4619      	mov	r1, r3
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	440b      	add	r3, r1
 800ca64:	3230      	adds	r2, #48	; 0x30
 800ca66:	b2d2      	uxtb	r2, r2
 800ca68:	701a      	strb	r2, [r3, #0]
 800ca6a:	e00a      	b.n	800ca82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	0f1b      	lsrs	r3, r3, #28
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	7dfb      	ldrb	r3, [r7, #23]
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	4619      	mov	r1, r3
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	440b      	add	r3, r1
 800ca7c:	3237      	adds	r2, #55	; 0x37
 800ca7e:	b2d2      	uxtb	r2, r2
 800ca80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	011b      	lsls	r3, r3, #4
 800ca86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	005b      	lsls	r3, r3, #1
 800ca8c:	3301      	adds	r3, #1
 800ca8e:	68ba      	ldr	r2, [r7, #8]
 800ca90:	4413      	add	r3, r2
 800ca92:	2200      	movs	r2, #0
 800ca94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	75fb      	strb	r3, [r7, #23]
 800ca9c:	7dfa      	ldrb	r2, [r7, #23]
 800ca9e:	79fb      	ldrb	r3, [r7, #7]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d3d3      	bcc.n	800ca4c <IntToUnicode+0x18>
  }
}
 800caa4:	bf00      	nop
 800caa6:	bf00      	nop
 800caa8:	371c      	adds	r7, #28
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
	...

0800cab4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b094      	sub	sp, #80	; 0x50
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cabc:	f107 030c 	add.w	r3, r7, #12
 800cac0:	2244      	movs	r2, #68	; 0x44
 800cac2:	2100      	movs	r1, #0
 800cac4:	4618      	mov	r0, r3
 800cac6:	f000 faf9 	bl	800d0bc <memset>
  if(pcdHandle->Instance==USB)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a15      	ldr	r2, [pc, #84]	; (800cb24 <HAL_PCD_MspInit+0x70>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d123      	bne.n	800cb1c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cad8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cada:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cade:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cae0:	f107 030c 	add.w	r3, r7, #12
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fa f9c3 	bl	8006e70 <HAL_RCCEx_PeriphCLKConfig>
 800caea:	4603      	mov	r3, r0
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800caf0:	f7f4 fe07 	bl	8001702 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800caf4:	4b0c      	ldr	r3, [pc, #48]	; (800cb28 <HAL_PCD_MspInit+0x74>)
 800caf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf8:	4a0b      	ldr	r2, [pc, #44]	; (800cb28 <HAL_PCD_MspInit+0x74>)
 800cafa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cafe:	6593      	str	r3, [r2, #88]	; 0x58
 800cb00:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <HAL_PCD_MspInit+0x74>)
 800cb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb08:	60bb      	str	r3, [r7, #8]
 800cb0a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	2100      	movs	r1, #0
 800cb10:	2014      	movs	r0, #20
 800cb12:	f7f6 fc5a 	bl	80033ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cb16:	2014      	movs	r0, #20
 800cb18:	f7f6 fc71 	bl	80033fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cb1c:	bf00      	nop
 800cb1e:	3750      	adds	r7, #80	; 0x50
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}
 800cb24:	40005c00 	.word	0x40005c00
 800cb28:	40021000 	.word	0x40021000

0800cb2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800cb40:	4619      	mov	r1, r3
 800cb42:	4610      	mov	r0, r2
 800cb44:	f7fe fd58 	bl	800b5f8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cb48:	bf00      	nop
 800cb4a:	3708      	adds	r7, #8
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	460b      	mov	r3, r1
 800cb5a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800cb62:	78fa      	ldrb	r2, [r7, #3]
 800cb64:	6879      	ldr	r1, [r7, #4]
 800cb66:	4613      	mov	r3, r2
 800cb68:	009b      	lsls	r3, r3, #2
 800cb6a:	4413      	add	r3, r2
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	440b      	add	r3, r1
 800cb70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	78fb      	ldrb	r3, [r7, #3]
 800cb78:	4619      	mov	r1, r3
 800cb7a:	f7fe fd92 	bl	800b6a2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cb7e:	bf00      	nop
 800cb80:	3708      	adds	r7, #8
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}

0800cb86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb86:	b580      	push	{r7, lr}
 800cb88:	b082      	sub	sp, #8
 800cb8a:	af00      	add	r7, sp, #0
 800cb8c:	6078      	str	r0, [r7, #4]
 800cb8e:	460b      	mov	r3, r1
 800cb90:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800cb98:	78fa      	ldrb	r2, [r7, #3]
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	009b      	lsls	r3, r3, #2
 800cba0:	4413      	add	r3, r2
 800cba2:	00db      	lsls	r3, r3, #3
 800cba4:	440b      	add	r3, r1
 800cba6:	3324      	adds	r3, #36	; 0x24
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	78fb      	ldrb	r3, [r7, #3]
 800cbac:	4619      	mov	r1, r3
 800cbae:	f7fe fddb 	bl	800b768 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cbb2:	bf00      	nop
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b082      	sub	sp, #8
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7fe feef 	bl	800b9ac <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cbce:	bf00      	nop
 800cbd0:	3708      	adds	r7, #8
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}

0800cbd6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbd6:	b580      	push	{r7, lr}
 800cbd8:	b084      	sub	sp, #16
 800cbda:	af00      	add	r7, sp, #0
 800cbdc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	795b      	ldrb	r3, [r3, #5]
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d001      	beq.n	800cbee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cbea:	f7f4 fd8a 	bl	8001702 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cbf4:	7bfa      	ldrb	r2, [r7, #15]
 800cbf6:	4611      	mov	r1, r2
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fe fe99 	bl	800b930 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fe fe45 	bl	800b894 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cc0a:	bf00      	nop
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fe94 	bl	800b950 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	7a5b      	ldrb	r3, [r3, #9]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d005      	beq.n	800cc3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc30:	4b04      	ldr	r3, [pc, #16]	; (800cc44 <HAL_PCD_SuspendCallback+0x30>)
 800cc32:	691b      	ldr	r3, [r3, #16]
 800cc34:	4a03      	ldr	r2, [pc, #12]	; (800cc44 <HAL_PCD_SuspendCallback+0x30>)
 800cc36:	f043 0306 	orr.w	r3, r3, #6
 800cc3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cc3c:	bf00      	nop
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	e000ed00 	.word	0xe000ed00

0800cc48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b082      	sub	sp, #8
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	7a5b      	ldrb	r3, [r3, #9]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d007      	beq.n	800cc68 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc58:	4b08      	ldr	r3, [pc, #32]	; (800cc7c <HAL_PCD_ResumeCallback+0x34>)
 800cc5a:	691b      	ldr	r3, [r3, #16]
 800cc5c:	4a07      	ldr	r2, [pc, #28]	; (800cc7c <HAL_PCD_ResumeCallback+0x34>)
 800cc5e:	f023 0306 	bic.w	r3, r3, #6
 800cc62:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cc64:	f000 f9f8 	bl	800d058 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7fe fe84 	bl	800b97c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cc74:	bf00      	nop
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	e000ed00 	.word	0xe000ed00

0800cc80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cc88:	4a2b      	ldr	r2, [pc, #172]	; (800cd38 <USBD_LL_Init+0xb8>)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a29      	ldr	r2, [pc, #164]	; (800cd38 <USBD_LL_Init+0xb8>)
 800cc94:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cc98:	4b27      	ldr	r3, [pc, #156]	; (800cd38 <USBD_LL_Init+0xb8>)
 800cc9a:	4a28      	ldr	r2, [pc, #160]	; (800cd3c <USBD_LL_Init+0xbc>)
 800cc9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc9e:	4b26      	ldr	r3, [pc, #152]	; (800cd38 <USBD_LL_Init+0xb8>)
 800cca0:	2208      	movs	r2, #8
 800cca2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cca4:	4b24      	ldr	r3, [pc, #144]	; (800cd38 <USBD_LL_Init+0xb8>)
 800cca6:	2202      	movs	r2, #2
 800cca8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ccaa:	4b23      	ldr	r3, [pc, #140]	; (800cd38 <USBD_LL_Init+0xb8>)
 800ccac:	2202      	movs	r2, #2
 800ccae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800ccb0:	4b21      	ldr	r3, [pc, #132]	; (800cd38 <USBD_LL_Init+0xb8>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ccb6:	4b20      	ldr	r3, [pc, #128]	; (800cd38 <USBD_LL_Init+0xb8>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ccbc:	4b1e      	ldr	r3, [pc, #120]	; (800cd38 <USBD_LL_Init+0xb8>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ccc2:	4b1d      	ldr	r3, [pc, #116]	; (800cd38 <USBD_LL_Init+0xb8>)
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ccc8:	481b      	ldr	r0, [pc, #108]	; (800cd38 <USBD_LL_Init+0xb8>)
 800ccca:	f7f7 fdc8 	bl	800485e <HAL_PCD_Init>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d001      	beq.n	800ccd8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ccd4:	f7f4 fd15 	bl	8001702 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ccde:	2318      	movs	r3, #24
 800cce0:	2200      	movs	r2, #0
 800cce2:	2100      	movs	r1, #0
 800cce4:	f7f9 fa84 	bl	80061f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ccee:	2358      	movs	r3, #88	; 0x58
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2180      	movs	r1, #128	; 0x80
 800ccf4:	f7f9 fa7c 	bl	80061f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ccfe:	23c0      	movs	r3, #192	; 0xc0
 800cd00:	2200      	movs	r2, #0
 800cd02:	2181      	movs	r1, #129	; 0x81
 800cd04:	f7f9 fa74 	bl	80061f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cd12:	2200      	movs	r2, #0
 800cd14:	2101      	movs	r1, #1
 800cd16:	f7f9 fa6b 	bl	80061f0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd24:	2200      	movs	r2, #0
 800cd26:	2182      	movs	r1, #130	; 0x82
 800cd28:	f7f9 fa62 	bl	80061f0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3708      	adds	r7, #8
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	200010dc 	.word	0x200010dc
 800cd3c:	40005c00 	.word	0x40005c00

0800cd40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7f7 fe4f 	bl	80049fa <HAL_PCD_Start>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f000 f97e 	bl	800d064 <USBD_Get_USB_Status>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}

0800cd76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b084      	sub	sp, #16
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
 800cd7e:	4608      	mov	r0, r1
 800cd80:	4611      	mov	r1, r2
 800cd82:	461a      	mov	r2, r3
 800cd84:	4603      	mov	r3, r0
 800cd86:	70fb      	strb	r3, [r7, #3]
 800cd88:	460b      	mov	r3, r1
 800cd8a:	70bb      	strb	r3, [r7, #2]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd90:	2300      	movs	r3, #0
 800cd92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd94:	2300      	movs	r3, #0
 800cd96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cd9e:	78bb      	ldrb	r3, [r7, #2]
 800cda0:	883a      	ldrh	r2, [r7, #0]
 800cda2:	78f9      	ldrb	r1, [r7, #3]
 800cda4:	f7f7 ff96 	bl	8004cd4 <HAL_PCD_EP_Open>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdac:	7bfb      	ldrb	r3, [r7, #15]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f000 f958 	bl	800d064 <USBD_Get_USB_Status>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}

0800cdc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdc2:	b580      	push	{r7, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	af00      	add	r7, sp, #0
 800cdc8:	6078      	str	r0, [r7, #4]
 800cdca:	460b      	mov	r3, r1
 800cdcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cddc:	78fa      	ldrb	r2, [r7, #3]
 800cdde:	4611      	mov	r1, r2
 800cde0:	4618      	mov	r0, r3
 800cde2:	f7f7 ffd6 	bl	8004d92 <HAL_PCD_EP_Close>
 800cde6:	4603      	mov	r3, r0
 800cde8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdea:	7bfb      	ldrb	r3, [r7, #15]
 800cdec:	4618      	mov	r0, r3
 800cdee:	f000 f939 	bl	800d064 <USBD_Get_USB_Status>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdf6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce1a:	78fa      	ldrb	r2, [r7, #3]
 800ce1c:	4611      	mov	r1, r2
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7f8 f87f 	bl	8004f22 <HAL_PCD_EP_SetStall>
 800ce24:	4603      	mov	r3, r0
 800ce26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce28:	7bfb      	ldrb	r3, [r7, #15]
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	f000 f91a 	bl	800d064 <USBD_Get_USB_Status>
 800ce30:	4603      	mov	r3, r0
 800ce32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce34:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3710      	adds	r7, #16
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b084      	sub	sp, #16
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
 800ce46:	460b      	mov	r3, r1
 800ce48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce58:	78fa      	ldrb	r2, [r7, #3]
 800ce5a:	4611      	mov	r1, r2
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7f8 f8b2 	bl	8004fc6 <HAL_PCD_EP_ClrStall>
 800ce62:	4603      	mov	r3, r0
 800ce64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 f8fb 	bl	800d064 <USBD_Get_USB_Status>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	da0b      	bge.n	800ceb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce98:	78fb      	ldrb	r3, [r7, #3]
 800ce9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce9e:	68f9      	ldr	r1, [r7, #12]
 800cea0:	4613      	mov	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	00db      	lsls	r3, r3, #3
 800cea8:	440b      	add	r3, r1
 800ceaa:	3312      	adds	r3, #18
 800ceac:	781b      	ldrb	r3, [r3, #0]
 800ceae:	e00b      	b.n	800cec8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ceb0:	78fb      	ldrb	r3, [r7, #3]
 800ceb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ceb6:	68f9      	ldr	r1, [r7, #12]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	00db      	lsls	r3, r3, #3
 800cec0:	440b      	add	r3, r1
 800cec2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800cec6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3714      	adds	r7, #20
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr

0800ced4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	460b      	mov	r3, r1
 800cede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ceee:	78fa      	ldrb	r2, [r7, #3]
 800cef0:	4611      	mov	r1, r2
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7f7 feca 	bl	8004c8c <HAL_PCD_SetAddress>
 800cef8:	4603      	mov	r3, r0
 800cefa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 f8b0 	bl	800d064 <USBD_Get_USB_Status>
 800cf04:	4603      	mov	r3, r0
 800cf06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3710      	adds	r7, #16
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}

0800cf12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf12:	b580      	push	{r7, lr}
 800cf14:	b086      	sub	sp, #24
 800cf16:	af00      	add	r7, sp, #0
 800cf18:	60f8      	str	r0, [r7, #12]
 800cf1a:	607a      	str	r2, [r7, #4]
 800cf1c:	603b      	str	r3, [r7, #0]
 800cf1e:	460b      	mov	r3, r1
 800cf20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf22:	2300      	movs	r3, #0
 800cf24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf26:	2300      	movs	r3, #0
 800cf28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cf30:	7af9      	ldrb	r1, [r7, #11]
 800cf32:	683b      	ldr	r3, [r7, #0]
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	f7f7 ffbd 	bl	8004eb4 <HAL_PCD_EP_Transmit>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
 800cf40:	4618      	mov	r0, r3
 800cf42:	f000 f88f 	bl	800d064 <USBD_Get_USB_Status>
 800cf46:	4603      	mov	r3, r0
 800cf48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3718      	adds	r7, #24
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}

0800cf54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b086      	sub	sp, #24
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	60f8      	str	r0, [r7, #12]
 800cf5c:	607a      	str	r2, [r7, #4]
 800cf5e:	603b      	str	r3, [r7, #0]
 800cf60:	460b      	mov	r3, r1
 800cf62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf64:	2300      	movs	r3, #0
 800cf66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cf72:	7af9      	ldrb	r1, [r7, #11]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	687a      	ldr	r2, [r7, #4]
 800cf78:	f7f7 ff53 	bl	8004e22 <HAL_PCD_EP_Receive>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
 800cf82:	4618      	mov	r0, r3
 800cf84:	f000 f86e 	bl	800d064 <USBD_Get_USB_Status>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf96:	b580      	push	{r7, lr}
 800cf98:	b082      	sub	sp, #8
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
 800cf9e:	460b      	mov	r3, r1
 800cfa0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cfa8:	78fa      	ldrb	r2, [r7, #3]
 800cfaa:	4611      	mov	r1, r2
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7f7 ff69 	bl	8004e84 <HAL_PCD_EP_GetRxCount>
 800cfb2:	4603      	mov	r3, r0
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3708      	adds	r7, #8
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}

0800cfbc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cfc8:	78fb      	ldrb	r3, [r7, #3]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d002      	beq.n	800cfd4 <HAL_PCDEx_LPM_Callback+0x18>
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d013      	beq.n	800cffa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cfd2:	e023      	b.n	800d01c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	7a5b      	ldrb	r3, [r3, #9]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d007      	beq.n	800cfec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cfdc:	f000 f83c 	bl	800d058 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfe0:	4b10      	ldr	r3, [pc, #64]	; (800d024 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	4a0f      	ldr	r2, [pc, #60]	; (800d024 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfe6:	f023 0306 	bic.w	r3, r3, #6
 800cfea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fe fcc2 	bl	800b97c <USBD_LL_Resume>
    break;
 800cff8:	e010      	b.n	800d01c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe fca5 	bl	800b950 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	7a5b      	ldrb	r3, [r3, #9]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d005      	beq.n	800d01a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d00e:	4b05      	ldr	r3, [pc, #20]	; (800d024 <HAL_PCDEx_LPM_Callback+0x68>)
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	4a04      	ldr	r2, [pc, #16]	; (800d024 <HAL_PCDEx_LPM_Callback+0x68>)
 800d014:	f043 0306 	orr.w	r3, r3, #6
 800d018:	6113      	str	r3, [r2, #16]
    break;
 800d01a:	bf00      	nop
}
 800d01c:	bf00      	nop
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	e000ed00 	.word	0xe000ed00

0800d028 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d030:	4b03      	ldr	r3, [pc, #12]	; (800d040 <USBD_static_malloc+0x18>)
}
 800d032:	4618      	mov	r0, r3
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	200013b8 	.word	0x200013b8

0800d044 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]

}
 800d04c:	bf00      	nop
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d05c:	f7f4 fb02 	bl	8001664 <SystemClock_Config>
}
 800d060:	bf00      	nop
 800d062:	bd80      	pop	{r7, pc}

0800d064 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d064:	b480      	push	{r7}
 800d066:	b085      	sub	sp, #20
 800d068:	af00      	add	r7, sp, #0
 800d06a:	4603      	mov	r3, r0
 800d06c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	2b03      	cmp	r3, #3
 800d076:	d817      	bhi.n	800d0a8 <USBD_Get_USB_Status+0x44>
 800d078:	a201      	add	r2, pc, #4	; (adr r2, 800d080 <USBD_Get_USB_Status+0x1c>)
 800d07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d07e:	bf00      	nop
 800d080:	0800d091 	.word	0x0800d091
 800d084:	0800d097 	.word	0x0800d097
 800d088:	0800d09d 	.word	0x0800d09d
 800d08c:	0800d0a3 	.word	0x0800d0a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73fb      	strb	r3, [r7, #15]
    break;
 800d094:	e00b      	b.n	800d0ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d096:	2303      	movs	r3, #3
 800d098:	73fb      	strb	r3, [r7, #15]
    break;
 800d09a:	e008      	b.n	800d0ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d09c:	2301      	movs	r3, #1
 800d09e:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a0:	e005      	b.n	800d0ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0a2:	2303      	movs	r3, #3
 800d0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800d0a6:	e002      	b.n	800d0ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ac:	bf00      	nop
  }
  return usb_status;
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr

0800d0bc <memset>:
 800d0bc:	4402      	add	r2, r0
 800d0be:	4603      	mov	r3, r0
 800d0c0:	4293      	cmp	r3, r2
 800d0c2:	d100      	bne.n	800d0c6 <memset+0xa>
 800d0c4:	4770      	bx	lr
 800d0c6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0ca:	e7f9      	b.n	800d0c0 <memset+0x4>

0800d0cc <__libc_init_array>:
 800d0cc:	b570      	push	{r4, r5, r6, lr}
 800d0ce:	4d0d      	ldr	r5, [pc, #52]	; (800d104 <__libc_init_array+0x38>)
 800d0d0:	4c0d      	ldr	r4, [pc, #52]	; (800d108 <__libc_init_array+0x3c>)
 800d0d2:	1b64      	subs	r4, r4, r5
 800d0d4:	10a4      	asrs	r4, r4, #2
 800d0d6:	2600      	movs	r6, #0
 800d0d8:	42a6      	cmp	r6, r4
 800d0da:	d109      	bne.n	800d0f0 <__libc_init_array+0x24>
 800d0dc:	4d0b      	ldr	r5, [pc, #44]	; (800d10c <__libc_init_array+0x40>)
 800d0de:	4c0c      	ldr	r4, [pc, #48]	; (800d110 <__libc_init_array+0x44>)
 800d0e0:	f000 f818 	bl	800d114 <_init>
 800d0e4:	1b64      	subs	r4, r4, r5
 800d0e6:	10a4      	asrs	r4, r4, #2
 800d0e8:	2600      	movs	r6, #0
 800d0ea:	42a6      	cmp	r6, r4
 800d0ec:	d105      	bne.n	800d0fa <__libc_init_array+0x2e>
 800d0ee:	bd70      	pop	{r4, r5, r6, pc}
 800d0f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f4:	4798      	blx	r3
 800d0f6:	3601      	adds	r6, #1
 800d0f8:	e7ee      	b.n	800d0d8 <__libc_init_array+0xc>
 800d0fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0fe:	4798      	blx	r3
 800d100:	3601      	adds	r6, #1
 800d102:	e7f2      	b.n	800d0ea <__libc_init_array+0x1e>
 800d104:	0800d1bc 	.word	0x0800d1bc
 800d108:	0800d1bc 	.word	0x0800d1bc
 800d10c:	0800d1bc 	.word	0x0800d1bc
 800d110:	0800d1c0 	.word	0x0800d1c0

0800d114 <_init>:
 800d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d116:	bf00      	nop
 800d118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d11a:	bc08      	pop	{r3}
 800d11c:	469e      	mov	lr, r3
 800d11e:	4770      	bx	lr

0800d120 <_fini>:
 800d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d122:	bf00      	nop
 800d124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d126:	bc08      	pop	{r3}
 800d128:	469e      	mov	lr, r3
 800d12a:	4770      	bx	lr
