
NEW_G4_software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6f8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800d8d8  0800d8d8  0000e8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9a0  0800d9a0  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9a0  0800d9a0  0000e9a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9a8  0800d9a8  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9a8  0800d9a8  0000e9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d9ac  0800d9ac  0000e9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d9b0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a0  200001d4  0800db84  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  0800db84  0000f774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000270af  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d2f  00000000  00000000  000362b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  0003bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017d3  00000000  00000000  0003df28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d56  00000000  00000000  0003f6fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c8d5  00000000  00000000  00068451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee8a5  00000000  00000000  00094d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001835cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008850  00000000  00000000  00183610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0018be60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d8c0 	.word	0x0800d8c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800d8c0 	.word	0x0800d8c0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2220      	movs	r2, #32
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f00c f903 	bl	800cfc0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dba:	4b32      	ldr	r3, [pc, #200]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dbc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dc4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dc8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ddc:	4b29      	ldr	r3, [pc, #164]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000de2:	4b28      	ldr	r3, [pc, #160]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000de8:	4b26      	ldr	r3, [pc, #152]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dee:	4b25      	ldr	r3, [pc, #148]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000df4:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dfa:	4b22      	ldr	r3, [pc, #136]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e24:	4817      	ldr	r0, [pc, #92]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e26:	f001 fab5 	bl	8002394 <HAL_ADC_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e30:	f000 fd5b 	bl	80018ea <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e40:	f002 f842 	bl	8002ec8 <HAL_ADCEx_MultiModeConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000e4a:	f000 fd4e 	bl	80018ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_ADC1_Init+0xec>)
 8000e50:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e52:	2306      	movs	r3, #6
 8000e54:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e5a:	237f      	movs	r3, #127	@ 0x7f
 8000e5c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e5e:	2304      	movs	r3, #4
 8000e60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	@ (8000e84 <MX_ADC1_Init+0xe8>)
 8000e6c:	f001 fc16 	bl	800269c <HAL_ADC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000e76:	f000 fd38 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	@ 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200001f0 	.word	0x200001f0
 8000e88:	04300002 	.word	0x04300002

08000e8c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2220      	movs	r2, #32
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f00c f891 	bl	800cfc0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ea0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f50 <MX_ADC2_Init+0xc4>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ea4:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ea6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb2:	4b26      	ldr	r3, [pc, #152]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000eca:	4b20      	ldr	r3, [pc, #128]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eea:	4b18      	ldr	r3, [pc, #96]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef8:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f06:	4811      	ldr	r0, [pc, #68]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f08:	f001 fa44 	bl	8002394 <HAL_ADC_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000f12:	f000 fcea 	bl	80018ea <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <MX_ADC2_Init+0xc8>)
 8000f18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1a:	2306      	movs	r3, #6
 8000f1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f22:	237f      	movs	r3, #127	@ 0x7f
 8000f24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f26:	2304      	movs	r3, #4
 8000f28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_ADC2_Init+0xc0>)
 8000f34:	f001 fbb2 	bl	800269c <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000f3e:	f000 fcd4 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000025c 	.word	0x2000025c
 8000f50:	50000100 	.word	0x50000100
 8000f54:	2e300800 	.word	0x2e300800

08000f58 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09e      	sub	sp, #120	@ 0x78
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
 8000f6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f70:	f107 0320 	add.w	r3, r7, #32
 8000f74:	2244      	movs	r2, #68	@ 0x44
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00c f821 	bl	800cfc0 <memset>
  if(adcHandle->Instance==ADC1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f86:	d16f      	bne.n	8001068 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f8c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f8e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fe63 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000fa4:	f000 fca1 	bl	80018ea <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fa8:	4b52      	ldr	r3, [pc, #328]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	3301      	adds	r3, #1
 8000fae:	4a51      	ldr	r2, [pc, #324]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000fb0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fb2:	4b50      	ldr	r3, [pc, #320]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d10b      	bne.n	8000fd2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fba:	4b4f      	ldr	r3, [pc, #316]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	4a4e      	ldr	r2, [pc, #312]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fc0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000fc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fce:	61fb      	str	r3, [r7, #28]
 8000fd0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b49      	ldr	r3, [pc, #292]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	4a48      	ldr	r2, [pc, #288]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fde:	4b46      	ldr	r3, [pc, #280]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	61bb      	str	r3, [r7, #24]
 8000fe8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b43      	ldr	r3, [pc, #268]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fee:	4a42      	ldr	r2, [pc, #264]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ff6:	4b40      	ldr	r3, [pc, #256]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	4b3d      	ldr	r3, [pc, #244]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	4a3c      	ldr	r2, [pc, #240]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = ADC_7_Pin|ADC_8_Pin|ADC_9_Pin|ADC_10_Pin;
 800101a:	230f      	movs	r3, #15
 800101c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101e:	2303      	movs	r3, #3
 8001020:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001026:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800102a:	4619      	mov	r1, r3
 800102c:	4833      	ldr	r0, [pc, #204]	@ (80010fc <HAL_ADC_MspInit+0x1a4>)
 800102e:	f002 fad9 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_1_Pin|OPAMP_SIG_2_Pin|OPAMP_SIG_4_Pin;
 8001032:	230b      	movs	r3, #11
 8001034:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f002 facc 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPAMP_SIG_1_Pin|ADC_3_Pin|DIGITAL_IO_2_Pin;
 800104c:	f245 0301 	movw	r3, #20481	@ 0x5001
 8001050:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001052:	2303      	movs	r3, #3
 8001054:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800105e:	4619      	mov	r1, r3
 8001060:	4827      	ldr	r0, [pc, #156]	@ (8001100 <HAL_ADC_MspInit+0x1a8>)
 8001062:	f002 fabf 	bl	80035e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001066:	e041      	b.n	80010ec <HAL_ADC_MspInit+0x194>
  else if(adcHandle->Instance==ADC2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_ADC_MspInit+0x1ac>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d13c      	bne.n	80010ec <HAL_ADC_MspInit+0x194>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001076:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001078:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800107c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fdee 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_ADC_MspInit+0x13a>
      Error_Handler();
 800108e:	f000 fc2c 	bl	80018ea <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001092:	4b18      	ldr	r3, [pc, #96]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a16      	ldr	r2, [pc, #88]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 800109a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_ADC_MspInit+0x19c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d10b      	bne.n	80010bc <HAL_ADC_MspInit+0x164>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a8:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b0:	4b11      	ldr	r3, [pc, #68]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b0e      	ldr	r3, [pc, #56]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c8:	4b0b      	ldr	r3, [pc, #44]	@ (80010f8 <HAL_ADC_MspInit+0x1a0>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = OPAMP_SIG_3_Pin;
 80010d4:	2320      	movs	r3, #32
 80010d6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d8:	2303      	movs	r3, #3
 80010da:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(OPAMP_SIG_3_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80010e4:	4619      	mov	r1, r3
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <HAL_ADC_MspInit+0x1a4>)
 80010e8:	f002 fa7c 	bl	80035e4 <HAL_GPIO_Init>
}
 80010ec:	bf00      	nop
 80010ee:	3778      	adds	r7, #120	@ 0x78
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200002c8 	.word	0x200002c8
 80010f8:	40021000 	.word	0x40021000
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000400 	.word	0x48000400
 8001104:	50000100 	.word	0x50000100

08001108 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	@ 0x30
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800110e:	463b      	mov	r3, r7
 8001110:	2230      	movs	r2, #48	@ 0x30
 8001112:	2100      	movs	r1, #0
 8001114:	4618      	mov	r0, r3
 8001116:	f00b ff53 	bl	800cfc0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_DAC1_Init+0x80>)
 800111c:	4a1b      	ldr	r2, [pc, #108]	@ (800118c <MX_DAC1_Init+0x84>)
 800111e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001120:	4819      	ldr	r0, [pc, #100]	@ (8001188 <MX_DAC1_Init+0x80>)
 8001122:	f002 f884 	bl	800322e <HAL_DAC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800112c:	f000 fbdd 	bl	80018ea <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001130:	2302      	movs	r3, #2
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800114c:	2301      	movs	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	4619      	mov	r1, r3
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <MX_DAC1_Init+0x80>)
 800115c:	f002 f88a 	bl	8003274 <HAL_DAC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001166:	f000 fbc0 	bl	80018ea <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2210      	movs	r2, #16
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_DAC1_Init+0x80>)
 8001172:	f002 f87f 	bl	8003274 <HAL_DAC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 800117c:	f000 fbb5 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	@ 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200002cc 	.word	0x200002cc
 800118c:	50000800 	.word	0x50000800

08001190 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a15      	ldr	r2, [pc, #84]	@ (8001204 <HAL_DAC_MspInit+0x74>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d124      	bne.n	80011fc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c6:	613b      	str	r3, [r7, #16]
 80011c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <HAL_DAC_MspInit+0x78>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = ADC_DAC_1_Pin|ADC_DAC_2_Pin;
 80011e2:	2330      	movs	r3, #48	@ 0x30
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f8:	f002 f9f4 	bl	80035e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	50000800 	.word	0x50000800
 8001208:	40021000 	.word	0x40021000

0800120c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
 8001220:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b5d      	ldr	r3, [pc, #372]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a5c      	ldr	r2, [pc, #368]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001228:	f043 0304 	orr.w	r3, r3, #4
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b5a      	ldr	r3, [pc, #360]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <MX_GPIO_Init+0x18c>)
 800123c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001246:	4b54      	ldr	r3, [pc, #336]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001248:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124a:	f003 0320 	and.w	r3, r3, #32
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b51      	ldr	r3, [pc, #324]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a50      	ldr	r2, [pc, #320]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b4e      	ldr	r3, [pc, #312]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <MX_GPIO_Init+0x18c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001270:	f043 0302 	orr.w	r3, r3, #2
 8001274:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001276:	4b48      	ldr	r3, [pc, #288]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001282:	4b45      	ldr	r3, [pc, #276]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001286:	4a44      	ldr	r2, [pc, #272]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001288:	f043 0308 	orr.w	r3, r3, #8
 800128c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800128e:	4b42      	ldr	r3, [pc, #264]	@ (8001398 <MX_GPIO_Init+0x18c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 800129a:	2200      	movs	r2, #0
 800129c:	f24a 41a2 	movw	r1, #42146	@ 0xa4a2
 80012a0:	483e      	ldr	r0, [pc, #248]	@ (800139c <MX_GPIO_Init+0x190>)
 80012a2:	f002 fb21 	bl	80038e8 <HAL_GPIO_WritePin>
                          |WARN_STATUS_Pin|OK_STATUS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 80012ac:	483c      	ldr	r0, [pc, #240]	@ (80013a0 <MX_GPIO_Init+0x194>)
 80012ae:	f002 fb1b 	bl	80038e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CARD_EN_GPIO_Port, SD_CARD_EN_Pin, GPIO_PIN_RESET);
 80012b2:	2200      	movs	r2, #0
 80012b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012bc:	f002 fb14 	bl	80038e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2104      	movs	r1, #4
 80012c4:	4837      	ldr	r0, [pc, #220]	@ (80013a4 <MX_GPIO_Init+0x198>)
 80012c6:	f002 fb0f 	bl	80038e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = COMMS_IO_1_Pin|COMMS_IO_2_Pin|COMMS_IO_3_Pin;
 80012ca:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4830      	ldr	r0, [pc, #192]	@ (80013a0 <MX_GPIO_Init+0x194>)
 80012e0:	f002 f980 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WAKE_BTN_Pin;
 80012e4:	2304      	movs	r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(WAKE_BTN_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fa:	f002 f973 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_2_Pin|DIGITAL_IO_5_Pin|DIGITAL_IO_1_Pin|DIGITAL_IO_3_Pin
 80012fe:	f24a 43a2 	movw	r3, #42146	@ 0xa4a2
 8001302:	617b      	str	r3, [r7, #20]
                          |WARN_STATUS_Pin|OK_STATUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4821      	ldr	r0, [pc, #132]	@ (800139c <MX_GPIO_Init+0x190>)
 8001318:	f002 f964 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = PWM_1_Pin|DIGITAL_IO_6_Pin|SD_CARD_DETECT_Pin;
 800131c:	f640 2304 	movw	r3, #2564	@ 0xa04
 8001320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	481a      	ldr	r0, [pc, #104]	@ (800139c <MX_GPIO_Init+0x190>)
 8001332:	f002 f957 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = DOWN_BTN_Pin|UP_BTN_Pin|ENTER_BTN_Pin|PWR_STATUS_Pin;
 8001336:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4814      	ldr	r0, [pc, #80]	@ (80013a0 <MX_GPIO_Init+0x194>)
 8001350:	f002 f948 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CARD_EN_Pin;
 8001354:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135a:	2301      	movs	r3, #1
 800135c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CARD_EN_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f002 f938 	bl	80035e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ERROR_STATUS_Pin;
 8001374:	2304      	movs	r3, #4
 8001376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ERROR_STATUS_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	4806      	ldr	r0, [pc, #24]	@ (80013a4 <MX_GPIO_Init+0x198>)
 800138c:	f002 f92a 	bl	80035e4 <HAL_GPIO_Init>

}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	@ 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	48000400 	.word	0x48000400
 80013a0:	48000800 	.word	0x48000800
 80013a4:	48000c00 	.word	0x48000c00

080013a8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001420 <MX_I2C2_Init+0x78>)
 80013b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000103;
 80013b2:	4b1a      	ldr	r3, [pc, #104]	@ (800141c <MX_I2C2_Init+0x74>)
 80013b4:	f240 1203 	movw	r2, #259	@ 0x103
 80013b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013ba:	4b18      	ldr	r3, [pc, #96]	@ (800141c <MX_I2C2_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <MX_I2C2_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_I2C2_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <MX_I2C2_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d8:	4b10      	ldr	r3, [pc, #64]	@ (800141c <MX_I2C2_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013de:	4b0f      	ldr	r3, [pc, #60]	@ (800141c <MX_I2C2_Init+0x74>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013e4:	480d      	ldr	r0, [pc, #52]	@ (800141c <MX_I2C2_Init+0x74>)
 80013e6:	f002 fab1 	bl	800394c <HAL_I2C_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013f0:	f000 fa7b 	bl	80018ea <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013f4:	2100      	movs	r1, #0
 80013f6:	4809      	ldr	r0, [pc, #36]	@ (800141c <MX_I2C2_Init+0x74>)
 80013f8:	f002 fff8 	bl	80043ec <HAL_I2CEx_ConfigAnalogFilter>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8001402:	f000 fa72 	bl	80018ea <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001406:	2100      	movs	r1, #0
 8001408:	4804      	ldr	r0, [pc, #16]	@ (800141c <MX_I2C2_Init+0x74>)
 800140a:	f003 f83a 	bl	8004482 <HAL_I2CEx_ConfigDigitalFilter>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 fa69 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002e0 	.word	0x200002e0
 8001420:	40005800 	.word	0x40005800

08001424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b09c      	sub	sp, #112	@ 0x70
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0318 	add.w	r3, r7, #24
 8001440:	2244      	movs	r2, #68	@ 0x44
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00b fdbb 	bl	800cfc0 <memset>
  if(i2cHandle->Instance==I2C2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a2d      	ldr	r2, [pc, #180]	@ (8001504 <HAL_I2C_MspInit+0xe0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d153      	bne.n	80014fc <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fbff 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f000 fa3d 	bl	80018ea <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001474:	4a24      	ldr	r2, [pc, #144]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800147c:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001494:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014a0:	2310      	movs	r3, #16
 80014a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a4:	2312      	movs	r3, #18
 80014a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014b0:	2304      	movs	r3, #4
 80014b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014b8:	4619      	mov	r1, r3
 80014ba:	4814      	ldr	r0, [pc, #80]	@ (800150c <HAL_I2C_MspInit+0xe8>)
 80014bc:	f002 f892 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c6:	2312      	movs	r3, #18
 80014c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d2:	2304      	movs	r3, #4
 80014d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014e0:	f002 f880 	bl	80035e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014e8:	4a07      	ldr	r2, [pc, #28]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <HAL_I2C_MspInit+0xe4>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014fc:	bf00      	nop
 80014fe:	3770      	adds	r7, #112	@ 0x70
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005800 	.word	0x40005800
 8001508:	40021000 	.word	0x40021000
 800150c:	48000800 	.word	0x48000800

08001510 <HAL_LPTIM_MspInit>:
  /* USER CODE END LPTIM1_Init 2 */

}

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	@ 0x50
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	2244      	movs	r2, #68	@ 0x44
 800151e:	2100      	movs	r1, #0
 8001520:	4618      	mov	r0, r3
 8001522:	f00b fd4d 	bl	800cfc0 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a11      	ldr	r2, [pc, #68]	@ (8001570 <HAL_LPTIM_MspInit+0x60>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d11a      	bne.n	8001566 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001530:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001534:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK1;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4618      	mov	r0, r3
 8001540:	f005 fb90 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 800154a:	f000 f9ce 	bl	80018ea <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_LPTIM_MspInit+0x64>)
 8001550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001552:	4a08      	ldr	r2, [pc, #32]	@ (8001574 <HAL_LPTIM_MspInit+0x64>)
 8001554:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001558:	6593      	str	r3, [r2, #88]	@ 0x58
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <HAL_LPTIM_MspInit+0x64>)
 800155c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40007c00 	.word	0x40007c00
 8001574:	40021000 	.word	0x40021000

08001578 <readMCP9804Temp>:
FIL MyFile;       // File object
char SDPath[4];   // SD card logical drive path*/
/* USER CODE BEGIN PV */
//static void MX_SDMMC1_SD_Init(void);

int32_t readMCP9804Temp(uint8_t tempRegAddr) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
	uint8_t tempData[2];
	int32_t tempC = -100;
 8001582:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001586:	617b      	str	r3, [r7, #20]
	uint8_t store = 0b00000101;
 8001588:	2305      	movs	r3, #5
 800158a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &store, 1, HAL_MAX_DELAY);
 800158c:	f107 020f 	add.w	r2, r7, #15
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2301      	movs	r3, #1
 8001598:	2118      	movs	r1, #24
 800159a:	4827      	ldr	r0, [pc, #156]	@ (8001638 <readMCP9804Temp+0xc0>)
 800159c:	f002 fa72 	bl	8003a84 <HAL_I2C_Master_Transmit>
	if (HAL_I2C_Master_Receive(&hi2c2, MCP9804_ADDR, tempData, 2, HAL_MAX_DELAY) != HAL_OK){
 80015a0:	f107 0210 	add.w	r2, r7, #16
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2302      	movs	r3, #2
 80015ac:	2118      	movs	r1, #24
 80015ae:	4822      	ldr	r0, [pc, #136]	@ (8001638 <readMCP9804Temp+0xc0>)
 80015b0:	f002 fb80 	bl	8003cb4 <HAL_I2C_Master_Receive>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <readMCP9804Temp+0x4c>
		HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 80015ba:	2200      	movs	r2, #0
 80015bc:	2104      	movs	r1, #4
 80015be:	481f      	ldr	r0, [pc, #124]	@ (800163c <readMCP9804Temp+0xc4>)
 80015c0:	f002 f992 	bl	80038e8 <HAL_GPIO_WritePin>
	}
	uint16_t rawTemp = (tempData[0] << 8) | tempData[1];
 80015c4:	7c3b      	ldrb	r3, [r7, #16]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	7c7b      	ldrb	r3, [r7, #17]
 80015cc:	b21b      	sxth	r3, r3
 80015ce:	4313      	orrs	r3, r2
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	827b      	strh	r3, [r7, #18]
	rawTemp &= 0x0FFF;  // Clear flags and keep 12 bits
 80015d4:	8a7b      	ldrh	r3, [r7, #18]
 80015d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015da:	827b      	strh	r3, [r7, #18]
	tempC = rawTemp & 0x0FFF;
 80015dc:	8a7b      	ldrh	r3, [r7, #18]
 80015de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e2:	617b      	str	r3, [r7, #20]
	tempC /= 16.0;
 80015e4:	6978      	ldr	r0, [r7, #20]
 80015e6:	f7fe ffbd 	bl	8000564 <__aeabi_i2d>
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	4b14      	ldr	r3, [pc, #80]	@ (8001640 <readMCP9804Temp+0xc8>)
 80015f0:	f7ff f94c 	bl	800088c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fa2e 	bl	8000a5c <__aeabi_d2iz>
 8001600:	4603      	mov	r3, r0
 8001602:	617b      	str	r3, [r7, #20]
	if (rawTemp & 0x1000) {  // Check sign bit
 8001604:	8a7b      	ldrh	r3, [r7, #18]
 8001606:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00f      	beq.n	800162e <readMCP9804Temp+0xb6>
	  tempC -= 256.0;
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7fe ffa8 	bl	8000564 <__aeabi_i2d>
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <readMCP9804Temp+0xcc>)
 800161a:	f7fe fe55 	bl	80002c8 <__aeabi_dsub>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa19 	bl	8000a5c <__aeabi_d2iz>
 800162a:	4603      	mov	r3, r0
 800162c:	617b      	str	r3, [r7, #20]
	}
    return tempC;
 800162e:	697b      	ldr	r3, [r7, #20]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002e0 	.word	0x200002e0
 800163c:	48000c00 	.word	0x48000c00
 8001640:	40300000 	.word	0x40300000
 8001644:	40700000 	.word	0x40700000

08001648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0f8      	sub	sp, #480	@ 0x1e0
 800164c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800164e:	f000 fc38 	bl	8001ec2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001652:	f000 f8fb 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001656:	f7ff fdd9 	bl	800120c <MX_GPIO_Init>
  MX_ADC1_Init();
 800165a:	f7ff fb9f 	bl	8000d9c <MX_ADC1_Init>
  MX_ADC2_Init();
 800165e:	f7ff fc15 	bl	8000e8c <MX_ADC2_Init>
  MX_DAC1_Init();
 8001662:	f7ff fd51 	bl	8001108 <MX_DAC1_Init>
  MX_SPI1_Init();
 8001666:	f000 f9bb 	bl	80019e0 <MX_SPI1_Init>
  MX_UCPD1_Init();
 800166a:	f000 fb2d 	bl	8001cc8 <MX_UCPD1_Init>
  MX_I2C2_Init();
 800166e:	f7ff fe9b 	bl	80013a8 <MX_I2C2_Init>
  MX_RTC_Init();
 8001672:	f000 f941 	bl	80018f8 <MX_RTC_Init>
  MX_USB_Device_Init();
 8001676:	f00a ff65 	bl	800c544 <MX_USB_Device_Init>
  MX_UART4_Init();
 800167a:	f000 fb53 	bl	8001d24 <MX_UART4_Init>

  __HAL_RCC_LPTIM1_CLK_ENABLE();
 800167e:	4b6c      	ldr	r3, [pc, #432]	@ (8001830 <main+0x1e8>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	4a6b      	ldr	r2, [pc, #428]	@ (8001830 <main+0x1e8>)
 8001684:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001688:	6593      	str	r3, [r2, #88]	@ 0x58
 800168a:	4b69      	ldr	r3, [pc, #420]	@ (8001830 <main+0x1e8>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001692:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8001696:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80016a0:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80016a4:	681b      	ldr	r3, [r3, #0]

  // Create LPTIM handle
  LPTIM_HandleTypeDef hlptim;
  hlptim.Instance = LPTIM1;
 80016a6:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <main+0x1ec>)
 80016a8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c

  // Configure LPTIM for continuous mode, source from internal clock
  hlptim.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  hlptim.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1; // No prescaling
 80016b2:	2300      	movs	r3, #0
 80016b4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
  hlptim.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
  hlptim.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE; // Software trigger
 80016be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80016c2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
  hlptim.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  hlptim.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  //hlptim.Init.RepetitionCounter = 0;  // No repetition

  // Initialize LPTIM
  HAL_LPTIM_Init(&hlptim);
 80016d2:	f507 73c6 	add.w	r3, r7, #396	@ 0x18c
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 ff20 	bl	800451c <HAL_LPTIM_Init>
  /* USER CODE BEGIN 2 */
  uint32_t status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

    int num_bytes = 4;
 80016e2:	2304      	movs	r3, #4
 80016e4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0

    uint8_t dataToSend[4];
    dataToSend[0] = 0xFF;// Example data
 80016e8:	23ff      	movs	r3, #255	@ 0xff
 80016ea:	f887 3188 	strb.w	r3, [r7, #392]	@ 0x188
    dataToSend[1] = 0x5;// Example data
 80016ee:	2305      	movs	r3, #5
 80016f0:	f887 3189 	strb.w	r3, [r7, #393]	@ 0x189
    dataToSend[2] = 0xF0;// Example data
 80016f4:	23f0      	movs	r3, #240	@ 0xf0
 80016f6:	f887 318a 	strb.w	r3, [r7, #394]	@ 0x18a
    dataToSend[3] = 0xF;// Example data
 80016fa:	230f      	movs	r3, #15
 80016fc:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b

    //HAL_StatusTypeDef sts = HAL_OK;


    HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_SET); // Turn off success LED
 8001700:	2201      	movs	r2, #1
 8001702:	2180      	movs	r1, #128	@ 0x80
 8001704:	484c      	ldr	r0, [pc, #304]	@ (8001838 <main+0x1f0>)
 8001706:	f002 f8ef 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 800170a:	2201      	movs	r2, #1
 800170c:	2120      	movs	r1, #32
 800170e:	484a      	ldr	r0, [pc, #296]	@ (8001838 <main+0x1f0>)
 8001710:	f002 f8ea 	bl	80038e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn off error LED
 8001714:	2201      	movs	r2, #1
 8001716:	2104      	movs	r1, #4
 8001718:	4848      	ldr	r0, [pc, #288]	@ (800183c <main+0x1f4>)
 800171a:	f002 f8e5 	bl	80038e8 <HAL_GPIO_WritePin>

    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800171e:	4848      	ldr	r0, [pc, #288]	@ (8001840 <main+0x1f8>)
 8001720:	f002 f914 	bl	800394c <HAL_I2C_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <main+0xec>
			// Initialization error
	  HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on status LED
 800172a:	2200      	movs	r2, #0
 800172c:	2104      	movs	r1, #4
 800172e:	4843      	ldr	r0, [pc, #268]	@ (800183c <main+0x1f4>)
 8001730:	f002 f8da 	bl	80038e8 <HAL_GPIO_WritePin>
		}
	uint8_t tempRegAddr = 0x05;
 8001734:	2305      	movs	r3, #5
 8001736:	f887 31cf 	strb.w	r3, [r7, #463]	@ 0x1cf
    uint8_t buffer[255];
    char buff[128];

    uint8_t initials = 0b00000010;
 800173a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800173e:	f2a3 13d1 	subw	r3, r3, #465	@ 0x1d1
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c2, MCP9804_ADDR, &initials, 1, HAL_MAX_DELAY);
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	2118      	movs	r1, #24
 8001752:	483b      	ldr	r0, [pc, #236]	@ (8001840 <main+0x1f8>)
 8001754:	f002 f996 	bl	8003a84 <HAL_I2C_Master_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
		HAL_Delay(100);
 8001758:	2064      	movs	r0, #100	@ 0x64
 800175a:	f000 fc23 	bl	8001fa4 <HAL_Delay>
		//HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
		int32_t tempC = readMCP9804Temp(tempRegAddr);
 800175e:	f897 31cf 	ldrb.w	r3, [r7, #463]	@ 0x1cf
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff ff08 	bl	8001578 <readMCP9804Temp>
 8001768:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
		dataToSend[0] = (tempC >> 24) & 0xFF;
 800176c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001770:	0e1b      	lsrs	r3, r3, #24
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f887 3188 	strb.w	r3, [r7, #392]	@ 0x188
		dataToSend[1] = (tempC >> 16) & 0xFF;
 8001778:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800177c:	141b      	asrs	r3, r3, #16
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f887 3189 	strb.w	r3, [r7, #393]	@ 0x189
		dataToSend[2] = (tempC >> 8) & 0xFF;
 8001784:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001788:	121b      	asrs	r3, r3, #8
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f887 318a 	strb.w	r3, [r7, #394]	@ 0x18a
		dataToSend[3] = tempC & 0xFF;
 8001790:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f887 318b 	strb.w	r3, [r7, #395]	@ 0x18b
		int amount_fmted = snprintf(buff, sizeof(buff), "temp %ld \r\n", tempC);
 800179a:	f107 0008 	add.w	r0, r7, #8
 800179e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80017a2:	4a28      	ldr	r2, [pc, #160]	@ (8001844 <main+0x1fc>)
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	f00b fbd7 	bl	800cf58 <sniprintf>
 80017aa:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
		switch (CDC_Transmit_FS((uint8_t*)buff, amount_fmted)){
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	f8d7 11c4 	ldr.w	r1, [r7, #452]	@ 0x1c4
 80017b6:	4618      	mov	r0, r3
 80017b8:	f00a ff82 	bl	800c6c0 <CDC_Transmit_FS>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d010      	beq.n	80017e4 <main+0x19c>
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	dc13      	bgt.n	80017ee <main+0x1a6>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <main+0x188>
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d005      	beq.n	80017da <main+0x192>
			break;
		case USBD_FAIL: // if the device can support USB coms device it will blink red
			HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
			break;
		default:
			break;
 80017ce:	e00e      	b.n	80017ee <main+0x1a6>
			HAL_GPIO_TogglePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin);
 80017d0:	2180      	movs	r1, #128	@ 0x80
 80017d2:	4819      	ldr	r0, [pc, #100]	@ (8001838 <main+0x1f0>)
 80017d4:	f002 f8a0 	bl	8003918 <HAL_GPIO_TogglePin>
			break;
 80017d8:	e00a      	b.n	80017f0 <main+0x1a8>
			HAL_GPIO_TogglePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin);
 80017da:	2120      	movs	r1, #32
 80017dc:	4816      	ldr	r0, [pc, #88]	@ (8001838 <main+0x1f0>)
 80017de:	f002 f89b 	bl	8003918 <HAL_GPIO_TogglePin>
			break;
 80017e2:	e005      	b.n	80017f0 <main+0x1a8>
			HAL_GPIO_TogglePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin);
 80017e4:	2104      	movs	r1, #4
 80017e6:	4815      	ldr	r0, [pc, #84]	@ (800183c <main+0x1f4>)
 80017e8:	f002 f896 	bl	8003918 <HAL_GPIO_TogglePin>
			break;
 80017ec:	e000      	b.n	80017f0 <main+0x1a8>
			break;
 80017ee:	bf00      	nop
		}

    	HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	@ 0x64
 80017f2:	f000 fbd7 	bl	8001fa4 <HAL_Delay>
		//HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET);
    	status = HAL_UART_Transmit(&huart4,(uint8_t*)buff, amount_fmted, HAL_MAX_DELAY);
 80017f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f107 0108 	add.w	r1, r7, #8
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
 8001804:	4810      	ldr	r0, [pc, #64]	@ (8001848 <main+0x200>)
 8001806:	f005 fea9 	bl	800755c <HAL_UART_Transmit>
 800180a:	4603      	mov	r3, r0
 800180c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
		if (status == HAL_OK) {
 8001810:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d105      	bne.n	8001824 <main+0x1dc>
			//HAL_GPIO_WritePin(OK_STATUS_GPIO_Port, OK_STATUS_Pin, GPIO_PIN_RESET); // Turn on success LED
			//HAL_GPIO_WritePin(WARN_STATUS_GPIO_Port, WARN_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
			HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_SET); // Turn of error LED
 8001818:	2201      	movs	r2, #1
 800181a:	2104      	movs	r1, #4
 800181c:	4807      	ldr	r0, [pc, #28]	@ (800183c <main+0x1f4>)
 800181e:	f002 f863 	bl	80038e8 <HAL_GPIO_WritePin>
 8001822:	e799      	b.n	8001758 <main+0x110>
		} else {
			HAL_GPIO_WritePin(ERROR_STATUS_GPIO_Port, ERROR_STATUS_Pin, GPIO_PIN_RESET); // Turn on error LED
 8001824:	2200      	movs	r2, #0
 8001826:	2104      	movs	r1, #4
 8001828:	4804      	ldr	r0, [pc, #16]	@ (800183c <main+0x1f4>)
 800182a:	f002 f85d 	bl	80038e8 <HAL_GPIO_WritePin>
    {
 800182e:	e793      	b.n	8001758 <main+0x110>
 8001830:	40021000 	.word	0x40021000
 8001834:	40007c00 	.word	0x40007c00
 8001838:	48000400 	.word	0x48000400
 800183c:	48000c00 	.word	0x48000c00
 8001840:	200002e0 	.word	0x200002e0
 8001844:	0800d8d8 	.word	0x0800d8d8
 8001848:	200003c4 	.word	0x200003c4

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	@ 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0318 	add.w	r3, r7, #24
 8001856:	2238      	movs	r2, #56	@ 0x38
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f00b fbb0 	bl	800cfc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800186e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001872:	f004 fc25 	bl	80060c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001876:	230a      	movs	r3, #10
 8001878:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800187a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001880:	2340      	movs	r3, #64	@ 0x40
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001888:	2302      	movs	r3, #2
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800188c:	2302      	movs	r3, #2
 800188e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001890:	2301      	movs	r3, #1
 8001892:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001894:	230c      	movs	r3, #12
 8001896:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001898:	2302      	movs	r3, #2
 800189a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800189c:	2304      	movs	r3, #4
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018a0:	2302      	movs	r3, #2
 80018a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f004 fcad 	bl	8006208 <HAL_RCC_OscConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80018b4:	f000 f819 	bl	80018ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b8:	230f      	movs	r3, #15
 80018ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018bc:	2301      	movs	r3, #1
 80018be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80018c4:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80018c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f004 ffaa 	bl	800682c <HAL_RCC_ClockConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018de:	f000 f804 	bl	80018ea <Error_Handler>
  }
}
 80018e2:	bf00      	nop
 80018e4:	3750      	adds	r7, #80	@ 0x50
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ee:	b672      	cpsid	i
}
 80018f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f2:	bf00      	nop
 80018f4:	e7fd      	b.n	80018f2 <Error_Handler+0x8>
	...

080018f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018fc:	4b18      	ldr	r3, [pc, #96]	@ (8001960 <MX_RTC_Init+0x68>)
 80018fe:	4a19      	ldr	r2, [pc, #100]	@ (8001964 <MX_RTC_Init+0x6c>)
 8001900:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001902:	4b17      	ldr	r3, [pc, #92]	@ (8001960 <MX_RTC_Init+0x68>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <MX_RTC_Init+0x68>)
 800190a:	227f      	movs	r2, #127	@ 0x7f
 800190c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800190e:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <MX_RTC_Init+0x68>)
 8001910:	22ff      	movs	r2, #255	@ 0xff
 8001912:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <MX_RTC_Init+0x68>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800191a:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <MX_RTC_Init+0x68>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001920:	4b0f      	ldr	r3, [pc, #60]	@ (8001960 <MX_RTC_Init+0x68>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001926:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <MX_RTC_Init+0x68>)
 8001928:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800192c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800192e:	4b0c      	ldr	r3, [pc, #48]	@ (8001960 <MX_RTC_Init+0x68>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001934:	480a      	ldr	r0, [pc, #40]	@ (8001960 <MX_RTC_Init+0x68>)
 8001936:	f005 fb85 	bl	8007044 <HAL_RTC_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8001940:	f7ff ffd3 	bl	80018ea <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 65535, RTC_WAKEUPCLOCK_CK_SPRE_17BITS) != HAL_OK)
 8001944:	2206      	movs	r2, #6
 8001946:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800194a:	4805      	ldr	r0, [pc, #20]	@ (8001960 <MX_RTC_Init+0x68>)
 800194c:	f005 fc97 	bl	800727e <HAL_RTCEx_SetWakeUpTimer>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001956:	f7ff ffc8 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000334 	.word	0x20000334
 8001964:	40002800 	.word	0x40002800

08001968 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b094      	sub	sp, #80	@ 0x50
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2244      	movs	r2, #68	@ 0x44
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f00b fb21 	bl	800cfc0 <memset>
  if(rtcHandle->Instance==RTC)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a15      	ldr	r2, [pc, #84]	@ (80019d8 <HAL_RTC_MspInit+0x70>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d123      	bne.n	80019d0 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001988:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800198c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800198e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001992:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	4618      	mov	r0, r3
 800199a:	f005 f963 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80019a4:	f7ff ffa1 	bl	80018ea <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <HAL_RTC_MspInit+0x74>)
 80019aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ae:	4a0b      	ldr	r2, [pc, #44]	@ (80019dc <HAL_RTC_MspInit+0x74>)
 80019b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_RTC_MspInit+0x74>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	4a07      	ldr	r2, [pc, #28]	@ (80019dc <HAL_RTC_MspInit+0x74>)
 80019be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_RTC_MspInit+0x74>)
 80019c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	3750      	adds	r7, #80	@ 0x50
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40002800 	.word	0x40002800
 80019dc:	40021000 	.word	0x40021000

080019e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <MX_SPI1_Init+0x74>)
 80019e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a58 <MX_SPI1_Init+0x78>)
 80019e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_SPI1_Init+0x74>)
 80019ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <MX_SPI1_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80019f8:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_SPI1_Init+0x74>)
 80019fa:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80019fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a2e:	2207      	movs	r2, #7
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	@ (8001a54 <MX_SPI1_Init+0x74>)
 8001a40:	f005 fc91 	bl	8007366 <HAL_SPI_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a4a:	f7ff ff4e 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000035c 	.word	0x2000035c
 8001a58:	40013000 	.word	0x40013000

08001a5c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a25      	ldr	r2, [pc, #148]	@ (8001b10 <HAL_SPI_MspInit+0xb4>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d144      	bne.n	8001b08 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a82:	4a24      	ldr	r2, [pc, #144]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001a84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a8a:	4b22      	ldr	r3, [pc, #136]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b1f      	ldr	r3, [pc, #124]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b19      	ldr	r3, [pc, #100]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ab2:	4a18      	ldr	r2, [pc, #96]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <HAL_SPI_MspInit+0xb8>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac6:	23c0      	movs	r3, #192	@ 0xc0
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae4:	f001 fd7e 	bl	80035e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001af8:	2305      	movs	r3, #5
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <HAL_SPI_MspInit+0xbc>)
 8001b04:	f001 fd6e 	bl	80035e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	@ 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40013000 	.word	0x40013000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	48000400 	.word	0x48000400

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b26:	4a0e      	ldr	r2, [pc, #56]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	4a08      	ldr	r2, [pc, #32]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_MspInit+0x44>)
 8001b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	40021000 	.word	0x40021000

08001b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <NMI_Handler+0x4>

08001b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <HardFault_Handler+0x4>

08001b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <MemManage_Handler+0x4>

08001b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <BusFault_Handler+0x4>

08001b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <UsageFault_Handler+0x4>

08001b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bba:	f000 f9d5 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001bc8:	4802      	ldr	r0, [pc, #8]	@ (8001bd4 <USB_LP_IRQHandler+0x10>)
 8001bca:	f002 fe33 	bl	8004834 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20001130 	.word	0x20001130

08001bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be0:	4a14      	ldr	r2, [pc, #80]	@ (8001c34 <_sbrk+0x5c>)
 8001be2:	4b15      	ldr	r3, [pc, #84]	@ (8001c38 <_sbrk+0x60>)
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <_sbrk+0x64>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <_sbrk+0x64>)
 8001bf6:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <_sbrk+0x68>)
 8001bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <_sbrk+0x64>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4413      	add	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d207      	bcs.n	8001c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c08:	f00b f9e2 	bl	800cfd0 <__errno>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	220c      	movs	r2, #12
 8001c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e009      	b.n	8001c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <_sbrk+0x64>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	4a05      	ldr	r2, [pc, #20]	@ (8001c3c <_sbrk+0x64>)
 8001c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20008000 	.word	0x20008000
 8001c38:	00000400 	.word	0x00000400
 8001c3c:	200003c0 	.word	0x200003c0
 8001c40:	20001778 	.word	0x20001778

08001c44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c70:	4b08      	ldr	r3, [pc, #32]	@ (8001c94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c74:	4907      	ldr	r1, [pc, #28]	@ (8001c94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c7c:	4b05      	ldr	r3, [pc, #20]	@ (8001c94 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001c7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4013      	ands	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40021000 	.word	0x40021000

08001c98 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001ca2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ca4:	4907      	ldr	r1, [pc, #28]	@ (8001cc4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001cac:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001cae:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	463b      	mov	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
 8001cdc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001cde:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001ce2:	f7ff ffd9 	bl	8001c98 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7ff ffbe 	bl	8001c68 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8001cec:	2310      	movs	r3, #16
 8001cee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4808      	ldr	r0, [pc, #32]	@ (8001d20 <MX_UCPD1_Init+0x58>)
 8001cfe:	f006 fbf4 	bl	80084ea <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001d02:	2340      	movs	r3, #64	@ 0x40
 8001d04:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001d06:	2303      	movs	r3, #3
 8001d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4619      	mov	r1, r3
 8001d12:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <MX_UCPD1_Init+0x58>)
 8001d14:	f006 fbe9 	bl	80084ea <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001d18:	bf00      	nop
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	48000400 	.word	0x48000400

08001d24 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d28:	4b22      	ldr	r3, [pc, #136]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d2a:	4a23      	ldr	r2, [pc, #140]	@ (8001db8 <MX_UART4_Init+0x94>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001d2e:	4b21      	ldr	r3, [pc, #132]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d30:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b1f      	ldr	r3, [pc, #124]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b1c      	ldr	r3, [pc, #112]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5a:	4b16      	ldr	r3, [pc, #88]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d60:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d66:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d6c:	4811      	ldr	r0, [pc, #68]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d6e:	f005 fba5 	bl	80074bc <HAL_UART_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001d78:	f7ff fdb7 	bl	80018ea <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	480d      	ldr	r0, [pc, #52]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d80:	f006 f99e 	bl	80080c0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001d8a:	f7ff fdae 	bl	80018ea <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d8e:	2100      	movs	r1, #0
 8001d90:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001d92:	f006 f9d3 	bl	800813c <HAL_UARTEx_SetRxFifoThreshold>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001d9c:	f7ff fda5 	bl	80018ea <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001da0:	4804      	ldr	r0, [pc, #16]	@ (8001db4 <MX_UART4_Init+0x90>)
 8001da2:	f006 f954 	bl	800804e <HAL_UARTEx_DisableFifoMode>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001dac:	f7ff fd9d 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	200003c4 	.word	0x200003c4
 8001db8:	40004c00 	.word	0x40004c00

08001dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b09a      	sub	sp, #104	@ 0x68
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	2244      	movs	r2, #68	@ 0x44
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f00b f8ef 	bl	800cfc0 <memset>
  if(uartHandle->Instance==UART4)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e64 <HAL_UART_MspInit+0xa8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d136      	bne.n	8001e5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dec:	2308      	movs	r3, #8
 8001dee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df4:	f107 0310 	add.w	r3, r7, #16
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f004 ff33 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e04:	f7ff fd71 	bl	80018ea <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e08:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HAL_UART_MspInit+0xac>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	4a16      	ldr	r2, [pc, #88]	@ (8001e68 <HAL_UART_MspInit+0xac>)
 8001e0e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_UART_MspInit+0xac>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <HAL_UART_MspInit+0xac>)
 8001e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e24:	4a10      	ldr	r2, [pc, #64]	@ (8001e68 <HAL_UART_MspInit+0xac>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <HAL_UART_MspInit+0xac>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e46:	2300      	movs	r3, #0
 8001e48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e52:	4619      	mov	r1, r3
 8001e54:	4805      	ldr	r0, [pc, #20]	@ (8001e6c <HAL_UART_MspInit+0xb0>)
 8001e56:	f001 fbc5 	bl	80035e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3768      	adds	r7, #104	@ 0x68
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40004c00 	.word	0x40004c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	48000800 	.word	0x48000800

08001e70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e70:	480d      	ldr	r0, [pc, #52]	@ (8001ea8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e74:	f7ff fee6 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e78:	480c      	ldr	r0, [pc, #48]	@ (8001eac <LoopForever+0x6>)
  ldr r1, =_edata
 8001e7a:	490d      	ldr	r1, [pc, #52]	@ (8001eb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb4 <LoopForever+0xe>)
  movs r3, #0
 8001e7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e80:	e002      	b.n	8001e88 <LoopCopyDataInit>

08001e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e86:	3304      	adds	r3, #4

08001e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e8c:	d3f9      	bcc.n	8001e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e90:	4c0a      	ldr	r4, [pc, #40]	@ (8001ebc <LoopForever+0x16>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e94:	e001      	b.n	8001e9a <LoopFillZerobss>

08001e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e98:	3204      	adds	r2, #4

08001e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e9c:	d3fb      	bcc.n	8001e96 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f00b f89d 	bl	800cfdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ea2:	f7ff fbd1 	bl	8001648 <main>

08001ea6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ea6:	e7fe      	b.n	8001ea6 <LoopForever>
  ldr   r0, =_estack
 8001ea8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001eb4:	0800d9b0 	.word	0x0800d9b0
  ldr r2, =_sbss
 8001eb8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ebc:	20001774 	.word	0x20001774

08001ec0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC1_2_IRQHandler>

08001ec2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f001 f96f 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ed2:	200f      	movs	r0, #15
 8001ed4:	f000 f80e 	bl	8001ef4 <HAL_InitTick>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	71fb      	strb	r3, [r7, #7]
 8001ee2:	e001      	b.n	8001ee8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ee4:	f7ff fe1a 	bl	8001b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ee8:	79fb      	ldrb	r3, [r7, #7]

}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f00:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <HAL_InitTick+0x68>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d022      	beq.n	8001f4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <HAL_InitTick+0x6c>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b13      	ldr	r3, [pc, #76]	@ (8001f5c <HAL_InitTick+0x68>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 f97a 	bl	8003216 <HAL_SYSTICK_Config>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10f      	bne.n	8001f48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b0f      	cmp	r3, #15
 8001f2c:	d809      	bhi.n	8001f42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	f04f 30ff 	mov.w	r0, #4294967295
 8001f36:	f001 f946 	bl	80031c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f64 <HAL_InitTick+0x70>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e007      	b.n	8001f52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
 8001f46:	e004      	b.n	8001f52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e001      	b.n	8001f52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b05      	ldr	r3, [pc, #20]	@ (8001f84 <HAL_IncTick+0x1c>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b05      	ldr	r3, [pc, #20]	@ (8001f88 <HAL_IncTick+0x20>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4413      	add	r3, r2
 8001f76:	4a03      	ldr	r2, [pc, #12]	@ (8001f84 <HAL_IncTick+0x1c>)
 8001f78:	6013      	str	r3, [r2, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	20000458 	.word	0x20000458
 8001f88:	20000008 	.word	0x20000008

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	@ (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000458 	.word	0x20000458

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d004      	beq.n	8001fc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b09      	ldr	r3, [pc, #36]	@ (8001fe4 <HAL_Delay+0x40>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fc8:	bf00      	nop
 8001fca:	f7ff ffdf 	bl	8001f8c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	68fa      	ldr	r2, [r7, #12]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d8f7      	bhi.n	8001fca <HAL_Delay+0x26>
  {
  }
}
 8001fda:	bf00      	nop
 8001fdc:	bf00      	nop
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000008 	.word	0x20000008

08001fe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	609a      	str	r2, [r3, #8]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	609a      	str	r2, [r3, #8]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
 800205c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3360      	adds	r3, #96	@ 0x60
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <LL_ADC_SetOffset+0x44>)
 8002072:	4013      	ands	r3, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	4313      	orrs	r3, r2
 8002080:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002088:	bf00      	nop
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	03fff000 	.word	0x03fff000

08002098 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3360      	adds	r3, #96	@ 0x60
 80020a6:	461a      	mov	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3360      	adds	r3, #96	@ 0x60
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b087      	sub	sp, #28
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3360      	adds	r3, #96	@ 0x60
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	431a      	orrs	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002124:	bf00      	nop
 8002126:	371c      	adds	r7, #28
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3360      	adds	r3, #96	@ 0x60
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	431a      	orrs	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800215a:	bf00      	nop
 800215c:	371c      	adds	r7, #28
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
 800216e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	695b      	ldr	r3, [r3, #20]
 8002174:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	615a      	str	r2, [r3, #20]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800218c:	b480      	push	{r7}
 800218e:	b087      	sub	sp, #28
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	3330      	adds	r3, #48	@ 0x30
 800219c:	461a      	mov	r2, r3
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	4413      	add	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	211f      	movs	r1, #31
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 011f 	and.w	r1, r3, #31
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	f003 031f 	and.w	r3, r3, #31
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	431a      	orrs	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021d8:	bf00      	nop
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3314      	adds	r3, #20
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	0e5b      	lsrs	r3, r3, #25
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	4413      	add	r3, r2
 8002202:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	0d1b      	lsrs	r3, r3, #20
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	2107      	movs	r1, #7
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	401a      	ands	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	0d1b      	lsrs	r3, r3, #20
 800221e:	f003 031f 	and.w	r3, r3, #31
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	fa01 f303 	lsl.w	r3, r1, r3
 8002228:	431a      	orrs	r2, r3
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800222e:	bf00      	nop
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002254:	43db      	mvns	r3, r3
 8002256:	401a      	ands	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0318 	and.w	r3, r3, #24
 800225e:	4908      	ldr	r1, [pc, #32]	@ (8002280 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002260:	40d9      	lsrs	r1, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	400b      	ands	r3, r1
 8002266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800226a:	431a      	orrs	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	0007ffff 	.word	0x0007ffff

08002284 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002294:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6093      	str	r3, [r2, #8]
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022bc:	d101      	bne.n	80022c2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002308:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800230c:	d101      	bne.n	8002312 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800230e:	2301      	movs	r3, #1
 8002310:	e000      	b.n	8002314 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <LL_ADC_IsEnabled+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_IsEnabled+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b04      	cmp	r3, #4
 8002358:	d101      	bne.n	800235e <LL_ADC_REG_IsConversionOngoing+0x18>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b08      	cmp	r3, #8
 800237e:	d101      	bne.n	8002384 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002394:	b590      	push	{r4, r7, lr}
 8002396:	b089      	sub	sp, #36	@ 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e167      	b.n	800267e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d109      	bne.n	80023d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7fe fdcb 	bl	8000f58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff67 	bl	80022a8 <LL_ADC_IsDeepPowerDownEnabled>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff4d 	bl	8002284 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff ff82 	bl	80022f8 <LL_ADC_IsInternalRegulatorEnabled>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d115      	bne.n	8002426 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff66 	bl	80022d0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002404:	4ba0      	ldr	r3, [pc, #640]	@ (8002688 <HAL_ADC_Init+0x2f4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	099b      	lsrs	r3, r3, #6
 800240a:	4aa0      	ldr	r2, [pc, #640]	@ (800268c <HAL_ADC_Init+0x2f8>)
 800240c:	fba2 2303 	umull	r2, r3, r2, r3
 8002410:	099b      	lsrs	r3, r3, #6
 8002412:	3301      	adds	r3, #1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002418:	e002      	b.n	8002420 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	3b01      	subs	r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f9      	bne.n	800241a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff ff64 	bl	80022f8 <LL_ADC_IsInternalRegulatorEnabled>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800243a:	f043 0210 	orr.w	r2, r3, #16
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff ff75 	bl	8002346 <LL_ADC_REG_IsConversionOngoing>
 800245c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	f040 8100 	bne.w	800266c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 80fc 	bne.w	800266c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002478:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800247c:	f043 0202 	orr.w	r2, r3, #2
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff ff49 	bl	8002320 <LL_ADC_IsEnabled>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d111      	bne.n	80024b8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002494:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002498:	f7ff ff42 	bl	8002320 <LL_ADC_IsEnabled>
 800249c:	4604      	mov	r4, r0
 800249e:	487c      	ldr	r0, [pc, #496]	@ (8002690 <HAL_ADC_Init+0x2fc>)
 80024a0:	f7ff ff3e 	bl	8002320 <LL_ADC_IsEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	4323      	orrs	r3, r4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4619      	mov	r1, r3
 80024b2:	4878      	ldr	r0, [pc, #480]	@ (8002694 <HAL_ADC_Init+0x300>)
 80024b4:	f7ff fd98 	bl	8001fe8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7f5b      	ldrb	r3, [r3, #29]
 80024bc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024c2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024c8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024ce:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024d6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d106      	bne.n	80024f4 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	045b      	lsls	r3, r3, #17
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d009      	beq.n	8002510 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002508:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	4b60      	ldr	r3, [pc, #384]	@ (8002698 <HAL_ADC_Init+0x304>)
 8002518:	4013      	ands	r3, r2
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	69b9      	ldr	r1, [r7, #24]
 8002520:	430b      	orrs	r3, r1
 8002522:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff ff14 	bl	800236c <LL_ADC_INJ_IsConversionOngoing>
 8002544:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d16d      	bne.n	8002628 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d16a      	bne.n	8002628 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002556:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800255e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800256e:	f023 0302 	bic.w	r3, r3, #2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	430b      	orrs	r3, r1
 800257a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d017      	beq.n	80025b4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002592:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800259c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6911      	ldr	r1, [r2, #16]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	430b      	orrs	r3, r1
 80025ae:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80025b2:	e013      	b.n	80025dc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691a      	ldr	r2, [r3, #16]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025c2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80025d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025d8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d118      	bne.n	8002618 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025fc:	4311      	orrs	r1, r2
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002602:	4311      	orrs	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002608:	430a      	orrs	r2, r1
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	611a      	str	r2, [r3, #16]
 8002616:	e007      	b.n	8002628 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	691a      	ldr	r2, [r3, #16]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d10c      	bne.n	800264a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f023 010f 	bic.w	r1, r3, #15
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	1e5a      	subs	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
 8002648:	e007      	b.n	800265a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 020f 	bic.w	r2, r2, #15
 8002658:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	f023 0303 	bic.w	r3, r3, #3
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	65da      	str	r2, [r3, #92]	@ 0x5c
 800266a:	e007      	b.n	800267c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002670:	f043 0210 	orr.w	r2, r3, #16
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800267c:	7ffb      	ldrb	r3, [r7, #31]
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	@ 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000
 800268c:	053e2d63 	.word	0x053e2d63
 8002690:	50000100 	.word	0x50000100
 8002694:	50000300 	.word	0x50000300
 8002698:	fff04007 	.word	0xfff04007

0800269c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b0b6      	sub	sp, #216	@ 0xd8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_ADC_ConfigChannel+0x22>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e3c8      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x7b4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fe3b 	bl	8002346 <LL_ADC_REG_IsConversionOngoing>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 83ad 	bne.w	8002e32 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	461a      	mov	r2, r3
 80026e6:	f7ff fd51 	bl	800218c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff fe29 	bl	8002346 <LL_ADC_REG_IsConversionOngoing>
 80026f4:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe35 	bl	800236c <LL_ADC_INJ_IsConversionOngoing>
 8002702:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002706:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 81d9 	bne.w	8002ac2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002714:	2b00      	cmp	r3, #0
 8002716:	f040 81d4 	bne.w	8002ac2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002722:	d10f      	bne.n	8002744 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	4619      	mov	r1, r3
 8002730:	f7ff fd58 	bl	80021e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fd12 	bl	8002166 <LL_ADC_SetSamplingTimeCommonConfig>
 8002742:	e00e      	b.n	8002762 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6819      	ldr	r1, [r3, #0]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	461a      	mov	r2, r3
 8002752:	f7ff fd47 	bl	80021e4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2100      	movs	r1, #0
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fd02 	bl	8002166 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	f003 0303 	and.w	r3, r3, #3
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d022      	beq.n	80027ca <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6919      	ldr	r1, [r3, #16]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002794:	f7ff fc5c 	bl	8002050 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6919      	ldr	r1, [r3, #16]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f7ff fca8 	bl	80020fa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d102      	bne.n	80027c0 <HAL_ADC_ConfigChannel+0x124>
 80027ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027be:	e000      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x126>
 80027c0:	2300      	movs	r3, #0
 80027c2:	461a      	mov	r2, r3
 80027c4:	f7ff fcb4 	bl	8002130 <LL_ADC_SetOffsetSaturation>
 80027c8:	e17b      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fc61 	bl	8002098 <LL_ADC_GetOffsetChannel>
 80027d6:	4603      	mov	r3, r0
 80027d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10a      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x15a>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2100      	movs	r1, #0
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7ff fc56 	bl	8002098 <LL_ADC_GetOffsetChannel>
 80027ec:	4603      	mov	r3, r0
 80027ee:	0e9b      	lsrs	r3, r3, #26
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	e01e      	b.n	8002834 <HAL_ADC_ConfigChannel+0x198>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fc4b 	bl	8002098 <LL_ADC_GetOffsetChannel>
 8002802:	4603      	mov	r3, r0
 8002804:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800281c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e004      	b.n	8002832 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800282c:	fab3 f383 	clz	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_ConfigChannel+0x1b0>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0e9b      	lsrs	r3, r3, #26
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	e018      	b.n	800287e <HAL_ADC_ConfigChannel+0x1e2>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002858:	fa93 f3a3 	rbit	r3, r3
 800285c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002860:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002868:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e004      	b.n	800287e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002874:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002878:	fab3 f383 	clz	r3, r3
 800287c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800287e:	429a      	cmp	r2, r3
 8002880:	d106      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2200      	movs	r2, #0
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fc1a 	bl	80020c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fbfe 	bl	8002098 <LL_ADC_GetOffsetChannel>
 800289c:	4603      	mov	r3, r0
 800289e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_ConfigChannel+0x220>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2101      	movs	r1, #1
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fbf3 	bl	8002098 <LL_ADC_GetOffsetChannel>
 80028b2:	4603      	mov	r3, r0
 80028b4:	0e9b      	lsrs	r3, r3, #26
 80028b6:	f003 021f 	and.w	r2, r3, #31
 80028ba:	e01e      	b.n	80028fa <HAL_ADC_ConfigChannel+0x25e>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2101      	movs	r1, #1
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fbe8 	bl	8002098 <LL_ADC_GetOffsetChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80028da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80028de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80028ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002902:	2b00      	cmp	r3, #0
 8002904:	d105      	bne.n	8002912 <HAL_ADC_ConfigChannel+0x276>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	0e9b      	lsrs	r3, r3, #26
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	e018      	b.n	8002944 <HAL_ADC_ConfigChannel+0x2a8>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002926:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800292a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800292e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002936:	2320      	movs	r3, #32
 8002938:	e004      	b.n	8002944 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800293a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002944:	429a      	cmp	r2, r3
 8002946:	d106      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2200      	movs	r2, #0
 800294e:	2101      	movs	r1, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fbb7 	bl	80020c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2102      	movs	r1, #2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fb9b 	bl	8002098 <LL_ADC_GetOffsetChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x2e6>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2102      	movs	r1, #2
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fb90 	bl	8002098 <LL_ADC_GetOffsetChannel>
 8002978:	4603      	mov	r3, r0
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	f003 021f 	and.w	r2, r3, #31
 8002980:	e01e      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x324>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2102      	movs	r1, #2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fb85 	bl	8002098 <LL_ADC_GetOffsetChannel>
 800298e:	4603      	mov	r3, r0
 8002990:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80029a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80029a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80029b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x33c>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0e9b      	lsrs	r3, r3, #26
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	e016      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x36a>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029e4:	fa93 f3a3 	rbit	r3, r3
 80029e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e004      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80029fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d106      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2102      	movs	r1, #2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fb56 	bl	80020c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2103      	movs	r1, #3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fb3a 	bl	8002098 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x3a8>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2103      	movs	r1, #3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fb2f 	bl	8002098 <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	f003 021f 	and.w	r2, r3, #31
 8002a42:	e017      	b.n	8002a74 <HAL_ADC_ConfigChannel+0x3d8>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2103      	movs	r1, #3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fb24 	bl	8002098 <LL_ADC_GetOffsetChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a56:	fa93 f3a3 	rbit	r3, r3
 8002a5a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a5e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002a66:	2320      	movs	r3, #32
 8002a68:	e003      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002a6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x3f0>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e9b      	lsrs	r3, r3, #26
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	e011      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x414>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a94:	fa93 f3a3 	rbit	r3, r3
 8002a98:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e003      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aaa:	fab3 f383 	clz	r3, r3
 8002aae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	2103      	movs	r1, #3
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fb01 	bl	80020c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc2a 	bl	8002320 <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f040 8140 	bne.w	8002d54 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	6819      	ldr	r1, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f7ff fbab 	bl	800223c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	4a8f      	ldr	r2, [pc, #572]	@ (8002d28 <HAL_ADC_ConfigChannel+0x68c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f040 8131 	bne.w	8002d54 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10b      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0x47e>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	0e9b      	lsrs	r3, r3, #26
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f003 031f 	and.w	r3, r3, #31
 8002b0e:	2b09      	cmp	r3, #9
 8002b10:	bf94      	ite	ls
 8002b12:	2301      	movls	r3, #1
 8002b14:	2300      	movhi	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e019      	b.n	8002b4e <HAL_ADC_ConfigChannel+0x4b2>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b2a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e003      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002b36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	2b09      	cmp	r3, #9
 8002b46:	bf94      	ite	ls
 8002b48:	2301      	movls	r3, #1
 8002b4a:	2300      	movhi	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d079      	beq.n	8002c46 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d107      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x4d2>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	3301      	adds	r3, #1
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b6c:	e015      	b.n	8002b9a <HAL_ADC_ConfigChannel+0x4fe>
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b7e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002b86:	2320      	movs	r3, #32
 8002b88:	e003      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	069b      	lsls	r3, r3, #26
 8002b96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d109      	bne.n	8002bba <HAL_ADC_ConfigChannel+0x51e>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	0e9b      	lsrs	r3, r3, #26
 8002bac:	3301      	adds	r3, #1
 8002bae:	f003 031f 	and.w	r3, r3, #31
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb8:	e017      	b.n	8002bea <HAL_ADC_ConfigChannel+0x54e>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002bc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002bcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002bd2:	2320      	movs	r3, #32
 8002bd4:	e003      	b.n	8002bde <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	3301      	adds	r3, #1
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	2101      	movs	r1, #1
 8002be6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bea:	ea42 0103 	orr.w	r1, r2, r3
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x574>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0e9b      	lsrs	r3, r3, #26
 8002c00:	3301      	adds	r3, #1
 8002c02:	f003 021f 	and.w	r2, r3, #31
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	051b      	lsls	r3, r3, #20
 8002c0e:	e018      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x5a6>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e003      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	3301      	adds	r3, #1
 8002c36:	f003 021f 	and.w	r2, r3, #31
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	4413      	add	r3, r2
 8002c40:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c42:	430b      	orrs	r3, r1
 8002c44:	e081      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x5c6>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	3301      	adds	r3, #1
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c60:	e015      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x5f2>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c72:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x612>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	e017      	b.n	8002cde <HAL_ADC_ConfigChannel+0x642>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	61fb      	str	r3, [r7, #28]
  return result;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	ea42 0103 	orr.w	r1, r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10d      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x66e>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	0e9b      	lsrs	r3, r3, #26
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f003 021f 	and.w	r2, r3, #31
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	3b1e      	subs	r3, #30
 8002d02:	051b      	lsls	r3, r3, #20
 8002d04:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d08:	e01e      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x6ac>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	613b      	str	r3, [r7, #16]
  return result;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d104      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e006      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x698>
 8002d26:	bf00      	nop
 8002d28:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	3301      	adds	r3, #1
 8002d36:	f003 021f 	and.w	r2, r3, #31
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	4413      	add	r3, r2
 8002d40:	3b1e      	subs	r3, #30
 8002d42:	051b      	lsls	r3, r3, #20
 8002d44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d48:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d4e:	4619      	mov	r1, r3
 8002d50:	f7ff fa48 	bl	80021e4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b3f      	ldr	r3, [pc, #252]	@ (8002e58 <HAL_ADC_ConfigChannel+0x7bc>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d071      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d60:	483e      	ldr	r0, [pc, #248]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8002d62:	f7ff f967 	bl	8002034 <LL_ADC_GetCommonPathInternalCh>
 8002d66:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a3c      	ldr	r2, [pc, #240]	@ (8002e60 <HAL_ADC_ConfigChannel+0x7c4>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d004      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x6e2>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a3a      	ldr	r2, [pc, #232]	@ (8002e64 <HAL_ADC_ConfigChannel+0x7c8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d127      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d121      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d92:	d157      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	482f      	ldr	r0, [pc, #188]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8002da0:	f7ff f935 	bl	800200e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002da4:	4b30      	ldr	r3, [pc, #192]	@ (8002e68 <HAL_ADC_ConfigChannel+0x7cc>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	099b      	lsrs	r3, r3, #6
 8002daa:	4a30      	ldr	r2, [pc, #192]	@ (8002e6c <HAL_ADC_ConfigChannel+0x7d0>)
 8002dac:	fba2 2303 	umull	r2, r3, r2, r3
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dbe:	e002      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f9      	bne.n	8002dc0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dcc:	e03a      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a27      	ldr	r2, [pc, #156]	@ (8002e70 <HAL_ADC_ConfigChannel+0x7d4>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d113      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002dd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ddc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10d      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a22      	ldr	r2, [pc, #136]	@ (8002e74 <HAL_ADC_ConfigChannel+0x7d8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d02a      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002df6:	4619      	mov	r1, r3
 8002df8:	4818      	ldr	r0, [pc, #96]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8002dfa:	f7ff f908 	bl	800200e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dfe:	e021      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a1c      	ldr	r2, [pc, #112]	@ (8002e78 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d11c      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d116      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a16      	ldr	r2, [pc, #88]	@ (8002e74 <HAL_ADC_ConfigChannel+0x7d8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d011      	beq.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e28:	4619      	mov	r1, r3
 8002e2a:	480c      	ldr	r0, [pc, #48]	@ (8002e5c <HAL_ADC_ConfigChannel+0x7c0>)
 8002e2c:	f7ff f8ef 	bl	800200e <LL_ADC_SetCommonPathInternalCh>
 8002e30:	e008      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e36:	f043 0220 	orr.w	r2, r3, #32
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	37d8      	adds	r7, #216	@ 0xd8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	80080000 	.word	0x80080000
 8002e5c:	50000300 	.word	0x50000300
 8002e60:	c3210000 	.word	0xc3210000
 8002e64:	90c00010 	.word	0x90c00010
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	053e2d63 	.word	0x053e2d63
 8002e70:	c7520000 	.word	0xc7520000
 8002e74:	50000100 	.word	0x50000100
 8002e78:	cb840000 	.word	0xcb840000

08002e7c <LL_ADC_IsEnabled>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <LL_ADC_IsEnabled+0x18>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <LL_ADC_IsEnabled+0x1a>
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <LL_ADC_REG_IsConversionOngoing>:
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	d101      	bne.n	8002eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002ec8:	b590      	push	{r4, r7, lr}
 8002eca:	b0a1      	sub	sp, #132	@ 0x84
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d101      	bne.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e08b      	b.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eee:	2300      	movs	r3, #0
 8002ef0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002efe:	d102      	bne.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002f00:	4b41      	ldr	r3, [pc, #260]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f02:	60bb      	str	r3, [r7, #8]
 8002f04:	e001      	b.n	8002f0a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002f06:	2300      	movs	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10b      	bne.n	8002f28 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f14:	f043 0220 	orr.w	r2, r3, #32
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e06a      	b.n	8002ffe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ffb9 	bl	8002ea2 <LL_ADC_REG_IsConversionOngoing>
 8002f30:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7ff ffb3 	bl	8002ea2 <LL_ADC_REG_IsConversionOngoing>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d14c      	bne.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d149      	bne.n	8002fdc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f48:	4b30      	ldr	r3, [pc, #192]	@ (800300c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002f4a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d028      	beq.n	8002fa6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f66:	035b      	lsls	r3, r3, #13
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f6e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002f74:	f7ff ff82 	bl	8002e7c <LL_ADC_IsEnabled>
 8002f78:	4604      	mov	r4, r0
 8002f7a:	4823      	ldr	r0, [pc, #140]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002f7c:	f7ff ff7e 	bl	8002e7c <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4323      	orrs	r3, r4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d133      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002f90:	f023 030f 	bic.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	6811      	ldr	r1, [r2, #0]
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fa4:	e024      	b.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fa6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002fb6:	f7ff ff61 	bl	8002e7c <LL_ADC_IsEnabled>
 8002fba:	4604      	mov	r4, r0
 8002fbc:	4812      	ldr	r0, [pc, #72]	@ (8003008 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002fbe:	f7ff ff5d 	bl	8002e7c <LL_ADC_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4323      	orrs	r3, r4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d112      	bne.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002fd2:	f023 030f 	bic.w	r3, r3, #15
 8002fd6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002fd8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002fda:	e009      	b.n	8002ff0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe0:	f043 0220 	orr.w	r2, r3, #32
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002fee:	e000      	b.n	8002ff2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ffa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3784      	adds	r7, #132	@ 0x84
 8003002:	46bd      	mov	sp, r7
 8003004:	bd90      	pop	{r4, r7, pc}
 8003006:	bf00      	nop
 8003008:	50000100 	.word	0x50000100
 800300c:	50000300 	.word	0x50000300

08003010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003020:	4b0c      	ldr	r3, [pc, #48]	@ (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800302c:	4013      	ands	r3, r2
 800302e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800303c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003042:	4a04      	ldr	r2, [pc, #16]	@ (8003054 <__NVIC_SetPriorityGrouping+0x44>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	60d3      	str	r3, [r2, #12]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800305c:	4b04      	ldr	r3, [pc, #16]	@ (8003070 <__NVIC_GetPriorityGrouping+0x18>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	f003 0307 	and.w	r3, r3, #7
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	db0b      	blt.n	800309e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4907      	ldr	r1, [pc, #28]	@ (80030ac <__NVIC_EnableIRQ+0x38>)
 800308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2001      	movs	r0, #1
 8003096:	fa00 f202 	lsl.w	r2, r0, r2
 800309a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	e000e100 	.word	0xe000e100

080030b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4603      	mov	r3, r0
 80030b8:	6039      	str	r1, [r7, #0]
 80030ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	db0a      	blt.n	80030da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	490c      	ldr	r1, [pc, #48]	@ (80030fc <__NVIC_SetPriority+0x4c>)
 80030ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ce:	0112      	lsls	r2, r2, #4
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	440b      	add	r3, r1
 80030d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030d8:	e00a      	b.n	80030f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4908      	ldr	r1, [pc, #32]	@ (8003100 <__NVIC_SetPriority+0x50>)
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	3b04      	subs	r3, #4
 80030e8:	0112      	lsls	r2, r2, #4
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	440b      	add	r3, r1
 80030ee:	761a      	strb	r2, [r3, #24]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000e100 	.word	0xe000e100
 8003100:	e000ed00 	.word	0xe000ed00

08003104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003104:	b480      	push	{r7}
 8003106:	b089      	sub	sp, #36	@ 0x24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f1c3 0307 	rsb	r3, r3, #7
 800311e:	2b04      	cmp	r3, #4
 8003120:	bf28      	it	cs
 8003122:	2304      	movcs	r3, #4
 8003124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	3304      	adds	r3, #4
 800312a:	2b06      	cmp	r3, #6
 800312c:	d902      	bls.n	8003134 <NVIC_EncodePriority+0x30>
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3b03      	subs	r3, #3
 8003132:	e000      	b.n	8003136 <NVIC_EncodePriority+0x32>
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003138:	f04f 32ff 	mov.w	r2, #4294967295
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	401a      	ands	r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800314c:	f04f 31ff 	mov.w	r1, #4294967295
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	43d9      	mvns	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	4313      	orrs	r3, r2
         );
}
 800315e:	4618      	mov	r0, r3
 8003160:	3724      	adds	r7, #36	@ 0x24
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
	...

0800316c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800317c:	d301      	bcc.n	8003182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800317e:	2301      	movs	r3, #1
 8003180:	e00f      	b.n	80031a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003182:	4a0a      	ldr	r2, [pc, #40]	@ (80031ac <SysTick_Config+0x40>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3b01      	subs	r3, #1
 8003188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800318a:	210f      	movs	r1, #15
 800318c:	f04f 30ff 	mov.w	r0, #4294967295
 8003190:	f7ff ff8e 	bl	80030b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003194:	4b05      	ldr	r3, [pc, #20]	@ (80031ac <SysTick_Config+0x40>)
 8003196:	2200      	movs	r2, #0
 8003198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800319a:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <SysTick_Config+0x40>)
 800319c:	2207      	movs	r2, #7
 800319e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	e000e010 	.word	0xe000e010

080031b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f7ff ff29 	bl	8003010 <__NVIC_SetPriorityGrouping>
}
 80031be:	bf00      	nop
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b086      	sub	sp, #24
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031d4:	f7ff ff40 	bl	8003058 <__NVIC_GetPriorityGrouping>
 80031d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68b9      	ldr	r1, [r7, #8]
 80031de:	6978      	ldr	r0, [r7, #20]
 80031e0:	f7ff ff90 	bl	8003104 <NVIC_EncodePriority>
 80031e4:	4602      	mov	r2, r0
 80031e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff5f 	bl	80030b0 <__NVIC_SetPriority>
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	4603      	mov	r3, r0
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff33 	bl	8003074 <__NVIC_EnableIRQ>
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b082      	sub	sp, #8
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ffa4 	bl	800316c <SysTick_Config>
 8003224:	4603      	mov	r3, r0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e014      	b.n	800326a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	791b      	ldrb	r3, [r3, #4]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f7fd ff9d 	bl	8001190 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2202      	movs	r2, #2
 800325a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b08a      	sub	sp, #40	@ 0x28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_DAC_ConfigChannel+0x1c>
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e19e      	b.n	80035d2 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	795b      	ldrb	r3, [r3, #5]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_DAC_ConfigChannel+0x2c>
 800329c:	2302      	movs	r3, #2
 800329e:	e198      	b.n	80035d2 <HAL_DAC_ConfigChannel+0x35e>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2202      	movs	r2, #2
 80032aa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d17a      	bne.n	80033aa <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80032b4:	f7fe fe6a 	bl	8001f8c <HAL_GetTick>
 80032b8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d13d      	bne.n	800333c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032c0:	e018      	b.n	80032f4 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80032c2:	f7fe fe63 	bl	8001f8c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d911      	bls.n	80032f4 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f043 0208 	orr.w	r2, r3, #8
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2203      	movs	r2, #3
 80032ee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e16e      	b.n	80035d2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1df      	bne.n	80032c2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800330a:	641a      	str	r2, [r3, #64]	@ 0x40
 800330c:	e020      	b.n	8003350 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800330e:	f7fe fe3d 	bl	8001f8c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d90f      	bls.n	800333c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003322:	2b00      	cmp	r3, #0
 8003324:	da0a      	bge.n	800333c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f043 0208 	orr.w	r2, r3, #8
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2203      	movs	r2, #3
 8003336:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e14a      	b.n	80035d2 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003342:	2b00      	cmp	r3, #0
 8003344:	dbe3      	blt.n	800330e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800334e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003360:	fa01 f303 	lsl.w	r3, r1, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	ea02 0103 	and.w	r1, r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	409a      	lsls	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	21ff      	movs	r1, #255	@ 0xff
 800338c:	fa01 f303 	lsl.w	r3, r1, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	ea02 0103 	and.w	r1, r2, r3
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d11d      	bne.n	80033ee <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	221f      	movs	r2, #31
 80033c2:	fa02 f303 	lsl.w	r3, r2, r3
 80033c6:	43db      	mvns	r3, r3
 80033c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ca:	4013      	ands	r3, r2
 80033cc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e2:	4313      	orrs	r3, r2
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ec:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2207      	movs	r2, #7
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003406:	4013      	ands	r3, r2
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d102      	bne.n	8003418 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003412:	2300      	movs	r3, #0
 8003414:	623b      	str	r3, [r7, #32]
 8003416:	e00f      	b.n	8003438 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d102      	bne.n	8003426 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003420:	2301      	movs	r3, #1
 8003422:	623b      	str	r3, [r7, #32]
 8003424:	e008      	b.n	8003438 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d102      	bne.n	8003434 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800342e:	2301      	movs	r3, #1
 8003430:	623b      	str	r3, [r7, #32]
 8003432:	e001      	b.n	8003438 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003434:	2300      	movs	r3, #0
 8003436:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	6a3a      	ldr	r2, [r7, #32]
 8003444:	4313      	orrs	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f003 0310 	and.w	r3, r3, #16
 800344e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345a:	4013      	ands	r3, r2
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	791b      	ldrb	r3, [r3, #4]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d102      	bne.n	800346c <HAL_DAC_ConfigChannel+0x1f8>
 8003466:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800346a:	e000      	b.n	800346e <HAL_DAC_ConfigChannel+0x1fa>
 800346c:	2300      	movs	r3, #0
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f003 0310 	and.w	r3, r3, #16
 800347a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003486:	4013      	ands	r3, r2
 8003488:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	795b      	ldrb	r3, [r3, #5]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d102      	bne.n	8003498 <HAL_DAC_ConfigChannel+0x224>
 8003492:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003496:	e000      	b.n	800349a <HAL_DAC_ConfigChannel+0x226>
 8003498:	2300      	movs	r3, #0
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80034a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d114      	bne.n	80034da <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80034b0:	f003 fb5a 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 80034b4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4a48      	ldr	r2, [pc, #288]	@ (80035dc <HAL_DAC_ConfigChannel+0x368>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d904      	bls.n	80034c8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80034be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034c6:	e00f      	b.n	80034e8 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	4a45      	ldr	r2, [pc, #276]	@ (80035e0 <HAL_DAC_ConfigChannel+0x36c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d90a      	bls.n	80034e6 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d8:	e006      	b.n	80034e8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034e0:	4313      	orrs	r3, r2
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034e4:	e000      	b.n	80034e8 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80034e6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f6:	4313      	orrs	r3, r2
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6819      	ldr	r1, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f003 0310 	and.w	r3, r3, #16
 800350e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43da      	mvns	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	400a      	ands	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 0310 	and.w	r3, r3, #16
 800352e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800353a:	4013      	ands	r3, r2
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 0310 	and.w	r3, r3, #16
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	4313      	orrs	r3, r2
 8003554:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800355c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0310 	and.w	r3, r3, #16
 800356a:	22c0      	movs	r2, #192	@ 0xc0
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43da      	mvns	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	089b      	lsrs	r3, r3, #2
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80035a8:	fa01 f303 	lsl.w	r3, r1, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	ea02 0103 	and.w	r1, r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80035d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3728      	adds	r7, #40	@ 0x28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	09896800 	.word	0x09896800
 80035e0:	04c4b400 	.word	0x04c4b400

080035e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80035f2:	e15a      	b.n	80038aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	2101      	movs	r1, #1
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003600:	4013      	ands	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 814c 	beq.w	80038a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0303 	and.w	r3, r3, #3
 8003614:	2b01      	cmp	r3, #1
 8003616:	d005      	beq.n	8003624 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003620:	2b02      	cmp	r3, #2
 8003622:	d130      	bne.n	8003686 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	2203      	movs	r2, #3
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800365a:	2201      	movs	r2, #1
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 0201 	and.w	r2, r3, #1
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b03      	cmp	r3, #3
 8003690:	d017      	beq.n	80036c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	2203      	movs	r2, #3
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d123      	bne.n	8003716 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	08da      	lsrs	r2, r3, #3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3208      	adds	r2, #8
 80036d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	43db      	mvns	r3, r3
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	4013      	ands	r3, r2
 80036f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 0307 	and.w	r3, r3, #7
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	08da      	lsrs	r2, r3, #3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3208      	adds	r2, #8
 8003710:	6939      	ldr	r1, [r7, #16]
 8003712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	2203      	movs	r2, #3
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43db      	mvns	r3, r3
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4013      	ands	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 0203 	and.w	r2, r3, #3
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 80a6 	beq.w	80038a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003758:	4b5b      	ldr	r3, [pc, #364]	@ (80038c8 <HAL_GPIO_Init+0x2e4>)
 800375a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375c:	4a5a      	ldr	r2, [pc, #360]	@ (80038c8 <HAL_GPIO_Init+0x2e4>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6613      	str	r3, [r2, #96]	@ 0x60
 8003764:	4b58      	ldr	r3, [pc, #352]	@ (80038c8 <HAL_GPIO_Init+0x2e4>)
 8003766:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003770:	4a56      	ldr	r2, [pc, #344]	@ (80038cc <HAL_GPIO_Init+0x2e8>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800377c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	220f      	movs	r2, #15
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4013      	ands	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800379a:	d01f      	beq.n	80037dc <HAL_GPIO_Init+0x1f8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a4c      	ldr	r2, [pc, #304]	@ (80038d0 <HAL_GPIO_Init+0x2ec>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d019      	beq.n	80037d8 <HAL_GPIO_Init+0x1f4>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a4b      	ldr	r2, [pc, #300]	@ (80038d4 <HAL_GPIO_Init+0x2f0>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d013      	beq.n	80037d4 <HAL_GPIO_Init+0x1f0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a4a      	ldr	r2, [pc, #296]	@ (80038d8 <HAL_GPIO_Init+0x2f4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d00d      	beq.n	80037d0 <HAL_GPIO_Init+0x1ec>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a49      	ldr	r2, [pc, #292]	@ (80038dc <HAL_GPIO_Init+0x2f8>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d007      	beq.n	80037cc <HAL_GPIO_Init+0x1e8>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a48      	ldr	r2, [pc, #288]	@ (80038e0 <HAL_GPIO_Init+0x2fc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d101      	bne.n	80037c8 <HAL_GPIO_Init+0x1e4>
 80037c4:	2305      	movs	r3, #5
 80037c6:	e00a      	b.n	80037de <HAL_GPIO_Init+0x1fa>
 80037c8:	2306      	movs	r3, #6
 80037ca:	e008      	b.n	80037de <HAL_GPIO_Init+0x1fa>
 80037cc:	2304      	movs	r3, #4
 80037ce:	e006      	b.n	80037de <HAL_GPIO_Init+0x1fa>
 80037d0:	2303      	movs	r3, #3
 80037d2:	e004      	b.n	80037de <HAL_GPIO_Init+0x1fa>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e002      	b.n	80037de <HAL_GPIO_Init+0x1fa>
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_GPIO_Init+0x1fa>
 80037dc:	2300      	movs	r3, #0
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	f002 0203 	and.w	r2, r2, #3
 80037e4:	0092      	lsls	r2, r2, #2
 80037e6:	4093      	lsls	r3, r2
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037ee:	4937      	ldr	r1, [pc, #220]	@ (80038cc <HAL_GPIO_Init+0x2e8>)
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	089b      	lsrs	r3, r3, #2
 80037f4:	3302      	adds	r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037fc:	4b39      	ldr	r3, [pc, #228]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003820:	4a30      	ldr	r2, [pc, #192]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003826:	4b2f      	ldr	r3, [pc, #188]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4013      	ands	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4313      	orrs	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800384a:	4a26      	ldr	r2, [pc, #152]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003850:	4b24      	ldr	r3, [pc, #144]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	43db      	mvns	r3, r3
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4013      	ands	r3, r2
 800385e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003874:	4a1b      	ldr	r2, [pc, #108]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800387a:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	43db      	mvns	r3, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4013      	ands	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800389e:	4a11      	ldr	r2, [pc, #68]	@ (80038e4 <HAL_GPIO_Init+0x300>)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	3301      	adds	r3, #1
 80038a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f47f ae9d 	bne.w	80035f4 <HAL_GPIO_Init+0x10>
  }
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010000 	.word	0x40010000
 80038d0:	48000400 	.word	0x48000400
 80038d4:	48000800 	.word	0x48000800
 80038d8:	48000c00 	.word	0x48000c00
 80038dc:	48001000 	.word	0x48001000
 80038e0:	48001400 	.word	0x48001400
 80038e4:	40010400 	.word	0x40010400

080038e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
 80038f4:	4613      	mov	r3, r2
 80038f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f8:	787b      	ldrb	r3, [r7, #1]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003904:	e002      	b.n	800390c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003906:	887a      	ldrh	r2, [r7, #2]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800392a:	887a      	ldrh	r2, [r7, #2]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4013      	ands	r3, r2
 8003930:	041a      	lsls	r2, r3, #16
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	43d9      	mvns	r1, r3
 8003936:	887b      	ldrh	r3, [r7, #2]
 8003938:	400b      	ands	r3, r1
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	619a      	str	r2, [r3, #24]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e08d      	b.n	8003a7a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd fd56 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	@ 0x24
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800399c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	e006      	b.n	80039d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80039d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d108      	bne.n	80039ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	e007      	b.n	80039fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a10:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a20:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	691a      	ldr	r2, [r3, #16]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	69d9      	ldr	r1, [r3, #28]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1a      	ldr	r2, [r3, #32]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
 8003a94:	4613      	mov	r3, r2
 8003a96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	f040 80fd 	bne.w	8003ca0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_I2C_Master_Transmit+0x30>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0f6      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x21e>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003abc:	f7fe fa66 	bl	8001f8c <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	2319      	movs	r3, #25
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 fa0a 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0e1      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2221      	movs	r2, #33	@ 0x21
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2210      	movs	r2, #16
 8003aea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	893a      	ldrh	r2, [r7, #8]
 8003afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2bff      	cmp	r3, #255	@ 0xff
 8003b0e:	d906      	bls.n	8003b1e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	22ff      	movs	r2, #255	@ 0xff
 8003b14:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003b16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e007      	b.n	8003b2e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003b28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b2c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d024      	beq.n	8003b80 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	781a      	ldrb	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	8979      	ldrh	r1, [r7, #10]
 8003b72:	4b4e      	ldr	r3, [pc, #312]	@ (8003cac <HAL_I2C_Master_Transmit+0x228>)
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fc05 	bl	8004388 <I2C_TransferConfig>
 8003b7e:	e066      	b.n	8003c4e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	4b48      	ldr	r3, [pc, #288]	@ (8003cac <HAL_I2C_Master_Transmit+0x228>)
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fbfa 	bl	8004388 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003b94:	e05b      	b.n	8003c4e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	6a39      	ldr	r1, [r7, #32]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f000 f9fd 	bl	8003f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07b      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	781a      	ldrb	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b29a      	uxth	r2, r3
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d034      	beq.n	8003c4e <HAL_I2C_Master_Transmit+0x1ca>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d130      	bne.n	8003c4e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2180      	movs	r1, #128	@ 0x80
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f976 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e04d      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2bff      	cmp	r3, #255	@ 0xff
 8003c0e:	d90e      	bls.n	8003c2e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	22ff      	movs	r2, #255	@ 0xff
 8003c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	8979      	ldrh	r1, [r7, #10]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	9300      	str	r3, [sp, #0]
 8003c22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fbae 	bl	8004388 <I2C_TransferConfig>
 8003c2c:	e00f      	b.n	8003c4e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	8979      	ldrh	r1, [r7, #10]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 fb9d 	bl	8004388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d19e      	bne.n	8003b96 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	6a39      	ldr	r1, [r7, #32]
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 f9e3 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e01a      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2220      	movs	r2, #32
 8003c72:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb0 <HAL_I2C_Master_Transmit+0x22c>)
 8003c80:	400b      	ands	r3, r1
 8003c82:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e000      	b.n	8003ca2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003ca0:	2302      	movs	r3, #2
  }
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	80002000 	.word	0x80002000
 8003cb0:	fe00e800 	.word	0xfe00e800

08003cb4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	817b      	strh	r3, [r7, #10]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	f040 80db 	bne.w	8003e8c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d101      	bne.n	8003ce4 <HAL_I2C_Master_Receive+0x30>
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	e0d4      	b.n	8003e8e <HAL_I2C_Master_Receive+0x1da>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cec:	f7fe f94e 	bl	8001f8c <HAL_GetTick>
 8003cf0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2319      	movs	r3, #25
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8f2 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0bf      	b.n	8003e8e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2222      	movs	r2, #34	@ 0x22
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2210      	movs	r2, #16
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	893a      	ldrh	r2, [r7, #8]
 8003d2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	2bff      	cmp	r3, #255	@ 0xff
 8003d3e:	d90e      	bls.n	8003d5e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	22ff      	movs	r2, #255	@ 0xff
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	8979      	ldrh	r1, [r7, #10]
 8003d4e:	4b52      	ldr	r3, [pc, #328]	@ (8003e98 <HAL_I2C_Master_Receive+0x1e4>)
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb16 	bl	8004388 <I2C_TransferConfig>
 8003d5c:	e06d      	b.n	8003e3a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8979      	ldrh	r1, [r7, #10]
 8003d70:	4b49      	ldr	r3, [pc, #292]	@ (8003e98 <HAL_I2C_Master_Receive+0x1e4>)
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fb05 	bl	8004388 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003d7e:	e05c      	b.n	8003e3a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	6a39      	ldr	r1, [r7, #32]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f993 	bl	80040b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e07c      	b.n	8003e8e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d034      	beq.n	8003e3a <HAL_I2C_Master_Receive+0x186>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d130      	bne.n	8003e3a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	2200      	movs	r2, #0
 8003de0:	2180      	movs	r1, #128	@ 0x80
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f880 	bl	8003ee8 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e04d      	b.n	8003e8e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2bff      	cmp	r3, #255	@ 0xff
 8003dfa:	d90e      	bls.n	8003e1a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	22ff      	movs	r2, #255	@ 0xff
 8003e00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	8979      	ldrh	r1, [r7, #10]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fab8 	bl	8004388 <I2C_TransferConfig>
 8003e18:	e00f      	b.n	8003e3a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	8979      	ldrh	r1, [r7, #10]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f000 faa7 	bl	8004388 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d19d      	bne.n	8003d80 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	6a39      	ldr	r1, [r7, #32]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 f8ed 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01a      	b.n	8003e8e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6859      	ldr	r1, [r3, #4]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e9c <HAL_I2C_Master_Receive+0x1e8>)
 8003e6c:	400b      	ands	r3, r1
 8003e6e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	80002400 	.word	0x80002400
 8003e9c:	fe00e800 	.word	0xfe00e800

08003ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d103      	bne.n	8003ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f003 0301 	and.w	r3, r3, #1
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d007      	beq.n	8003edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 0201 	orr.w	r2, r2, #1
 8003eda:	619a      	str	r2, [r3, #24]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef8:	e03b      	b.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	6839      	ldr	r1, [r7, #0]
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f000 f962 	bl	80041c8 <I2C_IsErrorOccurred>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e041      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f14:	d02d      	beq.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f16:	f7fe f839 	bl	8001f8c <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d302      	bcc.n	8003f2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d122      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699a      	ldr	r2, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4013      	ands	r3, r2
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	bf0c      	ite	eq
 8003f3c:	2301      	moveq	r3, #1
 8003f3e:	2300      	movne	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	461a      	mov	r2, r3
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d113      	bne.n	8003f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e00f      	b.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699a      	ldr	r2, [r3, #24]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	bf0c      	ite	eq
 8003f82:	2301      	moveq	r3, #1
 8003f84:	2300      	movne	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	79fb      	ldrb	r3, [r7, #7]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d0b4      	beq.n	8003efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fa6:	e033      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	68b9      	ldr	r1, [r7, #8]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f90b 	bl	80041c8 <I2C_IsErrorOccurred>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e031      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d025      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fd ffe2 	bl	8001f8c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11a      	bne.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d013      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e007      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d1c4      	bne.n	8003fa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	e02f      	b.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f8c4 	bl	80041c8 <I2C_IsErrorOccurred>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e02d      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fd ff9f 	bl	8001f8c <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11a      	bne.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b20      	cmp	r3, #32
 800406c:	d013      	beq.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	f043 0220 	orr.w	r2, r3, #32
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e007      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d1c8      	bne.n	8004036 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2300      	movs	r3, #0
 80040be:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80040c0:	e071      	b.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 f87e 	bl	80041c8 <I2C_IsErrorOccurred>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	f003 0320 	and.w	r3, r3, #32
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d13b      	bne.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d138      	bne.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d105      	bne.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	d121      	bne.n	8004156 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2210      	movs	r2, #16
 8004118:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2204      	movs	r2, #4
 800411e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2220      	movs	r2, #32
 8004126:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8004134:	400b      	ands	r3, r1
 8004136:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	75fb      	strb	r3, [r7, #23]
 8004154:	e002      	b.n	800415c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800415c:	f7fd ff16 	bl	8001f8c <HAL_GetTick>
 8004160:	4602      	mov	r2, r0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	429a      	cmp	r2, r3
 800416a:	d302      	bcc.n	8004172 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d119      	bne.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d116      	bne.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00f      	beq.n	80041a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418a:	f043 0220 	orr.w	r2, r3, #32
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d002      	beq.n	80041ba <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80041b4:	7dfb      	ldrb	r3, [r7, #23]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d083      	beq.n	80040c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80041ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3718      	adds	r7, #24
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	fe00e800 	.word	0xfe00e800

080041c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	@ 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d068      	beq.n	80042c6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2210      	movs	r2, #16
 80041fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041fc:	e049      	b.n	8004292 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d045      	beq.n	8004292 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fd fec1 	bl	8001f8c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <I2C_IsErrorOccurred+0x54>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d13a      	bne.n	8004292 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004226:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800422e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800423a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800423e:	d121      	bne.n	8004284 <I2C_IsErrorOccurred+0xbc>
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004246:	d01d      	beq.n	8004284 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b20      	cmp	r3, #32
 800424c:	d01a      	beq.n	8004284 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800425c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800425e:	f7fd fe95 	bl	8001f8c <HAL_GetTick>
 8004262:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004264:	e00e      	b.n	8004284 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004266:	f7fd fe91 	bl	8001f8c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b19      	cmp	r3, #25
 8004272:	d907      	bls.n	8004284 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f043 0320 	orr.w	r3, r3, #32
 800427a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004282:	e006      	b.n	8004292 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d1e9      	bne.n	8004266 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	f003 0320 	and.w	r3, r3, #32
 800429c:	2b20      	cmp	r3, #32
 800429e:	d003      	beq.n	80042a8 <I2C_IsErrorOccurred+0xe0>
 80042a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d0aa      	beq.n	80041fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2220      	movs	r2, #32
 80042b6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f043 0304 	orr.w	r3, r3, #4
 80042be:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00b      	beq.n	80042f0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80042e8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800430a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	f043 0302 	orr.w	r3, r3, #2
 8004322:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800432c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01c      	beq.n	8004376 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff fdaf 	bl	8003ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <I2C_IsErrorOccurred+0x1bc>)
 800434e:	400b      	ands	r3, r1
 8004350:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	431a      	orrs	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800437a:	4618      	mov	r0, r3
 800437c:	3728      	adds	r7, #40	@ 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	fe00e800 	.word	0xfe00e800

08004388 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	460b      	mov	r3, r1
 8004394:	817b      	strh	r3, [r7, #10]
 8004396:	4613      	mov	r3, r2
 8004398:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800439a:	897b      	ldrh	r3, [r7, #10]
 800439c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043a0:	7a7b      	ldrb	r3, [r7, #9]
 80043a2:	041b      	lsls	r3, r3, #16
 80043a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	6a3b      	ldr	r3, [r7, #32]
 80043c0:	0d5b      	lsrs	r3, r3, #21
 80043c2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80043c6:	4b08      	ldr	r3, [pc, #32]	@ (80043e8 <I2C_TransferConfig+0x60>)
 80043c8:	430b      	orrs	r3, r1
 80043ca:	43db      	mvns	r3, r3
 80043cc:	ea02 0103 	and.w	r1, r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043da:	bf00      	nop
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	03ff63ff 	.word	0x03ff63ff

080043ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d138      	bne.n	8004474 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800440c:	2302      	movs	r3, #2
 800440e:	e032      	b.n	8004476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	@ 0x24
 800441c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800443e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6819      	ldr	r1, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004482:	b480      	push	{r7}
 8004484:	b085      	sub	sp, #20
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
 800448a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b20      	cmp	r3, #32
 8004496:	d139      	bne.n	800450c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d101      	bne.n	80044a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044a2:	2302      	movs	r3, #2
 80044a4:	e033      	b.n	800450e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2224      	movs	r2, #36	@ 0x24
 80044b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0201 	bic.w	r2, r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0201 	orr.w	r2, r2, #1
 80044f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e087      	b.n	800463e <HAL_LPTIM_Init+0x122>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc ffe1 	bl	8001510 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d004      	beq.n	8004570 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800456e:	d103      	bne.n	8004578 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 031e 	bic.w	r3, r3, #30
 8004576:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004580:	4293      	cmp	r3, r2
 8004582:	d003      	beq.n	800458c <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4b30      	ldr	r3, [pc, #192]	@ (8004648 <HAL_LPTIM_Init+0x12c>)
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	4b2f      	ldr	r3, [pc, #188]	@ (800464c <HAL_LPTIM_Init+0x130>)
 8004590:	4013      	ands	r3, r2
 8004592:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800459c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80045a2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80045a8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80045ae:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80045b0:	68fa      	ldr	r2, [r7, #12]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80045c6:	4313      	orrs	r3, r2
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d004      	beq.n	80045e0 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80045de:	d107      	bne.n	80045f0 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80045e8:	4313      	orrs	r3, r2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00a      	beq.n	8004612 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004604:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800460a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a0c      	ldr	r2, [pc, #48]	@ (8004650 <HAL_LPTIM_Init+0x134>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d107      	bne.n	8004634 <HAL_LPTIM_Init+0x118>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	dfff1f3f 	.word	0xdfff1f3f
 800464c:	ff19f1fe 	.word	0xff19f1fe
 8004650:	40007c00 	.word	0x40007c00

08004654 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0c0      	b.n	80047e8 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f008 f968 	bl	800c950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2203      	movs	r2, #3
 8004684:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f003 ffb1 	bl	80085f4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	e03e      	b.n	8004716 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	440b      	add	r3, r1
 80046a6:	3311      	adds	r3, #17
 80046a8:	2201      	movs	r2, #1
 80046aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	440b      	add	r3, r1
 80046ba:	3310      	adds	r3, #16
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046c0:	7bfa      	ldrb	r2, [r7, #15]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	3313      	adds	r3, #19
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	440b      	add	r3, r1
 80046e2:	3320      	adds	r3, #32
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	440b      	add	r3, r1
 80046f6:	3324      	adds	r3, #36	@ 0x24
 80046f8:	2200      	movs	r2, #0
 80046fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	4613      	mov	r3, r2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	440b      	add	r3, r1
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	3301      	adds	r3, #1
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	791b      	ldrb	r3, [r3, #4]
 800471a:	7bfa      	ldrb	r2, [r7, #15]
 800471c:	429a      	cmp	r2, r3
 800471e:	d3bb      	bcc.n	8004698 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004720:	2300      	movs	r3, #0
 8004722:	73fb      	strb	r3, [r7, #15]
 8004724:	e044      	b.n	80047b0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	440b      	add	r3, r1
 8004734:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	440b      	add	r3, r1
 800474a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800474e:	7bfa      	ldrb	r2, [r7, #15]
 8004750:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	6879      	ldr	r1, [r7, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	440b      	add	r3, r1
 8004760:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800477e:	7bfa      	ldrb	r2, [r7, #15]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	440b      	add	r3, r1
 800478c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	440b      	add	r3, r1
 80047a2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047aa:	7bfb      	ldrb	r3, [r7, #15]
 80047ac:	3301      	adds	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	791b      	ldrb	r3, [r3, #4]
 80047b4:	7bfa      	ldrb	r2, [r7, #15]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d3b5      	bcc.n	8004726 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80047c6:	f003 ff30 	bl	800862a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	7a9b      	ldrb	r3, [r3, #10]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d102      	bne.n	80047e6 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f001 fc42 	bl	800606a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_PCD_Start+0x16>
 8004802:	2302      	movs	r3, #2
 8004804:	e012      	b.n	800482c <HAL_PCD_Start+0x3c>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4618      	mov	r0, r3
 8004814:	f003 fed7 	bl	80085c6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f006 f999 	bl	800ab54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4618      	mov	r0, r3
 8004842:	f006 f99e 	bl	800ab82 <USB_ReadInterrupts>
 8004846:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 fb06 	bl	8004e64 <PCD_EP_ISR_Handler>

    return;
 8004858:	e110      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004860:	2b00      	cmp	r3, #0
 8004862:	d013      	beq.n	800488c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800486c:	b29a      	uxth	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004876:	b292      	uxth	r2, r2
 8004878:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f008 f8f8 	bl	800ca72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004882:	2100      	movs	r1, #0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f8fc 	bl	8004a82 <HAL_PCD_SetAddress>

    return;
 800488a:	e0f7      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800489e:	b29a      	uxth	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80048a8:	b292      	uxth	r2, r2
 80048aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048ae:	e0e5      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048cc:	b292      	uxth	r2, r2
 80048ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80048d2:	e0d3      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d034      	beq.n	8004948 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0204 	bic.w	r2, r2, #4
 80048f0:	b292      	uxth	r2, r2
 80048f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	b292      	uxth	r2, r2
 800490a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004914:	2b01      	cmp	r3, #1
 8004916:	d107      	bne.n	8004928 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004920:	2100      	movs	r1, #0
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f008 fa98 	bl	800ce58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f008 f8db 	bl	800cae4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004936:	b29a      	uxth	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004940:	b292      	uxth	r2, r2
 8004942:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004946:	e099      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800494e:	2b00      	cmp	r3, #0
 8004950:	d027      	beq.n	80049a2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f042 0208 	orr.w	r2, r2, #8
 8004964:	b292      	uxth	r2, r2
 8004966:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800497c:	b292      	uxth	r2, r2
 800497e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800498a:	b29a      	uxth	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0204 	orr.w	r2, r2, #4
 8004994:	b292      	uxth	r2, r2
 8004996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f008 f888 	bl	800cab0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80049a0:	e06c      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d040      	beq.n	8004a2e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049be:	b292      	uxth	r2, r2
 80049c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d12b      	bne.n	8004a26 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0204 	orr.w	r2, r2, #4
 80049e0:	b292      	uxth	r2, r2
 80049e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f042 0208 	orr.w	r2, r2, #8
 80049f8:	b292      	uxth	r2, r2
 80049fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f008 fa1a 	bl	800ce58 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004a24:	e02a      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f008 f842 	bl	800cab0 <HAL_PCD_SuspendCallback>
    return;
 8004a2c:	e026      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00f      	beq.n	8004a58 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a40:	b29a      	uxth	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f008 f800 	bl	800ca56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004a56:	e011      	b.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00c      	beq.n	8004a7c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004a6a:	b29a      	uxth	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a74:	b292      	uxth	r2, r2
 8004a76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004a7a:	bf00      	nop
  }
}
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_PCD_SetAddress+0x1a>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e012      	b.n	8004ac2 <HAL_PCD_SetAddress+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f006 f83a 	bl	800ab2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	4603      	mov	r3, r0
 8004ada:	70fb      	strb	r3, [r7, #3]
 8004adc:	460b      	mov	r3, r1
 8004ade:	803b      	strh	r3, [r7, #0]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da0e      	bge.n	8004b0e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af0:	78fb      	ldrb	r3, [r7, #3]
 8004af2:	f003 0207 	and.w	r2, r3, #7
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	3310      	adds	r3, #16
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	705a      	strb	r2, [r3, #1]
 8004b0c:	e00e      	b.n	8004b2c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	f003 0207 	and.w	r2, r3, #7
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	4413      	add	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b2c:	78fb      	ldrb	r3, [r7, #3]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004b38:	883b      	ldrh	r3, [r7, #0]
 8004b3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	78ba      	ldrb	r2, [r7, #2]
 8004b46:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b48:	78bb      	ldrb	r3, [r7, #2]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d102      	bne.n	8004b54 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_PCD_EP_Open+0x98>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e00e      	b.n	8004b80 <HAL_PCD_EP_Open+0xb6>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	4618      	mov	r0, r3
 8004b72:	f003 fd79 	bl	8008668 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	da0e      	bge.n	8004bba <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 0207 	and.w	r2, r3, #7
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	00db      	lsls	r3, r3, #3
 8004baa:	3310      	adds	r3, #16
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	4413      	add	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	705a      	strb	r2, [r3, #1]
 8004bb8:	e00e      	b.n	8004bd8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bba:	78fb      	ldrb	r3, [r7, #3]
 8004bbc:	f003 0207 	and.w	r2, r3, #7
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	4413      	add	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_PCD_EP_Close+0x6a>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e00e      	b.n	8004c10 <HAL_PCD_EP_Close+0x88>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f004 f8f5 	bl	8008df0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607a      	str	r2, [r7, #4]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	460b      	mov	r3, r1
 8004c26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c28:	7afb      	ldrb	r3, [r7, #11]
 8004c2a:	f003 0207 	and.w	r2, r3, #7
 8004c2e:	4613      	mov	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c58:	7afb      	ldrb	r3, [r7, #11]
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6979      	ldr	r1, [r7, #20]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f004 faad 	bl	80091ca <USB_EPStartXfer>

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	f003 0207 	and.w	r2, r3, #7
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004c9c:	681b      	ldr	r3, [r3, #0]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b086      	sub	sp, #24
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cba:	7afb      	ldrb	r3, [r7, #11]
 8004cbc:	f003 0207 	and.w	r2, r3, #7
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	4413      	add	r3, r2
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	3310      	adds	r3, #16
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4413      	add	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	683a      	ldr	r2, [r7, #0]
 8004cda:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cf6:	7afb      	ldrb	r3, [r7, #11]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6979      	ldr	r1, [r7, #20]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f004 fa5e 	bl	80091ca <USB_EPStartXfer>

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	7912      	ldrb	r2, [r2, #4]
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d901      	bls.n	8004d36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e03e      	b.n	8004db4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	da0e      	bge.n	8004d5c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	f003 0207 	and.w	r2, r3, #7
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	4413      	add	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	705a      	strb	r2, [r3, #1]
 8004d5a:	e00c      	b.n	8004d76 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	4413      	add	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 0307 	and.w	r3, r3, #7
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_PCD_EP_SetStall+0x7e>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e00e      	b.n	8004db4 <HAL_PCD_EP_SetStall+0x9c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68f9      	ldr	r1, [r7, #12]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f005 fdc2 	bl	800a92e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	7912      	ldrb	r2, [r2, #4]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d901      	bls.n	8004dda <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e040      	b.n	8004e5c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	da0e      	bge.n	8004e00 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004de2:	78fb      	ldrb	r3, [r7, #3]
 8004de4:	f003 0207 	and.w	r2, r3, #7
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	3310      	adds	r3, #16
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	705a      	strb	r2, [r3, #1]
 8004dfe:	e00e      	b.n	8004e1e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	f003 0207 	and.w	r2, r3, #7
 8004e06:	4613      	mov	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4413      	add	r3, r2
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_PCD_EP_ClrStall+0x82>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e00e      	b.n	8004e5c <HAL_PCD_EP_ClrStall+0xa0>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f005 fdbf 	bl	800a9d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b096      	sub	sp, #88	@ 0x58
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004e6c:	e3ad      	b.n	80055ca <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004e76:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004e7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8004e88:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 816f 	bne.w	8005170 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004e92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d14c      	bne.n	8004f38 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	881b      	ldrh	r3, [r3, #0]
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	81fb      	strh	r3, [r7, #14]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3310      	adds	r3, #16
 8004ec6:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4413      	add	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eee:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	441a      	add	r2, r3
 8004efa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004efc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004efe:	2100      	movs	r1, #0
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f007 fd8e 	bl	800ca22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7b1b      	ldrb	r3, [r3, #12]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 835c 	beq.w	80055ca <PCD_EP_ISR_Handler+0x766>
 8004f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	f040 8357 	bne.w	80055ca <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7b1b      	ldrb	r3, [r3, #12]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	731a      	strb	r2, [r3, #12]
 8004f36:	e348      	b.n	80055ca <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f3e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	881b      	ldrh	r3, [r3, #0]
 8004f46:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004f4a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d032      	beq.n	8004fbc <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	461a      	mov	r2, r3
 8004f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	00db      	lsls	r3, r3, #3
 8004f68:	4413      	add	r3, r2
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6812      	ldr	r2, [r2, #0]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f7c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8004f88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004f8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f8e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f005 fe48 	bl	800ac26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	881b      	ldrh	r3, [r3, #0]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	823b      	strh	r3, [r7, #16]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	8a3a      	ldrh	r2, [r7, #16]
 8004fac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fb0:	b292      	uxth	r2, r2
 8004fb2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f007 fd07 	bl	800c9c8 <HAL_PCD_SetupStageCallback>
 8004fba:	e306      	b.n	80055ca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004fbc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f280 8302 	bge.w	80055ca <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	881b      	ldrh	r3, [r3, #0]
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	83fb      	strh	r3, [r7, #30]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	8bfa      	ldrh	r2, [r7, #30]
 8004fdc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6812      	ldr	r2, [r2, #0]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005002:	881b      	ldrh	r3, [r3, #0]
 8005004:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800500c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d019      	beq.n	8005048 <PCD_EP_ISR_Handler+0x1e4>
 8005014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d015      	beq.n	8005048 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005022:	6959      	ldr	r1, [r3, #20]
 8005024:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005026:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800502a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800502c:	b29b      	uxth	r3, r3
 800502e:	f005 fdfa 	bl	800ac26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005034:	695a      	ldr	r2, [r3, #20]
 8005036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	441a      	add	r2, r3
 800503c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800503e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005040:	2100      	movs	r1, #0
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f007 fcd2 	bl	800c9ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	881b      	ldrh	r3, [r3, #0]
 800504e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005052:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 82b5 	bne.w	80055ca <PCD_EP_ISR_Handler+0x766>
 8005060:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005064:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005068:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800506c:	f000 82ad 	beq.w	80055ca <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	4413      	add	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	881b      	ldrh	r3, [r3, #0]
 8005094:	b29b      	uxth	r3, r3
 8005096:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800509a:	b29a      	uxth	r2, r3
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	801a      	strh	r2, [r3, #0]
 80050a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <PCD_EP_ISR_Handler+0x25a>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	801a      	strh	r2, [r3, #0]
 80050bc:	e039      	b.n	8005132 <PCD_EP_ISR_Handler+0x2ce>
 80050be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80050c4:	d818      	bhi.n	80050f8 <PCD_EP_ISR_Handler+0x294>
 80050c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <PCD_EP_ISR_Handler+0x27c>
 80050da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050dc:	3301      	adds	r3, #1
 80050de:	647b      	str	r3, [r7, #68]	@ 0x44
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	029b      	lsls	r3, r3, #10
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	4313      	orrs	r3, r2
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	801a      	strh	r2, [r3, #0]
 80050f6:	e01c      	b.n	8005132 <PCD_EP_ISR_Handler+0x2ce>
 80050f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <PCD_EP_ISR_Handler+0x2ae>
 800510c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800510e:	3b01      	subs	r3, #1
 8005110:	647b      	str	r3, [r7, #68]	@ 0x44
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29a      	uxth	r2, r3
 8005118:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800511a:	b29b      	uxth	r3, r3
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	b29b      	uxth	r3, r3
 8005120:	4313      	orrs	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512c:	b29a      	uxth	r2, r3
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	881b      	ldrh	r3, [r3, #0]
 8005138:	b29b      	uxth	r3, r3
 800513a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800513e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005142:	827b      	strh	r3, [r7, #18]
 8005144:	8a7b      	ldrh	r3, [r7, #18]
 8005146:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800514a:	827b      	strh	r3, [r7, #18]
 800514c:	8a7b      	ldrh	r3, [r7, #18]
 800514e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005152:	827b      	strh	r3, [r7, #18]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	8a7b      	ldrh	r3, [r7, #18]
 800515a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800515e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005166:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800516a:	b29b      	uxth	r3, r3
 800516c:	8013      	strh	r3, [r2, #0]
 800516e:	e22c      	b.n	80055ca <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	461a      	mov	r2, r3
 8005176:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4413      	add	r3, r2
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005184:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8005188:	2b00      	cmp	r3, #0
 800518a:	f280 80f6 	bge.w	800537a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	b29a      	uxth	r2, r3
 80051a0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80051a4:	4013      	ands	r3, r2
 80051a6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80051bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80051c0:	b292      	uxth	r2, r2
 80051c2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80051c4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80051c8:	4613      	mov	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	4413      	add	r3, r2
 80051ce:	00db      	lsls	r3, r3, #3
 80051d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	4413      	add	r3, r2
 80051d8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80051da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051dc:	7b1b      	ldrb	r3, [r3, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d123      	bne.n	800522a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	461a      	mov	r2, r3
 80051ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4413      	add	r3, r2
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	4413      	add	r3, r2
 80051fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005206:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800520a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800520e:	2b00      	cmp	r3, #0
 8005210:	f000 808e 	beq.w	8005330 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6818      	ldr	r0, [r3, #0]
 8005218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521a:	6959      	ldr	r1, [r3, #20]
 800521c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521e:	88da      	ldrh	r2, [r3, #6]
 8005220:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005224:	f005 fcff 	bl	800ac26 <USB_ReadPMA>
 8005228:	e082      	b.n	8005330 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800522a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800522c:	78db      	ldrb	r3, [r3, #3]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d10a      	bne.n	8005248 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005232:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005236:	461a      	mov	r2, r3
 8005238:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f9d3 	bl	80055e6 <HAL_PCD_EP_DB_Receive>
 8005240:	4603      	mov	r3, r0
 8005242:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005246:	e073      	b.n	8005330 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	461a      	mov	r2, r3
 800524e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800525e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005262:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	441a      	add	r2, r3
 8005274:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800527c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005284:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005288:	b29b      	uxth	r3, r3
 800528a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	461a      	mov	r2, r3
 8005292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29b      	uxth	r3, r3
 800529e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d022      	beq.n	80052ec <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	4413      	add	r3, r2
 80052c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ca:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80052ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02c      	beq.n	8005330 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052dc:	6959      	ldr	r1, [r3, #20]
 80052de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e0:	891a      	ldrh	r2, [r3, #8]
 80052e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80052e6:	f005 fc9e 	bl	800ac26 <USB_ReadPMA>
 80052ea:	e021      	b.n	8005330 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	4413      	add	r3, r2
 8005306:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005310:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005314:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6818      	ldr	r0, [r3, #0]
 8005320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005322:	6959      	ldr	r1, [r3, #20]
 8005324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005326:	895a      	ldrh	r2, [r3, #10]
 8005328:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800532c:	f005 fc7b 	bl	800ac26 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005338:	441a      	add	r2, r3
 800533a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800533e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005346:	441a      	add	r2, r3
 8005348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800534c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <PCD_EP_ISR_Handler+0x4fc>
 8005354:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	429a      	cmp	r2, r3
 800535e:	d206      	bcs.n	800536e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	4619      	mov	r1, r3
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f007 fb40 	bl	800c9ec <HAL_PCD_DataOutStageCallback>
 800536c:	e005      	b.n	800537a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005374:	4618      	mov	r0, r3
 8005376:	f003 ff28 	bl	80091ca <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800537a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800537e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 8121 	beq.w	80055ca <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005388:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	3310      	adds	r3, #16
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	4413      	add	r3, r2
 800539a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	461a      	mov	r2, r3
 80053a2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	461a      	mov	r2, r3
 80053c0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	441a      	add	r2, r3
 80053c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80053cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80053d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053da:	78db      	ldrb	r3, [r3, #3]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	f040 80a2 	bne.w	8005526 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80053e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e4:	2200      	movs	r2, #0
 80053e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80053e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ea:	7b1b      	ldrb	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 8093 	beq.w	8005518 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80053f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80053f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d046      	beq.n	800548c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d126      	bne.n	8005454 <PCD_EP_ISR_Handler+0x5f0>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	627b      	str	r3, [r7, #36]	@ 0x24
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005414:	b29b      	uxth	r3, r3
 8005416:	461a      	mov	r2, r3
 8005418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541a:	4413      	add	r3, r2
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
 800541e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	00da      	lsls	r2, r3, #3
 8005424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005426:	4413      	add	r3, r2
 8005428:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005438:	b29a      	uxth	r2, r3
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	881b      	ldrh	r3, [r3, #0]
 8005442:	b29b      	uxth	r3, r3
 8005444:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005448:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800544c:	b29a      	uxth	r2, r3
 800544e:	6a3b      	ldr	r3, [r7, #32]
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	e061      	b.n	8005518 <PCD_EP_ISR_Handler+0x6b4>
 8005454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d15d      	bne.n	8005518 <PCD_EP_ISR_Handler+0x6b4>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800546a:	b29b      	uxth	r3, r3
 800546c:	461a      	mov	r2, r3
 800546e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005470:	4413      	add	r3, r2
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005474:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	00da      	lsls	r2, r3, #3
 800547a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547c:	4413      	add	r3, r2
 800547e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	2200      	movs	r2, #0
 8005488:	801a      	strh	r2, [r3, #0]
 800548a:	e045      	b.n	8005518 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005494:	785b      	ldrb	r3, [r3, #1]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d126      	bne.n	80054e8 <PCD_EP_ISR_Handler+0x684>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ae:	4413      	add	r3, r2
 80054b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	00da      	lsls	r2, r3, #3
 80054b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ba:	4413      	add	r3, r2
 80054bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c4:	881b      	ldrh	r3, [r3, #0]
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	801a      	strh	r2, [r3, #0]
 80054e6:	e017      	b.n	8005518 <PCD_EP_ISR_Handler+0x6b4>
 80054e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054ea:	785b      	ldrb	r3, [r3, #1]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d113      	bne.n	8005518 <PCD_EP_ISR_Handler+0x6b4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	4413      	add	r3, r2
 8005500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	00da      	lsls	r2, r3, #3
 8005508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550a:	4413      	add	r3, r2
 800550c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005510:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005514:	2200      	movs	r2, #0
 8005516:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551a:	781b      	ldrb	r3, [r3, #0]
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f007 fa7f 	bl	800ca22 <HAL_PCD_DataInStageCallback>
 8005524:	e051      	b.n	80055ca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005526:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d144      	bne.n	80055bc <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6812      	ldr	r2, [r2, #0]
 800554a:	4413      	add	r3, r2
 800554c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005556:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800555a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555c:	699a      	ldr	r2, [r3, #24]
 800555e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005562:	429a      	cmp	r2, r3
 8005564:	d907      	bls.n	8005576 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800556e:	1ad2      	subs	r2, r2, r3
 8005570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	e002      	b.n	800557c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005578:	2200      	movs	r2, #0
 800557a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800557c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d106      	bne.n	8005592 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4619      	mov	r1, r3
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f007 fa49 	bl	800ca22 <HAL_PCD_DataInStageCallback>
 8005590:	e01b      	b.n	80055ca <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800559a:	441a      	add	r2, r3
 800559c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800559e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80055a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80055a8:	441a      	add	r2, r3
 80055aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055b4:	4618      	mov	r0, r3
 80055b6:	f003 fe08 	bl	80091ca <USB_EPStartXfer>
 80055ba:	e006      	b.n	80055ca <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80055bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80055c0:	461a      	mov	r2, r3
 80055c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 f917 	bl	80057f8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	b21b      	sxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f6ff ac49 	blt.w	8004e6e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3758      	adds	r7, #88	@ 0x58
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b088      	sub	sp, #32
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	4613      	mov	r3, r2
 80055f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d07c      	beq.n	80056f8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005606:	b29b      	uxth	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4413      	add	r3, r2
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	4413      	add	r3, r2
 8005618:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005622:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	8b7b      	ldrh	r3, [r7, #26]
 800562a:	429a      	cmp	r2, r3
 800562c:	d306      	bcc.n	800563c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	8b7b      	ldrh	r3, [r7, #26]
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	619a      	str	r2, [r3, #24]
 800563a:	e002      	b.n	8005642 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d123      	bne.n	8005692 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	461a      	mov	r2, r3
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	b29b      	uxth	r3, r3
 800565c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005664:	833b      	strh	r3, [r7, #24]
 8005666:	8b3b      	ldrh	r3, [r7, #24]
 8005668:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800566c:	833b      	strh	r3, [r7, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	441a      	add	r2, r3
 800567c:	8b3b      	ldrh	r3, [r7, #24]
 800567e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800568a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800568e:	b29b      	uxth	r3, r3
 8005690:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01f      	beq.n	80056dc <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	461a      	mov	r2, r3
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	881b      	ldrh	r3, [r3, #0]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b6:	82fb      	strh	r3, [r7, #22]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	441a      	add	r2, r3
 80056c6:	8afb      	ldrh	r3, [r7, #22]
 80056c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80056d8:	b29b      	uxth	r3, r3
 80056da:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80056dc:	8b7b      	ldrh	r3, [r7, #26]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8085 	beq.w	80057ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6818      	ldr	r0, [r3, #0]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6959      	ldr	r1, [r3, #20]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	891a      	ldrh	r2, [r3, #8]
 80056f0:	8b7b      	ldrh	r3, [r7, #26]
 80056f2:	f005 fa98 	bl	800ac26 <USB_ReadPMA>
 80056f6:	e07a      	b.n	80057ee <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005700:	b29b      	uxth	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	6812      	ldr	r2, [r2, #0]
 8005710:	4413      	add	r3, r2
 8005712:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005716:	881b      	ldrh	r3, [r3, #0]
 8005718:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800571c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	699a      	ldr	r2, [r3, #24]
 8005722:	8b7b      	ldrh	r3, [r7, #26]
 8005724:	429a      	cmp	r2, r3
 8005726:	d306      	bcc.n	8005736 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	699a      	ldr	r2, [r3, #24]
 800572c:	8b7b      	ldrh	r3, [r7, #26]
 800572e:	1ad2      	subs	r2, r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	619a      	str	r2, [r3, #24]
 8005734:	e002      	b.n	800573c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2200      	movs	r2, #0
 800573a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d123      	bne.n	800578c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	009b      	lsls	r3, r3, #2
 8005750:	4413      	add	r3, r2
 8005752:	881b      	ldrh	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800575a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800575e:	83fb      	strh	r3, [r7, #30]
 8005760:	8bfb      	ldrh	r3, [r7, #30]
 8005762:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005766:	83fb      	strh	r3, [r7, #30]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	441a      	add	r2, r3
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800577c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005780:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005788:	b29b      	uxth	r3, r3
 800578a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11f      	bne.n	80057d6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b0:	83bb      	strh	r3, [r7, #28]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	441a      	add	r2, r3
 80057c0:	8bbb      	ldrh	r3, [r7, #28]
 80057c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80057c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80057ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80057ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80057d6:	8b7b      	ldrh	r3, [r7, #26]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d008      	beq.n	80057ee <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	6959      	ldr	r1, [r3, #20]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	895a      	ldrh	r2, [r3, #10]
 80057e8:	8b7b      	ldrh	r3, [r7, #26]
 80057ea:	f005 fa1c 	bl	800ac26 <USB_ReadPMA>
    }
  }

  return count;
 80057ee:	8b7b      	ldrh	r3, [r7, #26]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b0a4      	sub	sp, #144	@ 0x90
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	4613      	mov	r3, r2
 8005804:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005806:	88fb      	ldrh	r3, [r7, #6]
 8005808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 81db 	beq.w	8005bc8 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800581a:	b29b      	uxth	r3, r3
 800581c:	461a      	mov	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	4413      	add	r3, r2
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	6812      	ldr	r2, [r2, #0]
 800582a:	4413      	add	r3, r2
 800582c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005836:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005842:	429a      	cmp	r2, r3
 8005844:	d907      	bls.n	8005856 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800584e:	1ad2      	subs	r2, r2, r3
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	619a      	str	r2, [r3, #24]
 8005854:	e002      	b.n	800585c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2200      	movs	r2, #0
 800585a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	f040 80b9 	bne.w	80059d8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d126      	bne.n	80058bc <HAL_PCD_EP_DB_Transmit+0xc4>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587c:	b29b      	uxth	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005882:	4413      	add	r3, r2
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	00da      	lsls	r2, r3, #3
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	4413      	add	r3, r2
 8005890:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b29b      	uxth	r3, r3
 800589c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	801a      	strh	r2, [r3, #0]
 80058ba:	e01a      	b.n	80058f2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d116      	bne.n	80058f2 <HAL_PCD_EP_DB_Transmit+0xfa>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d8:	4413      	add	r3, r2
 80058da:	637b      	str	r3, [r7, #52]	@ 0x34
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	00da      	lsls	r2, r3, #3
 80058e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ee:	2200      	movs	r2, #0
 80058f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	785b      	ldrb	r3, [r3, #1]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d126      	bne.n	800594e <HAL_PCD_EP_DB_Transmit+0x156>
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	61fb      	str	r3, [r7, #28]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800590e:	b29b      	uxth	r3, r3
 8005910:	461a      	mov	r2, r3
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	61fb      	str	r3, [r7, #28]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	00da      	lsls	r2, r3, #3
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	4413      	add	r3, r2
 8005922:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005932:	b29a      	uxth	r2, r3
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	b29b      	uxth	r3, r3
 800593e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005946:	b29a      	uxth	r2, r3
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	e017      	b.n	800597e <HAL_PCD_EP_DB_Transmit+0x186>
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	785b      	ldrb	r3, [r3, #1]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d113      	bne.n	800597e <HAL_PCD_EP_DB_Transmit+0x186>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800595e:	b29b      	uxth	r3, r3
 8005960:	461a      	mov	r2, r3
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	4413      	add	r3, r2
 8005966:	627b      	str	r3, [r7, #36]	@ 0x24
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	00da      	lsls	r2, r3, #3
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	4413      	add	r3, r2
 8005972:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005976:	623b      	str	r3, [r7, #32]
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	2200      	movs	r2, #0
 800597c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f007 f84c 	bl	800ca22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800598a:	88fb      	ldrh	r3, [r7, #6]
 800598c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 82fa 	beq.w	8005f8a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	461a      	mov	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b0:	82fb      	strh	r3, [r7, #22]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	8afb      	ldrh	r3, [r7, #22]
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]
 80059d6:	e2d8      	b.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d021      	beq.n	8005a26 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	f040 82ac 	bne.w	8005f8a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	69da      	ldr	r2, [r3, #28]
 8005a44:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a48:	441a      	add	r2, r3
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6a1a      	ldr	r2, [r3, #32]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d30b      	bcc.n	8005a72 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6a1a      	ldr	r2, [r3, #32]
 8005a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a6a:	1ad2      	subs	r2, r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	621a      	str	r2, [r3, #32]
 8005a70:	e017      	b.n	8005aa2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d108      	bne.n	8005a8c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005a7a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005a7e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005a8a:	e00a      	b.n	8005aa2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	785b      	ldrb	r3, [r3, #1]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d165      	bne.n	8005b76 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005abe:	4413      	add	r3, r2
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	00da      	lsls	r2, r3, #3
 8005ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aca:	4413      	add	r3, r2
 8005acc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	801a      	strh	r2, [r3, #0]
 8005ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <HAL_PCD_EP_DB_Transmit+0x308>
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	881b      	ldrh	r3, [r3, #0]
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	801a      	strh	r2, [r3, #0]
 8005afe:	e057      	b.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b04:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b06:	d818      	bhi.n	8005b3a <HAL_PCD_EP_DB_Transmit+0x342>
 8005b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b0c:	085b      	lsrs	r3, r3, #1
 8005b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_PCD_EP_DB_Transmit+0x32a>
 8005b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b1e:	3301      	adds	r3, #1
 8005b20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	029b      	lsls	r3, r3, #10
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	4313      	orrs	r3, r2
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	801a      	strh	r2, [r3, #0]
 8005b38:	e03a      	b.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b3e:	095b      	lsrs	r3, r3, #5
 8005b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d102      	bne.n	8005b54 <HAL_PCD_EP_DB_Transmit+0x35c>
 8005b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b50:	3b01      	subs	r3, #1
 8005b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	029b      	lsls	r3, r3, #10
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b72:	801a      	strh	r2, [r3, #0]
 8005b74:	e01c      	b.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d118      	bne.n	8005bb0 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b92:	4413      	add	r3, r2
 8005b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	00da      	lsls	r2, r3, #3
 8005b9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ba4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6959      	ldr	r1, [r3, #20]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	891a      	ldrh	r2, [r3, #8]
 8005bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f004 ffee 	bl	800aba2 <USB_WritePMA>
 8005bc6:	e1e0      	b.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	6812      	ldr	r2, [r2, #0]
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bec:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	699a      	ldr	r2, [r3, #24]
 8005bf4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d307      	bcc.n	8005c0c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	699a      	ldr	r2, [r3, #24]
 8005c00:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005c04:	1ad2      	subs	r2, r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	619a      	str	r2, [r3, #24]
 8005c0a:	e002      	b.n	8005c12 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 80c0 	bne.w	8005d9c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	785b      	ldrb	r3, [r3, #1]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d126      	bne.n	8005c72 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c38:	4413      	add	r3, r2
 8005c3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	00da      	lsls	r2, r3, #3
 8005c42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005c44:	4413      	add	r3, r2
 8005c46:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c4a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c6e:	801a      	strh	r2, [r3, #0]
 8005c70:	e01a      	b.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	785b      	ldrb	r3, [r3, #1]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d116      	bne.n	8005ca8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c8e:	4413      	add	r3, r2
 8005c90:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	00da      	lsls	r2, r3, #3
 8005c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ca0:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ca2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	677b      	str	r3, [r7, #116]	@ 0x74
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d12b      	bne.n	8005d0e <HAL_PCD_EP_DB_Transmit+0x516>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cca:	4413      	add	r3, r2
 8005ccc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	00da      	lsls	r2, r3, #3
 8005cd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ce0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cf2:	801a      	strh	r2, [r3, #0]
 8005cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	e017      	b.n	8005d3e <HAL_PCD_EP_DB_Transmit+0x546>
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	785b      	ldrb	r3, [r3, #1]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d113      	bne.n	8005d3e <HAL_PCD_EP_DB_Transmit+0x546>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	461a      	mov	r2, r3
 8005d22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d24:	4413      	add	r3, r2
 8005d26:	677b      	str	r3, [r7, #116]	@ 0x74
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	00da      	lsls	r2, r3, #3
 8005d2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d30:	4413      	add	r3, r2
 8005d32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005d36:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f006 fe6c 	bl	800ca22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 811a 	bne.w	8005f8a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d70:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	461a      	mov	r2, r3
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	441a      	add	r2, r3
 8005d82:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8005d86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	8013      	strh	r3, [r2, #0]
 8005d9a:	e0f6      	b.n	8005f8a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d121      	bne.n	8005dea <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005dd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	f040 80ca 	bne.w	8005f8a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	695a      	ldr	r2, [r3, #20]
 8005dfa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005dfe:	441a      	add	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	69da      	ldr	r2, [r3, #28]
 8005e08:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	6a1a      	ldr	r2, [r3, #32]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d30b      	bcc.n	8005e36 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6a1a      	ldr	r2, [r3, #32]
 8005e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	621a      	str	r2, [r3, #32]
 8005e34:	e017      	b.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d108      	bne.n	8005e50 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005e3e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8005e42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005e4e:	e00a      	b.n	8005e66 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	6a1b      	ldr	r3, [r3, #32]
 8005e54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d165      	bne.n	8005f40 <HAL_PCD_EP_DB_Transmit+0x748>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e88:	4413      	add	r3, r2
 8005e8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00da      	lsls	r2, r3, #3
 8005e92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005e9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <HAL_PCD_EP_DB_Transmit+0x6d2>
 8005eb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	e054      	b.n	8005f74 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ece:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ed0:	d818      	bhi.n	8005f04 <HAL_PCD_EP_DB_Transmit+0x70c>
 8005ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <HAL_PCD_EP_DB_Transmit+0x6f4>
 8005ee6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ee8:	3301      	adds	r3, #1
 8005eea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	029b      	lsls	r3, r3, #10
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	4313      	orrs	r3, r2
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f00:	801a      	strh	r2, [r3, #0]
 8005f02:	e037      	b.n	8005f74 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <HAL_PCD_EP_DB_Transmit+0x726>
 8005f18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	029b      	lsls	r3, r3, #10
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	e019      	b.n	8005f74 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	785b      	ldrb	r3, [r3, #1]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d115      	bne.n	8005f74 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f56:	4413      	add	r3, r2
 8005f58:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	00da      	lsls	r2, r3, #3
 8005f60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f62:	4413      	add	r3, r2
 8005f64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f68:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f6e:	b29a      	uxth	r2, r3
 8005f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f72:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6818      	ldr	r0, [r3, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	6959      	ldr	r1, [r3, #20]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	895a      	ldrh	r2, [r3, #10]
 8005f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	f004 fe0c 	bl	800aba2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	881b      	ldrh	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fa4:	82bb      	strh	r3, [r7, #20]
 8005fa6:	8abb      	ldrh	r3, [r7, #20]
 8005fa8:	f083 0310 	eor.w	r3, r3, #16
 8005fac:	82bb      	strh	r3, [r7, #20]
 8005fae:	8abb      	ldrh	r3, [r7, #20]
 8005fb0:	f083 0320 	eor.w	r3, r3, #32
 8005fb4:	82bb      	strh	r3, [r7, #20]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	8abb      	ldrh	r3, [r7, #20]
 8005fc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3790      	adds	r7, #144	@ 0x90
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b087      	sub	sp, #28
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	460b      	mov	r3, r1
 8005ff0:	817b      	strh	r3, [r7, #10]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005ff6:	897b      	ldrh	r3, [r7, #10]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00b      	beq.n	800601a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	f003 0207 	and.w	r2, r3, #7
 8006008:	4613      	mov	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	00db      	lsls	r3, r3, #3
 8006010:	3310      	adds	r3, #16
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	4413      	add	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
 8006018:	e009      	b.n	800602e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800601a:	897a      	ldrh	r2, [r7, #10]
 800601c:	4613      	mov	r3, r2
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	4413      	add	r3, r2
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	4413      	add	r3, r2
 800602c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800602e:	893b      	ldrh	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d107      	bne.n	8006044 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2200      	movs	r2, #0
 8006038:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	b29a      	uxth	r2, r3
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	80da      	strh	r2, [r3, #6]
 8006042:	e00b      	b.n	800605c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2201      	movs	r2, #1
 8006048:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	b29a      	uxth	r2, r3
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	b29a      	uxth	r2, r3
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800606a:	b480      	push	{r7}
 800606c:	b085      	sub	sp, #20
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800608e:	b29b      	uxth	r3, r3
 8006090:	f043 0301 	orr.w	r3, r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	f043 0302 	orr.w	r3, r3, #2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d141      	bne.n	8006152 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80060ce:	4b4b      	ldr	r3, [pc, #300]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80060d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060da:	d131      	bne.n	8006140 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80060dc:	4b47      	ldr	r3, [pc, #284]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060e2:	4a46      	ldr	r2, [pc, #280]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80060ec:	4b43      	ldr	r3, [pc, #268]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80060f4:	4a41      	ldr	r2, [pc, #260]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80060f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80060fc:	4b40      	ldr	r3, [pc, #256]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2232      	movs	r2, #50	@ 0x32
 8006102:	fb02 f303 	mul.w	r3, r2, r3
 8006106:	4a3f      	ldr	r2, [pc, #252]	@ (8006204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006108:	fba2 2303 	umull	r2, r3, r2, r3
 800610c:	0c9b      	lsrs	r3, r3, #18
 800610e:	3301      	adds	r3, #1
 8006110:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006112:	e002      	b.n	800611a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3b01      	subs	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800611a:	4b38      	ldr	r3, [pc, #224]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006126:	d102      	bne.n	800612e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1f2      	bne.n	8006114 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800612e:	4b33      	ldr	r3, [pc, #204]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800613a:	d158      	bne.n	80061ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e057      	b.n	80061f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006140:	4b2e      	ldr	r3, [pc, #184]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006146:	4a2d      	ldr	r2, [pc, #180]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800614c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006150:	e04d      	b.n	80061ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006158:	d141      	bne.n	80061de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800615a:	4b28      	ldr	r3, [pc, #160]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006166:	d131      	bne.n	80061cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006168:	4b24      	ldr	r3, [pc, #144]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800616a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800616e:	4a23      	ldr	r2, [pc, #140]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006178:	4b20      	ldr	r3, [pc, #128]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006180:	4a1e      	ldr	r2, [pc, #120]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006182:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006186:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006188:	4b1d      	ldr	r3, [pc, #116]	@ (8006200 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2232      	movs	r2, #50	@ 0x32
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006194:	fba2 2303 	umull	r2, r3, r2, r3
 8006198:	0c9b      	lsrs	r3, r3, #18
 800619a:	3301      	adds	r3, #1
 800619c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800619e:	e002      	b.n	80061a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	3b01      	subs	r3, #1
 80061a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80061a6:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b2:	d102      	bne.n	80061ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f2      	bne.n	80061a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80061ba:	4b10      	ldr	r3, [pc, #64]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c6:	d112      	bne.n	80061ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e011      	b.n	80061f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80061cc:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80061d2:	4a0a      	ldr	r2, [pc, #40]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80061dc:	e007      	b.n	80061ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80061de:	4b07      	ldr	r3, [pc, #28]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80061e6:	4a05      	ldr	r2, [pc, #20]	@ (80061fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80061e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80061ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40007000 	.word	0x40007000
 8006200:	20000000 	.word	0x20000000
 8006204:	431bde83 	.word	0x431bde83

08006208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e2fe      	b.n	8006818 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d075      	beq.n	8006312 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006226:	4b97      	ldr	r3, [pc, #604]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 030c 	and.w	r3, r3, #12
 800622e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006230:	4b94      	ldr	r3, [pc, #592]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d102      	bne.n	8006246 <HAL_RCC_OscConfig+0x3e>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d002      	beq.n	800624c <HAL_RCC_OscConfig+0x44>
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b08      	cmp	r3, #8
 800624a:	d10b      	bne.n	8006264 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800624c:	4b8d      	ldr	r3, [pc, #564]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d05b      	beq.n	8006310 <HAL_RCC_OscConfig+0x108>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d157      	bne.n	8006310 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e2d9      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800626c:	d106      	bne.n	800627c <HAL_RCC_OscConfig+0x74>
 800626e:	4b85      	ldr	r3, [pc, #532]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a84      	ldr	r2, [pc, #528]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	e01d      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006284:	d10c      	bne.n	80062a0 <HAL_RCC_OscConfig+0x98>
 8006286:	4b7f      	ldr	r3, [pc, #508]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a7e      	ldr	r2, [pc, #504]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800628c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	4b7c      	ldr	r3, [pc, #496]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a7b      	ldr	r2, [pc, #492]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	e00b      	b.n	80062b8 <HAL_RCC_OscConfig+0xb0>
 80062a0:	4b78      	ldr	r3, [pc, #480]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a77      	ldr	r2, [pc, #476]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80062a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4b75      	ldr	r3, [pc, #468]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a74      	ldr	r2, [pc, #464]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80062b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80062b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d013      	beq.n	80062e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062c0:	f7fb fe64 	bl	8001f8c <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c8:	f7fb fe60 	bl	8001f8c <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	@ 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e29e      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062da:	4b6a      	ldr	r3, [pc, #424]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCC_OscConfig+0xc0>
 80062e6:	e014      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e8:	f7fb fe50 	bl	8001f8c <HAL_GetTick>
 80062ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80062ee:	e008      	b.n	8006302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062f0:	f7fb fe4c 	bl	8001f8c <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b64      	cmp	r3, #100	@ 0x64
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e28a      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006302:	4b60      	ldr	r3, [pc, #384]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1f0      	bne.n	80062f0 <HAL_RCC_OscConfig+0xe8>
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d075      	beq.n	800640a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800631e:	4b59      	ldr	r3, [pc, #356]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 030c 	and.w	r3, r3, #12
 8006326:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006328:	4b56      	ldr	r3, [pc, #344]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f003 0303 	and.w	r3, r3, #3
 8006330:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	2b0c      	cmp	r3, #12
 8006336:	d102      	bne.n	800633e <HAL_RCC_OscConfig+0x136>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d002      	beq.n	8006344 <HAL_RCC_OscConfig+0x13c>
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	2b04      	cmp	r3, #4
 8006342:	d11f      	bne.n	8006384 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006344:	4b4f      	ldr	r3, [pc, #316]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_OscConfig+0x154>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d101      	bne.n	800635c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e25d      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800635c:	4b49      	ldr	r3, [pc, #292]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	061b      	lsls	r3, r3, #24
 800636a:	4946      	ldr	r1, [pc, #280]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006370:	4b45      	ldr	r3, [pc, #276]	@ (8006488 <HAL_RCC_OscConfig+0x280>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4618      	mov	r0, r3
 8006376:	f7fb fdbd 	bl	8001ef4 <HAL_InitTick>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d043      	beq.n	8006408 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e249      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d023      	beq.n	80063d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800638c:	4b3d      	ldr	r3, [pc, #244]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a3c      	ldr	r2, [pc, #240]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006398:	f7fb fdf8 	bl	8001f8c <HAL_GetTick>
 800639c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800639e:	e008      	b.n	80063b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063a0:	f7fb fdf4 	bl	8001f8c <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d901      	bls.n	80063b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e232      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063b2:	4b34      	ldr	r3, [pc, #208]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0f0      	beq.n	80063a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063be:	4b31      	ldr	r3, [pc, #196]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	061b      	lsls	r3, r3, #24
 80063cc:	492d      	ldr	r1, [pc, #180]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	604b      	str	r3, [r1, #4]
 80063d2:	e01a      	b.n	800640a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2a      	ldr	r2, [pc, #168]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80063da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e0:	f7fb fdd4 	bl	8001f8c <HAL_GetTick>
 80063e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063e8:	f7fb fdd0 	bl	8001f8c <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b02      	cmp	r3, #2
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e20e      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80063fa:	4b22      	ldr	r3, [pc, #136]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f0      	bne.n	80063e8 <HAL_RCC_OscConfig+0x1e0>
 8006406:	e000      	b.n	800640a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006408:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d041      	beq.n	800649a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01c      	beq.n	8006458 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800641e:	4b19      	ldr	r3, [pc, #100]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006420:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006424:	4a17      	ldr	r2, [pc, #92]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642e:	f7fb fdad 	bl	8001f8c <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006436:	f7fb fda9 	bl	8001f8c <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e1e7      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006448:	4b0e      	ldr	r3, [pc, #56]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800644a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0ef      	beq.n	8006436 <HAL_RCC_OscConfig+0x22e>
 8006456:	e020      	b.n	800649a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006458:	4b0a      	ldr	r3, [pc, #40]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 800645a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800645e:	4a09      	ldr	r2, [pc, #36]	@ (8006484 <HAL_RCC_OscConfig+0x27c>)
 8006460:	f023 0301 	bic.w	r3, r3, #1
 8006464:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006468:	f7fb fd90 	bl	8001f8c <HAL_GetTick>
 800646c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800646e:	e00d      	b.n	800648c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006470:	f7fb fd8c 	bl	8001f8c <HAL_GetTick>
 8006474:	4602      	mov	r2, r0
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	2b02      	cmp	r3, #2
 800647c:	d906      	bls.n	800648c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e1ca      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
 8006482:	bf00      	nop
 8006484:	40021000 	.word	0x40021000
 8006488:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800648c:	4b8c      	ldr	r3, [pc, #560]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 800648e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1ea      	bne.n	8006470 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80a6 	beq.w	80065f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064a8:	2300      	movs	r3, #0
 80064aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80064ac:	4b84      	ldr	r3, [pc, #528]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80064ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_RCC_OscConfig+0x2b4>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <HAL_RCC_OscConfig+0x2b6>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00d      	beq.n	80064de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c2:	4b7f      	ldr	r3, [pc, #508]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	4a7e      	ldr	r2, [pc, #504]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80064c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ce:	4b7c      	ldr	r3, [pc, #496]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80064d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80064da:	2301      	movs	r3, #1
 80064dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064de:	4b79      	ldr	r3, [pc, #484]	@ (80066c4 <HAL_RCC_OscConfig+0x4bc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d118      	bne.n	800651c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ea:	4b76      	ldr	r3, [pc, #472]	@ (80066c4 <HAL_RCC_OscConfig+0x4bc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a75      	ldr	r2, [pc, #468]	@ (80066c4 <HAL_RCC_OscConfig+0x4bc>)
 80064f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064f6:	f7fb fd49 	bl	8001f8c <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80064fc:	e008      	b.n	8006510 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064fe:	f7fb fd45 	bl	8001f8c <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b02      	cmp	r3, #2
 800650a:	d901      	bls.n	8006510 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800650c:	2303      	movs	r3, #3
 800650e:	e183      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006510:	4b6c      	ldr	r3, [pc, #432]	@ (80066c4 <HAL_RCC_OscConfig+0x4bc>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006518:	2b00      	cmp	r3, #0
 800651a:	d0f0      	beq.n	80064fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d108      	bne.n	8006536 <HAL_RCC_OscConfig+0x32e>
 8006524:	4b66      	ldr	r3, [pc, #408]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800652a:	4a65      	ldr	r2, [pc, #404]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 800652c:	f043 0301 	orr.w	r3, r3, #1
 8006530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006534:	e024      	b.n	8006580 <HAL_RCC_OscConfig+0x378>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b05      	cmp	r3, #5
 800653c:	d110      	bne.n	8006560 <HAL_RCC_OscConfig+0x358>
 800653e:	4b60      	ldr	r3, [pc, #384]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006544:	4a5e      	ldr	r2, [pc, #376]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006546:	f043 0304 	orr.w	r3, r3, #4
 800654a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800654e:	4b5c      	ldr	r3, [pc, #368]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006554:	4a5a      	ldr	r2, [pc, #360]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800655e:	e00f      	b.n	8006580 <HAL_RCC_OscConfig+0x378>
 8006560:	4b57      	ldr	r3, [pc, #348]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006566:	4a56      	ldr	r2, [pc, #344]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006568:	f023 0301 	bic.w	r3, r3, #1
 800656c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006570:	4b53      	ldr	r3, [pc, #332]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	4a52      	ldr	r2, [pc, #328]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006578:	f023 0304 	bic.w	r3, r3, #4
 800657c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d016      	beq.n	80065b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006588:	f7fb fd00 	bl	8001f8c <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800658e:	e00a      	b.n	80065a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006590:	f7fb fcfc 	bl	8001f8c <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e138      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065a6:	4b46      	ldr	r3, [pc, #280]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ed      	beq.n	8006590 <HAL_RCC_OscConfig+0x388>
 80065b4:	e015      	b.n	80065e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065b6:	f7fb fce9 	bl	8001f8c <HAL_GetTick>
 80065ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065bc:	e00a      	b.n	80065d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065be:	f7fb fce5 	bl	8001f8c <HAL_GetTick>
 80065c2:	4602      	mov	r2, r0
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e121      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80065d4:	4b3a      	ldr	r3, [pc, #232]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80065d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1ed      	bne.n	80065be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80065e2:	7ffb      	ldrb	r3, [r7, #31]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d105      	bne.n	80065f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065e8:	4b35      	ldr	r3, [pc, #212]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065ec:	4a34      	ldr	r2, [pc, #208]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80065ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0320 	and.w	r3, r3, #32
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d03c      	beq.n	800667a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01c      	beq.n	8006642 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006608:	4b2d      	ldr	r3, [pc, #180]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 800660a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800660e:	4a2c      	ldr	r2, [pc, #176]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006618:	f7fb fcb8 	bl	8001f8c <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006620:	f7fb fcb4 	bl	8001f8c <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e0f2      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006632:	4b23      	ldr	r3, [pc, #140]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006634:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0ef      	beq.n	8006620 <HAL_RCC_OscConfig+0x418>
 8006640:	e01b      	b.n	800667a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006642:	4b1f      	ldr	r3, [pc, #124]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006644:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006648:	4a1d      	ldr	r2, [pc, #116]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 800664a:	f023 0301 	bic.w	r3, r3, #1
 800664e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006652:	f7fb fc9b 	bl	8001f8c <HAL_GetTick>
 8006656:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006658:	e008      	b.n	800666c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800665a:	f7fb fc97 	bl	8001f8c <HAL_GetTick>
 800665e:	4602      	mov	r2, r0
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e0d5      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800666c:	4b14      	ldr	r3, [pc, #80]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 800666e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1ef      	bne.n	800665a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80c9 	beq.w	8006816 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006684:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 030c 	and.w	r3, r3, #12
 800668c:	2b0c      	cmp	r3, #12
 800668e:	f000 8083 	beq.w	8006798 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	69db      	ldr	r3, [r3, #28]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d15e      	bne.n	8006758 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800669a:	4b09      	ldr	r3, [pc, #36]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a08      	ldr	r2, [pc, #32]	@ (80066c0 <HAL_RCC_OscConfig+0x4b8>)
 80066a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a6:	f7fb fc71 	bl	8001f8c <HAL_GetTick>
 80066aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066ac:	e00c      	b.n	80066c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066ae:	f7fb fc6d 	bl	8001f8c <HAL_GetTick>
 80066b2:	4602      	mov	r2, r0
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d905      	bls.n	80066c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e0ab      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
 80066c0:	40021000 	.word	0x40021000
 80066c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80066c8:	4b55      	ldr	r3, [pc, #340]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1ec      	bne.n	80066ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066d4:	4b52      	ldr	r3, [pc, #328]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	4b52      	ldr	r3, [pc, #328]	@ (8006824 <HAL_RCC_OscConfig+0x61c>)
 80066da:	4013      	ands	r3, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6a11      	ldr	r1, [r2, #32]
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80066e4:	3a01      	subs	r2, #1
 80066e6:	0112      	lsls	r2, r2, #4
 80066e8:	4311      	orrs	r1, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80066ee:	0212      	lsls	r2, r2, #8
 80066f0:	4311      	orrs	r1, r2
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80066f6:	0852      	lsrs	r2, r2, #1
 80066f8:	3a01      	subs	r2, #1
 80066fa:	0552      	lsls	r2, r2, #21
 80066fc:	4311      	orrs	r1, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006702:	0852      	lsrs	r2, r2, #1
 8006704:	3a01      	subs	r2, #1
 8006706:	0652      	lsls	r2, r2, #25
 8006708:	4311      	orrs	r1, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800670e:	06d2      	lsls	r2, r2, #27
 8006710:	430a      	orrs	r2, r1
 8006712:	4943      	ldr	r1, [pc, #268]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 8006714:	4313      	orrs	r3, r2
 8006716:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006718:	4b41      	ldr	r3, [pc, #260]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a40      	ldr	r2, [pc, #256]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 800671e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006722:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006724:	4b3e      	ldr	r3, [pc, #248]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4a3d      	ldr	r2, [pc, #244]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 800672a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800672e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fb fc2c 	bl	8001f8c <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006738:	f7fb fc28 	bl	8001f8c <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e066      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800674a:	4b35      	ldr	r3, [pc, #212]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0f0      	beq.n	8006738 <HAL_RCC_OscConfig+0x530>
 8006756:	e05e      	b.n	8006816 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006758:	4b31      	ldr	r3, [pc, #196]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a30      	ldr	r2, [pc, #192]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 800675e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006764:	f7fb fc12 	bl	8001f8c <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800676c:	f7fb fc0e 	bl	8001f8c <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e04c      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800677e:	4b28      	ldr	r3, [pc, #160]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800678a:	4b25      	ldr	r3, [pc, #148]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	4924      	ldr	r1, [pc, #144]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 8006790:	4b25      	ldr	r3, [pc, #148]	@ (8006828 <HAL_RCC_OscConfig+0x620>)
 8006792:	4013      	ands	r3, r2
 8006794:	60cb      	str	r3, [r1, #12]
 8006796:	e03e      	b.n	8006816 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69db      	ldr	r3, [r3, #28]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d101      	bne.n	80067a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e039      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80067a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006820 <HAL_RCC_OscConfig+0x618>)
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f003 0203 	and.w	r2, r3, #3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d12c      	bne.n	8006812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c2:	3b01      	subs	r3, #1
 80067c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d123      	bne.n	8006812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d11b      	bne.n	8006812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d113      	bne.n	8006812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	3b01      	subs	r3, #1
 80067f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d109      	bne.n	8006812 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006808:	085b      	lsrs	r3, r3, #1
 800680a:	3b01      	subs	r3, #1
 800680c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800680e:	429a      	cmp	r2, r3
 8006810:	d001      	beq.n	8006816 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3720      	adds	r7, #32
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	40021000 	.word	0x40021000
 8006824:	019f800c 	.word	0x019f800c
 8006828:	feeefffc 	.word	0xfeeefffc

0800682c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	e11e      	b.n	8006a82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006844:	4b91      	ldr	r3, [pc, #580]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 030f 	and.w	r3, r3, #15
 800684c:	683a      	ldr	r2, [r7, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d910      	bls.n	8006874 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006852:	4b8e      	ldr	r3, [pc, #568]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f023 020f 	bic.w	r2, r3, #15
 800685a:	498c      	ldr	r1, [pc, #560]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	4313      	orrs	r3, r2
 8006860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006862:	4b8a      	ldr	r3, [pc, #552]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d001      	beq.n	8006874 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e106      	b.n	8006a82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0301 	and.w	r3, r3, #1
 800687c:	2b00      	cmp	r3, #0
 800687e:	d073      	beq.n	8006968 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b03      	cmp	r3, #3
 8006886:	d129      	bne.n	80068dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006888:	4b81      	ldr	r3, [pc, #516]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e0f4      	b.n	8006a82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006898:	f000 f99e 	bl	8006bd8 <RCC_GetSysClockFreqFromPLLSource>
 800689c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	4a7c      	ldr	r2, [pc, #496]	@ (8006a94 <HAL_RCC_ClockConfig+0x268>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d93f      	bls.n	8006926 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068a6:	4b7a      	ldr	r3, [pc, #488]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d033      	beq.n	8006926 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d12f      	bne.n	8006926 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80068c6:	4b72      	ldr	r3, [pc, #456]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068ce:	4a70      	ldr	r2, [pc, #448]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80068d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80068d6:	2380      	movs	r3, #128	@ 0x80
 80068d8:	617b      	str	r3, [r7, #20]
 80068da:	e024      	b.n	8006926 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d107      	bne.n	80068f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80068e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e0c6      	b.n	8006a82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068f4:	4b66      	ldr	r3, [pc, #408]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0be      	b.n	8006a82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006904:	f000 f8ce 	bl	8006aa4 <HAL_RCC_GetSysClockFreq>
 8006908:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	4a61      	ldr	r2, [pc, #388]	@ (8006a94 <HAL_RCC_ClockConfig+0x268>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d909      	bls.n	8006926 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006912:	4b5f      	ldr	r3, [pc, #380]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800691a:	4a5d      	ldr	r2, [pc, #372]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 800691c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006920:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006922:	2380      	movs	r3, #128	@ 0x80
 8006924:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006926:	4b5a      	ldr	r3, [pc, #360]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f023 0203 	bic.w	r2, r3, #3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4957      	ldr	r1, [pc, #348]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006934:	4313      	orrs	r3, r2
 8006936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006938:	f7fb fb28 	bl	8001f8c <HAL_GetTick>
 800693c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800693e:	e00a      	b.n	8006956 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006940:	f7fb fb24 	bl	8001f8c <HAL_GetTick>
 8006944:	4602      	mov	r2, r0
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800694e:	4293      	cmp	r3, r2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e095      	b.n	8006a82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	4b4e      	ldr	r3, [pc, #312]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 020c 	and.w	r2, r3, #12
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	429a      	cmp	r2, r3
 8006966:	d1eb      	bne.n	8006940 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d023      	beq.n	80069bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0304 	and.w	r3, r3, #4
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006980:	4b43      	ldr	r3, [pc, #268]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4a42      	ldr	r2, [pc, #264]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006986:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800698a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0308 	and.w	r3, r3, #8
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006998:	4b3d      	ldr	r3, [pc, #244]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80069a0:	4a3b      	ldr	r2, [pc, #236]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80069a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80069a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069a8:	4b39      	ldr	r3, [pc, #228]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	4936      	ldr	r1, [pc, #216]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	608b      	str	r3, [r1, #8]
 80069ba:	e008      	b.n	80069ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b80      	cmp	r3, #128	@ 0x80
 80069c0:	d105      	bne.n	80069ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80069c2:	4b33      	ldr	r3, [pc, #204]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	4a32      	ldr	r2, [pc, #200]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 80069c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069ce:	4b2f      	ldr	r3, [pc, #188]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 030f 	and.w	r3, r3, #15
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d21d      	bcs.n	8006a18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069dc:	4b2b      	ldr	r3, [pc, #172]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f023 020f 	bic.w	r2, r3, #15
 80069e4:	4929      	ldr	r1, [pc, #164]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80069ec:	f7fb face 	bl	8001f8c <HAL_GetTick>
 80069f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069f2:	e00a      	b.n	8006a0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069f4:	f7fb faca 	bl	8001f8c <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d901      	bls.n	8006a0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006a06:	2303      	movs	r3, #3
 8006a08:	e03b      	b.n	8006a82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a0a:	4b20      	ldr	r3, [pc, #128]	@ (8006a8c <HAL_RCC_ClockConfig+0x260>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d1ed      	bne.n	80069f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d008      	beq.n	8006a36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a24:	4b1a      	ldr	r3, [pc, #104]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	4917      	ldr	r1, [pc, #92]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0308 	and.w	r3, r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d009      	beq.n	8006a56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a42:	4b13      	ldr	r3, [pc, #76]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	490f      	ldr	r1, [pc, #60]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a56:	f000 f825 	bl	8006aa4 <HAL_RCC_GetSysClockFreq>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8006a90 <HAL_RCC_ClockConfig+0x264>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	091b      	lsrs	r3, r3, #4
 8006a62:	f003 030f 	and.w	r3, r3, #15
 8006a66:	490c      	ldr	r1, [pc, #48]	@ (8006a98 <HAL_RCC_ClockConfig+0x26c>)
 8006a68:	5ccb      	ldrb	r3, [r1, r3]
 8006a6a:	f003 031f 	and.w	r3, r3, #31
 8006a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006a72:	4a0a      	ldr	r2, [pc, #40]	@ (8006a9c <HAL_RCC_ClockConfig+0x270>)
 8006a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006a76:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa0 <HAL_RCC_ClockConfig+0x274>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fb fa3a 	bl	8001ef4 <HAL_InitTick>
 8006a80:	4603      	mov	r3, r0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	40022000 	.word	0x40022000
 8006a90:	40021000 	.word	0x40021000
 8006a94:	04c4b400 	.word	0x04c4b400
 8006a98:	0800d92c 	.word	0x0800d92c
 8006a9c:	20000000 	.word	0x20000000
 8006aa0:	20000004 	.word	0x20000004

08006aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d102      	bne.n	8006abc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8006b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	e047      	b.n	8006b4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006abc:	4b27      	ldr	r3, [pc, #156]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 030c 	and.w	r3, r3, #12
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d102      	bne.n	8006ace <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ac8:	4b26      	ldr	r3, [pc, #152]	@ (8006b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006aca:	613b      	str	r3, [r7, #16]
 8006acc:	e03e      	b.n	8006b4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006ace:	4b23      	ldr	r3, [pc, #140]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	f003 030c 	and.w	r3, r3, #12
 8006ad6:	2b0c      	cmp	r3, #12
 8006ad8:	d136      	bne.n	8006b48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ada:	4b20      	ldr	r3, [pc, #128]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	091b      	lsrs	r3, r3, #4
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	3301      	adds	r3, #1
 8006af0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b03      	cmp	r3, #3
 8006af6:	d10c      	bne.n	8006b12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006af8:	4a1a      	ldr	r2, [pc, #104]	@ (8006b64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b00:	4a16      	ldr	r2, [pc, #88]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b02:	68d2      	ldr	r2, [r2, #12]
 8006b04:	0a12      	lsrs	r2, r2, #8
 8006b06:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	617b      	str	r3, [r7, #20]
      break;
 8006b10:	e00c      	b.n	8006b2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b12:	4a13      	ldr	r2, [pc, #76]	@ (8006b60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1a:	4a10      	ldr	r2, [pc, #64]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b1c:	68d2      	ldr	r2, [r2, #12]
 8006b1e:	0a12      	lsrs	r2, r2, #8
 8006b20:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
 8006b28:	617b      	str	r3, [r7, #20]
      break;
 8006b2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	0e5b      	lsrs	r3, r3, #25
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	3301      	adds	r3, #1
 8006b38:	005b      	lsls	r3, r3, #1
 8006b3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006b3c:	697a      	ldr	r2, [r7, #20]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	613b      	str	r3, [r7, #16]
 8006b46:	e001      	b.n	8006b4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006b4c:	693b      	ldr	r3, [r7, #16]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40021000 	.word	0x40021000
 8006b60:	00f42400 	.word	0x00f42400
 8006b64:	007a1200 	.word	0x007a1200

08006b68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b6c:	4b03      	ldr	r3, [pc, #12]	@ (8006b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	20000000 	.word	0x20000000

08006b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b84:	f7ff fff0 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	4904      	ldr	r1, [pc, #16]	@ (8006ba8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b96:	5ccb      	ldrb	r3, [r1, r3]
 8006b98:	f003 031f 	and.w	r3, r3, #31
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	40021000 	.word	0x40021000
 8006ba8:	0800d93c 	.word	0x0800d93c

08006bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bb0:	f7ff ffda 	bl	8006b68 <HAL_RCC_GetHCLKFreq>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	0adb      	lsrs	r3, r3, #11
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	4904      	ldr	r1, [pc, #16]	@ (8006bd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bc2:	5ccb      	ldrb	r3, [r1, r3]
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	0800d93c 	.word	0x0800d93c

08006bd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006bde:	4b1e      	ldr	r3, [pc, #120]	@ (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006be8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d10c      	bne.n	8006c16 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006bfc:	4a17      	ldr	r2, [pc, #92]	@ (8006c5c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c04:	4a14      	ldr	r2, [pc, #80]	@ (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c06:	68d2      	ldr	r2, [r2, #12]
 8006c08:	0a12      	lsrs	r2, r2, #8
 8006c0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c0e:	fb02 f303 	mul.w	r3, r2, r3
 8006c12:	617b      	str	r3, [r7, #20]
    break;
 8006c14:	e00c      	b.n	8006c30 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006c16:	4a12      	ldr	r2, [pc, #72]	@ (8006c60 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c20:	68d2      	ldr	r2, [r2, #12]
 8006c22:	0a12      	lsrs	r2, r2, #8
 8006c24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006c28:	fb02 f303 	mul.w	r3, r2, r3
 8006c2c:	617b      	str	r3, [r7, #20]
    break;
 8006c2e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006c30:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	0e5b      	lsrs	r3, r3, #25
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	005b      	lsls	r3, r3, #1
 8006c3e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006c4a:	687b      	ldr	r3, [r7, #4]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	007a1200 	.word	0x007a1200
 8006c60:	00f42400 	.word	0x00f42400

08006c64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c70:	2300      	movs	r3, #0
 8006c72:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8098 	beq.w	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c82:	2300      	movs	r3, #0
 8006c84:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c86:	4b43      	ldr	r3, [pc, #268]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10d      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c92:	4b40      	ldr	r3, [pc, #256]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c96:	4a3f      	ldr	r2, [pc, #252]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ca6:	60bb      	str	r3, [r7, #8]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006caa:	2301      	movs	r3, #1
 8006cac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cae:	4b3a      	ldr	r3, [pc, #232]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a39      	ldr	r2, [pc, #228]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006cb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006cba:	f7fb f967 	bl	8001f8c <HAL_GetTick>
 8006cbe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc0:	e009      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cc2:	f7fb f963 	bl	8001f8c <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d902      	bls.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	74fb      	strb	r3, [r7, #19]
        break;
 8006cd4:	e005      	b.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cd6:	4b30      	ldr	r3, [pc, #192]	@ (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d0ef      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ce2:	7cfb      	ldrb	r3, [r7, #19]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d159      	bne.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cf2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d01e      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d019      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006d04:	4b23      	ldr	r3, [pc, #140]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d10:	4b20      	ldr	r3, [pc, #128]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d16:	4a1f      	ldr	r2, [pc, #124]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d20:	4b1c      	ldr	r3, [pc, #112]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d26:	4a1b      	ldr	r2, [pc, #108]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006d30:	4a18      	ldr	r2, [pc, #96]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d016      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d42:	f7fb f923 	bl	8001f8c <HAL_GetTick>
 8006d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d48:	e00b      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fb f91f 	bl	8001f8c <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d902      	bls.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8006d60:	e006      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d62:	4b0c      	ldr	r3, [pc, #48]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d68:	f003 0302 	and.w	r3, r3, #2
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0ec      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006d70:	7cfb      	ldrb	r3, [r7, #19]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d76:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d84:	4903      	ldr	r1, [pc, #12]	@ (8006d94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006d8c:	e008      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	74bb      	strb	r3, [r7, #18]
 8006d92:	e005      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006d94:	40021000 	.word	0x40021000
 8006d98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d9c:	7cfb      	ldrb	r3, [r7, #19]
 8006d9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006da0:	7c7b      	ldrb	r3, [r7, #17]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d105      	bne.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006da6:	4ba6      	ldr	r3, [pc, #664]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006daa:	4aa5      	ldr	r2, [pc, #660]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006db0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006dbe:	4ba0      	ldr	r3, [pc, #640]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dc4:	f023 0203 	bic.w	r2, r3, #3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	499c      	ldr	r1, [pc, #624]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006de0:	4b97      	ldr	r3, [pc, #604]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006de6:	f023 020c 	bic.w	r2, r3, #12
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	4994      	ldr	r1, [pc, #592]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e02:	4b8f      	ldr	r3, [pc, #572]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e08:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	498b      	ldr	r1, [pc, #556]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00a      	beq.n	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e24:	4b86      	ldr	r3, [pc, #536]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	4983      	ldr	r1, [pc, #524]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e34:	4313      	orrs	r3, r2
 8006e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e46:	4b7e      	ldr	r3, [pc, #504]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	497a      	ldr	r1, [pc, #488]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00a      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e68:	4b75      	ldr	r3, [pc, #468]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	4972      	ldr	r1, [pc, #456]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e8a:	4b6d      	ldr	r3, [pc, #436]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	69db      	ldr	r3, [r3, #28]
 8006e98:	4969      	ldr	r1, [pc, #420]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00a      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eac:	4b64      	ldr	r3, [pc, #400]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eb2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	4961      	ldr	r1, [pc, #388]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00a      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006ece:	4b5c      	ldr	r3, [pc, #368]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006edc:	4958      	ldr	r1, [pc, #352]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d015      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ef0:	4b53      	ldr	r3, [pc, #332]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ef6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efe:	4950      	ldr	r1, [pc, #320]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f0e:	d105      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f10:	4b4b      	ldr	r3, [pc, #300]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	4a4a      	ldr	r2, [pc, #296]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f1a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d015      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006f28:	4b45      	ldr	r3, [pc, #276]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	4942      	ldr	r1, [pc, #264]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f46:	d105      	bne.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f48:	4b3d      	ldr	r3, [pc, #244]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f52:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d015      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006f60:	4b37      	ldr	r3, [pc, #220]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	4934      	ldr	r1, [pc, #208]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f7e:	d105      	bne.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006f80:	4b2f      	ldr	r3, [pc, #188]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	4a2e      	ldr	r2, [pc, #184]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f8a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d015      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f98:	4b29      	ldr	r3, [pc, #164]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa6:	4926      	ldr	r1, [pc, #152]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fb6:	d105      	bne.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006fb8:	4b21      	ldr	r3, [pc, #132]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	4a20      	ldr	r2, [pc, #128]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fc2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d015      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fde:	4918      	ldr	r1, [pc, #96]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fee:	d105      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ff0:	4b13      	ldr	r3, [pc, #76]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	4a12      	ldr	r2, [pc, #72]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ffa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d015      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007008:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007016:	490a      	ldr	r1, [pc, #40]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007026:	d105      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007028:	4b05      	ldr	r3, [pc, #20]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	4a04      	ldr	r2, [pc, #16]	@ (8007040 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800702e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007032:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007034:	7cbb      	ldrb	r3, [r7, #18]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	40021000 	.word	0x40021000

08007044 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d070      	beq.n	8007138 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	d106      	bne.n	8007070 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fa fc7c 	bl	8001968 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b10      	cmp	r3, #16
 8007084:	d04f      	beq.n	8007126 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	22ca      	movs	r2, #202	@ 0xca
 800708c:	625a      	str	r2, [r3, #36]	@ 0x24
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2253      	movs	r2, #83	@ 0x53
 8007094:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f878 	bl	800718c <RTC_EnterInitMode>
 800709c:	4603      	mov	r3, r0
 800709e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d126      	bne.n	80070f4 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80070b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070b8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6999      	ldr	r1, [r3, #24]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68d9      	ldr	r1, [r3, #12]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	041a      	lsls	r2, r3, #16
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f884 	bl	80071f8 <RTC_ExitInitMode>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d110      	bne.n	800711c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	69db      	ldr	r3, [r3, #28]
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	431a      	orrs	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	22ff      	movs	r2, #255	@ 0xff
 8007122:	625a      	str	r2, [r3, #36]	@ 0x24
 8007124:	e001      	b.n	800712a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007126:	2300      	movs	r3, #0
 8007128:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800712a:	7bfb      	ldrb	r3, [r7, #15]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d103      	bne.n	8007138 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
  }

  return status;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a0d      	ldr	r2, [pc, #52]	@ (8007188 <HAL_RTC_WaitForSynchro+0x44>)
 8007152:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007154:	f7fa ff1a 	bl	8001f8c <HAL_GetTick>
 8007158:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800715a:	e009      	b.n	8007170 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800715c:	f7fa ff16 	bl	8001f8c <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800716a:	d901      	bls.n	8007170 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e007      	b.n	8007180 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0ee      	beq.n	800715c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	0001005f 	.word	0x0001005f

0800718c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007194:	2300      	movs	r3, #0
 8007196:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d123      	bne.n	80071ee <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80071b4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80071b6:	f7fa fee9 	bl	8001f8c <HAL_GetTick>
 80071ba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071bc:	e00d      	b.n	80071da <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80071be:	f7fa fee5 	bl	8001f8c <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80071cc:	d905      	bls.n	80071da <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2203      	movs	r2, #3
 80071d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <RTC_EnterInitMode+0x62>
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d1e7      	bne.n	80071be <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80071ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007212:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10c      	bne.n	800723c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f7ff ff8e 	bl	8007144 <HAL_RTC_WaitForSynchro>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d022      	beq.n	8007274 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2203      	movs	r2, #3
 8007232:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	73fb      	strb	r3, [r7, #15]
 800723a:	e01b      	b.n	8007274 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 0220 	bic.w	r2, r2, #32
 800724a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff ff79 	bl	8007144 <HAL_RTC_WaitForSynchro>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d005      	beq.n	8007264 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2203      	movs	r2, #3
 800725c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      status = HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0220 	orr.w	r2, r2, #32
 8007272:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007274:	7bfb      	ldrb	r3, [r7, #15]
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b086      	sub	sp, #24
 8007282:	af00      	add	r7, sp, #0
 8007284:	60f8      	str	r0, [r7, #12]
 8007286:	60b9      	str	r1, [r7, #8]
 8007288:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007290:	2b01      	cmp	r3, #1
 8007292:	d101      	bne.n	8007298 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8007294:	2302      	movs	r3, #2
 8007296:	e062      	b.n	800735e <HAL_RTCEx_SetWakeUpTimer+0xe0>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	22ca      	movs	r2, #202	@ 0xca
 80072ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2253      	movs	r2, #83	@ 0x53
 80072b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699a      	ldr	r2, [r3, #24]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072c6:	619a      	str	r2, [r3, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d120      	bne.n	8007318 <HAL_RTCEx_SetWakeUpTimer+0x9a>
  {
    tickstart = HAL_GetTick();
 80072d6:	f7fa fe59 	bl	8001f8c <HAL_GetTick>
 80072da:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 80072dc:	e015      	b.n	800730a <HAL_RTCEx_SetWakeUpTimer+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072de:	f7fa fe55 	bl	8001f8c <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072ec:	d90d      	bls.n	800730a <HAL_RTCEx_SetWakeUpTimer+0x8c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	22ff      	movs	r2, #255	@ 0xff
 80072f4:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2203      	movs	r2, #3
 80072fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

        return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e029      	b.n	800735e <HAL_RTCEx_SetWakeUpTimer+0xe0>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	f003 0304 	and.w	r3, r3, #4
 8007314:	2b00      	cmp	r3, #0
 8007316:	d0e2      	beq.n	80072de <HAL_RTCEx_SetWakeUpTimer+0x60>
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f023 0107 	bic.w	r1, r3, #7
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	430a      	orrs	r2, r1
 800732a:	619a      	str	r2, [r3, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(hrtc->Instance->WUTR, (uint32_t)WakeUpCounter);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007342:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	22ff      	movs	r2, #255	@ 0xff
 800734a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e09d      	b.n	80074b4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737c:	2b00      	cmp	r3, #0
 800737e:	d108      	bne.n	8007392 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007388:	d009      	beq.n	800739e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	61da      	str	r2, [r3, #28]
 8007390:	e005      	b.n	800739e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d106      	bne.n	80073be <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7fa fb4f 	bl	8001a5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073d4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073de:	d902      	bls.n	80073e6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e002      	b.n	80073ec <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80073e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80073ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80073f4:	d007      	beq.n	8007406 <HAL_SPI_Init+0xa0>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	f003 0302 	and.w	r3, r3, #2
 8007420:	431a      	orrs	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	f003 0301 	and.w	r3, r3, #1
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007434:	431a      	orrs	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800743e:	431a      	orrs	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a1b      	ldr	r3, [r3, #32]
 8007444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007448:	ea42 0103 	orr.w	r1, r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007450:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	0c1b      	lsrs	r3, r3, #16
 8007462:	f003 0204 	and.w	r2, r3, #4
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	431a      	orrs	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007482:	ea42 0103 	orr.w	r1, r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	69da      	ldr	r2, [r3, #28]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e042      	b.n	8007554 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d106      	bne.n	80074e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fa fc6b 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2224      	movs	r2, #36	@ 0x24
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0201 	bic.w	r2, r2, #1
 80074fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fb82 	bl	8007c10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8b3 	bl	8007678 <UART_SetConfig>
 8007512:	4603      	mov	r3, r0
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	e01b      	b.n	8007554 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	685a      	ldr	r2, [r3, #4]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800752a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800753a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0201 	orr.w	r2, r2, #1
 800754a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fc01 	bl	8007d54 <UART_CheckIdleState>
 8007552:	4603      	mov	r3, r0
}
 8007554:	4618      	mov	r0, r3
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	@ 0x28
 8007560:	af02      	add	r7, sp, #8
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	4613      	mov	r3, r2
 800756a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007572:	2b20      	cmp	r3, #32
 8007574:	d17b      	bne.n	800766e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <HAL_UART_Transmit+0x26>
 800757c:	88fb      	ldrh	r3, [r7, #6]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e074      	b.n	8007670 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2221      	movs	r2, #33	@ 0x21
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007596:	f7fa fcf9 	bl	8001f8c <HAL_GetTick>
 800759a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	88fa      	ldrh	r2, [r7, #6]
 80075a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	88fa      	ldrh	r2, [r7, #6]
 80075a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075b4:	d108      	bne.n	80075c8 <HAL_UART_Transmit+0x6c>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d104      	bne.n	80075c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	61bb      	str	r3, [r7, #24]
 80075c6:	e003      	b.n	80075d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075cc:	2300      	movs	r3, #0
 80075ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80075d0:	e030      	b.n	8007634 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	9300      	str	r3, [sp, #0]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2200      	movs	r2, #0
 80075da:	2180      	movs	r1, #128	@ 0x80
 80075dc:	68f8      	ldr	r0, [r7, #12]
 80075de:	f000 fc63 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e03d      	b.n	8007670 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d10b      	bne.n	8007612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	881b      	ldrh	r3, [r3, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007608:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	3302      	adds	r3, #2
 800760e:	61bb      	str	r3, [r7, #24]
 8007610:	e007      	b.n	8007622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007612:	69fb      	ldr	r3, [r7, #28]
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	3301      	adds	r3, #1
 8007620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007628:	b29b      	uxth	r3, r3
 800762a:	3b01      	subs	r3, #1
 800762c:	b29a      	uxth	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1c8      	bne.n	80075d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	2200      	movs	r2, #0
 8007648:	2140      	movs	r1, #64	@ 0x40
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 fc2c 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d005      	beq.n	8007662 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2220      	movs	r2, #32
 800765a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e006      	b.n	8007670 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2220      	movs	r2, #32
 8007666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	e000      	b.n	8007670 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800766e:	2302      	movs	r3, #2
  }
}
 8007670:	4618      	mov	r0, r3
 8007672:	3720      	adds	r7, #32
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800767c:	b08c      	sub	sp, #48	@ 0x30
 800767e:	af00      	add	r7, sp, #0
 8007680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	431a      	orrs	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	695b      	ldr	r3, [r3, #20]
 8007696:	431a      	orrs	r2, r3
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4313      	orrs	r3, r2
 800769e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	4bab      	ldr	r3, [pc, #684]	@ (8007954 <UART_SetConfig+0x2dc>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	6812      	ldr	r2, [r2, #0]
 80076ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076b0:	430b      	orrs	r3, r1
 80076b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4aa0      	ldr	r2, [pc, #640]	@ (8007958 <UART_SetConfig+0x2e0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d004      	beq.n	80076e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076e0:	4313      	orrs	r3, r2
 80076e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80076ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	6812      	ldr	r2, [r2, #0]
 80076f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007702:	f023 010f 	bic.w	r1, r3, #15
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	430a      	orrs	r2, r1
 8007710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a91      	ldr	r2, [pc, #580]	@ (800795c <UART_SetConfig+0x2e4>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d125      	bne.n	8007768 <UART_SetConfig+0xf0>
 800771c:	4b90      	ldr	r3, [pc, #576]	@ (8007960 <UART_SetConfig+0x2e8>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007722:	f003 0303 	and.w	r3, r3, #3
 8007726:	2b03      	cmp	r3, #3
 8007728:	d81a      	bhi.n	8007760 <UART_SetConfig+0xe8>
 800772a:	a201      	add	r2, pc, #4	@ (adr r2, 8007730 <UART_SetConfig+0xb8>)
 800772c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007730:	08007741 	.word	0x08007741
 8007734:	08007751 	.word	0x08007751
 8007738:	08007749 	.word	0x08007749
 800773c:	08007759 	.word	0x08007759
 8007740:	2301      	movs	r3, #1
 8007742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007746:	e0d6      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007748:	2302      	movs	r3, #2
 800774a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800774e:	e0d2      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007750:	2304      	movs	r3, #4
 8007752:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007756:	e0ce      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007758:	2308      	movs	r3, #8
 800775a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800775e:	e0ca      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007760:	2310      	movs	r3, #16
 8007762:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007766:	e0c6      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a7d      	ldr	r2, [pc, #500]	@ (8007964 <UART_SetConfig+0x2ec>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d138      	bne.n	80077e4 <UART_SetConfig+0x16c>
 8007772:	4b7b      	ldr	r3, [pc, #492]	@ (8007960 <UART_SetConfig+0x2e8>)
 8007774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007778:	f003 030c 	and.w	r3, r3, #12
 800777c:	2b0c      	cmp	r3, #12
 800777e:	d82d      	bhi.n	80077dc <UART_SetConfig+0x164>
 8007780:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <UART_SetConfig+0x110>)
 8007782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007786:	bf00      	nop
 8007788:	080077bd 	.word	0x080077bd
 800778c:	080077dd 	.word	0x080077dd
 8007790:	080077dd 	.word	0x080077dd
 8007794:	080077dd 	.word	0x080077dd
 8007798:	080077cd 	.word	0x080077cd
 800779c:	080077dd 	.word	0x080077dd
 80077a0:	080077dd 	.word	0x080077dd
 80077a4:	080077dd 	.word	0x080077dd
 80077a8:	080077c5 	.word	0x080077c5
 80077ac:	080077dd 	.word	0x080077dd
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	080077dd 	.word	0x080077dd
 80077b8:	080077d5 	.word	0x080077d5
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077c2:	e098      	b.n	80078f6 <UART_SetConfig+0x27e>
 80077c4:	2302      	movs	r3, #2
 80077c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ca:	e094      	b.n	80078f6 <UART_SetConfig+0x27e>
 80077cc:	2304      	movs	r3, #4
 80077ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077d2:	e090      	b.n	80078f6 <UART_SetConfig+0x27e>
 80077d4:	2308      	movs	r3, #8
 80077d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077da:	e08c      	b.n	80078f6 <UART_SetConfig+0x27e>
 80077dc:	2310      	movs	r3, #16
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e2:	e088      	b.n	80078f6 <UART_SetConfig+0x27e>
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a5f      	ldr	r2, [pc, #380]	@ (8007968 <UART_SetConfig+0x2f0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d125      	bne.n	800783a <UART_SetConfig+0x1c2>
 80077ee:	4b5c      	ldr	r3, [pc, #368]	@ (8007960 <UART_SetConfig+0x2e8>)
 80077f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80077f8:	2b30      	cmp	r3, #48	@ 0x30
 80077fa:	d016      	beq.n	800782a <UART_SetConfig+0x1b2>
 80077fc:	2b30      	cmp	r3, #48	@ 0x30
 80077fe:	d818      	bhi.n	8007832 <UART_SetConfig+0x1ba>
 8007800:	2b20      	cmp	r3, #32
 8007802:	d00a      	beq.n	800781a <UART_SetConfig+0x1a2>
 8007804:	2b20      	cmp	r3, #32
 8007806:	d814      	bhi.n	8007832 <UART_SetConfig+0x1ba>
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <UART_SetConfig+0x19a>
 800780c:	2b10      	cmp	r3, #16
 800780e:	d008      	beq.n	8007822 <UART_SetConfig+0x1aa>
 8007810:	e00f      	b.n	8007832 <UART_SetConfig+0x1ba>
 8007812:	2300      	movs	r3, #0
 8007814:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007818:	e06d      	b.n	80078f6 <UART_SetConfig+0x27e>
 800781a:	2302      	movs	r3, #2
 800781c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007820:	e069      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007822:	2304      	movs	r3, #4
 8007824:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007828:	e065      	b.n	80078f6 <UART_SetConfig+0x27e>
 800782a:	2308      	movs	r3, #8
 800782c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007830:	e061      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007832:	2310      	movs	r3, #16
 8007834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007838:	e05d      	b.n	80078f6 <UART_SetConfig+0x27e>
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a4b      	ldr	r2, [pc, #300]	@ (800796c <UART_SetConfig+0x2f4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d125      	bne.n	8007890 <UART_SetConfig+0x218>
 8007844:	4b46      	ldr	r3, [pc, #280]	@ (8007960 <UART_SetConfig+0x2e8>)
 8007846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800784a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800784e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007850:	d016      	beq.n	8007880 <UART_SetConfig+0x208>
 8007852:	2bc0      	cmp	r3, #192	@ 0xc0
 8007854:	d818      	bhi.n	8007888 <UART_SetConfig+0x210>
 8007856:	2b80      	cmp	r3, #128	@ 0x80
 8007858:	d00a      	beq.n	8007870 <UART_SetConfig+0x1f8>
 800785a:	2b80      	cmp	r3, #128	@ 0x80
 800785c:	d814      	bhi.n	8007888 <UART_SetConfig+0x210>
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <UART_SetConfig+0x1f0>
 8007862:	2b40      	cmp	r3, #64	@ 0x40
 8007864:	d008      	beq.n	8007878 <UART_SetConfig+0x200>
 8007866:	e00f      	b.n	8007888 <UART_SetConfig+0x210>
 8007868:	2300      	movs	r3, #0
 800786a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800786e:	e042      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007870:	2302      	movs	r3, #2
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e03e      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007878:	2304      	movs	r3, #4
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e03a      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007880:	2308      	movs	r3, #8
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007886:	e036      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007888:	2310      	movs	r3, #16
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e032      	b.n	80078f6 <UART_SetConfig+0x27e>
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a30      	ldr	r2, [pc, #192]	@ (8007958 <UART_SetConfig+0x2e0>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d12a      	bne.n	80078f0 <UART_SetConfig+0x278>
 800789a:	4b31      	ldr	r3, [pc, #196]	@ (8007960 <UART_SetConfig+0x2e8>)
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80078a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078a8:	d01a      	beq.n	80078e0 <UART_SetConfig+0x268>
 80078aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80078ae:	d81b      	bhi.n	80078e8 <UART_SetConfig+0x270>
 80078b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078b4:	d00c      	beq.n	80078d0 <UART_SetConfig+0x258>
 80078b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80078ba:	d815      	bhi.n	80078e8 <UART_SetConfig+0x270>
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <UART_SetConfig+0x250>
 80078c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078c4:	d008      	beq.n	80078d8 <UART_SetConfig+0x260>
 80078c6:	e00f      	b.n	80078e8 <UART_SetConfig+0x270>
 80078c8:	2300      	movs	r3, #0
 80078ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ce:	e012      	b.n	80078f6 <UART_SetConfig+0x27e>
 80078d0:	2302      	movs	r3, #2
 80078d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d6:	e00e      	b.n	80078f6 <UART_SetConfig+0x27e>
 80078d8:	2304      	movs	r3, #4
 80078da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078de:	e00a      	b.n	80078f6 <UART_SetConfig+0x27e>
 80078e0:	2308      	movs	r3, #8
 80078e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e6:	e006      	b.n	80078f6 <UART_SetConfig+0x27e>
 80078e8:	2310      	movs	r3, #16
 80078ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ee:	e002      	b.n	80078f6 <UART_SetConfig+0x27e>
 80078f0:	2310      	movs	r3, #16
 80078f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a17      	ldr	r2, [pc, #92]	@ (8007958 <UART_SetConfig+0x2e0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	f040 80a8 	bne.w	8007a52 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007906:	2b08      	cmp	r3, #8
 8007908:	d834      	bhi.n	8007974 <UART_SetConfig+0x2fc>
 800790a:	a201      	add	r2, pc, #4	@ (adr r2, 8007910 <UART_SetConfig+0x298>)
 800790c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007910:	08007935 	.word	0x08007935
 8007914:	08007975 	.word	0x08007975
 8007918:	0800793d 	.word	0x0800793d
 800791c:	08007975 	.word	0x08007975
 8007920:	08007943 	.word	0x08007943
 8007924:	08007975 	.word	0x08007975
 8007928:	08007975 	.word	0x08007975
 800792c:	08007975 	.word	0x08007975
 8007930:	0800794b 	.word	0x0800794b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007934:	f7ff f924 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
 8007938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800793a:	e021      	b.n	8007980 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800793c:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <UART_SetConfig+0x2f8>)
 800793e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007940:	e01e      	b.n	8007980 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007942:	f7ff f8af 	bl	8006aa4 <HAL_RCC_GetSysClockFreq>
 8007946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007948:	e01a      	b.n	8007980 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800794e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007950:	e016      	b.n	8007980 <UART_SetConfig+0x308>
 8007952:	bf00      	nop
 8007954:	cfff69f3 	.word	0xcfff69f3
 8007958:	40008000 	.word	0x40008000
 800795c:	40013800 	.word	0x40013800
 8007960:	40021000 	.word	0x40021000
 8007964:	40004400 	.word	0x40004400
 8007968:	40004800 	.word	0x40004800
 800796c:	40004c00 	.word	0x40004c00
 8007970:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800797e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 812a 	beq.w	8007bdc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800798c:	4a9e      	ldr	r2, [pc, #632]	@ (8007c08 <UART_SetConfig+0x590>)
 800798e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007992:	461a      	mov	r2, r3
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	fbb3 f3f2 	udiv	r3, r3, r2
 800799a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	005b      	lsls	r3, r3, #1
 80079a4:	4413      	add	r3, r2
 80079a6:	69ba      	ldr	r2, [r7, #24]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d305      	bcc.n	80079b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d903      	bls.n	80079c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80079b8:	2301      	movs	r3, #1
 80079ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80079be:	e10d      	b.n	8007bdc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	2200      	movs	r2, #0
 80079c4:	60bb      	str	r3, [r7, #8]
 80079c6:	60fa      	str	r2, [r7, #12]
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079cc:	4a8e      	ldr	r2, [pc, #568]	@ (8007c08 <UART_SetConfig+0x590>)
 80079ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	2200      	movs	r2, #0
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	607a      	str	r2, [r7, #4]
 80079da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079e2:	f7f9 f863 	bl	8000aac <__aeabi_uldivmod>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4610      	mov	r0, r2
 80079ec:	4619      	mov	r1, r3
 80079ee:	f04f 0200 	mov.w	r2, #0
 80079f2:	f04f 0300 	mov.w	r3, #0
 80079f6:	020b      	lsls	r3, r1, #8
 80079f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079fc:	0202      	lsls	r2, r0, #8
 80079fe:	6979      	ldr	r1, [r7, #20]
 8007a00:	6849      	ldr	r1, [r1, #4]
 8007a02:	0849      	lsrs	r1, r1, #1
 8007a04:	2000      	movs	r0, #0
 8007a06:	460c      	mov	r4, r1
 8007a08:	4605      	mov	r5, r0
 8007a0a:	eb12 0804 	adds.w	r8, r2, r4
 8007a0e:	eb43 0905 	adc.w	r9, r3, r5
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	469a      	mov	sl, r3
 8007a1a:	4693      	mov	fp, r2
 8007a1c:	4652      	mov	r2, sl
 8007a1e:	465b      	mov	r3, fp
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	f7f9 f842 	bl	8000aac <__aeabi_uldivmod>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a36:	d308      	bcc.n	8007a4a <UART_SetConfig+0x3d2>
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a3e:	d204      	bcs.n	8007a4a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6a3a      	ldr	r2, [r7, #32]
 8007a46:	60da      	str	r2, [r3, #12]
 8007a48:	e0c8      	b.n	8007bdc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a50:	e0c4      	b.n	8007bdc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a5a:	d167      	bne.n	8007b2c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007a5c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a60:	2b08      	cmp	r3, #8
 8007a62:	d828      	bhi.n	8007ab6 <UART_SetConfig+0x43e>
 8007a64:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <UART_SetConfig+0x3f4>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007a91 	.word	0x08007a91
 8007a70:	08007a99 	.word	0x08007a99
 8007a74:	08007aa1 	.word	0x08007aa1
 8007a78:	08007ab7 	.word	0x08007ab7
 8007a7c:	08007aa7 	.word	0x08007aa7
 8007a80:	08007ab7 	.word	0x08007ab7
 8007a84:	08007ab7 	.word	0x08007ab7
 8007a88:	08007ab7 	.word	0x08007ab7
 8007a8c:	08007aaf 	.word	0x08007aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a90:	f7ff f876 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
 8007a94:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a96:	e014      	b.n	8007ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a98:	f7ff f888 	bl	8006bac <HAL_RCC_GetPCLK2Freq>
 8007a9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a9e:	e010      	b.n	8007ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8007c0c <UART_SetConfig+0x594>)
 8007aa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007aa4:	e00d      	b.n	8007ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aa6:	f7fe fffd 	bl	8006aa4 <HAL_RCC_GetSysClockFreq>
 8007aaa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007aac:	e009      	b.n	8007ac2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ab2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ab4:	e005      	b.n	8007ac2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007aba:	2301      	movs	r3, #1
 8007abc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ac0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 8089 	beq.w	8007bdc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ace:	4a4e      	ldr	r2, [pc, #312]	@ (8007c08 <UART_SetConfig+0x590>)
 8007ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007adc:	005a      	lsls	r2, r3, #1
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	085b      	lsrs	r3, r3, #1
 8007ae4:	441a      	add	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	2b0f      	cmp	r3, #15
 8007af4:	d916      	bls.n	8007b24 <UART_SetConfig+0x4ac>
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007afc:	d212      	bcs.n	8007b24 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	f023 030f 	bic.w	r3, r3, #15
 8007b06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	085b      	lsrs	r3, r3, #1
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	b29a      	uxth	r2, r3
 8007b14:	8bfb      	ldrh	r3, [r7, #30]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	8bfa      	ldrh	r2, [r7, #30]
 8007b20:	60da      	str	r2, [r3, #12]
 8007b22:	e05b      	b.n	8007bdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b2a:	e057      	b.n	8007bdc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d828      	bhi.n	8007b86 <UART_SetConfig+0x50e>
 8007b34:	a201      	add	r2, pc, #4	@ (adr r2, 8007b3c <UART_SetConfig+0x4c4>)
 8007b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b3a:	bf00      	nop
 8007b3c:	08007b61 	.word	0x08007b61
 8007b40:	08007b69 	.word	0x08007b69
 8007b44:	08007b71 	.word	0x08007b71
 8007b48:	08007b87 	.word	0x08007b87
 8007b4c:	08007b77 	.word	0x08007b77
 8007b50:	08007b87 	.word	0x08007b87
 8007b54:	08007b87 	.word	0x08007b87
 8007b58:	08007b87 	.word	0x08007b87
 8007b5c:	08007b7f 	.word	0x08007b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b60:	f7ff f80e 	bl	8006b80 <HAL_RCC_GetPCLK1Freq>
 8007b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b66:	e014      	b.n	8007b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b68:	f7ff f820 	bl	8006bac <HAL_RCC_GetPCLK2Freq>
 8007b6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b6e:	e010      	b.n	8007b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b70:	4b26      	ldr	r3, [pc, #152]	@ (8007c0c <UART_SetConfig+0x594>)
 8007b72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b74:	e00d      	b.n	8007b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b76:	f7fe ff95 	bl	8006aa4 <HAL_RCC_GetSysClockFreq>
 8007b7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b7c:	e009      	b.n	8007b92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b84:	e005      	b.n	8007b92 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b90:	bf00      	nop
    }

    if (pclk != 0U)
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d021      	beq.n	8007bdc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8007c08 <UART_SetConfig+0x590>)
 8007b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	085b      	lsrs	r3, r3, #1
 8007bb0:	441a      	add	r2, r3
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	2b0f      	cmp	r3, #15
 8007bc0:	d909      	bls.n	8007bd6 <UART_SetConfig+0x55e>
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc8:	d205      	bcs.n	8007bd6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	60da      	str	r2, [r3, #12]
 8007bd4:	e002      	b.n	8007bdc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007bf8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3730      	adds	r7, #48	@ 0x30
 8007c00:	46bd      	mov	sp, r7
 8007c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c06:	bf00      	nop
 8007c08:	0800d944 	.word	0x0800d944
 8007c0c:	00f42400 	.word	0x00f42400

08007c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00a      	beq.n	8007c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	430a      	orrs	r2, r1
 8007c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00a      	beq.n	8007c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	430a      	orrs	r2, r1
 8007c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca4:	f003 0310 	and.w	r3, r3, #16
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00a      	beq.n	8007cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cc6:	f003 0320 	and.w	r3, r3, #32
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00a      	beq.n	8007ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d01a      	beq.n	8007d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d0e:	d10a      	bne.n	8007d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00a      	beq.n	8007d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	605a      	str	r2, [r3, #4]
  }
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b098      	sub	sp, #96	@ 0x60
 8007d58:	af02      	add	r7, sp, #8
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d64:	f7fa f912 	bl	8001f8c <HAL_GetTick>
 8007d68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0308 	and.w	r3, r3, #8
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d12f      	bne.n	8007dd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d80:	2200      	movs	r2, #0
 8007d82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f88e 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d022      	beq.n	8007dd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007da6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007db2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007db6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e6      	bne.n	8007d92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2220      	movs	r2, #32
 8007dc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	e063      	b.n	8007ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b04      	cmp	r3, #4
 8007de4:	d149      	bne.n	8007e7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007de6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dee:	2200      	movs	r2, #0
 8007df0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f857 	bl	8007ea8 <UART_WaitOnFlagUntilTimeout>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d03c      	beq.n	8007e7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e08:	e853 3f00 	ldrex	r3, [r3]
 8007e0c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e26:	e841 2300 	strex	r3, r2, [r1]
 8007e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e6      	bne.n	8007e00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	3308      	adds	r3, #8
 8007e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	e853 3f00 	ldrex	r3, [r3]
 8007e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f023 0301 	bic.w	r3, r3, #1
 8007e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3308      	adds	r3, #8
 8007e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e52:	61fa      	str	r2, [r7, #28]
 8007e54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	69b9      	ldr	r1, [r7, #24]
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e5      	bne.n	8007e32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e012      	b.n	8007ea0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2220      	movs	r2, #32
 8007e7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2220      	movs	r2, #32
 8007e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3758      	adds	r7, #88	@ 0x58
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	603b      	str	r3, [r7, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb8:	e04f      	b.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec0:	d04b      	beq.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ec2:	f7fa f863 	bl	8001f8c <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d302      	bcc.n	8007ed8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e04e      	b.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0304 	and.w	r3, r3, #4
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d037      	beq.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	2b80      	cmp	r3, #128	@ 0x80
 8007eee:	d034      	beq.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	2b40      	cmp	r3, #64	@ 0x40
 8007ef4:	d031      	beq.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69db      	ldr	r3, [r3, #28]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d110      	bne.n	8007f26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f000 f838 	bl	8007f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2208      	movs	r2, #8
 8007f16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e029      	b.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69db      	ldr	r3, [r3, #28]
 8007f2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f34:	d111      	bne.n	8007f5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f81e 	bl	8007f82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e00f      	b.n	8007f7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	69da      	ldr	r2, [r3, #28]
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	4013      	ands	r3, r2
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	bf0c      	ite	eq
 8007f6a:	2301      	moveq	r3, #1
 8007f6c:	2300      	movne	r3, #0
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d0a0      	beq.n	8007eba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b095      	sub	sp, #84	@ 0x54
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f92:	e853 3f00 	ldrex	r3, [r3]
 8007f96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007faa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fb0:	e841 2300 	strex	r3, r2, [r1]
 8007fb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1e6      	bne.n	8007f8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	e853 3f00 	ldrex	r3, [r3]
 8007fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fd2:	f023 0301 	bic.w	r3, r3, #1
 8007fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3308      	adds	r3, #8
 8007fde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fe8:	e841 2300 	strex	r3, r2, [r1]
 8007fec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d1e3      	bne.n	8007fbc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d118      	bne.n	800802e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e853 3f00 	ldrex	r3, [r3]
 8008008:	60bb      	str	r3, [r7, #8]
   return(result);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	f023 0310 	bic.w	r3, r3, #16
 8008010:	647b      	str	r3, [r7, #68]	@ 0x44
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800801a:	61bb      	str	r3, [r7, #24]
 800801c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800801e:	6979      	ldr	r1, [r7, #20]
 8008020:	69ba      	ldr	r2, [r7, #24]
 8008022:	e841 2300 	strex	r3, r2, [r1]
 8008026:	613b      	str	r3, [r7, #16]
   return(result);
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d1e6      	bne.n	8007ffc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008042:	bf00      	nop
 8008044:	3754      	adds	r7, #84	@ 0x54
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800805c:	2b01      	cmp	r3, #1
 800805e:	d101      	bne.n	8008064 <HAL_UARTEx_DisableFifoMode+0x16>
 8008060:	2302      	movs	r3, #2
 8008062:	e027      	b.n	80080b4 <HAL_UARTEx_DisableFifoMode+0x66>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2224      	movs	r2, #36	@ 0x24
 8008070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008092:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2220      	movs	r2, #32
 80080a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e02d      	b.n	8008134 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2224      	movs	r2, #36	@ 0x24
 80080e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0201 	bic.w	r2, r2, #1
 80080fe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	430a      	orrs	r2, r1
 8008112:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f84f 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2220      	movs	r2, #32
 8008126:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800814c:	2b01      	cmp	r3, #1
 800814e:	d101      	bne.n	8008154 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008150:	2302      	movs	r3, #2
 8008152:	e02d      	b.n	80081b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2224      	movs	r2, #36	@ 0x24
 8008160:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	430a      	orrs	r2, r1
 800818e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f811 	bl	80081b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d108      	bne.n	80081da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80081d8:	e031      	b.n	800823e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80081da:	2308      	movs	r3, #8
 80081dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80081de:	2308      	movs	r3, #8
 80081e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	0e5b      	lsrs	r3, r3, #25
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 0307 	and.w	r3, r3, #7
 80081f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	0f5b      	lsrs	r3, r3, #29
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008202:	7bbb      	ldrb	r3, [r7, #14]
 8008204:	7b3a      	ldrb	r2, [r7, #12]
 8008206:	4911      	ldr	r1, [pc, #68]	@ (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008208:	5c8a      	ldrb	r2, [r1, r2]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800820e:	7b3a      	ldrb	r2, [r7, #12]
 8008210:	490f      	ldr	r1, [pc, #60]	@ (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008212:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008214:	fb93 f3f2 	sdiv	r3, r3, r2
 8008218:	b29a      	uxth	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	7b7a      	ldrb	r2, [r7, #13]
 8008224:	4909      	ldr	r1, [pc, #36]	@ (800824c <UARTEx_SetNbDataToProcess+0x94>)
 8008226:	5c8a      	ldrb	r2, [r1, r2]
 8008228:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800822c:	7b7a      	ldrb	r2, [r7, #13]
 800822e:	4908      	ldr	r1, [pc, #32]	@ (8008250 <UARTEx_SetNbDataToProcess+0x98>)
 8008230:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008232:	fb93 f3f2 	sdiv	r3, r3, r2
 8008236:	b29a      	uxth	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800823e:	bf00      	nop
 8008240:	3714      	adds	r7, #20
 8008242:	46bd      	mov	sp, r7
 8008244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008248:	4770      	bx	lr
 800824a:	bf00      	nop
 800824c:	0800d95c 	.word	0x0800d95c
 8008250:	0800d964 	.word	0x0800d964

08008254 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008254:	b480      	push	{r7}
 8008256:	b08b      	sub	sp, #44	@ 0x2c
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	fa93 f3a3 	rbit	r3, r3
 800826e:	613b      	str	r3, [r7, #16]
  return result;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800827a:	2320      	movs	r3, #32
 800827c:	e003      	b.n	8008286 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	fab3 f383 	clz	r3, r3
 8008284:	b2db      	uxtb	r3, r3
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	2103      	movs	r1, #3
 800828a:	fa01 f303 	lsl.w	r3, r1, r3
 800828e:	43db      	mvns	r3, r3
 8008290:	401a      	ands	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008296:	6a3b      	ldr	r3, [r7, #32]
 8008298:	fa93 f3a3 	rbit	r3, r3
 800829c:	61fb      	str	r3, [r7, #28]
  return result;
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80082a8:	2320      	movs	r3, #32
 80082aa:	e003      	b.n	80082b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	fab3 f383 	clz	r3, r3
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	fa01 f303 	lsl.w	r3, r1, r3
 80082bc:	431a      	orrs	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	601a      	str	r2, [r3, #0]
}
 80082c2:	bf00      	nop
 80082c4:	372c      	adds	r7, #44	@ 0x2c
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b085      	sub	sp, #20
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	685a      	ldr	r2, [r3, #4]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	43db      	mvns	r3, r3
 80082e2:	401a      	ands	r2, r3
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	fb01 f303 	mul.w	r3, r1, r3
 80082ec:	431a      	orrs	r2, r3
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	605a      	str	r2, [r3, #4]
}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80082fe:	b480      	push	{r7}
 8008300:	b08b      	sub	sp, #44	@ 0x2c
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	689a      	ldr	r2, [r3, #8]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	fa93 f3a3 	rbit	r3, r3
 8008318:	613b      	str	r3, [r7, #16]
  return result;
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800831e:	69bb      	ldr	r3, [r7, #24]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d101      	bne.n	8008328 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008324:	2320      	movs	r3, #32
 8008326:	e003      	b.n	8008330 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	fab3 f383 	clz	r3, r3
 800832e:	b2db      	uxtb	r3, r3
 8008330:	005b      	lsls	r3, r3, #1
 8008332:	2103      	movs	r1, #3
 8008334:	fa01 f303 	lsl.w	r3, r1, r3
 8008338:	43db      	mvns	r3, r3
 800833a:	401a      	ands	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008340:	6a3b      	ldr	r3, [r7, #32]
 8008342:	fa93 f3a3 	rbit	r3, r3
 8008346:	61fb      	str	r3, [r7, #28]
  return result;
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008352:	2320      	movs	r3, #32
 8008354:	e003      	b.n	800835e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008358:	fab3 f383 	clz	r3, r3
 800835c:	b2db      	uxtb	r3, r3
 800835e:	005b      	lsls	r3, r3, #1
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	fa01 f303 	lsl.w	r3, r1, r3
 8008366:	431a      	orrs	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800836c:	bf00      	nop
 800836e:	372c      	adds	r7, #44	@ 0x2c
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008378:	b480      	push	{r7}
 800837a:	b08b      	sub	sp, #44	@ 0x2c
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	fa93 f3a3 	rbit	r3, r3
 8008392:	613b      	str	r3, [r7, #16]
  return result;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800839e:	2320      	movs	r3, #32
 80083a0:	e003      	b.n	80083aa <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	fab3 f383 	clz	r3, r3
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	2103      	movs	r1, #3
 80083ae:	fa01 f303 	lsl.w	r3, r1, r3
 80083b2:	43db      	mvns	r3, r3
 80083b4:	401a      	ands	r2, r3
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	fa93 f3a3 	rbit	r3, r3
 80083c0:	61fb      	str	r3, [r7, #28]
  return result;
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80083cc:	2320      	movs	r3, #32
 80083ce:	e003      	b.n	80083d8 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	fab3 f383 	clz	r3, r3
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	005b      	lsls	r3, r3, #1
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	fa01 f303 	lsl.w	r3, r1, r3
 80083e0:	431a      	orrs	r2, r3
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	60da      	str	r2, [r3, #12]
}
 80083e6:	bf00      	nop
 80083e8:	372c      	adds	r7, #44	@ 0x2c
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b08b      	sub	sp, #44	@ 0x2c
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	60f8      	str	r0, [r7, #12]
 80083fa:	60b9      	str	r1, [r7, #8]
 80083fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1a      	ldr	r2, [r3, #32]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	fa93 f3a3 	rbit	r3, r3
 800840c:	613b      	str	r3, [r7, #16]
  return result;
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008412:	69bb      	ldr	r3, [r7, #24]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d101      	bne.n	800841c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008418:	2320      	movs	r3, #32
 800841a:	e003      	b.n	8008424 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	fab3 f383 	clz	r3, r3
 8008422:	b2db      	uxtb	r3, r3
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	210f      	movs	r1, #15
 8008428:	fa01 f303 	lsl.w	r3, r1, r3
 800842c:	43db      	mvns	r3, r3
 800842e:	401a      	ands	r2, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	fa93 f3a3 	rbit	r3, r3
 800843a:	61fb      	str	r3, [r7, #28]
  return result;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008446:	2320      	movs	r3, #32
 8008448:	e003      	b.n	8008452 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	fab3 f383 	clz	r3, r3
 8008450:	b2db      	uxtb	r3, r3
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	6879      	ldr	r1, [r7, #4]
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	431a      	orrs	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008460:	bf00      	nop
 8008462:	372c      	adds	r7, #44	@ 0x2c
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800846c:	b480      	push	{r7}
 800846e:	b08b      	sub	sp, #44	@ 0x2c
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	0a1b      	lsrs	r3, r3, #8
 8008480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	fa93 f3a3 	rbit	r3, r3
 8008488:	613b      	str	r3, [r7, #16]
  return result;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d101      	bne.n	8008498 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008494:	2320      	movs	r3, #32
 8008496:	e003      	b.n	80084a0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	fab3 f383 	clz	r3, r3
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	210f      	movs	r1, #15
 80084a4:	fa01 f303 	lsl.w	r3, r1, r3
 80084a8:	43db      	mvns	r3, r3
 80084aa:	401a      	ands	r2, r3
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	fa93 f3a3 	rbit	r3, r3
 80084b8:	61fb      	str	r3, [r7, #28]
  return result;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80084c4:	2320      	movs	r3, #32
 80084c6:	e003      	b.n	80084d0 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80084c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ca:	fab3 f383 	clz	r3, r3
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	6879      	ldr	r1, [r7, #4]
 80084d4:	fa01 f303 	lsl.w	r3, r1, r3
 80084d8:	431a      	orrs	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80084de:	bf00      	nop
 80084e0:	372c      	adds	r7, #44	@ 0x2c
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b088      	sub	sp, #32
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	fa93 f3a3 	rbit	r3, r3
 8008500:	60fb      	str	r3, [r7, #12]
  return result;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d101      	bne.n	8008510 <LL_GPIO_Init+0x26>
    return 32U;
 800850c:	2320      	movs	r3, #32
 800850e:	e003      	b.n	8008518 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	fab3 f383 	clz	r3, r3
 8008516:	b2db      	uxtb	r3, r3
 8008518:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800851a:	e048      	b.n	80085ae <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	2101      	movs	r1, #1
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	fa01 f303 	lsl.w	r3, r1, r3
 8008528:	4013      	ands	r3, r2
 800852a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d03a      	beq.n	80085a8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d003      	beq.n	8008542 <LL_GPIO_Init+0x58>
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b02      	cmp	r3, #2
 8008540:	d10e      	bne.n	8008560 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	461a      	mov	r2, r3
 8008548:	69b9      	ldr	r1, [r7, #24]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fed7 	bl	80082fe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	461a      	mov	r2, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff feb7 	bl	80082ce <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	461a      	mov	r2, r3
 8008566:	69b9      	ldr	r1, [r7, #24]
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f7ff ff05 	bl	8008378 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d111      	bne.n	800859a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2bff      	cmp	r3, #255	@ 0xff
 800857a:	d807      	bhi.n	800858c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	695b      	ldr	r3, [r3, #20]
 8008580:	461a      	mov	r2, r3
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f7ff ff34 	bl	80083f2 <LL_GPIO_SetAFPin_0_7>
 800858a:	e006      	b.n	800859a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	695b      	ldr	r3, [r3, #20]
 8008590:	461a      	mov	r2, r3
 8008592:	69b9      	ldr	r1, [r7, #24]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff ff69 	bl	800846c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	461a      	mov	r2, r3
 80085a0:	69b9      	ldr	r1, [r7, #24]
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7ff fe56 	bl	8008254 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	3301      	adds	r3, #1
 80085ac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	fa22 f303 	lsr.w	r3, r2, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d1af      	bne.n	800851c <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3720      	adds	r7, #32
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b085      	sub	sp, #20
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80085d6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80085da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3714      	adds	r7, #20
 80085ec:	46bd      	mov	sp, r7
 80085ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f2:	4770      	bx	lr

080085f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80085fc:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008600:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008608:	b29a      	uxth	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	b29b      	uxth	r3, r3
 800860e:	43db      	mvns	r3, r3
 8008610:	b29b      	uxth	r3, r3
 8008612:	4013      	ands	r3, r2
 8008614:	b29a      	uxth	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	60f8      	str	r0, [r7, #12]
 8008632:	1d3b      	adds	r3, r7, #4
 8008634:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2201      	movs	r2, #1
 800863c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2200      	movs	r2, #0
 8008644:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
	...

08008668 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008668:	b480      	push	{r7}
 800866a:	b09d      	sub	sp, #116	@ 0x74
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	4413      	add	r3, r2
 8008682:	881b      	ldrh	r3, [r3, #0]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800868a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800868e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	78db      	ldrb	r3, [r3, #3]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d81f      	bhi.n	80086da <USB_ActivateEndpoint+0x72>
 800869a:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <USB_ActivateEndpoint+0x38>)
 800869c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086cd 	.word	0x080086cd
 80086a8:	080086e3 	.word	0x080086e3
 80086ac:	080086bf 	.word	0x080086bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80086b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086b8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80086bc:	e012      	b.n	80086e4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80086be:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086c2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80086c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80086ca:	e00b      	b.n	80086e4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80086cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80086d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80086d8:	e004      	b.n	80086e4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80086e0:	e000      	b.n	80086e4 <USB_ActivateEndpoint+0x7c>
      break;
 80086e2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	441a      	add	r2, r3
 80086ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80086f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008702:	b29b      	uxth	r3, r3
 8008704:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	881b      	ldrh	r3, [r3, #0]
 8008712:	b29b      	uxth	r3, r3
 8008714:	b21b      	sxth	r3, r3
 8008716:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800871a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800871e:	b21a      	sxth	r2, r3
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	b21b      	sxth	r3, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	b21b      	sxth	r3, r3
 800872a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	441a      	add	r2, r3
 8008738:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800873c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008740:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008744:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008748:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800874c:	b29b      	uxth	r3, r3
 800874e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	7b1b      	ldrb	r3, [r3, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	f040 8178 	bne.w	8008a4a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	785b      	ldrb	r3, [r3, #1]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 8084 	beq.w	800886c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	61bb      	str	r3, [r7, #24]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800876e:	b29b      	uxth	r3, r3
 8008770:	461a      	mov	r2, r3
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	4413      	add	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	00da      	lsls	r2, r3, #3
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	88db      	ldrh	r3, [r3, #6]
 800878c:	085b      	lsrs	r3, r3, #1
 800878e:	b29b      	uxth	r3, r3
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	b29a      	uxth	r2, r3
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	827b      	strh	r3, [r7, #18]
 80087a6:	8a7b      	ldrh	r3, [r7, #18]
 80087a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d01b      	beq.n	80087e8 <USB_ActivateEndpoint+0x180>
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	881b      	ldrh	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087c6:	823b      	strh	r3, [r7, #16]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	441a      	add	r2, r3
 80087d2:	8a3b      	ldrh	r3, [r7, #16]
 80087d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	78db      	ldrb	r3, [r3, #3]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d020      	beq.n	8008832 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	781b      	ldrb	r3, [r3, #0]
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	881b      	ldrh	r3, [r3, #0]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008806:	81bb      	strh	r3, [r7, #12]
 8008808:	89bb      	ldrh	r3, [r7, #12]
 800880a:	f083 0320 	eor.w	r3, r3, #32
 800880e:	81bb      	strh	r3, [r7, #12]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	441a      	add	r2, r3
 800881a:	89bb      	ldrh	r3, [r7, #12]
 800881c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008820:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800882c:	b29b      	uxth	r3, r3
 800882e:	8013      	strh	r3, [r2, #0]
 8008830:	e2d5      	b.n	8008dde <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b29b      	uxth	r3, r3
 8008840:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008844:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008848:	81fb      	strh	r3, [r7, #14]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	441a      	add	r2, r3
 8008854:	89fb      	ldrh	r3, [r7, #14]
 8008856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800885a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800885e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008866:	b29b      	uxth	r3, r3
 8008868:	8013      	strh	r3, [r2, #0]
 800886a:	e2b8      	b.n	8008dde <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008876:	b29b      	uxth	r3, r3
 8008878:	461a      	mov	r2, r3
 800887a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800887c:	4413      	add	r3, r2
 800887e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	00da      	lsls	r2, r3, #3
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	4413      	add	r3, r2
 800888a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800888e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	88db      	ldrh	r3, [r3, #6]
 8008894:	085b      	lsrs	r3, r3, #1
 8008896:	b29b      	uxth	r3, r3
 8008898:	005b      	lsls	r3, r3, #1
 800889a:	b29a      	uxth	r2, r3
 800889c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800889e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b0:	4413      	add	r3, r2
 80088b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	00da      	lsls	r2, r3, #3
 80088ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088bc:	4413      	add	r3, r2
 80088be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	881b      	ldrh	r3, [r3, #0]
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d2:	801a      	strh	r2, [r3, #0]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <USB_ActivateEndpoint+0x28a>
 80088dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ea:	b29a      	uxth	r2, r3
 80088ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ee:	801a      	strh	r2, [r3, #0]
 80088f0:	e039      	b.n	8008966 <USB_ActivateEndpoint+0x2fe>
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80088f8:	d818      	bhi.n	800892c <USB_ActivateEndpoint+0x2c4>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <USB_ActivateEndpoint+0x2ac>
 800890e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008910:	3301      	adds	r3, #1
 8008912:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29a      	uxth	r2, r3
 800891a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800891c:	b29b      	uxth	r3, r3
 800891e:	029b      	lsls	r3, r3, #10
 8008920:	b29b      	uxth	r3, r3
 8008922:	4313      	orrs	r3, r2
 8008924:	b29a      	uxth	r2, r3
 8008926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	e01c      	b.n	8008966 <USB_ActivateEndpoint+0x2fe>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	f003 031f 	and.w	r3, r3, #31
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <USB_ActivateEndpoint+0x2de>
 8008940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008942:	3b01      	subs	r3, #1
 8008944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	881b      	ldrh	r3, [r3, #0]
 800894a:	b29a      	uxth	r2, r3
 800894c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800894e:	b29b      	uxth	r3, r3
 8008950:	029b      	lsls	r3, r3, #10
 8008952:	b29b      	uxth	r3, r3
 8008954:	4313      	orrs	r3, r2
 8008956:	b29b      	uxth	r3, r3
 8008958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008960:	b29a      	uxth	r2, r3
 8008962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008964:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	4413      	add	r3, r2
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008974:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008976:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d01b      	beq.n	80089b6 <USB_ActivateEndpoint+0x34e>
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4413      	add	r3, r2
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	b29b      	uxth	r3, r3
 800898c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008994:	843b      	strh	r3, [r7, #32]
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	441a      	add	r2, r3
 80089a0:	8c3b      	ldrh	r3, [r7, #32]
 80089a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d124      	bne.n	8008a08 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	881b      	ldrh	r3, [r3, #0]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089d4:	83bb      	strh	r3, [r7, #28]
 80089d6:	8bbb      	ldrh	r3, [r7, #28]
 80089d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80089dc:	83bb      	strh	r3, [r7, #28]
 80089de:	8bbb      	ldrh	r3, [r7, #28]
 80089e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80089e4:	83bb      	strh	r3, [r7, #28]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	441a      	add	r2, r3
 80089f0:	8bbb      	ldrh	r3, [r7, #28]
 80089f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	8013      	strh	r3, [r2, #0]
 8008a06:	e1ea      	b.n	8008dde <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a1e:	83fb      	strh	r3, [r7, #30]
 8008a20:	8bfb      	ldrh	r3, [r7, #30]
 8008a22:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a26:	83fb      	strh	r3, [r7, #30]
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	441a      	add	r2, r3
 8008a32:	8bfb      	ldrh	r3, [r7, #30]
 8008a34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	8013      	strh	r3, [r2, #0]
 8008a48:	e1c9      	b.n	8008dde <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	78db      	ldrb	r3, [r3, #3]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d11e      	bne.n	8008a90 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	781b      	ldrb	r3, [r3, #0]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4413      	add	r3, r2
 8008a5c:	881b      	ldrh	r3, [r3, #0]
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a68:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	441a      	add	r2, r3
 8008a76:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008a7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a82:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	8013      	strh	r3, [r2, #0]
 8008a8e:	e01d      	b.n	8008acc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008a90:	687a      	ldr	r2, [r7, #4]
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aa6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	441a      	add	r2, r3
 8008ab4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008ab8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008abc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ac0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ac8:	b29b      	uxth	r3, r3
 8008aca:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008adc:	4413      	add	r3, r2
 8008ade:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	00da      	lsls	r2, r3, #3
 8008ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	891b      	ldrh	r3, [r3, #8]
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	b29b      	uxth	r3, r3
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008afe:	801a      	strh	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b10:	4413      	add	r3, r2
 8008b12:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	00da      	lsls	r2, r3, #3
 8008b1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	895b      	ldrh	r3, [r3, #10]
 8008b28:	085b      	lsrs	r3, r3, #1
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	b29a      	uxth	r2, r3
 8008b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b32:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	f040 8093 	bne.w	8008c64 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b3e:	687a      	ldr	r2, [r7, #4]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	881b      	ldrh	r3, [r3, #0]
 8008b4a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008b4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d01b      	beq.n	8008b92 <USB_ActivateEndpoint+0x52a>
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b70:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	441a      	add	r2, r3
 8008b7c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b8e:	b29b      	uxth	r3, r3
 8008b90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008ba0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d01b      	beq.n	8008be2 <USB_ActivateEndpoint+0x57a>
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008bc2:	687a      	ldr	r2, [r7, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	441a      	add	r2, r3
 8008bcc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4413      	add	r3, r2
 8008bec:	881b      	ldrh	r3, [r3, #0]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bf8:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008bfa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008bfc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008c00:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008c02:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008c04:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008c08:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	441a      	add	r2, r3
 8008c14:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008c16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	881b      	ldrh	r3, [r3, #0]
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c40:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	441a      	add	r2, r3
 8008c4c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	8013      	strh	r3, [r2, #0]
 8008c62:	e0bc      	b.n	8008dde <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008c78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d01d      	beq.n	8008cbc <USB_ActivateEndpoint+0x654>
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	4413      	add	r3, r2
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c96:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008c9a:	687a      	ldr	r2, [r7, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	441a      	add	r2, r3
 8008ca4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	881b      	ldrh	r3, [r3, #0]
 8008cc8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008ccc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d01d      	beq.n	8008d14 <USB_ActivateEndpoint+0x6ac>
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	881b      	ldrh	r3, [r3, #0]
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cee:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	441a      	add	r2, r3
 8008cfc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008d00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d0c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	78db      	ldrb	r3, [r3, #3]
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d024      	beq.n	8008d66 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d32:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008d36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008d3a:	f083 0320 	eor.w	r3, r3, #32
 8008d3e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	441a      	add	r2, r3
 8008d4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008d50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	8013      	strh	r3, [r2, #0]
 8008d64:	e01d      	b.n	8008da2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d7c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	441a      	add	r2, r3
 8008d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	4413      	add	r3, r2
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008db8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	441a      	add	r2, r3
 8008dc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008dde:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3774      	adds	r7, #116	@ 0x74
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop

08008df0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b08d      	sub	sp, #52	@ 0x34
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	7b1b      	ldrb	r3, [r3, #12]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f040 808e 	bne.w	8008f20 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	785b      	ldrb	r3, [r3, #1]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d044      	beq.n	8008e96 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4413      	add	r3, r2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	81bb      	strh	r3, [r7, #12]
 8008e1a:	89bb      	ldrh	r3, [r7, #12]
 8008e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01b      	beq.n	8008e5c <USB_DeactivateEndpoint+0x6c>
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	881b      	ldrh	r3, [r3, #0]
 8008e30:	b29b      	uxth	r3, r3
 8008e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e3a:	817b      	strh	r3, [r7, #10]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	441a      	add	r2, r3
 8008e46:	897b      	ldrh	r3, [r7, #10]
 8008e48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e72:	813b      	strh	r3, [r7, #8]
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	441a      	add	r2, r3
 8008e7e:	893b      	ldrh	r3, [r7, #8]
 8008e80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	8013      	strh	r3, [r2, #0]
 8008e94:	e192      	b.n	80091bc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	781b      	ldrb	r3, [r3, #0]
 8008e9c:	009b      	lsls	r3, r3, #2
 8008e9e:	4413      	add	r3, r2
 8008ea0:	881b      	ldrh	r3, [r3, #0]
 8008ea2:	827b      	strh	r3, [r7, #18]
 8008ea4:	8a7b      	ldrh	r3, [r7, #18]
 8008ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d01b      	beq.n	8008ee6 <USB_DeactivateEndpoint+0xf6>
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4413      	add	r3, r2
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ec4:	823b      	strh	r3, [r7, #16]
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	441a      	add	r2, r3
 8008ed0:	8a3b      	ldrh	r3, [r7, #16]
 8008ed2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ed6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008eda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008efc:	81fb      	strh	r3, [r7, #14]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	441a      	add	r2, r3
 8008f08:	89fb      	ldrh	r3, [r7, #14]
 8008f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	8013      	strh	r3, [r2, #0]
 8008f1e:	e14d      	b.n	80091bc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	785b      	ldrb	r3, [r3, #1]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f040 80a5 	bne.w	8009074 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	881b      	ldrh	r3, [r3, #0]
 8008f36:	843b      	strh	r3, [r7, #32]
 8008f38:	8c3b      	ldrh	r3, [r7, #32]
 8008f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d01b      	beq.n	8008f7a <USB_DeactivateEndpoint+0x18a>
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f58:	83fb      	strh	r3, [r7, #30]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	441a      	add	r2, r3
 8008f64:	8bfb      	ldrh	r3, [r7, #30]
 8008f66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f6e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	83bb      	strh	r3, [r7, #28]
 8008f88:	8bbb      	ldrh	r3, [r7, #28]
 8008f8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01b      	beq.n	8008fca <USB_DeactivateEndpoint+0x1da>
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	009b      	lsls	r3, r3, #2
 8008f9a:	4413      	add	r3, r2
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fa8:	837b      	strh	r3, [r7, #26]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	441a      	add	r2, r3
 8008fb4:	8b7b      	ldrh	r3, [r7, #26]
 8008fb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008fc6:	b29b      	uxth	r3, r3
 8008fc8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	881b      	ldrh	r3, [r3, #0]
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fdc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe0:	833b      	strh	r3, [r7, #24]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	441a      	add	r2, r3
 8008fec:	8b3b      	ldrh	r3, [r7, #24]
 8008fee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ffa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	4413      	add	r3, r2
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009018:	82fb      	strh	r3, [r7, #22]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	441a      	add	r2, r3
 8009024:	8afb      	ldrh	r3, [r7, #22]
 8009026:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800902a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800902e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009036:	b29b      	uxth	r3, r3
 8009038:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	881b      	ldrh	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800904c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009050:	82bb      	strh	r3, [r7, #20]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	441a      	add	r2, r3
 800905c:	8abb      	ldrh	r3, [r7, #20]
 800905e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009062:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800906a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800906e:	b29b      	uxth	r3, r3
 8009070:	8013      	strh	r3, [r2, #0]
 8009072:	e0a3      	b.n	80091bc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	4413      	add	r3, r2
 800907e:	881b      	ldrh	r3, [r3, #0]
 8009080:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009082:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01b      	beq.n	80090c4 <USB_DeactivateEndpoint+0x2d4>
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	881b      	ldrh	r3, [r3, #0]
 8009098:	b29b      	uxth	r3, r3
 800909a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800909e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090a2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	441a      	add	r2, r3
 80090ae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80090b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80090d2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80090d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01b      	beq.n	8009114 <USB_DeactivateEndpoint+0x324>
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	4413      	add	r3, r2
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	441a      	add	r2, r3
 80090fe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800910c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009110:	b29b      	uxth	r3, r3
 8009112:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29b      	uxth	r3, r3
 8009122:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009126:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800912a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	441a      	add	r2, r3
 8009136:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009138:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800913c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009140:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009144:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009148:	b29b      	uxth	r3, r3
 800914a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4413      	add	r3, r2
 8009156:	881b      	ldrh	r3, [r3, #0]
 8009158:	b29b      	uxth	r3, r3
 800915a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800915e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009162:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	441a      	add	r2, r3
 800916e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800917c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009180:	b29b      	uxth	r3, r3
 8009182:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	009b      	lsls	r3, r3, #2
 800918c:	4413      	add	r3, r2
 800918e:	881b      	ldrh	r3, [r3, #0]
 8009190:	b29b      	uxth	r3, r3
 8009192:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800919a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	441a      	add	r2, r3
 80091a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80091a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80091bc:	2300      	movs	r3, #0
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3734      	adds	r7, #52	@ 0x34
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b0c2      	sub	sp, #264	@ 0x108
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80091d8:	6018      	str	r0, [r3, #0]
 80091da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091e2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	f040 86b7 	bne.w	8009f64 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80091f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80091fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	699a      	ldr	r2, [r3, #24]
 8009202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	429a      	cmp	r2, r3
 8009210:	d908      	bls.n	8009224 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009222:	e007      	b.n	8009234 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	7b1b      	ldrb	r3, [r3, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d13a      	bne.n	80092ba <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6959      	ldr	r1, [r3, #20]
 8009250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	88da      	ldrh	r2, [r3, #6]
 800925c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009260:	b29b      	uxth	r3, r3
 8009262:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009266:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800926a:	6800      	ldr	r0, [r0, #0]
 800926c:	f001 fc99 	bl	800aba2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009274:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	613b      	str	r3, [r7, #16]
 800927c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800928a:	b29b      	uxth	r3, r3
 800928c:	461a      	mov	r2, r3
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	4413      	add	r3, r2
 8009292:	613b      	str	r3, [r7, #16]
 8009294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	00da      	lsls	r2, r3, #3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	4413      	add	r3, r2
 80092a6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b0:	b29a      	uxth	r2, r3
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	801a      	strh	r2, [r3, #0]
 80092b6:	f000 be1f 	b.w	8009ef8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80092ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	78db      	ldrb	r3, [r3, #3]
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	f040 8462 	bne.w	8009b90 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80092cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6a1a      	ldr	r2, [r3, #32]
 80092d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	691b      	ldr	r3, [r3, #16]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	f240 83df 	bls.w	8009aa8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80092ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80092f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	009b      	lsls	r3, r3, #2
 8009302:	4413      	add	r3, r2
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800930c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009310:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	441a      	add	r2, r3
 800932e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8009332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800933a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800933e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009342:	b29b      	uxth	r3, r3
 8009344:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800934a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6a1a      	ldr	r2, [r3, #32]
 8009352:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009356:	1ad2      	subs	r2, r2, r3
 8009358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800935c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009368:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009372:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	009b      	lsls	r3, r3, #2
 800937c:	4413      	add	r3, r2
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	b29b      	uxth	r3, r3
 8009382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009386:	2b00      	cmp	r3, #0
 8009388:	f000 81c7 	beq.w	800971a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800938c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009390:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	633b      	str	r3, [r7, #48]	@ 0x30
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	785b      	ldrb	r3, [r3, #1]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d177      	bne.n	8009498 <USB_EPStartXfer+0x2ce>
 80093a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	461a      	mov	r2, r3
 80093c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093c8:	4413      	add	r3, r2
 80093ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	00da      	lsls	r2, r3, #3
 80093da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093dc:	4413      	add	r3, r2
 80093de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093ee:	b29a      	uxth	r2, r3
 80093f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f2:	801a      	strh	r2, [r3, #0]
 80093f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <USB_EPStartXfer+0x248>
 80093fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fe:	881b      	ldrh	r3, [r3, #0]
 8009400:	b29b      	uxth	r3, r3
 8009402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800940a:	b29a      	uxth	r2, r3
 800940c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940e:	801a      	strh	r2, [r3, #0]
 8009410:	e067      	b.n	80094e2 <USB_EPStartXfer+0x318>
 8009412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009416:	2b3e      	cmp	r3, #62	@ 0x3e
 8009418:	d81c      	bhi.n	8009454 <USB_EPStartXfer+0x28a>
 800941a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800941e:	085b      	lsrs	r3, r3, #1
 8009420:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009428:	f003 0301 	and.w	r3, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d004      	beq.n	800943a <USB_EPStartXfer+0x270>
 8009430:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009434:	3301      	adds	r3, #1
 8009436:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800943a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	b29a      	uxth	r2, r3
 8009440:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009444:	b29b      	uxth	r3, r3
 8009446:	029b      	lsls	r3, r3, #10
 8009448:	b29b      	uxth	r3, r3
 800944a:	4313      	orrs	r3, r2
 800944c:	b29a      	uxth	r2, r3
 800944e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	e046      	b.n	80094e2 <USB_EPStartXfer+0x318>
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009458:	095b      	lsrs	r3, r3, #5
 800945a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800945e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009462:	f003 031f 	and.w	r3, r3, #31
 8009466:	2b00      	cmp	r3, #0
 8009468:	d104      	bne.n	8009474 <USB_EPStartXfer+0x2aa>
 800946a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800946e:	3b01      	subs	r3, #1
 8009470:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009476:	881b      	ldrh	r3, [r3, #0]
 8009478:	b29a      	uxth	r2, r3
 800947a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800947e:	b29b      	uxth	r3, r3
 8009480:	029b      	lsls	r3, r3, #10
 8009482:	b29b      	uxth	r3, r3
 8009484:	4313      	orrs	r3, r2
 8009486:	b29b      	uxth	r3, r3
 8009488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800948c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009490:	b29a      	uxth	r2, r3
 8009492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009494:	801a      	strh	r2, [r3, #0]
 8009496:	e024      	b.n	80094e2 <USB_EPStartXfer+0x318>
 8009498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800949c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	785b      	ldrb	r3, [r3, #1]
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d11c      	bne.n	80094e2 <USB_EPStartXfer+0x318>
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	461a      	mov	r2, r3
 80094ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094bc:	4413      	add	r3, r2
 80094be:	633b      	str	r3, [r7, #48]	@ 0x30
 80094c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	00da      	lsls	r2, r3, #3
 80094ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d0:	4413      	add	r3, r2
 80094d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80094d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80094d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094dc:	b29a      	uxth	r2, r3
 80094de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80094e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	895b      	ldrh	r3, [r3, #10]
 80094ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	6959      	ldr	r1, [r3, #20]
 80094fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009502:	b29b      	uxth	r3, r3
 8009504:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009508:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800950c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009510:	6800      	ldr	r0, [r0, #0]
 8009512:	f001 fb46 	bl	800aba2 <USB_WritePMA>
            ep->xfer_buff += len;
 8009516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695a      	ldr	r2, [r3, #20]
 8009522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009526:	441a      	add	r2, r3
 8009528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800952c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	6a1a      	ldr	r2, [r3, #32]
 8009540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009544:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	429a      	cmp	r2, r3
 800954e:	d90f      	bls.n	8009570 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009554:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6a1a      	ldr	r2, [r3, #32]
 800955c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009560:	1ad2      	subs	r2, r2, r3
 8009562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	621a      	str	r2, [r3, #32]
 800956e:	e00e      	b.n	800958e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800958e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d177      	bne.n	800968e <USB_EPStartXfer+0x4c4>
 800959e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	61bb      	str	r3, [r7, #24]
 80095aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	461a      	mov	r2, r3
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	4413      	add	r3, r2
 80095c0:	61bb      	str	r3, [r7, #24]
 80095c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	00da      	lsls	r2, r3, #3
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	4413      	add	r3, r2
 80095d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80095d8:	617b      	str	r3, [r7, #20]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095e4:	b29a      	uxth	r2, r3
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	801a      	strh	r2, [r3, #0]
 80095ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <USB_EPStartXfer+0x43e>
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009600:	b29a      	uxth	r2, r3
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	801a      	strh	r2, [r3, #0]
 8009606:	e06d      	b.n	80096e4 <USB_EPStartXfer+0x51a>
 8009608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800960c:	2b3e      	cmp	r3, #62	@ 0x3e
 800960e:	d81c      	bhi.n	800964a <USB_EPStartXfer+0x480>
 8009610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009614:	085b      	lsrs	r3, r3, #1
 8009616:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800961a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d004      	beq.n	8009630 <USB_EPStartXfer+0x466>
 8009626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800962a:	3301      	adds	r3, #1
 800962c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	881b      	ldrh	r3, [r3, #0]
 8009634:	b29a      	uxth	r2, r3
 8009636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800963a:	b29b      	uxth	r3, r3
 800963c:	029b      	lsls	r3, r3, #10
 800963e:	b29b      	uxth	r3, r3
 8009640:	4313      	orrs	r3, r2
 8009642:	b29a      	uxth	r2, r3
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	801a      	strh	r2, [r3, #0]
 8009648:	e04c      	b.n	80096e4 <USB_EPStartXfer+0x51a>
 800964a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964e:	095b      	lsrs	r3, r3, #5
 8009650:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	2b00      	cmp	r3, #0
 800965e:	d104      	bne.n	800966a <USB_EPStartXfer+0x4a0>
 8009660:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009664:	3b01      	subs	r3, #1
 8009666:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29a      	uxth	r2, r3
 8009670:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009674:	b29b      	uxth	r3, r3
 8009676:	029b      	lsls	r3, r3, #10
 8009678:	b29b      	uxth	r3, r3
 800967a:	4313      	orrs	r3, r2
 800967c:	b29b      	uxth	r3, r3
 800967e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009686:	b29a      	uxth	r2, r3
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	801a      	strh	r2, [r3, #0]
 800968c:	e02a      	b.n	80096e4 <USB_EPStartXfer+0x51a>
 800968e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	785b      	ldrb	r3, [r3, #1]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d122      	bne.n	80096e4 <USB_EPStartXfer+0x51a>
 800969e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	623b      	str	r3, [r7, #32]
 80096aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	461a      	mov	r2, r3
 80096bc:	6a3b      	ldr	r3, [r7, #32]
 80096be:	4413      	add	r3, r2
 80096c0:	623b      	str	r3, [r7, #32]
 80096c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	00da      	lsls	r2, r3, #3
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	4413      	add	r3, r2
 80096d4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80096d8:	61fb      	str	r3, [r7, #28]
 80096da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096de:	b29a      	uxth	r2, r3
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80096e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	891b      	ldrh	r3, [r3, #8]
 80096f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	6959      	ldr	r1, [r3, #20]
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009704:	b29b      	uxth	r3, r3
 8009706:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800970a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800970e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009712:	6800      	ldr	r0, [r0, #0]
 8009714:	f001 fa45 	bl	800aba2 <USB_WritePMA>
 8009718:	e3ee      	b.n	8009ef8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800971a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	785b      	ldrb	r3, [r3, #1]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d177      	bne.n	800981a <USB_EPStartXfer+0x650>
 800972a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800972e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800973a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009744:	b29b      	uxth	r3, r3
 8009746:	461a      	mov	r2, r3
 8009748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800974a:	4413      	add	r3, r2
 800974c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800974e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	781b      	ldrb	r3, [r3, #0]
 800975a:	00da      	lsls	r2, r3, #3
 800975c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800975e:	4413      	add	r3, r2
 8009760:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009764:	647b      	str	r3, [r7, #68]	@ 0x44
 8009766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009768:	881b      	ldrh	r3, [r3, #0]
 800976a:	b29b      	uxth	r3, r3
 800976c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009770:	b29a      	uxth	r2, r3
 8009772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009774:	801a      	strh	r2, [r3, #0]
 8009776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <USB_EPStartXfer+0x5ca>
 800977e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	b29b      	uxth	r3, r3
 8009784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800978c:	b29a      	uxth	r2, r3
 800978e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009790:	801a      	strh	r2, [r3, #0]
 8009792:	e06d      	b.n	8009870 <USB_EPStartXfer+0x6a6>
 8009794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009798:	2b3e      	cmp	r3, #62	@ 0x3e
 800979a:	d81c      	bhi.n	80097d6 <USB_EPStartXfer+0x60c>
 800979c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a0:	085b      	lsrs	r3, r3, #1
 80097a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d004      	beq.n	80097bc <USB_EPStartXfer+0x5f2>
 80097b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097b6:	3301      	adds	r3, #1
 80097b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80097bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	029b      	lsls	r3, r3, #10
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	4313      	orrs	r3, r2
 80097ce:	b29a      	uxth	r2, r3
 80097d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097d2:	801a      	strh	r2, [r3, #0]
 80097d4:	e04c      	b.n	8009870 <USB_EPStartXfer+0x6a6>
 80097d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80097e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e4:	f003 031f 	and.w	r3, r3, #31
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d104      	bne.n	80097f6 <USB_EPStartXfer+0x62c>
 80097ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097f0:	3b01      	subs	r3, #1
 80097f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80097f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097f8:	881b      	ldrh	r3, [r3, #0]
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009800:	b29b      	uxth	r3, r3
 8009802:	029b      	lsls	r3, r3, #10
 8009804:	b29b      	uxth	r3, r3
 8009806:	4313      	orrs	r3, r2
 8009808:	b29b      	uxth	r3, r3
 800980a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800980e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009812:	b29a      	uxth	r2, r3
 8009814:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	e02a      	b.n	8009870 <USB_EPStartXfer+0x6a6>
 800981a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800981e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	785b      	ldrb	r3, [r3, #1]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d122      	bne.n	8009870 <USB_EPStartXfer+0x6a6>
 800982a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800982e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	653b      	str	r3, [r7, #80]	@ 0x50
 8009836:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800983a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009844:	b29b      	uxth	r3, r3
 8009846:	461a      	mov	r2, r3
 8009848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984a:	4413      	add	r3, r2
 800984c:	653b      	str	r3, [r7, #80]	@ 0x50
 800984e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	00da      	lsls	r2, r3, #3
 800985c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800985e:	4413      	add	r3, r2
 8009860:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009864:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009866:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800986a:	b29a      	uxth	r2, r3
 800986c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800986e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	891b      	ldrh	r3, [r3, #8]
 800987c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6959      	ldr	r1, [r3, #20]
 800988c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009890:	b29b      	uxth	r3, r3
 8009892:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009896:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800989a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800989e:	6800      	ldr	r0, [r0, #0]
 80098a0:	f001 f97f 	bl	800aba2 <USB_WritePMA>
            ep->xfer_buff += len;
 80098a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	695a      	ldr	r2, [r3, #20]
 80098b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b4:	441a      	add	r2, r3
 80098b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80098c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6a1a      	ldr	r2, [r3, #32]
 80098ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691b      	ldr	r3, [r3, #16]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d90f      	bls.n	80098fe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80098de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	6a1a      	ldr	r2, [r3, #32]
 80098ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ee:	1ad2      	subs	r2, r2, r3
 80098f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	621a      	str	r2, [r3, #32]
 80098fc:	e00e      	b.n	800991c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80098fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800990e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	2200      	movs	r2, #0
 800991a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800991c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	643b      	str	r3, [r7, #64]	@ 0x40
 8009928:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800992c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	785b      	ldrb	r3, [r3, #1]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d177      	bne.n	8009a28 <USB_EPStartXfer+0x85e>
 8009938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800993c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009952:	b29b      	uxth	r3, r3
 8009954:	461a      	mov	r2, r3
 8009956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009958:	4413      	add	r3, r2
 800995a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800995c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	00da      	lsls	r2, r3, #3
 800996a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800996c:	4413      	add	r3, r2
 800996e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009972:	637b      	str	r3, [r7, #52]	@ 0x34
 8009974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800997e:	b29a      	uxth	r2, r3
 8009980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009982:	801a      	strh	r2, [r3, #0]
 8009984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <USB_EPStartXfer+0x7d8>
 800998c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800998e:	881b      	ldrh	r3, [r3, #0]
 8009990:	b29b      	uxth	r3, r3
 8009992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800999a:	b29a      	uxth	r2, r3
 800999c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	e067      	b.n	8009a72 <USB_EPStartXfer+0x8a8>
 80099a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80099a8:	d81c      	bhi.n	80099e4 <USB_EPStartXfer+0x81a>
 80099aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099ae:	085b      	lsrs	r3, r3, #1
 80099b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099b8:	f003 0301 	and.w	r3, r3, #1
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <USB_EPStartXfer+0x800>
 80099c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099c4:	3301      	adds	r3, #1
 80099c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	029b      	lsls	r3, r3, #10
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	b29a      	uxth	r2, r3
 80099de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	e046      	b.n	8009a72 <USB_EPStartXfer+0x8a8>
 80099e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e8:	095b      	lsrs	r3, r3, #5
 80099ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80099ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f2:	f003 031f 	and.w	r3, r3, #31
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d104      	bne.n	8009a04 <USB_EPStartXfer+0x83a>
 80099fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fe:	3b01      	subs	r3, #1
 8009a00:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29a      	uxth	r2, r3
 8009a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	029b      	lsls	r3, r3, #10
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	4313      	orrs	r3, r2
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a24:	801a      	strh	r2, [r3, #0]
 8009a26:	e024      	b.n	8009a72 <USB_EPStartXfer+0x8a8>
 8009a28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	785b      	ldrb	r3, [r3, #1]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d11c      	bne.n	8009a72 <USB_EPStartXfer+0x8a8>
 8009a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	461a      	mov	r2, r3
 8009a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a4c:	4413      	add	r3, r2
 8009a4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	781b      	ldrb	r3, [r3, #0]
 8009a5c:	00da      	lsls	r2, r3, #3
 8009a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a60:	4413      	add	r3, r2
 8009a62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a70:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	895b      	ldrh	r3, [r3, #10]
 8009a7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6959      	ldr	r1, [r3, #20]
 8009a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009aa0:	6800      	ldr	r0, [r0, #0]
 8009aa2:	f001 f87e 	bl	800aba2 <USB_WritePMA>
 8009aa6:	e227      	b.n	8009ef8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6a1b      	ldr	r3, [r3, #32]
 8009ab4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009abc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	4413      	add	r3, r2
 8009ad2:	881b      	ldrh	r3, [r3, #0]
 8009ad4:	b29b      	uxth	r3, r3
 8009ad6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ade:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	441a      	add	r2, r3
 8009afc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	461a      	mov	r2, r3
 8009b32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b34:	4413      	add	r3, r2
 8009b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	00da      	lsls	r2, r3, #3
 8009b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b48:	4413      	add	r3, r2
 8009b4a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009b58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	891b      	ldrh	r3, [r3, #8]
 8009b66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009b6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6959      	ldr	r1, [r3, #20]
 8009b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009b80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009b84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009b88:	6800      	ldr	r0, [r0, #0]
 8009b8a:	f001 f80a 	bl	800aba2 <USB_WritePMA>
 8009b8e:	e1b3      	b.n	8009ef8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009b90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6a1a      	ldr	r2, [r3, #32]
 8009b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba0:	1ad2      	subs	r2, r2, r3
 8009ba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	881b      	ldrh	r3, [r3, #0]
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 80c6 	beq.w	8009d62 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	673b      	str	r3, [r7, #112]	@ 0x70
 8009be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d177      	bne.n	8009ce2 <USB_EPStartXfer+0xb18>
 8009bf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	461a      	mov	r2, r3
 8009c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c12:	4413      	add	r3, r2
 8009c14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	00da      	lsls	r2, r3, #3
 8009c24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c26:	4413      	add	r3, r2
 8009c28:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c2c:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c2e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c3c:	801a      	strh	r2, [r3, #0]
 8009c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10a      	bne.n	8009c5c <USB_EPStartXfer+0xa92>
 8009c46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e067      	b.n	8009d2c <USB_EPStartXfer+0xb62>
 8009c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c60:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c62:	d81c      	bhi.n	8009c9e <USB_EPStartXfer+0xad4>
 8009c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c68:	085b      	lsrs	r3, r3, #1
 8009c6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d004      	beq.n	8009c84 <USB_EPStartXfer+0xaba>
 8009c7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c7e:	3301      	adds	r3, #1
 8009c80:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	029b      	lsls	r3, r3, #10
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	4313      	orrs	r3, r2
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c9a:	801a      	strh	r2, [r3, #0]
 8009c9c:	e046      	b.n	8009d2c <USB_EPStartXfer+0xb62>
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ca2:	095b      	lsrs	r3, r3, #5
 8009ca4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cac:	f003 031f 	and.w	r3, r3, #31
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d104      	bne.n	8009cbe <USB_EPStartXfer+0xaf4>
 8009cb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009cbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	029b      	lsls	r3, r3, #10
 8009ccc:	b29b      	uxth	r3, r3
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cde:	801a      	strh	r2, [r3, #0]
 8009ce0:	e024      	b.n	8009d2c <USB_EPStartXfer+0xb62>
 8009ce2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	785b      	ldrb	r3, [r3, #1]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d11c      	bne.n	8009d2c <USB_EPStartXfer+0xb62>
 8009cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	461a      	mov	r2, r3
 8009d04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d06:	4413      	add	r3, r2
 8009d08:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	00da      	lsls	r2, r3, #3
 8009d18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d26:	b29a      	uxth	r2, r3
 8009d28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	895b      	ldrh	r3, [r3, #10]
 8009d38:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6959      	ldr	r1, [r3, #20]
 8009d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d52:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d56:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d5a:	6800      	ldr	r0, [r0, #0]
 8009d5c:	f000 ff21 	bl	800aba2 <USB_WritePMA>
 8009d60:	e0ca      	b.n	8009ef8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	785b      	ldrb	r3, [r3, #1]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d177      	bne.n	8009e62 <USB_EPStartXfer+0xc98>
 8009d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d92:	4413      	add	r3, r2
 8009d94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	00da      	lsls	r2, r3, #3
 8009da4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009da6:	4413      	add	r3, r2
 8009da8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009dae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009db0:	881b      	ldrh	r3, [r3, #0]
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dbc:	801a      	strh	r2, [r3, #0]
 8009dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10a      	bne.n	8009ddc <USB_EPStartXfer+0xc12>
 8009dc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009dd8:	801a      	strh	r2, [r3, #0]
 8009dda:	e073      	b.n	8009ec4 <USB_EPStartXfer+0xcfa>
 8009ddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de0:	2b3e      	cmp	r3, #62	@ 0x3e
 8009de2:	d81c      	bhi.n	8009e1e <USB_EPStartXfer+0xc54>
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de8:	085b      	lsrs	r3, r3, #1
 8009dea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df2:	f003 0301 	and.w	r3, r3, #1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d004      	beq.n	8009e04 <USB_EPStartXfer+0xc3a>
 8009dfa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009dfe:	3301      	adds	r3, #1
 8009e00:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009e04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	029b      	lsls	r3, r3, #10
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	4313      	orrs	r3, r2
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e1a:	801a      	strh	r2, [r3, #0]
 8009e1c:	e052      	b.n	8009ec4 <USB_EPStartXfer+0xcfa>
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e22:	095b      	lsrs	r3, r3, #5
 8009e24:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e2c:	f003 031f 	and.w	r3, r3, #31
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d104      	bne.n	8009e3e <USB_EPStartXfer+0xc74>
 8009e34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	029b      	lsls	r3, r3, #10
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e5e:	801a      	strh	r2, [r3, #0]
 8009e60:	e030      	b.n	8009ec4 <USB_EPStartXfer+0xcfa>
 8009e62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	785b      	ldrb	r3, [r3, #1]
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d128      	bne.n	8009ec4 <USB_EPStartXfer+0xcfa>
 8009e72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	461a      	mov	r2, r3
 8009e92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e96:	4413      	add	r3, r2
 8009e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	00da      	lsls	r2, r3, #3
 8009eaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009eae:	4413      	add	r3, r2
 8009eb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ec2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	891b      	ldrh	r3, [r3, #8]
 8009ed0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ed4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ed8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	6959      	ldr	r1, [r3, #20]
 8009ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ee4:	b29b      	uxth	r3, r3
 8009ee6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009eea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009eee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009ef2:	6800      	ldr	r0, [r0, #0]
 8009ef4:	f000 fe55 	bl	800aba2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009ef8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009efc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	4413      	add	r3, r2
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f1e:	817b      	strh	r3, [r7, #10]
 8009f20:	897b      	ldrh	r3, [r7, #10]
 8009f22:	f083 0310 	eor.w	r3, r3, #16
 8009f26:	817b      	strh	r3, [r7, #10]
 8009f28:	897b      	ldrh	r3, [r7, #10]
 8009f2a:	f083 0320 	eor.w	r3, r3, #32
 8009f2e:	817b      	strh	r3, [r7, #10]
 8009f30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	441a      	add	r2, r3
 8009f4a:	897b      	ldrh	r3, [r7, #10]
 8009f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	8013      	strh	r3, [r2, #0]
 8009f60:	f000 bcdf 	b.w	800a922 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009f64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	7b1b      	ldrb	r3, [r3, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f040 80bc 	bne.w	800a0ee <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009f76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d917      	bls.n	8009fc2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8009fa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	699a      	ldr	r2, [r3, #24]
 8009fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fb2:	1ad2      	subs	r2, r2, r3
 8009fb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	619a      	str	r2, [r3, #24]
 8009fc0:	e00e      	b.n	8009fe0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009fc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	699b      	ldr	r3, [r3, #24]
 8009fce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8009fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009fe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ffc:	b29b      	uxth	r3, r3
 8009ffe:	461a      	mov	r2, r3
 800a000:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a004:	4413      	add	r3, r2
 800a006:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	00da      	lsls	r2, r3, #3
 800a018:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a01c:	4413      	add	r3, r2
 800a01e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a032:	b29a      	uxth	r2, r3
 800a034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a038:	801a      	strh	r2, [r3, #0]
 800a03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10d      	bne.n	800a05e <USB_EPStartXfer+0xe94>
 800a042:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a046:	881b      	ldrh	r3, [r3, #0]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a04e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a052:	b29a      	uxth	r2, r3
 800a054:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	f000 bc28 	b.w	800a8ae <USB_EPStartXfer+0x16e4>
 800a05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a062:	2b3e      	cmp	r3, #62	@ 0x3e
 800a064:	d81f      	bhi.n	800a0a6 <USB_EPStartXfer+0xedc>
 800a066:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a06a:	085b      	lsrs	r3, r3, #1
 800a06c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a074:	f003 0301 	and.w	r3, r3, #1
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d004      	beq.n	800a086 <USB_EPStartXfer+0xebc>
 800a07c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a080:	3301      	adds	r3, #1
 800a082:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a092:	b29b      	uxth	r3, r3
 800a094:	029b      	lsls	r3, r3, #10
 800a096:	b29b      	uxth	r3, r3
 800a098:	4313      	orrs	r3, r2
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0a0:	801a      	strh	r2, [r3, #0]
 800a0a2:	f000 bc04 	b.w	800a8ae <USB_EPStartXfer+0x16e4>
 800a0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0aa:	095b      	lsrs	r3, r3, #5
 800a0ac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0b4:	f003 031f 	and.w	r3, r3, #31
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d104      	bne.n	800a0c6 <USB_EPStartXfer+0xefc>
 800a0bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a0c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0ca:	881b      	ldrh	r3, [r3, #0]
 800a0cc:	b29a      	uxth	r2, r3
 800a0ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	029b      	lsls	r3, r3, #10
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0e4:	b29a      	uxth	r2, r3
 800a0e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0ea:	801a      	strh	r2, [r3, #0]
 800a0ec:	e3df      	b.n	800a8ae <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	78db      	ldrb	r3, [r3, #3]
 800a0fa:	2b02      	cmp	r3, #2
 800a0fc:	f040 8218 	bne.w	800a530 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f040 809d 	bne.w	800a24c <USB_EPStartXfer+0x1082>
 800a112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a12e:	b29b      	uxth	r3, r3
 800a130:	461a      	mov	r2, r3
 800a132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a136:	4413      	add	r3, r2
 800a138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	00da      	lsls	r2, r3, #3
 800a14a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a14e:	4413      	add	r3, r2
 800a150:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a15c:	881b      	ldrh	r3, [r3, #0]
 800a15e:	b29b      	uxth	r3, r3
 800a160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a164:	b29a      	uxth	r2, r3
 800a166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a16a:	801a      	strh	r2, [r3, #0]
 800a16c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10c      	bne.n	800a196 <USB_EPStartXfer+0xfcc>
 800a17c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	b29b      	uxth	r3, r3
 800a184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a192:	801a      	strh	r2, [r3, #0]
 800a194:	e08f      	b.n	800a2b6 <USB_EPStartXfer+0x10ec>
 800a196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a19a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1a4:	d826      	bhi.n	800a1f4 <USB_EPStartXfer+0x102a>
 800a1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	085b      	lsrs	r3, r3, #1
 800a1b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	691b      	ldr	r3, [r3, #16]
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d004      	beq.n	800a1d6 <USB_EPStartXfer+0x100c>
 800a1cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a1d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1e2:	b29b      	uxth	r3, r3
 800a1e4:	029b      	lsls	r3, r3, #10
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a1f0:	801a      	strh	r2, [r3, #0]
 800a1f2:	e060      	b.n	800a2b6 <USB_EPStartXfer+0x10ec>
 800a1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	691b      	ldr	r3, [r3, #16]
 800a200:	095b      	lsrs	r3, r3, #5
 800a202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a20a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f003 031f 	and.w	r3, r3, #31
 800a216:	2b00      	cmp	r3, #0
 800a218:	d104      	bne.n	800a224 <USB_EPStartXfer+0x105a>
 800a21a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a21e:	3b01      	subs	r3, #1
 800a220:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a224:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a228:	881b      	ldrh	r3, [r3, #0]
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a230:	b29b      	uxth	r3, r3
 800a232:	029b      	lsls	r3, r3, #10
 800a234:	b29b      	uxth	r3, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	b29b      	uxth	r3, r3
 800a23a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a23e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a242:	b29a      	uxth	r2, r3
 800a244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a248:	801a      	strh	r2, [r3, #0]
 800a24a:	e034      	b.n	800a2b6 <USB_EPStartXfer+0x10ec>
 800a24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d12c      	bne.n	800a2b6 <USB_EPStartXfer+0x10ec>
 800a25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a26a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a26e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a278:	b29b      	uxth	r3, r3
 800a27a:	461a      	mov	r2, r3
 800a27c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a280:	4413      	add	r3, r2
 800a282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a28a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	00da      	lsls	r2, r3, #3
 800a294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a298:	4413      	add	r3, r2
 800a29a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a29e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a2b4:	801a      	strh	r2, [r3, #0]
 800a2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f040 809d 	bne.w	800a410 <USB_EPStartXfer+0x1246>
 800a2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	00da      	lsls	r2, r3, #3
 800a30e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a312:	4413      	add	r3, r2
 800a314:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a31c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a328:	b29a      	uxth	r2, r3
 800a32a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a32e:	801a      	strh	r2, [r3, #0]
 800a330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10c      	bne.n	800a35a <USB_EPStartXfer+0x1190>
 800a340:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a344:	881b      	ldrh	r3, [r3, #0]
 800a346:	b29b      	uxth	r3, r3
 800a348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a34c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a350:	b29a      	uxth	r2, r3
 800a352:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a356:	801a      	strh	r2, [r3, #0]
 800a358:	e088      	b.n	800a46c <USB_EPStartXfer+0x12a2>
 800a35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a35e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	2b3e      	cmp	r3, #62	@ 0x3e
 800a368:	d826      	bhi.n	800a3b8 <USB_EPStartXfer+0x11ee>
 800a36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a36e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a37c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d004      	beq.n	800a39a <USB_EPStartXfer+0x11d0>
 800a390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a394:	3301      	adds	r3, #1
 800a396:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a39a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	029b      	lsls	r3, r3, #10
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	4313      	orrs	r3, r2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3b4:	801a      	strh	r2, [r3, #0]
 800a3b6:	e059      	b.n	800a46c <USB_EPStartXfer+0x12a2>
 800a3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	095b      	lsrs	r3, r3, #5
 800a3c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	691b      	ldr	r3, [r3, #16]
 800a3d6:	f003 031f 	and.w	r3, r3, #31
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d104      	bne.n	800a3e8 <USB_EPStartXfer+0x121e>
 800a3de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a3e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a3ec:	881b      	ldrh	r3, [r3, #0]
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	029b      	lsls	r3, r3, #10
 800a3f8:	b29b      	uxth	r3, r3
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a406:	b29a      	uxth	r2, r3
 800a408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a40c:	801a      	strh	r2, [r3, #0]
 800a40e:	e02d      	b.n	800a46c <USB_EPStartXfer+0x12a2>
 800a410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	785b      	ldrb	r3, [r3, #1]
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d125      	bne.n	800a46c <USB_EPStartXfer+0x12a2>
 800a420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a42e:	b29b      	uxth	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a436:	4413      	add	r3, r2
 800a438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a43c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	00da      	lsls	r2, r3, #3
 800a44a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a44e:	4413      	add	r3, r2
 800a450:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a454:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a45c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	b29a      	uxth	r2, r3
 800a466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a46a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69db      	ldr	r3, [r3, #28]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f000 8218 	beq.w	800a8ae <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	881b      	ldrh	r3, [r3, #0]
 800a49a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a49e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a4a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <USB_EPStartXfer+0x12ec>
 800a4aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a4ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10d      	bne.n	800a4d2 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a4b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a4ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f040 81f5 	bne.w	800a8ae <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a4c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a4c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f040 81ee 	bne.w	800a8ae <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a4d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	009b      	lsls	r3, r3, #2
 800a4ea:	4413      	add	r3, r2
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a4f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a4fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	009b      	lsls	r3, r3, #2
 800a514:	441a      	add	r2, r3
 800a516:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a51a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a51e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a526:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	8013      	strh	r3, [r2, #0]
 800a52e:	e1be      	b.n	800a8ae <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	78db      	ldrb	r3, [r3, #3]
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	f040 81b4 	bne.w	800a8aa <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	699a      	ldr	r2, [r3, #24]
 800a54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d917      	bls.n	800a58e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a55e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	691b      	ldr	r3, [r3, #16]
 800a56a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699a      	ldr	r2, [r3, #24]
 800a57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a57e:	1ad2      	subs	r2, r2, r3
 800a580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	619a      	str	r2, [r3, #24]
 800a58c:	e00e      	b.n	800a5ac <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a5ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	785b      	ldrb	r3, [r3, #1]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f040 8085 	bne.w	800a6c8 <USB_EPStartXfer+0x14fe>
 800a5be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a5cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	461a      	mov	r2, r3
 800a5de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5e2:	4413      	add	r3, r2
 800a5e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	00da      	lsls	r2, r3, #3
 800a5f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a5fa:	4413      	add	r3, r2
 800a5fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a610:	b29a      	uxth	r2, r3
 800a612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10c      	bne.n	800a63a <USB_EPStartXfer+0x1470>
 800a620:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	b29b      	uxth	r3, r3
 800a628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a62c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a630:	b29a      	uxth	r2, r3
 800a632:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a636:	801a      	strh	r2, [r3, #0]
 800a638:	e077      	b.n	800a72a <USB_EPStartXfer+0x1560>
 800a63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a63e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a640:	d81e      	bhi.n	800a680 <USB_EPStartXfer+0x14b6>
 800a642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a646:	085b      	lsrs	r3, r3, #1
 800a648:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a650:	f003 0301 	and.w	r3, r3, #1
 800a654:	2b00      	cmp	r3, #0
 800a656:	d004      	beq.n	800a662 <USB_EPStartXfer+0x1498>
 800a658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a65c:	3301      	adds	r3, #1
 800a65e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	b29a      	uxth	r2, r3
 800a66a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a66e:	b29b      	uxth	r3, r3
 800a670:	029b      	lsls	r3, r3, #10
 800a672:	b29b      	uxth	r3, r3
 800a674:	4313      	orrs	r3, r2
 800a676:	b29a      	uxth	r2, r3
 800a678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a67c:	801a      	strh	r2, [r3, #0]
 800a67e:	e054      	b.n	800a72a <USB_EPStartXfer+0x1560>
 800a680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a68e:	f003 031f 	and.w	r3, r3, #31
 800a692:	2b00      	cmp	r3, #0
 800a694:	d104      	bne.n	800a6a0 <USB_EPStartXfer+0x14d6>
 800a696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a69a:	3b01      	subs	r3, #1
 800a69c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a6a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	029b      	lsls	r3, r3, #10
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a6c4:	801a      	strh	r2, [r3, #0]
 800a6c6:	e030      	b.n	800a72a <USB_EPStartXfer+0x1560>
 800a6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	785b      	ldrb	r3, [r3, #1]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d128      	bne.n	800a72a <USB_EPStartXfer+0x1560>
 800a6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a6e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	00da      	lsls	r2, r3, #3
 800a710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a714:	4413      	add	r3, r2
 800a716:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a71a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a722:	b29a      	uxth	r2, r3
 800a724:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a72e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a73c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	785b      	ldrb	r3, [r3, #1]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 8085 	bne.w	800a854 <USB_EPStartXfer+0x168a>
 800a74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a74e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a75c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a766:	b29b      	uxth	r3, r3
 800a768:	461a      	mov	r2, r3
 800a76a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a76e:	4413      	add	r3, r2
 800a770:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	00da      	lsls	r2, r3, #3
 800a782:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a786:	4413      	add	r3, r2
 800a788:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a78c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a794:	881b      	ldrh	r3, [r3, #0]
 800a796:	b29b      	uxth	r3, r3
 800a798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a79c:	b29a      	uxth	r2, r3
 800a79e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7a2:	801a      	strh	r2, [r3, #0]
 800a7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10c      	bne.n	800a7c6 <USB_EPStartXfer+0x15fc>
 800a7ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7b0:	881b      	ldrh	r3, [r3, #0]
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7bc:	b29a      	uxth	r2, r3
 800a7be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7c2:	801a      	strh	r2, [r3, #0]
 800a7c4:	e073      	b.n	800a8ae <USB_EPStartXfer+0x16e4>
 800a7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7cc:	d81e      	bhi.n	800a80c <USB_EPStartXfer+0x1642>
 800a7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d2:	085b      	lsrs	r3, r3, #1
 800a7d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7dc:	f003 0301 	and.w	r3, r3, #1
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d004      	beq.n	800a7ee <USB_EPStartXfer+0x1624>
 800a7e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7e8:	3301      	adds	r3, #1
 800a7ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	029b      	lsls	r3, r3, #10
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	4313      	orrs	r3, r2
 800a802:	b29a      	uxth	r2, r3
 800a804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a808:	801a      	strh	r2, [r3, #0]
 800a80a:	e050      	b.n	800a8ae <USB_EPStartXfer+0x16e4>
 800a80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a810:	095b      	lsrs	r3, r3, #5
 800a812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81a:	f003 031f 	and.w	r3, r3, #31
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d104      	bne.n	800a82c <USB_EPStartXfer+0x1662>
 800a822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a826:	3b01      	subs	r3, #1
 800a828:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a82c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a830:	881b      	ldrh	r3, [r3, #0]
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a838:	b29b      	uxth	r3, r3
 800a83a:	029b      	lsls	r3, r3, #10
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	4313      	orrs	r3, r2
 800a840:	b29b      	uxth	r3, r3
 800a842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a850:	801a      	strh	r2, [r3, #0]
 800a852:	e02c      	b.n	800a8ae <USB_EPStartXfer+0x16e4>
 800a854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	785b      	ldrb	r3, [r3, #1]
 800a860:	2b01      	cmp	r3, #1
 800a862:	d124      	bne.n	800a8ae <USB_EPStartXfer+0x16e4>
 800a864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a872:	b29b      	uxth	r3, r3
 800a874:	461a      	mov	r2, r3
 800a876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a87a:	4413      	add	r3, r2
 800a87c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	00da      	lsls	r2, r3, #3
 800a88e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a892:	4413      	add	r3, r2
 800a894:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a8a6:	801a      	strh	r2, [r3, #0]
 800a8a8:	e001      	b.n	800a8ae <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e03a      	b.n	800a924 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	4413      	add	r3, r2
 800a8c8:	881b      	ldrh	r3, [r3, #0]
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a8e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a8e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a8ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800a8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	441a      	add	r2, r3
 800a90a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800a90e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a91e:	b29b      	uxth	r3, r3
 800a920:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}

0800a92e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a92e:	b480      	push	{r7}
 800a930:	b085      	sub	sp, #20
 800a932:	af00      	add	r7, sp, #0
 800a934:	6078      	str	r0, [r7, #4]
 800a936:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	785b      	ldrb	r3, [r3, #1]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d020      	beq.n	800a982 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	881b      	ldrh	r3, [r3, #0]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a956:	81bb      	strh	r3, [r7, #12]
 800a958:	89bb      	ldrh	r3, [r7, #12]
 800a95a:	f083 0310 	eor.w	r3, r3, #16
 800a95e:	81bb      	strh	r3, [r7, #12]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	441a      	add	r2, r3
 800a96a:	89bb      	ldrh	r3, [r7, #12]
 800a96c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	8013      	strh	r3, [r2, #0]
 800a980:	e01f      	b.n	800a9c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a998:	81fb      	strh	r3, [r7, #14]
 800a99a:	89fb      	ldrh	r3, [r7, #14]
 800a99c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a9a0:	81fb      	strh	r3, [r7, #14]
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	441a      	add	r2, r3
 800a9ac:	89fb      	ldrh	r3, [r7, #14]
 800a9ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	7b1b      	ldrb	r3, [r3, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	f040 809d 	bne.w	800ab1e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	785b      	ldrb	r3, [r3, #1]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d04c      	beq.n	800aa86 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	823b      	strh	r3, [r7, #16]
 800a9fa:	8a3b      	ldrh	r3, [r7, #16]
 800a9fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d01b      	beq.n	800aa3c <USB_EPClearStall+0x6c>
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa1a:	81fb      	strh	r3, [r7, #14]
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	441a      	add	r2, r3
 800aa26:	89fb      	ldrh	r3, [r7, #14]
 800aa28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa34:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	78db      	ldrb	r3, [r3, #3]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d06c      	beq.n	800ab1e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	4413      	add	r3, r2
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	b29b      	uxth	r3, r3
 800aa52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa5a:	81bb      	strh	r3, [r7, #12]
 800aa5c:	89bb      	ldrh	r3, [r7, #12]
 800aa5e:	f083 0320 	eor.w	r3, r3, #32
 800aa62:	81bb      	strh	r3, [r7, #12]
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	441a      	add	r2, r3
 800aa6e:	89bb      	ldrh	r3, [r7, #12]
 800aa70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	8013      	strh	r3, [r2, #0]
 800aa84:	e04b      	b.n	800ab1e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	82fb      	strh	r3, [r7, #22]
 800aa94:	8afb      	ldrh	r3, [r7, #22]
 800aa96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d01b      	beq.n	800aad6 <USB_EPClearStall+0x106>
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aab4:	82bb      	strh	r3, [r7, #20]
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	441a      	add	r2, r3
 800aac0:	8abb      	ldrh	r3, [r7, #20]
 800aac2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aac6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aae8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaec:	827b      	strh	r3, [r7, #18]
 800aaee:	8a7b      	ldrh	r3, [r7, #18]
 800aaf0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aaf4:	827b      	strh	r3, [r7, #18]
 800aaf6:	8a7b      	ldrh	r3, [r7, #18]
 800aaf8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aafc:	827b      	strh	r3, [r7, #18]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	441a      	add	r2, r3
 800ab08:	8a7b      	ldrh	r3, [r7, #18]
 800ab0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ab1e:	2300      	movs	r3, #0
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	371c      	adds	r7, #28
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ab38:	78fb      	ldrb	r3, [r7, #3]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d103      	bne.n	800ab46 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2280      	movs	r2, #128	@ 0x80
 800ab42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b085      	sub	sp, #20
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ab94:	68fb      	ldr	r3, [r7, #12]
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3714      	adds	r7, #20
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr

0800aba2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b08b      	sub	sp, #44	@ 0x2c
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	60b9      	str	r1, [r7, #8]
 800abac:	4611      	mov	r1, r2
 800abae:	461a      	mov	r2, r3
 800abb0:	460b      	mov	r3, r1
 800abb2:	80fb      	strh	r3, [r7, #6]
 800abb4:	4613      	mov	r3, r2
 800abb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800abb8:	88bb      	ldrh	r3, [r7, #4]
 800abba:	3301      	adds	r3, #1
 800abbc:	085b      	lsrs	r3, r3, #1
 800abbe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800abc8:	88fa      	ldrh	r2, [r7, #6]
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	4413      	add	r3, r2
 800abce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800abd2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800abd8:	e01b      	b.n	800ac12 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800abda:	69fb      	ldr	r3, [r7, #28]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	3301      	adds	r3, #1
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	021b      	lsls	r3, r3, #8
 800abe8:	b21a      	sxth	r2, r3
 800abea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800abee:	4313      	orrs	r3, r2
 800abf0:	b21b      	sxth	r3, r3
 800abf2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	8a7a      	ldrh	r2, [r7, #18]
 800abf8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	3302      	adds	r3, #2
 800abfe:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	3301      	adds	r3, #1
 800ac04:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	3301      	adds	r3, #1
 800ac0a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d1e0      	bne.n	800abda <USB_WritePMA+0x38>
  }
}
 800ac18:	bf00      	nop
 800ac1a:	bf00      	nop
 800ac1c:	372c      	adds	r7, #44	@ 0x2c
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b08b      	sub	sp, #44	@ 0x2c
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	4611      	mov	r1, r2
 800ac32:	461a      	mov	r2, r3
 800ac34:	460b      	mov	r3, r1
 800ac36:	80fb      	strh	r3, [r7, #6]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac3c:	88bb      	ldrh	r3, [r7, #4]
 800ac3e:	085b      	lsrs	r3, r3, #1
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac4c:	88fa      	ldrh	r2, [r7, #6]
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ac56:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac5c:	e018      	b.n	800ac90 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	881b      	ldrh	r3, [r3, #0]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	3302      	adds	r3, #2
 800ac6a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	b2da      	uxtb	r2, r3
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	3301      	adds	r3, #1
 800ac78:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	0a1b      	lsrs	r3, r3, #8
 800ac7e:	b2da      	uxtb	r2, r3
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ac84:	69fb      	ldr	r3, [r7, #28]
 800ac86:	3301      	adds	r3, #1
 800ac88:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	3b01      	subs	r3, #1
 800ac8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d1e3      	bne.n	800ac5e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ac96:	88bb      	ldrh	r3, [r7, #4]
 800ac98:	f003 0301 	and.w	r3, r3, #1
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800aca2:	6a3b      	ldr	r3, [r7, #32]
 800aca4:	881b      	ldrh	r3, [r3, #0]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	b2da      	uxtb	r2, r3
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	701a      	strb	r2, [r3, #0]
  }
}
 800acb2:	bf00      	nop
 800acb4:	372c      	adds	r7, #44	@ 0x2c
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800acbe:	b580      	push	{r7, lr}
 800acc0:	b084      	sub	sp, #16
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	460b      	mov	r3, r1
 800acc8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acca:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800acce:	f002 f8f9 	bl	800cec4 <USBD_static_malloc>
 800acd2:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d105      	bne.n	800ace6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ace2:	2302      	movs	r3, #2
 800ace4:	e066      	b.n	800adb4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	7c1b      	ldrb	r3, [r3, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d119      	bne.n	800ad2a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800acf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acfa:	2202      	movs	r2, #2
 800acfc:	2181      	movs	r1, #129	@ 0x81
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 ff87 	bl	800cc12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad0a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad0e:	2202      	movs	r2, #2
 800ad10:	2101      	movs	r1, #1
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f001 ff7d 	bl	800cc12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2210      	movs	r2, #16
 800ad24:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ad28:	e016      	b.n	800ad58 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad2a:	2340      	movs	r3, #64	@ 0x40
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	2181      	movs	r1, #129	@ 0x81
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f001 ff6e 	bl	800cc12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2201      	movs	r2, #1
 800ad3a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad3c:	2340      	movs	r3, #64	@ 0x40
 800ad3e:	2202      	movs	r2, #2
 800ad40:	2101      	movs	r1, #1
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f001 ff65 	bl	800cc12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2210      	movs	r2, #16
 800ad54:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad58:	2308      	movs	r3, #8
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	2182      	movs	r1, #130	@ 0x82
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f001 ff57 	bl	800cc12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	7c1b      	ldrb	r3, [r3, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d109      	bne.n	800ada2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad98:	2101      	movs	r1, #1
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f002 f828 	bl	800cdf0 <USBD_LL_PrepareReceive>
 800ada0:	e007      	b.n	800adb2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ada8:	2340      	movs	r3, #64	@ 0x40
 800adaa:	2101      	movs	r1, #1
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f002 f81f 	bl	800cdf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800adc8:	2181      	movs	r1, #129	@ 0x81
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f001 ff47 	bl	800cc5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800add6:	2101      	movs	r1, #1
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 ff40 	bl	800cc5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ade6:	2182      	movs	r1, #130	@ 0x82
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f001 ff38 	bl	800cc5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00e      	beq.n	800ae26 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f002 f861 	bl	800cee0 <USBD_static_free>
    pdev->pClassData = NULL;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ae40:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae42:	2300      	movs	r3, #0
 800ae44:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae46:	2300      	movs	r3, #0
 800ae48:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d101      	bne.n	800ae58 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e0af      	b.n	800afb8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d03f      	beq.n	800aee4 <USBD_CDC_Setup+0xb4>
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	f040 809f 	bne.w	800afa8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	88db      	ldrh	r3, [r3, #6]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d02e      	beq.n	800aed0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	b25b      	sxtb	r3, r3
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	da16      	bge.n	800aeaa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ae88:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ae8a:	683a      	ldr	r2, [r7, #0]
 800ae8c:	88d2      	ldrh	r2, [r2, #6]
 800ae8e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	88db      	ldrh	r3, [r3, #6]
 800ae94:	2b07      	cmp	r3, #7
 800ae96:	bf28      	it	cs
 800ae98:	2307      	movcs	r3, #7
 800ae9a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	89fa      	ldrh	r2, [r7, #14]
 800aea0:	4619      	mov	r1, r3
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f001 facd 	bl	800c442 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800aea8:	e085      	b.n	800afb6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	785a      	ldrb	r2, [r3, #1]
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	88db      	ldrh	r3, [r3, #6]
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800aec0:	6939      	ldr	r1, [r7, #16]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	88db      	ldrh	r3, [r3, #6]
 800aec6:	461a      	mov	r2, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f001 fae6 	bl	800c49a <USBD_CtlPrepareRx>
      break;
 800aece:	e072      	b.n	800afb6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	683a      	ldr	r2, [r7, #0]
 800aeda:	7850      	ldrb	r0, [r2, #1]
 800aedc:	2200      	movs	r2, #0
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	4798      	blx	r3
      break;
 800aee2:	e068      	b.n	800afb6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b0b      	cmp	r3, #11
 800aeea:	d852      	bhi.n	800af92 <USBD_CDC_Setup+0x162>
 800aeec:	a201      	add	r2, pc, #4	@ (adr r2, 800aef4 <USBD_CDC_Setup+0xc4>)
 800aeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef2:	bf00      	nop
 800aef4:	0800af25 	.word	0x0800af25
 800aef8:	0800afa1 	.word	0x0800afa1
 800aefc:	0800af93 	.word	0x0800af93
 800af00:	0800af93 	.word	0x0800af93
 800af04:	0800af93 	.word	0x0800af93
 800af08:	0800af93 	.word	0x0800af93
 800af0c:	0800af93 	.word	0x0800af93
 800af10:	0800af93 	.word	0x0800af93
 800af14:	0800af93 	.word	0x0800af93
 800af18:	0800af93 	.word	0x0800af93
 800af1c:	0800af4f 	.word	0x0800af4f
 800af20:	0800af79 	.word	0x0800af79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af2a:	b2db      	uxtb	r3, r3
 800af2c:	2b03      	cmp	r3, #3
 800af2e:	d107      	bne.n	800af40 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af30:	f107 030a 	add.w	r3, r7, #10
 800af34:	2202      	movs	r2, #2
 800af36:	4619      	mov	r1, r3
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 fa82 	bl	800c442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af3e:	e032      	b.n	800afa6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800af40:	6839      	ldr	r1, [r7, #0]
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f001 fa0c 	bl	800c360 <USBD_CtlError>
            ret = USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	75fb      	strb	r3, [r7, #23]
          break;
 800af4c:	e02b      	b.n	800afa6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b03      	cmp	r3, #3
 800af58:	d107      	bne.n	800af6a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af5a:	f107 030d 	add.w	r3, r7, #13
 800af5e:	2201      	movs	r2, #1
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f001 fa6d 	bl	800c442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af68:	e01d      	b.n	800afa6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800af6a:	6839      	ldr	r1, [r7, #0]
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 f9f7 	bl	800c360 <USBD_CtlError>
            ret = USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	75fb      	strb	r3, [r7, #23]
          break;
 800af76:	e016      	b.n	800afa6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2b03      	cmp	r3, #3
 800af82:	d00f      	beq.n	800afa4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f001 f9ea 	bl	800c360 <USBD_CtlError>
            ret = USBD_FAIL;
 800af8c:	2303      	movs	r3, #3
 800af8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800af90:	e008      	b.n	800afa4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f001 f9e3 	bl	800c360 <USBD_CtlError>
          ret = USBD_FAIL;
 800af9a:	2303      	movs	r3, #3
 800af9c:	75fb      	strb	r3, [r7, #23]
          break;
 800af9e:	e002      	b.n	800afa6 <USBD_CDC_Setup+0x176>
          break;
 800afa0:	bf00      	nop
 800afa2:	e008      	b.n	800afb6 <USBD_CDC_Setup+0x186>
          break;
 800afa4:	bf00      	nop
      }
      break;
 800afa6:	e006      	b.n	800afb6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f001 f9d8 	bl	800c360 <USBD_CtlError>
      ret = USBD_FAIL;
 800afb0:	2303      	movs	r3, #3
 800afb2:	75fb      	strb	r3, [r7, #23]
      break;
 800afb4:	bf00      	nop
  }

  return (uint8_t)ret;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	460b      	mov	r3, r1
 800afca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800afd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800afde:	2303      	movs	r3, #3
 800afe0:	e04f      	b.n	800b082 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afe8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800afea:	78fa      	ldrb	r2, [r7, #3]
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	4613      	mov	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	440b      	add	r3, r1
 800aff8:	3318      	adds	r3, #24
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d029      	beq.n	800b054 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b000:	78fa      	ldrb	r2, [r7, #3]
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	4613      	mov	r3, r2
 800b006:	009b      	lsls	r3, r3, #2
 800b008:	4413      	add	r3, r2
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	440b      	add	r3, r1
 800b00e:	3318      	adds	r3, #24
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	78f9      	ldrb	r1, [r7, #3]
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	460b      	mov	r3, r1
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	440b      	add	r3, r1
 800b01c:	00db      	lsls	r3, r3, #3
 800b01e:	4403      	add	r3, r0
 800b020:	3320      	adds	r3, #32
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	fbb2 f1f3 	udiv	r1, r2, r3
 800b028:	fb01 f303 	mul.w	r3, r1, r3
 800b02c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d110      	bne.n	800b054 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b032:	78fa      	ldrb	r2, [r7, #3]
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	440b      	add	r3, r1
 800b040:	3318      	adds	r3, #24
 800b042:	2200      	movs	r2, #0
 800b044:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b046:	78f9      	ldrb	r1, [r7, #3]
 800b048:	2300      	movs	r3, #0
 800b04a:	2200      	movs	r2, #0
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 feae 	bl	800cdae <USBD_LL_Transmit>
 800b052:	e015      	b.n	800b080 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d00b      	beq.n	800b080 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b07c:	78fa      	ldrb	r2, [r7, #3]
 800b07e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	460b      	mov	r3, r1
 800b094:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b09c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d101      	bne.n	800b0ac <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e015      	b.n	800b0d8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b0ac:	78fb      	ldrb	r3, [r7, #3]
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 febe 	bl	800ce32 <USBD_LL_GetRxDataSize>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b0c4:	68db      	ldr	r3, [r3, #12]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b0ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b0f6:	2303      	movs	r3, #3
 800b0f8:	e01a      	b.n	800b130 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d014      	beq.n	800b12e <USBD_CDC_EP0_RxReady+0x4e>
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b10a:	2bff      	cmp	r3, #255	@ 0xff
 800b10c:	d00f      	beq.n	800b12e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b11c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b11e:	68fa      	ldr	r2, [r7, #12]
 800b120:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b124:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	22ff      	movs	r2, #255	@ 0xff
 800b12a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3710      	adds	r7, #16
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2243      	movs	r2, #67	@ 0x43
 800b144:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b146:	4b03      	ldr	r3, [pc, #12]	@ (800b154 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	20000094 	.word	0x20000094

0800b158 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2243      	movs	r2, #67	@ 0x43
 800b164:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b166:	4b03      	ldr	r3, [pc, #12]	@ (800b174 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b168:	4618      	mov	r0, r3
 800b16a:	370c      	adds	r7, #12
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	20000050 	.word	0x20000050

0800b178 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2243      	movs	r2, #67	@ 0x43
 800b184:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b186:	4b03      	ldr	r3, [pc, #12]	@ (800b194 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b188:	4618      	mov	r0, r3
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	200000d8 	.word	0x200000d8

0800b198 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	220a      	movs	r2, #10
 800b1a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b1a6:	4b03      	ldr	r3, [pc, #12]	@ (800b1b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr
 800b1b4:	2000000c 	.word	0x2000000c

0800b1b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e004      	b.n	800b1d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	683a      	ldr	r2, [r7, #0]
 800b1d0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b087      	sub	sp, #28
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1f4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d101      	bne.n	800b200 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e008      	b.n	800b212 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b210:	2300      	movs	r3, #0
}
 800b212:	4618      	mov	r0, r3
 800b214:	371c      	adds	r7, #28
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b21e:	b480      	push	{r7}
 800b220:	b085      	sub	sp, #20
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b22e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d101      	bne.n	800b23a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b236:	2303      	movs	r3, #3
 800b238:	e004      	b.n	800b244 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	683a      	ldr	r2, [r7, #0]
 800b23e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3714      	adds	r7, #20
 800b248:	46bd      	mov	sp, r7
 800b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24e:	4770      	bx	lr

0800b250 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b25e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b260:	2301      	movs	r3, #1
 800b262:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b26e:	2303      	movs	r3, #3
 800b270:	e01a      	b.n	800b2a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d114      	bne.n	800b2a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2201      	movs	r2, #1
 800b280:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b29a:	2181      	movs	r1, #129	@ 0x81
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f001 fd86 	bl	800cdae <USBD_LL_Transmit>

    ret = USBD_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b2a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e016      	b.n	800b2fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	7c1b      	ldrb	r3, [r3, #16]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d109      	bne.n	800b2ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 fd84 	bl	800cdf0 <USBD_LL_PrepareReceive>
 800b2e8:	e007      	b.n	800b2fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b2f0:	2340      	movs	r3, #64	@ 0x40
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f001 fd7b 	bl	800cdf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3710      	adds	r7, #16
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	4613      	mov	r3, r2
 800b310:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d101      	bne.n	800b31c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b318:	2303      	movs	r3, #3
 800b31a:	e01f      	b.n	800b35c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2200      	movs	r2, #0
 800b320:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2200      	movs	r2, #0
 800b330:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d003      	beq.n	800b342 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68ba      	ldr	r2, [r7, #8]
 800b33e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2201      	movs	r2, #1
 800b346:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	79fa      	ldrb	r2, [r7, #7]
 800b34e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b350:	68f8      	ldr	r0, [r7, #12]
 800b352:	f001 fbe3 	bl	800cb1c <USBD_LL_Init>
 800b356:	4603      	mov	r3, r0
 800b358:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b35a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3718      	adds	r7, #24
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b36e:	2300      	movs	r3, #0
 800b370:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d101      	bne.n	800b37c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b378:	2303      	movs	r3, #3
 800b37a:	e016      	b.n	800b3aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	683a      	ldr	r2, [r7, #0]
 800b380:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b398:	f107 020e 	add.w	r2, r7, #14
 800b39c:	4610      	mov	r0, r2
 800b39e:	4798      	blx	r3
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}

0800b3b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3b2:	b580      	push	{r7, lr}
 800b3b4:	b082      	sub	sp, #8
 800b3b6:	af00      	add	r7, sp, #0
 800b3b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f001 fc0e 	bl	800cbdc <USBD_LL_Start>
 800b3c0:	4603      	mov	r3, r0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b084      	sub	sp, #16
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d009      	beq.n	800b40e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	78fa      	ldrb	r2, [r7, #3]
 800b404:	4611      	mov	r1, r2
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	4798      	blx	r3
 800b40a:	4603      	mov	r3, r0
 800b40c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	460b      	mov	r3, r1
 800b422:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d007      	beq.n	800b43e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	78fa      	ldrb	r2, [r7, #3]
 800b438:	4611      	mov	r1, r2
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	4798      	blx	r3
  }

  return USBD_OK;
 800b43e:	2300      	movs	r3, #0
}
 800b440:	4618      	mov	r0, r3
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b458:	6839      	ldr	r1, [r7, #0]
 800b45a:	4618      	mov	r0, r3
 800b45c:	f000 ff46 	bl	800c2ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b46e:	461a      	mov	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b47c:	f003 031f 	and.w	r3, r3, #31
 800b480:	2b02      	cmp	r3, #2
 800b482:	d01a      	beq.n	800b4ba <USBD_LL_SetupStage+0x72>
 800b484:	2b02      	cmp	r3, #2
 800b486:	d822      	bhi.n	800b4ce <USBD_LL_SetupStage+0x86>
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <USBD_LL_SetupStage+0x4a>
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d00a      	beq.n	800b4a6 <USBD_LL_SetupStage+0x5e>
 800b490:	e01d      	b.n	800b4ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f9ee 	bl	800b87c <USBD_StdDevReq>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a4:	e020      	b.n	800b4e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f000 fa52 	bl	800b958 <USBD_StdItfReq>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4b8:	e016      	b.n	800b4e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fa91 	bl	800b9ea <USBD_StdEPReq>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b4cc:	e00c      	b.n	800b4e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b4d4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	4619      	mov	r1, r3
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f001 fbdd 	bl	800cc9c <USBD_LL_StallEP>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b4e6:	bf00      	nop
  }

  return ret;
 800b4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}

0800b4f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	b086      	sub	sp, #24
 800b4f6:	af00      	add	r7, sp, #0
 800b4f8:	60f8      	str	r0, [r7, #12]
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	607a      	str	r2, [r7, #4]
 800b4fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b500:	7afb      	ldrb	r3, [r7, #11]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d138      	bne.n	800b578 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b50c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b514:	2b03      	cmp	r3, #3
 800b516:	d14a      	bne.n	800b5ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	689a      	ldr	r2, [r3, #8]
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	68db      	ldr	r3, [r3, #12]
 800b520:	429a      	cmp	r2, r3
 800b522:	d913      	bls.n	800b54c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	1ad2      	subs	r2, r2, r3
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	68da      	ldr	r2, [r3, #12]
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	4293      	cmp	r3, r2
 800b53c:	bf28      	it	cs
 800b53e:	4613      	movcs	r3, r2
 800b540:	461a      	mov	r2, r3
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 ffc5 	bl	800c4d4 <USBD_CtlContinueRx>
 800b54a:	e030      	b.n	800b5ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b03      	cmp	r3, #3
 800b556:	d10b      	bne.n	800b570 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b55e:	691b      	ldr	r3, [r3, #16]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d005      	beq.n	800b570 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 ffc0 	bl	800c4f6 <USBD_CtlSendStatus>
 800b576:	e01a      	b.n	800b5ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b03      	cmp	r3, #3
 800b582:	d114      	bne.n	800b5ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00e      	beq.n	800b5ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	7afa      	ldrb	r2, [r7, #11]
 800b59a:	4611      	mov	r1, r2
 800b59c:	68f8      	ldr	r0, [r7, #12]
 800b59e:	4798      	blx	r3
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b5a4:	7dfb      	ldrb	r3, [r7, #23]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d001      	beq.n	800b5ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
 800b5ac:	e000      	b.n	800b5b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5c6:	7afb      	ldrb	r3, [r7, #11]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d16b      	bne.n	800b6a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3314      	adds	r3, #20
 800b5d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d156      	bne.n	800b68a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	689a      	ldr	r2, [r3, #8]
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	429a      	cmp	r2, r3
 800b5e6:	d914      	bls.n	800b612 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5e8:	693b      	ldr	r3, [r7, #16]
 800b5ea:	689a      	ldr	r2, [r3, #8]
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	1ad2      	subs	r2, r2, r3
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	6879      	ldr	r1, [r7, #4]
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 ff3a 	bl	800c478 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b604:	2300      	movs	r3, #0
 800b606:	2200      	movs	r2, #0
 800b608:	2100      	movs	r1, #0
 800b60a:	68f8      	ldr	r0, [r7, #12]
 800b60c:	f001 fbf0 	bl	800cdf0 <USBD_LL_PrepareReceive>
 800b610:	e03b      	b.n	800b68a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	68da      	ldr	r2, [r3, #12]
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d11c      	bne.n	800b658 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b626:	429a      	cmp	r2, r3
 800b628:	d316      	bcc.n	800b658 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	685a      	ldr	r2, [r3, #4]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b634:	429a      	cmp	r2, r3
 800b636:	d20f      	bcs.n	800b658 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b638:	2200      	movs	r2, #0
 800b63a:	2100      	movs	r1, #0
 800b63c:	68f8      	ldr	r0, [r7, #12]
 800b63e:	f000 ff1b 	bl	800c478 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2200      	movs	r2, #0
 800b646:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b64a:	2300      	movs	r3, #0
 800b64c:	2200      	movs	r2, #0
 800b64e:	2100      	movs	r1, #0
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f001 fbcd 	bl	800cdf0 <USBD_LL_PrepareReceive>
 800b656:	e018      	b.n	800b68a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b03      	cmp	r3, #3
 800b662:	d10b      	bne.n	800b67c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d005      	beq.n	800b67c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b67c:	2180      	movs	r1, #128	@ 0x80
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f001 fb0c 	bl	800cc9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f000 ff49 	bl	800c51c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b690:	2b01      	cmp	r3, #1
 800b692:	d122      	bne.n	800b6da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f7ff fe98 	bl	800b3ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	2200      	movs	r2, #0
 800b69e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b6a2:	e01a      	b.n	800b6da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6aa:	b2db      	uxtb	r3, r3
 800b6ac:	2b03      	cmp	r3, #3
 800b6ae:	d114      	bne.n	800b6da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6b6:	695b      	ldr	r3, [r3, #20]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00e      	beq.n	800b6da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	7afa      	ldrb	r2, [r7, #11]
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	68f8      	ldr	r0, [r7, #12]
 800b6ca:	4798      	blx	r3
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b6d0:	7dfb      	ldrb	r3, [r7, #23]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b6d6:	7dfb      	ldrb	r3, [r7, #23]
 800b6d8:	e000      	b.n	800b6dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b6da:	2300      	movs	r3, #0
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3718      	adds	r7, #24
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b714:	2303      	movs	r3, #3
 800b716:	e02f      	b.n	800b778 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00f      	beq.n	800b742 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d009      	beq.n	800b742 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	6852      	ldr	r2, [r2, #4]
 800b73a:	b2d2      	uxtb	r2, r2
 800b73c:	4611      	mov	r1, r2
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b742:	2340      	movs	r3, #64	@ 0x40
 800b744:	2200      	movs	r2, #0
 800b746:	2100      	movs	r1, #0
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f001 fa62 	bl	800cc12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2201      	movs	r2, #1
 800b752:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2240      	movs	r2, #64	@ 0x40
 800b75a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b75e:	2340      	movs	r3, #64	@ 0x40
 800b760:	2200      	movs	r2, #0
 800b762:	2180      	movs	r1, #128	@ 0x80
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f001 fa54 	bl	800cc12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2201      	movs	r2, #1
 800b76e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2240      	movs	r2, #64	@ 0x40
 800b774:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3708      	adds	r7, #8
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	78fa      	ldrb	r2, [r7, #3]
 800b790:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b792:	2300      	movs	r3, #0
}
 800b794:	4618      	mov	r0, r3
 800b796:	370c      	adds	r7, #12
 800b798:	46bd      	mov	sp, r7
 800b79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79e:	4770      	bx	lr

0800b7a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7ae:	b2da      	uxtb	r2, r3
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2204      	movs	r2, #4
 800b7ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	2b04      	cmp	r3, #4
 800b7de:	d106      	bne.n	800b7ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	370c      	adds	r7, #12
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fa:	4770      	bx	lr

0800b7fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b082      	sub	sp, #8
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b80e:	2303      	movs	r3, #3
 800b810:	e012      	b.n	800b838 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d10b      	bne.n	800b836 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b824:	69db      	ldr	r3, [r3, #28]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d005      	beq.n	800b836 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	3301      	adds	r3, #1
 800b856:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b85e:	8a3b      	ldrh	r3, [r7, #16]
 800b860:	021b      	lsls	r3, r3, #8
 800b862:	b21a      	sxth	r2, r3
 800b864:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b868:	4313      	orrs	r3, r2
 800b86a:	b21b      	sxth	r3, r3
 800b86c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b86e:	89fb      	ldrh	r3, [r7, #14]
}
 800b870:	4618      	mov	r0, r3
 800b872:	371c      	adds	r7, #28
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b886:	2300      	movs	r3, #0
 800b888:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	781b      	ldrb	r3, [r3, #0]
 800b88e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b892:	2b40      	cmp	r3, #64	@ 0x40
 800b894:	d005      	beq.n	800b8a2 <USBD_StdDevReq+0x26>
 800b896:	2b40      	cmp	r3, #64	@ 0x40
 800b898:	d853      	bhi.n	800b942 <USBD_StdDevReq+0xc6>
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d00b      	beq.n	800b8b6 <USBD_StdDevReq+0x3a>
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	d14f      	bne.n	800b942 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	6839      	ldr	r1, [r7, #0]
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	4798      	blx	r3
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b4:	e04a      	b.n	800b94c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	785b      	ldrb	r3, [r3, #1]
 800b8ba:	2b09      	cmp	r3, #9
 800b8bc:	d83b      	bhi.n	800b936 <USBD_StdDevReq+0xba>
 800b8be:	a201      	add	r2, pc, #4	@ (adr r2, 800b8c4 <USBD_StdDevReq+0x48>)
 800b8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c4:	0800b919 	.word	0x0800b919
 800b8c8:	0800b92d 	.word	0x0800b92d
 800b8cc:	0800b937 	.word	0x0800b937
 800b8d0:	0800b923 	.word	0x0800b923
 800b8d4:	0800b937 	.word	0x0800b937
 800b8d8:	0800b8f7 	.word	0x0800b8f7
 800b8dc:	0800b8ed 	.word	0x0800b8ed
 800b8e0:	0800b937 	.word	0x0800b937
 800b8e4:	0800b90f 	.word	0x0800b90f
 800b8e8:	0800b901 	.word	0x0800b901
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8ec:	6839      	ldr	r1, [r7, #0]
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 f9de 	bl	800bcb0 <USBD_GetDescriptor>
          break;
 800b8f4:	e024      	b.n	800b940 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8f6:	6839      	ldr	r1, [r7, #0]
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 fb6d 	bl	800bfd8 <USBD_SetAddress>
          break;
 800b8fe:	e01f      	b.n	800b940 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b900:	6839      	ldr	r1, [r7, #0]
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fbac 	bl	800c060 <USBD_SetConfig>
 800b908:	4603      	mov	r3, r0
 800b90a:	73fb      	strb	r3, [r7, #15]
          break;
 800b90c:	e018      	b.n	800b940 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b90e:	6839      	ldr	r1, [r7, #0]
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f000 fc4b 	bl	800c1ac <USBD_GetConfig>
          break;
 800b916:	e013      	b.n	800b940 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fc7c 	bl	800c218 <USBD_GetStatus>
          break;
 800b920:	e00e      	b.n	800b940 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fcab 	bl	800c280 <USBD_SetFeature>
          break;
 800b92a:	e009      	b.n	800b940 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b92c:	6839      	ldr	r1, [r7, #0]
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 fcba 	bl	800c2a8 <USBD_ClrFeature>
          break;
 800b934:	e004      	b.n	800b940 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b936:	6839      	ldr	r1, [r7, #0]
 800b938:	6878      	ldr	r0, [r7, #4]
 800b93a:	f000 fd11 	bl	800c360 <USBD_CtlError>
          break;
 800b93e:	bf00      	nop
      }
      break;
 800b940:	e004      	b.n	800b94c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b942:	6839      	ldr	r1, [r7, #0]
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 fd0b 	bl	800c360 <USBD_CtlError>
      break;
 800b94a:	bf00      	nop
  }

  return ret;
 800b94c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3710      	adds	r7, #16
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop

0800b958 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b96e:	2b40      	cmp	r3, #64	@ 0x40
 800b970:	d005      	beq.n	800b97e <USBD_StdItfReq+0x26>
 800b972:	2b40      	cmp	r3, #64	@ 0x40
 800b974:	d82f      	bhi.n	800b9d6 <USBD_StdItfReq+0x7e>
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <USBD_StdItfReq+0x26>
 800b97a:	2b20      	cmp	r3, #32
 800b97c:	d12b      	bne.n	800b9d6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b984:	b2db      	uxtb	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d81d      	bhi.n	800b9c8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	889b      	ldrh	r3, [r3, #4]
 800b990:	b2db      	uxtb	r3, r3
 800b992:	2b01      	cmp	r3, #1
 800b994:	d813      	bhi.n	800b9be <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	88db      	ldrh	r3, [r3, #6]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d110      	bne.n	800b9d2 <USBD_StdItfReq+0x7a>
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10d      	bne.n	800b9d2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fd9d 	bl	800c4f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9bc:	e009      	b.n	800b9d2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b9be:	6839      	ldr	r1, [r7, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fccd 	bl	800c360 <USBD_CtlError>
          break;
 800b9c6:	e004      	b.n	800b9d2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fcc8 	bl	800c360 <USBD_CtlError>
          break;
 800b9d0:	e000      	b.n	800b9d4 <USBD_StdItfReq+0x7c>
          break;
 800b9d2:	bf00      	nop
      }
      break;
 800b9d4:	e004      	b.n	800b9e0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b9d6:	6839      	ldr	r1, [r7, #0]
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fcc1 	bl	800c360 <USBD_CtlError>
      break;
 800b9de:	bf00      	nop
  }

  return ret;
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3710      	adds	r7, #16
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
 800b9f2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	889b      	ldrh	r3, [r3, #4]
 800b9fc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba06:	2b40      	cmp	r3, #64	@ 0x40
 800ba08:	d007      	beq.n	800ba1a <USBD_StdEPReq+0x30>
 800ba0a:	2b40      	cmp	r3, #64	@ 0x40
 800ba0c:	f200 8145 	bhi.w	800bc9a <USBD_StdEPReq+0x2b0>
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00c      	beq.n	800ba2e <USBD_StdEPReq+0x44>
 800ba14:	2b20      	cmp	r3, #32
 800ba16:	f040 8140 	bne.w	800bc9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba20:	689b      	ldr	r3, [r3, #8]
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	4798      	blx	r3
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2c:	e13a      	b.n	800bca4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	785b      	ldrb	r3, [r3, #1]
 800ba32:	2b03      	cmp	r3, #3
 800ba34:	d007      	beq.n	800ba46 <USBD_StdEPReq+0x5c>
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	f300 8129 	bgt.w	800bc8e <USBD_StdEPReq+0x2a4>
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d07f      	beq.n	800bb40 <USBD_StdEPReq+0x156>
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d03c      	beq.n	800babe <USBD_StdEPReq+0xd4>
 800ba44:	e123      	b.n	800bc8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d002      	beq.n	800ba58 <USBD_StdEPReq+0x6e>
 800ba52:	2b03      	cmp	r3, #3
 800ba54:	d016      	beq.n	800ba84 <USBD_StdEPReq+0x9a>
 800ba56:	e02c      	b.n	800bab2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba58:	7bbb      	ldrb	r3, [r7, #14]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d00d      	beq.n	800ba7a <USBD_StdEPReq+0x90>
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	2b80      	cmp	r3, #128	@ 0x80
 800ba62:	d00a      	beq.n	800ba7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	4619      	mov	r1, r3
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f001 f917 	bl	800cc9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba6e:	2180      	movs	r1, #128	@ 0x80
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f001 f913 	bl	800cc9c <USBD_LL_StallEP>
 800ba76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba78:	e020      	b.n	800babc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ba7a:	6839      	ldr	r1, [r7, #0]
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f000 fc6f 	bl	800c360 <USBD_CtlError>
              break;
 800ba82:	e01b      	b.n	800babc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	885b      	ldrh	r3, [r3, #2]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10e      	bne.n	800baaa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba8c:	7bbb      	ldrb	r3, [r7, #14]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d00b      	beq.n	800baaa <USBD_StdEPReq+0xc0>
 800ba92:	7bbb      	ldrb	r3, [r7, #14]
 800ba94:	2b80      	cmp	r3, #128	@ 0x80
 800ba96:	d008      	beq.n	800baaa <USBD_StdEPReq+0xc0>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	88db      	ldrh	r3, [r3, #6]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d104      	bne.n	800baaa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	4619      	mov	r1, r3
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f001 f8f9 	bl	800cc9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fd23 	bl	800c4f6 <USBD_CtlSendStatus>

              break;
 800bab0:	e004      	b.n	800babc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bab2:	6839      	ldr	r1, [r7, #0]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 fc53 	bl	800c360 <USBD_CtlError>
              break;
 800baba:	bf00      	nop
          }
          break;
 800babc:	e0ec      	b.n	800bc98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b02      	cmp	r3, #2
 800bac8:	d002      	beq.n	800bad0 <USBD_StdEPReq+0xe6>
 800baca:	2b03      	cmp	r3, #3
 800bacc:	d016      	beq.n	800bafc <USBD_StdEPReq+0x112>
 800bace:	e030      	b.n	800bb32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bad0:	7bbb      	ldrb	r3, [r7, #14]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00d      	beq.n	800baf2 <USBD_StdEPReq+0x108>
 800bad6:	7bbb      	ldrb	r3, [r7, #14]
 800bad8:	2b80      	cmp	r3, #128	@ 0x80
 800bada:	d00a      	beq.n	800baf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800badc:	7bbb      	ldrb	r3, [r7, #14]
 800bade:	4619      	mov	r1, r3
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f001 f8db 	bl	800cc9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bae6:	2180      	movs	r1, #128	@ 0x80
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f001 f8d7 	bl	800cc9c <USBD_LL_StallEP>
 800baee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800baf0:	e025      	b.n	800bb3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800baf2:	6839      	ldr	r1, [r7, #0]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fc33 	bl	800c360 <USBD_CtlError>
              break;
 800bafa:	e020      	b.n	800bb3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	885b      	ldrh	r3, [r3, #2]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d11b      	bne.n	800bb3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d004      	beq.n	800bb18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb0e:	7bbb      	ldrb	r3, [r7, #14]
 800bb10:	4619      	mov	r1, r3
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 f8e1 	bl	800ccda <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fcec 	bl	800c4f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	6839      	ldr	r1, [r7, #0]
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	4798      	blx	r3
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bb30:	e004      	b.n	800bb3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bb32:	6839      	ldr	r1, [r7, #0]
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f000 fc13 	bl	800c360 <USBD_CtlError>
              break;
 800bb3a:	e000      	b.n	800bb3e <USBD_StdEPReq+0x154>
              break;
 800bb3c:	bf00      	nop
          }
          break;
 800bb3e:	e0ab      	b.n	800bc98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	2b02      	cmp	r3, #2
 800bb4a:	d002      	beq.n	800bb52 <USBD_StdEPReq+0x168>
 800bb4c:	2b03      	cmp	r3, #3
 800bb4e:	d032      	beq.n	800bbb6 <USBD_StdEPReq+0x1cc>
 800bb50:	e097      	b.n	800bc82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb52:	7bbb      	ldrb	r3, [r7, #14]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d007      	beq.n	800bb68 <USBD_StdEPReq+0x17e>
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
 800bb5a:	2b80      	cmp	r3, #128	@ 0x80
 800bb5c:	d004      	beq.n	800bb68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fbfd 	bl	800c360 <USBD_CtlError>
                break;
 800bb66:	e091      	b.n	800bc8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	da0b      	bge.n	800bb88 <USBD_StdEPReq+0x19e>
 800bb70:	7bbb      	ldrb	r3, [r7, #14]
 800bb72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb76:	4613      	mov	r3, r2
 800bb78:	009b      	lsls	r3, r3, #2
 800bb7a:	4413      	add	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	3310      	adds	r3, #16
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	4413      	add	r3, r2
 800bb84:	3304      	adds	r3, #4
 800bb86:	e00b      	b.n	800bba0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb8e:	4613      	mov	r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	4413      	add	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	3304      	adds	r3, #4
 800bba0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	2202      	movs	r2, #2
 800bbac:	4619      	mov	r1, r3
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fc47 	bl	800c442 <USBD_CtlSendData>
              break;
 800bbb4:	e06a      	b.n	800bc8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bbb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	da11      	bge.n	800bbe2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bbbe:	7bbb      	ldrb	r3, [r7, #14]
 800bbc0:	f003 020f 	and.w	r2, r3, #15
 800bbc4:	6879      	ldr	r1, [r7, #4]
 800bbc6:	4613      	mov	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	4413      	add	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	440b      	add	r3, r1
 800bbd0:	3324      	adds	r3, #36	@ 0x24
 800bbd2:	881b      	ldrh	r3, [r3, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d117      	bne.n	800bc08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fbc0 	bl	800c360 <USBD_CtlError>
                  break;
 800bbe0:	e054      	b.n	800bc8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bbe2:	7bbb      	ldrb	r3, [r7, #14]
 800bbe4:	f003 020f 	and.w	r2, r3, #15
 800bbe8:	6879      	ldr	r1, [r7, #4]
 800bbea:	4613      	mov	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4413      	add	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbf8:	881b      	ldrh	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d104      	bne.n	800bc08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bbfe:	6839      	ldr	r1, [r7, #0]
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 fbad 	bl	800c360 <USBD_CtlError>
                  break;
 800bc06:	e041      	b.n	800bc8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	da0b      	bge.n	800bc28 <USBD_StdEPReq+0x23e>
 800bc10:	7bbb      	ldrb	r3, [r7, #14]
 800bc12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc16:	4613      	mov	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4413      	add	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	3310      	adds	r3, #16
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	4413      	add	r3, r2
 800bc24:	3304      	adds	r3, #4
 800bc26:	e00b      	b.n	800bc40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc28:	7bbb      	ldrb	r3, [r7, #14]
 800bc2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc2e:	4613      	mov	r3, r2
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	4413      	add	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc3a:	687a      	ldr	r2, [r7, #4]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	3304      	adds	r3, #4
 800bc40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc42:	7bbb      	ldrb	r3, [r7, #14]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d002      	beq.n	800bc4e <USBD_StdEPReq+0x264>
 800bc48:	7bbb      	ldrb	r3, [r7, #14]
 800bc4a:	2b80      	cmp	r3, #128	@ 0x80
 800bc4c:	d103      	bne.n	800bc56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]
 800bc54:	e00e      	b.n	800bc74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc56:	7bbb      	ldrb	r3, [r7, #14]
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f001 f85c 	bl	800cd18 <USBD_LL_IsStallEP>
 800bc60:	4603      	mov	r3, r0
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d003      	beq.n	800bc6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	601a      	str	r2, [r3, #0]
 800bc6c:	e002      	b.n	800bc74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2200      	movs	r2, #0
 800bc72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	2202      	movs	r2, #2
 800bc78:	4619      	mov	r1, r3
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f000 fbe1 	bl	800c442 <USBD_CtlSendData>
              break;
 800bc80:	e004      	b.n	800bc8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 fb6b 	bl	800c360 <USBD_CtlError>
              break;
 800bc8a:	bf00      	nop
          }
          break;
 800bc8c:	e004      	b.n	800bc98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bc8e:	6839      	ldr	r1, [r7, #0]
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 fb65 	bl	800c360 <USBD_CtlError>
          break;
 800bc96:	bf00      	nop
      }
      break;
 800bc98:	e004      	b.n	800bca4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fb5f 	bl	800c360 <USBD_CtlError>
      break;
 800bca2:	bf00      	nop
  }

  return ret;
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
	...

0800bcb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	885b      	ldrh	r3, [r3, #2]
 800bcca:	0a1b      	lsrs	r3, r3, #8
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	3b01      	subs	r3, #1
 800bcd0:	2b0e      	cmp	r3, #14
 800bcd2:	f200 8152 	bhi.w	800bf7a <USBD_GetDescriptor+0x2ca>
 800bcd6:	a201      	add	r2, pc, #4	@ (adr r2, 800bcdc <USBD_GetDescriptor+0x2c>)
 800bcd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcdc:	0800bd4d 	.word	0x0800bd4d
 800bce0:	0800bd65 	.word	0x0800bd65
 800bce4:	0800bda5 	.word	0x0800bda5
 800bce8:	0800bf7b 	.word	0x0800bf7b
 800bcec:	0800bf7b 	.word	0x0800bf7b
 800bcf0:	0800bf1b 	.word	0x0800bf1b
 800bcf4:	0800bf47 	.word	0x0800bf47
 800bcf8:	0800bf7b 	.word	0x0800bf7b
 800bcfc:	0800bf7b 	.word	0x0800bf7b
 800bd00:	0800bf7b 	.word	0x0800bf7b
 800bd04:	0800bf7b 	.word	0x0800bf7b
 800bd08:	0800bf7b 	.word	0x0800bf7b
 800bd0c:	0800bf7b 	.word	0x0800bf7b
 800bd10:	0800bf7b 	.word	0x0800bf7b
 800bd14:	0800bd19 	.word	0x0800bd19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd1e:	69db      	ldr	r3, [r3, #28]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d00b      	beq.n	800bd3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd2a:	69db      	ldr	r3, [r3, #28]
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	7c12      	ldrb	r2, [r2, #16]
 800bd30:	f107 0108 	add.w	r1, r7, #8
 800bd34:	4610      	mov	r0, r2
 800bd36:	4798      	blx	r3
 800bd38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd3a:	e126      	b.n	800bf8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd3c:	6839      	ldr	r1, [r7, #0]
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fb0e 	bl	800c360 <USBD_CtlError>
        err++;
 800bd44:	7afb      	ldrb	r3, [r7, #11]
 800bd46:	3301      	adds	r3, #1
 800bd48:	72fb      	strb	r3, [r7, #11]
      break;
 800bd4a:	e11e      	b.n	800bf8a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	7c12      	ldrb	r2, [r2, #16]
 800bd58:	f107 0108 	add.w	r1, r7, #8
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	60f8      	str	r0, [r7, #12]
      break;
 800bd62:	e112      	b.n	800bf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	7c1b      	ldrb	r3, [r3, #16]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10d      	bne.n	800bd88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd74:	f107 0208 	add.w	r2, r7, #8
 800bd78:	4610      	mov	r0, r2
 800bd7a:	4798      	blx	r3
 800bd7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	2202      	movs	r2, #2
 800bd84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd86:	e100      	b.n	800bf8a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd90:	f107 0208 	add.w	r2, r7, #8
 800bd94:	4610      	mov	r0, r2
 800bd96:	4798      	blx	r3
 800bd98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	2202      	movs	r2, #2
 800bda0:	701a      	strb	r2, [r3, #0]
      break;
 800bda2:	e0f2      	b.n	800bf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	885b      	ldrh	r3, [r3, #2]
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	2b05      	cmp	r3, #5
 800bdac:	f200 80ac 	bhi.w	800bf08 <USBD_GetDescriptor+0x258>
 800bdb0:	a201      	add	r2, pc, #4	@ (adr r2, 800bdb8 <USBD_GetDescriptor+0x108>)
 800bdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb6:	bf00      	nop
 800bdb8:	0800bdd1 	.word	0x0800bdd1
 800bdbc:	0800be05 	.word	0x0800be05
 800bdc0:	0800be39 	.word	0x0800be39
 800bdc4:	0800be6d 	.word	0x0800be6d
 800bdc8:	0800bea1 	.word	0x0800bea1
 800bdcc:	0800bed5 	.word	0x0800bed5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d00b      	beq.n	800bdf4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde2:	685b      	ldr	r3, [r3, #4]
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	7c12      	ldrb	r2, [r2, #16]
 800bde8:	f107 0108 	add.w	r1, r7, #8
 800bdec:	4610      	mov	r0, r2
 800bdee:	4798      	blx	r3
 800bdf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdf2:	e091      	b.n	800bf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fab2 	bl	800c360 <USBD_CtlError>
            err++;
 800bdfc:	7afb      	ldrb	r3, [r7, #11]
 800bdfe:	3301      	adds	r3, #1
 800be00:	72fb      	strb	r3, [r7, #11]
          break;
 800be02:	e089      	b.n	800bf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0a:	689b      	ldr	r3, [r3, #8]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00b      	beq.n	800be28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be16:	689b      	ldr	r3, [r3, #8]
 800be18:	687a      	ldr	r2, [r7, #4]
 800be1a:	7c12      	ldrb	r2, [r2, #16]
 800be1c:	f107 0108 	add.w	r1, r7, #8
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
 800be24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be26:	e077      	b.n	800bf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be28:	6839      	ldr	r1, [r7, #0]
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fa98 	bl	800c360 <USBD_CtlError>
            err++;
 800be30:	7afb      	ldrb	r3, [r7, #11]
 800be32:	3301      	adds	r3, #1
 800be34:	72fb      	strb	r3, [r7, #11]
          break;
 800be36:	e06f      	b.n	800bf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d00b      	beq.n	800be5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	7c12      	ldrb	r2, [r2, #16]
 800be50:	f107 0108 	add.w	r1, r7, #8
 800be54:	4610      	mov	r0, r2
 800be56:	4798      	blx	r3
 800be58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be5a:	e05d      	b.n	800bf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be5c:	6839      	ldr	r1, [r7, #0]
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 fa7e 	bl	800c360 <USBD_CtlError>
            err++;
 800be64:	7afb      	ldrb	r3, [r7, #11]
 800be66:	3301      	adds	r3, #1
 800be68:	72fb      	strb	r3, [r7, #11]
          break;
 800be6a:	e055      	b.n	800bf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be72:	691b      	ldr	r3, [r3, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00b      	beq.n	800be90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be7e:	691b      	ldr	r3, [r3, #16]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	7c12      	ldrb	r2, [r2, #16]
 800be84:	f107 0108 	add.w	r1, r7, #8
 800be88:	4610      	mov	r0, r2
 800be8a:	4798      	blx	r3
 800be8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be8e:	e043      	b.n	800bf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be90:	6839      	ldr	r1, [r7, #0]
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 fa64 	bl	800c360 <USBD_CtlError>
            err++;
 800be98:	7afb      	ldrb	r3, [r7, #11]
 800be9a:	3301      	adds	r3, #1
 800be9c:	72fb      	strb	r3, [r7, #11]
          break;
 800be9e:	e03b      	b.n	800bf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bea6:	695b      	ldr	r3, [r3, #20]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d00b      	beq.n	800bec4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	7c12      	ldrb	r2, [r2, #16]
 800beb8:	f107 0108 	add.w	r1, r7, #8
 800bebc:	4610      	mov	r0, r2
 800bebe:	4798      	blx	r3
 800bec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec2:	e029      	b.n	800bf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bec4:	6839      	ldr	r1, [r7, #0]
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fa4a 	bl	800c360 <USBD_CtlError>
            err++;
 800becc:	7afb      	ldrb	r3, [r7, #11]
 800bece:	3301      	adds	r3, #1
 800bed0:	72fb      	strb	r3, [r7, #11]
          break;
 800bed2:	e021      	b.n	800bf18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beda:	699b      	ldr	r3, [r3, #24]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00b      	beq.n	800bef8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	7c12      	ldrb	r2, [r2, #16]
 800beec:	f107 0108 	add.w	r1, r7, #8
 800bef0:	4610      	mov	r0, r2
 800bef2:	4798      	blx	r3
 800bef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bef6:	e00f      	b.n	800bf18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bef8:	6839      	ldr	r1, [r7, #0]
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fa30 	bl	800c360 <USBD_CtlError>
            err++;
 800bf00:	7afb      	ldrb	r3, [r7, #11]
 800bf02:	3301      	adds	r3, #1
 800bf04:	72fb      	strb	r3, [r7, #11]
          break;
 800bf06:	e007      	b.n	800bf18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 fa28 	bl	800c360 <USBD_CtlError>
          err++;
 800bf10:	7afb      	ldrb	r3, [r7, #11]
 800bf12:	3301      	adds	r3, #1
 800bf14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bf16:	bf00      	nop
      }
      break;
 800bf18:	e037      	b.n	800bf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	7c1b      	ldrb	r3, [r3, #16]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d109      	bne.n	800bf36 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf2a:	f107 0208 	add.w	r2, r7, #8
 800bf2e:	4610      	mov	r0, r2
 800bf30:	4798      	blx	r3
 800bf32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf34:	e029      	b.n	800bf8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fa11 	bl	800c360 <USBD_CtlError>
        err++;
 800bf3e:	7afb      	ldrb	r3, [r7, #11]
 800bf40:	3301      	adds	r3, #1
 800bf42:	72fb      	strb	r3, [r7, #11]
      break;
 800bf44:	e021      	b.n	800bf8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7c1b      	ldrb	r3, [r3, #16]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d10d      	bne.n	800bf6a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf56:	f107 0208 	add.w	r2, r7, #8
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	4798      	blx	r3
 800bf5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	3301      	adds	r3, #1
 800bf64:	2207      	movs	r2, #7
 800bf66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf68:	e00f      	b.n	800bf8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f9f7 	bl	800c360 <USBD_CtlError>
        err++;
 800bf72:	7afb      	ldrb	r3, [r7, #11]
 800bf74:	3301      	adds	r3, #1
 800bf76:	72fb      	strb	r3, [r7, #11]
      break;
 800bf78:	e007      	b.n	800bf8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 f9ef 	bl	800c360 <USBD_CtlError>
      err++;
 800bf82:	7afb      	ldrb	r3, [r7, #11]
 800bf84:	3301      	adds	r3, #1
 800bf86:	72fb      	strb	r3, [r7, #11]
      break;
 800bf88:	bf00      	nop
  }

  if (err != 0U)
 800bf8a:	7afb      	ldrb	r3, [r7, #11]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d11e      	bne.n	800bfce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	88db      	ldrh	r3, [r3, #6]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d016      	beq.n	800bfc6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf98:	893b      	ldrh	r3, [r7, #8]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00e      	beq.n	800bfbc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	88da      	ldrh	r2, [r3, #6]
 800bfa2:	893b      	ldrh	r3, [r7, #8]
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	bf28      	it	cs
 800bfa8:	4613      	movcs	r3, r2
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfae:	893b      	ldrh	r3, [r7, #8]
 800bfb0:	461a      	mov	r2, r3
 800bfb2:	68f9      	ldr	r1, [r7, #12]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fa44 	bl	800c442 <USBD_CtlSendData>
 800bfba:	e009      	b.n	800bfd0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f000 f9ce 	bl	800c360 <USBD_CtlError>
 800bfc4:	e004      	b.n	800bfd0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fa95 	bl	800c4f6 <USBD_CtlSendStatus>
 800bfcc:	e000      	b.n	800bfd0 <USBD_GetDescriptor+0x320>
    return;
 800bfce:	bf00      	nop
  }
}
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop

0800bfd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	889b      	ldrh	r3, [r3, #4]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d131      	bne.n	800c04e <USBD_SetAddress+0x76>
 800bfea:	683b      	ldr	r3, [r7, #0]
 800bfec:	88db      	ldrh	r3, [r3, #6]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d12d      	bne.n	800c04e <USBD_SetAddress+0x76>
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	885b      	ldrh	r3, [r3, #2]
 800bff6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bff8:	d829      	bhi.n	800c04e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	885b      	ldrh	r3, [r3, #2]
 800bffe:	b2db      	uxtb	r3, r3
 800c000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	2b03      	cmp	r3, #3
 800c010:	d104      	bne.n	800c01c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f9a3 	bl	800c360 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c01a:	e01d      	b.n	800c058 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	7bfa      	ldrb	r2, [r7, #15]
 800c020:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c024:	7bfb      	ldrb	r3, [r7, #15]
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f000 fea1 	bl	800cd70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fa61 	bl	800c4f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c034:	7bfb      	ldrb	r3, [r7, #15]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d004      	beq.n	800c044 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2202      	movs	r2, #2
 800c03e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c042:	e009      	b.n	800c058 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c04c:	e004      	b.n	800c058 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f000 f985 	bl	800c360 <USBD_CtlError>
  }
}
 800c056:	bf00      	nop
 800c058:	bf00      	nop
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b084      	sub	sp, #16
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c06a:	2300      	movs	r3, #0
 800c06c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	885b      	ldrh	r3, [r3, #2]
 800c072:	b2da      	uxtb	r2, r3
 800c074:	4b4c      	ldr	r3, [pc, #304]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c076:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c078:	4b4b      	ldr	r3, [pc, #300]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d905      	bls.n	800c08c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c080:	6839      	ldr	r1, [r7, #0]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f96c 	bl	800c360 <USBD_CtlError>
    return USBD_FAIL;
 800c088:	2303      	movs	r3, #3
 800c08a:	e088      	b.n	800c19e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c092:	b2db      	uxtb	r3, r3
 800c094:	2b02      	cmp	r3, #2
 800c096:	d002      	beq.n	800c09e <USBD_SetConfig+0x3e>
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d025      	beq.n	800c0e8 <USBD_SetConfig+0x88>
 800c09c:	e071      	b.n	800c182 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c09e:	4b42      	ldr	r3, [pc, #264]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d01c      	beq.n	800c0e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c0a6:	4b40      	ldr	r3, [pc, #256]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0b0:	4b3d      	ldr	r3, [pc, #244]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	f7ff f992 	bl	800b3e0 <USBD_SetClassConfig>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0c0:	7bfb      	ldrb	r3, [r7, #15]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d004      	beq.n	800c0d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c0c6:	6839      	ldr	r1, [r7, #0]
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f949 	bl	800c360 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0ce:	e065      	b.n	800c19c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fa10 	bl	800c4f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2203      	movs	r2, #3
 800c0da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0de:	e05d      	b.n	800c19c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c0e0:	6878      	ldr	r0, [r7, #4]
 800c0e2:	f000 fa08 	bl	800c4f6 <USBD_CtlSendStatus>
      break;
 800c0e6:	e059      	b.n	800c19c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0e8:	4b2f      	ldr	r3, [pc, #188]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d112      	bne.n	800c116 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2202      	movs	r2, #2
 800c0f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c0f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c102:	4b29      	ldr	r3, [pc, #164]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7ff f985 	bl	800b418 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 f9f1 	bl	800c4f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c114:	e042      	b.n	800c19c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c116:	4b24      	ldr	r3, [pc, #144]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	429a      	cmp	r2, r3
 800c122:	d02a      	beq.n	800c17a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	b2db      	uxtb	r3, r3
 800c12a:	4619      	mov	r1, r3
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff f973 	bl	800b418 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c132:	4b1d      	ldr	r3, [pc, #116]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	461a      	mov	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c13c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	4619      	mov	r1, r3
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7ff f94c 	bl	800b3e0 <USBD_SetClassConfig>
 800c148:	4603      	mov	r3, r0
 800c14a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c14c:	7bfb      	ldrb	r3, [r7, #15]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00f      	beq.n	800c172 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 f903 	bl	800c360 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff f958 	bl	800b418 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2202      	movs	r2, #2
 800c16c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c170:	e014      	b.n	800c19c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f9bf 	bl	800c4f6 <USBD_CtlSendStatus>
      break;
 800c178:	e010      	b.n	800c19c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f9bb 	bl	800c4f6 <USBD_CtlSendStatus>
      break;
 800c180:	e00c      	b.n	800c19c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 f8eb 	bl	800c360 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c18a:	4b07      	ldr	r3, [pc, #28]	@ (800c1a8 <USBD_SetConfig+0x148>)
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff f941 	bl	800b418 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c196:	2303      	movs	r3, #3
 800c198:	73fb      	strb	r3, [r7, #15]
      break;
 800c19a:	bf00      	nop
  }

  return ret;
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	2000045c 	.word	0x2000045c

0800c1ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
 800c1b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	88db      	ldrh	r3, [r3, #6]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d004      	beq.n	800c1c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 f8cd 	bl	800c360 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1c6:	e023      	b.n	800c210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	dc02      	bgt.n	800c1da <USBD_GetConfig+0x2e>
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dc03      	bgt.n	800c1e0 <USBD_GetConfig+0x34>
 800c1d8:	e015      	b.n	800c206 <USBD_GetConfig+0x5a>
 800c1da:	2b03      	cmp	r3, #3
 800c1dc:	d00b      	beq.n	800c1f6 <USBD_GetConfig+0x4a>
 800c1de:	e012      	b.n	800c206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f927 	bl	800c442 <USBD_CtlSendData>
        break;
 800c1f4:	e00c      	b.n	800c210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	3304      	adds	r3, #4
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 f91f 	bl	800c442 <USBD_CtlSendData>
        break;
 800c204:	e004      	b.n	800c210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f8a9 	bl	800c360 <USBD_CtlError>
        break;
 800c20e:	bf00      	nop
}
 800c210:	bf00      	nop
 800c212:	3708      	adds	r7, #8
 800c214:	46bd      	mov	sp, r7
 800c216:	bd80      	pop	{r7, pc}

0800c218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c228:	b2db      	uxtb	r3, r3
 800c22a:	3b01      	subs	r3, #1
 800c22c:	2b02      	cmp	r3, #2
 800c22e:	d81e      	bhi.n	800c26e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	88db      	ldrh	r3, [r3, #6]
 800c234:	2b02      	cmp	r3, #2
 800c236:	d004      	beq.n	800c242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 f890 	bl	800c360 <USBD_CtlError>
        break;
 800c240:	e01a      	b.n	800c278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d005      	beq.n	800c25e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	f043 0202 	orr.w	r2, r3, #2
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	330c      	adds	r3, #12
 800c262:	2202      	movs	r2, #2
 800c264:	4619      	mov	r1, r3
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f8eb 	bl	800c442 <USBD_CtlSendData>
      break;
 800c26c:	e004      	b.n	800c278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c26e:	6839      	ldr	r1, [r7, #0]
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f875 	bl	800c360 <USBD_CtlError>
      break;
 800c276:	bf00      	nop
  }
}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	885b      	ldrh	r3, [r3, #2]
 800c28e:	2b01      	cmp	r3, #1
 800c290:	d106      	bne.n	800c2a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f92b 	bl	800c4f6 <USBD_CtlSendStatus>
  }
}
 800c2a0:	bf00      	nop
 800c2a2:	3708      	adds	r7, #8
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
 800c2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c2b8:	b2db      	uxtb	r3, r3
 800c2ba:	3b01      	subs	r3, #1
 800c2bc:	2b02      	cmp	r3, #2
 800c2be:	d80b      	bhi.n	800c2d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	885b      	ldrh	r3, [r3, #2]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d10c      	bne.n	800c2e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 f910 	bl	800c4f6 <USBD_CtlSendStatus>
      }
      break;
 800c2d6:	e004      	b.n	800c2e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2d8:	6839      	ldr	r1, [r7, #0]
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f840 	bl	800c360 <USBD_CtlError>
      break;
 800c2e0:	e000      	b.n	800c2e4 <USBD_ClrFeature+0x3c>
      break;
 800c2e2:	bf00      	nop
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b084      	sub	sp, #16
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	781a      	ldrb	r2, [r3, #0]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3301      	adds	r3, #1
 800c306:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	781a      	ldrb	r2, [r3, #0]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	3301      	adds	r3, #1
 800c314:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f7ff fa92 	bl	800b840 <SWAPBYTE>
 800c31c:	4603      	mov	r3, r0
 800c31e:	461a      	mov	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	3301      	adds	r3, #1
 800c328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3301      	adds	r3, #1
 800c32e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f7ff fa85 	bl	800b840 <SWAPBYTE>
 800c336:	4603      	mov	r3, r0
 800c338:	461a      	mov	r2, r3
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3301      	adds	r3, #1
 800c342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	3301      	adds	r3, #1
 800c348:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f7ff fa78 	bl	800b840 <SWAPBYTE>
 800c350:	4603      	mov	r3, r0
 800c352:	461a      	mov	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	80da      	strh	r2, [r3, #6]
}
 800c358:	bf00      	nop
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c36a:	2180      	movs	r1, #128	@ 0x80
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 fc95 	bl	800cc9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c372:	2100      	movs	r1, #0
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 fc91 	bl	800cc9c <USBD_LL_StallEP>
}
 800c37a:	bf00      	nop
 800c37c:	3708      	adds	r7, #8
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b086      	sub	sp, #24
 800c386:	af00      	add	r7, sp, #0
 800c388:	60f8      	str	r0, [r7, #12]
 800c38a:	60b9      	str	r1, [r7, #8]
 800c38c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c38e:	2300      	movs	r3, #0
 800c390:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d036      	beq.n	800c406 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c39c:	6938      	ldr	r0, [r7, #16]
 800c39e:	f000 f836 	bl	800c40e <USBD_GetLen>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	b29b      	uxth	r3, r3
 800c3a8:	005b      	lsls	r3, r3, #1
 800c3aa:	b29a      	uxth	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	68ba      	ldr	r2, [r7, #8]
 800c3b4:	4413      	add	r3, r2
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	7812      	ldrb	r2, [r2, #0]
 800c3ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3bc:	7dfb      	ldrb	r3, [r7, #23]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3c2:	7dfb      	ldrb	r3, [r7, #23]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	2203      	movs	r2, #3
 800c3ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3cc:	7dfb      	ldrb	r3, [r7, #23]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c3d2:	e013      	b.n	800c3fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c3d4:	7dfb      	ldrb	r3, [r7, #23]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	4413      	add	r3, r2
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	7812      	ldrb	r2, [r2, #0]
 800c3de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3e0:	693b      	ldr	r3, [r7, #16]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	613b      	str	r3, [r7, #16]
    idx++;
 800c3e6:	7dfb      	ldrb	r3, [r7, #23]
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3f6:	7dfb      	ldrb	r3, [r7, #23]
 800c3f8:	3301      	adds	r3, #1
 800c3fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1e7      	bne.n	800c3d4 <USBD_GetString+0x52>
 800c404:	e000      	b.n	800c408 <USBD_GetString+0x86>
    return;
 800c406:	bf00      	nop
  }
}
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c40e:	b480      	push	{r7}
 800c410:	b085      	sub	sp, #20
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c41e:	e005      	b.n	800c42c <USBD_GetLen+0x1e>
  {
    len++;
 800c420:	7bfb      	ldrb	r3, [r7, #15]
 800c422:	3301      	adds	r3, #1
 800c424:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	3301      	adds	r3, #1
 800c42a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1f5      	bne.n	800c420 <USBD_GetLen+0x12>
  }

  return len;
 800c434:	7bfb      	ldrb	r3, [r7, #15]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3714      	adds	r7, #20
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr

0800c442 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b084      	sub	sp, #16
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2202      	movs	r2, #2
 800c452:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	2100      	movs	r1, #0
 800c468:	68f8      	ldr	r0, [r7, #12]
 800c46a:	f000 fca0 	bl	800cdae <USBD_LL_Transmit>

  return USBD_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b084      	sub	sp, #16
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	2100      	movs	r1, #0
 800c48a:	68f8      	ldr	r0, [r7, #12]
 800c48c:	f000 fc8f 	bl	800cdae <USBD_LL_Transmit>

  return USBD_OK;
 800c490:	2300      	movs	r3, #0
}
 800c492:	4618      	mov	r0, r3
 800c494:	3710      	adds	r7, #16
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}

0800c49a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c49a:	b580      	push	{r7, lr}
 800c49c:	b084      	sub	sp, #16
 800c49e:	af00      	add	r7, sp, #0
 800c4a0:	60f8      	str	r0, [r7, #12]
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	f000 fc93 	bl	800cdf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	68ba      	ldr	r2, [r7, #8]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f000 fc82 	bl	800cdf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ec:	2300      	movs	r3, #0
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b082      	sub	sp, #8
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2204      	movs	r2, #4
 800c502:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c506:	2300      	movs	r3, #0
 800c508:	2200      	movs	r2, #0
 800c50a:	2100      	movs	r1, #0
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fc4e 	bl	800cdae <USBD_LL_Transmit>

  return USBD_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2205      	movs	r2, #5
 800c528:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c52c:	2300      	movs	r3, #0
 800c52e:	2200      	movs	r2, #0
 800c530:	2100      	movs	r1, #0
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f000 fc5c 	bl	800cdf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c548:	2200      	movs	r2, #0
 800c54a:	4912      	ldr	r1, [pc, #72]	@ (800c594 <MX_USB_Device_Init+0x50>)
 800c54c:	4812      	ldr	r0, [pc, #72]	@ (800c598 <MX_USB_Device_Init+0x54>)
 800c54e:	f7fe fed9 	bl	800b304 <USBD_Init>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d001      	beq.n	800c55c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c558:	f7f5 f9c7 	bl	80018ea <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c55c:	490f      	ldr	r1, [pc, #60]	@ (800c59c <MX_USB_Device_Init+0x58>)
 800c55e:	480e      	ldr	r0, [pc, #56]	@ (800c598 <MX_USB_Device_Init+0x54>)
 800c560:	f7fe ff00 	bl	800b364 <USBD_RegisterClass>
 800c564:	4603      	mov	r3, r0
 800c566:	2b00      	cmp	r3, #0
 800c568:	d001      	beq.n	800c56e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c56a:	f7f5 f9be 	bl	80018ea <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c56e:	490c      	ldr	r1, [pc, #48]	@ (800c5a0 <MX_USB_Device_Init+0x5c>)
 800c570:	4809      	ldr	r0, [pc, #36]	@ (800c598 <MX_USB_Device_Init+0x54>)
 800c572:	f7fe fe21 	bl	800b1b8 <USBD_CDC_RegisterInterface>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d001      	beq.n	800c580 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c57c:	f7f5 f9b5 	bl	80018ea <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c580:	4805      	ldr	r0, [pc, #20]	@ (800c598 <MX_USB_Device_Init+0x54>)
 800c582:	f7fe ff16 	bl	800b3b2 <USBD_Start>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d001      	beq.n	800c590 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c58c:	f7f5 f9ad 	bl	80018ea <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c590:	bf00      	nop
 800c592:	bd80      	pop	{r7, pc}
 800c594:	20000130 	.word	0x20000130
 800c598:	20000460 	.word	0x20000460
 800c59c:	20000018 	.word	0x20000018
 800c5a0:	2000011c 	.word	0x2000011c

0800c5a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	4905      	ldr	r1, [pc, #20]	@ (800c5c0 <CDC_Init_FS+0x1c>)
 800c5ac:	4805      	ldr	r0, [pc, #20]	@ (800c5c4 <CDC_Init_FS+0x20>)
 800c5ae:	f7fe fe18 	bl	800b1e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5b2:	4905      	ldr	r1, [pc, #20]	@ (800c5c8 <CDC_Init_FS+0x24>)
 800c5b4:	4803      	ldr	r0, [pc, #12]	@ (800c5c4 <CDC_Init_FS+0x20>)
 800c5b6:	f7fe fe32 	bl	800b21e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	bd80      	pop	{r7, pc}
 800c5c0:	20000b30 	.word	0x20000b30
 800c5c4:	20000460 	.word	0x20000460
 800c5c8:	20000730 	.word	0x20000730

0800c5cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b083      	sub	sp, #12
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	6039      	str	r1, [r7, #0]
 800c5e6:	71fb      	strb	r3, [r7, #7]
 800c5e8:	4613      	mov	r3, r2
 800c5ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c5ec:	79fb      	ldrb	r3, [r7, #7]
 800c5ee:	2b23      	cmp	r3, #35	@ 0x23
 800c5f0:	d84a      	bhi.n	800c688 <CDC_Control_FS+0xac>
 800c5f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f8 <CDC_Control_FS+0x1c>)
 800c5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f8:	0800c689 	.word	0x0800c689
 800c5fc:	0800c689 	.word	0x0800c689
 800c600:	0800c689 	.word	0x0800c689
 800c604:	0800c689 	.word	0x0800c689
 800c608:	0800c689 	.word	0x0800c689
 800c60c:	0800c689 	.word	0x0800c689
 800c610:	0800c689 	.word	0x0800c689
 800c614:	0800c689 	.word	0x0800c689
 800c618:	0800c689 	.word	0x0800c689
 800c61c:	0800c689 	.word	0x0800c689
 800c620:	0800c689 	.word	0x0800c689
 800c624:	0800c689 	.word	0x0800c689
 800c628:	0800c689 	.word	0x0800c689
 800c62c:	0800c689 	.word	0x0800c689
 800c630:	0800c689 	.word	0x0800c689
 800c634:	0800c689 	.word	0x0800c689
 800c638:	0800c689 	.word	0x0800c689
 800c63c:	0800c689 	.word	0x0800c689
 800c640:	0800c689 	.word	0x0800c689
 800c644:	0800c689 	.word	0x0800c689
 800c648:	0800c689 	.word	0x0800c689
 800c64c:	0800c689 	.word	0x0800c689
 800c650:	0800c689 	.word	0x0800c689
 800c654:	0800c689 	.word	0x0800c689
 800c658:	0800c689 	.word	0x0800c689
 800c65c:	0800c689 	.word	0x0800c689
 800c660:	0800c689 	.word	0x0800c689
 800c664:	0800c689 	.word	0x0800c689
 800c668:	0800c689 	.word	0x0800c689
 800c66c:	0800c689 	.word	0x0800c689
 800c670:	0800c689 	.word	0x0800c689
 800c674:	0800c689 	.word	0x0800c689
 800c678:	0800c689 	.word	0x0800c689
 800c67c:	0800c689 	.word	0x0800c689
 800c680:	0800c689 	.word	0x0800c689
 800c684:	0800c689 	.word	0x0800c689
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c688:	bf00      	nop
  }

  return (USBD_OK);
 800c68a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	370c      	adds	r7, #12
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6a2:	6879      	ldr	r1, [r7, #4]
 800c6a4:	4805      	ldr	r0, [pc, #20]	@ (800c6bc <CDC_Receive_FS+0x24>)
 800c6a6:	f7fe fdba 	bl	800b21e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6aa:	4804      	ldr	r0, [pc, #16]	@ (800c6bc <CDC_Receive_FS+0x24>)
 800c6ac:	f7fe fe00 	bl	800b2b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c6b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	3708      	adds	r7, #8
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	20000460 	.word	0x20000460

0800c6c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c6d0:	4b0d      	ldr	r3, [pc, #52]	@ (800c708 <CDC_Transmit_FS+0x48>)
 800c6d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c6d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d001      	beq.n	800c6e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e00b      	b.n	800c6fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c6e6:	887b      	ldrh	r3, [r7, #2]
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	4806      	ldr	r0, [pc, #24]	@ (800c708 <CDC_Transmit_FS+0x48>)
 800c6ee:	f7fe fd78 	bl	800b1e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c6f2:	4805      	ldr	r0, [pc, #20]	@ (800c708 <CDC_Transmit_FS+0x48>)
 800c6f4:	f7fe fdac 	bl	800b250 <USBD_CDC_TransmitPacket>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	20000460 	.word	0x20000460

0800c70c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	4613      	mov	r3, r2
 800c718:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c71e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c722:	4618      	mov	r0, r3
 800c724:	371c      	adds	r7, #28
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr
	...

0800c730 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	4603      	mov	r3, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2212      	movs	r2, #18
 800c740:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c742:	4b03      	ldr	r3, [pc, #12]	@ (800c750 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c744:	4618      	mov	r0, r3
 800c746:	370c      	adds	r7, #12
 800c748:	46bd      	mov	sp, r7
 800c74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74e:	4770      	bx	lr
 800c750:	20000150 	.word	0x20000150

0800c754 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	4603      	mov	r3, r0
 800c75c:	6039      	str	r1, [r7, #0]
 800c75e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2204      	movs	r2, #4
 800c764:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c766:	4b03      	ldr	r3, [pc, #12]	@ (800c774 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c768:	4618      	mov	r0, r3
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr
 800c774:	20000164 	.word	0x20000164

0800c778 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	6039      	str	r1, [r7, #0]
 800c782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c784:	79fb      	ldrb	r3, [r7, #7]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d105      	bne.n	800c796 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c78a:	683a      	ldr	r2, [r7, #0]
 800c78c:	4907      	ldr	r1, [pc, #28]	@ (800c7ac <USBD_CDC_ProductStrDescriptor+0x34>)
 800c78e:	4808      	ldr	r0, [pc, #32]	@ (800c7b0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c790:	f7ff fdf7 	bl	800c382 <USBD_GetString>
 800c794:	e004      	b.n	800c7a0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	4904      	ldr	r1, [pc, #16]	@ (800c7ac <USBD_CDC_ProductStrDescriptor+0x34>)
 800c79a:	4805      	ldr	r0, [pc, #20]	@ (800c7b0 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c79c:	f7ff fdf1 	bl	800c382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c7a0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	20000f30 	.word	0x20000f30
 800c7b0:	0800d8e4 	.word	0x0800d8e4

0800c7b4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	6039      	str	r1, [r7, #0]
 800c7be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7c0:	683a      	ldr	r2, [r7, #0]
 800c7c2:	4904      	ldr	r1, [pc, #16]	@ (800c7d4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c7c4:	4804      	ldr	r0, [pc, #16]	@ (800c7d8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c7c6:	f7ff fddc 	bl	800c382 <USBD_GetString>
  return USBD_StrDesc;
 800c7ca:	4b02      	ldr	r3, [pc, #8]	@ (800c7d4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3708      	adds	r7, #8
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	20000f30 	.word	0x20000f30
 800c7d8:	0800d8fc 	.word	0x0800d8fc

0800c7dc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	4603      	mov	r3, r0
 800c7e4:	6039      	str	r1, [r7, #0]
 800c7e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	221a      	movs	r2, #26
 800c7ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7ee:	f000 f843 	bl	800c878 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c7f2:	4b02      	ldr	r3, [pc, #8]	@ (800c7fc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3708      	adds	r7, #8
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	20000168 	.word	0x20000168

0800c800 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b082      	sub	sp, #8
 800c804:	af00      	add	r7, sp, #0
 800c806:	4603      	mov	r3, r0
 800c808:	6039      	str	r1, [r7, #0]
 800c80a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c80c:	79fb      	ldrb	r3, [r7, #7]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d105      	bne.n	800c81e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	4907      	ldr	r1, [pc, #28]	@ (800c834 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c816:	4808      	ldr	r0, [pc, #32]	@ (800c838 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c818:	f7ff fdb3 	bl	800c382 <USBD_GetString>
 800c81c:	e004      	b.n	800c828 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c81e:	683a      	ldr	r2, [r7, #0]
 800c820:	4904      	ldr	r1, [pc, #16]	@ (800c834 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c822:	4805      	ldr	r0, [pc, #20]	@ (800c838 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c824:	f7ff fdad 	bl	800c382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c828:	4b02      	ldr	r3, [pc, #8]	@ (800c834 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3708      	adds	r7, #8
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	20000f30 	.word	0x20000f30
 800c838:	0800d910 	.word	0x0800d910

0800c83c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	4603      	mov	r3, r0
 800c844:	6039      	str	r1, [r7, #0]
 800c846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c848:	79fb      	ldrb	r3, [r7, #7]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d105      	bne.n	800c85a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c84e:	683a      	ldr	r2, [r7, #0]
 800c850:	4907      	ldr	r1, [pc, #28]	@ (800c870 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c852:	4808      	ldr	r0, [pc, #32]	@ (800c874 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c854:	f7ff fd95 	bl	800c382 <USBD_GetString>
 800c858:	e004      	b.n	800c864 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c85a:	683a      	ldr	r2, [r7, #0]
 800c85c:	4904      	ldr	r1, [pc, #16]	@ (800c870 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c85e:	4805      	ldr	r0, [pc, #20]	@ (800c874 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c860:	f7ff fd8f 	bl	800c382 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c864:	4b02      	ldr	r3, [pc, #8]	@ (800c870 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	20000f30 	.word	0x20000f30
 800c874:	0800d91c 	.word	0x0800d91c

0800c878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c87e:	4b0f      	ldr	r3, [pc, #60]	@ (800c8bc <Get_SerialNum+0x44>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c884:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c0 <Get_SerialNum+0x48>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c88a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8c4 <Get_SerialNum+0x4c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4413      	add	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d009      	beq.n	800c8b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c89e:	2208      	movs	r2, #8
 800c8a0:	4909      	ldr	r1, [pc, #36]	@ (800c8c8 <Get_SerialNum+0x50>)
 800c8a2:	68f8      	ldr	r0, [r7, #12]
 800c8a4:	f000 f814 	bl	800c8d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8a8:	2204      	movs	r2, #4
 800c8aa:	4908      	ldr	r1, [pc, #32]	@ (800c8cc <Get_SerialNum+0x54>)
 800c8ac:	68b8      	ldr	r0, [r7, #8]
 800c8ae:	f000 f80f 	bl	800c8d0 <IntToUnicode>
  }
}
 800c8b2:	bf00      	nop
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	1fff7590 	.word	0x1fff7590
 800c8c0:	1fff7594 	.word	0x1fff7594
 800c8c4:	1fff7598 	.word	0x1fff7598
 800c8c8:	2000016a 	.word	0x2000016a
 800c8cc:	2000017a 	.word	0x2000017a

0800c8d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b087      	sub	sp, #28
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	4613      	mov	r3, r2
 800c8dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	75fb      	strb	r3, [r7, #23]
 800c8e6:	e027      	b.n	800c938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	0f1b      	lsrs	r3, r3, #28
 800c8ec:	2b09      	cmp	r3, #9
 800c8ee:	d80b      	bhi.n	800c908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	0f1b      	lsrs	r3, r3, #28
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	005b      	lsls	r3, r3, #1
 800c8fa:	4619      	mov	r1, r3
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	440b      	add	r3, r1
 800c900:	3230      	adds	r2, #48	@ 0x30
 800c902:	b2d2      	uxtb	r2, r2
 800c904:	701a      	strb	r2, [r3, #0]
 800c906:	e00a      	b.n	800c91e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	0f1b      	lsrs	r3, r3, #28
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	7dfb      	ldrb	r3, [r7, #23]
 800c910:	005b      	lsls	r3, r3, #1
 800c912:	4619      	mov	r1, r3
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	440b      	add	r3, r1
 800c918:	3237      	adds	r2, #55	@ 0x37
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	011b      	lsls	r3, r3, #4
 800c922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c924:	7dfb      	ldrb	r3, [r7, #23]
 800c926:	005b      	lsls	r3, r3, #1
 800c928:	3301      	adds	r3, #1
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	2200      	movs	r2, #0
 800c930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	3301      	adds	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
 800c938:	7dfa      	ldrb	r2, [r7, #23]
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d3d3      	bcc.n	800c8e8 <IntToUnicode+0x18>
  }
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	371c      	adds	r7, #28
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
	...

0800c950 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b094      	sub	sp, #80	@ 0x50
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c958:	f107 030c 	add.w	r3, r7, #12
 800c95c:	2244      	movs	r2, #68	@ 0x44
 800c95e:	2100      	movs	r1, #0
 800c960:	4618      	mov	r0, r3
 800c962:	f000 fb2d 	bl	800cfc0 <memset>
  if(pcdHandle->Instance==USB)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a15      	ldr	r2, [pc, #84]	@ (800c9c0 <HAL_PCD_MspInit+0x70>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d123      	bne.n	800c9b8 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c970:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c974:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c976:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800c97a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c97c:	f107 030c 	add.w	r3, r7, #12
 800c980:	4618      	mov	r0, r3
 800c982:	f7fa f96f 	bl	8006c64 <HAL_RCCEx_PeriphCLKConfig>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800c98c:	f7f4 ffad 	bl	80018ea <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c990:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c4 <HAL_PCD_MspInit+0x74>)
 800c992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c994:	4a0b      	ldr	r2, [pc, #44]	@ (800c9c4 <HAL_PCD_MspInit+0x74>)
 800c996:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c99a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c99c:	4b09      	ldr	r3, [pc, #36]	@ (800c9c4 <HAL_PCD_MspInit+0x74>)
 800c99e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c9a4:	60bb      	str	r3, [r7, #8]
 800c9a6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	2100      	movs	r1, #0
 800c9ac:	2014      	movs	r0, #20
 800c9ae:	f7f6 fc0a 	bl	80031c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c9b2:	2014      	movs	r0, #20
 800c9b4:	f7f6 fc21 	bl	80031fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c9b8:	bf00      	nop
 800c9ba:	3750      	adds	r7, #80	@ 0x50
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	40005c00 	.word	0x40005c00
 800c9c4:	40021000 	.word	0x40021000

0800c9c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b082      	sub	sp, #8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800c9dc:	4619      	mov	r1, r3
 800c9de:	4610      	mov	r0, r2
 800c9e0:	f7fe fd32 	bl	800b448 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c9e4:	bf00      	nop
 800c9e6:	3708      	adds	r7, #8
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800c9fe:	78fa      	ldrb	r2, [r7, #3]
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	4613      	mov	r3, r2
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	00db      	lsls	r3, r3, #3
 800ca0a:	440b      	add	r3, r1
 800ca0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca10:	681a      	ldr	r2, [r3, #0]
 800ca12:	78fb      	ldrb	r3, [r7, #3]
 800ca14:	4619      	mov	r1, r3
 800ca16:	f7fe fd6c 	bl	800b4f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ca1a:	bf00      	nop
 800ca1c:	3708      	adds	r7, #8
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b082      	sub	sp, #8
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800ca34:	78fa      	ldrb	r2, [r7, #3]
 800ca36:	6879      	ldr	r1, [r7, #4]
 800ca38:	4613      	mov	r3, r2
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	00db      	lsls	r3, r3, #3
 800ca40:	440b      	add	r3, r1
 800ca42:	3324      	adds	r3, #36	@ 0x24
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	78fb      	ldrb	r3, [r7, #3]
 800ca48:	4619      	mov	r1, r3
 800ca4a:	f7fe fdb5 	bl	800b5b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ca4e:	bf00      	nop
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca64:	4618      	mov	r0, r3
 800ca66:	f7fe fec9 	bl	800b7fc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ca6a:	bf00      	nop
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	795b      	ldrb	r3, [r3, #5]
 800ca82:	2b02      	cmp	r3, #2
 800ca84:	d001      	beq.n	800ca8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca86:	f7f4 ff30 	bl	80018ea <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ca90:	7bfa      	ldrb	r2, [r7, #15]
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f7fe fe73 	bl	800b780 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7fe fe1f 	bl	800b6e4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b082      	sub	sp, #8
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7fe fe6e 	bl	800b7a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	7a5b      	ldrb	r3, [r3, #9]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d005      	beq.n	800cad8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cacc:	4b04      	ldr	r3, [pc, #16]	@ (800cae0 <HAL_PCD_SuspendCallback+0x30>)
 800cace:	691b      	ldr	r3, [r3, #16]
 800cad0:	4a03      	ldr	r2, [pc, #12]	@ (800cae0 <HAL_PCD_SuspendCallback+0x30>)
 800cad2:	f043 0306 	orr.w	r3, r3, #6
 800cad6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cad8:	bf00      	nop
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	e000ed00 	.word	0xe000ed00

0800cae4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7a5b      	ldrb	r3, [r3, #9]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d007      	beq.n	800cb04 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800caf4:	4b08      	ldr	r3, [pc, #32]	@ (800cb18 <HAL_PCD_ResumeCallback+0x34>)
 800caf6:	691b      	ldr	r3, [r3, #16]
 800caf8:	4a07      	ldr	r2, [pc, #28]	@ (800cb18 <HAL_PCD_ResumeCallback+0x34>)
 800cafa:	f023 0306 	bic.w	r3, r3, #6
 800cafe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cb00:	f000 f9f8 	bl	800cef4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe fe5e 	bl	800b7cc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	e000ed00 	.word	0xe000ed00

0800cb1c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b082      	sub	sp, #8
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cb24:	4a2b      	ldr	r2, [pc, #172]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a29      	ldr	r2, [pc, #164]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb30:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cb34:	4b27      	ldr	r3, [pc, #156]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb36:	4a28      	ldr	r2, [pc, #160]	@ (800cbd8 <USBD_LL_Init+0xbc>)
 800cb38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb3a:	4b26      	ldr	r3, [pc, #152]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb3c:	2208      	movs	r2, #8
 800cb3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb40:	4b24      	ldr	r3, [pc, #144]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb42:	2202      	movs	r2, #2
 800cb44:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb46:	4b23      	ldr	r3, [pc, #140]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb48:	2202      	movs	r2, #2
 800cb4a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cb4c:	4b21      	ldr	r3, [pc, #132]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb52:	4b20      	ldr	r3, [pc, #128]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb54:	2200      	movs	r2, #0
 800cb56:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb58:	4b1e      	ldr	r3, [pc, #120]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb5e:	4b1d      	ldr	r3, [pc, #116]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb64:	481b      	ldr	r0, [pc, #108]	@ (800cbd4 <USBD_LL_Init+0xb8>)
 800cb66:	f7f7 fd75 	bl	8004654 <HAL_PCD_Init>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cb70:	f7f4 febb 	bl	80018ea <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb7a:	2318      	movs	r3, #24
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	2100      	movs	r1, #0
 800cb80:	f7f9 fa30 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb8a:	2358      	movs	r3, #88	@ 0x58
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	2180      	movs	r1, #128	@ 0x80
 800cb90:	f7f9 fa28 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cb9a:	23c0      	movs	r3, #192	@ 0xc0
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2181      	movs	r1, #129	@ 0x81
 800cba0:	f7f9 fa20 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cbaa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800cbae:	2200      	movs	r2, #0
 800cbb0:	2101      	movs	r1, #1
 800cbb2:	f7f9 fa17 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cbbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	2182      	movs	r1, #130	@ 0x82
 800cbc4:	f7f9 fa0e 	bl	8005fe4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cbc8:	2300      	movs	r3, #0
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	20001130 	.word	0x20001130
 800cbd8:	40005c00 	.word	0x40005c00

0800cbdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7f7 fdfc 	bl	80047f0 <HAL_PCD_Start>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f000 f97e 	bl	800cf00 <USBD_Get_USB_Status>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc08:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3710      	adds	r7, #16
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}

0800cc12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc12:	b580      	push	{r7, lr}
 800cc14:	b084      	sub	sp, #16
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
 800cc1a:	4608      	mov	r0, r1
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	461a      	mov	r2, r3
 800cc20:	4603      	mov	r3, r0
 800cc22:	70fb      	strb	r3, [r7, #3]
 800cc24:	460b      	mov	r3, r1
 800cc26:	70bb      	strb	r3, [r7, #2]
 800cc28:	4613      	mov	r3, r2
 800cc2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc30:	2300      	movs	r3, #0
 800cc32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cc3a:	78bb      	ldrb	r3, [r7, #2]
 800cc3c:	883a      	ldrh	r2, [r7, #0]
 800cc3e:	78f9      	ldrb	r1, [r7, #3]
 800cc40:	f7f7 ff43 	bl	8004aca <HAL_PCD_EP_Open>
 800cc44:	4603      	mov	r3, r0
 800cc46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f000 f958 	bl	800cf00 <USBD_Get_USB_Status>
 800cc50:	4603      	mov	r3, r0
 800cc52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc54:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b084      	sub	sp, #16
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	460b      	mov	r3, r1
 800cc68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cc78:	78fa      	ldrb	r2, [r7, #3]
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7f7 ff83 	bl	8004b88 <HAL_PCD_EP_Close>
 800cc82:	4603      	mov	r3, r0
 800cc84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f000 f939 	bl	800cf00 <USBD_Get_USB_Status>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc92:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ccb6:	78fa      	ldrb	r2, [r7, #3]
 800ccb8:	4611      	mov	r1, r2
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7f8 f82c 	bl	8004d18 <HAL_PCD_EP_SetStall>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 f91a 	bl	800cf00 <USBD_Get_USB_Status>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	460b      	mov	r3, r1
 800cce4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ccf4:	78fa      	ldrb	r2, [r7, #3]
 800ccf6:	4611      	mov	r1, r2
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7f8 f85f 	bl	8004dbc <HAL_PCD_EP_ClrStall>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f000 f8fb 	bl	800cf00 <USBD_Get_USB_Status>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3710      	adds	r7, #16
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b085      	sub	sp, #20
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	da0b      	bge.n	800cd4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd34:	78fb      	ldrb	r3, [r7, #3]
 800cd36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd3a:	68f9      	ldr	r1, [r7, #12]
 800cd3c:	4613      	mov	r3, r2
 800cd3e:	009b      	lsls	r3, r3, #2
 800cd40:	4413      	add	r3, r2
 800cd42:	00db      	lsls	r3, r3, #3
 800cd44:	440b      	add	r3, r1
 800cd46:	3312      	adds	r3, #18
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	e00b      	b.n	800cd64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd4c:	78fb      	ldrb	r3, [r7, #3]
 800cd4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cd52:	68f9      	ldr	r1, [r7, #12]
 800cd54:	4613      	mov	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	440b      	add	r3, r1
 800cd5e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800cd62:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	460b      	mov	r3, r1
 800cd7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd8a:	78fa      	ldrb	r2, [r7, #3]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7f7 fe77 	bl	8004a82 <HAL_PCD_SetAddress>
 800cd94:	4603      	mov	r3, r0
 800cd96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 f8b0 	bl	800cf00 <USBD_Get_USB_Status>
 800cda0:	4603      	mov	r3, r0
 800cda2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b086      	sub	sp, #24
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	60f8      	str	r0, [r7, #12]
 800cdb6:	607a      	str	r2, [r7, #4]
 800cdb8:	603b      	str	r3, [r7, #0]
 800cdba:	460b      	mov	r3, r1
 800cdbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cdcc:	7af9      	ldrb	r1, [r7, #11]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	687a      	ldr	r2, [r7, #4]
 800cdd2:	f7f7 ff6a 	bl	8004caa <HAL_PCD_EP_Transmit>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdda:	7dfb      	ldrb	r3, [r7, #23]
 800cddc:	4618      	mov	r0, r3
 800cdde:	f000 f88f 	bl	800cf00 <USBD_Get_USB_Status>
 800cde2:	4603      	mov	r3, r0
 800cde4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cde6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3718      	adds	r7, #24
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}

0800cdf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	607a      	str	r2, [r7, #4]
 800cdfa:	603b      	str	r3, [r7, #0]
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce04:	2300      	movs	r3, #0
 800ce06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ce0e:	7af9      	ldrb	r1, [r7, #11]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	687a      	ldr	r2, [r7, #4]
 800ce14:	f7f7 ff00 	bl	8004c18 <HAL_PCD_EP_Receive>
 800ce18:	4603      	mov	r3, r0
 800ce1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce1c:	7dfb      	ldrb	r3, [r7, #23]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 f86e 	bl	800cf00 <USBD_Get_USB_Status>
 800ce24:	4603      	mov	r3, r0
 800ce26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce28:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3718      	adds	r7, #24
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}

0800ce32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce32:	b580      	push	{r7, lr}
 800ce34:	b082      	sub	sp, #8
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	6078      	str	r0, [r7, #4]
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce44:	78fa      	ldrb	r2, [r7, #3]
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f7 ff16 	bl	8004c7a <HAL_PCD_EP_GetRxCount>
 800ce4e:	4603      	mov	r3, r0
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <HAL_PCDEx_LPM_Callback+0x18>
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d013      	beq.n	800ce96 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ce6e:	e023      	b.n	800ceb8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	7a5b      	ldrb	r3, [r3, #9]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d007      	beq.n	800ce88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce78:	f000 f83c 	bl	800cef4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce7c:	4b10      	ldr	r3, [pc, #64]	@ (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	4a0f      	ldr	r2, [pc, #60]	@ (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce82:	f023 0306 	bic.w	r3, r3, #6
 800ce86:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fe fc9c 	bl	800b7cc <USBD_LL_Resume>
    break;
 800ce94:	e010      	b.n	800ceb8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fc7f 	bl	800b7a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7a5b      	ldrb	r3, [r3, #9]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceaa:	4b05      	ldr	r3, [pc, #20]	@ (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	4a04      	ldr	r2, [pc, #16]	@ (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ceb0:	f043 0306 	orr.w	r3, r3, #6
 800ceb4:	6113      	str	r3, [r2, #16]
    break;
 800ceb6:	bf00      	nop
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	e000ed00 	.word	0xe000ed00

0800cec4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cecc:	4b03      	ldr	r3, [pc, #12]	@ (800cedc <USBD_static_malloc+0x18>)
}
 800cece:	4618      	mov	r0, r3
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	2000140c 	.word	0x2000140c

0800cee0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]

}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cef8:	f7f4 fca8 	bl	800184c <SystemClock_Config>
}
 800cefc:	bf00      	nop
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	2b03      	cmp	r3, #3
 800cf12:	d817      	bhi.n	800cf44 <USBD_Get_USB_Status+0x44>
 800cf14:	a201      	add	r2, pc, #4	@ (adr r2, 800cf1c <USBD_Get_USB_Status+0x1c>)
 800cf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1a:	bf00      	nop
 800cf1c:	0800cf2d 	.word	0x0800cf2d
 800cf20:	0800cf33 	.word	0x0800cf33
 800cf24:	0800cf39 	.word	0x0800cf39
 800cf28:	0800cf3f 	.word	0x0800cf3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf30:	e00b      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf32:	2303      	movs	r3, #3
 800cf34:	73fb      	strb	r3, [r7, #15]
    break;
 800cf36:	e008      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf3c:	e005      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	73fb      	strb	r3, [r7, #15]
    break;
 800cf42:	e002      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf44:	2303      	movs	r3, #3
 800cf46:	73fb      	strb	r3, [r7, #15]
    break;
 800cf48:	bf00      	nop
  }
  return usb_status;
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <sniprintf>:
 800cf58:	b40c      	push	{r2, r3}
 800cf5a:	b530      	push	{r4, r5, lr}
 800cf5c:	4b17      	ldr	r3, [pc, #92]	@ (800cfbc <sniprintf+0x64>)
 800cf5e:	1e0c      	subs	r4, r1, #0
 800cf60:	681d      	ldr	r5, [r3, #0]
 800cf62:	b09d      	sub	sp, #116	@ 0x74
 800cf64:	da08      	bge.n	800cf78 <sniprintf+0x20>
 800cf66:	238b      	movs	r3, #139	@ 0x8b
 800cf68:	602b      	str	r3, [r5, #0]
 800cf6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6e:	b01d      	add	sp, #116	@ 0x74
 800cf70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf74:	b002      	add	sp, #8
 800cf76:	4770      	bx	lr
 800cf78:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cf7c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cf80:	bf14      	ite	ne
 800cf82:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cf86:	4623      	moveq	r3, r4
 800cf88:	9304      	str	r3, [sp, #16]
 800cf8a:	9307      	str	r3, [sp, #28]
 800cf8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cf90:	9002      	str	r0, [sp, #8]
 800cf92:	9006      	str	r0, [sp, #24]
 800cf94:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cf98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cf9a:	ab21      	add	r3, sp, #132	@ 0x84
 800cf9c:	a902      	add	r1, sp, #8
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	9301      	str	r3, [sp, #4]
 800cfa2:	f000 f995 	bl	800d2d0 <_svfiprintf_r>
 800cfa6:	1c43      	adds	r3, r0, #1
 800cfa8:	bfbc      	itt	lt
 800cfaa:	238b      	movlt	r3, #139	@ 0x8b
 800cfac:	602b      	strlt	r3, [r5, #0]
 800cfae:	2c00      	cmp	r4, #0
 800cfb0:	d0dd      	beq.n	800cf6e <sniprintf+0x16>
 800cfb2:	9b02      	ldr	r3, [sp, #8]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	701a      	strb	r2, [r3, #0]
 800cfb8:	e7d9      	b.n	800cf6e <sniprintf+0x16>
 800cfba:	bf00      	nop
 800cfbc:	20000184 	.word	0x20000184

0800cfc0 <memset>:
 800cfc0:	4402      	add	r2, r0
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d100      	bne.n	800cfca <memset+0xa>
 800cfc8:	4770      	bx	lr
 800cfca:	f803 1b01 	strb.w	r1, [r3], #1
 800cfce:	e7f9      	b.n	800cfc4 <memset+0x4>

0800cfd0 <__errno>:
 800cfd0:	4b01      	ldr	r3, [pc, #4]	@ (800cfd8 <__errno+0x8>)
 800cfd2:	6818      	ldr	r0, [r3, #0]
 800cfd4:	4770      	bx	lr
 800cfd6:	bf00      	nop
 800cfd8:	20000184 	.word	0x20000184

0800cfdc <__libc_init_array>:
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	4d0d      	ldr	r5, [pc, #52]	@ (800d014 <__libc_init_array+0x38>)
 800cfe0:	4c0d      	ldr	r4, [pc, #52]	@ (800d018 <__libc_init_array+0x3c>)
 800cfe2:	1b64      	subs	r4, r4, r5
 800cfe4:	10a4      	asrs	r4, r4, #2
 800cfe6:	2600      	movs	r6, #0
 800cfe8:	42a6      	cmp	r6, r4
 800cfea:	d109      	bne.n	800d000 <__libc_init_array+0x24>
 800cfec:	4d0b      	ldr	r5, [pc, #44]	@ (800d01c <__libc_init_array+0x40>)
 800cfee:	4c0c      	ldr	r4, [pc, #48]	@ (800d020 <__libc_init_array+0x44>)
 800cff0:	f000 fc66 	bl	800d8c0 <_init>
 800cff4:	1b64      	subs	r4, r4, r5
 800cff6:	10a4      	asrs	r4, r4, #2
 800cff8:	2600      	movs	r6, #0
 800cffa:	42a6      	cmp	r6, r4
 800cffc:	d105      	bne.n	800d00a <__libc_init_array+0x2e>
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	f855 3b04 	ldr.w	r3, [r5], #4
 800d004:	4798      	blx	r3
 800d006:	3601      	adds	r6, #1
 800d008:	e7ee      	b.n	800cfe8 <__libc_init_array+0xc>
 800d00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d00e:	4798      	blx	r3
 800d010:	3601      	adds	r6, #1
 800d012:	e7f2      	b.n	800cffa <__libc_init_array+0x1e>
 800d014:	0800d9a8 	.word	0x0800d9a8
 800d018:	0800d9a8 	.word	0x0800d9a8
 800d01c:	0800d9a8 	.word	0x0800d9a8
 800d020:	0800d9ac 	.word	0x0800d9ac

0800d024 <__retarget_lock_acquire_recursive>:
 800d024:	4770      	bx	lr

0800d026 <__retarget_lock_release_recursive>:
 800d026:	4770      	bx	lr

0800d028 <_free_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4605      	mov	r5, r0
 800d02c:	2900      	cmp	r1, #0
 800d02e:	d041      	beq.n	800d0b4 <_free_r+0x8c>
 800d030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d034:	1f0c      	subs	r4, r1, #4
 800d036:	2b00      	cmp	r3, #0
 800d038:	bfb8      	it	lt
 800d03a:	18e4      	addlt	r4, r4, r3
 800d03c:	f000 f8e0 	bl	800d200 <__malloc_lock>
 800d040:	4a1d      	ldr	r2, [pc, #116]	@ (800d0b8 <_free_r+0x90>)
 800d042:	6813      	ldr	r3, [r2, #0]
 800d044:	b933      	cbnz	r3, 800d054 <_free_r+0x2c>
 800d046:	6063      	str	r3, [r4, #4]
 800d048:	6014      	str	r4, [r2, #0]
 800d04a:	4628      	mov	r0, r5
 800d04c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d050:	f000 b8dc 	b.w	800d20c <__malloc_unlock>
 800d054:	42a3      	cmp	r3, r4
 800d056:	d908      	bls.n	800d06a <_free_r+0x42>
 800d058:	6820      	ldr	r0, [r4, #0]
 800d05a:	1821      	adds	r1, r4, r0
 800d05c:	428b      	cmp	r3, r1
 800d05e:	bf01      	itttt	eq
 800d060:	6819      	ldreq	r1, [r3, #0]
 800d062:	685b      	ldreq	r3, [r3, #4]
 800d064:	1809      	addeq	r1, r1, r0
 800d066:	6021      	streq	r1, [r4, #0]
 800d068:	e7ed      	b.n	800d046 <_free_r+0x1e>
 800d06a:	461a      	mov	r2, r3
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	b10b      	cbz	r3, 800d074 <_free_r+0x4c>
 800d070:	42a3      	cmp	r3, r4
 800d072:	d9fa      	bls.n	800d06a <_free_r+0x42>
 800d074:	6811      	ldr	r1, [r2, #0]
 800d076:	1850      	adds	r0, r2, r1
 800d078:	42a0      	cmp	r0, r4
 800d07a:	d10b      	bne.n	800d094 <_free_r+0x6c>
 800d07c:	6820      	ldr	r0, [r4, #0]
 800d07e:	4401      	add	r1, r0
 800d080:	1850      	adds	r0, r2, r1
 800d082:	4283      	cmp	r3, r0
 800d084:	6011      	str	r1, [r2, #0]
 800d086:	d1e0      	bne.n	800d04a <_free_r+0x22>
 800d088:	6818      	ldr	r0, [r3, #0]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	6053      	str	r3, [r2, #4]
 800d08e:	4408      	add	r0, r1
 800d090:	6010      	str	r0, [r2, #0]
 800d092:	e7da      	b.n	800d04a <_free_r+0x22>
 800d094:	d902      	bls.n	800d09c <_free_r+0x74>
 800d096:	230c      	movs	r3, #12
 800d098:	602b      	str	r3, [r5, #0]
 800d09a:	e7d6      	b.n	800d04a <_free_r+0x22>
 800d09c:	6820      	ldr	r0, [r4, #0]
 800d09e:	1821      	adds	r1, r4, r0
 800d0a0:	428b      	cmp	r3, r1
 800d0a2:	bf04      	itt	eq
 800d0a4:	6819      	ldreq	r1, [r3, #0]
 800d0a6:	685b      	ldreq	r3, [r3, #4]
 800d0a8:	6063      	str	r3, [r4, #4]
 800d0aa:	bf04      	itt	eq
 800d0ac:	1809      	addeq	r1, r1, r0
 800d0ae:	6021      	streq	r1, [r4, #0]
 800d0b0:	6054      	str	r4, [r2, #4]
 800d0b2:	e7ca      	b.n	800d04a <_free_r+0x22>
 800d0b4:	bd38      	pop	{r3, r4, r5, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20001770 	.word	0x20001770

0800d0bc <sbrk_aligned>:
 800d0bc:	b570      	push	{r4, r5, r6, lr}
 800d0be:	4e0f      	ldr	r6, [pc, #60]	@ (800d0fc <sbrk_aligned+0x40>)
 800d0c0:	460c      	mov	r4, r1
 800d0c2:	6831      	ldr	r1, [r6, #0]
 800d0c4:	4605      	mov	r5, r0
 800d0c6:	b911      	cbnz	r1, 800d0ce <sbrk_aligned+0x12>
 800d0c8:	f000 fba6 	bl	800d818 <_sbrk_r>
 800d0cc:	6030      	str	r0, [r6, #0]
 800d0ce:	4621      	mov	r1, r4
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	f000 fba1 	bl	800d818 <_sbrk_r>
 800d0d6:	1c43      	adds	r3, r0, #1
 800d0d8:	d103      	bne.n	800d0e2 <sbrk_aligned+0x26>
 800d0da:	f04f 34ff 	mov.w	r4, #4294967295
 800d0de:	4620      	mov	r0, r4
 800d0e0:	bd70      	pop	{r4, r5, r6, pc}
 800d0e2:	1cc4      	adds	r4, r0, #3
 800d0e4:	f024 0403 	bic.w	r4, r4, #3
 800d0e8:	42a0      	cmp	r0, r4
 800d0ea:	d0f8      	beq.n	800d0de <sbrk_aligned+0x22>
 800d0ec:	1a21      	subs	r1, r4, r0
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	f000 fb92 	bl	800d818 <_sbrk_r>
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d1f2      	bne.n	800d0de <sbrk_aligned+0x22>
 800d0f8:	e7ef      	b.n	800d0da <sbrk_aligned+0x1e>
 800d0fa:	bf00      	nop
 800d0fc:	2000176c 	.word	0x2000176c

0800d100 <_malloc_r>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	1ccd      	adds	r5, r1, #3
 800d106:	f025 0503 	bic.w	r5, r5, #3
 800d10a:	3508      	adds	r5, #8
 800d10c:	2d0c      	cmp	r5, #12
 800d10e:	bf38      	it	cc
 800d110:	250c      	movcc	r5, #12
 800d112:	2d00      	cmp	r5, #0
 800d114:	4606      	mov	r6, r0
 800d116:	db01      	blt.n	800d11c <_malloc_r+0x1c>
 800d118:	42a9      	cmp	r1, r5
 800d11a:	d904      	bls.n	800d126 <_malloc_r+0x26>
 800d11c:	230c      	movs	r3, #12
 800d11e:	6033      	str	r3, [r6, #0]
 800d120:	2000      	movs	r0, #0
 800d122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1fc <_malloc_r+0xfc>
 800d12a:	f000 f869 	bl	800d200 <__malloc_lock>
 800d12e:	f8d8 3000 	ldr.w	r3, [r8]
 800d132:	461c      	mov	r4, r3
 800d134:	bb44      	cbnz	r4, 800d188 <_malloc_r+0x88>
 800d136:	4629      	mov	r1, r5
 800d138:	4630      	mov	r0, r6
 800d13a:	f7ff ffbf 	bl	800d0bc <sbrk_aligned>
 800d13e:	1c43      	adds	r3, r0, #1
 800d140:	4604      	mov	r4, r0
 800d142:	d158      	bne.n	800d1f6 <_malloc_r+0xf6>
 800d144:	f8d8 4000 	ldr.w	r4, [r8]
 800d148:	4627      	mov	r7, r4
 800d14a:	2f00      	cmp	r7, #0
 800d14c:	d143      	bne.n	800d1d6 <_malloc_r+0xd6>
 800d14e:	2c00      	cmp	r4, #0
 800d150:	d04b      	beq.n	800d1ea <_malloc_r+0xea>
 800d152:	6823      	ldr	r3, [r4, #0]
 800d154:	4639      	mov	r1, r7
 800d156:	4630      	mov	r0, r6
 800d158:	eb04 0903 	add.w	r9, r4, r3
 800d15c:	f000 fb5c 	bl	800d818 <_sbrk_r>
 800d160:	4581      	cmp	r9, r0
 800d162:	d142      	bne.n	800d1ea <_malloc_r+0xea>
 800d164:	6821      	ldr	r1, [r4, #0]
 800d166:	1a6d      	subs	r5, r5, r1
 800d168:	4629      	mov	r1, r5
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7ff ffa6 	bl	800d0bc <sbrk_aligned>
 800d170:	3001      	adds	r0, #1
 800d172:	d03a      	beq.n	800d1ea <_malloc_r+0xea>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	442b      	add	r3, r5
 800d178:	6023      	str	r3, [r4, #0]
 800d17a:	f8d8 3000 	ldr.w	r3, [r8]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	bb62      	cbnz	r2, 800d1dc <_malloc_r+0xdc>
 800d182:	f8c8 7000 	str.w	r7, [r8]
 800d186:	e00f      	b.n	800d1a8 <_malloc_r+0xa8>
 800d188:	6822      	ldr	r2, [r4, #0]
 800d18a:	1b52      	subs	r2, r2, r5
 800d18c:	d420      	bmi.n	800d1d0 <_malloc_r+0xd0>
 800d18e:	2a0b      	cmp	r2, #11
 800d190:	d917      	bls.n	800d1c2 <_malloc_r+0xc2>
 800d192:	1961      	adds	r1, r4, r5
 800d194:	42a3      	cmp	r3, r4
 800d196:	6025      	str	r5, [r4, #0]
 800d198:	bf18      	it	ne
 800d19a:	6059      	strne	r1, [r3, #4]
 800d19c:	6863      	ldr	r3, [r4, #4]
 800d19e:	bf08      	it	eq
 800d1a0:	f8c8 1000 	streq.w	r1, [r8]
 800d1a4:	5162      	str	r2, [r4, r5]
 800d1a6:	604b      	str	r3, [r1, #4]
 800d1a8:	4630      	mov	r0, r6
 800d1aa:	f000 f82f 	bl	800d20c <__malloc_unlock>
 800d1ae:	f104 000b 	add.w	r0, r4, #11
 800d1b2:	1d23      	adds	r3, r4, #4
 800d1b4:	f020 0007 	bic.w	r0, r0, #7
 800d1b8:	1ac2      	subs	r2, r0, r3
 800d1ba:	bf1c      	itt	ne
 800d1bc:	1a1b      	subne	r3, r3, r0
 800d1be:	50a3      	strne	r3, [r4, r2]
 800d1c0:	e7af      	b.n	800d122 <_malloc_r+0x22>
 800d1c2:	6862      	ldr	r2, [r4, #4]
 800d1c4:	42a3      	cmp	r3, r4
 800d1c6:	bf0c      	ite	eq
 800d1c8:	f8c8 2000 	streq.w	r2, [r8]
 800d1cc:	605a      	strne	r2, [r3, #4]
 800d1ce:	e7eb      	b.n	800d1a8 <_malloc_r+0xa8>
 800d1d0:	4623      	mov	r3, r4
 800d1d2:	6864      	ldr	r4, [r4, #4]
 800d1d4:	e7ae      	b.n	800d134 <_malloc_r+0x34>
 800d1d6:	463c      	mov	r4, r7
 800d1d8:	687f      	ldr	r7, [r7, #4]
 800d1da:	e7b6      	b.n	800d14a <_malloc_r+0x4a>
 800d1dc:	461a      	mov	r2, r3
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	42a3      	cmp	r3, r4
 800d1e2:	d1fb      	bne.n	800d1dc <_malloc_r+0xdc>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	6053      	str	r3, [r2, #4]
 800d1e8:	e7de      	b.n	800d1a8 <_malloc_r+0xa8>
 800d1ea:	230c      	movs	r3, #12
 800d1ec:	6033      	str	r3, [r6, #0]
 800d1ee:	4630      	mov	r0, r6
 800d1f0:	f000 f80c 	bl	800d20c <__malloc_unlock>
 800d1f4:	e794      	b.n	800d120 <_malloc_r+0x20>
 800d1f6:	6005      	str	r5, [r0, #0]
 800d1f8:	e7d6      	b.n	800d1a8 <_malloc_r+0xa8>
 800d1fa:	bf00      	nop
 800d1fc:	20001770 	.word	0x20001770

0800d200 <__malloc_lock>:
 800d200:	4801      	ldr	r0, [pc, #4]	@ (800d208 <__malloc_lock+0x8>)
 800d202:	f7ff bf0f 	b.w	800d024 <__retarget_lock_acquire_recursive>
 800d206:	bf00      	nop
 800d208:	20001768 	.word	0x20001768

0800d20c <__malloc_unlock>:
 800d20c:	4801      	ldr	r0, [pc, #4]	@ (800d214 <__malloc_unlock+0x8>)
 800d20e:	f7ff bf0a 	b.w	800d026 <__retarget_lock_release_recursive>
 800d212:	bf00      	nop
 800d214:	20001768 	.word	0x20001768

0800d218 <__ssputs_r>:
 800d218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d21c:	688e      	ldr	r6, [r1, #8]
 800d21e:	461f      	mov	r7, r3
 800d220:	42be      	cmp	r6, r7
 800d222:	680b      	ldr	r3, [r1, #0]
 800d224:	4682      	mov	sl, r0
 800d226:	460c      	mov	r4, r1
 800d228:	4690      	mov	r8, r2
 800d22a:	d82d      	bhi.n	800d288 <__ssputs_r+0x70>
 800d22c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d230:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d234:	d026      	beq.n	800d284 <__ssputs_r+0x6c>
 800d236:	6965      	ldr	r5, [r4, #20]
 800d238:	6909      	ldr	r1, [r1, #16]
 800d23a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d23e:	eba3 0901 	sub.w	r9, r3, r1
 800d242:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d246:	1c7b      	adds	r3, r7, #1
 800d248:	444b      	add	r3, r9
 800d24a:	106d      	asrs	r5, r5, #1
 800d24c:	429d      	cmp	r5, r3
 800d24e:	bf38      	it	cc
 800d250:	461d      	movcc	r5, r3
 800d252:	0553      	lsls	r3, r2, #21
 800d254:	d527      	bpl.n	800d2a6 <__ssputs_r+0x8e>
 800d256:	4629      	mov	r1, r5
 800d258:	f7ff ff52 	bl	800d100 <_malloc_r>
 800d25c:	4606      	mov	r6, r0
 800d25e:	b360      	cbz	r0, 800d2ba <__ssputs_r+0xa2>
 800d260:	6921      	ldr	r1, [r4, #16]
 800d262:	464a      	mov	r2, r9
 800d264:	f000 fae8 	bl	800d838 <memcpy>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	6126      	str	r6, [r4, #16]
 800d276:	6165      	str	r5, [r4, #20]
 800d278:	444e      	add	r6, r9
 800d27a:	eba5 0509 	sub.w	r5, r5, r9
 800d27e:	6026      	str	r6, [r4, #0]
 800d280:	60a5      	str	r5, [r4, #8]
 800d282:	463e      	mov	r6, r7
 800d284:	42be      	cmp	r6, r7
 800d286:	d900      	bls.n	800d28a <__ssputs_r+0x72>
 800d288:	463e      	mov	r6, r7
 800d28a:	6820      	ldr	r0, [r4, #0]
 800d28c:	4632      	mov	r2, r6
 800d28e:	4641      	mov	r1, r8
 800d290:	f000 faa8 	bl	800d7e4 <memmove>
 800d294:	68a3      	ldr	r3, [r4, #8]
 800d296:	1b9b      	subs	r3, r3, r6
 800d298:	60a3      	str	r3, [r4, #8]
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	4433      	add	r3, r6
 800d29e:	6023      	str	r3, [r4, #0]
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2a6:	462a      	mov	r2, r5
 800d2a8:	f000 fad4 	bl	800d854 <_realloc_r>
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d1e0      	bne.n	800d274 <__ssputs_r+0x5c>
 800d2b2:	6921      	ldr	r1, [r4, #16]
 800d2b4:	4650      	mov	r0, sl
 800d2b6:	f7ff feb7 	bl	800d028 <_free_r>
 800d2ba:	230c      	movs	r3, #12
 800d2bc:	f8ca 3000 	str.w	r3, [sl]
 800d2c0:	89a3      	ldrh	r3, [r4, #12]
 800d2c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2cc:	e7e9      	b.n	800d2a2 <__ssputs_r+0x8a>
	...

0800d2d0 <_svfiprintf_r>:
 800d2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d4:	4698      	mov	r8, r3
 800d2d6:	898b      	ldrh	r3, [r1, #12]
 800d2d8:	061b      	lsls	r3, r3, #24
 800d2da:	b09d      	sub	sp, #116	@ 0x74
 800d2dc:	4607      	mov	r7, r0
 800d2de:	460d      	mov	r5, r1
 800d2e0:	4614      	mov	r4, r2
 800d2e2:	d510      	bpl.n	800d306 <_svfiprintf_r+0x36>
 800d2e4:	690b      	ldr	r3, [r1, #16]
 800d2e6:	b973      	cbnz	r3, 800d306 <_svfiprintf_r+0x36>
 800d2e8:	2140      	movs	r1, #64	@ 0x40
 800d2ea:	f7ff ff09 	bl	800d100 <_malloc_r>
 800d2ee:	6028      	str	r0, [r5, #0]
 800d2f0:	6128      	str	r0, [r5, #16]
 800d2f2:	b930      	cbnz	r0, 800d302 <_svfiprintf_r+0x32>
 800d2f4:	230c      	movs	r3, #12
 800d2f6:	603b      	str	r3, [r7, #0]
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2fc:	b01d      	add	sp, #116	@ 0x74
 800d2fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d302:	2340      	movs	r3, #64	@ 0x40
 800d304:	616b      	str	r3, [r5, #20]
 800d306:	2300      	movs	r3, #0
 800d308:	9309      	str	r3, [sp, #36]	@ 0x24
 800d30a:	2320      	movs	r3, #32
 800d30c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d310:	f8cd 800c 	str.w	r8, [sp, #12]
 800d314:	2330      	movs	r3, #48	@ 0x30
 800d316:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d4b4 <_svfiprintf_r+0x1e4>
 800d31a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d31e:	f04f 0901 	mov.w	r9, #1
 800d322:	4623      	mov	r3, r4
 800d324:	469a      	mov	sl, r3
 800d326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d32a:	b10a      	cbz	r2, 800d330 <_svfiprintf_r+0x60>
 800d32c:	2a25      	cmp	r2, #37	@ 0x25
 800d32e:	d1f9      	bne.n	800d324 <_svfiprintf_r+0x54>
 800d330:	ebba 0b04 	subs.w	fp, sl, r4
 800d334:	d00b      	beq.n	800d34e <_svfiprintf_r+0x7e>
 800d336:	465b      	mov	r3, fp
 800d338:	4622      	mov	r2, r4
 800d33a:	4629      	mov	r1, r5
 800d33c:	4638      	mov	r0, r7
 800d33e:	f7ff ff6b 	bl	800d218 <__ssputs_r>
 800d342:	3001      	adds	r0, #1
 800d344:	f000 80a7 	beq.w	800d496 <_svfiprintf_r+0x1c6>
 800d348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d34a:	445a      	add	r2, fp
 800d34c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d34e:	f89a 3000 	ldrb.w	r3, [sl]
 800d352:	2b00      	cmp	r3, #0
 800d354:	f000 809f 	beq.w	800d496 <_svfiprintf_r+0x1c6>
 800d358:	2300      	movs	r3, #0
 800d35a:	f04f 32ff 	mov.w	r2, #4294967295
 800d35e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d362:	f10a 0a01 	add.w	sl, sl, #1
 800d366:	9304      	str	r3, [sp, #16]
 800d368:	9307      	str	r3, [sp, #28]
 800d36a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d36e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d370:	4654      	mov	r4, sl
 800d372:	2205      	movs	r2, #5
 800d374:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d378:	484e      	ldr	r0, [pc, #312]	@ (800d4b4 <_svfiprintf_r+0x1e4>)
 800d37a:	f7f2 ff51 	bl	8000220 <memchr>
 800d37e:	9a04      	ldr	r2, [sp, #16]
 800d380:	b9d8      	cbnz	r0, 800d3ba <_svfiprintf_r+0xea>
 800d382:	06d0      	lsls	r0, r2, #27
 800d384:	bf44      	itt	mi
 800d386:	2320      	movmi	r3, #32
 800d388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d38c:	0711      	lsls	r1, r2, #28
 800d38e:	bf44      	itt	mi
 800d390:	232b      	movmi	r3, #43	@ 0x2b
 800d392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d396:	f89a 3000 	ldrb.w	r3, [sl]
 800d39a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d39c:	d015      	beq.n	800d3ca <_svfiprintf_r+0xfa>
 800d39e:	9a07      	ldr	r2, [sp, #28]
 800d3a0:	4654      	mov	r4, sl
 800d3a2:	2000      	movs	r0, #0
 800d3a4:	f04f 0c0a 	mov.w	ip, #10
 800d3a8:	4621      	mov	r1, r4
 800d3aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ae:	3b30      	subs	r3, #48	@ 0x30
 800d3b0:	2b09      	cmp	r3, #9
 800d3b2:	d94b      	bls.n	800d44c <_svfiprintf_r+0x17c>
 800d3b4:	b1b0      	cbz	r0, 800d3e4 <_svfiprintf_r+0x114>
 800d3b6:	9207      	str	r2, [sp, #28]
 800d3b8:	e014      	b.n	800d3e4 <_svfiprintf_r+0x114>
 800d3ba:	eba0 0308 	sub.w	r3, r0, r8
 800d3be:	fa09 f303 	lsl.w	r3, r9, r3
 800d3c2:	4313      	orrs	r3, r2
 800d3c4:	9304      	str	r3, [sp, #16]
 800d3c6:	46a2      	mov	sl, r4
 800d3c8:	e7d2      	b.n	800d370 <_svfiprintf_r+0xa0>
 800d3ca:	9b03      	ldr	r3, [sp, #12]
 800d3cc:	1d19      	adds	r1, r3, #4
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	9103      	str	r1, [sp, #12]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	bfbb      	ittet	lt
 800d3d6:	425b      	neglt	r3, r3
 800d3d8:	f042 0202 	orrlt.w	r2, r2, #2
 800d3dc:	9307      	strge	r3, [sp, #28]
 800d3de:	9307      	strlt	r3, [sp, #28]
 800d3e0:	bfb8      	it	lt
 800d3e2:	9204      	strlt	r2, [sp, #16]
 800d3e4:	7823      	ldrb	r3, [r4, #0]
 800d3e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3e8:	d10a      	bne.n	800d400 <_svfiprintf_r+0x130>
 800d3ea:	7863      	ldrb	r3, [r4, #1]
 800d3ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3ee:	d132      	bne.n	800d456 <_svfiprintf_r+0x186>
 800d3f0:	9b03      	ldr	r3, [sp, #12]
 800d3f2:	1d1a      	adds	r2, r3, #4
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	9203      	str	r2, [sp, #12]
 800d3f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d3fc:	3402      	adds	r4, #2
 800d3fe:	9305      	str	r3, [sp, #20]
 800d400:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d4c4 <_svfiprintf_r+0x1f4>
 800d404:	7821      	ldrb	r1, [r4, #0]
 800d406:	2203      	movs	r2, #3
 800d408:	4650      	mov	r0, sl
 800d40a:	f7f2 ff09 	bl	8000220 <memchr>
 800d40e:	b138      	cbz	r0, 800d420 <_svfiprintf_r+0x150>
 800d410:	9b04      	ldr	r3, [sp, #16]
 800d412:	eba0 000a 	sub.w	r0, r0, sl
 800d416:	2240      	movs	r2, #64	@ 0x40
 800d418:	4082      	lsls	r2, r0
 800d41a:	4313      	orrs	r3, r2
 800d41c:	3401      	adds	r4, #1
 800d41e:	9304      	str	r3, [sp, #16]
 800d420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d424:	4824      	ldr	r0, [pc, #144]	@ (800d4b8 <_svfiprintf_r+0x1e8>)
 800d426:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d42a:	2206      	movs	r2, #6
 800d42c:	f7f2 fef8 	bl	8000220 <memchr>
 800d430:	2800      	cmp	r0, #0
 800d432:	d036      	beq.n	800d4a2 <_svfiprintf_r+0x1d2>
 800d434:	4b21      	ldr	r3, [pc, #132]	@ (800d4bc <_svfiprintf_r+0x1ec>)
 800d436:	bb1b      	cbnz	r3, 800d480 <_svfiprintf_r+0x1b0>
 800d438:	9b03      	ldr	r3, [sp, #12]
 800d43a:	3307      	adds	r3, #7
 800d43c:	f023 0307 	bic.w	r3, r3, #7
 800d440:	3308      	adds	r3, #8
 800d442:	9303      	str	r3, [sp, #12]
 800d444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d446:	4433      	add	r3, r6
 800d448:	9309      	str	r3, [sp, #36]	@ 0x24
 800d44a:	e76a      	b.n	800d322 <_svfiprintf_r+0x52>
 800d44c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d450:	460c      	mov	r4, r1
 800d452:	2001      	movs	r0, #1
 800d454:	e7a8      	b.n	800d3a8 <_svfiprintf_r+0xd8>
 800d456:	2300      	movs	r3, #0
 800d458:	3401      	adds	r4, #1
 800d45a:	9305      	str	r3, [sp, #20]
 800d45c:	4619      	mov	r1, r3
 800d45e:	f04f 0c0a 	mov.w	ip, #10
 800d462:	4620      	mov	r0, r4
 800d464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d468:	3a30      	subs	r2, #48	@ 0x30
 800d46a:	2a09      	cmp	r2, #9
 800d46c:	d903      	bls.n	800d476 <_svfiprintf_r+0x1a6>
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d0c6      	beq.n	800d400 <_svfiprintf_r+0x130>
 800d472:	9105      	str	r1, [sp, #20]
 800d474:	e7c4      	b.n	800d400 <_svfiprintf_r+0x130>
 800d476:	fb0c 2101 	mla	r1, ip, r1, r2
 800d47a:	4604      	mov	r4, r0
 800d47c:	2301      	movs	r3, #1
 800d47e:	e7f0      	b.n	800d462 <_svfiprintf_r+0x192>
 800d480:	ab03      	add	r3, sp, #12
 800d482:	9300      	str	r3, [sp, #0]
 800d484:	462a      	mov	r2, r5
 800d486:	4b0e      	ldr	r3, [pc, #56]	@ (800d4c0 <_svfiprintf_r+0x1f0>)
 800d488:	a904      	add	r1, sp, #16
 800d48a:	4638      	mov	r0, r7
 800d48c:	f3af 8000 	nop.w
 800d490:	1c42      	adds	r2, r0, #1
 800d492:	4606      	mov	r6, r0
 800d494:	d1d6      	bne.n	800d444 <_svfiprintf_r+0x174>
 800d496:	89ab      	ldrh	r3, [r5, #12]
 800d498:	065b      	lsls	r3, r3, #25
 800d49a:	f53f af2d 	bmi.w	800d2f8 <_svfiprintf_r+0x28>
 800d49e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4a0:	e72c      	b.n	800d2fc <_svfiprintf_r+0x2c>
 800d4a2:	ab03      	add	r3, sp, #12
 800d4a4:	9300      	str	r3, [sp, #0]
 800d4a6:	462a      	mov	r2, r5
 800d4a8:	4b05      	ldr	r3, [pc, #20]	@ (800d4c0 <_svfiprintf_r+0x1f0>)
 800d4aa:	a904      	add	r1, sp, #16
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f000 f879 	bl	800d5a4 <_printf_i>
 800d4b2:	e7ed      	b.n	800d490 <_svfiprintf_r+0x1c0>
 800d4b4:	0800d96c 	.word	0x0800d96c
 800d4b8:	0800d976 	.word	0x0800d976
 800d4bc:	00000000 	.word	0x00000000
 800d4c0:	0800d219 	.word	0x0800d219
 800d4c4:	0800d972 	.word	0x0800d972

0800d4c8 <_printf_common>:
 800d4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4cc:	4616      	mov	r6, r2
 800d4ce:	4698      	mov	r8, r3
 800d4d0:	688a      	ldr	r2, [r1, #8]
 800d4d2:	690b      	ldr	r3, [r1, #16]
 800d4d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	bfb8      	it	lt
 800d4dc:	4613      	movlt	r3, r2
 800d4de:	6033      	str	r3, [r6, #0]
 800d4e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4e4:	4607      	mov	r7, r0
 800d4e6:	460c      	mov	r4, r1
 800d4e8:	b10a      	cbz	r2, 800d4ee <_printf_common+0x26>
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	6033      	str	r3, [r6, #0]
 800d4ee:	6823      	ldr	r3, [r4, #0]
 800d4f0:	0699      	lsls	r1, r3, #26
 800d4f2:	bf42      	ittt	mi
 800d4f4:	6833      	ldrmi	r3, [r6, #0]
 800d4f6:	3302      	addmi	r3, #2
 800d4f8:	6033      	strmi	r3, [r6, #0]
 800d4fa:	6825      	ldr	r5, [r4, #0]
 800d4fc:	f015 0506 	ands.w	r5, r5, #6
 800d500:	d106      	bne.n	800d510 <_printf_common+0x48>
 800d502:	f104 0a19 	add.w	sl, r4, #25
 800d506:	68e3      	ldr	r3, [r4, #12]
 800d508:	6832      	ldr	r2, [r6, #0]
 800d50a:	1a9b      	subs	r3, r3, r2
 800d50c:	42ab      	cmp	r3, r5
 800d50e:	dc26      	bgt.n	800d55e <_printf_common+0x96>
 800d510:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d514:	6822      	ldr	r2, [r4, #0]
 800d516:	3b00      	subs	r3, #0
 800d518:	bf18      	it	ne
 800d51a:	2301      	movne	r3, #1
 800d51c:	0692      	lsls	r2, r2, #26
 800d51e:	d42b      	bmi.n	800d578 <_printf_common+0xb0>
 800d520:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d524:	4641      	mov	r1, r8
 800d526:	4638      	mov	r0, r7
 800d528:	47c8      	blx	r9
 800d52a:	3001      	adds	r0, #1
 800d52c:	d01e      	beq.n	800d56c <_printf_common+0xa4>
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	6922      	ldr	r2, [r4, #16]
 800d532:	f003 0306 	and.w	r3, r3, #6
 800d536:	2b04      	cmp	r3, #4
 800d538:	bf02      	ittt	eq
 800d53a:	68e5      	ldreq	r5, [r4, #12]
 800d53c:	6833      	ldreq	r3, [r6, #0]
 800d53e:	1aed      	subeq	r5, r5, r3
 800d540:	68a3      	ldr	r3, [r4, #8]
 800d542:	bf0c      	ite	eq
 800d544:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d548:	2500      	movne	r5, #0
 800d54a:	4293      	cmp	r3, r2
 800d54c:	bfc4      	itt	gt
 800d54e:	1a9b      	subgt	r3, r3, r2
 800d550:	18ed      	addgt	r5, r5, r3
 800d552:	2600      	movs	r6, #0
 800d554:	341a      	adds	r4, #26
 800d556:	42b5      	cmp	r5, r6
 800d558:	d11a      	bne.n	800d590 <_printf_common+0xc8>
 800d55a:	2000      	movs	r0, #0
 800d55c:	e008      	b.n	800d570 <_printf_common+0xa8>
 800d55e:	2301      	movs	r3, #1
 800d560:	4652      	mov	r2, sl
 800d562:	4641      	mov	r1, r8
 800d564:	4638      	mov	r0, r7
 800d566:	47c8      	blx	r9
 800d568:	3001      	adds	r0, #1
 800d56a:	d103      	bne.n	800d574 <_printf_common+0xac>
 800d56c:	f04f 30ff 	mov.w	r0, #4294967295
 800d570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d574:	3501      	adds	r5, #1
 800d576:	e7c6      	b.n	800d506 <_printf_common+0x3e>
 800d578:	18e1      	adds	r1, r4, r3
 800d57a:	1c5a      	adds	r2, r3, #1
 800d57c:	2030      	movs	r0, #48	@ 0x30
 800d57e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d582:	4422      	add	r2, r4
 800d584:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d588:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d58c:	3302      	adds	r3, #2
 800d58e:	e7c7      	b.n	800d520 <_printf_common+0x58>
 800d590:	2301      	movs	r3, #1
 800d592:	4622      	mov	r2, r4
 800d594:	4641      	mov	r1, r8
 800d596:	4638      	mov	r0, r7
 800d598:	47c8      	blx	r9
 800d59a:	3001      	adds	r0, #1
 800d59c:	d0e6      	beq.n	800d56c <_printf_common+0xa4>
 800d59e:	3601      	adds	r6, #1
 800d5a0:	e7d9      	b.n	800d556 <_printf_common+0x8e>
	...

0800d5a4 <_printf_i>:
 800d5a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a8:	7e0f      	ldrb	r7, [r1, #24]
 800d5aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d5ac:	2f78      	cmp	r7, #120	@ 0x78
 800d5ae:	4691      	mov	r9, r2
 800d5b0:	4680      	mov	r8, r0
 800d5b2:	460c      	mov	r4, r1
 800d5b4:	469a      	mov	sl, r3
 800d5b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d5ba:	d807      	bhi.n	800d5cc <_printf_i+0x28>
 800d5bc:	2f62      	cmp	r7, #98	@ 0x62
 800d5be:	d80a      	bhi.n	800d5d6 <_printf_i+0x32>
 800d5c0:	2f00      	cmp	r7, #0
 800d5c2:	f000 80d2 	beq.w	800d76a <_printf_i+0x1c6>
 800d5c6:	2f58      	cmp	r7, #88	@ 0x58
 800d5c8:	f000 80b9 	beq.w	800d73e <_printf_i+0x19a>
 800d5cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5d4:	e03a      	b.n	800d64c <_printf_i+0xa8>
 800d5d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5da:	2b15      	cmp	r3, #21
 800d5dc:	d8f6      	bhi.n	800d5cc <_printf_i+0x28>
 800d5de:	a101      	add	r1, pc, #4	@ (adr r1, 800d5e4 <_printf_i+0x40>)
 800d5e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5e4:	0800d63d 	.word	0x0800d63d
 800d5e8:	0800d651 	.word	0x0800d651
 800d5ec:	0800d5cd 	.word	0x0800d5cd
 800d5f0:	0800d5cd 	.word	0x0800d5cd
 800d5f4:	0800d5cd 	.word	0x0800d5cd
 800d5f8:	0800d5cd 	.word	0x0800d5cd
 800d5fc:	0800d651 	.word	0x0800d651
 800d600:	0800d5cd 	.word	0x0800d5cd
 800d604:	0800d5cd 	.word	0x0800d5cd
 800d608:	0800d5cd 	.word	0x0800d5cd
 800d60c:	0800d5cd 	.word	0x0800d5cd
 800d610:	0800d751 	.word	0x0800d751
 800d614:	0800d67b 	.word	0x0800d67b
 800d618:	0800d70b 	.word	0x0800d70b
 800d61c:	0800d5cd 	.word	0x0800d5cd
 800d620:	0800d5cd 	.word	0x0800d5cd
 800d624:	0800d773 	.word	0x0800d773
 800d628:	0800d5cd 	.word	0x0800d5cd
 800d62c:	0800d67b 	.word	0x0800d67b
 800d630:	0800d5cd 	.word	0x0800d5cd
 800d634:	0800d5cd 	.word	0x0800d5cd
 800d638:	0800d713 	.word	0x0800d713
 800d63c:	6833      	ldr	r3, [r6, #0]
 800d63e:	1d1a      	adds	r2, r3, #4
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6032      	str	r2, [r6, #0]
 800d644:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d648:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d64c:	2301      	movs	r3, #1
 800d64e:	e09d      	b.n	800d78c <_printf_i+0x1e8>
 800d650:	6833      	ldr	r3, [r6, #0]
 800d652:	6820      	ldr	r0, [r4, #0]
 800d654:	1d19      	adds	r1, r3, #4
 800d656:	6031      	str	r1, [r6, #0]
 800d658:	0606      	lsls	r6, r0, #24
 800d65a:	d501      	bpl.n	800d660 <_printf_i+0xbc>
 800d65c:	681d      	ldr	r5, [r3, #0]
 800d65e:	e003      	b.n	800d668 <_printf_i+0xc4>
 800d660:	0645      	lsls	r5, r0, #25
 800d662:	d5fb      	bpl.n	800d65c <_printf_i+0xb8>
 800d664:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d668:	2d00      	cmp	r5, #0
 800d66a:	da03      	bge.n	800d674 <_printf_i+0xd0>
 800d66c:	232d      	movs	r3, #45	@ 0x2d
 800d66e:	426d      	negs	r5, r5
 800d670:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d674:	4859      	ldr	r0, [pc, #356]	@ (800d7dc <_printf_i+0x238>)
 800d676:	230a      	movs	r3, #10
 800d678:	e011      	b.n	800d69e <_printf_i+0xfa>
 800d67a:	6821      	ldr	r1, [r4, #0]
 800d67c:	6833      	ldr	r3, [r6, #0]
 800d67e:	0608      	lsls	r0, r1, #24
 800d680:	f853 5b04 	ldr.w	r5, [r3], #4
 800d684:	d402      	bmi.n	800d68c <_printf_i+0xe8>
 800d686:	0649      	lsls	r1, r1, #25
 800d688:	bf48      	it	mi
 800d68a:	b2ad      	uxthmi	r5, r5
 800d68c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d68e:	4853      	ldr	r0, [pc, #332]	@ (800d7dc <_printf_i+0x238>)
 800d690:	6033      	str	r3, [r6, #0]
 800d692:	bf14      	ite	ne
 800d694:	230a      	movne	r3, #10
 800d696:	2308      	moveq	r3, #8
 800d698:	2100      	movs	r1, #0
 800d69a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d69e:	6866      	ldr	r6, [r4, #4]
 800d6a0:	60a6      	str	r6, [r4, #8]
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	bfa2      	ittt	ge
 800d6a6:	6821      	ldrge	r1, [r4, #0]
 800d6a8:	f021 0104 	bicge.w	r1, r1, #4
 800d6ac:	6021      	strge	r1, [r4, #0]
 800d6ae:	b90d      	cbnz	r5, 800d6b4 <_printf_i+0x110>
 800d6b0:	2e00      	cmp	r6, #0
 800d6b2:	d04b      	beq.n	800d74c <_printf_i+0x1a8>
 800d6b4:	4616      	mov	r6, r2
 800d6b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6ba:	fb03 5711 	mls	r7, r3, r1, r5
 800d6be:	5dc7      	ldrb	r7, [r0, r7]
 800d6c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6c4:	462f      	mov	r7, r5
 800d6c6:	42bb      	cmp	r3, r7
 800d6c8:	460d      	mov	r5, r1
 800d6ca:	d9f4      	bls.n	800d6b6 <_printf_i+0x112>
 800d6cc:	2b08      	cmp	r3, #8
 800d6ce:	d10b      	bne.n	800d6e8 <_printf_i+0x144>
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	07df      	lsls	r7, r3, #31
 800d6d4:	d508      	bpl.n	800d6e8 <_printf_i+0x144>
 800d6d6:	6923      	ldr	r3, [r4, #16]
 800d6d8:	6861      	ldr	r1, [r4, #4]
 800d6da:	4299      	cmp	r1, r3
 800d6dc:	bfde      	ittt	le
 800d6de:	2330      	movle	r3, #48	@ 0x30
 800d6e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d6e8:	1b92      	subs	r2, r2, r6
 800d6ea:	6122      	str	r2, [r4, #16]
 800d6ec:	f8cd a000 	str.w	sl, [sp]
 800d6f0:	464b      	mov	r3, r9
 800d6f2:	aa03      	add	r2, sp, #12
 800d6f4:	4621      	mov	r1, r4
 800d6f6:	4640      	mov	r0, r8
 800d6f8:	f7ff fee6 	bl	800d4c8 <_printf_common>
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d14a      	bne.n	800d796 <_printf_i+0x1f2>
 800d700:	f04f 30ff 	mov.w	r0, #4294967295
 800d704:	b004      	add	sp, #16
 800d706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d70a:	6823      	ldr	r3, [r4, #0]
 800d70c:	f043 0320 	orr.w	r3, r3, #32
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	4833      	ldr	r0, [pc, #204]	@ (800d7e0 <_printf_i+0x23c>)
 800d714:	2778      	movs	r7, #120	@ 0x78
 800d716:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d71a:	6823      	ldr	r3, [r4, #0]
 800d71c:	6831      	ldr	r1, [r6, #0]
 800d71e:	061f      	lsls	r7, r3, #24
 800d720:	f851 5b04 	ldr.w	r5, [r1], #4
 800d724:	d402      	bmi.n	800d72c <_printf_i+0x188>
 800d726:	065f      	lsls	r7, r3, #25
 800d728:	bf48      	it	mi
 800d72a:	b2ad      	uxthmi	r5, r5
 800d72c:	6031      	str	r1, [r6, #0]
 800d72e:	07d9      	lsls	r1, r3, #31
 800d730:	bf44      	itt	mi
 800d732:	f043 0320 	orrmi.w	r3, r3, #32
 800d736:	6023      	strmi	r3, [r4, #0]
 800d738:	b11d      	cbz	r5, 800d742 <_printf_i+0x19e>
 800d73a:	2310      	movs	r3, #16
 800d73c:	e7ac      	b.n	800d698 <_printf_i+0xf4>
 800d73e:	4827      	ldr	r0, [pc, #156]	@ (800d7dc <_printf_i+0x238>)
 800d740:	e7e9      	b.n	800d716 <_printf_i+0x172>
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	f023 0320 	bic.w	r3, r3, #32
 800d748:	6023      	str	r3, [r4, #0]
 800d74a:	e7f6      	b.n	800d73a <_printf_i+0x196>
 800d74c:	4616      	mov	r6, r2
 800d74e:	e7bd      	b.n	800d6cc <_printf_i+0x128>
 800d750:	6833      	ldr	r3, [r6, #0]
 800d752:	6825      	ldr	r5, [r4, #0]
 800d754:	6961      	ldr	r1, [r4, #20]
 800d756:	1d18      	adds	r0, r3, #4
 800d758:	6030      	str	r0, [r6, #0]
 800d75a:	062e      	lsls	r6, r5, #24
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	d501      	bpl.n	800d764 <_printf_i+0x1c0>
 800d760:	6019      	str	r1, [r3, #0]
 800d762:	e002      	b.n	800d76a <_printf_i+0x1c6>
 800d764:	0668      	lsls	r0, r5, #25
 800d766:	d5fb      	bpl.n	800d760 <_printf_i+0x1bc>
 800d768:	8019      	strh	r1, [r3, #0]
 800d76a:	2300      	movs	r3, #0
 800d76c:	6123      	str	r3, [r4, #16]
 800d76e:	4616      	mov	r6, r2
 800d770:	e7bc      	b.n	800d6ec <_printf_i+0x148>
 800d772:	6833      	ldr	r3, [r6, #0]
 800d774:	1d1a      	adds	r2, r3, #4
 800d776:	6032      	str	r2, [r6, #0]
 800d778:	681e      	ldr	r6, [r3, #0]
 800d77a:	6862      	ldr	r2, [r4, #4]
 800d77c:	2100      	movs	r1, #0
 800d77e:	4630      	mov	r0, r6
 800d780:	f7f2 fd4e 	bl	8000220 <memchr>
 800d784:	b108      	cbz	r0, 800d78a <_printf_i+0x1e6>
 800d786:	1b80      	subs	r0, r0, r6
 800d788:	6060      	str	r0, [r4, #4]
 800d78a:	6863      	ldr	r3, [r4, #4]
 800d78c:	6123      	str	r3, [r4, #16]
 800d78e:	2300      	movs	r3, #0
 800d790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d794:	e7aa      	b.n	800d6ec <_printf_i+0x148>
 800d796:	6923      	ldr	r3, [r4, #16]
 800d798:	4632      	mov	r2, r6
 800d79a:	4649      	mov	r1, r9
 800d79c:	4640      	mov	r0, r8
 800d79e:	47d0      	blx	sl
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	d0ad      	beq.n	800d700 <_printf_i+0x15c>
 800d7a4:	6823      	ldr	r3, [r4, #0]
 800d7a6:	079b      	lsls	r3, r3, #30
 800d7a8:	d413      	bmi.n	800d7d2 <_printf_i+0x22e>
 800d7aa:	68e0      	ldr	r0, [r4, #12]
 800d7ac:	9b03      	ldr	r3, [sp, #12]
 800d7ae:	4298      	cmp	r0, r3
 800d7b0:	bfb8      	it	lt
 800d7b2:	4618      	movlt	r0, r3
 800d7b4:	e7a6      	b.n	800d704 <_printf_i+0x160>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	4632      	mov	r2, r6
 800d7ba:	4649      	mov	r1, r9
 800d7bc:	4640      	mov	r0, r8
 800d7be:	47d0      	blx	sl
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d09d      	beq.n	800d700 <_printf_i+0x15c>
 800d7c4:	3501      	adds	r5, #1
 800d7c6:	68e3      	ldr	r3, [r4, #12]
 800d7c8:	9903      	ldr	r1, [sp, #12]
 800d7ca:	1a5b      	subs	r3, r3, r1
 800d7cc:	42ab      	cmp	r3, r5
 800d7ce:	dcf2      	bgt.n	800d7b6 <_printf_i+0x212>
 800d7d0:	e7eb      	b.n	800d7aa <_printf_i+0x206>
 800d7d2:	2500      	movs	r5, #0
 800d7d4:	f104 0619 	add.w	r6, r4, #25
 800d7d8:	e7f5      	b.n	800d7c6 <_printf_i+0x222>
 800d7da:	bf00      	nop
 800d7dc:	0800d97d 	.word	0x0800d97d
 800d7e0:	0800d98e 	.word	0x0800d98e

0800d7e4 <memmove>:
 800d7e4:	4288      	cmp	r0, r1
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	eb01 0402 	add.w	r4, r1, r2
 800d7ec:	d902      	bls.n	800d7f4 <memmove+0x10>
 800d7ee:	4284      	cmp	r4, r0
 800d7f0:	4623      	mov	r3, r4
 800d7f2:	d807      	bhi.n	800d804 <memmove+0x20>
 800d7f4:	1e43      	subs	r3, r0, #1
 800d7f6:	42a1      	cmp	r1, r4
 800d7f8:	d008      	beq.n	800d80c <memmove+0x28>
 800d7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d802:	e7f8      	b.n	800d7f6 <memmove+0x12>
 800d804:	4402      	add	r2, r0
 800d806:	4601      	mov	r1, r0
 800d808:	428a      	cmp	r2, r1
 800d80a:	d100      	bne.n	800d80e <memmove+0x2a>
 800d80c:	bd10      	pop	{r4, pc}
 800d80e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d816:	e7f7      	b.n	800d808 <memmove+0x24>

0800d818 <_sbrk_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4d06      	ldr	r5, [pc, #24]	@ (800d834 <_sbrk_r+0x1c>)
 800d81c:	2300      	movs	r3, #0
 800d81e:	4604      	mov	r4, r0
 800d820:	4608      	mov	r0, r1
 800d822:	602b      	str	r3, [r5, #0]
 800d824:	f7f4 f9d8 	bl	8001bd8 <_sbrk>
 800d828:	1c43      	adds	r3, r0, #1
 800d82a:	d102      	bne.n	800d832 <_sbrk_r+0x1a>
 800d82c:	682b      	ldr	r3, [r5, #0]
 800d82e:	b103      	cbz	r3, 800d832 <_sbrk_r+0x1a>
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	bd38      	pop	{r3, r4, r5, pc}
 800d834:	20001764 	.word	0x20001764

0800d838 <memcpy>:
 800d838:	440a      	add	r2, r1
 800d83a:	4291      	cmp	r1, r2
 800d83c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d840:	d100      	bne.n	800d844 <memcpy+0xc>
 800d842:	4770      	bx	lr
 800d844:	b510      	push	{r4, lr}
 800d846:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d84a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d84e:	4291      	cmp	r1, r2
 800d850:	d1f9      	bne.n	800d846 <memcpy+0xe>
 800d852:	bd10      	pop	{r4, pc}

0800d854 <_realloc_r>:
 800d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d858:	4680      	mov	r8, r0
 800d85a:	4615      	mov	r5, r2
 800d85c:	460c      	mov	r4, r1
 800d85e:	b921      	cbnz	r1, 800d86a <_realloc_r+0x16>
 800d860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d864:	4611      	mov	r1, r2
 800d866:	f7ff bc4b 	b.w	800d100 <_malloc_r>
 800d86a:	b92a      	cbnz	r2, 800d878 <_realloc_r+0x24>
 800d86c:	f7ff fbdc 	bl	800d028 <_free_r>
 800d870:	2400      	movs	r4, #0
 800d872:	4620      	mov	r0, r4
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	f000 f81a 	bl	800d8b0 <_malloc_usable_size_r>
 800d87c:	4285      	cmp	r5, r0
 800d87e:	4606      	mov	r6, r0
 800d880:	d802      	bhi.n	800d888 <_realloc_r+0x34>
 800d882:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d886:	d8f4      	bhi.n	800d872 <_realloc_r+0x1e>
 800d888:	4629      	mov	r1, r5
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7ff fc38 	bl	800d100 <_malloc_r>
 800d890:	4607      	mov	r7, r0
 800d892:	2800      	cmp	r0, #0
 800d894:	d0ec      	beq.n	800d870 <_realloc_r+0x1c>
 800d896:	42b5      	cmp	r5, r6
 800d898:	462a      	mov	r2, r5
 800d89a:	4621      	mov	r1, r4
 800d89c:	bf28      	it	cs
 800d89e:	4632      	movcs	r2, r6
 800d8a0:	f7ff ffca 	bl	800d838 <memcpy>
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	f7ff fbbe 	bl	800d028 <_free_r>
 800d8ac:	463c      	mov	r4, r7
 800d8ae:	e7e0      	b.n	800d872 <_realloc_r+0x1e>

0800d8b0 <_malloc_usable_size_r>:
 800d8b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8b4:	1f18      	subs	r0, r3, #4
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	bfbc      	itt	lt
 800d8ba:	580b      	ldrlt	r3, [r1, r0]
 800d8bc:	18c0      	addlt	r0, r0, r3
 800d8be:	4770      	bx	lr

0800d8c0 <_init>:
 800d8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c2:	bf00      	nop
 800d8c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8c6:	bc08      	pop	{r3}
 800d8c8:	469e      	mov	lr, r3
 800d8ca:	4770      	bx	lr

0800d8cc <_fini>:
 800d8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ce:	bf00      	nop
 800d8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8d2:	bc08      	pop	{r3}
 800d8d4:	469e      	mov	lr, r3
 800d8d6:	4770      	bx	lr
